#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1534;
float _3914;
float _3915;
float _3916;
float _3917;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3926 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3937 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3948 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].y) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3959 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _450 = (_443 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _451 = (_443 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _452 = (_443 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[24u].y) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3970 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    float _529 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _523;
    float _532 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _524;
    float _535 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _525;
    float _542 = ((_523 - _529) * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) + _529;
    float _543 = ((_524 - _532) * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) + _532;
    float _544 = ((_525 - _535) * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) + _535;
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _603 = _601.x;
    float _604 = _601.y;
    float _605 = _601.z;
    float _612 = ((_584.x - _603) * _443) + _603;
    float _613 = ((_584.y - _604) * _443) + _604;
    float _614 = ((_584.z - _605) * _443) + _605;
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _639 = ((_626.z - _614) * _516) + _614;
    float _642 = ((((_626.x - _612) * _516) + _612) * 2.0) + (-1.0);
    float _643 = ((((_626.y - _613) * _516) + _613) * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _3981 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _649 = sqrt(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))));
    vec4 _662 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _680 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _682 = _680.x;
    float _683 = 1.0 - _682;
    float _689 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _692 = ((isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : min(_689, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _701 = (_692 - ((((((_682 - _683) * cbMtdParam._m0[24u].z) + _683) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _692))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4002 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _702 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _709 = (_702 * (cbMtdParam._m0[17u].x - _542)) + _542;
    float _710 = (_702 * (cbMtdParam._m0[17u].y - _543)) + _543;
    float _711 = (_702 * (cbMtdParam._m0[17u].z - _544)) + _544;
    vec4 _723 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _725 = _723.x;
    float _726 = 1.0 - _725;
    float _751 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_725 - _726) * cbMtdParam._m0[24u].w) + _726) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4013 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _752 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _760 = ((((cbMtdParam._m0[10u].x - _709) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _752) + _709;
    float _761 = ((((cbMtdParam._m0[10u].y - _710) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _752) + _710;
    float _762 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _711)) * _752) + _711;
    vec4 _788 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _790 = _788.x;
    float _808 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _790) * _443) + _790;
    float _825 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _808) * _516) + _808;
    float _829 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _825) * cbMtdParam._m0[19u].z) + _825;
    float _831 = _829 - (_829 * _702);
    float _833 = _831 - (_831 * _752);
    float _838 = (((_561.z - _639) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _639;
    vec4 _852 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _859 = (_852.x * 2.0) + (-1.0);
    float _860 = (_852.y * 2.0) + (-1.0);
    float _861 = dot(vec2(_859, _860), vec2(_859, _860));
    float _4024 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _869 = (_702 * (_852.z - _838)) + _838;
    float _872 = ((cbMtdParam._m0[23u].y - _869) * _752) + _869;
    vec4 _893 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _899 = (_893.x * 2.0) + (-1.0);
    float _900 = (_893.y * 2.0) + (-1.0);
    float _901 = dot(vec2(_899, _900), vec2(_899, _900));
    float _4035 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _911 = _642 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_561.x * 2.0) + (-1.0)));
    float _912 = _643 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_561.y * 2.0) + (-1.0)));
    float _924 = (((_859 - _911) + (cbMtdParam._m0[21u].x * _911)) * _702) + _911;
    float _925 = (((_860 - _912) + (cbMtdParam._m0[21u].x * _912)) * _702) + _912;
    float _926 = (_702 * (sqrt(1.0 - (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) - _649)) + _649;
    float _937 = (((_899 - _924) + (_924 * cbMtdParam._m0[22u].z)) * _752) + _924;
    float _938 = (((_900 - _925) + (_925 * cbMtdParam._m0[22u].z)) * _752) + _925;
    float _939 = ((sqrt(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) - _926) * _752) + _926;
    float _941 = cbMtdParam._m0[22u].x + _662.w;
    float _944 = fma(_939, _259 * NORMAL.x, fma(_938, _266 * TANGENT.x, (_252 * _244) * _937));
    float _947 = fma(_939, _259 * NORMAL.y, fma(_938, _266 * TANGENT.y, (_252 * _245) * _937));
    float _950 = fma(_939, _259 * NORMAL.z, fma(_938, _266 * TANGENT.z, (_252 * _246) * _937));
    float _954 = inversesqrt(dot(vec3(_944, _947, _950), vec3(_944, _947, _950)));
    float _955 = _954 * _944;
    float _956 = _954 * _947;
    float _957 = _954 * _950;
    float _4046 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _958 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4068 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4079 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4090 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4101 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _963 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _977 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1027 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1017);
    float _1028 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1017);
    float _1029 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1017);
    float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
    float _1034 = _1027 * _1033;
    float _1035 = _1028 * _1033;
    float _1036 = _1029 * _1033;
    vec4 _1041 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1043 = _1041.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1215 = sqrt(((_1027 * _1027) + (_1028 * _1028)) + (_1029 * _1029));
        float _1221 = (cbMatDynParam._m0[5u].x * _1215) + cbMatDynParam._m0[5u].y;
        float _4112 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1226 = (cbMatDynParam._m0[5u].z * _1215) + cbMatDynParam._m0[5u].w;
        float _4123 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) - _1222)) + _1222) < ((_1043 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1054 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1055 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1073 = fma(_957, cbSceneParam._m0[5u].z, fma(_956, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _955));
    float _1076 = fma(_957, cbSceneParam._m0[6u].z, fma(_956, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _955));
    float _1079 = fma(_957, cbSceneParam._m0[7u].z, fma(_956, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _955));
    uint _1092 = _291 + 9u;
    uint _1093 = _1092 + uint(cbMatDynParam._m0[0u].w);
    float _1099 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * cbInstanceData._m0[_1093].x;
    float _1100 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * cbInstanceData._m0[_1093].y;
    float _1101 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * cbInstanceData._m0[_1093].z;
    float _4134 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _4145 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _4156 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _1105 = 1.0 - _963;
    float _1106 = _1102 * _1105;
    float _1107 = _1103 * _1105;
    float _1108 = _1104 * _1105;
    float _1113 = (_1102 + (-0.039999999105930328369140625)) * _963;
    float _1114 = (_1103 + (-0.039999999105930328369140625)) * _963;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _963;
    float _1116 = _1113 + 0.039999999105930328369140625;
    float _1118 = _1114 + 0.039999999105930328369140625;
    float _1119 = _1115 + 0.039999999105930328369140625;
    vec4 _1128 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1054, cbSceneParam._m0[86u].y * _1055));
    float _1132 = ((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * TEXCOORD_5.w) * _1128.x;
    float _1133 = dot(vec3(_955, _956, _957), vec3(_1034, _1035, _1036));
    float _1136 = _1133 * 2.0;
    float _1140 = (_1136 * _955) - _1034;
    float _1141 = (_1136 * _956) - _1035;
    float _1142 = (_1136 * _957) - _1036;
    float _1146 = abs(dot(vec3(_1034, _1035, _1036), vec3(_955, _956, _957)));
    float _4167 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = sqrt(_958);
    float _1161 = exp2((_1148 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1148 * 3.0));
    float _1167 = (1.0 - _1161) * ((_1148 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1168 = _1161 * _1148;
    float _1196 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1204 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1533;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1258 = fma(_1204, cbModelParam._m0[26u].z, fma(_1200, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1196));
        float _1262 = fma(_1204, cbModelParam._m0[27u].z, fma(_1200, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1196));
        float _1266 = fma(_1204, cbModelParam._m0[28u].z, fma(_1200, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1196));
        float _1291 = _1196 + _955;
        float _1292 = _1200 + _956;
        float _1293 = _1204 + _957;
        float _1303 = fma(_1293, cbModelParam._m0[26u].z, fma(_1292, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1291)) - _1258;
        float _1304 = fma(_1293, cbModelParam._m0[27u].z, fma(_1292, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1291)) - _1262;
        float _1305 = fma(_1293, cbModelParam._m0[28u].z, fma(_1292, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1291)) - _1266;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1258 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1262 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[34u].z) + ((((((_1266 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1361 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1327.x + (-0.5));
        float _1363 = _1361 * (_1327.y + (-0.5));
        float _1364 = _1361 * (_1327.z + (-0.5));
        float _1371 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1334.x + (-0.5));
        float _1373 = _1371 * (_1334.y + (-0.5));
        float _1374 = _1371 * (_1334.z + (-0.5));
        float _1381 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1341.x + (-0.5));
        float _1383 = _1381 * (_1341.y + (-0.5));
        float _1384 = _1381 * (_1341.z + (-0.5));
        float _1391 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1348.x + (-0.5));
        float _1393 = _1391 * (_1348.y + (-0.5));
        float _1394 = _1391 * (_1348.z + (-0.5));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = _1362 * 0.5;
        float _1399 = _1372 * 0.5;
        float _1400 = _1382 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1415 = (dot(vec3(_955, _956, _957), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1425 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4215 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1427 + 1.0))) + _1432) * _1395;
        float _1442 = _1363 * 0.5;
        float _1443 = _1373 * 0.5;
        float _1444 = _1383 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_955, _956, _957), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4248 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1469 + 1.0))) + _1474) * _1396;
        float _1484 = _1364 * 0.5;
        float _1485 = _1374 * 0.5;
        float _1486 = _1384 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_955, _956, _957), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4281 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1511 + 1.0))) + _1516) * _1397;
        _1533 = _1364;
        _1535 = _1363;
        _1536 = _1362;
        _1537 = _1374;
        _1538 = _1373;
        _1539 = _1372;
        _1540 = _1384;
        _1541 = _1383;
        _1542 = _1382;
        _1543 = _1397;
        _1544 = _1396;
        _1545 = _1395;
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1548 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1534;
        _1535 = _1534;
        _1536 = _1534;
        _1537 = _1534;
        _1538 = _1534;
        _1539 = _1534;
        _1540 = _1534;
        _1541 = _1534;
        _1542 = _1534;
        _1543 = _1534;
        _1544 = _1534;
        _1545 = _1534;
        _1546 = 0.0;
        _1547 = 0.0;
        _1548 = 0.0;
    }
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1575 = fma(_1204, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1196));
        float _1579 = fma(_1204, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1196));
        float _1583 = fma(_1204, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1196));
        float _1606 = _1196 + _955;
        float _1607 = _1200 + _956;
        float _1608 = _1204 + _957;
        float _1618 = fma(_1608, cbModelParam._m0[30u].z, fma(_1607, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1606)) - _1575;
        float _1619 = fma(_1608, cbModelParam._m0[31u].z, fma(_1607, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1606)) - _1579;
        float _1620 = fma(_1608, cbModelParam._m0[32u].z, fma(_1607, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1606)) - _1583;
        float _1624 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
        float _1637 = ((_1624 * _1618) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1575 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1638 = ((_1624 * _1619) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1579 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1639 = ((_1624 * _1620) / cbModelParam._m0[35u].z) + ((((((_1583 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1662 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        float _1674 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1641.x + (-0.5));
        float _1676 = _1674 * (_1641.y + (-0.5));
        float _1677 = _1674 * (_1641.z + (-0.5));
        float _1684 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1648.x + (-0.5));
        float _1686 = _1684 * (_1648.y + (-0.5));
        float _1687 = _1684 * (_1648.z + (-0.5));
        float _1694 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1655.x + (-0.5));
        float _1696 = _1694 * (_1655.y + (-0.5));
        float _1697 = _1694 * (_1655.z + (-0.5));
        float _1704 = exp2((_1662.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = _1704 * (_1662.x + (-0.5));
        float _1706 = _1704 * (_1662.y + (-0.5));
        float _1707 = _1704 * (_1662.z + (-0.5));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1710 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1711 = _1675 * 0.5;
        float _1712 = _1685 * 0.5;
        float _1713 = _1695 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_955, _956, _957), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4344 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1738 + 1.0))) + _1743) * _1708;
        float _1753 = _1676 * 0.5;
        float _1754 = _1686 * 0.5;
        float _1755 = _1696 * 0.5;
        float _1756 = dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755));
        float _1761 = (_1756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1756);
        float _1769 = (dot(vec3(_955, _956, _957), vec3(_1761 * _1753, _1761 * _1754, _1761 * _1755)) + 1.0) * 0.5;
        float _4355 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1778 = sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755)) / (_1709 + 9.9999997473787516355514526367188e-06);
        float _4366 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1780 = _1779 * 2.0;
        float _1784 = (1.0 - _1779) / (_1779 + 1.0);
        float _4377 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1794 = ((((1.0 - _1785) * (_1780 + 2.0)) * exp2(log2(isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_1780 + 1.0))) + _1785) * _1709;
        float _1795 = _1677 * 0.5;
        float _1796 = _1687 * 0.5;
        float _1797 = _1697 * 0.5;
        float _1798 = dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797));
        float _1803 = (_1798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1798);
        float _1811 = (dot(vec3(_955, _956, _957), vec3(_1803 * _1795, _1803 * _1796, _1803 * _1797)) + 1.0) * 0.5;
        float _4388 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797)) / (_1710 + 9.9999997473787516355514526367188e-06);
        float _4399 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1822 = _1821 * 2.0;
        float _1826 = (1.0 - _1821) / (_1821 + 1.0);
        float _4410 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1836 = ((((1.0 - _1827) * (_1822 + 2.0)) * exp2(log2(isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_1822 + 1.0))) + _1827) * _1710;
        _1844 = _1677;
        _1845 = _1676;
        _1846 = _1675;
        _1847 = _1687;
        _1848 = _1686;
        _1849 = _1685;
        _1850 = _1697;
        _1851 = _1696;
        _1852 = _1695;
        _1853 = _1710;
        _1854 = _1709;
        _1855 = _1708;
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
        _1857 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)));
        _1858 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)));
    }
    else
    {
        _1844 = _1534;
        _1845 = _1534;
        _1846 = _1534;
        _1847 = _1534;
        _1848 = _1534;
        _1849 = _1534;
        _1850 = _1534;
        _1851 = _1534;
        _1852 = _1534;
        _1853 = _1534;
        _1854 = _1534;
        _1855 = _1534;
        _1856 = 0.0;
        _1857 = 0.0;
        _1858 = 0.0;
    }
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1546)) + _1546;
    float _1869 = (cbModelParam._m0[1u].x * (_1857 - _1547)) + _1547;
    float _1870 = (cbModelParam._m0[1u].x * (_1858 - _1548)) + _1548;
    float _1891 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1869, cbSceneParam._m0[89u].y, _1868 * cbSceneParam._m0[89u].x));
    float _1894 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1869, cbSceneParam._m0[90u].y, _1868 * cbSceneParam._m0[90u].x));
    float _1897 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1869, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1868));
    float _1912 = _1140 * 0.5;
    float _1913 = _1141 * 0.5;
    float _1914 = _1142 * 0.5;
    float _1915 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1846, _1849, _1852, _1855));
    float _1918 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1845, _1848, _1851, _1854));
    float _1921 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1955;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1928 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1533, _1537, _1540, _1543));
        float _1932 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1535, _1538, _1541, _1544));
        float _1936 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1536, _1539, _1542, _1545));
        float _1943 = dot(vec4(cbModelParam._m0[39u]), vec4(_1912, _1913, _1914, 1.0));
        _1955 = dot(vec3(isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)), isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1943) ? 0.0 : (isnan(0.0) ? _1943 : max(0.0, _1943))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1955 = 1.0;
    }
    float _1966;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1957 = dot(vec4(cbModelParam._m0[40u]), vec4(_1912, _1913, _1914, 1.0));
        _1966 = dot(vec3(isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1957) ? 0.0 : (isnan(0.0) ? _1957 : max(0.0, _1957))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1966 = 1.0;
    }
    float _1970 = (_1966 * cbModelParam._m0[1u].x) + (_1955 * (1.0 - cbModelParam._m0[1u].x));
    float _1980 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _958);
    float _1981 = isnan(_1980) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1980 : min(cbModelParam._m0[25u].z, _1980));
    float _2062;
    float _2064;
    float _2066;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2029 = fma(_1204, cbModelParam._m0[13u].z, fma(_1200, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1196)) + cbModelParam._m0[13u].w;
        float _2033 = fma(_1204, cbModelParam._m0[14u].z, fma(_1200, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1196)) + cbModelParam._m0[14u].w;
        float _2037 = fma(_1204, cbModelParam._m0[15u].z, fma(_1200, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1196)) + cbModelParam._m0[15u].w;
        float _2040 = fma(_1142, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140));
        float _2043 = fma(_1142, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140));
        float _2046 = fma(_1142, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140));
        float _2074;
        if (_2040 > 0.0)
        {
            _2074 = abs((1.0 - _2029) / _2040);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2029 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2074 = frontier_phi_17_15_ladder;
        }
        float _2277;
        if (_2043 > 0.0)
        {
            _2277 = abs((1.0 - _2033) / _2043);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2033 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2277 = frontier_phi_26_22_ladder;
        }
        float _2531;
        if (_2046 > 0.0)
        {
            _2531 = abs((1.0 - _2037) / _2046);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2037 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2531 = frontier_phi_38_33_ladder;
        }
        float _2533 = isnan(_2277) ? _2074 : (isnan(_2074) ? _2277 : min(_2074, _2277));
        float _2534 = isnan(_2531) ? _2533 : (isnan(_2533) ? _2531 : min(_2533, _2531));
        float _2538 = (_2534 * _2040) + _2029;
        float _2539 = (_2534 * _2043) + _2033;
        float _2540 = (_2534 * _2046) + _2037;
        float _2541 = _2534 * 9.9999997473787516355514526367188e-05;
        float _2543 = (-1.0) - _2541;
        float _2545 = _2541 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2540 > _2545) || ((_2540 < _2543) || ((_2539 > _2545) || ((_2539 < _2543) || ((_2538 < _2543) || (_2538 > _2545))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2540, cbModelParam._m0[9u].z, fma(_2539, cbModelParam._m0[9u].y, _2538 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2540, cbModelParam._m0[10u].z, fma(_2539, cbModelParam._m0[10u].y, _2538 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2540, cbModelParam._m0[11u].z, fma(_2539, cbModelParam._m0[11u].y, _2538 * cbModelParam._m0[11u].x))), _1981);
            frontier_phi_16_38_ladder = _2668.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2668.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2668.x * cbModelParam._m0[1u].y;
        }
        _2062 = frontier_phi_16_38_ladder_2;
        _2064 = frontier_phi_16_38_ladder_1;
        _2066 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2050 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1140, _1141, _1142), _1981);
        _2062 = _2050.x * cbModelParam._m0[1u].y;
        _2064 = _2050.y * cbModelParam._m0[1u].y;
        _2066 = _2050.z * cbModelParam._m0[1u].y;
    }
    float _2070 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _958);
    float _2071 = isnan(_2070) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2070 : min(cbModelParam._m0[25u].w, _2070));
    float _2161;
    float _2163;
    float _2165;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2125 = fma(_1204, cbModelParam._m0[21u].z, fma(_1200, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1196)) + cbModelParam._m0[21u].w;
        float _2129 = fma(_1204, cbModelParam._m0[22u].z, fma(_1200, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1196)) + cbModelParam._m0[22u].w;
        float _2133 = fma(_1204, cbModelParam._m0[23u].z, fma(_1200, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1196)) + cbModelParam._m0[23u].w;
        float _2136 = fma(_1142, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140));
        float _2139 = fma(_1142, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140));
        float _2142 = fma(_1142, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140));
        float _2282;
        if (_2136 > 0.0)
        {
            _2282 = abs((1.0 - _2125) / _2136);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2125 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2282 = frontier_phi_28_24_ladder;
        }
        float _2558;
        if (_2139 > 0.0)
        {
            _2558 = abs((1.0 - _2129) / _2139);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2129 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2558 = frontier_phi_40_35_ladder;
        }
        float _2771;
        if (_2142 > 0.0)
        {
            _2771 = abs((1.0 - _2133) / _2142);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2142 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2133 + 1.0) / _2142);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2771 = frontier_phi_49_46_ladder;
        }
        float _2773 = isnan(_2558) ? _2282 : (isnan(_2282) ? _2558 : min(_2282, _2558));
        float _2774 = isnan(_2771) ? _2773 : (isnan(_2773) ? _2771 : min(_2773, _2771));
        float _2778 = (_2774 * _2136) + _2125;
        float _2779 = (_2774 * _2139) + _2129;
        float _2780 = (_2774 * _2142) + _2133;
        float _2781 = _2774 * 9.9999997473787516355514526367188e-05;
        float _2782 = (-1.0) - _2781;
        float _2784 = _2781 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2780 > _2784) || ((_2780 < _2782) || ((_2779 > _2784) || ((_2779 < _2782) || ((_2778 < _2782) || (_2778 > _2784))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2780, cbModelParam._m0[17u].z, fma(_2779, cbModelParam._m0[17u].y, _2778 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2780, cbModelParam._m0[18u].z, fma(_2779, cbModelParam._m0[18u].y, _2778 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2780, cbModelParam._m0[19u].z, fma(_2779, cbModelParam._m0[19u].y, _2778 * cbModelParam._m0[19u].x))), _2071);
            frontier_phi_25_49_ladder = _2979.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2979.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2979.x * cbModelParam._m0[1u].z;
        }
        _2161 = frontier_phi_25_49_ladder_2;
        _2163 = frontier_phi_25_49_ladder_1;
        _2165 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2145 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1140, _1141, _1142), _2071);
        _2161 = _2145.x * cbModelParam._m0[1u].z;
        _2163 = _2145.y * cbModelParam._m0[1u].z;
        _2165 = _2145.z * cbModelParam._m0[1u].z;
    }
    float _2178 = (((_1167 * _1116) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2161 - _2062)) + _2062);
    float _2180 = (((_1167 * _1118) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2163 - _2064)) + _2064);
    float _2182 = (((_1167 * _1119) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2165 - _2066)) + _2066);
    float _2185 = fma(_2182, cbSceneParam._m0[89u].z, fma(_2180, cbSceneParam._m0[89u].y, _2178 * cbSceneParam._m0[89u].x));
    float _2188 = fma(_2182, cbSceneParam._m0[90u].z, fma(_2180, cbSceneParam._m0[90u].y, _2178 * cbSceneParam._m0[90u].x));
    float _2191 = fma(_2182, cbSceneParam._m0[91u].z, fma(_2180, cbSceneParam._m0[91u].y, _2178 * cbSceneParam._m0[91u].x));
    uvec4 _2201 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2203 = _2201.x * 14u;
    uint _2204 = _2203 + 13u;
    float _2211 = _1132 + (-1.0);
    float _2216 = (cbLight._m0[_2204].x * _2211) + 1.0;
    float _2217 = (cbLight._m0[_2204].y * _2211) + 1.0;
    float _2218 = (cbLight._m0[_2204].z * _2211) + 1.0;
    float _2219 = (cbLight._m0[_2204].w * _2211) + 1.0;
    uint _2220 = _2203 + 5u;
    float _2226 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
    uint _2230 = _2203 + 4u;
    float _2236 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
    uint _2240 = _2203 | 1u;
    float _2251 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_955, _956, _957));
    float _2254 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_955, _956, _957));
    float _4546 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _4557 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2259 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * 0.3183098733425140380859375;
    float _2261 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * 0.3183098733425140380859375;
    float _2268 = ((cbLight._m0[_2220].x * _2226) * _2261) + ((cbLight._m0[_2230].x * _2236) * _2259);
    float _2269 = ((_2226 * cbLight._m0[_2220].y) * _2261) + ((_2236 * cbLight._m0[_2230].y) * _2259);
    float _2270 = ((_2226 * cbLight._m0[_2220].z) * _2261) + ((_2236 * cbLight._m0[_2230].z) * _2259);
    uvec4 _2274 = floatBitsToUint(cbLight._m0[_2203 + 12u]);
    bool _2276 = _2274.x == 0u;
    float _2287;
    float _2289;
    float _2291;
    if (_2276)
    {
        _2287 = _2268;
        _2289 = _2269;
        _2291 = _2270;
    }
    else
    {
        uint _2295 = _2203 + 6u;
        float _2311 = (dot(vec3(cbLight._m0[_2203 + 2u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2312 = _2311 * _2311;
        float _4568 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2313 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2314 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2287 = (((cbLight._m0[_2295].x * 0.3183098733425140380859375) * _2313) * _2314) + _2268;
        _2289 = (((cbLight._m0[_2295].y * 0.3183098733425140380859375) * _2313) * _2314) + _2269;
        _2291 = (((cbLight._m0[_2295].z * 0.3183098733425140380859375) * _2313) * _2314) + _2270;
    }
    bool _2294 = _2274.y == 0u;
    float _2332;
    float _2334;
    float _2336;
    if (_2294)
    {
        _2332 = _2287;
        _2334 = _2289;
        _2336 = _2291;
    }
    else
    {
        uint _2502 = _2203 + 7u;
        float _2518 = (dot(vec3(cbLight._m0[_2203 + 3u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2519 = _2518 * _2518;
        float _4584 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2520 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2521 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2332 = (((cbLight._m0[_2502].x * 0.3183098733425140380859375) * _2520) * _2521) + _2287;
        _2334 = (((cbLight._m0[_2502].y * 0.3183098733425140380859375) * _2520) * _2521) + _2289;
        _2336 = (((cbLight._m0[_2502].z * 0.3183098733425140380859375) * _2520) * _2521) + _2291;
    }
    uint _2339 = _2203 + 8u;
    float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _958) * 0.949999988079071044921875);
    float _2353 = _2352 * _2352;
    float _2354 = cbLight._m0[_2203].x + _1034;
    float _2355 = cbLight._m0[_2203].y + _1035;
    float _2356 = cbLight._m0[_2203].z + _1036;
    float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
    float _2361 = _2360 * _2354;
    float _2362 = _2360 * _2355;
    float _2363 = _2360 * _2356;
    float _2364 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2203].xyz));
    float _4600 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _4611 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _2368 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2369 = dot(vec3(_955, _956, _957), vec3(_2361, _2362, _2363));
    float _4622 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2373 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2361, _2362, _2363));
    float _4633 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2377 = _2353 * _2353;
    float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
    float _2389 = exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0);
    float _2390 = 0.959999978542327880859375 - _1113;
    float _2392 = 0.959999978542327880859375 - _1114;
    float _2393 = 0.959999978542327880859375 - _1115;
    float _2400 = 1.0 - _2353;
    float _2411 = (0.5 / (((_2368 * ((_2367 * _2400) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2400) + _2353) * _2367))) * _2367;
    float _4644 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2413 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
    uint _2424 = _2203 + 9u;
    float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _958) * 0.949999988079071044921875);
    float _2436 = _2435 * _2435;
    float _2437 = cbLight._m0[_2240].x + _1034;
    float _2438 = cbLight._m0[_2240].y + _1035;
    float _2439 = cbLight._m0[_2240].z + _1036;
    float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
    float _2444 = _2443 * _2437;
    float _2445 = _2443 * _2438;
    float _2446 = _2443 * _2439;
    float _2447 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2240].xyz));
    float _4655 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2451 = dot(vec3(_955, _956, _957), vec3(_2444, _2445, _2446));
    float _4666 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2454 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2455 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2444, _2445, _2446));
    float _4677 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2459 = _2436 * _2436;
    float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
    float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
    float _2477 = 1.0 - _2436;
    float _2487 = (0.5 / (((_2368 * ((_2450 * _2477) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2477) + _2436) * _2450))) * _2450;
    float _4688 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2489 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
    float _2499 = (((((_2470 * _2390) + _1116) * cbLight._m0[_2424].x) * _2489) * _2226) + (((((_2389 * _2390) + _1116) * cbLight._m0[_2339].x) * _2413) * _2236);
    float _2500 = (((((_2470 * _2392) + _1118) * cbLight._m0[_2424].y) * _2489) * _2226) + (((((_2389 * _2392) + _1118) * cbLight._m0[_2339].y) * _2413) * _2236);
    float _2501 = (((((_2470 * _2393) + _1119) * cbLight._m0[_2424].z) * _2489) * _2226) + (((((_2389 * _2393) + _1119) * cbLight._m0[_2339].z) * _2413) * _2236);
    float _2563;
    float _2565;
    float _2567;
    if (_2276)
    {
        _2563 = _2499;
        _2565 = _2500;
        _2567 = _2501;
    }
    else
    {
        uint _2569 = _2203 + 2u;
        uint _2573 = _2203 + 10u;
        float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2569].w)) * _958) * 0.949999988079071044921875);
        float _2588 = _2587 * _2587;
        float _2589 = cbLight._m0[_2569].x + _1034;
        float _2590 = cbLight._m0[_2569].y + _1035;
        float _2591 = cbLight._m0[_2569].z + _1036;
        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
        float _2596 = _2595 * _2589;
        float _2597 = _2595 * _2590;
        float _2598 = _2595 * _2591;
        float _2599 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2569].xyz));
        float _4699 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2603 = dot(vec3(_955, _956, _957), vec3(_2596, _2597, _2598));
        float _4710 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2607 = dot(vec3(cbLight._m0[_2569].xyz), vec3(_2596, _2597, _2598));
        float _4721 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _2588 * _2588;
        float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
        float _2622 = exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0);
        float _2629 = 1.0 - _2588;
        float _2639 = (0.5 / (((_2368 * ((_2602 * _2629) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2629) + _2588) * _2602))) * _2602;
        float _4732 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2563 = (((((_2622 * _2390) + _1116) * cbLight._m0[_2573].x) * _2641) * _2642) + _2499;
        _2565 = (((((_2622 * _2392) + _1118) * cbLight._m0[_2573].y) * _2641) * _2642) + _2500;
        _2567 = (((((_2622 * _2393) + _1119) * cbLight._m0[_2573].z) * _2641) * _2642) + _2501;
    }
    float _2677;
    float _2679;
    float _2681;
    if (_2294)
    {
        _2677 = _2563;
        _2679 = _2565;
        _2681 = _2567;
    }
    else
    {
        uint _2688 = _2203 + 3u;
        uint _2692 = _2203 + 11u;
        float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _958) * 0.949999988079071044921875);
        float _2707 = _2706 * _2706;
        float _2708 = cbLight._m0[_2688].x + _1034;
        float _2709 = cbLight._m0[_2688].y + _1035;
        float _2710 = cbLight._m0[_2688].z + _1036;
        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
        float _2715 = _2714 * _2708;
        float _2716 = _2714 * _2709;
        float _2717 = _2714 * _2710;
        float _2718 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2688].xyz));
        float _4748 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2722 = dot(vec3(_955, _956, _957), vec3(_2715, _2716, _2717));
        float _4759 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _2726 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_2715, _2716, _2717));
        float _4770 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2730 = _2707 * _2707;
        float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
        float _2741 = exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0);
        float _2748 = 1.0 - _2707;
        float _2758 = (0.5 / (((_2368 * ((_2721 * _2748) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2748) + _2707) * _2721))) * _2721;
        float _4781 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2760 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
        float _2761 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2677 = (((((_2741 * _2390) + _1116) * cbLight._m0[_2692].x) * _2760) * _2761) + _2563;
        _2679 = (((((_2741 * _2392) + _1118) * cbLight._m0[_2692].y) * _2760) * _2761) + _2565;
        _2681 = (((((_2741 * _2393) + _1119) * cbLight._m0[_2692].z) * _2760) * _2761) + _2567;
    }
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_2201.y == 0u)
    {
        float _2836 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2837 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2836;
        float _2838 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2836;
        float _2839 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2836;
        uvec4 _2851 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2852 = _2851.x;
        uint _2863 = uint((float(_2851.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1055) / _2852))) + floor(float(uint(cbSceneParam._m0[85u].x * _1054) / _2852)));
        float _2873 = (log2(_2839 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2874 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        uint _2877 = uint(isnan(14.0) ? _2874 : (isnan(_2874) ? 14.0 : min(_2874, 14.0)));
        uvec4 _2882 = texelFetch(g_lightClusterGridBuffer, int(((_2877 << 2u) + (_2863 << 6u)) >> 2u));
        uint _2883 = _2882.x;
        uint _2884 = _2851.z;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((((1u << ((_2884 >> 4u) & 15u)) + 4294967295u) & _2883) == 0u) || ((_2884 & 240u) == 0u))
        {
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
        }
        else
        {
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            uint _3143 = 0u;
            uint _3152;
            bool _3153;
            for (;;)
            {
                _3152 = texelFetch(g_lightClassification, int((((_2877 << 5u) + (_2863 << 9u)) + (_3143 << 2u)) >> 2u)).x;
                _3153 = _3152 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3153)
                {
                    frontier_phi_66_pred = _3137;
                    frontier_phi_66_pred_1 = _3142;
                    frontier_phi_66_pred_2 = _3141;
                    frontier_phi_66_pred_3 = _3140;
                    frontier_phi_66_pred_4 = _3139;
                    frontier_phi_66_pred_5 = _3138;
                }
                else
                {
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    uint _3288;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3152;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    for (;;)
                    {
                        uint _3292 = uint(findLSB(_3288)) + (_3143 << 5u);
                        uint _3289 = (_3288 + 4294967295u) & _3288;
                        uint _3294 = _3292 * 48u;
                        vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 3u)).x));
                        uint _3314 = (_3292 * 48u) + 4u;
                        vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 3u)).x));
                        uint _3333 = (_3292 * 48u) + 8u;
                        vec3 _3344 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x));
                        float _3348 = _3308.x - _2837;
                        float _3349 = _3308.y - _2838;
                        float _3350 = _3308.z - _2839;
                        float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                        float _3354 = inversesqrt(_3351);
                        float _3355 = _3354 * _3348;
                        float _3356 = _3354 * _3349;
                        float _3357 = _3354 * _3350;
                        float _3358 = dot(vec3(_1073, _1076, _1079), vec3(_3355, _3356, _3357));
                        float _3363 = 1.0 - (_3351 * _3308.w);
                        float _4807 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3364 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3365 = sqrt(_3351) * _3327.w;
                        float _3368 = 1.39999997615814208984375 / (_3365 + 1.39999997615814208984375);
                        float _3369 = _3368 * _3368;
                        float _3372 = ((1.0 - _3369) * _3358) + _3369;
                        float _3375 = _3365 * _3365;
                        float _3379 = ((isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))) * _3364) / ((_3375 * 0.699999988079071044921875) + 1.0);
                        float _3383 = (-0.0) - _2837;
                        float _3384 = (-0.0) - _2838;
                        float _3385 = (-0.0) - _2839;
                        float _3389 = inversesqrt(dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385)));
                        float _3390 = _3389 * _3383;
                        float _3391 = _3389 * _3384;
                        float _3392 = _3389 * _3385;
                        float _3400 = exp2(log2(1.0 / ((_3375 * 3.5) + 5.0)) * 0.25);
                        float _3401 = 1.0 - _1148;
                        float _3408 = sqrt(1.0 - ((1.0 - (_3401 * _3401)) * (1.0 - (_3400 * _3400))));
                        float _3409 = _3408 * _3408;
                        float _3410 = _3409 * _3409;
                        float _3411 = _3390 + _3355;
                        float _3412 = _3391 + _3356;
                        float _3413 = _3392 + _3357;
                        float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                        float _3421 = dot(vec3(_1073, _1076, _1079), vec3(_3390, _3391, _3392));
                        float _4823 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3425 = dot(vec3(_1073, _1076, _1079), vec3(_3417 * _3411, _3417 * _3412, _3417 * _3413));
                        float _4834 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                        float _3432 = ((_3428 * _3428) * (_3410 + (-1.0))) + 1.0;
                        float _3433 = _3368 * _3409;
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3358) + _3434;
                        float _4845 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                        float _3439 = 1.0 - _3409;
                        float _3449 = (0.5 / (((_3438 * ((_3424 * _3439) + _3409)) + 9.9999999392252902907785028219223e-09) + (((_3438 * _3439) + _3409) * _3424))) * _3438;
                        float _4856 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3460 = (((_3410 * 3.1415927410125732421875) * (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) / ((_3432 * _3432) * ((_3375 * 2.1991131305694580078125) + 3.141590118408203125))) * _3364;
                        _3212 = (_3379 * _3327.x) + _3285;
                        _3213 = (_3379 * _3327.y) + _3286;
                        _3214 = (_3379 * _3327.z) + _3287;
                        _3209 = (_3460 * _3344.x) + _3282;
                        _3210 = (_3460 * _3344.y) + _3283;
                        _3211 = (_3460 * _3344.z) + _3284;
                        if (_3289 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3289;
                        }
                    }
                    frontier_phi_66_pred = _3209;
                    frontier_phi_66_pred_1 = _3214;
                    frontier_phi_66_pred_2 = _3213;
                    frontier_phi_66_pred_3 = _3212;
                    frontier_phi_66_pred_4 = _3211;
                    frontier_phi_66_pred_5 = _3210;
                }
                _2985 = frontier_phi_66_pred;
                _2995 = frontier_phi_66_pred_1;
                _2993 = frontier_phi_66_pred_2;
                _2991 = frontier_phi_66_pred_3;
                _2989 = frontier_phi_66_pred_4;
                _2987 = frontier_phi_66_pred_5;
                uint _3144 = _3143 + 1u;
                if (_3144 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3137 = _2985;
                    _3138 = _2987;
                    _3139 = _2989;
                    _3140 = _2991;
                    _3141 = _2993;
                    _3142 = _2995;
                    _3143 = _3144;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
        }
        uvec4 _2998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2999 = _2998.z;
        uint _3001 = (_2999 >> 8u) & 15u;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        if (((4294967295u << _3001) & _2883) == 0u)
        {
            _3105 = _2984;
            _3107 = _2986;
            _3109 = _2988;
            _3111 = _2990;
            _3113 = _2992;
            _3115 = _2994;
        }
        else
        {
            float _3130 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
            float _3131 = _3130 * _2837;
            float _3132 = _3130 * _2838;
            float _3133 = _3130 * _2839;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3001 < ((_2999 >> 12u) & 15u))
            {
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3265 = _2984;
                float _3266 = _2986;
                float _3267 = _2988;
                float _3268 = _2990;
                float _3269 = _2992;
                float _3270 = _2994;
                uint _3271 = _3001;
                uint _3280;
                bool _3281;
                for (;;)
                {
                    _3280 = texelFetch(g_lightClassification, int((((_2877 << 5u) + (_2863 << 9u)) + (_3271 << 2u)) >> 2u)).x;
                    _3281 = _3280 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3281)
                    {
                        frontier_phi_77_pred = _3270;
                        frontier_phi_77_pred_1 = _3269;
                        frontier_phi_77_pred_2 = _3268;
                        frontier_phi_77_pred_3 = _3267;
                        frontier_phi_77_pred_4 = _3266;
                        frontier_phi_77_pred_5 = _3265;
                    }
                    else
                    {
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3487 = _3265;
                        float _3488 = _3266;
                        float _3489 = _3267;
                        float _3490 = _3268;
                        float _3491 = _3269;
                        float _3492 = _3270;
                        uint _3493 = _3280;
                        uint _3494;
                        vec4 _3519;
                        float _3520;
                        vec4 _3535;
                        vec3 _3547;
                        vec4 _3562;
                        vec4 _3577;
                        float _3623;
                        bool _3624;
                        for (;;)
                        {
                            uint _3504 = ((_3271 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3493));
                            _3494 = (_3493 + 4294967295u) & _3493;
                            uint _3506 = _3504 * 40u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            _3520 = _3519.w;
                            uint _3522 = (_3504 * 40u) + 4u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3504 * 40u) + 8u;
                            _3547 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x));
                            uint _3549 = (_3504 * 40u) + 16u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3504 * 40u) + 20u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3504 * 40u) + 24u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3598 = (_3504 * 40u) + 28u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            _3623 = fma(_2839, _3611.z, fma(_2838, _3611.y, _3611.x * _2837)) + _3611.w;
                            _3624 = !((fma(_2839, _3592.z, fma(_2838, _3592.y, _3592.x * _2837)) + _3592.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3624)
                            {
                                float _3651 = _3519.x - _2837;
                                float _3652 = _3519.y - _2838;
                                float _3653 = _3519.z - _2839;
                                float _3654 = dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653));
                                float _3657 = inversesqrt(_3654);
                                float _3658 = _3657 * _3651;
                                float _3659 = _3657 * _3652;
                                float _3660 = _3657 * _3653;
                                float _3664 = 1.0 - (_3654 / (_3520 * _3520));
                                float _4867 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3669 = sqrt(_3654) * _3535.w;
                                float _3671 = 1.39999997615814208984375 / (_3669 + 1.39999997615814208984375);
                                float _3672 = _3671 * _3671;
                                float _3675 = ((1.0 - _3672) * dot(vec3(_3658, _3659, _3660), vec3(_1073, _1076, _1079))) + _3672;
                                float _3678 = _3669 * _3669;
                                float _3682 = (fma(_2839, _3562.z, fma(_2838, _3562.y, _3562.x * _2837)) + _3562.w) / _3623;
                                float _3683 = (fma(_2839, _3577.z, fma(_2838, _3577.y, _3577.x * _2837)) + _3577.w) / _3623;
                                float _3687 = 1.0 - dot(vec2(_3682, _3683), vec2(_3682, _3683));
                                float _4883 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3689 = _3688 * (((isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0))) * _3665) / ((_3678 * 0.699999988079071044921875) + 1.0));
                                float _3701 = exp2(log2(1.0 / ((_3678 * 3.5) + 5.0)) * 0.25);
                                float _3702 = 1.0 - _1148;
                                float _3709 = sqrt(1.0 - ((1.0 - (_3702 * _3702)) * (1.0 - (_3701 * _3701))));
                                float _3710 = _3709 * _3709;
                                float _3711 = _3710 * _3710;
                                float _3712 = _3658 - _3131;
                                float _3713 = _3659 - _3132;
                                float _3714 = _3660 - _3133;
                                float _3718 = inversesqrt(dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714)));
                                float _3722 = dot(vec3(_1073, _1076, _1079), vec3((-0.0) - _3131, (-0.0) - _3132, (-0.0) - _3133));
                                float _4894 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3726 = dot(vec3(_1073, _1076, _1079), vec3(_3718 * _3712, _3718 * _3713, _3718 * _3714));
                                float _4905 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3733 = ((_3729 * _3729) * (_3711 + (-1.0))) + 1.0;
                                float _3734 = _3671 * _3710;
                                float _3735 = _3734 * _3734;
                                float _3741 = ((1.0 - _3735) * dot(vec3(_1073, _1076, _1079), vec3(_3658, _3659, _3660))) + _3735;
                                float _4916 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3743 = 1.0 - _3710;
                                float _3753 = (0.5 / (((_3742 * ((_3725 * _3743) + _3710)) + 9.9999999392252902907785028219223e-09) + (((_3742 * _3743) + _3710) * _3725))) * _3742;
                                float _4927 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3763 = (_3688 * _3665) * (((_3711 * 3.1415927410125732421875) * (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) / ((_3733 * _3733) * ((_3678 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3689 * _3535.y;
                                frontier_phi_83_pred_1 = _3689 * _3535.x;
                                frontier_phi_83_pred_2 = _3763 * _3547.z;
                                frontier_phi_83_pred_3 = _3763 * _3547.y;
                                frontier_phi_83_pred_4 = _3763 * _3547.x;
                                frontier_phi_83_pred_5 = _3689 * _3535.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3771 = frontier_phi_83_pred;
                            _3770 = frontier_phi_83_pred_1;
                            _3769 = frontier_phi_83_pred_2;
                            _3768 = frontier_phi_83_pred_3;
                            _3767 = frontier_phi_83_pred_4;
                            _3772 = frontier_phi_83_pred_5;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            if (_3494 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3494;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3479;
                        frontier_phi_77_pred_1 = _3478;
                        frontier_phi_77_pred_2 = _3477;
                        frontier_phi_77_pred_3 = _3476;
                        frontier_phi_77_pred_4 = _3475;
                        frontier_phi_77_pred_5 = _3474;
                    }
                    _3116 = frontier_phi_77_pred;
                    _3114 = frontier_phi_77_pred_1;
                    _3112 = frontier_phi_77_pred_2;
                    _3110 = frontier_phi_77_pred_3;
                    _3108 = frontier_phi_77_pred_4;
                    _3106 = frontier_phi_77_pred_5;
                    uint _3272 = _3271 + 1u;
                    if (_3272 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3265 = _3106;
                        _3266 = _3108;
                        _3267 = _3110;
                        _3268 = _3112;
                        _3269 = _3114;
                        _3270 = _3116;
                        _3271 = _3272;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3110;
                frontier_phi_58_59_ladder_1 = _3116;
                frontier_phi_58_59_ladder_2 = _3114;
                frontier_phi_58_59_ladder_3 = _3112;
                frontier_phi_58_59_ladder_4 = _3108;
                frontier_phi_58_59_ladder_5 = _3106;
            }
            else
            {
                frontier_phi_58_59_ladder = _2988;
                frontier_phi_58_59_ladder_1 = _2994;
                frontier_phi_58_59_ladder_2 = _2992;
                frontier_phi_58_59_ladder_3 = _2990;
                frontier_phi_58_59_ladder_4 = _2986;
                frontier_phi_58_59_ladder_5 = _2984;
            }
            _3105 = frontier_phi_58_59_ladder_5;
            _3107 = frontier_phi_58_59_ladder_4;
            _3109 = frontier_phi_58_59_ladder;
            _3111 = frontier_phi_58_59_ladder_3;
            _3113 = frontier_phi_58_59_ladder_2;
            _3115 = frontier_phi_58_59_ladder_1;
        }
        float _3120 = isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0));
        _2896 = (_3120 * _3111) + _2332;
        _2898 = (_3120 * _3113) + _2334;
        _2900 = (_3120 * _3115) + _2336;
        _2902 = ((_3105 * _1116) * _3120) + _2677;
        _2904 = ((_3107 * _1118) * _3120) + _2679;
        _2906 = ((_3109 * _1119) * _3120) + _2681;
    }
    else
    {
        _2896 = _2332;
        _2898 = _2334;
        _2900 = _2336;
        _2902 = _2677;
        _2904 = _2679;
        _2906 = _2681;
    }
    float _4943 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _4954 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _4965 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2923 = ((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2896 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1132))) + ((_2902 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    float _2924 = ((isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_2898 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1132))) + ((_2904 + ((isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    float _2925 = ((isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_2900 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1132))) + ((_2906 + ((isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    uint _2926 = _291 + 6u;
    float _2934 = _1054 / cbSceneParam._m0[86u].x;
    float _2935 = _1055 / cbSceneParam._m0[86u].y;
    vec4 _2949 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, (log2((isnan(cbSceneParam._m0[77u].w) ? _977 : (isnan(_977) ? cbSceneParam._m0[77u].w : min(_977, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2951 = _2949.x;
    float _2952 = _2949.y;
    float _2953 = _2949.z;
    float _2954 = _2949.w;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    if (_977 > cbSceneParam._m0[78u].w)
    {
        float _3009 = isnan(_977) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _977 : min(cbSceneParam._m0[80u].w, _977));
        float _3010 = _3009 / _977;
        float _3021 = _3010 * _1027;
        float _3022 = _1028 * _3010;
        float _3023 = (-0.0) - _3022;
        float _3025 = _3010 * _1029;
        float _3027 = (cbSceneParam._m0[77u].w * _3023) / _3009;
        float _3028 = _3027 + cbSceneParam._m0[79u].w;
        float _3029 = cbSceneParam._m0[79u].w - _3022;
        float _3035 = sqrt(((_3021 * _3021) + (_3022 * _3022)) + (_3025 * _3025));
        float _3038 = (1.0 - (cbSceneParam._m0[77u].w / _3009)) * _3035;
        float _3043 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3045 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3222;
        if (abs((_3023 - _3027) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3222 = ((((_3028 > 0.0) ? exp2(_3043 * _3028) : (2.0 - exp2(_3045 * _3028))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3038;
        }
        else
        {
            float _3166 = 1.0 / cbSceneParam._m0[80u].x;
            float _3167 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : max(_3028, _3029));
            float _3168 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : min(_3028, _3029));
            float _3177 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : min(_3167, 0.0));
            float _3178 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : min(_3168, 0.0));
            _3222 = ((abs(_3035 / _3023) * cbSceneParam._m0[80u].y) * ((((_3177 - _3178) * 2.0) - ((exp2(_3043 * (isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0)))) - exp2(_3043 * (isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))))) * _3166)) - ((exp2(_3045 * _3177) - exp2(_3045 * _3178)) * _3166))) + (_3038 * cbSceneParam._m0[80u].z);
        }
        vec4 _3224 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, 1.0), 0.0);
        float _3233 = exp2((_3222 * (-1.44269502162933349609375)) * (1.0 - _3224.w));
        float _3234 = log2(_3233);
        float _3250 = log2(_2954);
        _3047 = (exp2(_3250 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].x)) * _3224.x) / cbSceneParam._m0[78u].x)) + _2951;
        _3049 = (exp2(_3250 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].y)) * _3224.y) / cbSceneParam._m0[78u].y)) + _2952;
        _3051 = (exp2(_3250 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].z)) * _3224.z) / cbSceneParam._m0[78u].z)) + _2953;
        _3053 = _3233 * _2954;
    }
    else
    {
        _3047 = _2951;
        _3049 = _2952;
        _3051 = _2953;
        _3053 = _2954;
    }
    bool _3260;
    vec4 _3063;
    vec4 _3085;
    float _3087;
    float _3091;
    float _3092;
    float _3093;
    float _3094;
    bool _3104;
    for (;;)
    {
        _3063 = cbMatDynParam._m0[0u];
        float _3065 = roundEven(_3063.y);
        bool _3066 = _3065 == 3.0;
        float _3067 = log2(_3053);
        float _3074 = exp2(_3067 * cbSceneParam._m0[78u].x) * _2923;
        float _3075 = exp2(_3067 * cbSceneParam._m0[78u].y) * _2924;
        float _3076 = exp2(_3067 * cbSceneParam._m0[78u].z) * _2925;
        float _3083 = _1043 + (-0.5);
        _3085 = cbMtdParam._m0[1u];
        _3087 = _3085.y * _3083;
        float _3090 = (_3065 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3091 = _3090 * (_3066 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3047)));
        _3092 = _3090 * (_3066 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3049)));
        _3093 = _3090 * (_3066 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3051)));
        _3094 = _3083 * 0.999000012874603271484375;
        _3104 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3104)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3094) < 0.5)
            {
                _3260 = true;
                break;
            }
        }
        uint _3201 = _1092 + uint(_3063.w);
        if ((cbInstanceData._m0[_3201].w < 1.0) && ((cbInstanceData._m0[_3201].w + _3094) < 0.5))
        {
            _3260 = true;
            break;
        }
        if ((_3087 + 1.0) < _3085.x)
        {
            _3260 = true;
            break;
        }
        _3260 = false;
        break;
    }
    float _3465;
    if (_3260)
    {
        discard_state = true;
        _3465 = 0.0;
    }
    else
    {
        _3465 = cbInstanceData._m0[_2926].w;
    }
    SV_Target.x = _3091;
    SV_Target.y = _3092;
    SV_Target.z = _3093;
    SV_Target.w = _3465;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2926].w;
    discard_exit();
}


