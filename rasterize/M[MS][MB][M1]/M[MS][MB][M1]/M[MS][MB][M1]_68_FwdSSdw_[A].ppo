#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1214;
float _3622;
float _3623;
float _3624;
float _3625;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3634 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _427 = _425.x;
    float _428 = _425.y;
    float _429 = _425.z;
    float _438 = ((_408.z - _429) * _386) + _429;
    float _441 = ((((_408.x - _427) * _386) + _427) * 2.0) + (-1.0);
    float _443 = ((((_408.y - _428) * _386) + _428) * 2.0) + (-1.0);
    float _444 = dot(vec2(_441, _443), vec2(_441, _443));
    float _3645 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _449 = sqrt(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))));
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _478 = _476.x;
    float _479 = 1.0 - _478;
    float _507 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_478 - _479) * cbMtdParam._m0[24u].w) + _479) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3656 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _516 = ((((cbMtdParam._m0[10u].x - _393) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _508) + _393;
    float _517 = ((((cbMtdParam._m0[10u].y - _394) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _508) + _394;
    float _518 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _395)) * _508) + _395;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _546 = _544.x;
    float _564 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _546) * _386) + _546;
    float _568 = ((_530.x - _564) * cbMtdParam._m0[19u].z) + _564;
    float _570 = _568 - (_568 * _508);
    float _574 = ((cbMtdParam._m0[23u].y - _438) * _508) + _438;
    vec4 _593 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _599 = (_593.x * 2.0) + (-1.0);
    float _600 = (_593.y * 2.0) + (-1.0);
    float _601 = dot(vec2(_599, _600), vec2(_599, _600));
    float _3667 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _617 = (_508 * (((cbMtdParam._m0[22u].z * _441) - _441) + _599)) + _441;
    float _618 = (_508 * (((cbMtdParam._m0[22u].z * _443) - _443) + _600)) + _443;
    float _619 = (_508 * (sqrt(1.0 - (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) - _449)) + _449;
    float _621 = cbMtdParam._m0[22u].x + _462.w;
    float _624 = fma(_619, _236 * NORMAL.x, fma(_618, _243 * TANGENT.x, (_229 * _221) * _617));
    float _627 = fma(_619, _236 * NORMAL.y, fma(_618, _243 * TANGENT.y, (_229 * _222) * _617));
    float _630 = fma(_619, _236 * NORMAL.z, fma(_618, _243 * TANGENT.z, (_229 * _223) * _617));
    float _634 = inversesqrt(dot(vec3(_624, _627, _630), vec3(_624, _627, _630)));
    float _635 = _634 * _624;
    float _636 = _634 * _627;
    float _637 = _634 * _630;
    float _3678 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _638 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3700 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3711 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3722 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3733 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _643 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _657 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _707 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _697);
    float _708 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _697);
    float _709 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _697);
    float _713 = inversesqrt(dot(vec3(_707, _708, _709), vec3(_707, _708, _709)));
    float _714 = _707 * _713;
    float _715 = _708 * _713;
    float _716 = _709 * _713;
    vec4 _721 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _723 = _721.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _895 = sqrt(((_707 * _707) + (_708 * _708)) + (_709 * _709));
        float _901 = (cbMatDynParam._m0[5u].x * _895) + cbMatDynParam._m0[5u].y;
        float _3744 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _906 = (cbMatDynParam._m0[5u].z * _895) + cbMatDynParam._m0[5u].w;
        float _3755 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) - _902)) + _902) < ((_723 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _734 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _735 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _753 = fma(_637, cbSceneParam._m0[5u].z, fma(_636, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _635));
    float _756 = fma(_637, cbSceneParam._m0[6u].z, fma(_636, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _635));
    float _759 = fma(_637, cbSceneParam._m0[7u].z, fma(_636, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _635));
    uint _772 = _249 + 9u;
    uint _773 = _772 + uint(cbMatDynParam._m0[0u].w);
    float _779 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * cbInstanceData._m0[_773].x;
    float _780 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) * cbInstanceData._m0[_773].y;
    float _781 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * cbInstanceData._m0[_773].z;
    float _3766 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _3788 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _785 = 1.0 - _643;
    float _786 = _782 * _785;
    float _787 = _783 * _785;
    float _788 = _784 * _785;
    float _793 = (_782 + (-0.039999999105930328369140625)) * _643;
    float _794 = (_783 + (-0.039999999105930328369140625)) * _643;
    float _795 = (_784 + (-0.039999999105930328369140625)) * _643;
    float _796 = _793 + 0.039999999105930328369140625;
    float _798 = _794 + 0.039999999105930328369140625;
    float _799 = _795 + 0.039999999105930328369140625;
    vec4 _808 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _734, cbSceneParam._m0[86u].y * _735));
    float _812 = ((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * TEXCOORD_5.w) * _808.x;
    float _813 = dot(vec3(_635, _636, _637), vec3(_714, _715, _716));
    float _816 = _813 * 2.0;
    float _820 = (_816 * _635) - _714;
    float _821 = (_816 * _636) - _715;
    float _822 = (_816 * _637) - _716;
    float _826 = abs(dot(vec3(_714, _715, _716), vec3(_635, _636, _637)));
    float _3799 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _828 = sqrt(_638);
    float _841 = exp2((_828 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_828 * 3.0));
    float _847 = (1.0 - _841) * ((_828 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _848 = _841 * _828;
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1213;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _938 = fma(_884, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876));
        float _942 = fma(_884, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876));
        float _946 = fma(_884, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876));
        float _971 = _876 + _635;
        float _972 = _880 + _636;
        float _973 = _884 + _637;
        float _983 = fma(_973, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971)) - _938;
        float _984 = fma(_973, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971)) - _942;
        float _985 = fma(_973, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971)) - _946;
        float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
        float _1002 = ((_989 * _983) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_938 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_989 * _984) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_942 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_989 * _985) / cbModelParam._m0[34u].z) + ((((((_946 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        float _1041 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1007.x + (-0.5));
        float _1043 = _1041 * (_1007.y + (-0.5));
        float _1044 = _1041 * (_1007.z + (-0.5));
        float _1051 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1014.x + (-0.5));
        float _1053 = _1051 * (_1014.y + (-0.5));
        float _1054 = _1051 * (_1014.z + (-0.5));
        float _1061 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1021.x + (-0.5));
        float _1063 = _1061 * (_1021.y + (-0.5));
        float _1064 = _1061 * (_1021.z + (-0.5));
        float _1071 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1028.x + (-0.5));
        float _1073 = _1071 * (_1028.y + (-0.5));
        float _1074 = _1071 * (_1028.z + (-0.5));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = _1042 * 0.5;
        float _1079 = _1052 * 0.5;
        float _1080 = _1062 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1095 = (dot(vec3(_635, _636, _637), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1105 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3847 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1107 + 1.0))) + _1112) * _1075;
        float _1122 = _1043 * 0.5;
        float _1123 = _1053 * 0.5;
        float _1124 = _1063 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_635, _636, _637), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3880 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1149 + 1.0))) + _1154) * _1076;
        float _1164 = _1044 * 0.5;
        float _1165 = _1054 * 0.5;
        float _1166 = _1064 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_635, _636, _637), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3913 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1191 + 1.0))) + _1196) * _1077;
        _1213 = _1044;
        _1215 = _1043;
        _1216 = _1042;
        _1217 = _1054;
        _1218 = _1053;
        _1219 = _1052;
        _1220 = _1064;
        _1221 = _1063;
        _1222 = _1062;
        _1223 = _1077;
        _1224 = _1076;
        _1225 = _1075;
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
    }
    else
    {
        _1213 = _1214;
        _1215 = _1214;
        _1216 = _1214;
        _1217 = _1214;
        _1218 = _1214;
        _1219 = _1214;
        _1220 = _1214;
        _1221 = _1214;
        _1222 = _1214;
        _1223 = _1214;
        _1224 = _1214;
        _1225 = _1214;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1256 = fma(_884, cbModelParam._m0[30u].z, fma(_880, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _876));
        float _1260 = fma(_884, cbModelParam._m0[31u].z, fma(_880, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _876));
        float _1264 = fma(_884, cbModelParam._m0[32u].z, fma(_880, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _876));
        float _1287 = _876 + _635;
        float _1288 = _880 + _636;
        float _1289 = _884 + _637;
        float _1299 = fma(_1289, cbModelParam._m0[30u].z, fma(_1288, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1287)) - _1256;
        float _1300 = fma(_1289, cbModelParam._m0[31u].z, fma(_1288, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1287)) - _1260;
        float _1301 = fma(_1289, cbModelParam._m0[32u].z, fma(_1288, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1287)) - _1264;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1256 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1260 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[35u].z) + ((((((_1264 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1355 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1322.x + (-0.5));
        float _1357 = _1355 * (_1322.y + (-0.5));
        float _1358 = _1355 * (_1322.z + (-0.5));
        float _1365 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1329.x + (-0.5));
        float _1367 = _1365 * (_1329.y + (-0.5));
        float _1368 = _1365 * (_1329.z + (-0.5));
        float _1375 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1336.x + (-0.5));
        float _1377 = _1375 * (_1336.y + (-0.5));
        float _1378 = _1375 * (_1336.z + (-0.5));
        float _1385 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1343.x + (-0.5));
        float _1387 = _1385 * (_1343.y + (-0.5));
        float _1388 = _1385 * (_1343.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_635, _636, _637), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3976 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1419 + 1.0))) + _1424) * _1389;
        float _1434 = _1357 * 0.5;
        float _1435 = _1367 * 0.5;
        float _1436 = _1377 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_635, _636, _637), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4009 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1461 + 1.0))) + _1466) * _1390;
        float _1476 = _1358 * 0.5;
        float _1477 = _1368 * 0.5;
        float _1478 = _1378 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_635, _636, _637), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4042 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1503 + 1.0))) + _1508) * _1391;
        _1525 = _1358;
        _1526 = _1357;
        _1527 = _1356;
        _1528 = _1368;
        _1529 = _1367;
        _1530 = _1366;
        _1531 = _1378;
        _1532 = _1377;
        _1533 = _1376;
        _1534 = _1391;
        _1535 = _1390;
        _1536 = _1389;
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
    }
    else
    {
        _1525 = _1214;
        _1526 = _1214;
        _1527 = _1214;
        _1528 = _1214;
        _1529 = _1214;
        _1530 = _1214;
        _1531 = _1214;
        _1532 = _1214;
        _1533 = _1214;
        _1534 = _1214;
        _1535 = _1214;
        _1536 = _1214;
        _1537 = 0.0;
        _1538 = 0.0;
        _1539 = 0.0;
    }
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1226)) + _1226;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1227)) + _1227;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1228)) + _1228;
    float _1572 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1550, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1550, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1550, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1549));
    float _1593 = _820 * 0.5;
    float _1594 = _821 * 0.5;
    float _1595 = _822 * 0.5;
    float _1596 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1599 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1602 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1636;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1609 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1213, _1217, _1220, _1223));
        float _1613 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1215, _1218, _1221, _1224));
        float _1617 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1216, _1219, _1222, _1225));
        float _1624 = dot(vec4(cbModelParam._m0[39u]), vec4(_1593, _1594, _1595, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1647;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1638 = dot(vec4(cbModelParam._m0[40u]), vec4(_1593, _1594, _1595, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1651 = (_1647 * cbModelParam._m0[1u].x) + (_1636 * (1.0 - cbModelParam._m0[1u].x));
    float _1661 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _638);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1661 : min(cbModelParam._m0[25u].z, _1661));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1711 = fma(_884, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876)) + cbModelParam._m0[13u].w;
        float _1715 = fma(_884, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876)) + cbModelParam._m0[14u].w;
        float _1719 = fma(_884, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876)) + cbModelParam._m0[15u].w;
        float _1722 = fma(_822, cbModelParam._m0[13u].z, fma(_821, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820));
        float _1725 = fma(_822, cbModelParam._m0[14u].z, fma(_821, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820));
        float _1728 = fma(_822, cbModelParam._m0[15u].z, fma(_821, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820));
        float _1756;
        if (_1722 > 0.0)
        {
            _1756 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1756 = frontier_phi_17_15_ladder;
        }
        float _1981;
        if (_1725 > 0.0)
        {
            _1981 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1981 = frontier_phi_26_22_ladder;
        }
        float _2238;
        if (_1728 > 0.0)
        {
            _2238 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2238 = frontier_phi_38_33_ladder;
        }
        float _2240 = isnan(_1981) ? _1756 : (isnan(_1756) ? _1981 : min(_1756, _1981));
        float _2241 = isnan(_2238) ? _2240 : (isnan(_2240) ? _2238 : min(_2240, _2238));
        float _2245 = (_2241 * _1722) + _1711;
        float _2246 = (_2241 * _1725) + _1715;
        float _2247 = (_2241 * _1728) + _1719;
        float _2248 = _2241 * 9.9999997473787516355514526367188e-05;
        float _2250 = (-1.0) - _2248;
        float _2252 = _2248 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2247 > _2252) || ((_2247 < _2250) || ((_2246 > _2252) || ((_2246 < _2250) || ((_2245 < _2250) || (_2245 > _2252))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2375 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2247, cbModelParam._m0[9u].z, fma(_2246, cbModelParam._m0[9u].y, _2245 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2247, cbModelParam._m0[10u].z, fma(_2246, cbModelParam._m0[10u].y, _2245 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2247, cbModelParam._m0[11u].z, fma(_2246, cbModelParam._m0[11u].y, _2245 * cbModelParam._m0[11u].x))), _1662);
            frontier_phi_16_38_ladder = _2375.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2375.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2375.x * cbModelParam._m0[1u].y;
        }
        _1744 = frontier_phi_16_38_ladder_2;
        _1746 = frontier_phi_16_38_ladder_1;
        _1748 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_820, _821, _822), _1662);
        _1744 = _1732.x * cbModelParam._m0[1u].y;
        _1746 = _1732.y * cbModelParam._m0[1u].y;
        _1748 = _1732.z * cbModelParam._m0[1u].y;
    }
    float _1752 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _638);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1752 : min(cbModelParam._m0[25u].w, _1752));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1808 = fma(_884, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876)) + cbModelParam._m0[21u].w;
        float _1812 = fma(_884, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876)) + cbModelParam._m0[22u].w;
        float _1816 = fma(_884, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876)) + cbModelParam._m0[23u].w;
        float _1819 = fma(_822, cbModelParam._m0[21u].z, fma(_821, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820));
        float _1822 = fma(_822, cbModelParam._m0[22u].z, fma(_821, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820));
        float _1825 = fma(_822, cbModelParam._m0[23u].z, fma(_821, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820));
        float _1986;
        if (_1819 > 0.0)
        {
            _1986 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1986 = frontier_phi_28_24_ladder;
        }
        float _2265;
        if (_1822 > 0.0)
        {
            _2265 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2265 = frontier_phi_40_35_ladder;
        }
        float _2478;
        if (_1825 > 0.0)
        {
            _2478 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2478 = frontier_phi_49_46_ladder;
        }
        float _2480 = isnan(_2265) ? _1986 : (isnan(_1986) ? _2265 : min(_1986, _2265));
        float _2481 = isnan(_2478) ? _2480 : (isnan(_2480) ? _2478 : min(_2480, _2478));
        float _2485 = (_2481 * _1819) + _1808;
        float _2486 = (_2481 * _1822) + _1812;
        float _2487 = (_2481 * _1825) + _1816;
        float _2488 = _2481 * 9.9999997473787516355514526367188e-05;
        float _2489 = (-1.0) - _2488;
        float _2491 = _2488 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2487 > _2491) || ((_2487 < _2489) || ((_2486 > _2491) || ((_2486 < _2489) || ((_2485 < _2489) || (_2485 > _2491))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2686 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2487, cbModelParam._m0[17u].z, fma(_2486, cbModelParam._m0[17u].y, _2485 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2487, cbModelParam._m0[18u].z, fma(_2486, cbModelParam._m0[18u].y, _2485 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2487, cbModelParam._m0[19u].z, fma(_2486, cbModelParam._m0[19u].y, _2485 * cbModelParam._m0[19u].x))), _1753);
            frontier_phi_25_49_ladder = _2686.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2686.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2686.x * cbModelParam._m0[1u].z;
        }
        _1844 = frontier_phi_25_49_ladder_2;
        _1846 = frontier_phi_25_49_ladder_1;
        _1848 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1828 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_820, _821, _822), _1753);
        _1844 = _1828.x * cbModelParam._m0[1u].z;
        _1846 = _1828.y * cbModelParam._m0[1u].z;
        _1848 = _1828.z * cbModelParam._m0[1u].z;
    }
    float _1861 = (((_847 * _796) + _848) * _812) * ((cbModelParam._m0[1u].w * (_1844 - _1744)) + _1744);
    float _1863 = (((_847 * _798) + _848) * _812) * ((cbModelParam._m0[1u].w * (_1846 - _1746)) + _1746);
    float _1865 = (((_847 * _799) + _848) * _812) * ((cbModelParam._m0[1u].w * (_1848 - _1748)) + _1748);
    float _1868 = fma(_1865, cbSceneParam._m0[89u].z, fma(_1863, cbSceneParam._m0[89u].y, _1861 * cbSceneParam._m0[89u].x));
    float _1871 = fma(_1865, cbSceneParam._m0[90u].z, fma(_1863, cbSceneParam._m0[90u].y, _1861 * cbSceneParam._m0[90u].x));
    float _1874 = fma(_1865, cbSceneParam._m0[91u].z, fma(_1863, cbSceneParam._m0[91u].y, _1861 * cbSceneParam._m0[91u].x));
    vec4 _1882 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_734, _735));
    float _1884 = _1882.w;
    float _1896 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1884);
    float _1897 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1884);
    float _1898 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1884);
    uvec4 _1902 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1904 = _1902.x * 14u;
    uint _1905 = _1904 + 13u;
    float _1912 = _812 + (-1.0);
    float _1917 = (cbLight._m0[_1905].x * _1912) + 1.0;
    float _1918 = (cbLight._m0[_1905].y * _1912) + 1.0;
    float _1919 = (cbLight._m0[_1905].z * _1912) + 1.0;
    float _1920 = (cbLight._m0[_1905].w * _1912) + 1.0;
    uint _1921 = _1904 + 5u;
    float _1927 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1931 = _1904 + 4u;
    float _1940 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1944 = _1904 | 1u;
    float _1955 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_635, _636, _637));
    float _1958 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_635, _636, _637));
    float _4178 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _4189 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1963 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * 0.3183098733425140380859375;
    float _1965 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * 0.3183098733425140380859375;
    float _1972 = ((cbLight._m0[_1921].x * _1927) * _1965) + (((cbLight._m0[_1931].x * _1896) * _1940) * _1963);
    float _1973 = ((_1927 * cbLight._m0[_1921].y) * _1965) + (((cbLight._m0[_1931].y * _1897) * _1940) * _1963);
    float _1974 = ((_1927 * cbLight._m0[_1921].z) * _1965) + (((cbLight._m0[_1931].z * _1898) * _1940) * _1963);
    uvec4 _1978 = floatBitsToUint(cbLight._m0[_1904 + 12u]);
    bool _1980 = _1978.x == 0u;
    float _1991;
    float _1993;
    float _1995;
    if (_1980)
    {
        _1991 = _1972;
        _1993 = _1973;
        _1995 = _1974;
    }
    else
    {
        uint _1999 = _1904 + 6u;
        float _2015 = (dot(vec3(cbLight._m0[_1904 + 2u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2016 = _2015 * _2015;
        float _4200 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2018 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _1991 = (((cbLight._m0[_1999].x * 0.3183098733425140380859375) * _2017) * _2018) + _1972;
        _1993 = (((cbLight._m0[_1999].y * 0.3183098733425140380859375) * _2017) * _2018) + _1973;
        _1995 = (((cbLight._m0[_1999].z * 0.3183098733425140380859375) * _2017) * _2018) + _1974;
    }
    bool _1998 = _1978.y == 0u;
    float _2036;
    float _2038;
    float _2040;
    if (_1998)
    {
        _2036 = _1991;
        _2038 = _1993;
        _2040 = _1995;
    }
    else
    {
        uint _2209 = _1904 + 7u;
        float _2225 = (dot(vec3(cbLight._m0[_1904 + 3u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2226 = _2225 * _2225;
        float _4216 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2227 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2228 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2036 = (((cbLight._m0[_2209].x * 0.3183098733425140380859375) * _2227) * _2228) + _1991;
        _2038 = (((cbLight._m0[_2209].y * 0.3183098733425140380859375) * _2227) * _2228) + _1993;
        _2040 = (((cbLight._m0[_2209].z * 0.3183098733425140380859375) * _2227) * _2228) + _1995;
    }
    uint _2043 = _1904 + 8u;
    float _2056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1904].w)) * _638) * 0.949999988079071044921875);
    float _2057 = _2056 * _2056;
    float _2058 = cbLight._m0[_1904].x + _714;
    float _2059 = cbLight._m0[_1904].y + _715;
    float _2060 = cbLight._m0[_1904].z + _716;
    float _2064 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
    float _2065 = _2064 * _2058;
    float _2066 = _2064 * _2059;
    float _2067 = _2064 * _2060;
    float _2068 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_1904].xyz));
    float _4232 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _2072 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2073 = dot(vec3(_635, _636, _637), vec3(_2065, _2066, _2067));
    float _4254 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _2077 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_2065, _2066, _2067));
    float _4265 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2081 = _2057 * _2057;
    float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
    float _2093 = exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0);
    float _2094 = 0.959999978542327880859375 - _793;
    float _2096 = 0.959999978542327880859375 - _794;
    float _2097 = 0.959999978542327880859375 - _795;
    float _2104 = 1.0 - _2057;
    float _2115 = (0.5 / (((_2072 * ((_2071 * _2104) + _2057)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2104) + _2057) * _2071))) * _2071;
    float _4276 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2117 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
    uint _2131 = _1904 + 9u;
    float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _638) * 0.949999988079071044921875);
    float _2143 = _2142 * _2142;
    float _2144 = cbLight._m0[_1944].x + _714;
    float _2145 = cbLight._m0[_1944].y + _715;
    float _2146 = cbLight._m0[_1944].z + _716;
    float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
    float _2151 = _2150 * _2144;
    float _2152 = _2150 * _2145;
    float _2153 = _2150 * _2146;
    float _2154 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_1944].xyz));
    float _4287 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2158 = dot(vec3(_635, _636, _637), vec3(_2151, _2152, _2153));
    float _4298 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_2151, _2152, _2153));
    float _4309 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2143 * _2143;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2177 = exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0);
    float _2184 = 1.0 - _2143;
    float _2194 = (0.5 / (((_2072 * ((_2157 * _2184) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2184) + _2143) * _2157))) * _2157;
    float _4320 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    float _2206 = (((((_2177 * _2094) + _796) * cbLight._m0[_2131].x) * _2196) * _1927) + ((((cbLight._m0[_2043].x * _1896) * ((_2093 * _2094) + _796)) * _2117) * _1940);
    float _2207 = (((((_2177 * _2096) + _798) * cbLight._m0[_2131].y) * _2196) * _1927) + ((((cbLight._m0[_2043].y * _1897) * ((_2093 * _2096) + _798)) * _2117) * _1940);
    float _2208 = (((((_2177 * _2097) + _799) * cbLight._m0[_2131].z) * _2196) * _1927) + ((((cbLight._m0[_2043].z * _1898) * ((_2093 * _2097) + _799)) * _2117) * _1940);
    float _2270;
    float _2272;
    float _2274;
    if (_1980)
    {
        _2270 = _2206;
        _2272 = _2207;
        _2274 = _2208;
    }
    else
    {
        uint _2276 = _1904 + 2u;
        uint _2280 = _1904 + 10u;
        float _2294 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _638) * 0.949999988079071044921875);
        float _2295 = _2294 * _2294;
        float _2296 = cbLight._m0[_2276].x + _714;
        float _2297 = cbLight._m0[_2276].y + _715;
        float _2298 = cbLight._m0[_2276].z + _716;
        float _2302 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
        float _2303 = _2302 * _2296;
        float _2304 = _2302 * _2297;
        float _2305 = _2302 * _2298;
        float _2306 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2276].xyz));
        float _4331 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2310 = dot(vec3(_635, _636, _637), vec3(_2303, _2304, _2305));
        float _4342 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2313 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2314 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2303, _2304, _2305));
        float _4353 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2318 = _2295 * _2295;
        float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
        float _2329 = exp2(log2(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * 5.0);
        float _2336 = 1.0 - _2295;
        float _2346 = (0.5 / (((_2072 * ((_2309 * _2336) + _2295)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2336) + _2295) * _2309))) * _2309;
        float _4364 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2348 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
        float _2349 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2270 = (((((_2329 * _2094) + _796) * cbLight._m0[_2280].x) * _2348) * _2349) + _2206;
        _2272 = (((((_2329 * _2096) + _798) * cbLight._m0[_2280].y) * _2348) * _2349) + _2207;
        _2274 = (((((_2329 * _2097) + _799) * cbLight._m0[_2280].z) * _2348) * _2349) + _2208;
    }
    float _2384;
    float _2386;
    float _2388;
    if (_1998)
    {
        _2384 = _2270;
        _2386 = _2272;
        _2388 = _2274;
    }
    else
    {
        uint _2395 = _1904 + 3u;
        uint _2399 = _1904 + 11u;
        float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _638) * 0.949999988079071044921875);
        float _2414 = _2413 * _2413;
        float _2415 = cbLight._m0[_2395].x + _714;
        float _2416 = cbLight._m0[_2395].y + _715;
        float _2417 = cbLight._m0[_2395].z + _716;
        float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
        float _2422 = _2421 * _2415;
        float _2423 = _2421 * _2416;
        float _2424 = _2421 * _2417;
        float _2425 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2395].xyz));
        float _4380 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2429 = dot(vec3(_635, _636, _637), vec3(_2422, _2423, _2424));
        float _4391 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2433 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2422, _2423, _2424));
        float _4402 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2437 = _2414 * _2414;
        float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
        float _2448 = exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0);
        float _2455 = 1.0 - _2414;
        float _2465 = (0.5 / (((_2072 * ((_2428 * _2455) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2455) + _2414) * _2428))) * _2428;
        float _4413 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2467 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
        float _2468 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2384 = (((((_2448 * _2094) + _796) * cbLight._m0[_2399].x) * _2467) * _2468) + _2270;
        _2386 = (((((_2448 * _2096) + _798) * cbLight._m0[_2399].y) * _2467) * _2468) + _2272;
        _2388 = (((((_2448 * _2097) + _799) * cbLight._m0[_2399].z) * _2467) * _2468) + _2274;
    }
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    if (_1902.y == 0u)
    {
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2543;
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2543;
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2543;
        uvec4 _2558 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2559 = _2558.x;
        uint _2570 = uint((float(_2558.y) * floor(float(uint(cbSceneParam._m0[85u].y * _735) / _2559))) + floor(float(uint(cbSceneParam._m0[85u].x * _734) / _2559)));
        float _2580 = (log2(_2546 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2581 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        uint _2584 = uint(isnan(14.0) ? _2581 : (isnan(_2581) ? 14.0 : min(_2581, 14.0)));
        uvec4 _2589 = texelFetch(g_lightClusterGridBuffer, int(((_2584 << 2u) + (_2570 << 6u)) >> 2u));
        uint _2590 = _2589.x;
        uint _2591 = _2558.z;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        if (((((1u << ((_2591 >> 4u) & 15u)) + 4294967295u) & _2590) == 0u) || ((_2591 & 240u) == 0u))
        {
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
        }
        else
        {
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2700;
            float _2702;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            uint _2850 = 0u;
            uint _2859;
            bool _2860;
            for (;;)
            {
                _2859 = texelFetch(g_lightClassification, int((((_2584 << 5u) + (_2570 << 9u)) + (_2850 << 2u)) >> 2u)).x;
                _2860 = _2859 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2860)
                {
                    frontier_phi_66_pred = _2844;
                    frontier_phi_66_pred_1 = _2849;
                    frontier_phi_66_pred_2 = _2848;
                    frontier_phi_66_pred_3 = _2847;
                    frontier_phi_66_pred_4 = _2846;
                    frontier_phi_66_pred_5 = _2845;
                }
                else
                {
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    uint _2995;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2859;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    for (;;)
                    {
                        uint _2999 = uint(findLSB(_2995)) + (_2850 << 5u);
                        uint _2996 = (_2995 + 4294967295u) & _2995;
                        uint _3001 = _2999 * 48u;
                        vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 3u)).x));
                        uint _3021 = (_2999 * 48u) + 4u;
                        vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 3u)).x));
                        uint _3040 = (_2999 * 48u) + 8u;
                        vec3 _3051 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x));
                        float _3055 = _3015.x - _2544;
                        float _3056 = _3015.y - _2545;
                        float _3057 = _3015.z - _2546;
                        float _3058 = dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057));
                        float _3061 = inversesqrt(_3058);
                        float _3062 = _3061 * _3055;
                        float _3063 = _3061 * _3056;
                        float _3064 = _3061 * _3057;
                        float _3065 = dot(vec3(_753, _756, _759), vec3(_3062, _3063, _3064));
                        float _3070 = 1.0 - (_3058 * _3015.w);
                        float _4439 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3071 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                        float _3072 = sqrt(_3058) * _3034.w;
                        float _3075 = 1.39999997615814208984375 / (_3072 + 1.39999997615814208984375);
                        float _3076 = _3075 * _3075;
                        float _3079 = ((1.0 - _3076) * _3065) + _3076;
                        float _3082 = _3072 * _3072;
                        float _3086 = ((isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))) * _3071) / ((_3082 * 0.699999988079071044921875) + 1.0);
                        float _3090 = (-0.0) - _2544;
                        float _3091 = (-0.0) - _2545;
                        float _3092 = (-0.0) - _2546;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3097 = _3096 * _3090;
                        float _3098 = _3096 * _3091;
                        float _3099 = _3096 * _3092;
                        float _3107 = exp2(log2(1.0 / ((_3082 * 3.5) + 5.0)) * 0.25);
                        float _3108 = 1.0 - _828;
                        float _3115 = sqrt(1.0 - ((1.0 - (_3108 * _3108)) * (1.0 - (_3107 * _3107))));
                        float _3116 = _3115 * _3115;
                        float _3117 = _3116 * _3116;
                        float _3118 = _3097 + _3062;
                        float _3119 = _3098 + _3063;
                        float _3120 = _3099 + _3064;
                        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                        float _3128 = dot(vec3(_753, _756, _759), vec3(_3097, _3098, _3099));
                        float _4455 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3132 = dot(vec3(_753, _756, _759), vec3(_3124 * _3118, _3124 * _3119, _3124 * _3120));
                        float _4466 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                        float _3139 = ((_3135 * _3135) * (_3117 + (-1.0))) + 1.0;
                        float _3140 = _3075 * _3116;
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3065) + _3141;
                        float _4477 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3146 = 1.0 - _3116;
                        float _3156 = (0.5 / (((_3145 * ((_3131 * _3146) + _3116)) + 9.9999999392252902907785028219223e-09) + (((_3145 * _3146) + _3116) * _3131))) * _3145;
                        float _4488 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3167 = (((_3117 * 3.1415927410125732421875) * (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) / ((_3139 * _3139) * ((_3082 * 2.1991131305694580078125) + 3.141590118408203125))) * _3071;
                        _2919 = (_3086 * _3034.x) + _2992;
                        _2920 = (_3086 * _3034.y) + _2993;
                        _2921 = (_3086 * _3034.z) + _2994;
                        _2916 = (_3167 * _3051.x) + _2989;
                        _2917 = (_3167 * _3051.y) + _2990;
                        _2918 = (_3167 * _3051.z) + _2991;
                        if (_2996 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2989 = _2916;
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2996;
                        }
                    }
                    frontier_phi_66_pred = _2916;
                    frontier_phi_66_pred_1 = _2921;
                    frontier_phi_66_pred_2 = _2920;
                    frontier_phi_66_pred_3 = _2919;
                    frontier_phi_66_pred_4 = _2918;
                    frontier_phi_66_pred_5 = _2917;
                }
                _2692 = frontier_phi_66_pred;
                _2702 = frontier_phi_66_pred_1;
                _2700 = frontier_phi_66_pred_2;
                _2698 = frontier_phi_66_pred_3;
                _2696 = frontier_phi_66_pred_4;
                _2694 = frontier_phi_66_pred_5;
                uint _2851 = _2850 + 1u;
                if (_2851 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2844 = _2692;
                    _2845 = _2694;
                    _2846 = _2696;
                    _2847 = _2698;
                    _2848 = _2700;
                    _2849 = _2702;
                    _2850 = _2851;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
        }
        uvec4 _2705 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2706 = _2705.z;
        uint _2708 = (_2706 >> 8u) & 15u;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((4294967295u << _2708) & _2590) == 0u)
        {
            _2812 = _2691;
            _2814 = _2693;
            _2816 = _2695;
            _2818 = _2697;
            _2820 = _2699;
            _2822 = _2701;
        }
        else
        {
            float _2837 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
            float _2838 = _2837 * _2544;
            float _2839 = _2837 * _2545;
            float _2840 = _2837 * _2546;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2708 < ((_2706 >> 12u) & 15u))
            {
                float _2813;
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2972 = _2691;
                float _2973 = _2693;
                float _2974 = _2695;
                float _2975 = _2697;
                float _2976 = _2699;
                float _2977 = _2701;
                uint _2978 = _2708;
                uint _2987;
                bool _2988;
                for (;;)
                {
                    _2987 = texelFetch(g_lightClassification, int((((_2584 << 5u) + (_2570 << 9u)) + (_2978 << 2u)) >> 2u)).x;
                    _2988 = _2987 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2988)
                    {
                        frontier_phi_77_pred = _2977;
                        frontier_phi_77_pred_1 = _2976;
                        frontier_phi_77_pred_2 = _2975;
                        frontier_phi_77_pred_3 = _2974;
                        frontier_phi_77_pred_4 = _2973;
                        frontier_phi_77_pred_5 = _2972;
                    }
                    else
                    {
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3194 = _2972;
                        float _3195 = _2973;
                        float _3196 = _2974;
                        float _3197 = _2975;
                        float _3198 = _2976;
                        float _3199 = _2977;
                        uint _3200 = _2987;
                        uint _3201;
                        vec4 _3226;
                        float _3227;
                        vec4 _3242;
                        vec3 _3254;
                        vec4 _3269;
                        vec4 _3285;
                        float _3331;
                        bool _3332;
                        for (;;)
                        {
                            uint _3211 = ((_2978 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3200));
                            _3201 = (_3200 + 4294967295u) & _3200;
                            uint _3213 = _3211 * 40u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3227 = _3226.w;
                            uint _3229 = (_3211 * 40u) + 4u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3244 = (_3211 * 40u) + 8u;
                            _3254 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x));
                            uint _3256 = (_3211 * 40u) + 16u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3272 = (_3211 * 40u) + 20u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3287 = (_3211 * 40u) + 24u;
                            vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3306 = (_3211 * 40u) + 28u;
                            vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            _3331 = fma(_2546, _3319.z, fma(_2545, _3319.y, _3319.x * _2544)) + _3319.w;
                            _3332 = !((fma(_2546, _3300.z, fma(_2545, _3300.y, _3300.x * _2544)) + _3300.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3332)
                            {
                                float _3359 = _3226.x - _2544;
                                float _3360 = _3226.y - _2545;
                                float _3361 = _3226.z - _2546;
                                float _3362 = dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361));
                                float _3365 = inversesqrt(_3362);
                                float _3366 = _3365 * _3359;
                                float _3367 = _3365 * _3360;
                                float _3368 = _3365 * _3361;
                                float _3372 = 1.0 - (_3362 / (_3227 * _3227));
                                float _4499 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3377 = sqrt(_3362) * _3242.w;
                                float _3379 = 1.39999997615814208984375 / (_3377 + 1.39999997615814208984375);
                                float _3380 = _3379 * _3379;
                                float _3383 = ((1.0 - _3380) * dot(vec3(_3366, _3367, _3368), vec3(_753, _756, _759))) + _3380;
                                float _3386 = _3377 * _3377;
                                float _3390 = (fma(_2546, _3269.z, fma(_2545, _3269.y, _3269.x * _2544)) + _3269.w) / _3331;
                                float _3391 = (fma(_2546, _3285.z, fma(_2545, _3285.y, _3285.x * _2544)) + _3285.w) / _3331;
                                float _3395 = 1.0 - dot(vec2(_3390, _3391), vec2(_3390, _3391));
                                float _4515 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3397 = _3396 * (((isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0))) * _3373) / ((_3386 * 0.699999988079071044921875) + 1.0));
                                float _3409 = exp2(log2(1.0 / ((_3386 * 3.5) + 5.0)) * 0.25);
                                float _3410 = 1.0 - _828;
                                float _3417 = sqrt(1.0 - ((1.0 - (_3410 * _3410)) * (1.0 - (_3409 * _3409))));
                                float _3418 = _3417 * _3417;
                                float _3419 = _3418 * _3418;
                                float _3420 = _3366 - _2838;
                                float _3421 = _3367 - _2839;
                                float _3422 = _3368 - _2840;
                                float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                                float _3430 = dot(vec3(_753, _756, _759), vec3((-0.0) - _2838, (-0.0) - _2839, (-0.0) - _2840));
                                float _4526 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3433 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3434 = dot(vec3(_753, _756, _759), vec3(_3426 * _3420, _3426 * _3421, _3426 * _3422));
                                float _4537 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3437 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3441 = ((_3437 * _3437) * (_3419 + (-1.0))) + 1.0;
                                float _3442 = _3379 * _3418;
                                float _3443 = _3442 * _3442;
                                float _3449 = ((1.0 - _3443) * dot(vec3(_753, _756, _759), vec3(_3366, _3367, _3368))) + _3443;
                                float _4548 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3451 = 1.0 - _3418;
                                float _3461 = (0.5 / (((_3450 * ((_3433 * _3451) + _3418)) + 9.9999999392252902907785028219223e-09) + (((_3450 * _3451) + _3418) * _3433))) * _3450;
                                float _4559 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3471 = (_3396 * _3373) * (((_3419 * 3.1415927410125732421875) * (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) / ((_3441 * _3441) * ((_3386 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3397 * _3242.y;
                                frontier_phi_83_pred_1 = _3397 * _3242.x;
                                frontier_phi_83_pred_2 = _3471 * _3254.z;
                                frontier_phi_83_pred_3 = _3471 * _3254.y;
                                frontier_phi_83_pred_4 = _3471 * _3254.x;
                                frontier_phi_83_pred_5 = _3397 * _3242.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3479 = frontier_phi_83_pred;
                            _3478 = frontier_phi_83_pred_1;
                            _3477 = frontier_phi_83_pred_2;
                            _3476 = frontier_phi_83_pred_3;
                            _3475 = frontier_phi_83_pred_4;
                            _3480 = frontier_phi_83_pred_5;
                            _3184 = _3478 + _3197;
                            _3185 = _3479 + _3198;
                            _3186 = _3480 + _3199;
                            _3181 = _3475 + _3194;
                            _3182 = _3476 + _3195;
                            _3183 = _3477 + _3196;
                            if (_3201 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3201;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3186;
                        frontier_phi_77_pred_1 = _3185;
                        frontier_phi_77_pred_2 = _3184;
                        frontier_phi_77_pred_3 = _3183;
                        frontier_phi_77_pred_4 = _3182;
                        frontier_phi_77_pred_5 = _3181;
                    }
                    _2823 = frontier_phi_77_pred;
                    _2821 = frontier_phi_77_pred_1;
                    _2819 = frontier_phi_77_pred_2;
                    _2817 = frontier_phi_77_pred_3;
                    _2815 = frontier_phi_77_pred_4;
                    _2813 = frontier_phi_77_pred_5;
                    uint _2979 = _2978 + 1u;
                    if (_2979 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2972 = _2813;
                        _2973 = _2815;
                        _2974 = _2817;
                        _2975 = _2819;
                        _2976 = _2821;
                        _2977 = _2823;
                        _2978 = _2979;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2817;
                frontier_phi_58_59_ladder_1 = _2823;
                frontier_phi_58_59_ladder_2 = _2821;
                frontier_phi_58_59_ladder_3 = _2819;
                frontier_phi_58_59_ladder_4 = _2815;
                frontier_phi_58_59_ladder_5 = _2813;
            }
            else
            {
                frontier_phi_58_59_ladder = _2695;
                frontier_phi_58_59_ladder_1 = _2701;
                frontier_phi_58_59_ladder_2 = _2699;
                frontier_phi_58_59_ladder_3 = _2697;
                frontier_phi_58_59_ladder_4 = _2693;
                frontier_phi_58_59_ladder_5 = _2691;
            }
            _2812 = frontier_phi_58_59_ladder_5;
            _2814 = frontier_phi_58_59_ladder_4;
            _2816 = frontier_phi_58_59_ladder;
            _2818 = frontier_phi_58_59_ladder_3;
            _2820 = frontier_phi_58_59_ladder_2;
            _2822 = frontier_phi_58_59_ladder_1;
        }
        float _2827 = isnan(1.0) ? _812 : (isnan(_812) ? 1.0 : min(_812, 1.0));
        _2603 = (_2827 * _2818) + _2036;
        _2605 = (_2827 * _2820) + _2038;
        _2607 = (_2827 * _2822) + _2040;
        _2609 = ((_2812 * _796) * _2827) + _2384;
        _2611 = ((_2814 * _798) * _2827) + _2386;
        _2613 = ((_2816 * _799) * _2827) + _2388;
    }
    else
    {
        _2603 = _2036;
        _2605 = _2038;
        _2607 = _2040;
        _2609 = _2384;
        _2611 = _2386;
        _2613 = _2388;
    }
    float _4575 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4586 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4597 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _2630 = ((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2603 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _812))) + ((_2609 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1651)) * cbPerFrame._m0[3u].x);
    float _2631 = ((isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2605 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _812))) + ((_2611 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1651)) * cbPerFrame._m0[3u].x);
    float _2632 = ((isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2607 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _812))) + ((_2613 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1651)) * cbPerFrame._m0[3u].x);
    uint _2633 = _249 + 6u;
    float _2641 = _734 / cbSceneParam._m0[86u].x;
    float _2642 = _735 / cbSceneParam._m0[86u].y;
    vec4 _2656 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2641, _2642, (log2((isnan(cbSceneParam._m0[77u].w) ? _657 : (isnan(_657) ? cbSceneParam._m0[77u].w : min(_657, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2658 = _2656.x;
    float _2659 = _2656.y;
    float _2660 = _2656.z;
    float _2661 = _2656.w;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    if (_657 > cbSceneParam._m0[78u].w)
    {
        float _2716 = isnan(_657) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _657 : min(cbSceneParam._m0[80u].w, _657));
        float _2717 = _2716 / _657;
        float _2728 = _2717 * _707;
        float _2729 = _708 * _2717;
        float _2730 = (-0.0) - _2729;
        float _2732 = _2717 * _709;
        float _2734 = (cbSceneParam._m0[77u].w * _2730) / _2716;
        float _2735 = _2734 + cbSceneParam._m0[79u].w;
        float _2736 = cbSceneParam._m0[79u].w - _2729;
        float _2742 = sqrt(((_2728 * _2728) + (_2729 * _2729)) + (_2732 * _2732));
        float _2745 = (1.0 - (cbSceneParam._m0[77u].w / _2716)) * _2742;
        float _2750 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2752 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2929;
        if (abs((_2730 - _2734) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2929 = ((((_2735 > 0.0) ? exp2(_2750 * _2735) : (2.0 - exp2(_2752 * _2735))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2745;
        }
        else
        {
            float _2873 = 1.0 / cbSceneParam._m0[80u].x;
            float _2874 = isnan(_2736) ? _2735 : (isnan(_2735) ? _2736 : max(_2735, _2736));
            float _2875 = isnan(_2736) ? _2735 : (isnan(_2735) ? _2736 : min(_2735, _2736));
            float _2884 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : min(_2874, 0.0));
            float _2885 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : min(_2875, 0.0));
            _2929 = ((abs(_2742 / _2730) * cbSceneParam._m0[80u].y) * ((((_2884 - _2885) * 2.0) - ((exp2(_2750 * (isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0)))) - exp2(_2750 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0))))) * _2873)) - ((exp2(_2752 * _2884) - exp2(_2752 * _2885)) * _2873))) + (_2745 * cbSceneParam._m0[80u].z);
        }
        vec4 _2931 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2641, _2642, 1.0), 0.0);
        float _2940 = exp2((_2929 * (-1.44269502162933349609375)) * (1.0 - _2931.w));
        float _2941 = log2(_2940);
        float _2957 = log2(_2661);
        _2754 = (exp2(_2957 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].x)) * _2931.x) / cbSceneParam._m0[78u].x)) + _2658;
        _2756 = (exp2(_2957 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].y)) * _2931.y) / cbSceneParam._m0[78u].y)) + _2659;
        _2758 = (exp2(_2957 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].z)) * _2931.z) / cbSceneParam._m0[78u].z)) + _2660;
        _2760 = _2940 * _2661;
    }
    else
    {
        _2754 = _2658;
        _2756 = _2659;
        _2758 = _2660;
        _2760 = _2661;
    }
    bool _2967;
    vec4 _2770;
    vec4 _2792;
    float _2794;
    float _2798;
    float _2799;
    float _2800;
    float _2801;
    bool _2811;
    for (;;)
    {
        _2770 = cbMatDynParam._m0[0u];
        float _2772 = roundEven(_2770.y);
        bool _2773 = _2772 == 3.0;
        float _2774 = log2(_2760);
        float _2781 = exp2(_2774 * cbSceneParam._m0[78u].x) * _2630;
        float _2782 = exp2(_2774 * cbSceneParam._m0[78u].y) * _2631;
        float _2783 = exp2(_2774 * cbSceneParam._m0[78u].z) * _2632;
        float _2790 = _723 + (-0.5);
        _2792 = cbMtdParam._m0[1u];
        _2794 = _2792.y * _2790;
        float _2797 = (_2772 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2798 = _2797 * (_2773 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2754)));
        _2799 = _2797 * (_2773 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2756)));
        _2800 = _2797 * (_2773 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2758)));
        _2801 = _2790 * 0.999000012874603271484375;
        _2811 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2811)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2801) < 0.5)
            {
                _2967 = true;
                break;
            }
        }
        uint _2908 = _772 + uint(_2770.w);
        if ((cbInstanceData._m0[_2908].w < 1.0) && ((cbInstanceData._m0[_2908].w + _2801) < 0.5))
        {
            _2967 = true;
            break;
        }
        if ((_2794 + 1.0) < _2792.x)
        {
            _2967 = true;
            break;
        }
        _2967 = false;
        break;
    }
    float _3172;
    if (_2967)
    {
        discard_state = true;
        _3172 = 0.0;
    }
    else
    {
        _3172 = cbInstanceData._m0[_2633].w;
    }
    SV_Target.x = _2798;
    SV_Target.y = _2799;
    SV_Target.z = _2800;
    SV_Target.w = _3172;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2633].w;
    discard_exit();
}


