#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1323;
float _3704;
float _3705;
float _3706;
float _3707;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3716 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _456 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _469 = ((_439.z - _460) * _392) + _460;
    float _472 = ((((_439.x - _458) * _392) + _458) * 2.0) + (-1.0);
    float _473 = ((((_439.y - _459) * _392) + _459) * 2.0) + (-1.0);
    float _474 = dot(vec2(_472, _473), vec2(_472, _473));
    float _3727 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))));
    float _484 = _472 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_414.x * 2.0) + (-1.0)));
    float _485 = _473 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_414.y * 2.0) + (-1.0)));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _514 = _512.x;
    float _515 = 1.0 - _514;
    float _543 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_514 - _515) * cbMtdParam._m0[24u].w) + _515) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3738 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _552 = ((((cbMtdParam._m0[10u].x - _399) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _544) + _399;
    float _553 = ((((cbMtdParam._m0[10u].y - _400) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _544) + _400;
    float _554 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _401)) * _544) + _401;
    vec4 _566 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _582 = _580.x;
    float _600 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _582) * _392) + _582;
    float _604 = ((_566.x - _600) * cbMtdParam._m0[19u].z) + _600;
    float _606 = _604 - (_604 * _544);
    float _611 = (((_414.z - _469) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _469;
    float _615 = ((cbMtdParam._m0[23u].y - _611) * _544) + _611;
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _636 = _634.x;
    float _637 = _634.y;
    float _641 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_243, _244, _245, 0.0));
    vec4 _656 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _274) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _275) + cbTextureTilingScale._m0[18u].w));
    float _658 = _656.x;
    float _663 = fract(_656.w + cbPerFrame._m0[22u].x);
    float _665 = (1.0 - _663) * _658;
    float _670 = ((_663 + (-1.0)) + _658) * 9.0;
    float _672 = ((_658 + (-1.0)) + _663) * 9.0;
    float _673 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _674 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _688 = (_665 * ((_656.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _673 : (isnan(_673) ? 3.0 : min(_673, 3.0))) * 3.1415927410125732421875);
    float _690 = (_665 * ((_656.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _674 : (isnan(_674) ? 3.0 : min(_674, 3.0))) * 3.1415927410125732421875);
    float _694 = inversesqrt(dot(vec3(_688, _690, 1.0), vec3(_688, _690, 1.0)));
    float _710 = (((((0.5 - _636) + ((_688 * 0.5) * _694)) * _641) + _636) * 2.0) + (-1.0);
    float _711 = (((((0.5 - _637) + ((_694 * 0.5) * _690)) * _641) + _637) * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _3769 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _728 = ((((cbMtdParam._m0[22u].z * _484) - _484) + _710) * _544) + _484;
    float _729 = ((((cbMtdParam._m0[22u].z * _485) - _485) + _711) * _544) + _485;
    float _730 = (_544 * (sqrt(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) - _479)) + _479;
    float _732 = cbMtdParam._m0[22u].x + _498.w;
    float _735 = fma(_730, _243, fma(_729, _249 * TANGENT.x, (_235 * _227) * _728));
    float _738 = fma(_730, _244, fma(_729, _249 * TANGENT.y, (_235 * _228) * _728));
    float _741 = fma(_730, _245, fma(_729, _249 * TANGENT.z, (_235 * _229) * _728));
    float _745 = inversesqrt(dot(vec3(_735, _738, _741), vec3(_735, _738, _741)));
    float _746 = _745 * _735;
    float _747 = _745 * _738;
    float _748 = _745 * _741;
    float _3780 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _749 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _3802 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3813 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _3824 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3835 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _754 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _768 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _818 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _808);
    float _819 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _808);
    float _820 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _808);
    float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
    float _825 = _818 * _824;
    float _826 = _819 * _824;
    float _827 = _820 * _824;
    vec4 _832 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _834 = _832.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1005 = sqrt(((_818 * _818) + (_819 * _819)) + (_820 * _820));
        float _1011 = (cbMatDynParam._m0[5u].x * _1005) + cbMatDynParam._m0[5u].y;
        float _3846 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1016 = (cbMatDynParam._m0[5u].z * _1005) + cbMatDynParam._m0[5u].w;
        float _3857 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) - _1012)) + _1012) < ((_834 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _845 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _846 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _864 = fma(_748, cbSceneParam._m0[5u].z, fma(_747, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _746));
    float _867 = fma(_748, cbSceneParam._m0[6u].z, fma(_747, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _746));
    float _870 = fma(_748, cbSceneParam._m0[7u].z, fma(_747, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _746));
    uint _883 = _255 + 9u;
    uint _884 = _883 + uint(cbMatDynParam._m0[0u].w);
    float _890 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_884].x;
    float _891 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_884].y;
    float _892 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * cbInstanceData._m0[_884].z;
    float _3868 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _896 = 1.0 - _754;
    float _897 = _893 * _896;
    float _898 = _894 * _896;
    float _899 = _895 * _896;
    float _904 = (_893 + (-0.039999999105930328369140625)) * _754;
    float _905 = (_894 + (-0.039999999105930328369140625)) * _754;
    float _906 = (_895 + (-0.039999999105930328369140625)) * _754;
    float _907 = _904 + 0.039999999105930328369140625;
    float _909 = _905 + 0.039999999105930328369140625;
    float _910 = _906 + 0.039999999105930328369140625;
    vec4 _919 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _845, cbSceneParam._m0[86u].y * _846));
    float _923 = ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * TEXCOORD_5.w) * _919.x;
    float _924 = dot(vec3(_746, _747, _748), vec3(_825, _826, _827));
    float _927 = _924 * 2.0;
    float _931 = (_927 * _746) - _825;
    float _932 = (_927 * _747) - _826;
    float _933 = (_927 * _748) - _827;
    float _937 = abs(dot(vec3(_825, _826, _827), vec3(_746, _747, _748)));
    float _3901 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _939 = sqrt(_749);
    float _951 = exp2((_939 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_939 * 3.0));
    float _957 = (1.0 - _951) * ((_939 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _958 = _951 * _939;
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1322;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1048 = fma(_994, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _986));
        float _1052 = fma(_994, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _986));
        float _1056 = fma(_994, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _986));
        float _1080 = _986 + _746;
        float _1081 = _990 + _747;
        float _1082 = _994 + _748;
        float _1092 = fma(_1082, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1080)) - _1048;
        float _1093 = fma(_1082, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1080)) - _1052;
        float _1094 = fma(_1082, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1080)) - _1056;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1048 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1052 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[34u].z) + ((((((_1056 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1150 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1116.x + (-0.5));
        float _1152 = _1150 * (_1116.y + (-0.5));
        float _1153 = _1150 * (_1116.z + (-0.5));
        float _1160 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1123.x + (-0.5));
        float _1162 = _1160 * (_1123.y + (-0.5));
        float _1163 = _1160 * (_1123.z + (-0.5));
        float _1170 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1130.x + (-0.5));
        float _1172 = _1170 * (_1130.y + (-0.5));
        float _1173 = _1170 * (_1130.z + (-0.5));
        float _1180 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1137.x + (-0.5));
        float _1182 = _1180 * (_1137.y + (-0.5));
        float _1183 = _1180 * (_1137.z + (-0.5));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = _1151 * 0.5;
        float _1188 = _1161 * 0.5;
        float _1189 = _1171 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1204 = (dot(vec3(_746, _747, _748), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1214 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3949 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1216 + 1.0))) + _1221) * _1184;
        float _1231 = _1152 * 0.5;
        float _1232 = _1162 * 0.5;
        float _1233 = _1172 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_746, _747, _748), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3982 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1258 + 1.0))) + _1263) * _1185;
        float _1273 = _1153 * 0.5;
        float _1274 = _1163 * 0.5;
        float _1275 = _1173 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_746, _747, _748), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4015 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1300 + 1.0))) + _1305) * _1186;
        _1322 = _1153;
        _1324 = _1152;
        _1325 = _1151;
        _1326 = _1163;
        _1327 = _1162;
        _1328 = _1161;
        _1329 = _1173;
        _1330 = _1172;
        _1331 = _1171;
        _1332 = _1186;
        _1333 = _1185;
        _1334 = _1184;
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
    }
    else
    {
        _1322 = _1323;
        _1324 = _1323;
        _1325 = _1323;
        _1326 = _1323;
        _1327 = _1323;
        _1328 = _1323;
        _1329 = _1323;
        _1330 = _1323;
        _1331 = _1323;
        _1332 = _1323;
        _1333 = _1323;
        _1334 = _1323;
        _1335 = 0.0;
        _1336 = 0.0;
        _1337 = 0.0;
    }
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1365 = fma(_994, cbModelParam._m0[30u].z, fma(_990, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986));
        float _1369 = fma(_994, cbModelParam._m0[31u].z, fma(_990, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986));
        float _1373 = fma(_994, cbModelParam._m0[32u].z, fma(_990, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986));
        float _1396 = _986 + _746;
        float _1397 = _990 + _747;
        float _1398 = _994 + _748;
        float _1408 = fma(_1398, cbModelParam._m0[30u].z, fma(_1397, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1396)) - _1365;
        float _1409 = fma(_1398, cbModelParam._m0[31u].z, fma(_1397, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1396)) - _1369;
        float _1410 = fma(_1398, cbModelParam._m0[32u].z, fma(_1397, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1396)) - _1373;
        float _1414 = inversesqrt(dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410)));
        float _1427 = ((_1414 * _1408) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1365 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1414 * _1409) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1369 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1414 * _1410) / cbModelParam._m0[35u].z) + ((((((_1373 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        float _1464 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1431.x + (-0.5));
        float _1466 = _1464 * (_1431.y + (-0.5));
        float _1467 = _1464 * (_1431.z + (-0.5));
        float _1474 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1438.x + (-0.5));
        float _1476 = _1474 * (_1438.y + (-0.5));
        float _1477 = _1474 * (_1438.z + (-0.5));
        float _1484 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1445.x + (-0.5));
        float _1486 = _1484 * (_1445.y + (-0.5));
        float _1487 = _1484 * (_1445.z + (-0.5));
        float _1494 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1452.x + (-0.5));
        float _1496 = _1494 * (_1452.y + (-0.5));
        float _1497 = _1494 * (_1452.z + (-0.5));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = _1465 * 0.5;
        float _1502 = _1475 * 0.5;
        float _1503 = _1485 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_746, _747, _748), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4078 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1528 + 1.0))) + _1533) * _1498;
        float _1543 = _1466 * 0.5;
        float _1544 = _1476 * 0.5;
        float _1545 = _1486 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_746, _747, _748), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4111 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1570 + 1.0))) + _1575) * _1499;
        float _1585 = _1467 * 0.5;
        float _1586 = _1477 * 0.5;
        float _1587 = _1487 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_746, _747, _748), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4144 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1612 + 1.0))) + _1617) * _1500;
        _1634 = _1467;
        _1635 = _1466;
        _1636 = _1465;
        _1637 = _1477;
        _1638 = _1476;
        _1639 = _1475;
        _1640 = _1487;
        _1641 = _1486;
        _1642 = _1485;
        _1643 = _1500;
        _1644 = _1499;
        _1645 = _1498;
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
    }
    else
    {
        _1634 = _1323;
        _1635 = _1323;
        _1636 = _1323;
        _1637 = _1323;
        _1638 = _1323;
        _1639 = _1323;
        _1640 = _1323;
        _1641 = _1323;
        _1642 = _1323;
        _1643 = _1323;
        _1644 = _1323;
        _1645 = _1323;
        _1646 = 0.0;
        _1647 = 0.0;
        _1648 = 0.0;
    }
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1335)) + _1335;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1336)) + _1336;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1337)) + _1337;
    float _1681 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1658));
    float _1702 = _931 * 0.5;
    float _1703 = _932 * 0.5;
    float _1704 = _933 * 0.5;
    float _1705 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1708 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1711 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1745;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1718 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1322, _1326, _1329, _1332));
        float _1722 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1324, _1327, _1330, _1333));
        float _1726 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1325, _1328, _1331, _1334));
        float _1733 = dot(vec4(cbModelParam._m0[39u]), vec4(_1702, _1703, _1704, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1733) ? 0.0 : (isnan(0.0) ? _1733 : max(0.0, _1733))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1756;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1747 = dot(vec4(cbModelParam._m0[40u]), vec4(_1702, _1703, _1704, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1760 = (_1756 * cbModelParam._m0[1u].x) + (_1745 * (1.0 - cbModelParam._m0[1u].x));
    float _1770 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _749);
    float _1771 = isnan(_1770) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1770 : min(cbModelParam._m0[25u].z, _1770));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1820 = fma(_994, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _986)) + cbModelParam._m0[13u].w;
        float _1824 = fma(_994, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _986)) + cbModelParam._m0[14u].w;
        float _1828 = fma(_994, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _986)) + cbModelParam._m0[15u].w;
        float _1831 = fma(_933, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931));
        float _1834 = fma(_933, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931));
        float _1837 = fma(_933, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931));
        float _1865;
        if (_1831 > 0.0)
        {
            _1865 = abs((1.0 - _1820) / _1831);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1820 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1865 = frontier_phi_17_15_ladder;
        }
        float _2068;
        if (_1834 > 0.0)
        {
            _2068 = abs((1.0 - _1824) / _1834);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1824 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2068 = frontier_phi_26_22_ladder;
        }
        float _2322;
        if (_1837 > 0.0)
        {
            _2322 = abs((1.0 - _1828) / _1837);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1828 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2322 = frontier_phi_38_33_ladder;
        }
        float _2324 = isnan(_2068) ? _1865 : (isnan(_1865) ? _2068 : min(_1865, _2068));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1831) + _1820;
        float _2330 = (_2325 * _1834) + _1824;
        float _2331 = (_2325 * _1837) + _1828;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2332;
        float _2336 = _2332 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 > _2336) || ((_2330 < _2334) || ((_2329 < _2334) || (_2329 > _2336))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2331, cbModelParam._m0[9u].z, fma(_2330, cbModelParam._m0[9u].y, _2329 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2331, cbModelParam._m0[10u].z, fma(_2330, cbModelParam._m0[10u].y, _2329 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2331, cbModelParam._m0[11u].z, fma(_2330, cbModelParam._m0[11u].y, _2329 * cbModelParam._m0[11u].x))), _1771);
            frontier_phi_16_38_ladder = _2459.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2459.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2459.x * cbModelParam._m0[1u].y;
        }
        _1853 = frontier_phi_16_38_ladder_2;
        _1855 = frontier_phi_16_38_ladder_1;
        _1857 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1841 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_931, _932, _933), _1771);
        _1853 = _1841.x * cbModelParam._m0[1u].y;
        _1855 = _1841.y * cbModelParam._m0[1u].y;
        _1857 = _1841.z * cbModelParam._m0[1u].y;
    }
    float _1861 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _749);
    float _1862 = isnan(_1861) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1861 : min(cbModelParam._m0[25u].w, _1861));
    float _1952;
    float _1954;
    float _1956;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1916 = fma(_994, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _986)) + cbModelParam._m0[21u].w;
        float _1920 = fma(_994, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _986)) + cbModelParam._m0[22u].w;
        float _1924 = fma(_994, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _986)) + cbModelParam._m0[23u].w;
        float _1927 = fma(_933, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931));
        float _1930 = fma(_933, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931));
        float _1933 = fma(_933, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931));
        float _2073;
        if (_1927 > 0.0)
        {
            _2073 = abs((1.0 - _1916) / _1927);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1916 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2073 = frontier_phi_28_24_ladder;
        }
        float _2349;
        if (_1930 > 0.0)
        {
            _2349 = abs((1.0 - _1920) / _1930);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1920 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2349 = frontier_phi_40_35_ladder;
        }
        float _2562;
        if (_1933 > 0.0)
        {
            _2562 = abs((1.0 - _1924) / _1933);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1924 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2562 = frontier_phi_49_46_ladder;
        }
        float _2564 = isnan(_2349) ? _2073 : (isnan(_2073) ? _2349 : min(_2073, _2349));
        float _2565 = isnan(_2562) ? _2564 : (isnan(_2564) ? _2562 : min(_2564, _2562));
        float _2569 = (_2565 * _1927) + _1916;
        float _2570 = (_2565 * _1930) + _1920;
        float _2571 = (_2565 * _1933) + _1924;
        float _2572 = _2565 * 9.9999997473787516355514526367188e-05;
        float _2573 = (-1.0) - _2572;
        float _2575 = _2572 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2571 > _2575) || ((_2571 < _2573) || ((_2570 > _2575) || ((_2570 < _2573) || ((_2569 < _2573) || (_2569 > _2575))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2770 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2571, cbModelParam._m0[17u].z, fma(_2570, cbModelParam._m0[17u].y, _2569 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2571, cbModelParam._m0[18u].z, fma(_2570, cbModelParam._m0[18u].y, _2569 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2571, cbModelParam._m0[19u].z, fma(_2570, cbModelParam._m0[19u].y, _2569 * cbModelParam._m0[19u].x))), _1862);
            frontier_phi_25_49_ladder = _2770.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2770.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2770.x * cbModelParam._m0[1u].z;
        }
        _1952 = frontier_phi_25_49_ladder_2;
        _1954 = frontier_phi_25_49_ladder_1;
        _1956 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1936 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_931, _932, _933), _1862);
        _1952 = _1936.x * cbModelParam._m0[1u].z;
        _1954 = _1936.y * cbModelParam._m0[1u].z;
        _1956 = _1936.z * cbModelParam._m0[1u].z;
    }
    float _1969 = (((_957 * _907) + _958) * _923) * ((cbModelParam._m0[1u].w * (_1952 - _1853)) + _1853);
    float _1971 = (((_957 * _909) + _958) * _923) * ((cbModelParam._m0[1u].w * (_1954 - _1855)) + _1855);
    float _1973 = (((_957 * _910) + _958) * _923) * ((cbModelParam._m0[1u].w * (_1956 - _1857)) + _1857);
    float _1976 = fma(_1973, cbSceneParam._m0[89u].z, fma(_1971, cbSceneParam._m0[89u].y, _1969 * cbSceneParam._m0[89u].x));
    float _1979 = fma(_1973, cbSceneParam._m0[90u].z, fma(_1971, cbSceneParam._m0[90u].y, _1969 * cbSceneParam._m0[90u].x));
    float _1982 = fma(_1973, cbSceneParam._m0[91u].z, fma(_1971, cbSceneParam._m0[91u].y, _1969 * cbSceneParam._m0[91u].x));
    uvec4 _1992 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _1994 = _1992.x * 14u;
    uint _1995 = _1994 + 13u;
    float _2002 = _923 + (-1.0);
    float _2007 = (cbLight._m0[_1995].x * _2002) + 1.0;
    float _2008 = (cbLight._m0[_1995].y * _2002) + 1.0;
    float _2009 = (cbLight._m0[_1995].z * _2002) + 1.0;
    float _2010 = (cbLight._m0[_1995].w * _2002) + 1.0;
    uint _2011 = _1994 + 5u;
    float _2017 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
    uint _2021 = _1994 + 4u;
    float _2027 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
    uint _2031 = _1994 | 1u;
    float _2042 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_746, _747, _748));
    float _2045 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_746, _747, _748));
    float _4280 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _4291 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2050 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.3183098733425140380859375;
    float _2052 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * 0.3183098733425140380859375;
    float _2059 = ((cbLight._m0[_2011].x * _2017) * _2052) + ((cbLight._m0[_2021].x * _2027) * _2050);
    float _2060 = ((_2017 * cbLight._m0[_2011].y) * _2052) + ((_2027 * cbLight._m0[_2021].y) * _2050);
    float _2061 = ((_2017 * cbLight._m0[_2011].z) * _2052) + ((_2027 * cbLight._m0[_2021].z) * _2050);
    uvec4 _2065 = floatBitsToUint(cbLight._m0[_1994 + 12u]);
    bool _2067 = _2065.x == 0u;
    float _2078;
    float _2080;
    float _2082;
    if (_2067)
    {
        _2078 = _2059;
        _2080 = _2060;
        _2082 = _2061;
    }
    else
    {
        uint _2086 = _1994 + 6u;
        float _2102 = (dot(vec3(cbLight._m0[_1994 + 2u].xyz), vec3(_746, _747, _748)) * 0.5) + 0.5;
        float _2103 = _2102 * _2102;
        float _4302 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2105 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2078 = (((cbLight._m0[_2086].x * 0.3183098733425140380859375) * _2104) * _2105) + _2059;
        _2080 = (((cbLight._m0[_2086].y * 0.3183098733425140380859375) * _2104) * _2105) + _2060;
        _2082 = (((cbLight._m0[_2086].z * 0.3183098733425140380859375) * _2104) * _2105) + _2061;
    }
    bool _2085 = _2065.y == 0u;
    float _2123;
    float _2125;
    float _2127;
    if (_2085)
    {
        _2123 = _2078;
        _2125 = _2080;
        _2127 = _2082;
    }
    else
    {
        uint _2293 = _1994 + 7u;
        float _2309 = (dot(vec3(cbLight._m0[_1994 + 3u].xyz), vec3(_746, _747, _748)) * 0.5) + 0.5;
        float _2310 = _2309 * _2309;
        float _4318 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2311 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2312 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2123 = (((cbLight._m0[_2293].x * 0.3183098733425140380859375) * _2311) * _2312) + _2078;
        _2125 = (((cbLight._m0[_2293].y * 0.3183098733425140380859375) * _2311) * _2312) + _2080;
        _2127 = (((cbLight._m0[_2293].z * 0.3183098733425140380859375) * _2311) * _2312) + _2082;
    }
    uint _2130 = _1994 + 8u;
    float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _749) * 0.949999988079071044921875);
    float _2144 = _2143 * _2143;
    float _2145 = cbLight._m0[_1994].x + _825;
    float _2146 = cbLight._m0[_1994].y + _826;
    float _2147 = cbLight._m0[_1994].z + _827;
    float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
    float _2152 = _2151 * _2145;
    float _2153 = _2151 * _2146;
    float _2154 = _2151 * _2147;
    float _2155 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_1994].xyz));
    float _4334 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _4345 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _2159 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2160 = dot(vec3(_746, _747, _748), vec3(_2152, _2153, _2154));
    float _4356 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2152, _2153, _2154));
    float _4367 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2144 * _2144;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2180 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
    float _2181 = 0.959999978542327880859375 - _904;
    float _2183 = 0.959999978542327880859375 - _905;
    float _2184 = 0.959999978542327880859375 - _906;
    float _2191 = 1.0 - _2144;
    float _2202 = (0.5 / (((_2159 * ((_2158 * _2191) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2191) + _2144) * _2158))) * _2158;
    float _4378 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2204 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    uint _2215 = _1994 + 9u;
    float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _749) * 0.949999988079071044921875);
    float _2227 = _2226 * _2226;
    float _2228 = cbLight._m0[_2031].x + _825;
    float _2229 = cbLight._m0[_2031].y + _826;
    float _2230 = cbLight._m0[_2031].z + _827;
    float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
    float _2235 = _2234 * _2228;
    float _2236 = _2234 * _2229;
    float _2237 = _2234 * _2230;
    float _2238 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2031].xyz));
    float _4389 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2242 = dot(vec3(_746, _747, _748), vec3(_2235, _2236, _2237));
    float _4400 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2246 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2235, _2236, _2237));
    float _4411 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2250 = _2227 * _2227;
    float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
    float _2261 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
    float _2268 = 1.0 - _2227;
    float _2278 = (0.5 / (((_2159 * ((_2241 * _2268) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2268) + _2227) * _2241))) * _2241;
    float _4422 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2280 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
    float _2290 = (((((_2261 * _2181) + _907) * cbLight._m0[_2215].x) * _2280) * _2017) + (((((_2180 * _2181) + _907) * cbLight._m0[_2130].x) * _2204) * _2027);
    float _2291 = (((((_2261 * _2183) + _909) * cbLight._m0[_2215].y) * _2280) * _2017) + (((((_2180 * _2183) + _909) * cbLight._m0[_2130].y) * _2204) * _2027);
    float _2292 = (((((_2261 * _2184) + _910) * cbLight._m0[_2215].z) * _2280) * _2017) + (((((_2180 * _2184) + _910) * cbLight._m0[_2130].z) * _2204) * _2027);
    float _2354;
    float _2356;
    float _2358;
    if (_2067)
    {
        _2354 = _2290;
        _2356 = _2291;
        _2358 = _2292;
    }
    else
    {
        uint _2360 = _1994 + 2u;
        uint _2364 = _1994 + 10u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _749) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _825;
        float _2381 = cbLight._m0[_2360].y + _826;
        float _2382 = cbLight._m0[_2360].z + _827;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2360].xyz));
        float _4433 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2394 = dot(vec3(_746, _747, _748), vec3(_2387, _2388, _2389));
        float _4444 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4455 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2413 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
        float _2420 = 1.0 - _2379;
        float _2430 = (0.5 / (((_2159 * ((_2393 * _2420) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2420) + _2379) * _2393))) * _2393;
        float _4466 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2432 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2433 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2354 = (((((_2413 * _2181) + _907) * cbLight._m0[_2364].x) * _2432) * _2433) + _2290;
        _2356 = (((((_2413 * _2183) + _909) * cbLight._m0[_2364].y) * _2432) * _2433) + _2291;
        _2358 = (((((_2413 * _2184) + _910) * cbLight._m0[_2364].z) * _2432) * _2433) + _2292;
    }
    float _2468;
    float _2470;
    float _2472;
    if (_2085)
    {
        _2468 = _2354;
        _2470 = _2356;
        _2472 = _2358;
    }
    else
    {
        uint _2479 = _1994 + 3u;
        uint _2483 = _1994 + 11u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _749) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _825;
        float _2500 = cbLight._m0[_2479].y + _826;
        float _2501 = cbLight._m0[_2479].z + _827;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2479].xyz));
        float _4482 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2513 = dot(vec3(_746, _747, _748), vec3(_2506, _2507, _2508));
        float _4493 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4504 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0);
        float _2539 = 1.0 - _2498;
        float _2549 = (0.5 / (((_2159 * ((_2512 * _2539) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2539) + _2498) * _2512))) * _2512;
        float _4515 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2551 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2552 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2468 = (((((_2532 * _2181) + _907) * cbLight._m0[_2483].x) * _2551) * _2552) + _2354;
        _2470 = (((((_2532 * _2183) + _909) * cbLight._m0[_2483].y) * _2551) * _2552) + _2356;
        _2472 = (((((_2532 * _2184) + _910) * cbLight._m0[_2483].z) * _2551) * _2552) + _2358;
    }
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    if (_1992.y == 0u)
    {
        float _2627 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2627;
        float _2629 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2627;
        float _2630 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2627;
        uvec4 _2642 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2643 = _2642.x;
        uint _2654 = uint((float(_2642.y) * floor(float(uint(cbSceneParam._m0[85u].y * _846) / _2643))) + floor(float(uint(cbSceneParam._m0[85u].x * _845) / _2643)));
        float _2664 = (log2(_2630 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2665 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        uint _2668 = uint(isnan(14.0) ? _2665 : (isnan(_2665) ? 14.0 : min(_2665, 14.0)));
        uvec4 _2673 = texelFetch(g_lightClusterGridBuffer, int(((_2668 << 2u) + (_2654 << 6u)) >> 2u));
        uint _2674 = _2673.x;
        uint _2675 = _2642.z;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        if (((((1u << ((_2675 >> 4u) & 15u)) + 4294967295u) & _2674) == 0u) || ((_2675 & 240u) == 0u))
        {
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
        }
        else
        {
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            uint _2934 = 0u;
            uint _2943;
            bool _2944;
            for (;;)
            {
                _2943 = texelFetch(g_lightClassification, int((((_2668 << 5u) + (_2654 << 9u)) + (_2934 << 2u)) >> 2u)).x;
                _2944 = _2943 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2944)
                {
                    frontier_phi_66_pred = _2928;
                    frontier_phi_66_pred_1 = _2933;
                    frontier_phi_66_pred_2 = _2932;
                    frontier_phi_66_pred_3 = _2931;
                    frontier_phi_66_pred_4 = _2930;
                    frontier_phi_66_pred_5 = _2929;
                }
                else
                {
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    uint _3079;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2943;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    for (;;)
                    {
                        uint _3083 = uint(findLSB(_3079)) + (_2934 << 5u);
                        uint _3080 = (_3079 + 4294967295u) & _3079;
                        uint _3085 = _3083 * 48u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3105 = (_3083 * 48u) + 4u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 3u)).x));
                        uint _3124 = (_3083 * 48u) + 8u;
                        vec3 _3135 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x));
                        float _3139 = _3099.x - _2628;
                        float _3140 = _3099.y - _2629;
                        float _3141 = _3099.z - _2630;
                        float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                        float _3145 = inversesqrt(_3142);
                        float _3146 = _3145 * _3139;
                        float _3147 = _3145 * _3140;
                        float _3148 = _3145 * _3141;
                        float _3149 = dot(vec3(_864, _867, _870), vec3(_3146, _3147, _3148));
                        float _3154 = 1.0 - (_3142 * _3099.w);
                        float _4541 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3156 = sqrt(_3142) * _3118.w;
                        float _3159 = 1.39999997615814208984375 / (_3156 + 1.39999997615814208984375);
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3149) + _3160;
                        float _3166 = _3156 * _3156;
                        float _3170 = ((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3155) / ((_3166 * 0.699999988079071044921875) + 1.0);
                        float _3174 = (-0.0) - _2628;
                        float _3175 = (-0.0) - _2629;
                        float _3176 = (-0.0) - _2630;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3181 = _3180 * _3174;
                        float _3182 = _3180 * _3175;
                        float _3183 = _3180 * _3176;
                        float _3191 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                        float _3192 = 1.0 - _939;
                        float _3199 = sqrt(1.0 - ((1.0 - (_3192 * _3192)) * (1.0 - (_3191 * _3191))));
                        float _3200 = _3199 * _3199;
                        float _3201 = _3200 * _3200;
                        float _3202 = _3181 + _3146;
                        float _3203 = _3182 + _3147;
                        float _3204 = _3183 + _3148;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3212 = dot(vec3(_864, _867, _870), vec3(_3181, _3182, _3183));
                        float _4557 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3216 = dot(vec3(_864, _867, _870), vec3(_3208 * _3202, _3208 * _3203, _3208 * _3204));
                        float _4568 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3223 = ((_3219 * _3219) * (_3201 + (-1.0))) + 1.0;
                        float _3224 = _3159 * _3200;
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3149) + _3225;
                        float _4579 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3230 = 1.0 - _3200;
                        float _3240 = (0.5 / (((_3229 * ((_3215 * _3230) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_3229 * _3230) + _3200) * _3215))) * _3229;
                        float _4590 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3250 = (((_3201 * 3.1415927410125732421875) * (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) / ((_3223 * _3223) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125))) * _3155;
                        _3003 = (_3170 * _3118.x) + _3076;
                        _3004 = (_3170 * _3118.y) + _3077;
                        _3005 = (_3170 * _3118.z) + _3078;
                        _3000 = (_3250 * _3135.x) + _3073;
                        _3001 = (_3250 * _3135.y) + _3074;
                        _3002 = (_3250 * _3135.z) + _3075;
                        if (_3080 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3080;
                        }
                    }
                    frontier_phi_66_pred = _3000;
                    frontier_phi_66_pred_1 = _3005;
                    frontier_phi_66_pred_2 = _3004;
                    frontier_phi_66_pred_3 = _3003;
                    frontier_phi_66_pred_4 = _3002;
                    frontier_phi_66_pred_5 = _3001;
                }
                _2776 = frontier_phi_66_pred;
                _2786 = frontier_phi_66_pred_1;
                _2784 = frontier_phi_66_pred_2;
                _2782 = frontier_phi_66_pred_3;
                _2780 = frontier_phi_66_pred_4;
                _2778 = frontier_phi_66_pred_5;
                uint _2935 = _2934 + 1u;
                if (_2935 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2928 = _2776;
                    _2929 = _2778;
                    _2930 = _2780;
                    _2931 = _2782;
                    _2932 = _2784;
                    _2933 = _2786;
                    _2934 = _2935;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
        }
        uvec4 _2789 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2790 = _2789.z;
        uint _2792 = (_2790 >> 8u) & 15u;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((4294967295u << _2792) & _2674) == 0u)
        {
            _2896 = _2775;
            _2898 = _2777;
            _2900 = _2779;
            _2902 = _2781;
            _2904 = _2783;
            _2906 = _2785;
        }
        else
        {
            float _2921 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
            float _2922 = _2921 * _2628;
            float _2923 = _2921 * _2629;
            float _2924 = _2921 * _2630;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2792 < ((_2790 >> 12u) & 15u))
            {
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _3056 = _2775;
                float _3057 = _2777;
                float _3058 = _2779;
                float _3059 = _2781;
                float _3060 = _2783;
                float _3061 = _2785;
                uint _3062 = _2792;
                uint _3071;
                bool _3072;
                for (;;)
                {
                    _3071 = texelFetch(g_lightClassification, int((((_2668 << 5u) + (_2654 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                    _3072 = _3071 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3072)
                    {
                        frontier_phi_77_pred = _3061;
                        frontier_phi_77_pred_1 = _3060;
                        frontier_phi_77_pred_2 = _3059;
                        frontier_phi_77_pred_3 = _3058;
                        frontier_phi_77_pred_4 = _3057;
                        frontier_phi_77_pred_5 = _3056;
                    }
                    else
                    {
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3277 = _3056;
                        float _3278 = _3057;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        float _3281 = _3060;
                        float _3282 = _3061;
                        uint _3283 = _3071;
                        uint _3284;
                        vec4 _3309;
                        float _3310;
                        vec4 _3325;
                        vec3 _3337;
                        vec4 _3352;
                        vec4 _3367;
                        float _3413;
                        bool _3414;
                        for (;;)
                        {
                            uint _3294 = ((_3062 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3283));
                            _3284 = (_3283 + 4294967295u) & _3283;
                            uint _3296 = _3294 * 40u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            _3310 = _3309.w;
                            uint _3312 = (_3294 * 40u) + 4u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3327 = (_3294 * 40u) + 8u;
                            _3337 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x));
                            uint _3339 = (_3294 * 40u) + 16u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3294 * 40u) + 20u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3294 * 40u) + 24u;
                            vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3388 = (_3294 * 40u) + 28u;
                            vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            _3413 = fma(_2630, _3401.z, fma(_2629, _3401.y, _3401.x * _2628)) + _3401.w;
                            _3414 = !((fma(_2630, _3382.z, fma(_2629, _3382.y, _3382.x * _2628)) + _3382.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3414)
                            {
                                float _3441 = _3309.x - _2628;
                                float _3442 = _3309.y - _2629;
                                float _3443 = _3309.z - _2630;
                                float _3444 = dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443));
                                float _3447 = inversesqrt(_3444);
                                float _3448 = _3447 * _3441;
                                float _3449 = _3447 * _3442;
                                float _3450 = _3447 * _3443;
                                float _3454 = 1.0 - (_3444 / (_3310 * _3310));
                                float _4601 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3459 = sqrt(_3444) * _3325.w;
                                float _3461 = 1.39999997615814208984375 / (_3459 + 1.39999997615814208984375);
                                float _3462 = _3461 * _3461;
                                float _3465 = ((1.0 - _3462) * dot(vec3(_3448, _3449, _3450), vec3(_864, _867, _870))) + _3462;
                                float _3468 = _3459 * _3459;
                                float _3472 = (fma(_2630, _3352.z, fma(_2629, _3352.y, _3352.x * _2628)) + _3352.w) / _3413;
                                float _3473 = (fma(_2630, _3367.z, fma(_2629, _3367.y, _3367.x * _2628)) + _3367.w) / _3413;
                                float _3477 = 1.0 - dot(vec2(_3472, _3473), vec2(_3472, _3473));
                                float _4617 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3479 = _3478 * (((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3455) / ((_3468 * 0.699999988079071044921875) + 1.0));
                                float _3491 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                                float _3492 = 1.0 - _939;
                                float _3499 = sqrt(1.0 - ((1.0 - (_3492 * _3492)) * (1.0 - (_3491 * _3491))));
                                float _3500 = _3499 * _3499;
                                float _3501 = _3500 * _3500;
                                float _3502 = _3448 - _2922;
                                float _3503 = _3449 - _2923;
                                float _3504 = _3450 - _2924;
                                float _3508 = inversesqrt(dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504)));
                                float _3512 = dot(vec3(_864, _867, _870), vec3((-0.0) - _2922, (-0.0) - _2923, (-0.0) - _2924));
                                float _4628 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3516 = dot(vec3(_864, _867, _870), vec3(_3508 * _3502, _3508 * _3503, _3508 * _3504));
                                float _4639 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3523 = ((_3519 * _3519) * (_3501 + (-1.0))) + 1.0;
                                float _3524 = _3461 * _3500;
                                float _3525 = _3524 * _3524;
                                float _3531 = ((1.0 - _3525) * dot(vec3(_864, _867, _870), vec3(_3448, _3449, _3450))) + _3525;
                                float _4650 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3533 = 1.0 - _3500;
                                float _3543 = (0.5 / (((_3532 * ((_3515 * _3533) + _3500)) + 9.9999999392252902907785028219223e-09) + (((_3532 * _3533) + _3500) * _3515))) * _3532;
                                float _4661 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3553 = (_3478 * _3455) * (((_3501 * 3.1415927410125732421875) * (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) / ((_3523 * _3523) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3479 * _3325.y;
                                frontier_phi_83_pred_1 = _3479 * _3325.x;
                                frontier_phi_83_pred_2 = _3553 * _3337.z;
                                frontier_phi_83_pred_3 = _3553 * _3337.y;
                                frontier_phi_83_pred_4 = _3553 * _3337.x;
                                frontier_phi_83_pred_5 = _3479 * _3325.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3561 = frontier_phi_83_pred;
                            _3560 = frontier_phi_83_pred_1;
                            _3559 = frontier_phi_83_pred_2;
                            _3558 = frontier_phi_83_pred_3;
                            _3557 = frontier_phi_83_pred_4;
                            _3562 = frontier_phi_83_pred_5;
                            _3267 = _3560 + _3280;
                            _3268 = _3561 + _3281;
                            _3269 = _3562 + _3282;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            if (_3284 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3284;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3269;
                        frontier_phi_77_pred_1 = _3268;
                        frontier_phi_77_pred_2 = _3267;
                        frontier_phi_77_pred_3 = _3266;
                        frontier_phi_77_pred_4 = _3265;
                        frontier_phi_77_pred_5 = _3264;
                    }
                    _2907 = frontier_phi_77_pred;
                    _2905 = frontier_phi_77_pred_1;
                    _2903 = frontier_phi_77_pred_2;
                    _2901 = frontier_phi_77_pred_3;
                    _2899 = frontier_phi_77_pred_4;
                    _2897 = frontier_phi_77_pred_5;
                    uint _3063 = _3062 + 1u;
                    if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3056 = _2897;
                        _3057 = _2899;
                        _3058 = _2901;
                        _3059 = _2903;
                        _3060 = _2905;
                        _3061 = _2907;
                        _3062 = _3063;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2901;
                frontier_phi_58_59_ladder_1 = _2907;
                frontier_phi_58_59_ladder_2 = _2905;
                frontier_phi_58_59_ladder_3 = _2903;
                frontier_phi_58_59_ladder_4 = _2899;
                frontier_phi_58_59_ladder_5 = _2897;
            }
            else
            {
                frontier_phi_58_59_ladder = _2779;
                frontier_phi_58_59_ladder_1 = _2785;
                frontier_phi_58_59_ladder_2 = _2783;
                frontier_phi_58_59_ladder_3 = _2781;
                frontier_phi_58_59_ladder_4 = _2777;
                frontier_phi_58_59_ladder_5 = _2775;
            }
            _2896 = frontier_phi_58_59_ladder_5;
            _2898 = frontier_phi_58_59_ladder_4;
            _2900 = frontier_phi_58_59_ladder;
            _2902 = frontier_phi_58_59_ladder_3;
            _2904 = frontier_phi_58_59_ladder_2;
            _2906 = frontier_phi_58_59_ladder_1;
        }
        float _2911 = isnan(1.0) ? _923 : (isnan(_923) ? 1.0 : min(_923, 1.0));
        _2687 = (_2911 * _2902) + _2123;
        _2689 = (_2911 * _2904) + _2125;
        _2691 = (_2911 * _2906) + _2127;
        _2693 = ((_2896 * _907) * _2911) + _2468;
        _2695 = ((_2898 * _909) * _2911) + _2470;
        _2697 = ((_2900 * _910) * _2911) + _2472;
    }
    else
    {
        _2687 = _2123;
        _2689 = _2125;
        _2691 = _2127;
        _2693 = _2468;
        _2695 = _2470;
        _2697 = _2472;
    }
    float _4677 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _4688 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4699 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _2714 = ((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2687 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _923))) + ((_2693 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1760)) * cbPerFrame._m0[3u].x);
    float _2715 = ((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2689 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _923))) + ((_2695 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1760)) * cbPerFrame._m0[3u].x);
    float _2716 = ((isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2691 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _923))) + ((_2697 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1760)) * cbPerFrame._m0[3u].x);
    uint _2717 = _255 + 6u;
    float _2725 = _845 / cbSceneParam._m0[86u].x;
    float _2726 = _846 / cbSceneParam._m0[86u].y;
    vec4 _2740 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2725, _2726, (log2((isnan(cbSceneParam._m0[77u].w) ? _768 : (isnan(_768) ? cbSceneParam._m0[77u].w : min(_768, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2742 = _2740.x;
    float _2743 = _2740.y;
    float _2744 = _2740.z;
    float _2745 = _2740.w;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_768 > cbSceneParam._m0[78u].w)
    {
        float _2800 = isnan(_768) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _768 : min(cbSceneParam._m0[80u].w, _768));
        float _2801 = _2800 / _768;
        float _2812 = _2801 * _818;
        float _2813 = _819 * _2801;
        float _2814 = (-0.0) - _2813;
        float _2816 = _2801 * _820;
        float _2818 = (cbSceneParam._m0[77u].w * _2814) / _2800;
        float _2819 = _2818 + cbSceneParam._m0[79u].w;
        float _2820 = cbSceneParam._m0[79u].w - _2813;
        float _2826 = sqrt(((_2812 * _2812) + (_2813 * _2813)) + (_2816 * _2816));
        float _2829 = (1.0 - (cbSceneParam._m0[77u].w / _2800)) * _2826;
        float _2834 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2836 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3013;
        if (abs((_2814 - _2818) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3013 = ((((_2819 > 0.0) ? exp2(_2834 * _2819) : (2.0 - exp2(_2836 * _2819))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2829;
        }
        else
        {
            float _2957 = 1.0 / cbSceneParam._m0[80u].x;
            float _2958 = isnan(_2820) ? _2819 : (isnan(_2819) ? _2820 : max(_2819, _2820));
            float _2959 = isnan(_2820) ? _2819 : (isnan(_2819) ? _2820 : min(_2819, _2820));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            _3013 = ((abs(_2826 / _2814) * cbSceneParam._m0[80u].y) * ((((_2968 - _2969) * 2.0) - ((exp2(_2834 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0)))) - exp2(_2834 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))))) * _2957)) - ((exp2(_2836 * _2968) - exp2(_2836 * _2969)) * _2957))) + (_2829 * cbSceneParam._m0[80u].z);
        }
        vec4 _3015 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2725, _2726, 1.0), 0.0);
        float _3024 = exp2((_3013 * (-1.44269502162933349609375)) * (1.0 - _3015.w));
        float _3025 = log2(_3024);
        float _3041 = log2(_2745);
        _2838 = (exp2(_3041 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].x)) * _3015.x) / cbSceneParam._m0[78u].x)) + _2742;
        _2840 = (exp2(_3041 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].y)) * _3015.y) / cbSceneParam._m0[78u].y)) + _2743;
        _2842 = (exp2(_3041 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].z)) * _3015.z) / cbSceneParam._m0[78u].z)) + _2744;
        _2844 = _3024 * _2745;
    }
    else
    {
        _2838 = _2742;
        _2840 = _2743;
        _2842 = _2744;
        _2844 = _2745;
    }
    bool _3051;
    vec4 _2854;
    vec4 _2876;
    float _2878;
    float _2882;
    float _2883;
    float _2884;
    float _2885;
    bool _2895;
    for (;;)
    {
        _2854 = cbMatDynParam._m0[0u];
        float _2856 = roundEven(_2854.y);
        bool _2857 = _2856 == 3.0;
        float _2858 = log2(_2844);
        float _2865 = exp2(_2858 * cbSceneParam._m0[78u].x) * _2714;
        float _2866 = exp2(_2858 * cbSceneParam._m0[78u].y) * _2715;
        float _2867 = exp2(_2858 * cbSceneParam._m0[78u].z) * _2716;
        float _2874 = _834 + (-0.5);
        _2876 = cbMtdParam._m0[1u];
        _2878 = _2876.y * _2874;
        float _2881 = (_2856 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2882 = _2881 * (_2857 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2838)));
        _2883 = _2881 * (_2857 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2840)));
        _2884 = _2881 * (_2857 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2842)));
        _2885 = _2874 * 0.999000012874603271484375;
        _2895 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2895)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2885) < 0.5)
            {
                _3051 = true;
                break;
            }
        }
        uint _2992 = _883 + uint(_2854.w);
        if ((cbInstanceData._m0[_2992].w < 1.0) && ((cbInstanceData._m0[_2992].w + _2885) < 0.5))
        {
            _3051 = true;
            break;
        }
        if ((_2878 + 1.0) < _2876.x)
        {
            _3051 = true;
            break;
        }
        _3051 = false;
        break;
    }
    float _3255;
    if (_3051)
    {
        discard_state = true;
        _3255 = 0.0;
    }
    else
    {
        _3255 = cbInstanceData._m0[_2717].w;
    }
    SV_Target.x = _2882;
    SV_Target.y = _2883;
    SV_Target.z = _2884;
    SV_Target.w = _3255;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2717].w;
    discard_exit();
}


