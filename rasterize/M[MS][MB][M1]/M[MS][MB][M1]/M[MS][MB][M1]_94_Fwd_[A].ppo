#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1431;
float _3812;
float _3813;
float _3814;
float _3815;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3824 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3835 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3846 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3857 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) + _453;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    float _535 = ((_505.z - _526) * _434) + _526;
    float _538 = ((((_505.x - _524) * _434) + _524) * 2.0) + (-1.0);
    float _539 = ((((_505.y - _525) * _434) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3868 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))));
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _588 = _586.x;
    float _589 = 1.0 - _588;
    float _595 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _598 = ((isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : min(_595, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _607 = (_598 - ((((((_588 - _589) * cbMtdParam._m0[24u].z) + _589) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _598))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3889 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _608 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _615 = (_608 * (cbMtdParam._m0[17u].x - _460)) + _460;
    float _616 = (_608 * (cbMtdParam._m0[17u].y - _461)) + _461;
    float _617 = (_608 * (cbMtdParam._m0[17u].z - _462)) + _462;
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _657 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_631 - _632) * cbMtdParam._m0[24u].w) + _632) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3900 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _666 = ((((cbMtdParam._m0[10u].x - _615) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _658) + _615;
    float _667 = ((((cbMtdParam._m0[10u].y - _616) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _658) + _616;
    float _668 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _617)) * _658) + _617;
    vec4 _680 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _696 = _694.x;
    float _714 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _696) * _434) + _696;
    float _718 = ((_680.x - _714) * cbMtdParam._m0[19u].z) + _714;
    float _720 = _718 - (_718 * _608);
    float _722 = _720 - (_720 * _658);
    float _727 = (((_480.z - _535) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _535;
    float _731 = ((_561.z - _727) * cbMtdParam._m0[19u].w) + _727;
    vec4 _745 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _752 = (_745.x * 2.0) + (-1.0);
    float _753 = (_745.y * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _3911 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _762 = (_608 * (_745.z - _731)) + _731;
    float _765 = ((cbMtdParam._m0[23u].y - _762) * _658) + _762;
    vec4 _784 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _790 = (_784.x * 2.0) + (-1.0);
    float _791 = (_784.y * 2.0) + (-1.0);
    float _792 = dot(vec2(_790, _791), vec2(_790, _791));
    float _3922 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _806 = (_538 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_480.x * 2.0) + (-1.0)))) + (((_561.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _807 = (_539 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_480.y * 2.0) + (-1.0)))) + (((_561.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _819 = (((_752 - _806) + (cbMtdParam._m0[21u].x * _806)) * _608) + _806;
    float _820 = (((_753 - _807) + (cbMtdParam._m0[21u].x * _807)) * _608) + _807;
    float _821 = (_608 * (sqrt(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) - _545)) + _545;
    float _832 = (((_790 - _819) + (_819 * cbMtdParam._m0[22u].z)) * _658) + _819;
    float _833 = (((_791 - _820) + (_820 * cbMtdParam._m0[22u].z)) * _658) + _820;
    float _834 = ((sqrt(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) - _821) * _658) + _821;
    float _838 = cbMtdParam._m0[22u].x + _561.w;
    float _841 = fma(_834, _251 * NORMAL.x, fma(_833, _258 * TANGENT.x, (_244 * _236) * _832));
    float _844 = fma(_834, _251 * NORMAL.y, fma(_833, _258 * TANGENT.y, (_244 * _237) * _832));
    float _847 = fma(_834, _251 * NORMAL.z, fma(_833, _258 * TANGENT.z, (_244 * _238) * _832));
    float _851 = inversesqrt(dot(vec3(_841, _844, _847), vec3(_841, _844, _847)));
    float _852 = _851 * _841;
    float _853 = _851 * _844;
    float _854 = _851 * _847;
    float _3933 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _855 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _3955 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3966 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3977 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3988 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _860 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _874 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _924 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _914);
    float _925 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _914);
    float _926 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _914);
    float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
    float _931 = _924 * _930;
    float _932 = _925 * _930;
    float _933 = _926 * _930;
    vec4 _938 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _940 = _938.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1112 = sqrt(((_924 * _924) + (_925 * _925)) + (_926 * _926));
        float _1118 = (cbMatDynParam._m0[5u].x * _1112) + cbMatDynParam._m0[5u].y;
        float _3999 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1123 = (cbMatDynParam._m0[5u].z * _1112) + cbMatDynParam._m0[5u].w;
        float _4010 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) - _1119)) + _1119) < ((_940 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _951 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _952 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _970 = fma(_854, cbSceneParam._m0[5u].z, fma(_853, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _852));
    float _973 = fma(_854, cbSceneParam._m0[6u].z, fma(_853, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _852));
    float _976 = fma(_854, cbSceneParam._m0[7u].z, fma(_853, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _852));
    uint _989 = _283 + 9u;
    uint _990 = _989 + uint(cbMatDynParam._m0[0u].w);
    float _996 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * cbInstanceData._m0[_990].x;
    float _997 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * cbInstanceData._m0[_990].y;
    float _998 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * cbInstanceData._m0[_990].z;
    float _4021 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1002 = 1.0 - _860;
    float _1003 = _999 * _1002;
    float _1004 = _1000 * _1002;
    float _1005 = _1001 * _1002;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _860;
    float _1011 = (_1000 + (-0.039999999105930328369140625)) * _860;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _860;
    float _1013 = _1010 + 0.039999999105930328369140625;
    float _1015 = _1011 + 0.039999999105930328369140625;
    float _1016 = _1012 + 0.039999999105930328369140625;
    vec4 _1025 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _951, cbSceneParam._m0[86u].y * _952));
    float _1029 = ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * TEXCOORD_5.w) * _1025.x;
    float _1030 = dot(vec3(_852, _853, _854), vec3(_931, _932, _933));
    float _1033 = _1030 * 2.0;
    float _1037 = (_1033 * _852) - _931;
    float _1038 = (_1033 * _853) - _932;
    float _1039 = (_1033 * _854) - _933;
    float _1043 = abs(dot(vec3(_931, _932, _933), vec3(_852, _853, _854)));
    float _4054 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1045 = sqrt(_855);
    float _1058 = exp2((_1045 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1045 * 3.0));
    float _1064 = (1.0 - _1058) * ((_1045 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1065 = _1058 * _1045;
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1430;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1155 = fma(_1101, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093));
        float _1159 = fma(_1101, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093));
        float _1163 = fma(_1101, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093));
        float _1188 = _1093 + _852;
        float _1189 = _1097 + _853;
        float _1190 = _1101 + _854;
        float _1200 = fma(_1190, cbModelParam._m0[26u].z, fma(_1189, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188)) - _1155;
        float _1201 = fma(_1190, cbModelParam._m0[27u].z, fma(_1189, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188)) - _1159;
        float _1202 = fma(_1190, cbModelParam._m0[28u].z, fma(_1189, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188)) - _1163;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1155 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1159 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[34u].z) + ((((((_1163 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1258 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1224.x + (-0.5));
        float _1260 = _1258 * (_1224.y + (-0.5));
        float _1261 = _1258 * (_1224.z + (-0.5));
        float _1268 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1231.x + (-0.5));
        float _1270 = _1268 * (_1231.y + (-0.5));
        float _1271 = _1268 * (_1231.z + (-0.5));
        float _1278 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1238.x + (-0.5));
        float _1280 = _1278 * (_1238.y + (-0.5));
        float _1281 = _1278 * (_1238.z + (-0.5));
        float _1288 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1245.x + (-0.5));
        float _1290 = _1288 * (_1245.y + (-0.5));
        float _1291 = _1288 * (_1245.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1312 = (dot(vec3(_852, _853, _854), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1322 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4102 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1324 + 1.0))) + _1329) * _1292;
        float _1339 = _1260 * 0.5;
        float _1340 = _1270 * 0.5;
        float _1341 = _1280 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_852, _853, _854), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4135 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1366 + 1.0))) + _1371) * _1293;
        float _1381 = _1261 * 0.5;
        float _1382 = _1271 * 0.5;
        float _1383 = _1281 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_852, _853, _854), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4168 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1408 + 1.0))) + _1413) * _1294;
        _1430 = _1261;
        _1432 = _1260;
        _1433 = _1259;
        _1434 = _1271;
        _1435 = _1270;
        _1436 = _1269;
        _1437 = _1281;
        _1438 = _1280;
        _1439 = _1279;
        _1440 = _1294;
        _1441 = _1293;
        _1442 = _1292;
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1431;
        _1432 = _1431;
        _1433 = _1431;
        _1434 = _1431;
        _1435 = _1431;
        _1436 = _1431;
        _1437 = _1431;
        _1438 = _1431;
        _1439 = _1431;
        _1440 = _1431;
        _1441 = _1431;
        _1442 = _1431;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1473 = fma(_1101, cbModelParam._m0[30u].z, fma(_1097, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093));
        float _1477 = fma(_1101, cbModelParam._m0[31u].z, fma(_1097, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093));
        float _1481 = fma(_1101, cbModelParam._m0[32u].z, fma(_1097, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093));
        float _1504 = _1093 + _852;
        float _1505 = _1097 + _853;
        float _1506 = _1101 + _854;
        float _1516 = fma(_1506, cbModelParam._m0[30u].z, fma(_1505, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1504)) - _1473;
        float _1517 = fma(_1506, cbModelParam._m0[31u].z, fma(_1505, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1504)) - _1477;
        float _1518 = fma(_1506, cbModelParam._m0[32u].z, fma(_1505, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1504)) - _1481;
        float _1522 = inversesqrt(dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518)));
        float _1535 = ((_1522 * _1516) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1473 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1522 * _1517) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1477 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1522 * _1518) / cbModelParam._m0[35u].z) + ((((((_1481 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        float _1572 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1539.x + (-0.5));
        float _1574 = _1572 * (_1539.y + (-0.5));
        float _1575 = _1572 * (_1539.z + (-0.5));
        float _1582 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1546.x + (-0.5));
        float _1584 = _1582 * (_1546.y + (-0.5));
        float _1585 = _1582 * (_1546.z + (-0.5));
        float _1592 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1553.x + (-0.5));
        float _1594 = _1592 * (_1553.y + (-0.5));
        float _1595 = _1592 * (_1553.z + (-0.5));
        float _1602 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1560.x + (-0.5));
        float _1604 = _1602 * (_1560.y + (-0.5));
        float _1605 = _1602 * (_1560.z + (-0.5));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = _1573 * 0.5;
        float _1610 = _1583 * 0.5;
        float _1611 = _1593 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_852, _853, _854), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4231 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1636 + 1.0))) + _1641) * _1606;
        float _1651 = _1574 * 0.5;
        float _1652 = _1584 * 0.5;
        float _1653 = _1594 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_852, _853, _854), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4264 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1678 + 1.0))) + _1683) * _1607;
        float _1693 = _1575 * 0.5;
        float _1694 = _1585 * 0.5;
        float _1695 = _1595 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_852, _853, _854), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4297 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1720 + 1.0))) + _1725) * _1608;
        _1742 = _1575;
        _1743 = _1574;
        _1744 = _1573;
        _1745 = _1585;
        _1746 = _1584;
        _1747 = _1583;
        _1748 = _1595;
        _1749 = _1594;
        _1750 = _1593;
        _1751 = _1608;
        _1752 = _1607;
        _1753 = _1606;
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
    }
    else
    {
        _1742 = _1431;
        _1743 = _1431;
        _1744 = _1431;
        _1745 = _1431;
        _1746 = _1431;
        _1747 = _1431;
        _1748 = _1431;
        _1749 = _1431;
        _1750 = _1431;
        _1751 = _1431;
        _1752 = _1431;
        _1753 = _1431;
        _1754 = 0.0;
        _1755 = 0.0;
        _1756 = 0.0;
    }
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1443)) + _1443;
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1444)) + _1444;
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1445)) + _1445;
    float _1789 = fma(_1768, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1766 * cbSceneParam._m0[89u].x));
    float _1792 = fma(_1768, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1766 * cbSceneParam._m0[90u].x));
    float _1795 = fma(_1768, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1766));
    float _1810 = _1037 * 0.5;
    float _1811 = _1038 * 0.5;
    float _1812 = _1039 * 0.5;
    float _1813 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1816 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1819 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1853;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1826 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1430, _1434, _1437, _1440));
        float _1830 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1834 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1841 = dot(vec4(cbModelParam._m0[39u]), vec4(_1810, _1811, _1812, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1841) ? 0.0 : (isnan(0.0) ? _1841 : max(0.0, _1841))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1864;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1855 = dot(vec4(cbModelParam._m0[40u]), vec4(_1810, _1811, _1812, 1.0));
        _1864 = dot(vec3(isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1855) ? 0.0 : (isnan(0.0) ? _1855 : max(0.0, _1855))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1864 = 1.0;
    }
    float _1868 = (_1864 * cbModelParam._m0[1u].x) + (_1853 * (1.0 - cbModelParam._m0[1u].x));
    float _1878 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _855);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1878 : min(cbModelParam._m0[25u].z, _1878));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1927 = fma(_1101, cbModelParam._m0[13u].z, fma(_1097, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1093)) + cbModelParam._m0[13u].w;
        float _1931 = fma(_1101, cbModelParam._m0[14u].z, fma(_1097, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1093)) + cbModelParam._m0[14u].w;
        float _1935 = fma(_1101, cbModelParam._m0[15u].z, fma(_1097, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1093)) + cbModelParam._m0[15u].w;
        float _1938 = fma(_1039, cbModelParam._m0[13u].z, fma(_1038, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037));
        float _1941 = fma(_1039, cbModelParam._m0[14u].z, fma(_1038, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037));
        float _1944 = fma(_1039, cbModelParam._m0[15u].z, fma(_1038, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037));
        float _1972;
        if (_1938 > 0.0)
        {
            _1972 = abs((1.0 - _1927) / _1938);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1927 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1972 = frontier_phi_17_15_ladder;
        }
        float _2175;
        if (_1941 > 0.0)
        {
            _2175 = abs((1.0 - _1931) / _1941);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1931 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2175 = frontier_phi_26_22_ladder;
        }
        float _2429;
        if (_1944 > 0.0)
        {
            _2429 = abs((1.0 - _1935) / _1944);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1935 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2429 = frontier_phi_38_33_ladder;
        }
        float _2431 = isnan(_2175) ? _1972 : (isnan(_1972) ? _2175 : min(_1972, _2175));
        float _2432 = isnan(_2429) ? _2431 : (isnan(_2431) ? _2429 : min(_2431, _2429));
        float _2436 = (_2432 * _1938) + _1927;
        float _2437 = (_2432 * _1941) + _1931;
        float _2438 = (_2432 * _1944) + _1935;
        float _2439 = _2432 * 9.9999997473787516355514526367188e-05;
        float _2441 = (-1.0) - _2439;
        float _2443 = _2439 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2438 > _2443) || ((_2438 < _2441) || ((_2437 > _2443) || ((_2437 < _2441) || ((_2436 < _2441) || (_2436 > _2443))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2438, cbModelParam._m0[9u].z, fma(_2437, cbModelParam._m0[9u].y, _2436 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2438, cbModelParam._m0[10u].z, fma(_2437, cbModelParam._m0[10u].y, _2436 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2438, cbModelParam._m0[11u].z, fma(_2437, cbModelParam._m0[11u].y, _2436 * cbModelParam._m0[11u].x))), _1879);
            frontier_phi_16_38_ladder = _2566.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2566.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2566.x * cbModelParam._m0[1u].y;
        }
        _1960 = frontier_phi_16_38_ladder_2;
        _1962 = frontier_phi_16_38_ladder_1;
        _1964 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1948 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1037, _1038, _1039), _1879);
        _1960 = _1948.x * cbModelParam._m0[1u].y;
        _1962 = _1948.y * cbModelParam._m0[1u].y;
        _1964 = _1948.z * cbModelParam._m0[1u].y;
    }
    float _1968 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _855);
    float _1969 = isnan(_1968) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1968 : min(cbModelParam._m0[25u].w, _1968));
    float _2059;
    float _2061;
    float _2063;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2023 = fma(_1101, cbModelParam._m0[21u].z, fma(_1097, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1093)) + cbModelParam._m0[21u].w;
        float _2027 = fma(_1101, cbModelParam._m0[22u].z, fma(_1097, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1093)) + cbModelParam._m0[22u].w;
        float _2031 = fma(_1101, cbModelParam._m0[23u].z, fma(_1097, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1093)) + cbModelParam._m0[23u].w;
        float _2034 = fma(_1039, cbModelParam._m0[21u].z, fma(_1038, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037));
        float _2037 = fma(_1039, cbModelParam._m0[22u].z, fma(_1038, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037));
        float _2040 = fma(_1039, cbModelParam._m0[23u].z, fma(_1038, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037));
        float _2180;
        if (_2034 > 0.0)
        {
            _2180 = abs((1.0 - _2023) / _2034);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2023 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2180 = frontier_phi_28_24_ladder;
        }
        float _2456;
        if (_2037 > 0.0)
        {
            _2456 = abs((1.0 - _2027) / _2037);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2027 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2456 = frontier_phi_40_35_ladder;
        }
        float _2669;
        if (_2040 > 0.0)
        {
            _2669 = abs((1.0 - _2031) / _2040);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2031 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2669 = frontier_phi_49_46_ladder;
        }
        float _2671 = isnan(_2456) ? _2180 : (isnan(_2180) ? _2456 : min(_2180, _2456));
        float _2672 = isnan(_2669) ? _2671 : (isnan(_2671) ? _2669 : min(_2671, _2669));
        float _2676 = (_2672 * _2034) + _2023;
        float _2677 = (_2672 * _2037) + _2027;
        float _2678 = (_2672 * _2040) + _2031;
        float _2679 = _2672 * 9.9999997473787516355514526367188e-05;
        float _2680 = (-1.0) - _2679;
        float _2682 = _2679 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2678 > _2682) || ((_2678 < _2680) || ((_2677 > _2682) || ((_2677 < _2680) || ((_2676 < _2680) || (_2676 > _2682))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2678, cbModelParam._m0[17u].z, fma(_2677, cbModelParam._m0[17u].y, _2676 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2678, cbModelParam._m0[18u].z, fma(_2677, cbModelParam._m0[18u].y, _2676 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2678, cbModelParam._m0[19u].z, fma(_2677, cbModelParam._m0[19u].y, _2676 * cbModelParam._m0[19u].x))), _1969);
            frontier_phi_25_49_ladder = _2877.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2877.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2877.x * cbModelParam._m0[1u].z;
        }
        _2059 = frontier_phi_25_49_ladder_2;
        _2061 = frontier_phi_25_49_ladder_1;
        _2063 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2043 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1037, _1038, _1039), _1969);
        _2059 = _2043.x * cbModelParam._m0[1u].z;
        _2061 = _2043.y * cbModelParam._m0[1u].z;
        _2063 = _2043.z * cbModelParam._m0[1u].z;
    }
    float _2076 = (((_1064 * _1013) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2078 = (((_1064 * _1015) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2061 - _1962)) + _1962);
    float _2080 = (((_1064 * _1016) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2063 - _1964)) + _1964);
    float _2083 = fma(_2080, cbSceneParam._m0[89u].z, fma(_2078, cbSceneParam._m0[89u].y, _2076 * cbSceneParam._m0[89u].x));
    float _2086 = fma(_2080, cbSceneParam._m0[90u].z, fma(_2078, cbSceneParam._m0[90u].y, _2076 * cbSceneParam._m0[90u].x));
    float _2089 = fma(_2080, cbSceneParam._m0[91u].z, fma(_2078, cbSceneParam._m0[91u].y, _2076 * cbSceneParam._m0[91u].x));
    uvec4 _2099 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2101 = _2099.x * 14u;
    uint _2102 = _2101 + 13u;
    float _2109 = _1029 + (-1.0);
    float _2114 = (cbLight._m0[_2102].x * _2109) + 1.0;
    float _2115 = (cbLight._m0[_2102].y * _2109) + 1.0;
    float _2116 = (cbLight._m0[_2102].z * _2109) + 1.0;
    float _2117 = (cbLight._m0[_2102].w * _2109) + 1.0;
    uint _2118 = _2101 + 5u;
    float _2124 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
    uint _2128 = _2101 + 4u;
    float _2134 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
    uint _2138 = _2101 | 1u;
    float _2149 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_852, _853, _854));
    float _2152 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_852, _853, _854));
    float _4433 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _4444 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2157 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * 0.3183098733425140380859375;
    float _2159 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * 0.3183098733425140380859375;
    float _2166 = ((cbLight._m0[_2118].x * _2124) * _2159) + ((cbLight._m0[_2128].x * _2134) * _2157);
    float _2167 = ((_2124 * cbLight._m0[_2118].y) * _2159) + ((_2134 * cbLight._m0[_2128].y) * _2157);
    float _2168 = ((_2124 * cbLight._m0[_2118].z) * _2159) + ((_2134 * cbLight._m0[_2128].z) * _2157);
    uvec4 _2172 = floatBitsToUint(cbLight._m0[_2101 + 12u]);
    bool _2174 = _2172.x == 0u;
    float _2185;
    float _2187;
    float _2189;
    if (_2174)
    {
        _2185 = _2166;
        _2187 = _2167;
        _2189 = _2168;
    }
    else
    {
        uint _2193 = _2101 + 6u;
        float _2209 = (dot(vec3(cbLight._m0[_2101 + 2u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2210 = _2209 * _2209;
        float _4455 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2211 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2212 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
        _2185 = (((cbLight._m0[_2193].x * 0.3183098733425140380859375) * _2211) * _2212) + _2166;
        _2187 = (((cbLight._m0[_2193].y * 0.3183098733425140380859375) * _2211) * _2212) + _2167;
        _2189 = (((cbLight._m0[_2193].z * 0.3183098733425140380859375) * _2211) * _2212) + _2168;
    }
    bool _2192 = _2172.y == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2192)
    {
        _2230 = _2185;
        _2232 = _2187;
        _2234 = _2189;
    }
    else
    {
        uint _2400 = _2101 + 7u;
        float _2416 = (dot(vec3(cbLight._m0[_2101 + 3u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2417 = _2416 * _2416;
        float _4471 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2418 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2419 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2230 = (((cbLight._m0[_2400].x * 0.3183098733425140380859375) * _2418) * _2419) + _2185;
        _2232 = (((cbLight._m0[_2400].y * 0.3183098733425140380859375) * _2418) * _2419) + _2187;
        _2234 = (((cbLight._m0[_2400].z * 0.3183098733425140380859375) * _2418) * _2419) + _2189;
    }
    uint _2237 = _2101 + 8u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _855) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_2101].x + _931;
    float _2253 = cbLight._m0[_2101].y + _932;
    float _2254 = cbLight._m0[_2101].z + _933;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2101].xyz));
    float _4487 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _4498 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _2266 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2267 = dot(vec3(_852, _853, _854), vec3(_2259, _2260, _2261));
    float _4509 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2259, _2260, _2261));
    float _4520 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2251 * _2251;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2287 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
    float _2288 = 0.959999978542327880859375 - _1010;
    float _2290 = 0.959999978542327880859375 - _1011;
    float _2291 = 0.959999978542327880859375 - _1012;
    float _2298 = 1.0 - _2251;
    float _2309 = (0.5 / (((_2266 * ((_2265 * _2298) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2298) + _2251) * _2265))) * _2265;
    float _4531 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    uint _2322 = _2101 + 9u;
    float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _855) * 0.949999988079071044921875);
    float _2334 = _2333 * _2333;
    float _2335 = cbLight._m0[_2138].x + _931;
    float _2336 = cbLight._m0[_2138].y + _932;
    float _2337 = cbLight._m0[_2138].z + _933;
    float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
    float _2342 = _2341 * _2335;
    float _2343 = _2341 * _2336;
    float _2344 = _2341 * _2337;
    float _2345 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2138].xyz));
    float _4542 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2349 = dot(vec3(_852, _853, _854), vec3(_2342, _2343, _2344));
    float _4553 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2353 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2342, _2343, _2344));
    float _4564 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2357 = _2334 * _2334;
    float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
    float _2368 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2375 = 1.0 - _2334;
    float _2385 = (0.5 / (((_2266 * ((_2348 * _2375) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2375) + _2334) * _2348))) * _2348;
    float _4575 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2387 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
    float _2397 = (((((_2368 * _2288) + _1013) * cbLight._m0[_2322].x) * _2387) * _2124) + (((((_2287 * _2288) + _1013) * cbLight._m0[_2237].x) * _2311) * _2134);
    float _2398 = (((((_2368 * _2290) + _1015) * cbLight._m0[_2322].y) * _2387) * _2124) + (((((_2287 * _2290) + _1015) * cbLight._m0[_2237].y) * _2311) * _2134);
    float _2399 = (((((_2368 * _2291) + _1016) * cbLight._m0[_2322].z) * _2387) * _2124) + (((((_2287 * _2291) + _1016) * cbLight._m0[_2237].z) * _2311) * _2134);
    float _2461;
    float _2463;
    float _2465;
    if (_2174)
    {
        _2461 = _2397;
        _2463 = _2398;
        _2465 = _2399;
    }
    else
    {
        uint _2467 = _2101 + 2u;
        uint _2471 = _2101 + 10u;
        float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _855) * 0.949999988079071044921875);
        float _2486 = _2485 * _2485;
        float _2487 = cbLight._m0[_2467].x + _931;
        float _2488 = cbLight._m0[_2467].y + _932;
        float _2489 = cbLight._m0[_2467].z + _933;
        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
        float _2494 = _2493 * _2487;
        float _2495 = _2493 * _2488;
        float _2496 = _2493 * _2489;
        float _2497 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2467].xyz));
        float _4586 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2501 = dot(vec3(_852, _853, _854), vec3(_2494, _2495, _2496));
        float _4597 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2505 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2494, _2495, _2496));
        float _4608 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2509 = _2486 * _2486;
        float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
        float _2520 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
        float _2527 = 1.0 - _2486;
        float _2537 = (0.5 / (((_2266 * ((_2500 * _2527) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2527) + _2486) * _2500))) * _2500;
        float _4619 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2539 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
        float _2540 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
        _2461 = (((((_2520 * _2288) + _1013) * cbLight._m0[_2471].x) * _2539) * _2540) + _2397;
        _2463 = (((((_2520 * _2290) + _1015) * cbLight._m0[_2471].y) * _2539) * _2540) + _2398;
        _2465 = (((((_2520 * _2291) + _1016) * cbLight._m0[_2471].z) * _2539) * _2540) + _2399;
    }
    float _2575;
    float _2577;
    float _2579;
    if (_2192)
    {
        _2575 = _2461;
        _2577 = _2463;
        _2579 = _2465;
    }
    else
    {
        uint _2586 = _2101 + 3u;
        uint _2590 = _2101 + 11u;
        float _2604 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2586].w)) * _855) * 0.949999988079071044921875);
        float _2605 = _2604 * _2604;
        float _2606 = cbLight._m0[_2586].x + _931;
        float _2607 = cbLight._m0[_2586].y + _932;
        float _2608 = cbLight._m0[_2586].z + _933;
        float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
        float _2613 = _2612 * _2606;
        float _2614 = _2612 * _2607;
        float _2615 = _2612 * _2608;
        float _2616 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2586].xyz));
        float _4635 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2620 = dot(vec3(_852, _853, _854), vec3(_2613, _2614, _2615));
        float _4646 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2624 = dot(vec3(cbLight._m0[_2586].xyz), vec3(_2613, _2614, _2615));
        float _4657 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2628 = _2605 * _2605;
        float _2632 = ((_2623 * _2623) * (_2628 + (-1.0))) + 1.0;
        float _2639 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
        float _2646 = 1.0 - _2605;
        float _2656 = (0.5 / (((_2266 * ((_2619 * _2646) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2646) + _2605) * _2619))) * _2619;
        float _4668 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2658 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2628 / ((_2632 * _2632) * 3.141590118408203125));
        float _2659 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2575 = (((((_2639 * _2288) + _1013) * cbLight._m0[_2590].x) * _2658) * _2659) + _2461;
        _2577 = (((((_2639 * _2290) + _1015) * cbLight._m0[_2590].y) * _2658) * _2659) + _2463;
        _2579 = (((((_2639 * _2291) + _1016) * cbLight._m0[_2590].z) * _2658) * _2659) + _2465;
    }
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    if (_2099.y == 0u)
    {
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2735 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2734;
        float _2736 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2734;
        float _2737 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2734;
        uvec4 _2749 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2750 = _2749.x;
        uint _2761 = uint((float(_2749.y) * floor(float(uint(cbSceneParam._m0[85u].y * _952) / _2750))) + floor(float(uint(cbSceneParam._m0[85u].x * _951) / _2750)));
        float _2771 = (log2(_2737 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2772 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        uint _2775 = uint(isnan(14.0) ? _2772 : (isnan(_2772) ? 14.0 : min(_2772, 14.0)));
        uvec4 _2780 = texelFetch(g_lightClusterGridBuffer, int(((_2775 << 2u) + (_2761 << 6u)) >> 2u));
        uint _2781 = _2780.x;
        uint _2782 = _2749.z;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        if (((((1u << ((_2782 >> 4u) & 15u)) + 4294967295u) & _2781) == 0u) || ((_2782 & 240u) == 0u))
        {
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
        }
        else
        {
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            uint _3041 = 0u;
            uint _3050;
            bool _3051;
            for (;;)
            {
                _3050 = texelFetch(g_lightClassification, int((((_2775 << 5u) + (_2761 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                _3051 = _3050 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3051)
                {
                    frontier_phi_66_pred = _3035;
                    frontier_phi_66_pred_1 = _3040;
                    frontier_phi_66_pred_2 = _3039;
                    frontier_phi_66_pred_3 = _3038;
                    frontier_phi_66_pred_4 = _3037;
                    frontier_phi_66_pred_5 = _3036;
                }
                else
                {
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    uint _3186;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3050;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    for (;;)
                    {
                        uint _3190 = uint(findLSB(_3186)) + (_3041 << 5u);
                        uint _3187 = (_3186 + 4294967295u) & _3186;
                        uint _3192 = _3190 * 48u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3212 = (_3190 * 48u) + 4u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3231 = (_3190 * 48u) + 8u;
                        vec3 _3242 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x));
                        float _3246 = _3206.x - _2735;
                        float _3247 = _3206.y - _2736;
                        float _3248 = _3206.z - _2737;
                        float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                        float _3252 = inversesqrt(_3249);
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3256 = dot(vec3(_970, _973, _976), vec3(_3253, _3254, _3255));
                        float _3261 = 1.0 - (_3249 * _3206.w);
                        float _4694 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3263 = sqrt(_3249) * _3225.w;
                        float _3266 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3256) + _3267;
                        float _3273 = _3263 * _3263;
                        float _3277 = ((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3262) / ((_3273 * 0.699999988079071044921875) + 1.0);
                        float _3281 = (-0.0) - _2735;
                        float _3282 = (-0.0) - _2736;
                        float _3283 = (-0.0) - _2737;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3288 = _3287 * _3281;
                        float _3289 = _3287 * _3282;
                        float _3290 = _3287 * _3283;
                        float _3298 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                        float _3299 = 1.0 - _1045;
                        float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                        float _3307 = _3306 * _3306;
                        float _3308 = _3307 * _3307;
                        float _3309 = _3288 + _3253;
                        float _3310 = _3289 + _3254;
                        float _3311 = _3290 + _3255;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3319 = dot(vec3(_970, _973, _976), vec3(_3288, _3289, _3290));
                        float _4710 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3323 = dot(vec3(_970, _973, _976), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                        float _4721 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3326 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                        float _3331 = _3266 * _3307;
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3256) + _3332;
                        float _4732 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3336 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3337 = 1.0 - _3307;
                        float _3347 = (0.5 / (((_3336 * ((_3322 * _3337) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3307) * _3322))) * _3336;
                        float _4743 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3358 = (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3330 * _3330) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125))) * _3262;
                        _3110 = (_3277 * _3225.x) + _3183;
                        _3111 = (_3277 * _3225.y) + _3184;
                        _3112 = (_3277 * _3225.z) + _3185;
                        _3107 = (_3358 * _3242.x) + _3180;
                        _3108 = (_3358 * _3242.y) + _3181;
                        _3109 = (_3358 * _3242.z) + _3182;
                        if (_3187 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3187;
                        }
                    }
                    frontier_phi_66_pred = _3107;
                    frontier_phi_66_pred_1 = _3112;
                    frontier_phi_66_pred_2 = _3111;
                    frontier_phi_66_pred_3 = _3110;
                    frontier_phi_66_pred_4 = _3109;
                    frontier_phi_66_pred_5 = _3108;
                }
                _2883 = frontier_phi_66_pred;
                _2893 = frontier_phi_66_pred_1;
                _2891 = frontier_phi_66_pred_2;
                _2889 = frontier_phi_66_pred_3;
                _2887 = frontier_phi_66_pred_4;
                _2885 = frontier_phi_66_pred_5;
                uint _3042 = _3041 + 1u;
                if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3035 = _2883;
                    _3036 = _2885;
                    _3037 = _2887;
                    _3038 = _2889;
                    _3039 = _2891;
                    _3040 = _2893;
                    _3041 = _3042;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
        }
        uvec4 _2896 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2897 = _2896.z;
        uint _2899 = (_2897 >> 8u) & 15u;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((4294967295u << _2899) & _2781) == 0u)
        {
            _3003 = _2882;
            _3005 = _2884;
            _3007 = _2886;
            _3009 = _2888;
            _3011 = _2890;
            _3013 = _2892;
        }
        else
        {
            float _3028 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
            float _3029 = _3028 * _2735;
            float _3030 = _3028 * _2736;
            float _3031 = _3028 * _2737;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2899 < ((_2897 >> 12u) & 15u))
            {
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3163 = _2882;
                float _3164 = _2884;
                float _3165 = _2886;
                float _3166 = _2888;
                float _3167 = _2890;
                float _3168 = _2892;
                uint _3169 = _2899;
                uint _3178;
                bool _3179;
                for (;;)
                {
                    _3178 = texelFetch(g_lightClassification, int((((_2775 << 5u) + (_2761 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                    _3179 = _3178 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3179)
                    {
                        frontier_phi_77_pred = _3168;
                        frontier_phi_77_pred_1 = _3167;
                        frontier_phi_77_pred_2 = _3166;
                        frontier_phi_77_pred_3 = _3165;
                        frontier_phi_77_pred_4 = _3164;
                        frontier_phi_77_pred_5 = _3163;
                    }
                    else
                    {
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3385 = _3163;
                        float _3386 = _3164;
                        float _3387 = _3165;
                        float _3388 = _3166;
                        float _3389 = _3167;
                        float _3390 = _3168;
                        uint _3391 = _3178;
                        uint _3392;
                        vec4 _3417;
                        float _3418;
                        vec4 _3433;
                        vec3 _3445;
                        vec4 _3460;
                        vec4 _3475;
                        float _3521;
                        bool _3522;
                        for (;;)
                        {
                            uint _3402 = ((_3169 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3391));
                            _3392 = (_3391 + 4294967295u) & _3391;
                            uint _3404 = _3402 * 40u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            _3418 = _3417.w;
                            uint _3420 = (_3402 * 40u) + 4u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3402 * 40u) + 8u;
                            _3445 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x));
                            uint _3447 = (_3402 * 40u) + 16u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3402 * 40u) + 20u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3402 * 40u) + 24u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3496 = (_3402 * 40u) + 28u;
                            vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            _3521 = fma(_2737, _3509.z, fma(_2736, _3509.y, _3509.x * _2735)) + _3509.w;
                            _3522 = !((fma(_2737, _3490.z, fma(_2736, _3490.y, _3490.x * _2735)) + _3490.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3522)
                            {
                                float _3549 = _3417.x - _2735;
                                float _3550 = _3417.y - _2736;
                                float _3551 = _3417.z - _2737;
                                float _3552 = dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551));
                                float _3555 = inversesqrt(_3552);
                                float _3556 = _3555 * _3549;
                                float _3557 = _3555 * _3550;
                                float _3558 = _3555 * _3551;
                                float _3562 = 1.0 - (_3552 / (_3418 * _3418));
                                float _4754 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3567 = sqrt(_3552) * _3433.w;
                                float _3569 = 1.39999997615814208984375 / (_3567 + 1.39999997615814208984375);
                                float _3570 = _3569 * _3569;
                                float _3573 = ((1.0 - _3570) * dot(vec3(_3556, _3557, _3558), vec3(_970, _973, _976))) + _3570;
                                float _3576 = _3567 * _3567;
                                float _3580 = (fma(_2737, _3460.z, fma(_2736, _3460.y, _3460.x * _2735)) + _3460.w) / _3521;
                                float _3581 = (fma(_2737, _3475.z, fma(_2736, _3475.y, _3475.x * _2735)) + _3475.w) / _3521;
                                float _3585 = 1.0 - dot(vec2(_3580, _3581), vec2(_3580, _3581));
                                float _4770 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3587 = _3586 * (((isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0))) * _3563) / ((_3576 * 0.699999988079071044921875) + 1.0));
                                float _3599 = exp2(log2(1.0 / ((_3576 * 3.5) + 5.0)) * 0.25);
                                float _3600 = 1.0 - _1045;
                                float _3607 = sqrt(1.0 - ((1.0 - (_3600 * _3600)) * (1.0 - (_3599 * _3599))));
                                float _3608 = _3607 * _3607;
                                float _3609 = _3608 * _3608;
                                float _3610 = _3556 - _3029;
                                float _3611 = _3557 - _3030;
                                float _3612 = _3558 - _3031;
                                float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                                float _3620 = dot(vec3(_970, _973, _976), vec3((-0.0) - _3029, (-0.0) - _3030, (-0.0) - _3031));
                                float _4781 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3623 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3624 = dot(vec3(_970, _973, _976), vec3(_3616 * _3610, _3616 * _3611, _3616 * _3612));
                                float _4792 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3627 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3631 = ((_3627 * _3627) * (_3609 + (-1.0))) + 1.0;
                                float _3632 = _3569 * _3608;
                                float _3633 = _3632 * _3632;
                                float _3639 = ((1.0 - _3633) * dot(vec3(_970, _973, _976), vec3(_3556, _3557, _3558))) + _3633;
                                float _4803 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3641 = 1.0 - _3608;
                                float _3651 = (0.5 / (((_3640 * ((_3623 * _3641) + _3608)) + 9.9999999392252902907785028219223e-09) + (((_3640 * _3641) + _3608) * _3623))) * _3640;
                                float _4814 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3661 = (_3586 * _3563) * (((_3609 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3631 * _3631) * ((_3576 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3587 * _3433.y;
                                frontier_phi_83_pred_1 = _3587 * _3433.x;
                                frontier_phi_83_pred_2 = _3661 * _3445.z;
                                frontier_phi_83_pred_3 = _3661 * _3445.y;
                                frontier_phi_83_pred_4 = _3661 * _3445.x;
                                frontier_phi_83_pred_5 = _3587 * _3433.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3669 = frontier_phi_83_pred;
                            _3668 = frontier_phi_83_pred_1;
                            _3667 = frontier_phi_83_pred_2;
                            _3666 = frontier_phi_83_pred_3;
                            _3665 = frontier_phi_83_pred_4;
                            _3670 = frontier_phi_83_pred_5;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            if (_3392 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3392;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3377;
                        frontier_phi_77_pred_1 = _3376;
                        frontier_phi_77_pred_2 = _3375;
                        frontier_phi_77_pred_3 = _3374;
                        frontier_phi_77_pred_4 = _3373;
                        frontier_phi_77_pred_5 = _3372;
                    }
                    _3014 = frontier_phi_77_pred;
                    _3012 = frontier_phi_77_pred_1;
                    _3010 = frontier_phi_77_pred_2;
                    _3008 = frontier_phi_77_pred_3;
                    _3006 = frontier_phi_77_pred_4;
                    _3004 = frontier_phi_77_pred_5;
                    uint _3170 = _3169 + 1u;
                    if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3163 = _3004;
                        _3164 = _3006;
                        _3165 = _3008;
                        _3166 = _3010;
                        _3167 = _3012;
                        _3168 = _3014;
                        _3169 = _3170;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3008;
                frontier_phi_58_59_ladder_1 = _3014;
                frontier_phi_58_59_ladder_2 = _3012;
                frontier_phi_58_59_ladder_3 = _3010;
                frontier_phi_58_59_ladder_4 = _3006;
                frontier_phi_58_59_ladder_5 = _3004;
            }
            else
            {
                frontier_phi_58_59_ladder = _2886;
                frontier_phi_58_59_ladder_1 = _2892;
                frontier_phi_58_59_ladder_2 = _2890;
                frontier_phi_58_59_ladder_3 = _2888;
                frontier_phi_58_59_ladder_4 = _2884;
                frontier_phi_58_59_ladder_5 = _2882;
            }
            _3003 = frontier_phi_58_59_ladder_5;
            _3005 = frontier_phi_58_59_ladder_4;
            _3007 = frontier_phi_58_59_ladder;
            _3009 = frontier_phi_58_59_ladder_3;
            _3011 = frontier_phi_58_59_ladder_2;
            _3013 = frontier_phi_58_59_ladder_1;
        }
        float _3018 = isnan(1.0) ? _1029 : (isnan(_1029) ? 1.0 : min(_1029, 1.0));
        _2794 = (_3018 * _3009) + _2230;
        _2796 = (_3018 * _3011) + _2232;
        _2798 = (_3018 * _3013) + _2234;
        _2800 = ((_3003 * _1013) * _3018) + _2575;
        _2802 = ((_3005 * _1015) * _3018) + _2577;
        _2804 = ((_3007 * _1016) * _3018) + _2579;
    }
    else
    {
        _2794 = _2230;
        _2796 = _2232;
        _2798 = _2234;
        _2800 = _2575;
        _2802 = _2577;
        _2804 = _2579;
    }
    float _4830 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4841 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _4852 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _2821 = ((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2794 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1029))) + ((_2800 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    float _2822 = ((isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2796 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1029))) + ((_2802 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    float _2823 = ((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2798 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1029))) + ((_2804 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    uint _2824 = _283 + 6u;
    float _2832 = _951 / cbSceneParam._m0[86u].x;
    float _2833 = _952 / cbSceneParam._m0[86u].y;
    vec4 _2847 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2832, _2833, (log2((isnan(cbSceneParam._m0[77u].w) ? _874 : (isnan(_874) ? cbSceneParam._m0[77u].w : min(_874, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2849 = _2847.x;
    float _2850 = _2847.y;
    float _2851 = _2847.z;
    float _2852 = _2847.w;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_874 > cbSceneParam._m0[78u].w)
    {
        float _2907 = isnan(_874) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _874 : min(cbSceneParam._m0[80u].w, _874));
        float _2908 = _2907 / _874;
        float _2919 = _2908 * _924;
        float _2920 = _925 * _2908;
        float _2921 = (-0.0) - _2920;
        float _2923 = _2908 * _926;
        float _2925 = (cbSceneParam._m0[77u].w * _2921) / _2907;
        float _2926 = _2925 + cbSceneParam._m0[79u].w;
        float _2927 = cbSceneParam._m0[79u].w - _2920;
        float _2933 = sqrt(((_2919 * _2919) + (_2920 * _2920)) + (_2923 * _2923));
        float _2936 = (1.0 - (cbSceneParam._m0[77u].w / _2907)) * _2933;
        float _2941 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2943 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3120;
        if (abs((_2921 - _2925) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3120 = ((((_2926 > 0.0) ? exp2(_2941 * _2926) : (2.0 - exp2(_2943 * _2926))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2936;
        }
        else
        {
            float _3064 = 1.0 / cbSceneParam._m0[80u].x;
            float _3065 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : max(_2926, _2927));
            float _3066 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : min(_2926, _2927));
            float _3075 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : min(_3065, 0.0));
            float _3076 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : min(_3066, 0.0));
            _3120 = ((abs(_2933 / _2921) * cbSceneParam._m0[80u].y) * ((((_3075 - _3076) * 2.0) - ((exp2(_2941 * (isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0)))) - exp2(_2941 * (isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))))) * _3064)) - ((exp2(_2943 * _3075) - exp2(_2943 * _3076)) * _3064))) + (_2936 * cbSceneParam._m0[80u].z);
        }
        vec4 _3122 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2832, _2833, 1.0), 0.0);
        float _3131 = exp2((_3120 * (-1.44269502162933349609375)) * (1.0 - _3122.w));
        float _3132 = log2(_3131);
        float _3148 = log2(_2852);
        _2945 = (exp2(_3148 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].x)) * _3122.x) / cbSceneParam._m0[78u].x)) + _2849;
        _2947 = (exp2(_3148 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].y)) * _3122.y) / cbSceneParam._m0[78u].y)) + _2850;
        _2949 = (exp2(_3148 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].z)) * _3122.z) / cbSceneParam._m0[78u].z)) + _2851;
        _2951 = _3131 * _2852;
    }
    else
    {
        _2945 = _2849;
        _2947 = _2850;
        _2949 = _2851;
        _2951 = _2852;
    }
    bool _3158;
    vec4 _2961;
    vec4 _2983;
    float _2985;
    float _2989;
    float _2990;
    float _2991;
    float _2992;
    bool _3002;
    for (;;)
    {
        _2961 = cbMatDynParam._m0[0u];
        float _2963 = roundEven(_2961.y);
        bool _2964 = _2963 == 3.0;
        float _2965 = log2(_2951);
        float _2972 = exp2(_2965 * cbSceneParam._m0[78u].x) * _2821;
        float _2973 = exp2(_2965 * cbSceneParam._m0[78u].y) * _2822;
        float _2974 = exp2(_2965 * cbSceneParam._m0[78u].z) * _2823;
        float _2981 = _940 + (-0.5);
        _2983 = cbMtdParam._m0[1u];
        _2985 = _2983.y * _2981;
        float _2988 = (_2963 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2989 = _2988 * (_2964 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2945)));
        _2990 = _2988 * (_2964 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2947)));
        _2991 = _2988 * (_2964 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2949)));
        _2992 = _2981 * 0.999000012874603271484375;
        _3002 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3002)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _2992) < 0.5)
            {
                _3158 = true;
                break;
            }
        }
        uint _3099 = _989 + uint(_2961.w);
        if ((cbInstanceData._m0[_3099].w < 1.0) && ((cbInstanceData._m0[_3099].w + _2992) < 0.5))
        {
            _3158 = true;
            break;
        }
        if ((_2985 + 1.0) < _2983.x)
        {
            _3158 = true;
            break;
        }
        _3158 = false;
        break;
    }
    float _3363;
    if (_3158)
    {
        discard_state = true;
        _3363 = 0.0;
    }
    else
    {
        _3363 = cbInstanceData._m0[_2824].w;
    }
    SV_Target.x = _2989;
    SV_Target.y = _2990;
    SV_Target.z = _2991;
    SV_Target.w = _3363;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2824].w;
    discard_exit();
}


