#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1394;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3743 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3754 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3765 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3776 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) + _453;
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _543 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _547 = _543.z;
    float _556 = ((_526.z - _547) * _434) + _547;
    float _559 = ((((_526.x - _545) * _434) + _545) * 2.0) + (-1.0);
    float _560 = ((((_526.y - _546) * _434) + _546) * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3787 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _566 = sqrt(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))));
    vec4 _579 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _599 = _597.x;
    float _600 = 1.0 - _599;
    float _606 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _609 = ((isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : min(_606, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _618 = (_609 - ((((((_599 - _600) * cbMtdParam._m0[24u].z) + _600) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _609))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3808 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _626 = (_619 * ((_481.x * cbMtdParam._m0[18u].x) - _460)) + _460;
    float _627 = (_619 * ((_481.y * cbMtdParam._m0[18u].y) - _461)) + _461;
    float _628 = (_619 * ((_481.z * cbMtdParam._m0[18u].z) - _462)) + _462;
    vec4 _640 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _642 = _640.x;
    float _643 = 1.0 - _642;
    float _668 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_642 - _643) * cbMtdParam._m0[24u].w) + _643) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3819 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _677 = ((((cbMtdParam._m0[10u].x - _626) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _669) + _626;
    float _678 = ((((cbMtdParam._m0[10u].y - _627) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _669) + _627;
    float _679 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _628)) * _669) + _628;
    vec4 _705 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _707 = _705.x;
    float _725 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _707) * _434) + _707;
    float _729 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _725) * cbMtdParam._m0[19u].z) + _725;
    float _731 = _729 - (_729 * _619);
    float _733 = _731 - (_731 * _669);
    float _738 = (((_501.z - _556) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _556;
    vec4 _752 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _759 = (_752.x * 2.0) + (-1.0);
    float _760 = (_752.y * 2.0) + (-1.0);
    float _761 = dot(vec2(_759, _760), vec2(_759, _760));
    float _3830 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _769 = (_619 * (_752.z - _738)) + _738;
    float _772 = ((cbMtdParam._m0[23u].y - _769) * _669) + _769;
    vec4 _791 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _797 = (_791.x * 2.0) + (-1.0);
    float _798 = (_791.y * 2.0) + (-1.0);
    float _799 = dot(vec2(_797, _798), vec2(_797, _798));
    float _3841 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _809 = _559 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_501.x * 2.0) + (-1.0)));
    float _810 = _560 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_501.y * 2.0) + (-1.0)));
    float _822 = (((_759 - _809) + (cbMtdParam._m0[21u].x * _809)) * _619) + _809;
    float _823 = (((_760 - _810) + (cbMtdParam._m0[21u].x * _810)) * _619) + _810;
    float _824 = (_619 * (sqrt(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) - _566)) + _566;
    float _835 = (((_797 - _822) + (_822 * cbMtdParam._m0[22u].z)) * _669) + _822;
    float _836 = (((_798 - _823) + (_823 * cbMtdParam._m0[22u].z)) * _669) + _823;
    float _837 = ((sqrt(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) - _824) * _669) + _824;
    float _841 = cbMtdParam._m0[22u].x + _579.w;
    float _844 = fma(_837, _251 * NORMAL.x, fma(_836, _258 * TANGENT.x, (_244 * _236) * _835));
    float _847 = fma(_837, _251 * NORMAL.y, fma(_836, _258 * TANGENT.y, (_244 * _237) * _835));
    float _850 = fma(_837, _251 * NORMAL.z, fma(_836, _258 * TANGENT.z, (_244 * _238) * _835));
    float _854 = inversesqrt(dot(vec3(_844, _847, _850), vec3(_844, _847, _850)));
    float _855 = _854 * _844;
    float _856 = _854 * _847;
    float _857 = _854 * _850;
    float _3852 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _858 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _3874 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3885 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3896 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _3907 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _863 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _877 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _927 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _917);
    float _928 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _917);
    float _929 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _917);
    float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
    float _934 = _927 * _933;
    float _935 = _928 * _933;
    float _936 = _929 * _933;
    float _942 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _943 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _961 = fma(_857, cbSceneParam._m0[5u].z, fma(_856, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _855));
    float _964 = fma(_857, cbSceneParam._m0[6u].z, fma(_856, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _855));
    float _967 = fma(_857, cbSceneParam._m0[7u].z, fma(_856, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _855));
    uint _981 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _987 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_981].x;
    float _988 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_981].y;
    float _989 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_981].z;
    float _3918 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _991 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _993 = 1.0 - _863;
    float _994 = _990 * _993;
    float _995 = _991 * _993;
    float _996 = _992 * _993;
    float _1001 = (_990 + (-0.039999999105930328369140625)) * _863;
    float _1002 = (_991 + (-0.039999999105930328369140625)) * _863;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _863;
    float _1004 = _1001 + 0.039999999105930328369140625;
    float _1006 = _1002 + 0.039999999105930328369140625;
    float _1007 = _1003 + 0.039999999105930328369140625;
    vec4 _1016 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _942, cbSceneParam._m0[86u].y * _943));
    float _1020 = ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * TEXCOORD_5.w) * _1016.x;
    float _1021 = dot(vec3(_855, _856, _857), vec3(_934, _935, _936));
    float _1024 = _1021 * 2.0;
    float _1028 = (_1024 * _855) - _934;
    float _1029 = (_1024 * _856) - _935;
    float _1030 = (_1024 * _857) - _936;
    float _1034 = abs(dot(vec3(_934, _935, _936), vec3(_855, _856, _857)));
    float _3951 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1036 = sqrt(_858);
    float _1049 = exp2((_1036 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1036 * 3.0));
    float _1055 = (1.0 - _1049) * ((_1036 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1056 = _1049 * _1036;
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1393;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1118 = fma(_1092, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084));
        float _1122 = fma(_1092, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084));
        float _1126 = fma(_1092, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084));
        float _1151 = _1084 + _855;
        float _1152 = _1088 + _856;
        float _1153 = _1092 + _857;
        float _1163 = fma(_1153, cbModelParam._m0[26u].z, fma(_1152, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1151)) - _1118;
        float _1164 = fma(_1153, cbModelParam._m0[27u].z, fma(_1152, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1151)) - _1122;
        float _1165 = fma(_1153, cbModelParam._m0[28u].z, fma(_1152, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1151)) - _1126;
        float _1169 = inversesqrt(dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165)));
        float _1182 = ((_1169 * _1163) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1118 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1169 * _1164) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1122 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1169 * _1165) / cbModelParam._m0[34u].z) + ((((((_1126 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        float _1221 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1187.x + (-0.5));
        float _1223 = _1221 * (_1187.y + (-0.5));
        float _1224 = _1221 * (_1187.z + (-0.5));
        float _1231 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1194.x + (-0.5));
        float _1233 = _1231 * (_1194.y + (-0.5));
        float _1234 = _1231 * (_1194.z + (-0.5));
        float _1241 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1201.x + (-0.5));
        float _1243 = _1241 * (_1201.y + (-0.5));
        float _1244 = _1241 * (_1201.z + (-0.5));
        float _1251 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1208.x + (-0.5));
        float _1253 = _1251 * (_1208.y + (-0.5));
        float _1254 = _1251 * (_1208.z + (-0.5));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = _1222 * 0.5;
        float _1259 = _1232 * 0.5;
        float _1260 = _1242 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1275 = (dot(vec3(_855, _856, _857), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1285 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3999 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1287 + 1.0))) + _1292) * _1255;
        float _1302 = _1223 * 0.5;
        float _1303 = _1233 * 0.5;
        float _1304 = _1243 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_855, _856, _857), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4032 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1329 + 1.0))) + _1334) * _1256;
        float _1344 = _1224 * 0.5;
        float _1345 = _1234 * 0.5;
        float _1346 = _1244 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_855, _856, _857), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4065 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1371 + 1.0))) + _1376) * _1257;
        _1393 = _1224;
        _1395 = _1223;
        _1396 = _1222;
        _1397 = _1234;
        _1398 = _1233;
        _1399 = _1232;
        _1400 = _1244;
        _1401 = _1243;
        _1402 = _1242;
        _1403 = _1257;
        _1404 = _1256;
        _1405 = _1255;
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
    }
    else
    {
        _1393 = _1394;
        _1395 = _1394;
        _1396 = _1394;
        _1397 = _1394;
        _1398 = _1394;
        _1399 = _1394;
        _1400 = _1394;
        _1401 = _1394;
        _1402 = _1394;
        _1403 = _1394;
        _1404 = _1394;
        _1405 = _1394;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1433 = fma(_1092, cbModelParam._m0[30u].z, fma(_1088, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1084));
        float _1437 = fma(_1092, cbModelParam._m0[31u].z, fma(_1088, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1084));
        float _1441 = fma(_1092, cbModelParam._m0[32u].z, fma(_1088, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1084));
        float _1464 = _1084 + _855;
        float _1465 = _1088 + _856;
        float _1466 = _1092 + _857;
        float _1476 = fma(_1466, cbModelParam._m0[30u].z, fma(_1465, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1464)) - _1433;
        float _1477 = fma(_1466, cbModelParam._m0[31u].z, fma(_1465, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1464)) - _1437;
        float _1478 = fma(_1466, cbModelParam._m0[32u].z, fma(_1465, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1464)) - _1441;
        float _1482 = inversesqrt(dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478)));
        float _1495 = ((_1482 * _1476) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1433 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1496 = ((_1482 * _1477) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1437 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1482 * _1478) / cbModelParam._m0[35u].z) + ((((((_1441 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        float _1532 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1499.x + (-0.5));
        float _1534 = _1532 * (_1499.y + (-0.5));
        float _1535 = _1532 * (_1499.z + (-0.5));
        float _1542 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1506.x + (-0.5));
        float _1544 = _1542 * (_1506.y + (-0.5));
        float _1545 = _1542 * (_1506.z + (-0.5));
        float _1552 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1513.x + (-0.5));
        float _1554 = _1552 * (_1513.y + (-0.5));
        float _1555 = _1552 * (_1513.z + (-0.5));
        float _1562 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1520.x + (-0.5));
        float _1564 = _1562 * (_1520.y + (-0.5));
        float _1565 = _1562 * (_1520.z + (-0.5));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = _1533 * 0.5;
        float _1570 = _1543 * 0.5;
        float _1571 = _1553 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_855, _856, _857), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4128 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1596 + 1.0))) + _1601) * _1566;
        float _1611 = _1534 * 0.5;
        float _1612 = _1544 * 0.5;
        float _1613 = _1554 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_855, _856, _857), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4161 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1638 + 1.0))) + _1643) * _1567;
        float _1653 = _1535 * 0.5;
        float _1654 = _1545 * 0.5;
        float _1655 = _1555 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_855, _856, _857), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4194 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1680 + 1.0))) + _1685) * _1568;
        _1702 = _1535;
        _1703 = _1534;
        _1704 = _1533;
        _1705 = _1545;
        _1706 = _1544;
        _1707 = _1543;
        _1708 = _1555;
        _1709 = _1554;
        _1710 = _1553;
        _1711 = _1568;
        _1712 = _1567;
        _1713 = _1566;
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
    }
    else
    {
        _1702 = _1394;
        _1703 = _1394;
        _1704 = _1394;
        _1705 = _1394;
        _1706 = _1394;
        _1707 = _1394;
        _1708 = _1394;
        _1709 = _1394;
        _1710 = _1394;
        _1711 = _1394;
        _1712 = _1394;
        _1713 = _1394;
        _1714 = 0.0;
        _1715 = 0.0;
        _1716 = 0.0;
    }
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1406)) + _1406;
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1407)) + _1407;
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1408)) + _1408;
    float _1749 = fma(_1728, cbSceneParam._m0[89u].z, fma(_1727, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1752 = fma(_1728, cbSceneParam._m0[90u].z, fma(_1727, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1755 = fma(_1728, cbSceneParam._m0[91u].z, fma(_1727, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1726));
    float _1770 = _1028 * 0.5;
    float _1771 = _1029 * 0.5;
    float _1772 = _1030 * 0.5;
    float _1773 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1776 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1779 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1813;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1786 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1393, _1397, _1400, _1403));
        float _1790 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1395, _1398, _1401, _1404));
        float _1794 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1396, _1399, _1402, _1405));
        float _1801 = dot(vec4(cbModelParam._m0[39u]), vec4(_1770, _1771, _1772, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1824;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1815 = dot(vec4(cbModelParam._m0[40u]), vec4(_1770, _1771, _1772, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1828 = (_1824 * cbModelParam._m0[1u].x) + (_1813 * (1.0 - cbModelParam._m0[1u].x));
    float _1838 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _858);
    float _1839 = isnan(_1838) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1838 : min(cbModelParam._m0[25u].z, _1838));
    float _1919;
    float _1921;
    float _1923;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1886 = fma(_1092, cbModelParam._m0[13u].z, fma(_1088, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1084)) + cbModelParam._m0[13u].w;
        float _1890 = fma(_1092, cbModelParam._m0[14u].z, fma(_1088, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1084)) + cbModelParam._m0[14u].w;
        float _1894 = fma(_1092, cbModelParam._m0[15u].z, fma(_1088, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1084)) + cbModelParam._m0[15u].w;
        float _1897 = fma(_1030, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028));
        float _1900 = fma(_1030, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028));
        float _1903 = fma(_1030, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028));
        float _1931;
        if (_1897 > 0.0)
        {
            _1931 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1931 = frontier_phi_14_12_ladder;
        }
        float _2154;
        if (_1900 > 0.0)
        {
            _2154 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2154 = frontier_phi_23_19_ladder;
        }
        float _2411;
        if (_1903 > 0.0)
        {
            _2411 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2411 = frontier_phi_35_30_ladder;
        }
        float _2413 = isnan(_2154) ? _1931 : (isnan(_1931) ? _2154 : min(_1931, _2154));
        float _2414 = isnan(_2411) ? _2413 : (isnan(_2413) ? _2411 : min(_2413, _2411));
        float _2418 = (_2414 * _1897) + _1886;
        float _2419 = (_2414 * _1900) + _1890;
        float _2420 = (_2414 * _1903) + _1894;
        float _2421 = _2414 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2421;
        float _2425 = _2421 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 > _2425) || ((_2419 < _2423) || ((_2418 < _2423) || (_2418 > _2425))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2420, cbModelParam._m0[9u].z, fma(_2419, cbModelParam._m0[9u].y, _2418 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2420, cbModelParam._m0[10u].z, fma(_2419, cbModelParam._m0[10u].y, _2418 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2420, cbModelParam._m0[11u].z, fma(_2419, cbModelParam._m0[11u].y, _2418 * cbModelParam._m0[11u].x))), _1839);
            frontier_phi_13_35_ladder = _2548.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2548.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2548.x * cbModelParam._m0[1u].y;
        }
        _1919 = frontier_phi_13_35_ladder_2;
        _1921 = frontier_phi_13_35_ladder_1;
        _1923 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1028, _1029, _1030), _1839);
        _1919 = _1907.x * cbModelParam._m0[1u].y;
        _1921 = _1907.y * cbModelParam._m0[1u].y;
        _1923 = _1907.z * cbModelParam._m0[1u].y;
    }
    float _1927 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _858);
    float _1928 = isnan(_1927) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1927 : min(cbModelParam._m0[25u].w, _1927));
    float _2017;
    float _2019;
    float _2021;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1981 = fma(_1092, cbModelParam._m0[21u].z, fma(_1088, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1084)) + cbModelParam._m0[21u].w;
        float _1985 = fma(_1092, cbModelParam._m0[22u].z, fma(_1088, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1084)) + cbModelParam._m0[22u].w;
        float _1989 = fma(_1092, cbModelParam._m0[23u].z, fma(_1088, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1084)) + cbModelParam._m0[23u].w;
        float _1992 = fma(_1030, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028));
        float _1995 = fma(_1030, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028));
        float _1998 = fma(_1030, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028));
        float _2159;
        if (_1992 > 0.0)
        {
            _2159 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2159 = frontier_phi_25_21_ladder;
        }
        float _2438;
        if (_1995 > 0.0)
        {
            _2438 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2438 = frontier_phi_37_32_ladder;
        }
        float _2651;
        if (_1998 > 0.0)
        {
            _2651 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2651 = frontier_phi_46_43_ladder;
        }
        float _2653 = isnan(_2438) ? _2159 : (isnan(_2159) ? _2438 : min(_2159, _2438));
        float _2654 = isnan(_2651) ? _2653 : (isnan(_2653) ? _2651 : min(_2653, _2651));
        float _2658 = (_2654 * _1992) + _1981;
        float _2659 = (_2654 * _1995) + _1985;
        float _2660 = (_2654 * _1998) + _1989;
        float _2661 = _2654 * 9.9999997473787516355514526367188e-05;
        float _2662 = (-1.0) - _2661;
        float _2664 = _2661 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2660 > _2664) || ((_2660 < _2662) || ((_2659 > _2664) || ((_2659 < _2662) || ((_2658 < _2662) || (_2658 > _2664))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2859 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2660, cbModelParam._m0[17u].z, fma(_2659, cbModelParam._m0[17u].y, _2658 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2660, cbModelParam._m0[18u].z, fma(_2659, cbModelParam._m0[18u].y, _2658 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2660, cbModelParam._m0[19u].z, fma(_2659, cbModelParam._m0[19u].y, _2658 * cbModelParam._m0[19u].x))), _1928);
            frontier_phi_22_46_ladder = _2859.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2859.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2859.x * cbModelParam._m0[1u].z;
        }
        _2017 = frontier_phi_22_46_ladder_2;
        _2019 = frontier_phi_22_46_ladder_1;
        _2021 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2001 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1028, _1029, _1030), _1928);
        _2017 = _2001.x * cbModelParam._m0[1u].z;
        _2019 = _2001.y * cbModelParam._m0[1u].z;
        _2021 = _2001.z * cbModelParam._m0[1u].z;
    }
    float _2034 = (((_1055 * _1004) + _1056) * _1020) * ((cbModelParam._m0[1u].w * (_2017 - _1919)) + _1919);
    float _2036 = (((_1055 * _1006) + _1056) * _1020) * ((cbModelParam._m0[1u].w * (_2019 - _1921)) + _1921);
    float _2038 = (((_1055 * _1007) + _1056) * _1020) * ((cbModelParam._m0[1u].w * (_2021 - _1923)) + _1923);
    float _2041 = fma(_2038, cbSceneParam._m0[89u].z, fma(_2036, cbSceneParam._m0[89u].y, _2034 * cbSceneParam._m0[89u].x));
    float _2044 = fma(_2038, cbSceneParam._m0[90u].z, fma(_2036, cbSceneParam._m0[90u].y, _2034 * cbSceneParam._m0[90u].x));
    float _2047 = fma(_2038, cbSceneParam._m0[91u].z, fma(_2036, cbSceneParam._m0[91u].y, _2034 * cbSceneParam._m0[91u].x));
    vec4 _2055 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_942, _943));
    float _2057 = _2055.w;
    float _2069 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2057);
    float _2070 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2057);
    float _2071 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2057);
    uvec4 _2075 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2077 = _2075.x * 14u;
    uint _2078 = _2077 + 13u;
    float _2085 = _1020 + (-1.0);
    float _2090 = (cbLight._m0[_2078].x * _2085) + 1.0;
    float _2091 = (cbLight._m0[_2078].y * _2085) + 1.0;
    float _2092 = (cbLight._m0[_2078].z * _2085) + 1.0;
    float _2093 = (cbLight._m0[_2078].w * _2085) + 1.0;
    uint _2094 = _2077 + 5u;
    float _2100 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
    uint _2104 = _2077 + 4u;
    float _2113 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
    uint _2117 = _2077 | 1u;
    float _2128 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_855, _856, _857));
    float _2131 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_855, _856, _857));
    float _4330 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _4341 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2136 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.3183098733425140380859375;
    float _2138 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.3183098733425140380859375;
    float _2145 = ((cbLight._m0[_2094].x * _2100) * _2138) + (((cbLight._m0[_2104].x * _2069) * _2113) * _2136);
    float _2146 = ((_2100 * cbLight._m0[_2094].y) * _2138) + (((cbLight._m0[_2104].y * _2070) * _2113) * _2136);
    float _2147 = ((_2100 * cbLight._m0[_2094].z) * _2138) + (((cbLight._m0[_2104].z * _2071) * _2113) * _2136);
    uvec4 _2151 = floatBitsToUint(cbLight._m0[_2077 + 12u]);
    bool _2153 = _2151.x == 0u;
    float _2164;
    float _2166;
    float _2168;
    if (_2153)
    {
        _2164 = _2145;
        _2166 = _2146;
        _2168 = _2147;
    }
    else
    {
        uint _2172 = _2077 + 6u;
        float _2188 = (dot(vec3(cbLight._m0[_2077 + 2u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2189 = _2188 * _2188;
        float _4352 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2190 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2191 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2164 = (((cbLight._m0[_2172].x * 0.3183098733425140380859375) * _2190) * _2191) + _2145;
        _2166 = (((cbLight._m0[_2172].y * 0.3183098733425140380859375) * _2190) * _2191) + _2146;
        _2168 = (((cbLight._m0[_2172].z * 0.3183098733425140380859375) * _2190) * _2191) + _2147;
    }
    bool _2171 = _2151.y == 0u;
    float _2209;
    float _2211;
    float _2213;
    if (_2171)
    {
        _2209 = _2164;
        _2211 = _2166;
        _2213 = _2168;
    }
    else
    {
        uint _2382 = _2077 + 7u;
        float _2398 = (dot(vec3(cbLight._m0[_2077 + 3u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2399 = _2398 * _2398;
        float _4368 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2400 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2401 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2209 = (((cbLight._m0[_2382].x * 0.3183098733425140380859375) * _2400) * _2401) + _2164;
        _2211 = (((cbLight._m0[_2382].y * 0.3183098733425140380859375) * _2400) * _2401) + _2166;
        _2213 = (((cbLight._m0[_2382].z * 0.3183098733425140380859375) * _2400) * _2401) + _2168;
    }
    uint _2216 = _2077 + 8u;
    float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _858) * 0.949999988079071044921875);
    float _2230 = _2229 * _2229;
    float _2231 = cbLight._m0[_2077].x + _934;
    float _2232 = cbLight._m0[_2077].y + _935;
    float _2233 = cbLight._m0[_2077].z + _936;
    float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
    float _2238 = _2237 * _2231;
    float _2239 = _2237 * _2232;
    float _2240 = _2237 * _2233;
    float _2241 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2077].xyz));
    float _4384 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _4395 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _2245 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2246 = dot(vec3(_855, _856, _857), vec3(_2238, _2239, _2240));
    float _4406 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2250 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2238, _2239, _2240));
    float _4417 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2254 = _2230 * _2230;
    float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
    float _2266 = exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0);
    float _2267 = 0.959999978542327880859375 - _1001;
    float _2269 = 0.959999978542327880859375 - _1002;
    float _2270 = 0.959999978542327880859375 - _1003;
    float _2277 = 1.0 - _2230;
    float _2288 = (0.5 / (((_2245 * ((_2244 * _2277) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2277) + _2230) * _2244))) * _2244;
    float _4428 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2290 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
    uint _2304 = _2077 + 9u;
    float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _858) * 0.949999988079071044921875);
    float _2316 = _2315 * _2315;
    float _2317 = cbLight._m0[_2117].x + _934;
    float _2318 = cbLight._m0[_2117].y + _935;
    float _2319 = cbLight._m0[_2117].z + _936;
    float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
    float _2324 = _2323 * _2317;
    float _2325 = _2323 * _2318;
    float _2326 = _2323 * _2319;
    float _2327 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2117].xyz));
    float _4439 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2331 = dot(vec3(_855, _856, _857), vec3(_2324, _2325, _2326));
    float _4450 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2335 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2324, _2325, _2326));
    float _4461 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2339 = _2316 * _2316;
    float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
    float _2350 = exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0);
    float _2357 = 1.0 - _2316;
    float _2367 = (0.5 / (((_2245 * ((_2330 * _2357) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2357) + _2316) * _2330))) * _2330;
    float _4472 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2369 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
    float _2379 = (((((_2350 * _2267) + _1004) * cbLight._m0[_2304].x) * _2369) * _2100) + ((((cbLight._m0[_2216].x * _2069) * ((_2266 * _2267) + _1004)) * _2290) * _2113);
    float _2380 = (((((_2350 * _2269) + _1006) * cbLight._m0[_2304].y) * _2369) * _2100) + ((((cbLight._m0[_2216].y * _2070) * ((_2266 * _2269) + _1006)) * _2290) * _2113);
    float _2381 = (((((_2350 * _2270) + _1007) * cbLight._m0[_2304].z) * _2369) * _2100) + ((((cbLight._m0[_2216].z * _2071) * ((_2266 * _2270) + _1007)) * _2290) * _2113);
    float _2443;
    float _2445;
    float _2447;
    if (_2153)
    {
        _2443 = _2379;
        _2445 = _2380;
        _2447 = _2381;
    }
    else
    {
        uint _2449 = _2077 + 2u;
        uint _2453 = _2077 + 10u;
        float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2449].w)) * _858) * 0.949999988079071044921875);
        float _2468 = _2467 * _2467;
        float _2469 = cbLight._m0[_2449].x + _934;
        float _2470 = cbLight._m0[_2449].y + _935;
        float _2471 = cbLight._m0[_2449].z + _936;
        float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
        float _2476 = _2475 * _2469;
        float _2477 = _2475 * _2470;
        float _2478 = _2475 * _2471;
        float _2479 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2449].xyz));
        float _4483 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2483 = dot(vec3(_855, _856, _857), vec3(_2476, _2477, _2478));
        float _4494 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2487 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_2476, _2477, _2478));
        float _4505 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2491 = _2468 * _2468;
        float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
        float _2502 = exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0);
        float _2509 = 1.0 - _2468;
        float _2519 = (0.5 / (((_2245 * ((_2482 * _2509) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2509) + _2468) * _2482))) * _2482;
        float _4516 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2521 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
        float _2522 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2443 = (((((_2502 * _2267) + _1004) * cbLight._m0[_2453].x) * _2521) * _2522) + _2379;
        _2445 = (((((_2502 * _2269) + _1006) * cbLight._m0[_2453].y) * _2521) * _2522) + _2380;
        _2447 = (((((_2502 * _2270) + _1007) * cbLight._m0[_2453].z) * _2521) * _2522) + _2381;
    }
    float _2557;
    float _2559;
    float _2561;
    if (_2171)
    {
        _2557 = _2443;
        _2559 = _2445;
        _2561 = _2447;
    }
    else
    {
        uint _2568 = _2077 + 3u;
        uint _2572 = _2077 + 11u;
        float _2586 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2568].w)) * _858) * 0.949999988079071044921875);
        float _2587 = _2586 * _2586;
        float _2588 = cbLight._m0[_2568].x + _934;
        float _2589 = cbLight._m0[_2568].y + _935;
        float _2590 = cbLight._m0[_2568].z + _936;
        float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
        float _2595 = _2594 * _2588;
        float _2596 = _2594 * _2589;
        float _2597 = _2594 * _2590;
        float _2598 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2568].xyz));
        float _4532 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2602 = dot(vec3(_855, _856, _857), vec3(_2595, _2596, _2597));
        float _4543 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2606 = dot(vec3(cbLight._m0[_2568].xyz), vec3(_2595, _2596, _2597));
        float _4554 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2610 = _2587 * _2587;
        float _2614 = ((_2605 * _2605) * (_2610 + (-1.0))) + 1.0;
        float _2621 = exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0);
        float _2628 = 1.0 - _2587;
        float _2638 = (0.5 / (((_2245 * ((_2601 * _2628) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2628) + _2587) * _2601))) * _2601;
        float _4565 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2640 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2610 / ((_2614 * _2614) * 3.141590118408203125));
        float _2641 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2557 = (((((_2621 * _2267) + _1004) * cbLight._m0[_2572].x) * _2640) * _2641) + _2443;
        _2559 = (((((_2621 * _2269) + _1006) * cbLight._m0[_2572].y) * _2640) * _2641) + _2445;
        _2561 = (((((_2621 * _2270) + _1007) * cbLight._m0[_2572].z) * _2640) * _2641) + _2447;
    }
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_2075.y == 0u)
    {
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2716;
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2716;
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2716;
        uvec4 _2731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2732 = _2731.x;
        uint _2743 = uint((float(_2731.y) * floor(float(uint(cbSceneParam._m0[85u].y * _943) / _2732))) + floor(float(uint(cbSceneParam._m0[85u].x * _942) / _2732)));
        float _2753 = (log2(_2719 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2754 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        uint _2757 = uint(isnan(14.0) ? _2754 : (isnan(_2754) ? 14.0 : min(_2754, 14.0)));
        uvec4 _2762 = texelFetch(g_lightClusterGridBuffer, int(((_2757 << 2u) + (_2743 << 6u)) >> 2u));
        uint _2763 = _2762.x;
        uint _2764 = _2731.z;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        if (((((1u << ((_2764 >> 4u) & 15u)) + 4294967295u) & _2763) == 0u) || ((_2764 & 240u) == 0u))
        {
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
        }
        else
        {
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            uint _3015 = 0u;
            uint _3024;
            bool _3025;
            for (;;)
            {
                _3024 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                _3025 = _3024 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3025)
                {
                    frontier_phi_61_pred = _3009;
                    frontier_phi_61_pred_1 = _3014;
                    frontier_phi_61_pred_2 = _3013;
                    frontier_phi_61_pred_3 = _3012;
                    frontier_phi_61_pred_4 = _3011;
                    frontier_phi_61_pred_5 = _3010;
                }
                else
                {
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    uint _3139;
                    _3133 = _3009;
                    _3134 = _3010;
                    _3135 = _3011;
                    _3136 = _3012;
                    _3137 = _3013;
                    _3138 = _3014;
                    _3139 = _3024;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    for (;;)
                    {
                        uint _3143 = uint(findLSB(_3139)) + (_3015 << 5u);
                        uint _3140 = (_3139 + 4294967295u) & _3139;
                        uint _3145 = _3143 * 48u;
                        vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 3u)).x));
                        uint _3165 = (_3143 * 48u) + 4u;
                        vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 3u)).x));
                        uint _3184 = (_3143 * 48u) + 8u;
                        vec3 _3195 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x));
                        float _3199 = _3159.x - _2717;
                        float _3200 = _3159.y - _2718;
                        float _3201 = _3159.z - _2719;
                        float _3202 = dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201));
                        float _3205 = inversesqrt(_3202);
                        float _3206 = _3205 * _3199;
                        float _3207 = _3205 * _3200;
                        float _3208 = _3205 * _3201;
                        float _3209 = dot(vec3(_961, _964, _967), vec3(_3206, _3207, _3208));
                        float _3214 = 1.0 - (_3202 * _3159.w);
                        float _4591 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3215 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3216 = sqrt(_3202) * _3178.w;
                        float _3219 = 1.39999997615814208984375 / (_3216 + 1.39999997615814208984375);
                        float _3220 = _3219 * _3219;
                        float _3223 = ((1.0 - _3220) * _3209) + _3220;
                        float _3226 = _3216 * _3216;
                        float _3230 = ((isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0))) * _3215) / ((_3226 * 0.699999988079071044921875) + 1.0);
                        float _3234 = (-0.0) - _2717;
                        float _3235 = (-0.0) - _2718;
                        float _3236 = (-0.0) - _2719;
                        float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                        float _3241 = _3240 * _3234;
                        float _3242 = _3240 * _3235;
                        float _3243 = _3240 * _3236;
                        float _3251 = exp2(log2(1.0 / ((_3226 * 3.5) + 5.0)) * 0.25);
                        float _3252 = 1.0 - _1036;
                        float _3259 = sqrt(1.0 - ((1.0 - (_3252 * _3252)) * (1.0 - (_3251 * _3251))));
                        float _3260 = _3259 * _3259;
                        float _3261 = _3260 * _3260;
                        float _3262 = _3241 + _3206;
                        float _3263 = _3242 + _3207;
                        float _3264 = _3243 + _3208;
                        float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                        float _3272 = dot(vec3(_961, _964, _967), vec3(_3241, _3242, _3243));
                        float _4607 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3275 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3276 = dot(vec3(_961, _964, _967), vec3(_3268 * _3262, _3268 * _3263, _3268 * _3264));
                        float _4618 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3283 = ((_3279 * _3279) * (_3261 + (-1.0))) + 1.0;
                        float _3284 = _3219 * _3260;
                        float _3285 = _3284 * _3284;
                        float _3288 = ((1.0 - _3285) * _3209) + _3285;
                        float _4629 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3290 = 1.0 - _3260;
                        float _3300 = (0.5 / (((_3289 * ((_3275 * _3290) + _3260)) + 9.9999999392252902907785028219223e-09) + (((_3289 * _3290) + _3260) * _3275))) * _3289;
                        float _4640 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3311 = (((_3261 * 3.1415927410125732421875) * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) / ((_3283 * _3283) * ((_3226 * 2.1991131305694580078125) + 3.141590118408203125))) * _3215;
                        _3068 = (_3230 * _3178.x) + _3136;
                        _3069 = (_3230 * _3178.y) + _3137;
                        _3070 = (_3230 * _3178.z) + _3138;
                        _3065 = (_3311 * _3195.x) + _3133;
                        _3066 = (_3311 * _3195.y) + _3134;
                        _3067 = (_3311 * _3195.z) + _3135;
                        if (_3140 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3133 = _3065;
                            _3134 = _3066;
                            _3135 = _3067;
                            _3136 = _3068;
                            _3137 = _3069;
                            _3138 = _3070;
                            _3139 = _3140;
                        }
                    }
                    frontier_phi_61_pred = _3065;
                    frontier_phi_61_pred_1 = _3070;
                    frontier_phi_61_pred_2 = _3069;
                    frontier_phi_61_pred_3 = _3068;
                    frontier_phi_61_pred_4 = _3067;
                    frontier_phi_61_pred_5 = _3066;
                }
                _2865 = frontier_phi_61_pred;
                _2875 = frontier_phi_61_pred_1;
                _2873 = frontier_phi_61_pred_2;
                _2871 = frontier_phi_61_pred_3;
                _2869 = frontier_phi_61_pred_4;
                _2867 = frontier_phi_61_pred_5;
                uint _3016 = _3015 + 1u;
                if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3009 = _2865;
                    _3010 = _2867;
                    _3011 = _2869;
                    _3012 = _2871;
                    _3013 = _2873;
                    _3014 = _2875;
                    _3015 = _3016;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
        }
        uvec4 _2878 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2879 = _2878.z;
        uint _2881 = (_2879 >> 8u) & 15u;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        if (((4294967295u << _2881) & _2763) == 0u)
        {
            _2977 = _2864;
            _2979 = _2866;
            _2981 = _2868;
            _2983 = _2870;
            _2985 = _2872;
            _2987 = _2874;
        }
        else
        {
            float _3002 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
            float _3003 = _3002 * _2717;
            float _3004 = _3002 * _2718;
            float _3005 = _3002 * _2719;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2881 < ((_2879 >> 12u) & 15u))
            {
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _3116 = _2864;
                float _3117 = _2866;
                float _3118 = _2868;
                float _3119 = _2870;
                float _3120 = _2872;
                float _3121 = _2874;
                uint _3122 = _2881;
                uint _3131;
                bool _3132;
                for (;;)
                {
                    _3131 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3122 << 2u)) >> 2u)).x;
                    _3132 = _3131 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3132)
                    {
                        frontier_phi_67_pred = _3119;
                        frontier_phi_67_pred_1 = _3120;
                        frontier_phi_67_pred_2 = _3121;
                        frontier_phi_67_pred_3 = _3118;
                        frontier_phi_67_pred_4 = _3117;
                        frontier_phi_67_pred_5 = _3116;
                    }
                    else
                    {
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3329 = _3116;
                        float _3330 = _3117;
                        float _3331 = _3118;
                        float _3332 = _3119;
                        float _3333 = _3120;
                        float _3334 = _3121;
                        uint _3335 = _3131;
                        uint _3336;
                        vec4 _3361;
                        float _3362;
                        vec4 _3377;
                        vec3 _3389;
                        vec4 _3404;
                        vec4 _3419;
                        float _3465;
                        bool _3466;
                        for (;;)
                        {
                            uint _3346 = ((_3122 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3335));
                            _3336 = (_3335 + 4294967295u) & _3335;
                            uint _3348 = _3346 * 40u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3362 = _3361.w;
                            uint _3364 = (_3346 * 40u) + 4u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3346 * 40u) + 8u;
                            _3389 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x));
                            uint _3391 = (_3346 * 40u) + 16u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3346 * 40u) + 20u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3346 * 40u) + 24u;
                            vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3440 = (_3346 * 40u) + 28u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            _3465 = fma(_2719, _3453.z, fma(_2718, _3453.y, _3453.x * _2717)) + _3453.w;
                            _3466 = !((fma(_2719, _3434.z, fma(_2718, _3434.y, _3434.x * _2717)) + _3434.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3466)
                            {
                                float _3493 = _3361.x - _2717;
                                float _3494 = _3361.y - _2718;
                                float _3495 = _3361.z - _2719;
                                float _3496 = dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495));
                                float _3499 = inversesqrt(_3496);
                                float _3500 = _3499 * _3493;
                                float _3501 = _3499 * _3494;
                                float _3502 = _3499 * _3495;
                                float _3506 = 1.0 - (_3496 / (_3362 * _3362));
                                float _4651 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3511 = sqrt(_3496) * _3377.w;
                                float _3513 = 1.39999997615814208984375 / (_3511 + 1.39999997615814208984375);
                                float _3514 = _3513 * _3513;
                                float _3517 = ((1.0 - _3514) * dot(vec3(_3500, _3501, _3502), vec3(_961, _964, _967))) + _3514;
                                float _3520 = _3511 * _3511;
                                float _3524 = (fma(_2719, _3404.z, fma(_2718, _3404.y, _3404.x * _2717)) + _3404.w) / _3465;
                                float _3525 = (fma(_2719, _3419.z, fma(_2718, _3419.y, _3419.x * _2717)) + _3419.w) / _3465;
                                float _3529 = 1.0 - dot(vec2(_3524, _3525), vec2(_3524, _3525));
                                float _4667 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3531 = _3530 * (((isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0))) * _3507) / ((_3520 * 0.699999988079071044921875) + 1.0));
                                float _3543 = exp2(log2(1.0 / ((_3520 * 3.5) + 5.0)) * 0.25);
                                float _3544 = 1.0 - _1036;
                                float _3551 = sqrt(1.0 - ((1.0 - (_3544 * _3544)) * (1.0 - (_3543 * _3543))));
                                float _3552 = _3551 * _3551;
                                float _3553 = _3552 * _3552;
                                float _3554 = _3500 - _3003;
                                float _3555 = _3501 - _3004;
                                float _3556 = _3502 - _3005;
                                float _3560 = inversesqrt(dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556)));
                                float _3564 = dot(vec3(_961, _964, _967), vec3((-0.0) - _3003, (-0.0) - _3004, (-0.0) - _3005));
                                float _4678 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3567 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3568 = dot(vec3(_961, _964, _967), vec3(_3560 * _3554, _3560 * _3555, _3560 * _3556));
                                float _4689 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3571 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3575 = ((_3571 * _3571) * (_3553 + (-1.0))) + 1.0;
                                float _3576 = _3513 * _3552;
                                float _3577 = _3576 * _3576;
                                float _3583 = ((1.0 - _3577) * dot(vec3(_961, _964, _967), vec3(_3500, _3501, _3502))) + _3577;
                                float _4700 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3585 = 1.0 - _3552;
                                float _3595 = (0.5 / (((_3584 * ((_3567 * _3585) + _3552)) + 9.9999999392252902907785028219223e-09) + (((_3584 * _3585) + _3552) * _3567))) * _3584;
                                float _4711 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3605 = (_3530 * _3507) * (((_3553 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3575 * _3575) * ((_3520 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3605 * _3389.x;
                                frontier_phi_73_pred_1 = _3605 * _3389.y;
                                frontier_phi_73_pred_2 = _3531 * _3377.z;
                                frontier_phi_73_pred_3 = _3531 * _3377.y;
                                frontier_phi_73_pred_4 = _3531 * _3377.x;
                                frontier_phi_73_pred_5 = _3605 * _3389.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3609 = frontier_phi_73_pred;
                            _3610 = frontier_phi_73_pred_1;
                            _3614 = frontier_phi_73_pred_2;
                            _3613 = frontier_phi_73_pred_3;
                            _3612 = frontier_phi_73_pred_4;
                            _3611 = frontier_phi_73_pred_5;
                            _3319 = _3612 + _3332;
                            _3320 = _3613 + _3333;
                            _3321 = _3614 + _3334;
                            _3316 = _3609 + _3329;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            if (_3336 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3336;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3319;
                        frontier_phi_67_pred_1 = _3320;
                        frontier_phi_67_pred_2 = _3321;
                        frontier_phi_67_pred_3 = _3318;
                        frontier_phi_67_pred_4 = _3317;
                        frontier_phi_67_pred_5 = _3316;
                    }
                    _2984 = frontier_phi_67_pred;
                    _2986 = frontier_phi_67_pred_1;
                    _2988 = frontier_phi_67_pred_2;
                    _2982 = frontier_phi_67_pred_3;
                    _2980 = frontier_phi_67_pred_4;
                    _2978 = frontier_phi_67_pred_5;
                    uint _3123 = _3122 + 1u;
                    if (_3123 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3116 = _2978;
                        _3117 = _2980;
                        _3118 = _2982;
                        _3119 = _2984;
                        _3120 = _2986;
                        _3121 = _2988;
                        _3122 = _3123;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2986;
                frontier_phi_55_56_ladder_1 = _2988;
                frontier_phi_55_56_ladder_2 = _2984;
                frontier_phi_55_56_ladder_3 = _2982;
                frontier_phi_55_56_ladder_4 = _2980;
                frontier_phi_55_56_ladder_5 = _2978;
            }
            else
            {
                frontier_phi_55_56_ladder = _2872;
                frontier_phi_55_56_ladder_1 = _2874;
                frontier_phi_55_56_ladder_2 = _2870;
                frontier_phi_55_56_ladder_3 = _2868;
                frontier_phi_55_56_ladder_4 = _2866;
                frontier_phi_55_56_ladder_5 = _2864;
            }
            _2977 = frontier_phi_55_56_ladder_5;
            _2979 = frontier_phi_55_56_ladder_4;
            _2981 = frontier_phi_55_56_ladder_3;
            _2983 = frontier_phi_55_56_ladder_2;
            _2985 = frontier_phi_55_56_ladder;
            _2987 = frontier_phi_55_56_ladder_1;
        }
        float _2992 = isnan(1.0) ? _1020 : (isnan(_1020) ? 1.0 : min(_1020, 1.0));
        _2776 = (_2992 * _2983) + _2209;
        _2778 = (_2992 * _2985) + _2211;
        _2780 = (_2992 * _2987) + _2213;
        _2782 = ((_2977 * _1004) * _2992) + _2557;
        _2784 = ((_2979 * _1006) * _2992) + _2559;
        _2786 = ((_2981 * _1007) * _2992) + _2561;
    }
    else
    {
        _2776 = _2209;
        _2778 = _2211;
        _2780 = _2213;
        _2782 = _2557;
        _2784 = _2559;
        _2786 = _2561;
    }
    float _4727 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _4738 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4749 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    uint _2806 = _283 + 6u;
    float _2814 = _942 / cbSceneParam._m0[86u].x;
    float _2815 = _943 / cbSceneParam._m0[86u].y;
    vec4 _2829 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2814, _2815, (log2((isnan(cbSceneParam._m0[77u].w) ? _877 : (isnan(_877) ? cbSceneParam._m0[77u].w : min(_877, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2831 = _2829.x;
    float _2832 = _2829.y;
    float _2833 = _2829.z;
    float _2834 = _2829.w;
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    if (_877 > cbSceneParam._m0[78u].w)
    {
        float _2889 = isnan(_877) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _877 : min(cbSceneParam._m0[80u].w, _877));
        float _2890 = _2889 / _877;
        float _2901 = _2890 * _927;
        float _2902 = _928 * _2890;
        float _2903 = (-0.0) - _2902;
        float _2905 = _2890 * _929;
        float _2907 = (cbSceneParam._m0[77u].w * _2903) / _2889;
        float _2908 = _2907 + cbSceneParam._m0[79u].w;
        float _2909 = cbSceneParam._m0[79u].w - _2902;
        float _2915 = sqrt(((_2901 * _2901) + (_2902 * _2902)) + (_2905 * _2905));
        float _2918 = (1.0 - (cbSceneParam._m0[77u].w / _2889)) * _2915;
        float _2923 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2925 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3078;
        if (abs((_2903 - _2907) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3078 = ((((_2908 > 0.0) ? exp2(_2923 * _2908) : (2.0 - exp2(_2925 * _2908))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2918;
        }
        else
        {
            float _3038 = 1.0 / cbSceneParam._m0[80u].x;
            float _3039 = isnan(_2909) ? _2908 : (isnan(_2908) ? _2909 : max(_2908, _2909));
            float _3040 = isnan(_2909) ? _2908 : (isnan(_2908) ? _2909 : min(_2908, _2909));
            float _3049 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : min(_3039, 0.0));
            float _3050 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : min(_3040, 0.0));
            _3078 = ((abs(_2915 / _2903) * cbSceneParam._m0[80u].y) * ((((_3049 - _3050) * 2.0) - ((exp2(_2923 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0)))) - exp2(_2923 * (isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))))) * _3038)) - ((exp2(_2925 * _3049) - exp2(_2925 * _3050)) * _3038))) + (_2918 * cbSceneParam._m0[80u].z);
        }
        vec4 _3080 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2814, _2815, 1.0), 0.0);
        float _3089 = exp2((_3078 * (-1.44269502162933349609375)) * (1.0 - _3080.w));
        float _3090 = log2(_3089);
        float _3106 = log2(_2834);
        _2927 = (exp2(_3106 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].x)) * _3080.x) / cbSceneParam._m0[78u].x)) + _2831;
        _2929 = (exp2(_3106 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].y)) * _3080.y) / cbSceneParam._m0[78u].y)) + _2832;
        _2931 = (exp2(_3106 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].z)) * _3080.z) / cbSceneParam._m0[78u].z)) + _2833;
        _2933 = _3089 * _2834;
    }
    else
    {
        _2927 = _2831;
        _2929 = _2832;
        _2931 = _2833;
        _2933 = _2834;
    }
    float _2945 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2946 = _2945 == 3.0;
    float _2947 = log2(_2933);
    float _2954 = exp2(_2947 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2776 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1020))) + ((_2782 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1828)) * cbPerFrame._m0[3u].x));
    float _2955 = exp2(_2947 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2778 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1020))) + ((_2784 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1828)) * cbPerFrame._m0[3u].x));
    float _2956 = exp2(_2947 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2780 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1020))) + ((_2786 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1828)) * cbPerFrame._m0[3u].x));
    float _2965 = (_2945 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2965 * (_2946 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2927)));
    SV_Target.y = _2965 * (_2946 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2929)));
    SV_Target.z = _2965 * (_2946 ? _2956 : (_2956 + (cbSceneParam._m0[72u].w * _2931)));
    SV_Target.w = cbInstanceData._m0[_2806].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2806].w;
}


