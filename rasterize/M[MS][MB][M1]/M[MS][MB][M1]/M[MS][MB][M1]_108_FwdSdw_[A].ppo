#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1460;
float _4123;
float _4124;
float _4125;
float _4126;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4135 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4146 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4157 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].y) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4168 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _443 = (_436 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _444 = (_436 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _445 = (_436 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) + _455;
    vec4 _482 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _528 = _526.x;
    float _529 = _526.y;
    float _530 = _526.z;
    float _539 = ((_509.z - _530) * _436) + _530;
    float _542 = ((((_509.x - _528) * _436) + _528) * 2.0) + (-1.0);
    float _543 = ((((_509.y - _529) * _436) + _529) * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _4179 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))));
    vec4 _569 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _581 = (_542 + ((((_482.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_569.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _582 = (_543 + ((((_482.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_569.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _585 = fma(_549, _254, fma(_582, _261, _581 * _247));
    float _588 = fma(_549, _255, fma(_582, _262, _581 * _248));
    float _591 = fma(_549, _256, fma(_582, _263, _581 * _249));
    float _595 = inversesqrt(dot(vec3(_585, _588, _591), vec3(_585, _588, _591)));
    vec4 _622 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _624 = _622.x;
    float _625 = 1.0 - _624;
    float _631 = (cbMtdParam._m0[19u].x + dot(vec4(_595 * _585, _595 * _588, _595 * _591, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_624 - _625) * cbMtdParam._m0[24u].z) + _625) * cbMtdParam._m0[21u].z);
    float _4190 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _634 = (-0.0) - cbMtdParam._m0[24u].x;
    float _636 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _636 : (isnan(_636) ? 1.0 : min(_636, 1.0));
    float _644 = _632 - ((_632 * TEXCOORD_8.x) * _637);
    float _645 = _632 - ((_632 * TEXCOORD_8.y) * _637);
    float _646 = _632 - ((_632 * TEXCOORD_8.z) * _637);
    float _653 = (_644 * (cbMtdParam._m0[17u].x - _462)) + _462;
    float _654 = (_645 * (cbMtdParam._m0[17u].y - _463)) + _463;
    float _655 = (_646 * (cbMtdParam._m0[17u].z - _464)) + _464;
    vec4 _667 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _669 = _667.x;
    float _670 = 1.0 - _669;
    float _696 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_669 - _670) * cbMtdParam._m0[24u].w) + _670) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4211 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _705 = ((((cbMtdParam._m0[10u].x - _653) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _697) + _653;
    float _706 = ((((cbMtdParam._m0[10u].y - _654) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _697) + _654;
    float _707 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _655)) * _697) + _655;
    vec4 _733 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _735 = _733.x;
    float _753 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _735) * _436) + _735;
    float _757 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _753) * cbMtdParam._m0[19u].z) + _753;
    float _759 = _757 - (_757 * _644);
    float _761 = _759 - (_759 * _697);
    float _766 = (((_482.z - _539) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _539;
    float _770 = ((_569.z - _766) * cbMtdParam._m0[19u].w) + _766;
    vec4 _784 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _791 = (_784.x * 2.0) + (-1.0);
    float _792 = (_784.y * 2.0) + (-1.0);
    float _793 = dot(vec2(_791, _792), vec2(_791, _792));
    float _4222 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _801 = ((_784.z - _770) * _644) + _770;
    float _804 = ((cbMtdParam._m0[23u].y - _801) * _697) + _801;
    vec4 _823 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _829 = (_823.x * 2.0) + (-1.0);
    float _830 = (_823.y * 2.0) + (-1.0);
    float _831 = dot(vec2(_829, _830), vec2(_829, _830));
    float _4233 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _846 = ((sqrt(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) - _549) * _646) + _549;
    float _849 = (((_791 - _581) * _644) + _581) + (cbMtdParam._m0[21u].x * _581);
    float _850 = (((_792 - _582) * _645) + _582) + (cbMtdParam._m0[21u].x * _582);
    float _861 = (((_829 - _849) + (_849 * cbMtdParam._m0[22u].z)) * _697) + _849;
    float _862 = (((_830 - _850) + (_850 * cbMtdParam._m0[22u].z)) * _697) + _850;
    float _863 = (_697 * (sqrt(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) - _846)) + _846;
    float _867 = cbMtdParam._m0[22u].x + _569.w;
    float _870 = fma(_863, _254, fma(_862, _261, _861 * _247));
    float _873 = fma(_863, _255, fma(_862, _262, _861 * _248));
    float _876 = fma(_863, _256, fma(_862, _263, _861 * _249));
    float _880 = inversesqrt(dot(vec3(_870, _873, _876), vec3(_870, _873, _876)));
    float _881 = _880 * _870;
    float _882 = _880 * _873;
    float _883 = _880 * _876;
    float _4244 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _884 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4266 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4277 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4288 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4299 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _889 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _903 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _953 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _943);
    float _954 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _943);
    float _955 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _943);
    float _959 = inversesqrt(dot(vec3(_953, _954, _955), vec3(_953, _954, _955)));
    float _960 = _953 * _959;
    float _961 = _954 * _959;
    float _962 = _955 * _959;
    vec4 _967 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _969 = _967.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1141 = sqrt(((_953 * _953) + (_954 * _954)) + (_955 * _955));
        float _1147 = (cbMatDynParam._m0[5u].x * _1141) + cbMatDynParam._m0[5u].y;
        float _4310 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1152 = (cbMatDynParam._m0[5u].z * _1141) + cbMatDynParam._m0[5u].w;
        float _4321 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) - _1148)) + _1148) < ((_969 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _980 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _981 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _999 = fma(_883, cbSceneParam._m0[5u].z, fma(_882, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _881));
    float _1002 = fma(_883, cbSceneParam._m0[6u].z, fma(_882, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _881));
    float _1005 = fma(_883, cbSceneParam._m0[7u].z, fma(_882, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _881));
    uint _1018 = _285 + 9u;
    uint _1019 = _1018 + uint(cbMatDynParam._m0[0u].w);
    float _1025 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * cbInstanceData._m0[_1019].x;
    float _1026 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * cbInstanceData._m0[_1019].y;
    float _1027 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * cbInstanceData._m0[_1019].z;
    float _4332 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1028 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _4354 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _1031 = 1.0 - _889;
    float _1032 = _1028 * _1031;
    float _1033 = _1029 * _1031;
    float _1034 = _1030 * _1031;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _889;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _889;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _889;
    float _1042 = _1039 + 0.039999999105930328369140625;
    float _1044 = _1040 + 0.039999999105930328369140625;
    float _1045 = _1041 + 0.039999999105930328369140625;
    vec4 _1054 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _980, cbSceneParam._m0[86u].y * _981));
    float _1058 = ((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * TEXCOORD_5.w) * _1054.x;
    float _1059 = dot(vec3(_881, _882, _883), vec3(_960, _961, _962));
    float _1062 = _1059 * 2.0;
    float _1066 = (_1062 * _881) - _960;
    float _1067 = (_1062 * _882) - _961;
    float _1068 = (_1062 * _883) - _962;
    float _1072 = abs(dot(vec3(_960, _961, _962), vec3(_881, _882, _883)));
    float _4365 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1074 = sqrt(_884);
    float _1087 = exp2((_1074 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1074 * 3.0));
    float _1093 = (1.0 - _1087) * ((_1074 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1094 = _1087 * _1074;
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1459;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1184 = fma(_1130, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1122));
        float _1188 = fma(_1130, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1122));
        float _1192 = fma(_1130, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1122));
        float _1217 = _1122 + _881;
        float _1218 = _1126 + _882;
        float _1219 = _1130 + _883;
        float _1229 = fma(_1219, cbModelParam._m0[26u].z, fma(_1218, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1217)) - _1184;
        float _1230 = fma(_1219, cbModelParam._m0[27u].z, fma(_1218, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1217)) - _1188;
        float _1231 = fma(_1219, cbModelParam._m0[28u].z, fma(_1218, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1217)) - _1192;
        float _1235 = inversesqrt(dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231)));
        float _1248 = ((_1235 * _1229) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1184 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1235 * _1230) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1188 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1235 * _1231) / cbModelParam._m0[34u].z) + ((((((_1192 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        float _1287 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1253.x + (-0.5));
        float _1289 = _1287 * (_1253.y + (-0.5));
        float _1290 = _1287 * (_1253.z + (-0.5));
        float _1297 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1260.x + (-0.5));
        float _1299 = _1297 * (_1260.y + (-0.5));
        float _1300 = _1297 * (_1260.z + (-0.5));
        float _1307 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1267.x + (-0.5));
        float _1309 = _1307 * (_1267.y + (-0.5));
        float _1310 = _1307 * (_1267.z + (-0.5));
        float _1317 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1274.x + (-0.5));
        float _1319 = _1317 * (_1274.y + (-0.5));
        float _1320 = _1317 * (_1274.z + (-0.5));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = _1288 * 0.5;
        float _1325 = _1298 * 0.5;
        float _1326 = _1308 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1341 = (dot(vec3(_881, _882, _883), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4391 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1351 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4402 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4413 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_1353 + 1.0))) + _1358) * _1321;
        float _1368 = _1289 * 0.5;
        float _1369 = _1299 * 0.5;
        float _1370 = _1309 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_881, _882, _883), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4424 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4435 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4446 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_1395 + 1.0))) + _1400) * _1322;
        float _1410 = _1290 * 0.5;
        float _1411 = _1300 * 0.5;
        float _1412 = _1310 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_881, _882, _883), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4457 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4468 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4479 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_1437 + 1.0))) + _1442) * _1323;
        _1459 = _1290;
        _1461 = _1289;
        _1462 = _1288;
        _1463 = _1300;
        _1464 = _1299;
        _1465 = _1298;
        _1466 = _1310;
        _1467 = _1309;
        _1468 = _1308;
        _1469 = _1323;
        _1470 = _1322;
        _1471 = _1321;
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
    }
    else
    {
        _1459 = _1460;
        _1461 = _1460;
        _1462 = _1460;
        _1463 = _1460;
        _1464 = _1460;
        _1465 = _1460;
        _1466 = _1460;
        _1467 = _1460;
        _1468 = _1460;
        _1469 = _1460;
        _1470 = _1460;
        _1471 = _1460;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1502 = fma(_1130, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1122));
        float _1506 = fma(_1130, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1122));
        float _1510 = fma(_1130, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1122));
        float _1533 = _1122 + _881;
        float _1534 = _1126 + _882;
        float _1535 = _1130 + _883;
        float _1545 = fma(_1535, cbModelParam._m0[30u].z, fma(_1534, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1533)) - _1502;
        float _1546 = fma(_1535, cbModelParam._m0[31u].z, fma(_1534, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1533)) - _1506;
        float _1547 = fma(_1535, cbModelParam._m0[32u].z, fma(_1534, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1533)) - _1510;
        float _1551 = inversesqrt(dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547)));
        float _1564 = ((_1551 * _1545) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1502 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1565 = ((_1551 * _1546) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1506 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1566 = ((_1551 * _1547) / cbModelParam._m0[35u].z) + ((((((_1510 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        float _1601 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1568.x + (-0.5));
        float _1603 = _1601 * (_1568.y + (-0.5));
        float _1604 = _1601 * (_1568.z + (-0.5));
        float _1611 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1575.x + (-0.5));
        float _1613 = _1611 * (_1575.y + (-0.5));
        float _1614 = _1611 * (_1575.z + (-0.5));
        float _1621 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1582.x + (-0.5));
        float _1623 = _1621 * (_1582.y + (-0.5));
        float _1624 = _1621 * (_1582.z + (-0.5));
        float _1631 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1589.x + (-0.5));
        float _1633 = _1631 * (_1589.y + (-0.5));
        float _1634 = _1631 * (_1589.z + (-0.5));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = _1602 * 0.5;
        float _1639 = _1612 * 0.5;
        float _1640 = _1622 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_881, _882, _883), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4520 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4531 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4542 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_1665 + 1.0))) + _1670) * _1635;
        float _1680 = _1603 * 0.5;
        float _1681 = _1613 * 0.5;
        float _1682 = _1623 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_881, _882, _883), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4553 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4564 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4575 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_1707 + 1.0))) + _1712) * _1636;
        float _1722 = _1604 * 0.5;
        float _1723 = _1614 * 0.5;
        float _1724 = _1624 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_881, _882, _883), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4586 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4597 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4608 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_1749 + 1.0))) + _1754) * _1637;
        _1771 = _1604;
        _1772 = _1603;
        _1773 = _1602;
        _1774 = _1614;
        _1775 = _1613;
        _1776 = _1612;
        _1777 = _1624;
        _1778 = _1623;
        _1779 = _1622;
        _1780 = _1637;
        _1781 = _1636;
        _1782 = _1635;
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
    }
    else
    {
        _1771 = _1460;
        _1772 = _1460;
        _1773 = _1460;
        _1774 = _1460;
        _1775 = _1460;
        _1776 = _1460;
        _1777 = _1460;
        _1778 = _1460;
        _1779 = _1460;
        _1780 = _1460;
        _1781 = _1460;
        _1782 = _1460;
        _1783 = 0.0;
        _1784 = 0.0;
        _1785 = 0.0;
    }
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1472)) + _1472;
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1473)) + _1473;
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1474)) + _1474;
    float _1818 = fma(_1797, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1795 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1797, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1795 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1797, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1795));
    float _1839 = _1066 * 0.5;
    float _1840 = _1067 * 0.5;
    float _1841 = _1068 * 0.5;
    float _1842 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1845 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1848 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1882;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1855 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1459, _1463, _1466, _1469));
        float _1859 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1461, _1464, _1467, _1470));
        float _1863 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1462, _1465, _1468, _1471));
        float _1870 = dot(vec4(cbModelParam._m0[39u]), vec4(_1839, _1840, _1841, 1.0));
        _1882 = dot(vec3(isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1870) ? 0.0 : (isnan(0.0) ? _1870 : max(0.0, _1870))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1882 = 1.0;
    }
    float _1893;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1884 = dot(vec4(cbModelParam._m0[40u]), vec4(_1839, _1840, _1841, 1.0));
        _1893 = dot(vec3(isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1884) ? 0.0 : (isnan(0.0) ? _1884 : max(0.0, _1884))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1893 = 1.0;
    }
    float _1897 = (_1893 * cbModelParam._m0[1u].x) + (_1882 * (1.0 - cbModelParam._m0[1u].x));
    float _1907 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _884);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1907 : min(cbModelParam._m0[25u].z, _1907));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1956 = fma(_1130, cbModelParam._m0[13u].z, fma(_1126, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1122)) + cbModelParam._m0[13u].w;
        float _1960 = fma(_1130, cbModelParam._m0[14u].z, fma(_1126, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1122)) + cbModelParam._m0[14u].w;
        float _1964 = fma(_1130, cbModelParam._m0[15u].z, fma(_1126, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1122)) + cbModelParam._m0[15u].w;
        float _1967 = fma(_1068, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1066));
        float _1970 = fma(_1068, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1066));
        float _1973 = fma(_1068, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1066));
        float _2001;
        if (_1967 > 0.0)
        {
            _2001 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2001 = frontier_phi_17_15_ladder;
        }
        float _2173;
        if (_1970 > 0.0)
        {
            _2173 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2173 = frontier_phi_26_22_ladder;
        }
        float _2468;
        if (_1973 > 0.0)
        {
            _2468 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2468 = frontier_phi_38_33_ladder;
        }
        float _2470 = isnan(_2173) ? _2001 : (isnan(_2001) ? _2173 : min(_2001, _2173));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1967) + _1956;
        float _2476 = (_2471 * _1970) + _1960;
        float _2477 = (_2471 * _1973) + _1964;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2480 = (-1.0) - _2478;
        float _2482 = _2478 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2477 > _2482) || ((_2477 < _2480) || ((_2476 > _2482) || ((_2476 < _2480) || ((_2475 < _2480) || (_2475 > _2482))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2622 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2477, cbModelParam._m0[9u].z, fma(_2476, cbModelParam._m0[9u].y, _2475 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2477, cbModelParam._m0[10u].z, fma(_2476, cbModelParam._m0[10u].y, _2475 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2477, cbModelParam._m0[11u].z, fma(_2476, cbModelParam._m0[11u].y, _2475 * cbModelParam._m0[11u].x))), _1908);
            frontier_phi_16_38_ladder = _2622.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2622.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2622.x * cbModelParam._m0[1u].y;
        }
        _1989 = frontier_phi_16_38_ladder_2;
        _1991 = frontier_phi_16_38_ladder_1;
        _1993 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1977 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1066, _1067, _1068), _1908);
        _1989 = _1977.x * cbModelParam._m0[1u].y;
        _1991 = _1977.y * cbModelParam._m0[1u].y;
        _1993 = _1977.z * cbModelParam._m0[1u].y;
    }
    float _1997 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _884);
    float _1998 = isnan(_1997) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1997 : min(cbModelParam._m0[25u].w, _1997));
    float _2088;
    float _2090;
    float _2092;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2052 = fma(_1130, cbModelParam._m0[21u].z, fma(_1126, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1122)) + cbModelParam._m0[21u].w;
        float _2056 = fma(_1130, cbModelParam._m0[22u].z, fma(_1126, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1122)) + cbModelParam._m0[22u].w;
        float _2060 = fma(_1130, cbModelParam._m0[23u].z, fma(_1126, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1122)) + cbModelParam._m0[23u].w;
        float _2063 = fma(_1068, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1066));
        float _2066 = fma(_1068, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1066));
        float _2069 = fma(_1068, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1066));
        float _2178;
        if (_2063 > 0.0)
        {
            _2178 = abs((1.0 - _2052) / _2063);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2052 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2178 = frontier_phi_28_24_ladder;
        }
        float _2495;
        if (_2066 > 0.0)
        {
            _2495 = abs((1.0 - _2056) / _2066);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2056 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2495 = frontier_phi_40_35_ladder;
        }
        float _2833;
        if (_2069 > 0.0)
        {
            _2833 = abs((1.0 - _2060) / _2069);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2060 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2833 = frontier_phi_50_47_ladder;
        }
        float _2835 = isnan(_2495) ? _2178 : (isnan(_2178) ? _2495 : min(_2178, _2495));
        float _2836 = isnan(_2833) ? _2835 : (isnan(_2835) ? _2833 : min(_2835, _2833));
        float _2840 = (_2836 * _2063) + _2052;
        float _2841 = (_2836 * _2066) + _2056;
        float _2842 = (_2836 * _2069) + _2060;
        float _2843 = _2836 * 9.9999997473787516355514526367188e-05;
        float _2844 = (-1.0) - _2843;
        float _2846 = _2843 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2842 > _2846) || ((_2842 < _2844) || ((_2841 > _2846) || ((_2841 < _2844) || ((_2840 < _2844) || (_2840 > _2846))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2842, cbModelParam._m0[17u].z, fma(_2841, cbModelParam._m0[17u].y, _2840 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2842, cbModelParam._m0[18u].z, fma(_2841, cbModelParam._m0[18u].y, _2840 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2842, cbModelParam._m0[19u].z, fma(_2841, cbModelParam._m0[19u].y, _2840 * cbModelParam._m0[19u].x))), _1998);
            frontier_phi_25_50_ladder = _2964.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2964.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2964.x * cbModelParam._m0[1u].z;
        }
        _2088 = frontier_phi_25_50_ladder_2;
        _2090 = frontier_phi_25_50_ladder_1;
        _2092 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2072 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1066, _1067, _1068), _1998);
        _2088 = _2072.x * cbModelParam._m0[1u].z;
        _2090 = _2072.y * cbModelParam._m0[1u].z;
        _2092 = _2072.z * cbModelParam._m0[1u].z;
    }
    float _2105 = (((_1093 * _1042) + _1094) * _1058) * ((cbModelParam._m0[1u].w * (_2088 - _1989)) + _1989);
    float _2107 = (((_1093 * _1044) + _1094) * _1058) * ((cbModelParam._m0[1u].w * (_2090 - _1991)) + _1991);
    float _2109 = (((_1093 * _1045) + _1094) * _1058) * ((cbModelParam._m0[1u].w * (_2092 - _1993)) + _1993);
    float _2112 = fma(_2109, cbSceneParam._m0[89u].z, fma(_2107, cbSceneParam._m0[89u].y, _2105 * cbSceneParam._m0[89u].x));
    float _2115 = fma(_2109, cbSceneParam._m0[90u].z, fma(_2107, cbSceneParam._m0[90u].y, _2105 * cbSceneParam._m0[90u].x));
    float _2118 = fma(_2109, cbSceneParam._m0[91u].z, fma(_2107, cbSceneParam._m0[91u].y, _2105 * cbSceneParam._m0[91u].x));
    float _2152 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2156 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2160 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2164 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2165 = _2152 / _2164;
    float _2166 = _2156 / _2164;
    float _2167 = _2160 / _2164;
    float _2314;
    float _2315;
    float _2316;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2194 = ((uint(_2167 > cbSceneParam._m0[59u].y) + uint(_2167 > cbSceneParam._m0[59u].x)) + uint(_2167 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2195 = _2194 + 43u;
        uint _2203 = _2194 + 44u;
        uint _2211 = _2194 + 45u;
        uint _2219 = _2194 + 46u;
        float _2230 = fma(_2164, cbSceneParam._m0[_2195].w, fma(_2160, cbSceneParam._m0[_2195].z, fma(_2156, cbSceneParam._m0[_2195].y, _2152 * cbSceneParam._m0[_2195].x)));
        float _2234 = fma(_2164, cbSceneParam._m0[_2203].w, fma(_2160, cbSceneParam._m0[_2203].z, fma(_2156, cbSceneParam._m0[_2203].y, _2152 * cbSceneParam._m0[_2203].x)));
        float _2242 = fma(_2164, cbSceneParam._m0[_2219].w, fma(_2160, cbSceneParam._m0[_2219].z, fma(_2156, cbSceneParam._m0[_2219].y, _2152 * cbSceneParam._m0[_2219].x)));
        float _2247 = cbSceneParam._m0[33u].z * _2242;
        float _2249 = cbSceneParam._m0[33u].w * _2242;
        float _2252 = fma(_2164, cbSceneParam._m0[_2211].w, fma(_2160, cbSceneParam._m0[_2211].z, fma(_2156, cbSceneParam._m0[_2211].y, _2152 * cbSceneParam._m0[_2211].x))) / _2242;
        float _2300 = (cbSceneParam._m0[33u].x - sqrt(((_2166 * _2166) + (_2165 * _2165)) + (_2167 * _2167))) * cbSceneParam._m0[33u].y;
        float _4734 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2307 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2247 + _2230) / _2242, (_2249 + _2234) / _2242), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2249 + _2230) / _2242, (_2234 - _2247) / _2242), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2230 - _2247) / _2242, (_2234 - _2249) / _2242), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2230 - _2249) / _2242, (_2247 + _2234) / _2242), _2252), 0.0)).x), vec4(0.25)));
        _2314 = 1.0 - (_2307 * cbSceneParam._m0[34u].x);
        _2315 = 1.0 - (_2307 * cbSceneParam._m0[34u].y);
        _2316 = 1.0 - (_2307 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2314 = 1.0;
        _2315 = 1.0;
        _2316 = 1.0;
    }
    float _2380;
    float _2382;
    float _2384;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2368 = fma(_2164, cbSceneParam._m0[63u].w, fma(_2160, cbSceneParam._m0[63u].z, fma(_2156, cbSceneParam._m0[63u].y, _2152 * cbSceneParam._m0[63u].x)));
        float _2369 = fma(_2164, cbSceneParam._m0[60u].w, fma(_2160, cbSceneParam._m0[60u].z, fma(_2156, cbSceneParam._m0[60u].y, _2152 * cbSceneParam._m0[60u].x))) / _2368;
        float _2370 = fma(_2164, cbSceneParam._m0[61u].w, fma(_2160, cbSceneParam._m0[61u].z, fma(_2156, cbSceneParam._m0[61u].y, _2152 * cbSceneParam._m0[61u].x))) / _2368;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2369 >= cbSceneParam._m0[64u].x) && (_2370 >= cbSceneParam._m0[64u].y)) && (_2369 <= cbSceneParam._m0[64u].z)) && (_2370 <= cbSceneParam._m0[64u].w))
        {
            float _2508 = fma(_2164, cbSceneParam._m0[62u].w, fma(_2160, cbSceneParam._m0[62u].z, fma(_2156, cbSceneParam._m0[62u].y, _2152 * cbSceneParam._m0[62u].x))) / _2368;
            float _2512 = isnan(cbSceneParam._m0[41u].w) ? _2508 : (isnan(_2508) ? cbSceneParam._m0[41u].w : max(_2508, cbSceneParam._m0[41u].w));
            float _2555 = (cbSceneParam._m0[33u].x - sqrt(((_2166 * _2166) + (_2165 * _2165)) + (_2167 * _2167))) * cbSceneParam._m0[33u].y;
            float _4750 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
            float _2562 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2369, cbSceneParam._m0[33u].w + _2370), _2512), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2369, _2370 - cbSceneParam._m0[33u].z), _2512), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2369 - cbSceneParam._m0[33u].z, _2370 - cbSceneParam._m0[33u].w), _2512), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2369 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2370), _2512), 0.0)).x), vec4(0.25)));
            float _2566 = 1.0 - (_2562 * cbSceneParam._m0[34u].x);
            float _2567 = 1.0 - (_2562 * cbSceneParam._m0[34u].y);
            float _2568 = 1.0 - (_2562 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2568) ? _2316 : (isnan(_2316) ? _2568 : min(_2316, _2568));
            frontier_phi_37_36_ladder_1 = isnan(_2567) ? _2315 : (isnan(_2315) ? _2567 : min(_2315, _2567));
            frontier_phi_37_36_ladder_2 = isnan(_2566) ? _2314 : (isnan(_2314) ? _2566 : min(_2314, _2566));
        }
        else
        {
            frontier_phi_37_36_ladder = _2316;
            frontier_phi_37_36_ladder_1 = _2315;
            frontier_phi_37_36_ladder_2 = _2314;
        }
        _2380 = frontier_phi_37_36_ladder_2;
        _2382 = frontier_phi_37_36_ladder_1;
        _2384 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2380 = _2314;
        _2382 = _2315;
        _2384 = _2316;
    }
    uvec4 _2389 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2391 = _2389.x * 14u;
    uint _2392 = _2391 + 13u;
    float _2399 = _1058 + (-1.0);
    float _2404 = (cbLight._m0[_2392].x * _2399) + 1.0;
    float _2405 = (cbLight._m0[_2392].y * _2399) + 1.0;
    float _2406 = (cbLight._m0[_2392].z * _2399) + 1.0;
    float _2407 = (cbLight._m0[_2392].w * _2399) + 1.0;
    uint _2408 = _2391 + 5u;
    float _2414 = isnan(1.0) ? _2405 : (isnan(_2405) ? 1.0 : min(_2405, 1.0));
    uint _2418 = _2391 + 4u;
    float _2427 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
    uint _2431 = _2391 | 1u;
    float _2442 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_881, _882, _883));
    float _2445 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_881, _882, _883));
    float _4786 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _4797 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2450 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * 0.3183098733425140380859375;
    float _2452 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * 0.3183098733425140380859375;
    float _2459 = ((cbLight._m0[_2408].x * _2414) * _2452) + (((cbLight._m0[_2418].x * _2380) * _2427) * _2450);
    float _2460 = ((_2414 * cbLight._m0[_2408].y) * _2452) + (((cbLight._m0[_2418].y * _2382) * _2427) * _2450);
    float _2461 = ((_2414 * cbLight._m0[_2408].z) * _2452) + (((cbLight._m0[_2418].z * _2384) * _2427) * _2450);
    uvec4 _2465 = floatBitsToUint(cbLight._m0[_2391 + 12u]);
    bool _2467 = _2465.x == 0u;
    float _2569;
    float _2571;
    float _2573;
    if (_2467)
    {
        _2569 = _2459;
        _2571 = _2460;
        _2573 = _2461;
    }
    else
    {
        uint _2577 = _2391 + 6u;
        float _2593 = (dot(vec3(cbLight._m0[_2391 + 2u].xyz), vec3(_881, _882, _883)) * 0.5) + 0.5;
        float _2594 = _2593 * _2593;
        float _4808 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2595 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2596 = isnan(1.0) ? _2406 : (isnan(_2406) ? 1.0 : min(_2406, 1.0));
        _2569 = (((cbLight._m0[_2577].x * 0.3183098733425140380859375) * _2595) * _2596) + _2459;
        _2571 = (((cbLight._m0[_2577].y * 0.3183098733425140380859375) * _2595) * _2596) + _2460;
        _2573 = (((cbLight._m0[_2577].z * 0.3183098733425140380859375) * _2595) * _2596) + _2461;
    }
    bool _2576 = _2465.y == 0u;
    float _2631;
    float _2633;
    float _2635;
    if (_2576)
    {
        _2631 = _2569;
        _2633 = _2571;
        _2635 = _2573;
    }
    else
    {
        uint _2804 = _2391 + 7u;
        float _2820 = (dot(vec3(cbLight._m0[_2391 + 3u].xyz), vec3(_881, _882, _883)) * 0.5) + 0.5;
        float _2821 = _2820 * _2820;
        float _4824 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2822 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2823 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
        _2631 = (((cbLight._m0[_2804].x * 0.3183098733425140380859375) * _2822) * _2823) + _2569;
        _2633 = (((cbLight._m0[_2804].y * 0.3183098733425140380859375) * _2822) * _2823) + _2571;
        _2635 = (((cbLight._m0[_2804].z * 0.3183098733425140380859375) * _2822) * _2823) + _2573;
    }
    uint _2638 = _2391 + 8u;
    float _2651 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _884) * 0.949999988079071044921875);
    float _2652 = _2651 * _2651;
    float _2653 = cbLight._m0[_2391].x + _960;
    float _2654 = cbLight._m0[_2391].y + _961;
    float _2655 = cbLight._m0[_2391].z + _962;
    float _2659 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
    float _2660 = _2659 * _2653;
    float _2661 = _2659 * _2654;
    float _2662 = _2659 * _2655;
    float _2663 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2391].xyz));
    float _4840 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2666 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
    float _4851 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _2667 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
    float _2668 = dot(vec3(_881, _882, _883), vec3(_2660, _2661, _2662));
    float _4862 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
    float _2672 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2660, _2661, _2662));
    float _4873 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2676 = _2652 * _2652;
    float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
    float _2688 = exp2(log2(1.0 - (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) * 5.0);
    float _2689 = 0.959999978542327880859375 - _1039;
    float _2691 = 0.959999978542327880859375 - _1040;
    float _2692 = 0.959999978542327880859375 - _1041;
    float _2699 = 1.0 - _2652;
    float _2710 = (0.5 / (((_2667 * ((_2666 * _2699) + _2652)) + 9.9999999392252902907785028219223e-09) + (((_2667 * _2699) + _2652) * _2666))) * _2666;
    float _4884 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2712 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
    uint _2726 = _2391 + 9u;
    float _2737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2431].w)) * _884) * 0.949999988079071044921875);
    float _2738 = _2737 * _2737;
    float _2739 = cbLight._m0[_2431].x + _960;
    float _2740 = cbLight._m0[_2431].y + _961;
    float _2741 = cbLight._m0[_2431].z + _962;
    float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
    float _2746 = _2745 * _2739;
    float _2747 = _2745 * _2740;
    float _2748 = _2745 * _2741;
    float _2749 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2431].xyz));
    float _4895 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2752 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
    float _2753 = dot(vec3(_881, _882, _883), vec3(_2746, _2747, _2748));
    float _4906 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2756 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
    float _2757 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_2746, _2747, _2748));
    float _4917 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2761 = _2738 * _2738;
    float _2765 = ((_2756 * _2756) * (_2761 + (-1.0))) + 1.0;
    float _2772 = exp2(log2(1.0 - (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) * 5.0);
    float _2779 = 1.0 - _2738;
    float _2789 = (0.5 / (((_2667 * ((_2752 * _2779) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2667 * _2779) + _2738) * _2752))) * _2752;
    float _4928 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
    float _2791 = (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2761 / ((_2765 * _2765) * 3.141590118408203125));
    float _2801 = (((((_2772 * _2689) + _1042) * cbLight._m0[_2726].x) * _2791) * _2414) + ((((cbLight._m0[_2638].x * _2380) * ((_2688 * _2689) + _1042)) * _2712) * _2427);
    float _2802 = (((((_2772 * _2691) + _1044) * cbLight._m0[_2726].y) * _2791) * _2414) + ((((cbLight._m0[_2638].y * _2382) * ((_2688 * _2691) + _1044)) * _2712) * _2427);
    float _2803 = (((((_2772 * _2692) + _1045) * cbLight._m0[_2726].z) * _2791) * _2414) + ((((cbLight._m0[_2638].z * _2384) * ((_2688 * _2692) + _1045)) * _2712) * _2427);
    float _2859;
    float _2861;
    float _2863;
    if (_2467)
    {
        _2859 = _2801;
        _2861 = _2802;
        _2863 = _2803;
    }
    else
    {
        uint _2865 = _2391 + 2u;
        uint _2869 = _2391 + 10u;
        float _2883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2865].w)) * _884) * 0.949999988079071044921875);
        float _2884 = _2883 * _2883;
        float _2885 = cbLight._m0[_2865].x + _960;
        float _2886 = cbLight._m0[_2865].y + _961;
        float _2887 = cbLight._m0[_2865].z + _962;
        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
        float _2892 = _2891 * _2885;
        float _2893 = _2891 * _2886;
        float _2894 = _2891 * _2887;
        float _2895 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2865].xyz));
        float _4939 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2898 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
        float _2899 = dot(vec3(_881, _882, _883), vec3(_2892, _2893, _2894));
        float _4950 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2902 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
        float _2903 = dot(vec3(cbLight._m0[_2865].xyz), vec3(_2892, _2893, _2894));
        float _4961 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2907 = _2884 * _2884;
        float _2911 = ((_2902 * _2902) * (_2907 + (-1.0))) + 1.0;
        float _2918 = exp2(log2(1.0 - (isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0)))) * 5.0);
        float _2925 = 1.0 - _2884;
        float _2935 = (0.5 / (((_2667 * ((_2898 * _2925) + _2884)) + 9.9999999392252902907785028219223e-09) + (((_2667 * _2925) + _2884) * _2898))) * _2898;
        float _4972 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2937 = (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_2907 / ((_2911 * _2911) * 3.141590118408203125));
        float _2938 = isnan(1.0) ? _2406 : (isnan(_2406) ? 1.0 : min(_2406, 1.0));
        _2859 = (((((_2918 * _2689) + _1042) * cbLight._m0[_2869].x) * _2937) * _2938) + _2801;
        _2861 = (((((_2918 * _2691) + _1044) * cbLight._m0[_2869].y) * _2937) * _2938) + _2802;
        _2863 = (((((_2918 * _2692) + _1045) * cbLight._m0[_2869].z) * _2937) * _2938) + _2803;
    }
    float _2969;
    float _2971;
    float _2973;
    if (_2576)
    {
        _2969 = _2859;
        _2971 = _2861;
        _2973 = _2863;
    }
    else
    {
        uint _2980 = _2391 + 3u;
        uint _2984 = _2391 + 11u;
        float _2998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2980].w)) * _884) * 0.949999988079071044921875);
        float _2999 = _2998 * _2998;
        float _3000 = cbLight._m0[_2980].x + _960;
        float _3001 = cbLight._m0[_2980].y + _961;
        float _3002 = cbLight._m0[_2980].z + _962;
        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
        float _3007 = _3006 * _3000;
        float _3008 = _3006 * _3001;
        float _3009 = _3006 * _3002;
        float _3010 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2980].xyz));
        float _4988 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3013 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
        float _3014 = dot(vec3(_881, _882, _883), vec3(_3007, _3008, _3009));
        float _4999 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3017 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
        float _3018 = dot(vec3(cbLight._m0[_2980].xyz), vec3(_3007, _3008, _3009));
        float _5010 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3022 = _2999 * _2999;
        float _3026 = ((_3017 * _3017) * (_3022 + (-1.0))) + 1.0;
        float _3033 = exp2(log2(1.0 - (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0)))) * 5.0);
        float _3040 = 1.0 - _2999;
        float _3050 = (0.5 / (((_2667 * ((_3013 * _3040) + _2999)) + 9.9999999392252902907785028219223e-09) + (((_2667 * _3040) + _2999) * _3013))) * _3013;
        float _5021 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
        float _3052 = (isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_3022 / ((_3026 * _3026) * 3.141590118408203125));
        float _3053 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
        _2969 = (((((_3033 * _2689) + _1042) * cbLight._m0[_2984].x) * _3052) * _3053) + _2859;
        _2971 = (((((_3033 * _2691) + _1044) * cbLight._m0[_2984].y) * _3052) * _3053) + _2861;
        _2973 = (((((_3033 * _2692) + _1045) * cbLight._m0[_2984].z) * _3052) * _3053) + _2863;
    }
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    float _3129;
    if (_2389.y == 0u)
    {
        uvec4 _3074 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3075 = _3074.x;
        uint _3086 = uint((float(_3074.y) * floor(float(uint(cbSceneParam._m0[85u].y * _981) / _3075))) + floor(float(uint(cbSceneParam._m0[85u].x * _980) / _3075)));
        float _3096 = (log2(_2167 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3097 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
        uint _3100 = uint(isnan(14.0) ? _3097 : (isnan(_3097) ? 14.0 : min(_3097, 14.0)));
        uvec4 _3105 = texelFetch(g_lightClusterGridBuffer, int(((_3100 << 2u) + (_3086 << 6u)) >> 2u));
        uint _3106 = _3105.x;
        uint _3107 = _3074.z;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        if (((((1u << ((_3107 >> 4u) & 15u)) + 4294967295u) & _3106) == 0u) || ((_3107 & 240u) == 0u))
        {
            _3186 = 0.0;
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
            _3194 = 0.0;
            _3196 = 0.0;
        }
        else
        {
            float _3187;
            float _3189;
            float _3191;
            float _3193;
            float _3195;
            float _3197;
            float _3338 = 0.0;
            float _3339 = 0.0;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            uint _3344 = 0u;
            uint _3353;
            bool _3354;
            for (;;)
            {
                _3353 = texelFetch(g_lightClassification, int((((_3100 << 5u) + (_3086 << 9u)) + (_3344 << 2u)) >> 2u)).x;
                _3354 = _3353 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3354)
                {
                    frontier_phi_71_pred = _3343;
                    frontier_phi_71_pred_1 = _3342;
                    frontier_phi_71_pred_2 = _3341;
                    frontier_phi_71_pred_3 = _3340;
                    frontier_phi_71_pred_4 = _3339;
                    frontier_phi_71_pred_5 = _3338;
                }
                else
                {
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    uint _3489;
                    _3483 = _3338;
                    _3484 = _3339;
                    _3485 = _3340;
                    _3486 = _3341;
                    _3487 = _3342;
                    _3488 = _3343;
                    _3489 = _3353;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    for (;;)
                    {
                        uint _3493 = uint(findLSB(_3489)) + (_3344 << 5u);
                        uint _3490 = (_3489 + 4294967295u) & _3489;
                        uint _3495 = _3493 * 48u;
                        vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3495)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 3u)).x));
                        uint _3515 = (_3493 * 48u) + 4u;
                        vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3515)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 3u)).x));
                        uint _3534 = (_3493 * 48u) + 8u;
                        vec3 _3545 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3534)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 2u)).x));
                        float _3549 = _3509.x - _2165;
                        float _3550 = _3509.y - _2166;
                        float _3551 = _3509.z - _2167;
                        float _3552 = dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551));
                        float _3555 = inversesqrt(_3552);
                        float _3556 = _3555 * _3549;
                        float _3557 = _3555 * _3550;
                        float _3558 = _3555 * _3551;
                        float _3559 = dot(vec3(_999, _1002, _1005), vec3(_3556, _3557, _3558));
                        float _3564 = 1.0 - (_3552 * _3509.w);
                        float _5047 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3565 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                        float _3566 = sqrt(_3552) * _3528.w;
                        float _3569 = 1.39999997615814208984375 / (_3566 + 1.39999997615814208984375);
                        float _3570 = _3569 * _3569;
                        float _3573 = ((1.0 - _3570) * _3559) + _3570;
                        float _3576 = _3566 * _3566;
                        float _3580 = ((isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0))) * _3565) / ((_3576 * 0.699999988079071044921875) + 1.0);
                        float _3584 = (-0.0) - _2165;
                        float _3585 = (-0.0) - _2166;
                        float _3586 = (-0.0) - _2167;
                        float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                        float _3591 = _3590 * _3584;
                        float _3592 = _3590 * _3585;
                        float _3593 = _3590 * _3586;
                        float _3600 = exp2(log2(1.0 / ((_3576 * 3.5) + 5.0)) * 0.25);
                        float _3601 = 1.0 - _1074;
                        float _3608 = sqrt(1.0 - ((1.0 - (_3601 * _3601)) * (1.0 - (_3600 * _3600))));
                        float _3609 = _3608 * _3608;
                        float _3610 = _3609 * _3609;
                        float _3611 = _3591 + _3556;
                        float _3612 = _3592 + _3557;
                        float _3613 = _3593 + _3558;
                        float _3617 = inversesqrt(dot(vec3(_3611, _3612, _3613), vec3(_3611, _3612, _3613)));
                        float _3621 = dot(vec3(_999, _1002, _1005), vec3(_3591, _3592, _3593));
                        float _5063 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                        float _3624 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                        float _3625 = dot(vec3(_999, _1002, _1005), vec3(_3617 * _3611, _3617 * _3612, _3617 * _3613));
                        float _5074 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                        float _3628 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                        float _3632 = ((_3628 * _3628) * (_3610 + (-1.0))) + 1.0;
                        float _3633 = _3569 * _3609;
                        float _3634 = _3633 * _3633;
                        float _3637 = ((1.0 - _3634) * _3559) + _3634;
                        float _5085 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                        float _3638 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
                        float _3639 = 1.0 - _3609;
                        float _3649 = (0.5 / (((_3638 * ((_3624 * _3639) + _3609)) + 9.9999999392252902907785028219223e-09) + (((_3638 * _3639) + _3609) * _3624))) * _3638;
                        float _5096 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                        float _3660 = (((_3610 * 3.1415927410125732421875) * (isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0)))) / ((_3632 * _3632) * ((_3576 * 2.1991131305694580078125) + 3.141590118408203125))) * _3565;
                        _3413 = (_3580 * _3528.x) + _3486;
                        _3414 = (_3580 * _3528.y) + _3487;
                        _3415 = (_3580 * _3528.z) + _3488;
                        _3410 = (_3660 * _3545.x) + _3483;
                        _3411 = (_3660 * _3545.y) + _3484;
                        _3412 = (_3660 * _3545.z) + _3485;
                        if (_3490 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3483 = _3410;
                            _3484 = _3411;
                            _3485 = _3412;
                            _3486 = _3413;
                            _3487 = _3414;
                            _3488 = _3415;
                            _3489 = _3490;
                        }
                    }
                    frontier_phi_71_pred = _3415;
                    frontier_phi_71_pred_1 = _3414;
                    frontier_phi_71_pred_2 = _3413;
                    frontier_phi_71_pred_3 = _3412;
                    frontier_phi_71_pred_4 = _3411;
                    frontier_phi_71_pred_5 = _3410;
                }
                _3197 = frontier_phi_71_pred;
                _3195 = frontier_phi_71_pred_1;
                _3193 = frontier_phi_71_pred_2;
                _3191 = frontier_phi_71_pred_3;
                _3189 = frontier_phi_71_pred_4;
                _3187 = frontier_phi_71_pred_5;
                uint _3345 = _3344 + 1u;
                if (_3345 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3338 = _3187;
                    _3339 = _3189;
                    _3340 = _3191;
                    _3341 = _3193;
                    _3342 = _3195;
                    _3343 = _3197;
                    _3344 = _3345;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3186 = _3187;
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
            _3194 = _3195;
            _3196 = _3197;
        }
        uvec4 _3200 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3201 = _3200.z;
        uint _3203 = (_3201 >> 8u) & 15u;
        float _3306;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        float _3316;
        if (((4294967295u << _3203) & _3106) == 0u)
        {
            _3306 = _3186;
            _3308 = _3188;
            _3310 = _3190;
            _3312 = _3192;
            _3314 = _3194;
            _3316 = _3196;
        }
        else
        {
            float _3331 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
            float _3332 = _3331 * _2165;
            float _3333 = _3331 * _2166;
            float _3334 = _3331 * _2167;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3203 < ((_3201 >> 12u) & 15u))
            {
                float _3307;
                float _3309;
                float _3311;
                float _3313;
                float _3315;
                float _3317;
                float _3466 = _3186;
                float _3467 = _3188;
                float _3468 = _3190;
                float _3469 = _3192;
                float _3470 = _3194;
                float _3471 = _3196;
                uint _3472 = _3203;
                uint _3481;
                bool _3482;
                for (;;)
                {
                    _3481 = texelFetch(g_lightClassification, int((((_3100 << 5u) + (_3086 << 9u)) + (_3472 << 2u)) >> 2u)).x;
                    _3482 = _3481 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3482)
                    {
                        frontier_phi_82_pred = _3471;
                        frontier_phi_82_pred_1 = _3470;
                        frontier_phi_82_pred_2 = _3469;
                        frontier_phi_82_pred_3 = _3468;
                        frontier_phi_82_pred_4 = _3467;
                        frontier_phi_82_pred_5 = _3466;
                    }
                    else
                    {
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3967;
                        float _3968;
                        float _3969;
                        float _3970;
                        float _3971;
                        float _3972;
                        float _3687 = _3466;
                        float _3688 = _3467;
                        float _3689 = _3468;
                        float _3690 = _3469;
                        float _3691 = _3470;
                        float _3692 = _3471;
                        uint _3693 = _3481;
                        uint _3694;
                        vec4 _3719;
                        float _3720;
                        vec4 _3735;
                        vec3 _3747;
                        vec4 _3762;
                        vec4 _3777;
                        float _3823;
                        bool _3824;
                        for (;;)
                        {
                            uint _3704 = ((_3472 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3693));
                            _3694 = (_3693 + 4294967295u) & _3693;
                            uint _3706 = _3704 * 40u;
                            _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            _3720 = _3719.w;
                            uint _3722 = (_3704 * 40u) + 4u;
                            _3735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 3u)).x));
                            uint _3737 = (_3704 * 40u) + 8u;
                            _3747 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 2u)).x));
                            uint _3749 = (_3704 * 40u) + 16u;
                            _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            uint _3764 = (_3704 * 40u) + 20u;
                            _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            uint _3779 = (_3704 * 40u) + 24u;
                            vec4 _3792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 3u)).x));
                            uint _3798 = (_3704 * 40u) + 28u;
                            vec4 _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            _3823 = fma(_2167, _3811.z, fma(_2166, _3811.y, _3811.x * _2165)) + _3811.w;
                            _3824 = !((fma(_2167, _3792.z, fma(_2166, _3792.y, _3792.x * _2165)) + _3792.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3824)
                            {
                                float _3851 = _3719.x - _2165;
                                float _3852 = _3719.y - _2166;
                                float _3853 = _3719.z - _2167;
                                float _3854 = dot(vec3(_3851, _3852, _3853), vec3(_3851, _3852, _3853));
                                float _3857 = inversesqrt(_3854);
                                float _3858 = _3857 * _3851;
                                float _3859 = _3857 * _3852;
                                float _3860 = _3857 * _3853;
                                float _3864 = 1.0 - (_3854 / (_3720 * _3720));
                                float _5107 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3865 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                                float _3869 = sqrt(_3854) * _3735.w;
                                float _3871 = 1.39999997615814208984375 / (_3869 + 1.39999997615814208984375);
                                float _3872 = _3871 * _3871;
                                float _3875 = ((1.0 - _3872) * dot(vec3(_3858, _3859, _3860), vec3(_999, _1002, _1005))) + _3872;
                                float _3878 = _3869 * _3869;
                                float _3882 = (fma(_2167, _3762.z, fma(_2166, _3762.y, _3762.x * _2165)) + _3762.w) / _3823;
                                float _3883 = (fma(_2167, _3777.z, fma(_2166, _3777.y, _3777.x * _2165)) + _3777.w) / _3823;
                                float _3887 = 1.0 - dot(vec2(_3882, _3883), vec2(_3882, _3883));
                                float _5123 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3888 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
                                float _3889 = _3888 * (((isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0))) * _3865) / ((_3878 * 0.699999988079071044921875) + 1.0));
                                float _3901 = exp2(log2(1.0 / ((_3878 * 3.5) + 5.0)) * 0.25);
                                float _3902 = 1.0 - _1074;
                                float _3909 = sqrt(1.0 - ((1.0 - (_3902 * _3902)) * (1.0 - (_3901 * _3901))));
                                float _3910 = _3909 * _3909;
                                float _3911 = _3910 * _3910;
                                float _3912 = _3858 - _3332;
                                float _3913 = _3859 - _3333;
                                float _3914 = _3860 - _3334;
                                float _3918 = inversesqrt(dot(vec3(_3912, _3913, _3914), vec3(_3912, _3913, _3914)));
                                float _3922 = dot(vec3(_999, _1002, _1005), vec3((-0.0) - _3332, (-0.0) - _3333, (-0.0) - _3334));
                                float _5134 = isnan(0.0) ? _3922 : (isnan(_3922) ? 0.0 : max(_3922, 0.0));
                                float _3925 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
                                float _3926 = dot(vec3(_999, _1002, _1005), vec3(_3918 * _3912, _3918 * _3913, _3918 * _3914));
                                float _5145 = isnan(0.0) ? _3926 : (isnan(_3926) ? 0.0 : max(_3926, 0.0));
                                float _3929 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
                                float _3933 = ((_3929 * _3929) * (_3911 + (-1.0))) + 1.0;
                                float _3934 = _3871 * _3910;
                                float _3935 = _3934 * _3934;
                                float _3941 = ((1.0 - _3935) * dot(vec3(_999, _1002, _1005), vec3(_3858, _3859, _3860))) + _3935;
                                float _5156 = isnan(0.0) ? _3941 : (isnan(_3941) ? 0.0 : max(_3941, 0.0));
                                float _3942 = isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0));
                                float _3943 = 1.0 - _3910;
                                float _3953 = (0.5 / (((_3942 * ((_3925 * _3943) + _3910)) + 9.9999999392252902907785028219223e-09) + (((_3942 * _3943) + _3910) * _3925))) * _3942;
                                float _5167 = isnan(0.0) ? _3953 : (isnan(_3953) ? 0.0 : max(_3953, 0.0));
                                float _3963 = (_3888 * _3865) * (((_3911 * 3.1415927410125732421875) * (isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0)))) / ((_3933 * _3933) * ((_3878 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3889 * _3735.z;
                                frontier_phi_88_pred_1 = _3889 * _3735.y;
                                frontier_phi_88_pred_2 = _3889 * _3735.x;
                                frontier_phi_88_pred_3 = _3963 * _3747.z;
                                frontier_phi_88_pred_4 = _3963 * _3747.y;
                                frontier_phi_88_pred_5 = _3963 * _3747.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3972 = frontier_phi_88_pred;
                            _3971 = frontier_phi_88_pred_1;
                            _3970 = frontier_phi_88_pred_2;
                            _3969 = frontier_phi_88_pred_3;
                            _3968 = frontier_phi_88_pred_4;
                            _3967 = frontier_phi_88_pred_5;
                            _3677 = _3970 + _3690;
                            _3678 = _3971 + _3691;
                            _3679 = _3972 + _3692;
                            _3674 = _3967 + _3687;
                            _3675 = _3968 + _3688;
                            _3676 = _3969 + _3689;
                            if (_3694 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3687 = _3674;
                                _3688 = _3675;
                                _3689 = _3676;
                                _3690 = _3677;
                                _3691 = _3678;
                                _3692 = _3679;
                                _3693 = _3694;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3679;
                        frontier_phi_82_pred_1 = _3678;
                        frontier_phi_82_pred_2 = _3677;
                        frontier_phi_82_pred_3 = _3676;
                        frontier_phi_82_pred_4 = _3675;
                        frontier_phi_82_pred_5 = _3674;
                    }
                    _3317 = frontier_phi_82_pred;
                    _3315 = frontier_phi_82_pred_1;
                    _3313 = frontier_phi_82_pred_2;
                    _3311 = frontier_phi_82_pred_3;
                    _3309 = frontier_phi_82_pred_4;
                    _3307 = frontier_phi_82_pred_5;
                    uint _3473 = _3472 + 1u;
                    if (_3473 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3466 = _3307;
                        _3467 = _3309;
                        _3468 = _3311;
                        _3469 = _3313;
                        _3470 = _3315;
                        _3471 = _3317;
                        _3472 = _3473;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3313;
                frontier_phi_63_64_ladder_1 = _3317;
                frontier_phi_63_64_ladder_2 = _3315;
                frontier_phi_63_64_ladder_3 = _3311;
                frontier_phi_63_64_ladder_4 = _3309;
                frontier_phi_63_64_ladder_5 = _3307;
            }
            else
            {
                frontier_phi_63_64_ladder = _3192;
                frontier_phi_63_64_ladder_1 = _3196;
                frontier_phi_63_64_ladder_2 = _3194;
                frontier_phi_63_64_ladder_3 = _3190;
                frontier_phi_63_64_ladder_4 = _3188;
                frontier_phi_63_64_ladder_5 = _3186;
            }
            _3306 = frontier_phi_63_64_ladder_5;
            _3308 = frontier_phi_63_64_ladder_4;
            _3310 = frontier_phi_63_64_ladder_3;
            _3312 = frontier_phi_63_64_ladder;
            _3314 = frontier_phi_63_64_ladder_2;
            _3316 = frontier_phi_63_64_ladder_1;
        }
        float _3321 = isnan(1.0) ? _1058 : (isnan(_1058) ? 1.0 : min(_1058, 1.0));
        _3119 = (_3321 * _3312) + _2631;
        _3121 = (_3321 * _3314) + _2633;
        _3123 = (_3321 * _3316) + _2635;
        _3125 = ((_3306 * _1042) * _3321) + _2969;
        _3127 = ((_3308 * _1044) * _3321) + _2971;
        _3129 = ((_3310 * _1045) * _3321) + _2973;
    }
    else
    {
        _3119 = _2631;
        _3121 = _2633;
        _3123 = _2635;
        _3125 = _2969;
        _3127 = _2971;
        _3129 = _2973;
    }
    float _5183 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _5194 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _5205 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _3146 = ((isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0))) * (_3119 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1058))) + ((_3125 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1897)) * cbPerFrame._m0[3u].x);
    float _3147 = ((isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0))) * (_3121 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1058))) + ((_3127 + ((isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0))) * _1897)) * cbPerFrame._m0[3u].x);
    float _3148 = ((isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0))) * (_3123 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1058))) + ((_3129 + ((isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0))) * _1897)) * cbPerFrame._m0[3u].x);
    uint _3149 = _285 + 6u;
    float _3157 = _980 / cbSceneParam._m0[86u].x;
    float _3158 = _981 / cbSceneParam._m0[86u].y;
    vec4 _3172 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3157, _3158, (log2((isnan(cbSceneParam._m0[77u].w) ? _903 : (isnan(_903) ? cbSceneParam._m0[77u].w : min(_903, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3174 = _3172.x;
    float _3175 = _3172.y;
    float _3176 = _3172.z;
    float _3177 = _3172.w;
    float _3248;
    float _3250;
    float _3252;
    float _3254;
    if (_903 > cbSceneParam._m0[78u].w)
    {
        float _3211 = isnan(_903) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _903 : min(cbSceneParam._m0[80u].w, _903));
        float _3212 = _3211 / _903;
        float _3223 = _3212 * _953;
        float _3224 = _954 * _3212;
        float _3225 = (-0.0) - _3224;
        float _3226 = _3212 * _955;
        float _3228 = (cbSceneParam._m0[77u].w * _3225) / _3211;
        float _3229 = _3228 + cbSceneParam._m0[79u].w;
        float _3230 = cbSceneParam._m0[79u].w - _3224;
        float _3236 = sqrt(((_3223 * _3223) + (_3224 * _3224)) + (_3226 * _3226));
        float _3239 = (1.0 - (cbSceneParam._m0[77u].w / _3211)) * _3236;
        float _3244 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3246 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3423;
        if (abs((_3225 - _3228) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3423 = ((((_3229 > 0.0) ? exp2(_3244 * _3229) : (2.0 - exp2(_3246 * _3229))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3239;
        }
        else
        {
            float _3367 = 1.0 / cbSceneParam._m0[80u].x;
            float _3368 = isnan(_3230) ? _3229 : (isnan(_3229) ? _3230 : max(_3229, _3230));
            float _3369 = isnan(_3230) ? _3229 : (isnan(_3229) ? _3230 : min(_3229, _3230));
            float _3378 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : min(_3368, 0.0));
            float _3379 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : min(_3369, 0.0));
            _3423 = ((abs(_3236 / _3225) * cbSceneParam._m0[80u].y) * ((((_3378 - _3379) * 2.0) - ((exp2(_3244 * (isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0)))) - exp2(_3244 * (isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))))) * _3367)) - ((exp2(_3246 * _3378) - exp2(_3246 * _3379)) * _3367))) + (_3239 * cbSceneParam._m0[80u].z);
        }
        vec4 _3425 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3157, _3158, 1.0), 0.0);
        float _3434 = exp2((_3423 * (-1.44269502162933349609375)) * (1.0 - _3425.w));
        float _3435 = log2(_3434);
        float _3451 = log2(_3177);
        _3248 = (exp2(_3451 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].x)) * _3425.x) / cbSceneParam._m0[78u].x)) + _3174;
        _3250 = (exp2(_3451 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].y)) * _3425.y) / cbSceneParam._m0[78u].y)) + _3175;
        _3252 = (exp2(_3451 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].z)) * _3425.z) / cbSceneParam._m0[78u].z)) + _3176;
        _3254 = _3434 * _3177;
    }
    else
    {
        _3248 = _3174;
        _3250 = _3175;
        _3252 = _3176;
        _3254 = _3177;
    }
    bool _3461;
    vec4 _3264;
    vec4 _3286;
    float _3288;
    float _3292;
    float _3293;
    float _3294;
    float _3295;
    bool _3305;
    for (;;)
    {
        _3264 = cbMatDynParam._m0[0u];
        float _3266 = roundEven(_3264.y);
        bool _3267 = _3266 == 3.0;
        float _3268 = log2(_3254);
        float _3275 = exp2(_3268 * cbSceneParam._m0[78u].x) * _3146;
        float _3276 = exp2(_3268 * cbSceneParam._m0[78u].y) * _3147;
        float _3277 = exp2(_3268 * cbSceneParam._m0[78u].z) * _3148;
        float _3284 = _969 + (-0.5);
        _3286 = cbMtdParam._m0[1u];
        _3288 = _3286.y * _3284;
        float _3291 = (_3266 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3292 = _3291 * (_3267 ? _3275 : (_3275 + (cbSceneParam._m0[72u].w * _3248)));
        _3293 = _3291 * (_3267 ? _3276 : (_3276 + (cbSceneParam._m0[72u].w * _3250)));
        _3294 = _3291 * (_3267 ? _3277 : (_3277 + (cbSceneParam._m0[72u].w * _3252)));
        _3295 = _3284 * 0.999000012874603271484375;
        _3305 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3305)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3295) < 0.5)
            {
                _3461 = true;
                break;
            }
        }
        uint _3402 = _1018 + uint(_3264.w);
        if ((cbInstanceData._m0[_3402].w < 1.0) && ((cbInstanceData._m0[_3402].w + _3295) < 0.5))
        {
            _3461 = true;
            break;
        }
        if ((_3288 + 1.0) < _3286.x)
        {
            _3461 = true;
            break;
        }
        _3461 = false;
        break;
    }
    float _3665;
    if (_3461)
    {
        discard_state = true;
        _3665 = 0.0;
    }
    else
    {
        _3665 = cbInstanceData._m0[_3149].w;
    }
    SV_Target.x = _3292;
    SV_Target.y = _3293;
    SV_Target.z = _3294;
    SV_Target.w = _3665;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3149].w;
    discard_exit();
}


