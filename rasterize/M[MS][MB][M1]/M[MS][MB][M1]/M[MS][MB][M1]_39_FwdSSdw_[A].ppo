#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1043;
float _3450;
float _3451;
float _3452;
float _3453;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _248) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _249) + cbTextureTilingScale._m0[14u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _319 = _315.z;
    float _324 = (_315.x * 2.0) + (-1.0);
    float _326 = (_315.y * 2.0) + (-1.0);
    float _327 = dot(vec2(_324, _326), vec2(_324, _326));
    float _3462 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _333 = sqrt(1.0 - (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _352 = _350.x;
    float _353 = 1.0 - _352;
    float _369 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_352 - _353) * cbMtdParam._m0[24u].z) + _353) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3473 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _377 = (_370 * ((_295.x * cbMtdParam._m0[18u].x) - _274)) + _274;
    float _378 = (_370 * ((_295.y * cbMtdParam._m0[18u].y) - _275)) + _275;
    float _379 = (_370 * ((_295.z * cbMtdParam._m0[18u].z) - _276)) + _276;
    vec4 _392 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _394 = _392.x;
    float _396 = _394 - (_394 * _370);
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _416 = (_409.x * 2.0) + (-1.0);
    float _417 = (_409.y * 2.0) + (-1.0);
    float _418 = dot(vec2(_416, _417), vec2(_416, _417));
    float _3484 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _426 = (_370 * (_409.z - _319)) + _319;
    float _438 = (((_416 - _324) + (cbMtdParam._m0[21u].x * _324)) * _370) + _324;
    float _439 = (((_417 - _326) + (cbMtdParam._m0[21u].x * _326)) * _370) + _326;
    float _440 = (_370 * (sqrt(1.0 - (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) - _333)) + _333;
    float _445 = cbMtdParam._m0[22u].x + _315.w;
    float _448 = fma(_440, _215 * NORMAL.x, fma(_439, _222 * TANGENT.x, (_208 * _200) * _438));
    float _451 = fma(_440, _215 * NORMAL.y, fma(_439, _222 * TANGENT.y, (_208 * _201) * _438));
    float _454 = fma(_440, _215 * NORMAL.z, fma(_439, _222 * TANGENT.z, (_208 * _202) * _438));
    float _458 = inversesqrt(dot(vec3(_448, _451, _454), vec3(_448, _451, _454)));
    float _459 = _458 * _448;
    float _460 = _458 * _451;
    float _461 = _458 * _454;
    float _3495 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _462 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3517 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3528 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3539 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3550 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _467 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _481 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _532 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _522);
    float _533 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _522);
    float _534 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _522);
    float _538 = inversesqrt(dot(vec3(_532, _533, _534), vec3(_532, _533, _534)));
    float _539 = _532 * _538;
    float _540 = _533 * _538;
    float _541 = _534 * _538;
    vec4 _546 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _548 = _546.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _723 = sqrt(((_532 * _532) + (_533 * _533)) + (_534 * _534));
        float _729 = (cbMatDynParam._m0[5u].x * _723) + cbMatDynParam._m0[5u].y;
        float _3561 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _734 = (cbMatDynParam._m0[5u].z * _723) + cbMatDynParam._m0[5u].w;
        float _3572 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) - _730)) + _730) < ((_548 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _560 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _561 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _581 = fma(_461, cbSceneParam._m0[5u].z, fma(_460, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _459));
    float _584 = fma(_461, cbSceneParam._m0[6u].z, fma(_460, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _459));
    float _587 = fma(_461, cbSceneParam._m0[7u].z, fma(_460, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _459));
    uint _600 = _228 + 9u;
    uint _601 = _600 + uint(cbMatDynParam._m0[0u].w);
    float _607 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_601].x;
    float _608 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_601].y;
    float _609 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_601].z;
    float _3583 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _613 = 1.0 - _467;
    float _614 = _610 * _613;
    float _615 = _611 * _613;
    float _616 = _612 * _613;
    float _621 = (_610 + (-0.039999999105930328369140625)) * _467;
    float _622 = (_611 + (-0.039999999105930328369140625)) * _467;
    float _623 = (_612 + (-0.039999999105930328369140625)) * _467;
    float _624 = _621 + 0.039999999105930328369140625;
    float _626 = _622 + 0.039999999105930328369140625;
    float _627 = _623 + 0.039999999105930328369140625;
    vec4 _636 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _560, cbSceneParam._m0[86u].y * _561));
    float _640 = ((isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * TEXCOORD_5.w) * _636.x;
    float _641 = dot(vec3(_459, _460, _461), vec3(_539, _540, _541));
    float _644 = _641 * 2.0;
    float _648 = (_644 * _459) - _539;
    float _649 = (_644 * _460) - _540;
    float _650 = (_644 * _461) - _541;
    float _654 = abs(dot(vec3(_539, _540, _541), vec3(_459, _460, _461)));
    float _3616 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _656 = sqrt(_462);
    float _669 = exp2((_656 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_656 * 3.0));
    float _675 = (1.0 - _669) * ((_656 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _676 = _669 * _656;
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1042;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _767 = fma(_712, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _704));
        float _771 = fma(_712, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _704));
        float _775 = fma(_712, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _704));
        float _800 = _704 + _459;
        float _801 = _708 + _460;
        float _802 = _712 + _461;
        float _812 = fma(_802, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800)) - _767;
        float _813 = fma(_802, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800)) - _771;
        float _814 = fma(_802, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800)) - _775;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_767 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_771 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[34u].z) + ((((((_775 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _870 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_836.x + (-0.5));
        float _872 = _870 * (_836.y + (-0.5));
        float _873 = _870 * (_836.z + (-0.5));
        float _880 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_843.x + (-0.5));
        float _882 = _880 * (_843.y + (-0.5));
        float _883 = _880 * (_843.z + (-0.5));
        float _890 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_850.x + (-0.5));
        float _892 = _890 * (_850.y + (-0.5));
        float _893 = _890 * (_850.z + (-0.5));
        float _900 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_857.x + (-0.5));
        float _902 = _900 * (_857.y + (-0.5));
        float _903 = _900 * (_857.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _924 = (dot(vec3(_459, _460, _461), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _934 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3664 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_936 + 1.0))) + _941) * _904;
        float _951 = _872 * 0.5;
        float _952 = _882 * 0.5;
        float _953 = _892 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_459, _460, _461), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3697 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_978 + 1.0))) + _983) * _905;
        float _993 = _873 * 0.5;
        float _994 = _883 * 0.5;
        float _995 = _893 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_459, _460, _461), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3730 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1020 + 1.0))) + _1025) * _906;
        _1042 = _873;
        _1044 = _872;
        _1045 = _871;
        _1046 = _883;
        _1047 = _882;
        _1048 = _881;
        _1049 = _893;
        _1050 = _892;
        _1051 = _891;
        _1052 = _906;
        _1053 = _905;
        _1054 = _904;
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _1043;
        _1044 = _1043;
        _1045 = _1043;
        _1046 = _1043;
        _1047 = _1043;
        _1048 = _1043;
        _1049 = _1043;
        _1050 = _1043;
        _1051 = _1043;
        _1052 = _1043;
        _1053 = _1043;
        _1054 = _1043;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_712, cbModelParam._m0[30u].z, fma(_708, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _704));
        float _1089 = fma(_712, cbModelParam._m0[31u].z, fma(_708, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _704));
        float _1093 = fma(_712, cbModelParam._m0[32u].z, fma(_708, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _704));
        float _1116 = _704 + _459;
        float _1117 = _708 + _460;
        float _1118 = _712 + _461;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_459, _460, _461), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3793 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_459, _460, _461), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3826 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_459, _460, _461), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3859 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1043;
        _1355 = _1043;
        _1356 = _1043;
        _1357 = _1043;
        _1358 = _1043;
        _1359 = _1043;
        _1360 = _1043;
        _1361 = _1043;
        _1362 = _1043;
        _1363 = _1043;
        _1364 = _1043;
        _1365 = _1043;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1055)) + _1055;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1056)) + _1056;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1057)) + _1057;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _648 * 0.5;
    float _1423 = _649 * 0.5;
    float _1424 = _650 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1042, _1046, _1049, _1052));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _462);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1538 = fma(_712, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704)) + cbModelParam._m0[13u].w;
        float _1542 = fma(_712, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704)) + cbModelParam._m0[14u].w;
        float _1546 = fma(_712, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704)) + cbModelParam._m0[15u].w;
        float _1549 = fma(_650, cbModelParam._m0[13u].z, fma(_649, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _648));
        float _1552 = fma(_650, cbModelParam._m0[14u].z, fma(_649, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _648));
        float _1555 = fma(_650, cbModelParam._m0[15u].z, fma(_649, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _648));
        float _1583;
        if (_1549 > 0.0)
        {
            _1583 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1583 = frontier_phi_17_15_ladder;
        }
        float _1808;
        if (_1552 > 0.0)
        {
            _1808 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1808 = frontier_phi_26_22_ladder;
        }
        float _2065;
        if (_1555 > 0.0)
        {
            _2065 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2065 = frontier_phi_38_33_ladder;
        }
        float _2067 = isnan(_1808) ? _1583 : (isnan(_1583) ? _1808 : min(_1583, _1808));
        float _2068 = isnan(_2065) ? _2067 : (isnan(_2067) ? _2065 : min(_2067, _2065));
        float _2072 = (_2068 * _1549) + _1538;
        float _2073 = (_2068 * _1552) + _1542;
        float _2074 = (_2068 * _1555) + _1546;
        float _2075 = _2068 * 9.9999997473787516355514526367188e-05;
        float _2077 = (-1.0) - _2075;
        float _2079 = _2075 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2074 > _2079) || ((_2074 < _2077) || ((_2073 > _2079) || ((_2073 < _2077) || ((_2072 < _2077) || (_2072 > _2079))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2202 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2074, cbModelParam._m0[9u].z, fma(_2073, cbModelParam._m0[9u].y, _2072 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2074, cbModelParam._m0[10u].z, fma(_2073, cbModelParam._m0[10u].y, _2072 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2074, cbModelParam._m0[11u].z, fma(_2073, cbModelParam._m0[11u].y, _2072 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_16_38_ladder = _2202.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2202.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2202.x * cbModelParam._m0[1u].y;
        }
        _1571 = frontier_phi_16_38_ladder_2;
        _1573 = frontier_phi_16_38_ladder_1;
        _1575 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_648, _649, _650), _1491);
        _1571 = _1559.x * cbModelParam._m0[1u].y;
        _1573 = _1559.y * cbModelParam._m0[1u].y;
        _1575 = _1559.z * cbModelParam._m0[1u].y;
    }
    float _1579 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _462);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1579 : min(cbModelParam._m0[25u].w, _1579));
    float _1670;
    float _1672;
    float _1674;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1634 = fma(_712, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704)) + cbModelParam._m0[21u].w;
        float _1638 = fma(_712, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704)) + cbModelParam._m0[22u].w;
        float _1642 = fma(_712, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704)) + cbModelParam._m0[23u].w;
        float _1645 = fma(_650, cbModelParam._m0[21u].z, fma(_649, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _648));
        float _1648 = fma(_650, cbModelParam._m0[22u].z, fma(_649, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _648));
        float _1651 = fma(_650, cbModelParam._m0[23u].z, fma(_649, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _648));
        float _1813;
        if (_1645 > 0.0)
        {
            _1813 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1813 = frontier_phi_28_24_ladder;
        }
        float _2092;
        if (_1648 > 0.0)
        {
            _2092 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2092 = frontier_phi_40_35_ladder;
        }
        float _2305;
        if (_1651 > 0.0)
        {
            _2305 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2305 = frontier_phi_49_46_ladder;
        }
        float _2307 = isnan(_2092) ? _1813 : (isnan(_1813) ? _2092 : min(_1813, _2092));
        float _2308 = isnan(_2305) ? _2307 : (isnan(_2307) ? _2305 : min(_2307, _2305));
        float _2312 = (_2308 * _1645) + _1634;
        float _2313 = (_2308 * _1648) + _1638;
        float _2314 = (_2308 * _1651) + _1642;
        float _2315 = _2308 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2315;
        float _2318 = _2315 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2314 > _2318) || ((_2314 < _2316) || ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 < _2316) || (_2312 > _2318))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2314, cbModelParam._m0[17u].z, fma(_2313, cbModelParam._m0[17u].y, _2312 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2314, cbModelParam._m0[18u].z, fma(_2313, cbModelParam._m0[18u].y, _2312 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2314, cbModelParam._m0[19u].z, fma(_2313, cbModelParam._m0[19u].y, _2312 * cbModelParam._m0[19u].x))), _1580);
            frontier_phi_25_49_ladder = _2513.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2513.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2513.x * cbModelParam._m0[1u].z;
        }
        _1670 = frontier_phi_25_49_ladder_2;
        _1672 = frontier_phi_25_49_ladder_1;
        _1674 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_648, _649, _650), _1580);
        _1670 = _1654.x * cbModelParam._m0[1u].z;
        _1672 = _1654.y * cbModelParam._m0[1u].z;
        _1674 = _1654.z * cbModelParam._m0[1u].z;
    }
    float _1687 = (((_675 * _624) + _676) * _640) * ((cbModelParam._m0[1u].w * (_1670 - _1571)) + _1571);
    float _1689 = (((_675 * _626) + _676) * _640) * ((cbModelParam._m0[1u].w * (_1672 - _1573)) + _1573);
    float _1691 = (((_675 * _627) + _676) * _640) * ((cbModelParam._m0[1u].w * (_1674 - _1575)) + _1575);
    float _1694 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1689, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1689, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1689, cbSceneParam._m0[91u].y, _1687 * cbSceneParam._m0[91u].x));
    vec4 _1708 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_560, _561));
    float _1710 = _1708.w;
    float _1722 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1710);
    float _1723 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1710);
    float _1724 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1710);
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1738 = _640 + (-1.0);
    float _1743 = (cbLight._m0[_1731].x * _1738) + 1.0;
    float _1744 = (cbLight._m0[_1731].y * _1738) + 1.0;
    float _1745 = (cbLight._m0[_1731].z * _1738) + 1.0;
    float _1746 = (cbLight._m0[_1731].w * _1738) + 1.0;
    uint _1747 = _1730 + 5u;
    float _1753 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1757 = _1730 + 4u;
    float _1767 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1771 = _1730 | 1u;
    float _1782 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_459, _460, _461));
    float _1785 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_459, _460, _461));
    float _3995 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _4006 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1790 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.3183098733425140380859375;
    float _1792 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.3183098733425140380859375;
    float _1799 = ((cbLight._m0[_1747].x * _1753) * _1792) + (((cbLight._m0[_1757].x * _1722) * _1767) * _1790);
    float _1800 = ((_1753 * cbLight._m0[_1747].y) * _1792) + (((cbLight._m0[_1757].y * _1723) * _1767) * _1790);
    float _1801 = ((_1753 * cbLight._m0[_1747].z) * _1792) + (((cbLight._m0[_1757].z * _1724) * _1767) * _1790);
    uvec4 _1805 = floatBitsToUint(cbLight._m0[_1730 + 12u]);
    bool _1807 = _1805.x == 0u;
    float _1818;
    float _1820;
    float _1822;
    if (_1807)
    {
        _1818 = _1799;
        _1820 = _1800;
        _1822 = _1801;
    }
    else
    {
        uint _1826 = _1730 + 6u;
        float _1842 = (dot(vec3(cbLight._m0[_1730 + 2u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _1843 = _1842 * _1842;
        float _4017 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1845 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1818 = (((cbLight._m0[_1826].x * 0.3183098733425140380859375) * _1844) * _1845) + _1799;
        _1820 = (((cbLight._m0[_1826].y * 0.3183098733425140380859375) * _1844) * _1845) + _1800;
        _1822 = (((cbLight._m0[_1826].z * 0.3183098733425140380859375) * _1844) * _1845) + _1801;
    }
    bool _1825 = _1805.y == 0u;
    float _1863;
    float _1865;
    float _1867;
    if (_1825)
    {
        _1863 = _1818;
        _1865 = _1820;
        _1867 = _1822;
    }
    else
    {
        uint _2036 = _1730 + 7u;
        float _2052 = (dot(vec3(cbLight._m0[_1730 + 3u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _2053 = _2052 * _2052;
        float _4033 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2055 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1863 = (((cbLight._m0[_2036].x * 0.3183098733425140380859375) * _2054) * _2055) + _1818;
        _1865 = (((cbLight._m0[_2036].y * 0.3183098733425140380859375) * _2054) * _2055) + _1820;
        _1867 = (((cbLight._m0[_2036].z * 0.3183098733425140380859375) * _2054) * _2055) + _1822;
    }
    uint _1870 = _1730 + 8u;
    float _1883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _462) * 0.949999988079071044921875);
    float _1884 = _1883 * _1883;
    float _1885 = cbLight._m0[_1730].x + _539;
    float _1886 = cbLight._m0[_1730].y + _540;
    float _1887 = cbLight._m0[_1730].z + _541;
    float _1891 = inversesqrt(dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887)));
    float _1892 = _1891 * _1885;
    float _1893 = _1891 * _1886;
    float _1894 = _1891 * _1887;
    float _1895 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1730].xyz));
    float _4049 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _1899 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _1900 = dot(vec3(_459, _460, _461), vec3(_1892, _1893, _1894));
    float _4071 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1904 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1892, _1893, _1894));
    float _4082 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1908 = _1884 * _1884;
    float _1912 = ((_1903 * _1903) * (_1908 + (-1.0))) + 1.0;
    float _1920 = exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0);
    float _1921 = 0.959999978542327880859375 - _621;
    float _1923 = 0.959999978542327880859375 - _622;
    float _1924 = 0.959999978542327880859375 - _623;
    float _1931 = 1.0 - _1884;
    float _1942 = (0.5 / (((_1899 * ((_1898 * _1931) + _1884)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _1931) + _1884) * _1898))) * _1898;
    float _4093 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1908 / ((_1912 * _1912) * 3.141590118408203125));
    uint _1958 = _1730 + 9u;
    float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _462) * 0.949999988079071044921875);
    float _1970 = _1969 * _1969;
    float _1971 = cbLight._m0[_1771].x + _539;
    float _1972 = cbLight._m0[_1771].y + _540;
    float _1973 = cbLight._m0[_1771].z + _541;
    float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
    float _1978 = _1977 * _1971;
    float _1979 = _1977 * _1972;
    float _1980 = _1977 * _1973;
    float _1981 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1771].xyz));
    float _4104 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _1985 = dot(vec3(_459, _460, _461), vec3(_1978, _1979, _1980));
    float _4115 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1978, _1979, _1980));
    float _4126 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1993 = _1970 * _1970;
    float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
    float _2004 = exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0);
    float _2011 = 1.0 - _1970;
    float _2021 = (0.5 / (((_1899 * ((_1984 * _2011) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _2011) + _1970) * _1984))) * _1984;
    float _4137 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
    float _2033 = (((((_2004 * _1921) + _624) * cbLight._m0[_1958].x) * _2023) * _1753) + ((((cbLight._m0[_1870].x * _1722) * ((_1920 * _1921) + _624)) * _1944) * _1767);
    float _2034 = (((((_2004 * _1923) + _626) * cbLight._m0[_1958].y) * _2023) * _1753) + ((((cbLight._m0[_1870].y * _1723) * ((_1920 * _1923) + _626)) * _1944) * _1767);
    float _2035 = (((((_2004 * _1924) + _627) * cbLight._m0[_1958].z) * _2023) * _1753) + ((((cbLight._m0[_1870].z * _1724) * ((_1920 * _1924) + _627)) * _1944) * _1767);
    float _2097;
    float _2099;
    float _2101;
    if (_1807)
    {
        _2097 = _2033;
        _2099 = _2034;
        _2101 = _2035;
    }
    else
    {
        uint _2103 = _1730 + 2u;
        uint _2107 = _1730 + 10u;
        float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _462) * 0.949999988079071044921875);
        float _2122 = _2121 * _2121;
        float _2123 = cbLight._m0[_2103].x + _539;
        float _2124 = cbLight._m0[_2103].y + _540;
        float _2125 = cbLight._m0[_2103].z + _541;
        float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
        float _2130 = _2129 * _2123;
        float _2131 = _2129 * _2124;
        float _2132 = _2129 * _2125;
        float _2133 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2103].xyz));
        float _4148 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2137 = dot(vec3(_459, _460, _461), vec3(_2130, _2131, _2132));
        float _4159 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2141 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2130, _2131, _2132));
        float _4170 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2145 = _2122 * _2122;
        float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
        float _2156 = exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0);
        float _2163 = 1.0 - _2122;
        float _2173 = (0.5 / (((_1899 * ((_2136 * _2163) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _2163) + _2122) * _2136))) * _2136;
        float _4181 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2175 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
        float _2176 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2097 = (((((_2156 * _1921) + _624) * cbLight._m0[_2107].x) * _2175) * _2176) + _2033;
        _2099 = (((((_2156 * _1923) + _626) * cbLight._m0[_2107].y) * _2175) * _2176) + _2034;
        _2101 = (((((_2156 * _1924) + _627) * cbLight._m0[_2107].z) * _2175) * _2176) + _2035;
    }
    float _2211;
    float _2213;
    float _2215;
    if (_1825)
    {
        _2211 = _2097;
        _2213 = _2099;
        _2215 = _2101;
    }
    else
    {
        uint _2222 = _1730 + 3u;
        uint _2226 = _1730 + 11u;
        float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _462) * 0.949999988079071044921875);
        float _2241 = _2240 * _2240;
        float _2242 = cbLight._m0[_2222].x + _539;
        float _2243 = cbLight._m0[_2222].y + _540;
        float _2244 = cbLight._m0[_2222].z + _541;
        float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
        float _2249 = _2248 * _2242;
        float _2250 = _2248 * _2243;
        float _2251 = _2248 * _2244;
        float _2252 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2222].xyz));
        float _4197 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2256 = dot(vec3(_459, _460, _461), vec3(_2249, _2250, _2251));
        float _4208 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2260 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2249, _2250, _2251));
        float _4219 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2264 = _2241 * _2241;
        float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
        float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0);
        float _2282 = 1.0 - _2241;
        float _2292 = (0.5 / (((_1899 * ((_2255 * _2282) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _2282) + _2241) * _2255))) * _2255;
        float _4230 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2294 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
        float _2295 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _2211 = (((((_2275 * _1921) + _624) * cbLight._m0[_2226].x) * _2294) * _2295) + _2097;
        _2213 = (((((_2275 * _1923) + _626) * cbLight._m0[_2226].y) * _2294) * _2295) + _2099;
        _2215 = (((((_2275 * _1924) + _627) * cbLight._m0[_2226].z) * _2294) * _2295) + _2101;
    }
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    if (_1728.y == 0u)
    {
        float _2370 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2370;
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2370;
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2370;
        uvec4 _2385 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2386 = _2385.x;
        uint _2397 = uint((float(_2385.y) * floor(float(uint(cbSceneParam._m0[85u].y * _561) / _2386))) + floor(float(uint(cbSceneParam._m0[85u].x * _560) / _2386)));
        float _2407 = (log2(_2373 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2408 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        uint _2411 = uint(isnan(14.0) ? _2408 : (isnan(_2408) ? 14.0 : min(_2408, 14.0)));
        uvec4 _2416 = texelFetch(g_lightClusterGridBuffer, int(((_2411 << 2u) + (_2397 << 6u)) >> 2u));
        uint _2417 = _2416.x;
        uint _2418 = _2385.z;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        if (((((1u << ((_2418 >> 4u) & 15u)) + 4294967295u) & _2417) == 0u) || ((_2418 & 240u) == 0u))
        {
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
        }
        else
        {
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            uint _2677 = 0u;
            uint _2686;
            bool _2687;
            for (;;)
            {
                _2686 = texelFetch(g_lightClassification, int((((_2411 << 5u) + (_2397 << 9u)) + (_2677 << 2u)) >> 2u)).x;
                _2687 = _2686 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2687)
                {
                    frontier_phi_66_pred = _2671;
                    frontier_phi_66_pred_1 = _2676;
                    frontier_phi_66_pred_2 = _2675;
                    frontier_phi_66_pred_3 = _2674;
                    frontier_phi_66_pred_4 = _2673;
                    frontier_phi_66_pred_5 = _2672;
                }
                else
                {
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    uint _2822;
                    _2816 = _2671;
                    _2817 = _2672;
                    _2818 = _2673;
                    _2819 = _2674;
                    _2820 = _2675;
                    _2821 = _2676;
                    _2822 = _2686;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    for (;;)
                    {
                        uint _2826 = uint(findLSB(_2822)) + (_2677 << 5u);
                        uint _2823 = (_2822 + 4294967295u) & _2822;
                        uint _2828 = _2826 * 48u;
                        vec4 _2842 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 3u)).x));
                        uint _2848 = (_2826 * 48u) + 4u;
                        vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 3u)).x));
                        uint _2867 = (_2826 * 48u) + 8u;
                        vec3 _2878 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 2u)).x));
                        float _2882 = _2842.x - _2371;
                        float _2883 = _2842.y - _2372;
                        float _2884 = _2842.z - _2373;
                        float _2885 = dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884));
                        float _2888 = inversesqrt(_2885);
                        float _2889 = _2888 * _2882;
                        float _2890 = _2888 * _2883;
                        float _2891 = _2888 * _2884;
                        float _2892 = dot(vec3(_581, _584, _587), vec3(_2889, _2890, _2891));
                        float _2897 = 1.0 - (_2885 * _2842.w);
                        float _4256 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2898 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2899 = sqrt(_2885) * _2861.w;
                        float _2902 = 1.39999997615814208984375 / (_2899 + 1.39999997615814208984375);
                        float _2903 = _2902 * _2902;
                        float _2906 = ((1.0 - _2903) * _2892) + _2903;
                        float _2909 = _2899 * _2899;
                        float _2913 = ((isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0))) * _2898) / ((_2909 * 0.699999988079071044921875) + 1.0);
                        float _2917 = (-0.0) - _2371;
                        float _2918 = (-0.0) - _2372;
                        float _2919 = (-0.0) - _2373;
                        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
                        float _2924 = _2923 * _2917;
                        float _2925 = _2923 * _2918;
                        float _2926 = _2923 * _2919;
                        float _2934 = exp2(log2(1.0 / ((_2909 * 3.5) + 5.0)) * 0.25);
                        float _2935 = 1.0 - _656;
                        float _2942 = sqrt(1.0 - ((1.0 - (_2935 * _2935)) * (1.0 - (_2934 * _2934))));
                        float _2943 = _2942 * _2942;
                        float _2944 = _2943 * _2943;
                        float _2945 = _2924 + _2889;
                        float _2946 = _2925 + _2890;
                        float _2947 = _2926 + _2891;
                        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
                        float _2955 = dot(vec3(_581, _584, _587), vec3(_2924, _2925, _2926));
                        float _4272 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2958 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _2959 = dot(vec3(_581, _584, _587), vec3(_2951 * _2945, _2951 * _2946, _2951 * _2947));
                        float _4283 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2962 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _2966 = ((_2962 * _2962) * (_2944 + (-1.0))) + 1.0;
                        float _2967 = _2902 * _2943;
                        float _2968 = _2967 * _2967;
                        float _2971 = ((1.0 - _2968) * _2892) + _2968;
                        float _4294 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _2973 = 1.0 - _2943;
                        float _2983 = (0.5 / (((_2972 * ((_2958 * _2973) + _2943)) + 9.9999999392252902907785028219223e-09) + (((_2972 * _2973) + _2943) * _2958))) * _2972;
                        float _4305 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2994 = (((_2944 * 3.1415927410125732421875) * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) / ((_2966 * _2966) * ((_2909 * 2.1991131305694580078125) + 3.141590118408203125))) * _2898;
                        _2746 = (_2913 * _2861.x) + _2819;
                        _2747 = (_2913 * _2861.y) + _2820;
                        _2748 = (_2913 * _2861.z) + _2821;
                        _2743 = (_2994 * _2878.x) + _2816;
                        _2744 = (_2994 * _2878.y) + _2817;
                        _2745 = (_2994 * _2878.z) + _2818;
                        if (_2823 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2816 = _2743;
                            _2817 = _2744;
                            _2818 = _2745;
                            _2819 = _2746;
                            _2820 = _2747;
                            _2821 = _2748;
                            _2822 = _2823;
                        }
                    }
                    frontier_phi_66_pred = _2743;
                    frontier_phi_66_pred_1 = _2748;
                    frontier_phi_66_pred_2 = _2747;
                    frontier_phi_66_pred_3 = _2746;
                    frontier_phi_66_pred_4 = _2745;
                    frontier_phi_66_pred_5 = _2744;
                }
                _2519 = frontier_phi_66_pred;
                _2529 = frontier_phi_66_pred_1;
                _2527 = frontier_phi_66_pred_2;
                _2525 = frontier_phi_66_pred_3;
                _2523 = frontier_phi_66_pred_4;
                _2521 = frontier_phi_66_pred_5;
                uint _2678 = _2677 + 1u;
                if (_2678 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2671 = _2519;
                    _2672 = _2521;
                    _2673 = _2523;
                    _2674 = _2525;
                    _2675 = _2527;
                    _2676 = _2529;
                    _2677 = _2678;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
        }
        uvec4 _2532 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2533 = _2532.z;
        uint _2535 = (_2533 >> 8u) & 15u;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        if (((4294967295u << _2535) & _2417) == 0u)
        {
            _2639 = _2518;
            _2641 = _2520;
            _2643 = _2522;
            _2645 = _2524;
            _2647 = _2526;
            _2649 = _2528;
        }
        else
        {
            float _2664 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
            float _2665 = _2664 * _2371;
            float _2666 = _2664 * _2372;
            float _2667 = _2664 * _2373;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2535 < ((_2533 >> 12u) & 15u))
            {
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2799 = _2518;
                float _2800 = _2520;
                float _2801 = _2522;
                float _2802 = _2524;
                float _2803 = _2526;
                float _2804 = _2528;
                uint _2805 = _2535;
                uint _2814;
                bool _2815;
                for (;;)
                {
                    _2814 = texelFetch(g_lightClassification, int((((_2411 << 5u) + (_2397 << 9u)) + (_2805 << 2u)) >> 2u)).x;
                    _2815 = _2814 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2815)
                    {
                        frontier_phi_77_pred = _2804;
                        frontier_phi_77_pred_1 = _2803;
                        frontier_phi_77_pred_2 = _2802;
                        frontier_phi_77_pred_3 = _2801;
                        frontier_phi_77_pred_4 = _2800;
                        frontier_phi_77_pred_5 = _2799;
                    }
                    else
                    {
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3021 = _2799;
                        float _3022 = _2800;
                        float _3023 = _2801;
                        float _3024 = _2802;
                        float _3025 = _2803;
                        float _3026 = _2804;
                        uint _3027 = _2814;
                        uint _3028;
                        vec4 _3053;
                        float _3054;
                        vec4 _3069;
                        vec3 _3081;
                        vec4 _3097;
                        vec4 _3113;
                        float _3159;
                        bool _3160;
                        for (;;)
                        {
                            uint _3038 = ((_2805 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3027));
                            _3028 = (_3027 + 4294967295u) & _3027;
                            uint _3040 = _3038 * 40u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            _3054 = _3053.w;
                            uint _3056 = (_3038 * 40u) + 4u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3071 = (_3038 * 40u) + 8u;
                            _3081 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x));
                            uint _3084 = (_3038 * 40u) + 16u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3100 = (_3038 * 40u) + 20u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3038 * 40u) + 24u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3134 = (_3038 * 40u) + 28u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3159 = fma(_2373, _3147.z, fma(_2372, _3147.y, _3147.x * _2371)) + _3147.w;
                            _3160 = !((fma(_2373, _3128.z, fma(_2372, _3128.y, _3128.x * _2371)) + _3128.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3160)
                            {
                                float _3187 = _3053.x - _2371;
                                float _3188 = _3053.y - _2372;
                                float _3189 = _3053.z - _2373;
                                float _3190 = dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189));
                                float _3193 = inversesqrt(_3190);
                                float _3194 = _3193 * _3187;
                                float _3195 = _3193 * _3188;
                                float _3196 = _3193 * _3189;
                                float _3200 = 1.0 - (_3190 / (_3054 * _3054));
                                float _4316 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3205 = sqrt(_3190) * _3069.w;
                                float _3207 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                                float _3208 = _3207 * _3207;
                                float _3211 = ((1.0 - _3208) * dot(vec3(_3194, _3195, _3196), vec3(_581, _584, _587))) + _3208;
                                float _3214 = _3205 * _3205;
                                float _3218 = (fma(_2373, _3097.z, fma(_2372, _3097.y, _3097.x * _2371)) + _3097.w) / _3159;
                                float _3219 = (fma(_2373, _3113.z, fma(_2372, _3113.y, _3113.x * _2371)) + _3113.w) / _3159;
                                float _3223 = 1.0 - dot(vec2(_3218, _3219), vec2(_3218, _3219));
                                float _4332 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3224 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3225 = _3224 * (((isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))) * _3201) / ((_3214 * 0.699999988079071044921875) + 1.0));
                                float _3237 = exp2(log2(1.0 / ((_3214 * 3.5) + 5.0)) * 0.25);
                                float _3238 = 1.0 - _656;
                                float _3245 = sqrt(1.0 - ((1.0 - (_3238 * _3238)) * (1.0 - (_3237 * _3237))));
                                float _3246 = _3245 * _3245;
                                float _3247 = _3246 * _3246;
                                float _3248 = _3194 - _2665;
                                float _3249 = _3195 - _2666;
                                float _3250 = _3196 - _2667;
                                float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                                float _3258 = dot(vec3(_581, _584, _587), vec3((-0.0) - _2665, (-0.0) - _2666, (-0.0) - _2667));
                                float _4343 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3261 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3262 = dot(vec3(_581, _584, _587), vec3(_3254 * _3248, _3254 * _3249, _3254 * _3250));
                                float _4354 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3265 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3269 = ((_3265 * _3265) * (_3247 + (-1.0))) + 1.0;
                                float _3270 = _3207 * _3246;
                                float _3271 = _3270 * _3270;
                                float _3277 = ((1.0 - _3271) * dot(vec3(_581, _584, _587), vec3(_3194, _3195, _3196))) + _3271;
                                float _4365 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3279 = 1.0 - _3246;
                                float _3289 = (0.5 / (((_3278 * ((_3261 * _3279) + _3246)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3246) * _3261))) * _3278;
                                float _4376 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3299 = (_3224 * _3201) * (((_3247 * 3.1415927410125732421875) * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) / ((_3269 * _3269) * ((_3214 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3225 * _3069.y;
                                frontier_phi_83_pred_1 = _3225 * _3069.x;
                                frontier_phi_83_pred_2 = _3299 * _3081.z;
                                frontier_phi_83_pred_3 = _3299 * _3081.y;
                                frontier_phi_83_pred_4 = _3299 * _3081.x;
                                frontier_phi_83_pred_5 = _3225 * _3069.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3307 = frontier_phi_83_pred;
                            _3306 = frontier_phi_83_pred_1;
                            _3305 = frontier_phi_83_pred_2;
                            _3304 = frontier_phi_83_pred_3;
                            _3303 = frontier_phi_83_pred_4;
                            _3308 = frontier_phi_83_pred_5;
                            _3011 = _3306 + _3024;
                            _3012 = _3307 + _3025;
                            _3013 = _3308 + _3026;
                            _3008 = _3303 + _3021;
                            _3009 = _3304 + _3022;
                            _3010 = _3305 + _3023;
                            if (_3028 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3028;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3013;
                        frontier_phi_77_pred_1 = _3012;
                        frontier_phi_77_pred_2 = _3011;
                        frontier_phi_77_pred_3 = _3010;
                        frontier_phi_77_pred_4 = _3009;
                        frontier_phi_77_pred_5 = _3008;
                    }
                    _2650 = frontier_phi_77_pred;
                    _2648 = frontier_phi_77_pred_1;
                    _2646 = frontier_phi_77_pred_2;
                    _2644 = frontier_phi_77_pred_3;
                    _2642 = frontier_phi_77_pred_4;
                    _2640 = frontier_phi_77_pred_5;
                    uint _2806 = _2805 + 1u;
                    if (_2806 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2799 = _2640;
                        _2800 = _2642;
                        _2801 = _2644;
                        _2802 = _2646;
                        _2803 = _2648;
                        _2804 = _2650;
                        _2805 = _2806;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2644;
                frontier_phi_58_59_ladder_1 = _2650;
                frontier_phi_58_59_ladder_2 = _2648;
                frontier_phi_58_59_ladder_3 = _2646;
                frontier_phi_58_59_ladder_4 = _2642;
                frontier_phi_58_59_ladder_5 = _2640;
            }
            else
            {
                frontier_phi_58_59_ladder = _2522;
                frontier_phi_58_59_ladder_1 = _2528;
                frontier_phi_58_59_ladder_2 = _2526;
                frontier_phi_58_59_ladder_3 = _2524;
                frontier_phi_58_59_ladder_4 = _2520;
                frontier_phi_58_59_ladder_5 = _2518;
            }
            _2639 = frontier_phi_58_59_ladder_5;
            _2641 = frontier_phi_58_59_ladder_4;
            _2643 = frontier_phi_58_59_ladder;
            _2645 = frontier_phi_58_59_ladder_3;
            _2647 = frontier_phi_58_59_ladder_2;
            _2649 = frontier_phi_58_59_ladder_1;
        }
        float _2654 = isnan(1.0) ? _640 : (isnan(_640) ? 1.0 : min(_640, 1.0));
        _2430 = (_2654 * _2645) + _1863;
        _2432 = (_2654 * _2647) + _1865;
        _2434 = (_2654 * _2649) + _1867;
        _2436 = ((_2639 * _624) * _2654) + _2211;
        _2438 = ((_2641 * _626) * _2654) + _2213;
        _2440 = ((_2643 * _627) * _2654) + _2215;
    }
    else
    {
        _2430 = _1863;
        _2432 = _1865;
        _2434 = _1867;
        _2436 = _2211;
        _2438 = _2213;
        _2440 = _2215;
    }
    float _4392 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4403 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4414 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2457 = ((isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2430 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _640))) + ((_2436 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1480)) * cbPerFrame._m0[3u].x);
    float _2458 = ((isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2432 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _640))) + ((_2438 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1480)) * cbPerFrame._m0[3u].x);
    float _2459 = ((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2434 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _640))) + ((_2440 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1480)) * cbPerFrame._m0[3u].x);
    uint _2460 = _228 + 6u;
    float _2468 = _560 / cbSceneParam._m0[86u].x;
    float _2469 = _561 / cbSceneParam._m0[86u].y;
    vec4 _2483 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2468, _2469, (log2((isnan(cbSceneParam._m0[77u].w) ? _481 : (isnan(_481) ? cbSceneParam._m0[77u].w : min(_481, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2485 = _2483.x;
    float _2486 = _2483.y;
    float _2487 = _2483.z;
    float _2488 = _2483.w;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    if (_481 > cbSceneParam._m0[78u].w)
    {
        float _2543 = isnan(_481) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _481 : min(cbSceneParam._m0[80u].w, _481));
        float _2544 = _2543 / _481;
        float _2555 = _2544 * _532;
        float _2556 = _533 * _2544;
        float _2557 = (-0.0) - _2556;
        float _2559 = _2544 * _534;
        float _2561 = (cbSceneParam._m0[77u].w * _2557) / _2543;
        float _2562 = _2561 + cbSceneParam._m0[79u].w;
        float _2563 = cbSceneParam._m0[79u].w - _2556;
        float _2569 = sqrt(((_2555 * _2555) + (_2556 * _2556)) + (_2559 * _2559));
        float _2572 = (1.0 - (cbSceneParam._m0[77u].w / _2543)) * _2569;
        float _2577 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2579 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2756;
        if (abs((_2557 - _2561) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2756 = ((((_2562 > 0.0) ? exp2(_2577 * _2562) : (2.0 - exp2(_2579 * _2562))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2572;
        }
        else
        {
            float _2700 = 1.0 / cbSceneParam._m0[80u].x;
            float _2701 = isnan(_2563) ? _2562 : (isnan(_2562) ? _2563 : max(_2562, _2563));
            float _2702 = isnan(_2563) ? _2562 : (isnan(_2562) ? _2563 : min(_2562, _2563));
            float _2711 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : min(_2701, 0.0));
            float _2712 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : min(_2702, 0.0));
            _2756 = ((abs(_2569 / _2557) * cbSceneParam._m0[80u].y) * ((((_2711 - _2712) * 2.0) - ((exp2(_2577 * (isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0)))) - exp2(_2577 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0))))) * _2700)) - ((exp2(_2579 * _2711) - exp2(_2579 * _2712)) * _2700))) + (_2572 * cbSceneParam._m0[80u].z);
        }
        vec4 _2758 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2468, _2469, 1.0), 0.0);
        float _2767 = exp2((_2756 * (-1.44269502162933349609375)) * (1.0 - _2758.w));
        float _2768 = log2(_2767);
        float _2784 = log2(_2488);
        _2581 = (exp2(_2784 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].x)) * _2758.x) / cbSceneParam._m0[78u].x)) + _2485;
        _2583 = (exp2(_2784 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].y)) * _2758.y) / cbSceneParam._m0[78u].y)) + _2486;
        _2585 = (exp2(_2784 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].z)) * _2758.z) / cbSceneParam._m0[78u].z)) + _2487;
        _2587 = _2767 * _2488;
    }
    else
    {
        _2581 = _2485;
        _2583 = _2486;
        _2585 = _2487;
        _2587 = _2488;
    }
    bool _2794;
    vec4 _2597;
    vec4 _2619;
    float _2621;
    float _2625;
    float _2626;
    float _2627;
    float _2628;
    bool _2638;
    for (;;)
    {
        _2597 = cbMatDynParam._m0[0u];
        float _2599 = roundEven(_2597.y);
        bool _2600 = _2599 == 3.0;
        float _2601 = log2(_2587);
        float _2608 = exp2(_2601 * cbSceneParam._m0[78u].x) * _2457;
        float _2609 = exp2(_2601 * cbSceneParam._m0[78u].y) * _2458;
        float _2610 = exp2(_2601 * cbSceneParam._m0[78u].z) * _2459;
        float _2617 = _548 + (-0.5);
        _2619 = cbMtdParam._m0[1u];
        _2621 = _2619.y * _2617;
        float _2624 = (_2599 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2625 = _2624 * (_2600 ? _2608 : (_2608 + (cbSceneParam._m0[72u].w * _2581)));
        _2626 = _2624 * (_2600 ? _2609 : (_2609 + (cbSceneParam._m0[72u].w * _2583)));
        _2627 = _2624 * (_2600 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2585)));
        _2628 = _2617 * 0.999000012874603271484375;
        _2638 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2638)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2628) < 0.5)
            {
                _2794 = true;
                break;
            }
        }
        uint _2735 = _600 + uint(_2597.w);
        if ((cbInstanceData._m0[_2735].w < 1.0) && ((cbInstanceData._m0[_2735].w + _2628) < 0.5))
        {
            _2794 = true;
            break;
        }
        if ((_2621 + 1.0) < _2619.x)
        {
            _2794 = true;
            break;
        }
        _2794 = false;
        break;
    }
    float _2999;
    if (_2794)
    {
        discard_state = true;
        _2999 = 0.0;
    }
    else
    {
        _2999 = cbInstanceData._m0[_2460].w;
    }
    SV_Target.x = _2625;
    SV_Target.y = _2626;
    SV_Target.z = _2627;
    SV_Target.w = _2999;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2460].w;
    discard_exit();
}


