#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1190;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _366 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _366) * cbMtdParam._m0[24u].y) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3803 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _391 = (_384 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _392 = (_384 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _393 = (_384 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _425 = _423.x;
    float _426 = _423.y;
    float _427 = _423.z;
    float _436 = ((_406.z - _427) * _384) + _427;
    float _439 = ((((_406.x - _425) * _384) + _425) * 2.0) + (-1.0);
    float _441 = ((((_406.y - _426) * _384) + _426) * 2.0) + (-1.0);
    float _442 = dot(vec2(_439, _441), vec2(_439, _441));
    float _3814 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _447 = sqrt(1.0 - (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))));
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _475 = (((_463.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _439;
    float _476 = (((_463.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _441;
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _490 = _488.x;
    float _491 = 1.0 - _490;
    float _519 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_490 - _491) * cbMtdParam._m0[24u].w) + _491) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3825 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _528 = ((((cbMtdParam._m0[10u].x - _391) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _520) + _391;
    float _529 = ((((cbMtdParam._m0[10u].y - _392) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _520) + _392;
    float _530 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _393)) * _520) + _393;
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _558 = _556.x;
    float _576 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _558) * _384) + _558;
    float _580 = ((_542.x - _576) * cbMtdParam._m0[19u].z) + _576;
    float _582 = _580 - (_580 * _520);
    float _586 = (cbMtdParam._m0[19u].w * (_463.z - _436)) + _436;
    float _590 = ((cbMtdParam._m0[23u].y - _586) * _520) + _586;
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _615 = (_609.x * 2.0) + (-1.0);
    float _616 = (_609.y * 2.0) + (-1.0);
    float _617 = dot(vec2(_615, _616), vec2(_615, _616));
    float _3836 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _633 = (_520 * (((cbMtdParam._m0[22u].z * _475) - _475) + _615)) + _475;
    float _634 = (_520 * (((cbMtdParam._m0[22u].z * _476) - _476) + _616)) + _476;
    float _635 = (_520 * (sqrt(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) - _447)) + _447;
    float _637 = cbMtdParam._m0[22u].x + _463.w;
    float _640 = fma(_635, _234 * NORMAL.x, fma(_634, _241 * TANGENT.x, (_227 * _219) * _633));
    float _643 = fma(_635, _234 * NORMAL.y, fma(_634, _241 * TANGENT.y, (_227 * _220) * _633));
    float _646 = fma(_635, _234 * NORMAL.z, fma(_634, _241 * TANGENT.z, (_227 * _221) * _633));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    float _651 = _650 * _640;
    float _652 = _650 * _643;
    float _653 = _650 * _646;
    float _3847 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _654 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3869 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3880 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3891 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3902 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _659 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _673 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _723 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _713);
    float _724 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _713);
    float _725 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _713);
    float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
    float _730 = _723 * _729;
    float _731 = _724 * _729;
    float _732 = _725 * _729;
    float _738 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _739 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _757 = fma(_653, cbSceneParam._m0[5u].z, fma(_652, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _651));
    float _760 = fma(_653, cbSceneParam._m0[6u].z, fma(_652, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _651));
    float _763 = fma(_653, cbSceneParam._m0[7u].z, fma(_652, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _651));
    uint _777 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _783 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * cbInstanceData._m0[_777].x;
    float _784 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_777].y;
    float _785 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_777].z;
    float _3913 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _789 = 1.0 - _659;
    float _790 = _786 * _789;
    float _791 = _787 * _789;
    float _792 = _788 * _789;
    float _797 = (_786 + (-0.039999999105930328369140625)) * _659;
    float _798 = (_787 + (-0.039999999105930328369140625)) * _659;
    float _799 = (_788 + (-0.039999999105930328369140625)) * _659;
    float _800 = _797 + 0.039999999105930328369140625;
    float _802 = _798 + 0.039999999105930328369140625;
    float _803 = _799 + 0.039999999105930328369140625;
    vec4 _812 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _738, cbSceneParam._m0[86u].y * _739));
    float _816 = ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * TEXCOORD_5.w) * _812.x;
    float _817 = dot(vec3(_651, _652, _653), vec3(_730, _731, _732));
    float _820 = _817 * 2.0;
    float _824 = (_820 * _651) - _730;
    float _825 = (_820 * _652) - _731;
    float _826 = (_820 * _653) - _732;
    float _830 = abs(dot(vec3(_730, _731, _732), vec3(_651, _652, _653)));
    float _3946 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _832 = sqrt(_654);
    float _845 = exp2((_832 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_832 * 3.0));
    float _851 = (1.0 - _845) * ((_832 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _852 = _845 * _832;
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1189;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _914 = fma(_888, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _880));
        float _918 = fma(_888, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _880));
        float _922 = fma(_888, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _880));
        float _947 = _880 + _651;
        float _948 = _884 + _652;
        float _949 = _888 + _653;
        float _959 = fma(_949, cbModelParam._m0[26u].z, fma(_948, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _947)) - _914;
        float _960 = fma(_949, cbModelParam._m0[27u].z, fma(_948, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _947)) - _918;
        float _961 = fma(_949, cbModelParam._m0[28u].z, fma(_948, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _947)) - _922;
        float _965 = inversesqrt(dot(vec3(_959, _960, _961), vec3(_959, _960, _961)));
        float _978 = ((_965 * _959) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_914 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_965 * _960) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_918 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_965 * _961) / cbModelParam._m0[34u].z) + ((((((_922 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        float _1017 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_983.x + (-0.5));
        float _1019 = _1017 * (_983.y + (-0.5));
        float _1020 = _1017 * (_983.z + (-0.5));
        float _1027 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_990.x + (-0.5));
        float _1029 = _1027 * (_990.y + (-0.5));
        float _1030 = _1027 * (_990.z + (-0.5));
        float _1037 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_997.x + (-0.5));
        float _1039 = _1037 * (_997.y + (-0.5));
        float _1040 = _1037 * (_997.z + (-0.5));
        float _1047 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1004.x + (-0.5));
        float _1049 = _1047 * (_1004.y + (-0.5));
        float _1050 = _1047 * (_1004.z + (-0.5));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = _1018 * 0.5;
        float _1055 = _1028 * 0.5;
        float _1056 = _1038 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1071 = (dot(vec3(_651, _652, _653), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1081 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3994 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1083 + 1.0))) + _1088) * _1051;
        float _1098 = _1019 * 0.5;
        float _1099 = _1029 * 0.5;
        float _1100 = _1039 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_651, _652, _653), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _4027 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1125 + 1.0))) + _1130) * _1052;
        float _1140 = _1020 * 0.5;
        float _1141 = _1030 * 0.5;
        float _1142 = _1040 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_651, _652, _653), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _4060 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1167 + 1.0))) + _1172) * _1053;
        _1189 = _1020;
        _1191 = _1019;
        _1192 = _1018;
        _1193 = _1030;
        _1194 = _1029;
        _1195 = _1028;
        _1196 = _1040;
        _1197 = _1039;
        _1198 = _1038;
        _1199 = _1053;
        _1200 = _1052;
        _1201 = _1051;
        _1202 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
    }
    else
    {
        _1189 = _1190;
        _1191 = _1190;
        _1192 = _1190;
        _1193 = _1190;
        _1194 = _1190;
        _1195 = _1190;
        _1196 = _1190;
        _1197 = _1190;
        _1198 = _1190;
        _1199 = _1190;
        _1200 = _1190;
        _1201 = _1190;
        _1202 = 0.0;
        _1203 = 0.0;
        _1204 = 0.0;
    }
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1229 = fma(_888, cbModelParam._m0[30u].z, fma(_884, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _880));
        float _1233 = fma(_888, cbModelParam._m0[31u].z, fma(_884, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _880));
        float _1237 = fma(_888, cbModelParam._m0[32u].z, fma(_884, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _880));
        float _1260 = _880 + _651;
        float _1261 = _884 + _652;
        float _1262 = _888 + _653;
        float _1272 = fma(_1262, cbModelParam._m0[30u].z, fma(_1261, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1260)) - _1229;
        float _1273 = fma(_1262, cbModelParam._m0[31u].z, fma(_1261, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1260)) - _1233;
        float _1274 = fma(_1262, cbModelParam._m0[32u].z, fma(_1261, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1260)) - _1237;
        float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
        float _1291 = ((_1278 * _1272) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1229 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1278 * _1273) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1233 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1278 * _1274) / cbModelParam._m0[35u].z) + ((((((_1237 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        float _1328 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1295.x + (-0.5));
        float _1330 = _1328 * (_1295.y + (-0.5));
        float _1331 = _1328 * (_1295.z + (-0.5));
        float _1338 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1302.x + (-0.5));
        float _1340 = _1338 * (_1302.y + (-0.5));
        float _1341 = _1338 * (_1302.z + (-0.5));
        float _1348 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1309.x + (-0.5));
        float _1350 = _1348 * (_1309.y + (-0.5));
        float _1351 = _1348 * (_1309.z + (-0.5));
        float _1358 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1316.x + (-0.5));
        float _1360 = _1358 * (_1316.y + (-0.5));
        float _1361 = _1358 * (_1316.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_651, _652, _653), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4123 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1392 + 1.0))) + _1397) * _1362;
        float _1407 = _1330 * 0.5;
        float _1408 = _1340 * 0.5;
        float _1409 = _1350 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_651, _652, _653), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4156 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1434 + 1.0))) + _1439) * _1363;
        float _1449 = _1331 * 0.5;
        float _1450 = _1341 * 0.5;
        float _1451 = _1351 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_651, _652, _653), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4189 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1476 + 1.0))) + _1481) * _1364;
        _1498 = _1331;
        _1499 = _1330;
        _1500 = _1329;
        _1501 = _1341;
        _1502 = _1340;
        _1503 = _1339;
        _1504 = _1351;
        _1505 = _1350;
        _1506 = _1349;
        _1507 = _1364;
        _1508 = _1363;
        _1509 = _1362;
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1190;
        _1499 = _1190;
        _1500 = _1190;
        _1501 = _1190;
        _1502 = _1190;
        _1503 = _1190;
        _1504 = _1190;
        _1505 = _1190;
        _1506 = _1190;
        _1507 = _1190;
        _1508 = _1190;
        _1509 = _1190;
        _1510 = 0.0;
        _1511 = 0.0;
        _1512 = 0.0;
    }
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1202)) + _1202;
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1203)) + _1203;
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1204)) + _1204;
    float _1545 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1548 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1551 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1522));
    float _1566 = _824 * 0.5;
    float _1567 = _825 * 0.5;
    float _1568 = _826 * 0.5;
    float _1569 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1572 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1575 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1609;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1582 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1189, _1193, _1196, _1199));
        float _1586 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1191, _1194, _1197, _1200));
        float _1590 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1192, _1195, _1198, _1201));
        float _1597 = dot(vec4(cbModelParam._m0[39u]), vec4(_1566, _1567, _1568, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1620;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1611 = dot(vec4(cbModelParam._m0[40u]), vec4(_1566, _1567, _1568, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1624 = (_1620 * cbModelParam._m0[1u].x) + (_1609 * (1.0 - cbModelParam._m0[1u].x));
    float _1634 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _654);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1634 : min(cbModelParam._m0[25u].z, _1634));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1684 = fma(_888, cbModelParam._m0[13u].z, fma(_884, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880)) + cbModelParam._m0[13u].w;
        float _1688 = fma(_888, cbModelParam._m0[14u].z, fma(_884, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880)) + cbModelParam._m0[14u].w;
        float _1692 = fma(_888, cbModelParam._m0[15u].z, fma(_884, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880)) + cbModelParam._m0[15u].w;
        float _1695 = fma(_826, cbModelParam._m0[13u].z, fma(_825, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _824));
        float _1698 = fma(_826, cbModelParam._m0[14u].z, fma(_825, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _824));
        float _1701 = fma(_826, cbModelParam._m0[15u].z, fma(_825, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _824));
        float _1729;
        if (_1695 > 0.0)
        {
            _1729 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1729 = frontier_phi_14_12_ladder;
        }
        float _1902;
        if (_1698 > 0.0)
        {
            _1902 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1902 = frontier_phi_23_19_ladder;
        }
        float _2197;
        if (_1701 > 0.0)
        {
            _2197 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2197 = frontier_phi_35_30_ladder;
        }
        float _2199 = isnan(_1902) ? _1729 : (isnan(_1729) ? _1902 : min(_1729, _1902));
        float _2200 = isnan(_2197) ? _2199 : (isnan(_2199) ? _2197 : min(_2199, _2197));
        float _2204 = (_2200 * _1695) + _1684;
        float _2205 = (_2200 * _1698) + _1688;
        float _2206 = (_2200 * _1701) + _1692;
        float _2207 = _2200 * 9.9999997473787516355514526367188e-05;
        float _2209 = (-1.0) - _2207;
        float _2211 = _2207 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2206 > _2211) || ((_2206 < _2209) || ((_2205 > _2211) || ((_2205 < _2209) || ((_2204 < _2209) || (_2204 > _2211))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2206, cbModelParam._m0[9u].z, fma(_2205, cbModelParam._m0[9u].y, _2204 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2206, cbModelParam._m0[10u].z, fma(_2205, cbModelParam._m0[10u].y, _2204 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2206, cbModelParam._m0[11u].z, fma(_2205, cbModelParam._m0[11u].y, _2204 * cbModelParam._m0[11u].x))), _1635);
            frontier_phi_13_35_ladder = _2351.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2351.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2351.x * cbModelParam._m0[1u].y;
        }
        _1717 = frontier_phi_13_35_ladder_2;
        _1719 = frontier_phi_13_35_ladder_1;
        _1721 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_824, _825, _826), _1635);
        _1717 = _1705.x * cbModelParam._m0[1u].y;
        _1719 = _1705.y * cbModelParam._m0[1u].y;
        _1721 = _1705.z * cbModelParam._m0[1u].y;
    }
    float _1725 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _654);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1725 : min(cbModelParam._m0[25u].w, _1725));
    float _1817;
    float _1819;
    float _1821;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1781 = fma(_888, cbModelParam._m0[21u].z, fma(_884, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880)) + cbModelParam._m0[21u].w;
        float _1785 = fma(_888, cbModelParam._m0[22u].z, fma(_884, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880)) + cbModelParam._m0[22u].w;
        float _1789 = fma(_888, cbModelParam._m0[23u].z, fma(_884, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880)) + cbModelParam._m0[23u].w;
        float _1792 = fma(_826, cbModelParam._m0[21u].z, fma(_825, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _824));
        float _1795 = fma(_826, cbModelParam._m0[22u].z, fma(_825, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _824));
        float _1798 = fma(_826, cbModelParam._m0[23u].z, fma(_825, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _824));
        float _1907;
        if (_1792 > 0.0)
        {
            _1907 = abs((1.0 - _1781) / _1792);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1781 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1907 = frontier_phi_25_21_ladder;
        }
        float _2224;
        if (_1795 > 0.0)
        {
            _2224 = abs((1.0 - _1785) / _1795);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1785 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2224 = frontier_phi_37_32_ladder;
        }
        float _2562;
        if (_1798 > 0.0)
        {
            _2562 = abs((1.0 - _1789) / _1798);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1789 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2562 = frontier_phi_47_44_ladder;
        }
        float _2564 = isnan(_2224) ? _1907 : (isnan(_1907) ? _2224 : min(_1907, _2224));
        float _2565 = isnan(_2562) ? _2564 : (isnan(_2564) ? _2562 : min(_2564, _2562));
        float _2569 = (_2565 * _1792) + _1781;
        float _2570 = (_2565 * _1795) + _1785;
        float _2571 = (_2565 * _1798) + _1789;
        float _2572 = _2565 * 9.9999997473787516355514526367188e-05;
        float _2573 = (-1.0) - _2572;
        float _2575 = _2572 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2571 > _2575) || ((_2571 < _2573) || ((_2570 > _2575) || ((_2570 < _2573) || ((_2569 < _2573) || (_2569 > _2575))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2571, cbModelParam._m0[17u].z, fma(_2570, cbModelParam._m0[17u].y, _2569 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2571, cbModelParam._m0[18u].z, fma(_2570, cbModelParam._m0[18u].y, _2569 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2571, cbModelParam._m0[19u].z, fma(_2570, cbModelParam._m0[19u].y, _2569 * cbModelParam._m0[19u].x))), _1726);
            frontier_phi_22_47_ladder = _2693.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2693.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2693.x * cbModelParam._m0[1u].z;
        }
        _1817 = frontier_phi_22_47_ladder_2;
        _1819 = frontier_phi_22_47_ladder_1;
        _1821 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_824, _825, _826), _1726);
        _1817 = _1801.x * cbModelParam._m0[1u].z;
        _1819 = _1801.y * cbModelParam._m0[1u].z;
        _1821 = _1801.z * cbModelParam._m0[1u].z;
    }
    float _1834 = (((_851 * _800) + _852) * _816) * ((cbModelParam._m0[1u].w * (_1817 - _1717)) + _1717);
    float _1836 = (((_851 * _802) + _852) * _816) * ((cbModelParam._m0[1u].w * (_1819 - _1719)) + _1719);
    float _1838 = (((_851 * _803) + _852) * _816) * ((cbModelParam._m0[1u].w * (_1821 - _1721)) + _1721);
    float _1841 = fma(_1838, cbSceneParam._m0[89u].z, fma(_1836, cbSceneParam._m0[89u].y, _1834 * cbSceneParam._m0[89u].x));
    float _1844 = fma(_1838, cbSceneParam._m0[90u].z, fma(_1836, cbSceneParam._m0[90u].y, _1834 * cbSceneParam._m0[90u].x));
    float _1847 = fma(_1838, cbSceneParam._m0[91u].z, fma(_1836, cbSceneParam._m0[91u].y, _1834 * cbSceneParam._m0[91u].x));
    float _1881 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1885 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1889 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1893 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1894 = _1881 / _1893;
    float _1895 = _1885 / _1893;
    float _1896 = _1889 / _1893;
    float _2043;
    float _2044;
    float _2045;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1923 = ((uint(_1896 > cbSceneParam._m0[59u].y) + uint(_1896 > cbSceneParam._m0[59u].x)) + uint(_1896 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1924 = _1923 + 43u;
        uint _1932 = _1923 + 44u;
        uint _1940 = _1923 + 45u;
        uint _1948 = _1923 + 46u;
        float _1959 = fma(_1893, cbSceneParam._m0[_1924].w, fma(_1889, cbSceneParam._m0[_1924].z, fma(_1885, cbSceneParam._m0[_1924].y, _1881 * cbSceneParam._m0[_1924].x)));
        float _1963 = fma(_1893, cbSceneParam._m0[_1932].w, fma(_1889, cbSceneParam._m0[_1932].z, fma(_1885, cbSceneParam._m0[_1932].y, _1881 * cbSceneParam._m0[_1932].x)));
        float _1971 = fma(_1893, cbSceneParam._m0[_1948].w, fma(_1889, cbSceneParam._m0[_1948].z, fma(_1885, cbSceneParam._m0[_1948].y, _1881 * cbSceneParam._m0[_1948].x)));
        float _1976 = cbSceneParam._m0[33u].z * _1971;
        float _1978 = cbSceneParam._m0[33u].w * _1971;
        float _1981 = fma(_1893, cbSceneParam._m0[_1940].w, fma(_1889, cbSceneParam._m0[_1940].z, fma(_1885, cbSceneParam._m0[_1940].y, _1881 * cbSceneParam._m0[_1940].x))) / _1971;
        float _2029 = (cbSceneParam._m0[33u].x - sqrt(((_1895 * _1895) + (_1894 * _1894)) + (_1896 * _1896))) * cbSceneParam._m0[33u].y;
        float _4315 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2036 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1976 + _1959) / _1971, (_1978 + _1963) / _1971), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1978 + _1959) / _1971, (_1963 - _1976) / _1971), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1959 - _1976) / _1971, (_1963 - _1978) / _1971), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1959 - _1978) / _1971, (_1976 + _1963) / _1971), _1981), 0.0)).x), vec4(0.25)));
        _2043 = 1.0 - (_2036 * cbSceneParam._m0[34u].x);
        _2044 = 1.0 - (_2036 * cbSceneParam._m0[34u].y);
        _2045 = 1.0 - (_2036 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2043 = 1.0;
        _2044 = 1.0;
        _2045 = 1.0;
    }
    float _2109;
    float _2111;
    float _2113;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2097 = fma(_1893, cbSceneParam._m0[63u].w, fma(_1889, cbSceneParam._m0[63u].z, fma(_1885, cbSceneParam._m0[63u].y, _1881 * cbSceneParam._m0[63u].x)));
        float _2098 = fma(_1893, cbSceneParam._m0[60u].w, fma(_1889, cbSceneParam._m0[60u].z, fma(_1885, cbSceneParam._m0[60u].y, _1881 * cbSceneParam._m0[60u].x))) / _2097;
        float _2099 = fma(_1893, cbSceneParam._m0[61u].w, fma(_1889, cbSceneParam._m0[61u].z, fma(_1885, cbSceneParam._m0[61u].y, _1881 * cbSceneParam._m0[61u].x))) / _2097;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2098 >= cbSceneParam._m0[64u].x) && (_2099 >= cbSceneParam._m0[64u].y)) && (_2098 <= cbSceneParam._m0[64u].z)) && (_2099 <= cbSceneParam._m0[64u].w))
        {
            float _2237 = fma(_1893, cbSceneParam._m0[62u].w, fma(_1889, cbSceneParam._m0[62u].z, fma(_1885, cbSceneParam._m0[62u].y, _1881 * cbSceneParam._m0[62u].x))) / _2097;
            float _2241 = isnan(cbSceneParam._m0[41u].w) ? _2237 : (isnan(_2237) ? cbSceneParam._m0[41u].w : max(_2237, cbSceneParam._m0[41u].w));
            float _2284 = (cbSceneParam._m0[33u].x - sqrt(((_1895 * _1895) + (_1894 * _1894)) + (_1896 * _1896))) * cbSceneParam._m0[33u].y;
            float _4331 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
            float _2291 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2098, cbSceneParam._m0[33u].w + _2099), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2098, _2099 - cbSceneParam._m0[33u].z), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2098 - cbSceneParam._m0[33u].z, _2099 - cbSceneParam._m0[33u].w), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2098 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2099), _2241), 0.0)).x), vec4(0.25)));
            float _2295 = 1.0 - (_2291 * cbSceneParam._m0[34u].x);
            float _2296 = 1.0 - (_2291 * cbSceneParam._m0[34u].y);
            float _2297 = 1.0 - (_2291 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2297) ? _2045 : (isnan(_2045) ? _2297 : min(_2045, _2297));
            frontier_phi_34_33_ladder_1 = isnan(_2296) ? _2044 : (isnan(_2044) ? _2296 : min(_2044, _2296));
            frontier_phi_34_33_ladder_2 = isnan(_2295) ? _2043 : (isnan(_2043) ? _2295 : min(_2043, _2295));
        }
        else
        {
            frontier_phi_34_33_ladder = _2045;
            frontier_phi_34_33_ladder_1 = _2044;
            frontier_phi_34_33_ladder_2 = _2043;
        }
        _2109 = frontier_phi_34_33_ladder_2;
        _2111 = frontier_phi_34_33_ladder_1;
        _2113 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2109 = _2043;
        _2111 = _2044;
        _2113 = _2045;
    }
    uvec4 _2118 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _2120 = _2118.x * 14u;
    uint _2121 = _2120 + 13u;
    float _2128 = _816 + (-1.0);
    float _2133 = (cbLight._m0[_2121].x * _2128) + 1.0;
    float _2134 = (cbLight._m0[_2121].y * _2128) + 1.0;
    float _2135 = (cbLight._m0[_2121].z * _2128) + 1.0;
    float _2136 = (cbLight._m0[_2121].w * _2128) + 1.0;
    uint _2137 = _2120 + 5u;
    float _2143 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
    uint _2147 = _2120 + 4u;
    float _2156 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
    uint _2160 = _2120 | 1u;
    float _2171 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_651, _652, _653));
    float _2174 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_651, _652, _653));
    float _4367 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _4378 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2179 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2181 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2188 = ((cbLight._m0[_2137].x * _2143) * _2181) + (((cbLight._m0[_2147].x * _2109) * _2156) * _2179);
    float _2189 = ((_2143 * cbLight._m0[_2137].y) * _2181) + (((cbLight._m0[_2147].y * _2111) * _2156) * _2179);
    float _2190 = ((_2143 * cbLight._m0[_2137].z) * _2181) + (((cbLight._m0[_2147].z * _2113) * _2156) * _2179);
    uvec4 _2194 = floatBitsToUint(cbLight._m0[_2120 + 12u]);
    bool _2196 = _2194.x == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2196)
    {
        _2298 = _2188;
        _2300 = _2189;
        _2302 = _2190;
    }
    else
    {
        uint _2306 = _2120 + 6u;
        float _2322 = (dot(vec3(cbLight._m0[_2120 + 2u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4389 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2325 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2298 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2188;
        _2300 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2189;
        _2302 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2190;
    }
    bool _2305 = _2194.y == 0u;
    float _2360;
    float _2362;
    float _2364;
    if (_2305)
    {
        _2360 = _2298;
        _2362 = _2300;
        _2364 = _2302;
    }
    else
    {
        uint _2533 = _2120 + 7u;
        float _2549 = (dot(vec3(cbLight._m0[_2120 + 3u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2550 = _2549 * _2549;
        float _4405 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2551 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2552 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2360 = (((cbLight._m0[_2533].x * 0.3183098733425140380859375) * _2551) * _2552) + _2298;
        _2362 = (((cbLight._m0[_2533].y * 0.3183098733425140380859375) * _2551) * _2552) + _2300;
        _2364 = (((cbLight._m0[_2533].z * 0.3183098733425140380859375) * _2551) * _2552) + _2302;
    }
    uint _2367 = _2120 + 8u;
    float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _654) * 0.949999988079071044921875);
    float _2381 = _2380 * _2380;
    float _2382 = cbLight._m0[_2120].x + _730;
    float _2383 = cbLight._m0[_2120].y + _731;
    float _2384 = cbLight._m0[_2120].z + _732;
    float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
    float _2389 = _2388 * _2382;
    float _2390 = _2388 * _2383;
    float _2391 = _2388 * _2384;
    float _2392 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2120].xyz));
    float _4421 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _4432 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _2396 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2397 = dot(vec3(_651, _652, _653), vec3(_2389, _2390, _2391));
    float _4443 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2401 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2389, _2390, _2391));
    float _4454 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = _2381 * _2381;
    float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
    float _2417 = exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0);
    float _2418 = 0.959999978542327880859375 - _797;
    float _2420 = 0.959999978542327880859375 - _798;
    float _2421 = 0.959999978542327880859375 - _799;
    float _2428 = 1.0 - _2381;
    float _2439 = (0.5 / (((_2396 * ((_2395 * _2428) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2396 * _2428) + _2381) * _2395))) * _2395;
    float _4465 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2441 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
    uint _2455 = _2120 + 9u;
    float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _654) * 0.949999988079071044921875);
    float _2467 = _2466 * _2466;
    float _2468 = cbLight._m0[_2160].x + _730;
    float _2469 = cbLight._m0[_2160].y + _731;
    float _2470 = cbLight._m0[_2160].z + _732;
    float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
    float _2475 = _2474 * _2468;
    float _2476 = _2474 * _2469;
    float _2477 = _2474 * _2470;
    float _2478 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2160].xyz));
    float _4476 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2482 = dot(vec3(_651, _652, _653), vec3(_2475, _2476, _2477));
    float _4487 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2486 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2475, _2476, _2477));
    float _4498 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2490 = _2467 * _2467;
    float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
    float _2501 = exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0);
    float _2508 = 1.0 - _2467;
    float _2518 = (0.5 / (((_2396 * ((_2481 * _2508) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2396 * _2508) + _2467) * _2481))) * _2481;
    float _4509 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2520 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
    float _2530 = (((((_2501 * _2418) + _800) * cbLight._m0[_2455].x) * _2520) * _2143) + ((((cbLight._m0[_2367].x * _2109) * ((_2417 * _2418) + _800)) * _2441) * _2156);
    float _2531 = (((((_2501 * _2420) + _802) * cbLight._m0[_2455].y) * _2520) * _2143) + ((((cbLight._m0[_2367].y * _2111) * ((_2417 * _2420) + _802)) * _2441) * _2156);
    float _2532 = (((((_2501 * _2421) + _803) * cbLight._m0[_2455].z) * _2520) * _2143) + ((((cbLight._m0[_2367].z * _2113) * ((_2417 * _2421) + _803)) * _2441) * _2156);
    float _2588;
    float _2590;
    float _2592;
    if (_2196)
    {
        _2588 = _2530;
        _2590 = _2531;
        _2592 = _2532;
    }
    else
    {
        uint _2594 = _2120 + 2u;
        uint _2598 = _2120 + 10u;
        float _2612 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2594].w)) * _654) * 0.949999988079071044921875);
        float _2613 = _2612 * _2612;
        float _2614 = cbLight._m0[_2594].x + _730;
        float _2615 = cbLight._m0[_2594].y + _731;
        float _2616 = cbLight._m0[_2594].z + _732;
        float _2620 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
        float _2621 = _2620 * _2614;
        float _2622 = _2620 * _2615;
        float _2623 = _2620 * _2616;
        float _2624 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2594].xyz));
        float _4520 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2628 = dot(vec3(_651, _652, _653), vec3(_2621, _2622, _2623));
        float _4531 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2632 = dot(vec3(cbLight._m0[_2594].xyz), vec3(_2621, _2622, _2623));
        float _4542 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2636 = _2613 * _2613;
        float _2640 = ((_2631 * _2631) * (_2636 + (-1.0))) + 1.0;
        float _2647 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
        float _2654 = 1.0 - _2613;
        float _2664 = (0.5 / (((_2396 * ((_2627 * _2654) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2396 * _2654) + _2613) * _2627))) * _2627;
        float _4553 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2666 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2636 / ((_2640 * _2640) * 3.141590118408203125));
        float _2667 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2588 = (((((_2647 * _2418) + _800) * cbLight._m0[_2598].x) * _2666) * _2667) + _2530;
        _2590 = (((((_2647 * _2420) + _802) * cbLight._m0[_2598].y) * _2666) * _2667) + _2531;
        _2592 = (((((_2647 * _2421) + _803) * cbLight._m0[_2598].z) * _2666) * _2667) + _2532;
    }
    float _2698;
    float _2700;
    float _2702;
    if (_2305)
    {
        _2698 = _2588;
        _2700 = _2590;
        _2702 = _2592;
    }
    else
    {
        uint _2709 = _2120 + 3u;
        uint _2713 = _2120 + 11u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _654) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _730;
        float _2730 = cbLight._m0[_2709].y + _731;
        float _2731 = cbLight._m0[_2709].z + _732;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2709].xyz));
        float _4569 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2743 = dot(vec3(_651, _652, _653), vec3(_2736, _2737, _2738));
        float _4580 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4591 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2762 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
        float _2769 = 1.0 - _2728;
        float _2779 = (0.5 / (((_2396 * ((_2742 * _2769) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2396 * _2769) + _2728) * _2742))) * _2742;
        float _4602 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2698 = (((((_2762 * _2418) + _800) * cbLight._m0[_2713].x) * _2781) * _2782) + _2588;
        _2700 = (((((_2762 * _2420) + _802) * cbLight._m0[_2713].y) * _2781) * _2782) + _2590;
        _2702 = (((((_2762 * _2421) + _803) * cbLight._m0[_2713].z) * _2781) * _2782) + _2592;
    }
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    if (_2118.y == 0u)
    {
        uvec4 _2803 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2804 = _2803.x;
        uint _2815 = uint((float(_2803.y) * floor(float(uint(cbSceneParam._m0[85u].y * _739) / _2804))) + floor(float(uint(cbSceneParam._m0[85u].x * _738) / _2804)));
        float _2825 = (log2(_1896 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2826 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        uint _2829 = uint(isnan(14.0) ? _2826 : (isnan(_2826) ? 14.0 : min(_2826, 14.0)));
        uvec4 _2834 = texelFetch(g_lightClusterGridBuffer, int(((_2829 << 2u) + (_2815 << 6u)) >> 2u));
        uint _2835 = _2834.x;
        uint _2836 = _2803.z;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((((1u << ((_2836 >> 4u) & 15u)) + 4294967295u) & _2835) == 0u) || ((_2836 & 240u) == 0u))
        {
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
        }
        else
        {
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            uint _3066 = 0u;
            uint _3075;
            bool _3076;
            for (;;)
            {
                _3075 = texelFetch(g_lightClassification, int((((_2829 << 5u) + (_2815 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                _3076 = _3075 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3076)
                {
                    frontier_phi_66_pred = _3065;
                    frontier_phi_66_pred_1 = _3064;
                    frontier_phi_66_pred_2 = _3063;
                    frontier_phi_66_pred_3 = _3062;
                    frontier_phi_66_pred_4 = _3061;
                    frontier_phi_66_pred_5 = _3060;
                }
                else
                {
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    uint _3190;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3062;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3075;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    for (;;)
                    {
                        uint _3194 = uint(findLSB(_3190)) + (_3066 << 5u);
                        uint _3191 = (_3190 + 4294967295u) & _3190;
                        uint _3196 = _3194 * 48u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 3u)).x));
                        uint _3216 = (_3194 * 48u) + 4u;
                        vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 3u)).x));
                        uint _3235 = (_3194 * 48u) + 8u;
                        vec3 _3246 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x));
                        float _3250 = _3210.x - _1894;
                        float _3251 = _3210.y - _1895;
                        float _3252 = _3210.z - _1896;
                        float _3253 = dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252));
                        float _3256 = inversesqrt(_3253);
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3260 = dot(vec3(_757, _760, _763), vec3(_3257, _3258, _3259));
                        float _3265 = 1.0 - (_3253 * _3210.w);
                        float _4628 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3267 = sqrt(_3253) * _3229.w;
                        float _3270 = 1.39999997615814208984375 / (_3267 + 1.39999997615814208984375);
                        float _3271 = _3270 * _3270;
                        float _3274 = ((1.0 - _3271) * _3260) + _3271;
                        float _3277 = _3267 * _3267;
                        float _3281 = ((isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))) * _3266) / ((_3277 * 0.699999988079071044921875) + 1.0);
                        float _3285 = (-0.0) - _1894;
                        float _3286 = (-0.0) - _1895;
                        float _3287 = (-0.0) - _1896;
                        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                        float _3292 = _3291 * _3285;
                        float _3293 = _3291 * _3286;
                        float _3294 = _3291 * _3287;
                        float _3301 = exp2(log2(1.0 / ((_3277 * 3.5) + 5.0)) * 0.25);
                        float _3302 = 1.0 - _832;
                        float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                        float _3310 = _3309 * _3309;
                        float _3311 = _3310 * _3310;
                        float _3312 = _3292 + _3257;
                        float _3313 = _3293 + _3258;
                        float _3314 = _3294 + _3259;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3322 = dot(vec3(_757, _760, _763), vec3(_3292, _3293, _3294));
                        float _4644 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3326 = dot(vec3(_757, _760, _763), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                        float _4655 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                        float _3334 = _3270 * _3310;
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3260) + _3335;
                        float _4666 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3340 = 1.0 - _3310;
                        float _3350 = (0.5 / (((_3339 * ((_3325 * _3340) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3310) * _3325))) * _3339;
                        float _4677 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3361 = (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3333 * _3333) * ((_3277 * 2.1991131305694580078125) + 3.141590118408203125))) * _3266;
                        _3119 = (_3281 * _3229.x) + _3187;
                        _3120 = (_3281 * _3229.y) + _3188;
                        _3121 = (_3281 * _3229.z) + _3189;
                        _3116 = (_3361 * _3246.x) + _3184;
                        _3117 = (_3361 * _3246.y) + _3185;
                        _3118 = (_3361 * _3246.z) + _3186;
                        if (_3191 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3118;
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3191;
                        }
                    }
                    frontier_phi_66_pred = _3121;
                    frontier_phi_66_pred_1 = _3120;
                    frontier_phi_66_pred_2 = _3119;
                    frontier_phi_66_pred_3 = _3118;
                    frontier_phi_66_pred_4 = _3117;
                    frontier_phi_66_pred_5 = _3116;
                }
                _2926 = frontier_phi_66_pred;
                _2924 = frontier_phi_66_pred_1;
                _2922 = frontier_phi_66_pred_2;
                _2920 = frontier_phi_66_pred_3;
                _2918 = frontier_phi_66_pred_4;
                _2916 = frontier_phi_66_pred_5;
                uint _3067 = _3066 + 1u;
                if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3060 = _2916;
                    _3061 = _2918;
                    _3062 = _2920;
                    _3063 = _2922;
                    _3064 = _2924;
                    _3065 = _2926;
                    _3066 = _3067;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
        }
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.z;
        uint _2932 = (_2930 >> 8u) & 15u;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        if (((4294967295u << _2932) & _2835) == 0u)
        {
            _3028 = _2915;
            _3030 = _2917;
            _3032 = _2919;
            _3034 = _2921;
            _3036 = _2923;
            _3038 = _2925;
        }
        else
        {
            float _3053 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
            float _3054 = _3053 * _1894;
            float _3055 = _3053 * _1895;
            float _3056 = _3053 * _1896;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2932 < ((_2930 >> 12u) & 15u))
            {
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3167 = _2915;
                float _3168 = _2917;
                float _3169 = _2919;
                float _3170 = _2921;
                float _3171 = _2923;
                float _3172 = _2925;
                uint _3173 = _2932;
                uint _3182;
                bool _3183;
                for (;;)
                {
                    _3182 = texelFetch(g_lightClassification, int((((_2829 << 5u) + (_2815 << 9u)) + (_3173 << 2u)) >> 2u)).x;
                    _3183 = _3182 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3183)
                    {
                        frontier_phi_72_pred = _3172;
                        frontier_phi_72_pred_1 = _3171;
                        frontier_phi_72_pred_2 = _3170;
                        frontier_phi_72_pred_3 = _3169;
                        frontier_phi_72_pred_4 = _3168;
                        frontier_phi_72_pred_5 = _3167;
                    }
                    else
                    {
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3379 = _3167;
                        float _3380 = _3168;
                        float _3381 = _3169;
                        float _3382 = _3170;
                        float _3383 = _3171;
                        float _3384 = _3172;
                        uint _3385 = _3182;
                        uint _3386;
                        vec4 _3411;
                        float _3412;
                        vec4 _3427;
                        vec3 _3439;
                        vec4 _3454;
                        vec4 _3470;
                        float _3516;
                        bool _3517;
                        for (;;)
                        {
                            uint _3396 = ((_3173 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3385));
                            _3386 = (_3385 + 4294967295u) & _3385;
                            uint _3398 = _3396 * 40u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            _3412 = _3411.w;
                            uint _3414 = (_3396 * 40u) + 4u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3396 * 40u) + 8u;
                            _3439 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x));
                            uint _3441 = (_3396 * 40u) + 16u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3457 = (_3396 * 40u) + 20u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3396 * 40u) + 24u;
                            vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3491 = (_3396 * 40u) + 28u;
                            vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            _3516 = fma(_1896, _3504.z, fma(_1895, _3504.y, _3504.x * _1894)) + _3504.w;
                            _3517 = !((fma(_1896, _3485.z, fma(_1895, _3485.y, _3485.x * _1894)) + _3485.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3517)
                            {
                                float _3544 = _3411.x - _1894;
                                float _3545 = _3411.y - _1895;
                                float _3546 = _3411.z - _1896;
                                float _3547 = dot(vec3(_3544, _3545, _3546), vec3(_3544, _3545, _3546));
                                float _3550 = inversesqrt(_3547);
                                float _3551 = _3550 * _3544;
                                float _3552 = _3550 * _3545;
                                float _3553 = _3550 * _3546;
                                float _3557 = 1.0 - (_3547 / (_3412 * _3412));
                                float _4688 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3562 = sqrt(_3547) * _3427.w;
                                float _3564 = 1.39999997615814208984375 / (_3562 + 1.39999997615814208984375);
                                float _3565 = _3564 * _3564;
                                float _3568 = ((1.0 - _3565) * dot(vec3(_3551, _3552, _3553), vec3(_757, _760, _763))) + _3565;
                                float _3571 = _3562 * _3562;
                                float _3575 = (fma(_1896, _3454.z, fma(_1895, _3454.y, _3454.x * _1894)) + _3454.w) / _3516;
                                float _3576 = (fma(_1896, _3470.z, fma(_1895, _3470.y, _3470.x * _1894)) + _3470.w) / _3516;
                                float _3580 = 1.0 - dot(vec2(_3575, _3576), vec2(_3575, _3576));
                                float _4704 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3581 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3582 = _3581 * (((isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0))) * _3558) / ((_3571 * 0.699999988079071044921875) + 1.0));
                                float _3594 = exp2(log2(1.0 / ((_3571 * 3.5) + 5.0)) * 0.25);
                                float _3595 = 1.0 - _832;
                                float _3602 = sqrt(1.0 - ((1.0 - (_3595 * _3595)) * (1.0 - (_3594 * _3594))));
                                float _3603 = _3602 * _3602;
                                float _3604 = _3603 * _3603;
                                float _3605 = _3551 - _3054;
                                float _3606 = _3552 - _3055;
                                float _3607 = _3553 - _3056;
                                float _3611 = inversesqrt(dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607)));
                                float _3615 = dot(vec3(_757, _760, _763), vec3((-0.0) - _3054, (-0.0) - _3055, (-0.0) - _3056));
                                float _4715 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3618 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3619 = dot(vec3(_757, _760, _763), vec3(_3611 * _3605, _3611 * _3606, _3611 * _3607));
                                float _4726 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3622 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3626 = ((_3622 * _3622) * (_3604 + (-1.0))) + 1.0;
                                float _3627 = _3564 * _3603;
                                float _3628 = _3627 * _3627;
                                float _3634 = ((1.0 - _3628) * dot(vec3(_757, _760, _763), vec3(_3551, _3552, _3553))) + _3628;
                                float _4737 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3636 = 1.0 - _3603;
                                float _3646 = (0.5 / (((_3635 * ((_3618 * _3636) + _3603)) + 9.9999999392252902907785028219223e-09) + (((_3635 * _3636) + _3603) * _3618))) * _3635;
                                float _4748 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3656 = (_3581 * _3558) * (((_3604 * 3.1415927410125732421875) * (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) / ((_3626 * _3626) * ((_3571 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3582 * _3427.y;
                                frontier_phi_78_pred_1 = _3582 * _3427.x;
                                frontier_phi_78_pred_2 = _3656 * _3439.z;
                                frontier_phi_78_pred_3 = _3656 * _3439.y;
                                frontier_phi_78_pred_4 = _3656 * _3439.x;
                                frontier_phi_78_pred_5 = _3582 * _3427.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3664 = frontier_phi_78_pred;
                            _3663 = frontier_phi_78_pred_1;
                            _3662 = frontier_phi_78_pred_2;
                            _3661 = frontier_phi_78_pred_3;
                            _3660 = frontier_phi_78_pred_4;
                            _3665 = frontier_phi_78_pred_5;
                            _3369 = _3663 + _3382;
                            _3370 = _3664 + _3383;
                            _3371 = _3665 + _3384;
                            _3366 = _3660 + _3379;
                            _3367 = _3661 + _3380;
                            _3368 = _3662 + _3381;
                            if (_3386 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3386;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3371;
                        frontier_phi_72_pred_1 = _3370;
                        frontier_phi_72_pred_2 = _3369;
                        frontier_phi_72_pred_3 = _3368;
                        frontier_phi_72_pred_4 = _3367;
                        frontier_phi_72_pred_5 = _3366;
                    }
                    _3039 = frontier_phi_72_pred;
                    _3037 = frontier_phi_72_pred_1;
                    _3035 = frontier_phi_72_pred_2;
                    _3033 = frontier_phi_72_pred_3;
                    _3031 = frontier_phi_72_pred_4;
                    _3029 = frontier_phi_72_pred_5;
                    uint _3174 = _3173 + 1u;
                    if (_3174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3167 = _3029;
                        _3168 = _3031;
                        _3169 = _3033;
                        _3170 = _3035;
                        _3171 = _3037;
                        _3172 = _3039;
                        _3173 = _3174;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3039;
                frontier_phi_60_61_ladder_1 = _3037;
                frontier_phi_60_61_ladder_2 = _3033;
                frontier_phi_60_61_ladder_3 = _3031;
                frontier_phi_60_61_ladder_4 = _3029;
                frontier_phi_60_61_ladder_5 = _3035;
            }
            else
            {
                frontier_phi_60_61_ladder = _2925;
                frontier_phi_60_61_ladder_1 = _2923;
                frontier_phi_60_61_ladder_2 = _2919;
                frontier_phi_60_61_ladder_3 = _2917;
                frontier_phi_60_61_ladder_4 = _2915;
                frontier_phi_60_61_ladder_5 = _2921;
            }
            _3028 = frontier_phi_60_61_ladder_4;
            _3030 = frontier_phi_60_61_ladder_3;
            _3032 = frontier_phi_60_61_ladder_2;
            _3034 = frontier_phi_60_61_ladder_5;
            _3036 = frontier_phi_60_61_ladder_1;
            _3038 = frontier_phi_60_61_ladder;
        }
        float _3043 = isnan(1.0) ? _816 : (isnan(_816) ? 1.0 : min(_816, 1.0));
        _2848 = (_3043 * _3034) + _2360;
        _2850 = (_3043 * _3036) + _2362;
        _2852 = (_3043 * _3038) + _2364;
        _2854 = ((_3028 * _800) * _3043) + _2698;
        _2856 = ((_3030 * _802) * _3043) + _2700;
        _2858 = ((_3032 * _803) * _3043) + _2702;
    }
    else
    {
        _2848 = _2360;
        _2850 = _2362;
        _2852 = _2364;
        _2854 = _2698;
        _2856 = _2700;
        _2858 = _2702;
    }
    float _4764 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4775 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4786 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    uint _2878 = _247 + 6u;
    float _2886 = _738 / cbSceneParam._m0[86u].x;
    float _2887 = _739 / cbSceneParam._m0[86u].y;
    vec4 _2901 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, (log2((isnan(cbSceneParam._m0[77u].w) ? _673 : (isnan(_673) ? cbSceneParam._m0[77u].w : min(_673, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2903 = _2901.x;
    float _2904 = _2901.y;
    float _2905 = _2901.z;
    float _2906 = _2901.w;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    if (_673 > cbSceneParam._m0[78u].w)
    {
        float _2940 = isnan(_673) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _673 : min(cbSceneParam._m0[80u].w, _673));
        float _2941 = _2940 / _673;
        float _2952 = _2941 * _723;
        float _2953 = _724 * _2941;
        float _2954 = (-0.0) - _2953;
        float _2956 = _2941 * _725;
        float _2958 = (cbSceneParam._m0[77u].w * _2954) / _2940;
        float _2959 = _2958 + cbSceneParam._m0[79u].w;
        float _2960 = cbSceneParam._m0[79u].w - _2953;
        float _2966 = sqrt(((_2952 * _2952) + (_2953 * _2953)) + (_2956 * _2956));
        float _2969 = (1.0 - (cbSceneParam._m0[77u].w / _2940)) * _2966;
        float _2974 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2976 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3129;
        if (abs((_2954 - _2958) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3129 = ((((_2959 > 0.0) ? exp2(_2974 * _2959) : (2.0 - exp2(_2976 * _2959))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2969;
        }
        else
        {
            float _3089 = 1.0 / cbSceneParam._m0[80u].x;
            float _3090 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : max(_2959, _2960));
            float _3091 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : min(_2959, _2960));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            float _3101 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : min(_3091, 0.0));
            _3129 = ((abs(_2966 / _2954) * cbSceneParam._m0[80u].y) * ((((_3100 - _3101) * 2.0) - ((exp2(_2974 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0)))) - exp2(_2974 * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))))) * _3089)) - ((exp2(_2976 * _3100) - exp2(_2976 * _3101)) * _3089))) + (_2969 * cbSceneParam._m0[80u].z);
        }
        vec4 _3131 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, 1.0), 0.0);
        float _3140 = exp2((_3129 * (-1.44269502162933349609375)) * (1.0 - _3131.w));
        float _3141 = log2(_3140);
        float _3157 = log2(_2906);
        _2978 = (exp2(_3157 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].x)) * _3131.x) / cbSceneParam._m0[78u].x)) + _2903;
        _2980 = (exp2(_3157 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].y)) * _3131.y) / cbSceneParam._m0[78u].y)) + _2904;
        _2982 = (exp2(_3157 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].z)) * _3131.z) / cbSceneParam._m0[78u].z)) + _2905;
        _2984 = _3140 * _2906;
    }
    else
    {
        _2978 = _2903;
        _2980 = _2904;
        _2982 = _2905;
        _2984 = _2906;
    }
    float _2996 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2997 = _2996 == 3.0;
    float _2998 = log2(_2984);
    float _3005 = exp2(_2998 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2848 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _816))) + ((_2854 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1624)) * cbPerFrame._m0[3u].x));
    float _3006 = exp2(_2998 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2850 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _816))) + ((_2856 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1624)) * cbPerFrame._m0[3u].x));
    float _3007 = exp2(_2998 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2852 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _816))) + ((_2858 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1624)) * cbPerFrame._m0[3u].x));
    float _3016 = (_2996 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3016 * (_2997 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2978)));
    SV_Target.y = _3016 * (_2997 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2980)));
    SV_Target.z = _3016 * (_2997 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2982)));
    SV_Target.w = cbInstanceData._m0[_2878].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2878].w;
}


