#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1275;
float _3939;
float _3940;
float _3941;
float _3942;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _366 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _366) * cbMtdParam._m0[24u].y) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3951 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _391 = (_384 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _392 = (_384 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _393 = (_384 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _459 = _455.z;
    float _468 = ((_438.z - _459) * _384) + _459;
    float _471 = ((((_438.x - _457) * _384) + _457) * 2.0) + (-1.0);
    float _472 = ((((_438.y - _458) * _384) + _458) * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3962 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _478 = sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _510 = (_471 + ((((_411.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_498.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _511 = (_472 + ((((_411.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_498.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _514 = fma(_478, _234, fma(_511, _241, _510 * _227));
    float _517 = fma(_478, _235, fma(_511, _242, _510 * _228));
    float _520 = fma(_478, _236, fma(_511, _243, _510 * _229));
    float _524 = inversesqrt(dot(vec3(_514, _517, _520), vec3(_514, _517, _520)));
    vec4 _551 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _553 = _551.x;
    float _554 = 1.0 - _553;
    float _560 = (cbMtdParam._m0[19u].x + dot(vec4(_524 * _514, _524 * _517, _524 * _520, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_553 - _554) * cbMtdParam._m0[24u].z) + _554) * cbMtdParam._m0[21u].z);
    float _3973 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _568 = (_561 * (cbMtdParam._m0[17u].x - _391)) + _391;
    float _569 = (_561 * (cbMtdParam._m0[17u].y - _392)) + _392;
    float _570 = (_561 * (cbMtdParam._m0[17u].z - _393)) + _393;
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _596 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _598 = _596.x;
    float _616 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _598) * _384) + _598;
    float _620 = ((_582.x - _616) * cbMtdParam._m0[19u].z) + _616;
    float _622 = _620 - (_620 * _561);
    float _627 = (((_411.z - _468) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _468;
    float _631 = ((_498.z - _627) * cbMtdParam._m0[19u].w) + _627;
    vec4 _644 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _651 = (_644.x * 2.0) + (-1.0);
    float _652 = (_644.y * 2.0) + (-1.0);
    float _653 = dot(vec2(_651, _652), vec2(_651, _652));
    float _3984 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _661 = ((_644.z - _631) * _561) + _631;
    float _671 = ((sqrt(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) - _478) * _561) + _478;
    float _674 = (((_651 - _510) * _561) + _510) + (cbMtdParam._m0[21u].x * _510);
    float _675 = (((_652 - _511) * _561) + _511) + (cbMtdParam._m0[21u].x * _511);
    float _680 = cbMtdParam._m0[22u].x + _498.w;
    float _683 = fma(_671, _234, fma(_675, _241, _674 * _227));
    float _686 = fma(_671, _235, fma(_675, _242, _674 * _228));
    float _689 = fma(_671, _236, fma(_675, _243, _674 * _229));
    float _693 = inversesqrt(dot(vec3(_683, _686, _689), vec3(_683, _686, _689)));
    float _694 = _693 * _683;
    float _695 = _693 * _686;
    float _696 = _693 * _689;
    float _3995 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _697 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _4017 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4028 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4039 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4050 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _702 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _716 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _767 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _757);
    float _768 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _757);
    float _769 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _757);
    float _773 = inversesqrt(dot(vec3(_767, _768, _769), vec3(_767, _768, _769)));
    float _774 = _767 * _773;
    float _775 = _768 * _773;
    float _776 = _769 * _773;
    vec4 _781 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _783 = _781.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _955 = sqrt(((_767 * _767) + (_768 * _768)) + (_769 * _769));
        float _961 = (cbMatDynParam._m0[5u].x * _955) + cbMatDynParam._m0[5u].y;
        float _4061 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _966 = (cbMatDynParam._m0[5u].z * _955) + cbMatDynParam._m0[5u].w;
        float _4072 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) - _962)) + _962) < ((_783 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _794 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _795 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _813 = fma(_696, cbSceneParam._m0[5u].z, fma(_695, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _694));
    float _816 = fma(_696, cbSceneParam._m0[6u].z, fma(_695, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _694));
    float _819 = fma(_696, cbSceneParam._m0[7u].z, fma(_695, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _694));
    uint _832 = _246 + 9u;
    uint _833 = _832 + uint(cbMatDynParam._m0[0u].w);
    float _839 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_833].x;
    float _840 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_833].y;
    float _841 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_833].z;
    float _4083 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _845 = 1.0 - _702;
    float _846 = _842 * _845;
    float _847 = _843 * _845;
    float _848 = _844 * _845;
    float _853 = (_842 + (-0.039999999105930328369140625)) * _702;
    float _854 = (_843 + (-0.039999999105930328369140625)) * _702;
    float _855 = (_844 + (-0.039999999105930328369140625)) * _702;
    float _856 = _853 + 0.039999999105930328369140625;
    float _858 = _854 + 0.039999999105930328369140625;
    float _859 = _855 + 0.039999999105930328369140625;
    vec4 _868 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _794, cbSceneParam._m0[86u].y * _795));
    float _872 = ((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * TEXCOORD_5.w) * _868.x;
    float _873 = dot(vec3(_694, _695, _696), vec3(_774, _775, _776));
    float _876 = _873 * 2.0;
    float _880 = (_876 * _694) - _774;
    float _881 = (_876 * _695) - _775;
    float _882 = (_876 * _696) - _776;
    float _886 = abs(dot(vec3(_774, _775, _776), vec3(_694, _695, _696)));
    float _4116 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _888 = sqrt(_697);
    float _901 = exp2((_888 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_888 * 3.0));
    float _907 = (1.0 - _901) * ((_888 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _908 = _901 * _888;
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1274;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _999 = fma(_944, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _936));
        float _1003 = fma(_944, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _936));
        float _1007 = fma(_944, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _936));
        float _1032 = _936 + _694;
        float _1033 = _940 + _695;
        float _1034 = _944 + _696;
        float _1044 = fma(_1034, cbModelParam._m0[26u].z, fma(_1033, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032)) - _999;
        float _1045 = fma(_1034, cbModelParam._m0[27u].z, fma(_1033, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032)) - _1003;
        float _1046 = fma(_1034, cbModelParam._m0[28u].z, fma(_1033, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032)) - _1007;
        float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
        float _1063 = ((_1050 * _1044) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_999 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1050 * _1045) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1003 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1050 * _1046) / cbModelParam._m0[34u].z) + ((((((_1007 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        float _1102 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1068.x + (-0.5));
        float _1104 = _1102 * (_1068.y + (-0.5));
        float _1105 = _1102 * (_1068.z + (-0.5));
        float _1112 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1075.x + (-0.5));
        float _1114 = _1112 * (_1075.y + (-0.5));
        float _1115 = _1112 * (_1075.z + (-0.5));
        float _1122 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1082.x + (-0.5));
        float _1124 = _1122 * (_1082.y + (-0.5));
        float _1125 = _1122 * (_1082.z + (-0.5));
        float _1132 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1089.x + (-0.5));
        float _1134 = _1132 * (_1089.y + (-0.5));
        float _1135 = _1132 * (_1089.z + (-0.5));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = _1103 * 0.5;
        float _1140 = _1113 * 0.5;
        float _1141 = _1123 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1156 = (dot(vec3(_694, _695, _696), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1166 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _4164 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1168 + 1.0))) + _1173) * _1136;
        float _1183 = _1104 * 0.5;
        float _1184 = _1114 * 0.5;
        float _1185 = _1124 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_694, _695, _696), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _4197 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1210 + 1.0))) + _1215) * _1137;
        float _1225 = _1105 * 0.5;
        float _1226 = _1115 * 0.5;
        float _1227 = _1125 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_694, _695, _696), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4230 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1252 + 1.0))) + _1257) * _1138;
        _1274 = _1105;
        _1276 = _1104;
        _1277 = _1103;
        _1278 = _1115;
        _1279 = _1114;
        _1280 = _1113;
        _1281 = _1125;
        _1282 = _1124;
        _1283 = _1123;
        _1284 = _1138;
        _1285 = _1137;
        _1286 = _1136;
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
    }
    else
    {
        _1274 = _1275;
        _1276 = _1275;
        _1277 = _1275;
        _1278 = _1275;
        _1279 = _1275;
        _1280 = _1275;
        _1281 = _1275;
        _1282 = _1275;
        _1283 = _1275;
        _1284 = _1275;
        _1285 = _1275;
        _1286 = _1275;
        _1287 = 0.0;
        _1288 = 0.0;
        _1289 = 0.0;
    }
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1317 = fma(_944, cbModelParam._m0[30u].z, fma(_940, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936));
        float _1321 = fma(_944, cbModelParam._m0[31u].z, fma(_940, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936));
        float _1325 = fma(_944, cbModelParam._m0[32u].z, fma(_940, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936));
        float _1348 = _936 + _694;
        float _1349 = _940 + _695;
        float _1350 = _944 + _696;
        float _1360 = fma(_1350, cbModelParam._m0[30u].z, fma(_1349, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1348)) - _1317;
        float _1361 = fma(_1350, cbModelParam._m0[31u].z, fma(_1349, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1348)) - _1321;
        float _1362 = fma(_1350, cbModelParam._m0[32u].z, fma(_1349, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1348)) - _1325;
        float _1366 = inversesqrt(dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362)));
        float _1379 = ((_1366 * _1360) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1317 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1366 * _1361) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1321 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1366 * _1362) / cbModelParam._m0[35u].z) + ((((((_1325 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        float _1416 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1383.x + (-0.5));
        float _1418 = _1416 * (_1383.y + (-0.5));
        float _1419 = _1416 * (_1383.z + (-0.5));
        float _1426 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1390.x + (-0.5));
        float _1428 = _1426 * (_1390.y + (-0.5));
        float _1429 = _1426 * (_1390.z + (-0.5));
        float _1436 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1397.x + (-0.5));
        float _1438 = _1436 * (_1397.y + (-0.5));
        float _1439 = _1436 * (_1397.z + (-0.5));
        float _1446 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1404.x + (-0.5));
        float _1448 = _1446 * (_1404.y + (-0.5));
        float _1449 = _1446 * (_1404.z + (-0.5));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = _1417 * 0.5;
        float _1454 = _1427 * 0.5;
        float _1455 = _1437 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_694, _695, _696), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4293 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1480 + 1.0))) + _1485) * _1450;
        float _1495 = _1418 * 0.5;
        float _1496 = _1428 * 0.5;
        float _1497 = _1438 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_694, _695, _696), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4326 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1522 + 1.0))) + _1527) * _1451;
        float _1537 = _1419 * 0.5;
        float _1538 = _1429 * 0.5;
        float _1539 = _1439 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_694, _695, _696), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4359 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1564 + 1.0))) + _1569) * _1452;
        _1586 = _1419;
        _1587 = _1418;
        _1588 = _1417;
        _1589 = _1429;
        _1590 = _1428;
        _1591 = _1427;
        _1592 = _1439;
        _1593 = _1438;
        _1594 = _1437;
        _1595 = _1452;
        _1596 = _1451;
        _1597 = _1450;
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
    }
    else
    {
        _1586 = _1275;
        _1587 = _1275;
        _1588 = _1275;
        _1589 = _1275;
        _1590 = _1275;
        _1591 = _1275;
        _1592 = _1275;
        _1593 = _1275;
        _1594 = _1275;
        _1595 = _1275;
        _1596 = _1275;
        _1597 = _1275;
        _1598 = 0.0;
        _1599 = 0.0;
        _1600 = 0.0;
    }
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1287)) + _1287;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1288)) + _1288;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1289)) + _1289;
    float _1633 = fma(_1612, cbSceneParam._m0[89u].z, fma(_1611, cbSceneParam._m0[89u].y, _1610 * cbSceneParam._m0[89u].x));
    float _1636 = fma(_1612, cbSceneParam._m0[90u].z, fma(_1611, cbSceneParam._m0[90u].y, _1610 * cbSceneParam._m0[90u].x));
    float _1639 = fma(_1612, cbSceneParam._m0[91u].z, fma(_1611, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1610));
    float _1654 = _880 * 0.5;
    float _1655 = _881 * 0.5;
    float _1656 = _882 * 0.5;
    float _1657 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1660 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1663 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1697;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1670 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1274, _1278, _1281, _1284));
        float _1674 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1276, _1279, _1282, _1285));
        float _1678 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1685 = dot(vec4(cbModelParam._m0[39u]), vec4(_1654, _1655, _1656, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1685) ? 0.0 : (isnan(0.0) ? _1685 : max(0.0, _1685))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1708;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1699 = dot(vec4(cbModelParam._m0[40u]), vec4(_1654, _1655, _1656, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1699) ? 0.0 : (isnan(0.0) ? _1699 : max(0.0, _1699))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1712 = (_1708 * cbModelParam._m0[1u].x) + (_1697 * (1.0 - cbModelParam._m0[1u].x));
    float _1722 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _697);
    float _1723 = isnan(_1722) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1722 : min(cbModelParam._m0[25u].z, _1722));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1771 = fma(_944, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936)) + cbModelParam._m0[13u].w;
        float _1775 = fma(_944, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936)) + cbModelParam._m0[14u].w;
        float _1779 = fma(_944, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936)) + cbModelParam._m0[15u].w;
        float _1782 = fma(_882, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880));
        float _1785 = fma(_882, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880));
        float _1788 = fma(_882, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880));
        float _1816;
        if (_1782 > 0.0)
        {
            _1816 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1816 = frontier_phi_17_15_ladder;
        }
        float _1988;
        if (_1785 > 0.0)
        {
            _1988 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1988 = frontier_phi_26_22_ladder;
        }
        float _2283;
        if (_1788 > 0.0)
        {
            _2283 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2283 = frontier_phi_38_33_ladder;
        }
        float _2285 = isnan(_1988) ? _1816 : (isnan(_1816) ? _1988 : min(_1816, _1988));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1782) + _1771;
        float _2291 = (_2286 * _1785) + _1775;
        float _2292 = (_2286 * _1788) + _1779;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2293;
        float _2297 = _2293 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 > _2297) || ((_2291 < _2295) || ((_2290 < _2295) || (_2290 > _2297))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2292, cbModelParam._m0[9u].z, fma(_2291, cbModelParam._m0[9u].y, _2290 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2292, cbModelParam._m0[10u].z, fma(_2291, cbModelParam._m0[10u].y, _2290 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2292, cbModelParam._m0[11u].z, fma(_2291, cbModelParam._m0[11u].y, _2290 * cbModelParam._m0[11u].x))), _1723);
            frontier_phi_16_38_ladder = _2437.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2437.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2437.x * cbModelParam._m0[1u].y;
        }
        _1804 = frontier_phi_16_38_ladder_2;
        _1806 = frontier_phi_16_38_ladder_1;
        _1808 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_880, _881, _882), _1723);
        _1804 = _1792.x * cbModelParam._m0[1u].y;
        _1806 = _1792.y * cbModelParam._m0[1u].y;
        _1808 = _1792.z * cbModelParam._m0[1u].y;
    }
    float _1812 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _697);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1812 : min(cbModelParam._m0[25u].w, _1812));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1867 = fma(_944, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936)) + cbModelParam._m0[21u].w;
        float _1871 = fma(_944, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936)) + cbModelParam._m0[22u].w;
        float _1875 = fma(_944, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936)) + cbModelParam._m0[23u].w;
        float _1878 = fma(_882, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880));
        float _1881 = fma(_882, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880));
        float _1884 = fma(_882, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880));
        float _1993;
        if (_1878 > 0.0)
        {
            _1993 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1993 = frontier_phi_28_24_ladder;
        }
        float _2310;
        if (_1881 > 0.0)
        {
            _2310 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2310 = frontier_phi_40_35_ladder;
        }
        float _2648;
        if (_1884 > 0.0)
        {
            _2648 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2648 = frontier_phi_50_47_ladder;
        }
        float _2650 = isnan(_2310) ? _1993 : (isnan(_1993) ? _2310 : min(_1993, _2310));
        float _2651 = isnan(_2648) ? _2650 : (isnan(_2650) ? _2648 : min(_2650, _2648));
        float _2655 = (_2651 * _1878) + _1867;
        float _2656 = (_2651 * _1881) + _1871;
        float _2657 = (_2651 * _1884) + _1875;
        float _2658 = _2651 * 9.9999997473787516355514526367188e-05;
        float _2659 = (-1.0) - _2658;
        float _2661 = _2658 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2657 > _2661) || ((_2657 < _2659) || ((_2656 > _2661) || ((_2656 < _2659) || ((_2655 < _2659) || (_2655 > _2661))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2779 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2657, cbModelParam._m0[17u].z, fma(_2656, cbModelParam._m0[17u].y, _2655 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2657, cbModelParam._m0[18u].z, fma(_2656, cbModelParam._m0[18u].y, _2655 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2657, cbModelParam._m0[19u].z, fma(_2656, cbModelParam._m0[19u].y, _2655 * cbModelParam._m0[19u].x))), _1813);
            frontier_phi_25_50_ladder = _2779.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2779.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2779.x * cbModelParam._m0[1u].z;
        }
        _1903 = frontier_phi_25_50_ladder_2;
        _1905 = frontier_phi_25_50_ladder_1;
        _1907 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_880, _881, _882), _1813);
        _1903 = _1887.x * cbModelParam._m0[1u].z;
        _1905 = _1887.y * cbModelParam._m0[1u].z;
        _1907 = _1887.z * cbModelParam._m0[1u].z;
    }
    float _1920 = (((_907 * _856) + _908) * _872) * ((cbModelParam._m0[1u].w * (_1903 - _1804)) + _1804);
    float _1922 = (((_907 * _858) + _908) * _872) * ((cbModelParam._m0[1u].w * (_1905 - _1806)) + _1806);
    float _1924 = (((_907 * _859) + _908) * _872) * ((cbModelParam._m0[1u].w * (_1907 - _1808)) + _1808);
    float _1927 = fma(_1924, cbSceneParam._m0[89u].z, fma(_1922, cbSceneParam._m0[89u].y, _1920 * cbSceneParam._m0[89u].x));
    float _1930 = fma(_1924, cbSceneParam._m0[90u].z, fma(_1922, cbSceneParam._m0[90u].y, _1920 * cbSceneParam._m0[90u].x));
    float _1933 = fma(_1924, cbSceneParam._m0[91u].z, fma(_1922, cbSceneParam._m0[91u].y, _1920 * cbSceneParam._m0[91u].x));
    float _1967 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1971 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1975 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1979 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1980 = _1967 / _1979;
    float _1981 = _1971 / _1979;
    float _1982 = _1975 / _1979;
    float _2129;
    float _2130;
    float _2131;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2009 = ((uint(_1982 > cbSceneParam._m0[59u].y) + uint(_1982 > cbSceneParam._m0[59u].x)) + uint(_1982 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2010 = _2009 + 43u;
        uint _2018 = _2009 + 44u;
        uint _2026 = _2009 + 45u;
        uint _2034 = _2009 + 46u;
        float _2045 = fma(_1979, cbSceneParam._m0[_2010].w, fma(_1975, cbSceneParam._m0[_2010].z, fma(_1971, cbSceneParam._m0[_2010].y, _1967 * cbSceneParam._m0[_2010].x)));
        float _2049 = fma(_1979, cbSceneParam._m0[_2018].w, fma(_1975, cbSceneParam._m0[_2018].z, fma(_1971, cbSceneParam._m0[_2018].y, _1967 * cbSceneParam._m0[_2018].x)));
        float _2057 = fma(_1979, cbSceneParam._m0[_2034].w, fma(_1975, cbSceneParam._m0[_2034].z, fma(_1971, cbSceneParam._m0[_2034].y, _1967 * cbSceneParam._m0[_2034].x)));
        float _2062 = cbSceneParam._m0[33u].z * _2057;
        float _2064 = cbSceneParam._m0[33u].w * _2057;
        float _2067 = fma(_1979, cbSceneParam._m0[_2026].w, fma(_1975, cbSceneParam._m0[_2026].z, fma(_1971, cbSceneParam._m0[_2026].y, _1967 * cbSceneParam._m0[_2026].x))) / _2057;
        float _2115 = (cbSceneParam._m0[33u].x - sqrt(((_1981 * _1981) + (_1980 * _1980)) + (_1982 * _1982))) * cbSceneParam._m0[33u].y;
        float _4485 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2122 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 + _2045) / _2057, (_2064 + _2049) / _2057), _2067), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 + _2045) / _2057, (_2049 - _2062) / _2057), _2067), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2045 - _2062) / _2057, (_2049 - _2064) / _2057), _2067), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2045 - _2064) / _2057, (_2062 + _2049) / _2057), _2067), 0.0)).x), vec4(0.25)));
        _2129 = 1.0 - (_2122 * cbSceneParam._m0[34u].x);
        _2130 = 1.0 - (_2122 * cbSceneParam._m0[34u].y);
        _2131 = 1.0 - (_2122 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2129 = 1.0;
        _2130 = 1.0;
        _2131 = 1.0;
    }
    float _2195;
    float _2197;
    float _2199;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2183 = fma(_1979, cbSceneParam._m0[63u].w, fma(_1975, cbSceneParam._m0[63u].z, fma(_1971, cbSceneParam._m0[63u].y, _1967 * cbSceneParam._m0[63u].x)));
        float _2184 = fma(_1979, cbSceneParam._m0[60u].w, fma(_1975, cbSceneParam._m0[60u].z, fma(_1971, cbSceneParam._m0[60u].y, _1967 * cbSceneParam._m0[60u].x))) / _2183;
        float _2185 = fma(_1979, cbSceneParam._m0[61u].w, fma(_1975, cbSceneParam._m0[61u].z, fma(_1971, cbSceneParam._m0[61u].y, _1967 * cbSceneParam._m0[61u].x))) / _2183;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2184 >= cbSceneParam._m0[64u].x) && (_2185 >= cbSceneParam._m0[64u].y)) && (_2184 <= cbSceneParam._m0[64u].z)) && (_2185 <= cbSceneParam._m0[64u].w))
        {
            float _2323 = fma(_1979, cbSceneParam._m0[62u].w, fma(_1975, cbSceneParam._m0[62u].z, fma(_1971, cbSceneParam._m0[62u].y, _1967 * cbSceneParam._m0[62u].x))) / _2183;
            float _2327 = isnan(cbSceneParam._m0[41u].w) ? _2323 : (isnan(_2323) ? cbSceneParam._m0[41u].w : max(_2323, cbSceneParam._m0[41u].w));
            float _2370 = (cbSceneParam._m0[33u].x - sqrt(((_1981 * _1981) + (_1980 * _1980)) + (_1982 * _1982))) * cbSceneParam._m0[33u].y;
            float _4501 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
            float _2377 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2184, cbSceneParam._m0[33u].w + _2185), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2184, _2185 - cbSceneParam._m0[33u].z), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2184 - cbSceneParam._m0[33u].z, _2185 - cbSceneParam._m0[33u].w), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2184 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2185), _2327), 0.0)).x), vec4(0.25)));
            float _2381 = 1.0 - (_2377 * cbSceneParam._m0[34u].x);
            float _2382 = 1.0 - (_2377 * cbSceneParam._m0[34u].y);
            float _2383 = 1.0 - (_2377 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2383) ? _2131 : (isnan(_2131) ? _2383 : min(_2131, _2383));
            frontier_phi_37_36_ladder_1 = isnan(_2382) ? _2130 : (isnan(_2130) ? _2382 : min(_2130, _2382));
            frontier_phi_37_36_ladder_2 = isnan(_2381) ? _2129 : (isnan(_2129) ? _2381 : min(_2129, _2381));
        }
        else
        {
            frontier_phi_37_36_ladder = _2131;
            frontier_phi_37_36_ladder_1 = _2130;
            frontier_phi_37_36_ladder_2 = _2129;
        }
        _2195 = frontier_phi_37_36_ladder_2;
        _2197 = frontier_phi_37_36_ladder_1;
        _2199 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2195 = _2129;
        _2197 = _2130;
        _2199 = _2131;
    }
    uvec4 _2204 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2206 = _2204.x * 14u;
    uint _2207 = _2206 + 13u;
    float _2214 = _872 + (-1.0);
    float _2219 = (cbLight._m0[_2207].x * _2214) + 1.0;
    float _2220 = (cbLight._m0[_2207].y * _2214) + 1.0;
    float _2221 = (cbLight._m0[_2207].z * _2214) + 1.0;
    float _2222 = (cbLight._m0[_2207].w * _2214) + 1.0;
    uint _2223 = _2206 + 5u;
    float _2229 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
    uint _2233 = _2206 + 4u;
    float _2242 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
    uint _2246 = _2206 | 1u;
    float _2257 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_694, _695, _696));
    float _2260 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_694, _695, _696));
    float _4537 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _4548 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2265 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * 0.3183098733425140380859375;
    float _2267 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * 0.3183098733425140380859375;
    float _2274 = ((cbLight._m0[_2223].x * _2229) * _2267) + (((cbLight._m0[_2233].x * _2195) * _2242) * _2265);
    float _2275 = ((_2229 * cbLight._m0[_2223].y) * _2267) + (((cbLight._m0[_2233].y * _2197) * _2242) * _2265);
    float _2276 = ((_2229 * cbLight._m0[_2223].z) * _2267) + (((cbLight._m0[_2233].z * _2199) * _2242) * _2265);
    uvec4 _2280 = floatBitsToUint(cbLight._m0[_2206 + 12u]);
    bool _2282 = _2280.x == 0u;
    float _2384;
    float _2386;
    float _2388;
    if (_2282)
    {
        _2384 = _2274;
        _2386 = _2275;
        _2388 = _2276;
    }
    else
    {
        uint _2392 = _2206 + 6u;
        float _2408 = (dot(vec3(cbLight._m0[_2206 + 2u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2409 = _2408 * _2408;
        float _4559 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2410 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2411 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2384 = (((cbLight._m0[_2392].x * 0.3183098733425140380859375) * _2410) * _2411) + _2274;
        _2386 = (((cbLight._m0[_2392].y * 0.3183098733425140380859375) * _2410) * _2411) + _2275;
        _2388 = (((cbLight._m0[_2392].z * 0.3183098733425140380859375) * _2410) * _2411) + _2276;
    }
    bool _2391 = _2280.y == 0u;
    float _2446;
    float _2448;
    float _2450;
    if (_2391)
    {
        _2446 = _2384;
        _2448 = _2386;
        _2450 = _2388;
    }
    else
    {
        uint _2619 = _2206 + 7u;
        float _2635 = (dot(vec3(cbLight._m0[_2206 + 3u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2636 = _2635 * _2635;
        float _4575 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2637 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2638 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2446 = (((cbLight._m0[_2619].x * 0.3183098733425140380859375) * _2637) * _2638) + _2384;
        _2448 = (((cbLight._m0[_2619].y * 0.3183098733425140380859375) * _2637) * _2638) + _2386;
        _2450 = (((cbLight._m0[_2619].z * 0.3183098733425140380859375) * _2637) * _2638) + _2388;
    }
    uint _2453 = _2206 + 8u;
    float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _697) * 0.949999988079071044921875);
    float _2467 = _2466 * _2466;
    float _2468 = cbLight._m0[_2206].x + _774;
    float _2469 = cbLight._m0[_2206].y + _775;
    float _2470 = cbLight._m0[_2206].z + _776;
    float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
    float _2475 = _2474 * _2468;
    float _2476 = _2474 * _2469;
    float _2477 = _2474 * _2470;
    float _2478 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2206].xyz));
    float _4591 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _4602 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _2482 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2483 = dot(vec3(_694, _695, _696), vec3(_2475, _2476, _2477));
    float _4613 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2487 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2475, _2476, _2477));
    float _4624 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2491 = _2467 * _2467;
    float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
    float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0);
    float _2504 = 0.959999978542327880859375 - _853;
    float _2506 = 0.959999978542327880859375 - _854;
    float _2507 = 0.959999978542327880859375 - _855;
    float _2514 = 1.0 - _2467;
    float _2525 = (0.5 / (((_2482 * ((_2481 * _2514) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2514) + _2467) * _2481))) * _2481;
    float _4635 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2527 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
    uint _2541 = _2206 + 9u;
    float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _697) * 0.949999988079071044921875);
    float _2553 = _2552 * _2552;
    float _2554 = cbLight._m0[_2246].x + _774;
    float _2555 = cbLight._m0[_2246].y + _775;
    float _2556 = cbLight._m0[_2246].z + _776;
    float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
    float _2561 = _2560 * _2554;
    float _2562 = _2560 * _2555;
    float _2563 = _2560 * _2556;
    float _2564 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2246].xyz));
    float _4646 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _2568 = dot(vec3(_694, _695, _696), vec3(_2561, _2562, _2563));
    float _4657 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
    float _2572 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2561, _2562, _2563));
    float _4668 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2576 = _2553 * _2553;
    float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
    float _2587 = exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0);
    float _2594 = 1.0 - _2553;
    float _2604 = (0.5 / (((_2482 * ((_2567 * _2594) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2594) + _2553) * _2567))) * _2567;
    float _4679 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2606 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
    float _2616 = (((((_2587 * _2504) + _856) * cbLight._m0[_2541].x) * _2606) * _2229) + ((((cbLight._m0[_2453].x * _2195) * ((_2503 * _2504) + _856)) * _2527) * _2242);
    float _2617 = (((((_2587 * _2506) + _858) * cbLight._m0[_2541].y) * _2606) * _2229) + ((((cbLight._m0[_2453].y * _2197) * ((_2503 * _2506) + _858)) * _2527) * _2242);
    float _2618 = (((((_2587 * _2507) + _859) * cbLight._m0[_2541].z) * _2606) * _2229) + ((((cbLight._m0[_2453].z * _2199) * ((_2503 * _2507) + _859)) * _2527) * _2242);
    float _2674;
    float _2676;
    float _2678;
    if (_2282)
    {
        _2674 = _2616;
        _2676 = _2617;
        _2678 = _2618;
    }
    else
    {
        uint _2680 = _2206 + 2u;
        uint _2684 = _2206 + 10u;
        float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2680].w)) * _697) * 0.949999988079071044921875);
        float _2699 = _2698 * _2698;
        float _2700 = cbLight._m0[_2680].x + _774;
        float _2701 = cbLight._m0[_2680].y + _775;
        float _2702 = cbLight._m0[_2680].z + _776;
        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
        float _2707 = _2706 * _2700;
        float _2708 = _2706 * _2701;
        float _2709 = _2706 * _2702;
        float _2710 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2680].xyz));
        float _4690 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2714 = dot(vec3(_694, _695, _696), vec3(_2707, _2708, _2709));
        float _4701 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2718 = dot(vec3(cbLight._m0[_2680].xyz), vec3(_2707, _2708, _2709));
        float _4712 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2722 = _2699 * _2699;
        float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
        float _2733 = exp2(log2(1.0 - (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) * 5.0);
        float _2740 = 1.0 - _2699;
        float _2750 = (0.5 / (((_2482 * ((_2713 * _2740) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2740) + _2699) * _2713))) * _2713;
        float _4723 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2752 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
        float _2753 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2674 = (((((_2733 * _2504) + _856) * cbLight._m0[_2684].x) * _2752) * _2753) + _2616;
        _2676 = (((((_2733 * _2506) + _858) * cbLight._m0[_2684].y) * _2752) * _2753) + _2617;
        _2678 = (((((_2733 * _2507) + _859) * cbLight._m0[_2684].z) * _2752) * _2753) + _2618;
    }
    float _2784;
    float _2786;
    float _2788;
    if (_2391)
    {
        _2784 = _2674;
        _2786 = _2676;
        _2788 = _2678;
    }
    else
    {
        uint _2795 = _2206 + 3u;
        uint _2799 = _2206 + 11u;
        float _2813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2795].w)) * _697) * 0.949999988079071044921875);
        float _2814 = _2813 * _2813;
        float _2815 = cbLight._m0[_2795].x + _774;
        float _2816 = cbLight._m0[_2795].y + _775;
        float _2817 = cbLight._m0[_2795].z + _776;
        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
        float _2822 = _2821 * _2815;
        float _2823 = _2821 * _2816;
        float _2824 = _2821 * _2817;
        float _2825 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2795].xyz));
        float _4739 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2828 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2829 = dot(vec3(_694, _695, _696), vec3(_2822, _2823, _2824));
        float _4750 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
        float _2833 = dot(vec3(cbLight._m0[_2795].xyz), vec3(_2822, _2823, _2824));
        float _4761 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2837 = _2814 * _2814;
        float _2841 = ((_2832 * _2832) * (_2837 + (-1.0))) + 1.0;
        float _2848 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
        float _2855 = 1.0 - _2814;
        float _2865 = (0.5 / (((_2482 * ((_2828 * _2855) + _2814)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2855) + _2814) * _2828))) * _2828;
        float _4772 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2867 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2837 / ((_2841 * _2841) * 3.141590118408203125));
        float _2868 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2784 = (((((_2848 * _2504) + _856) * cbLight._m0[_2799].x) * _2867) * _2868) + _2674;
        _2786 = (((((_2848 * _2506) + _858) * cbLight._m0[_2799].y) * _2867) * _2868) + _2676;
        _2788 = (((((_2848 * _2507) + _859) * cbLight._m0[_2799].z) * _2867) * _2868) + _2678;
    }
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_2204.y == 0u)
    {
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.x;
        uint _2901 = uint((float(_2889.y) * floor(float(uint(cbSceneParam._m0[85u].y * _795) / _2890))) + floor(float(uint(cbSceneParam._m0[85u].x * _794) / _2890)));
        float _2911 = (log2(_1982 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2912 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        uint _2915 = uint(isnan(14.0) ? _2912 : (isnan(_2912) ? 14.0 : min(_2912, 14.0)));
        uvec4 _2920 = texelFetch(g_lightClusterGridBuffer, int(((_2915 << 2u) + (_2901 << 6u)) >> 2u));
        uint _2921 = _2920.x;
        uint _2922 = _2889.z;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        if (((((1u << ((_2922 >> 4u) & 15u)) + 4294967295u) & _2921) == 0u) || ((_2922 & 240u) == 0u))
        {
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
        }
        else
        {
            float _3002;
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3154 = 0.0;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            uint _3160 = 0u;
            uint _3169;
            bool _3170;
            for (;;)
            {
                _3169 = texelFetch(g_lightClassification, int((((_2915 << 5u) + (_2901 << 9u)) + (_3160 << 2u)) >> 2u)).x;
                _3170 = _3169 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3170)
                {
                    frontier_phi_71_pred = _3159;
                    frontier_phi_71_pred_1 = _3158;
                    frontier_phi_71_pred_2 = _3157;
                    frontier_phi_71_pred_3 = _3156;
                    frontier_phi_71_pred_4 = _3155;
                    frontier_phi_71_pred_5 = _3154;
                }
                else
                {
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    uint _3305;
                    _3299 = _3154;
                    _3300 = _3155;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3169;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    for (;;)
                    {
                        uint _3309 = uint(findLSB(_3305)) + (_3160 << 5u);
                        uint _3306 = (_3305 + 4294967295u) & _3305;
                        uint _3311 = _3309 * 48u;
                        vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 3u)).x));
                        uint _3331 = (_3309 * 48u) + 4u;
                        vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 3u)).x));
                        uint _3350 = (_3309 * 48u) + 8u;
                        vec3 _3361 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x));
                        float _3365 = _3325.x - _1980;
                        float _3366 = _3325.y - _1981;
                        float _3367 = _3325.z - _1982;
                        float _3368 = dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367));
                        float _3371 = inversesqrt(_3368);
                        float _3372 = _3371 * _3365;
                        float _3373 = _3371 * _3366;
                        float _3374 = _3371 * _3367;
                        float _3375 = dot(vec3(_813, _816, _819), vec3(_3372, _3373, _3374));
                        float _3380 = 1.0 - (_3368 * _3325.w);
                        float _4798 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3381 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3382 = sqrt(_3368) * _3344.w;
                        float _3385 = 1.39999997615814208984375 / (_3382 + 1.39999997615814208984375);
                        float _3386 = _3385 * _3385;
                        float _3389 = ((1.0 - _3386) * _3375) + _3386;
                        float _3392 = _3382 * _3382;
                        float _3396 = ((isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0))) * _3381) / ((_3392 * 0.699999988079071044921875) + 1.0);
                        float _3400 = (-0.0) - _1980;
                        float _3401 = (-0.0) - _1981;
                        float _3402 = (-0.0) - _1982;
                        float _3406 = inversesqrt(dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402)));
                        float _3407 = _3406 * _3400;
                        float _3408 = _3406 * _3401;
                        float _3409 = _3406 * _3402;
                        float _3416 = exp2(log2(1.0 / ((_3392 * 3.5) + 5.0)) * 0.25);
                        float _3417 = 1.0 - _888;
                        float _3424 = sqrt(1.0 - ((1.0 - (_3417 * _3417)) * (1.0 - (_3416 * _3416))));
                        float _3425 = _3424 * _3424;
                        float _3426 = _3425 * _3425;
                        float _3427 = _3407 + _3372;
                        float _3428 = _3408 + _3373;
                        float _3429 = _3409 + _3374;
                        float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                        float _3437 = dot(vec3(_813, _816, _819), vec3(_3407, _3408, _3409));
                        float _4814 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3440 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3441 = dot(vec3(_813, _816, _819), vec3(_3433 * _3427, _3433 * _3428, _3433 * _3429));
                        float _4825 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3444 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                        float _3448 = ((_3444 * _3444) * (_3426 + (-1.0))) + 1.0;
                        float _3449 = _3385 * _3425;
                        float _3450 = _3449 * _3449;
                        float _3453 = ((1.0 - _3450) * _3375) + _3450;
                        float _4836 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3454 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                        float _3455 = 1.0 - _3425;
                        float _3465 = (0.5 / (((_3454 * ((_3440 * _3455) + _3425)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3425) * _3440))) * _3454;
                        float _4847 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3476 = (((_3426 * 3.1415927410125732421875) * (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) / ((_3448 * _3448) * ((_3392 * 2.1991131305694580078125) + 3.141590118408203125))) * _3381;
                        _3229 = (_3396 * _3344.x) + _3302;
                        _3230 = (_3396 * _3344.y) + _3303;
                        _3231 = (_3396 * _3344.z) + _3304;
                        _3226 = (_3476 * _3361.x) + _3299;
                        _3227 = (_3476 * _3361.y) + _3300;
                        _3228 = (_3476 * _3361.z) + _3301;
                        if (_3306 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3299 = _3226;
                            _3300 = _3227;
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3306;
                        }
                    }
                    frontier_phi_71_pred = _3231;
                    frontier_phi_71_pred_1 = _3230;
                    frontier_phi_71_pred_2 = _3229;
                    frontier_phi_71_pred_3 = _3228;
                    frontier_phi_71_pred_4 = _3227;
                    frontier_phi_71_pred_5 = _3226;
                }
                _3012 = frontier_phi_71_pred;
                _3010 = frontier_phi_71_pred_1;
                _3008 = frontier_phi_71_pred_2;
                _3006 = frontier_phi_71_pred_3;
                _3004 = frontier_phi_71_pred_4;
                _3002 = frontier_phi_71_pred_5;
                uint _3161 = _3160 + 1u;
                if (_3161 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3154 = _3002;
                    _3155 = _3004;
                    _3156 = _3006;
                    _3157 = _3008;
                    _3158 = _3010;
                    _3159 = _3012;
                    _3160 = _3161;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
        }
        uvec4 _3015 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3016 = _3015.z;
        uint _3018 = (_3016 >> 8u) & 15u;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        if (((4294967295u << _3018) & _2921) == 0u)
        {
            _3122 = _3001;
            _3124 = _3003;
            _3126 = _3005;
            _3128 = _3007;
            _3130 = _3009;
            _3132 = _3011;
        }
        else
        {
            float _3147 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
            float _3148 = _3147 * _1980;
            float _3149 = _3147 * _1981;
            float _3150 = _3147 * _1982;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3018 < ((_3016 >> 12u) & 15u))
            {
                float _3123;
                float _3125;
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3282 = _3001;
                float _3283 = _3003;
                float _3284 = _3005;
                float _3285 = _3007;
                float _3286 = _3009;
                float _3287 = _3011;
                uint _3288 = _3018;
                uint _3297;
                bool _3298;
                for (;;)
                {
                    _3297 = texelFetch(g_lightClassification, int((((_2915 << 5u) + (_2901 << 9u)) + (_3288 << 2u)) >> 2u)).x;
                    _3298 = _3297 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3298)
                    {
                        frontier_phi_82_pred = _3287;
                        frontier_phi_82_pred_1 = _3286;
                        frontier_phi_82_pred_2 = _3285;
                        frontier_phi_82_pred_3 = _3284;
                        frontier_phi_82_pred_4 = _3283;
                        frontier_phi_82_pred_5 = _3282;
                    }
                    else
                    {
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3503 = _3282;
                        float _3504 = _3283;
                        float _3505 = _3284;
                        float _3506 = _3285;
                        float _3507 = _3286;
                        float _3508 = _3287;
                        uint _3509 = _3297;
                        uint _3510;
                        vec4 _3535;
                        float _3536;
                        vec4 _3551;
                        vec3 _3563;
                        vec4 _3578;
                        vec4 _3593;
                        float _3639;
                        bool _3640;
                        for (;;)
                        {
                            uint _3520 = ((_3288 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3509));
                            _3510 = (_3509 + 4294967295u) & _3509;
                            uint _3522 = _3520 * 40u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3536 = _3535.w;
                            uint _3538 = (_3520 * 40u) + 4u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3520 * 40u) + 8u;
                            _3563 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x));
                            uint _3565 = (_3520 * 40u) + 16u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3520 * 40u) + 20u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3520 * 40u) + 24u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3614 = (_3520 * 40u) + 28u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            _3639 = fma(_1982, _3627.z, fma(_1981, _3627.y, _3627.x * _1980)) + _3627.w;
                            _3640 = !((fma(_1982, _3608.z, fma(_1981, _3608.y, _3608.x * _1980)) + _3608.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3640)
                            {
                                float _3667 = _3535.x - _1980;
                                float _3668 = _3535.y - _1981;
                                float _3669 = _3535.z - _1982;
                                float _3670 = dot(vec3(_3667, _3668, _3669), vec3(_3667, _3668, _3669));
                                float _3673 = inversesqrt(_3670);
                                float _3674 = _3673 * _3667;
                                float _3675 = _3673 * _3668;
                                float _3676 = _3673 * _3669;
                                float _3680 = 1.0 - (_3670 / (_3536 * _3536));
                                float _4858 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3685 = sqrt(_3670) * _3551.w;
                                float _3687 = 1.39999997615814208984375 / (_3685 + 1.39999997615814208984375);
                                float _3688 = _3687 * _3687;
                                float _3691 = ((1.0 - _3688) * dot(vec3(_3674, _3675, _3676), vec3(_813, _816, _819))) + _3688;
                                float _3694 = _3685 * _3685;
                                float _3698 = (fma(_1982, _3578.z, fma(_1981, _3578.y, _3578.x * _1980)) + _3578.w) / _3639;
                                float _3699 = (fma(_1982, _3593.z, fma(_1981, _3593.y, _3593.x * _1980)) + _3593.w) / _3639;
                                float _3703 = 1.0 - dot(vec2(_3698, _3699), vec2(_3698, _3699));
                                float _4874 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3705 = _3704 * (((isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0))) * _3681) / ((_3694 * 0.699999988079071044921875) + 1.0));
                                float _3717 = exp2(log2(1.0 / ((_3694 * 3.5) + 5.0)) * 0.25);
                                float _3718 = 1.0 - _888;
                                float _3725 = sqrt(1.0 - ((1.0 - (_3718 * _3718)) * (1.0 - (_3717 * _3717))));
                                float _3726 = _3725 * _3725;
                                float _3727 = _3726 * _3726;
                                float _3728 = _3674 - _3148;
                                float _3729 = _3675 - _3149;
                                float _3730 = _3676 - _3150;
                                float _3734 = inversesqrt(dot(vec3(_3728, _3729, _3730), vec3(_3728, _3729, _3730)));
                                float _3738 = dot(vec3(_813, _816, _819), vec3((-0.0) - _3148, (-0.0) - _3149, (-0.0) - _3150));
                                float _4885 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3741 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3742 = dot(vec3(_813, _816, _819), vec3(_3734 * _3728, _3734 * _3729, _3734 * _3730));
                                float _4896 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3745 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3749 = ((_3745 * _3745) * (_3727 + (-1.0))) + 1.0;
                                float _3750 = _3687 * _3726;
                                float _3751 = _3750 * _3750;
                                float _3757 = ((1.0 - _3751) * dot(vec3(_813, _816, _819), vec3(_3674, _3675, _3676))) + _3751;
                                float _4907 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3759 = 1.0 - _3726;
                                float _3769 = (0.5 / (((_3758 * ((_3741 * _3759) + _3726)) + 9.9999999392252902907785028219223e-09) + (((_3758 * _3759) + _3726) * _3741))) * _3758;
                                float _4918 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3779 = (_3704 * _3681) * (((_3727 * 3.1415927410125732421875) * (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0)))) / ((_3749 * _3749) * ((_3694 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3705 * _3551.z;
                                frontier_phi_88_pred_1 = _3705 * _3551.y;
                                frontier_phi_88_pred_2 = _3705 * _3551.x;
                                frontier_phi_88_pred_3 = _3779 * _3563.z;
                                frontier_phi_88_pred_4 = _3779 * _3563.y;
                                frontier_phi_88_pred_5 = _3779 * _3563.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3788 = frontier_phi_88_pred;
                            _3787 = frontier_phi_88_pred_1;
                            _3786 = frontier_phi_88_pred_2;
                            _3785 = frontier_phi_88_pred_3;
                            _3784 = frontier_phi_88_pred_4;
                            _3783 = frontier_phi_88_pred_5;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            if (_3510 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3510;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3495;
                        frontier_phi_82_pred_1 = _3494;
                        frontier_phi_82_pred_2 = _3493;
                        frontier_phi_82_pred_3 = _3492;
                        frontier_phi_82_pred_4 = _3491;
                        frontier_phi_82_pred_5 = _3490;
                    }
                    _3133 = frontier_phi_82_pred;
                    _3131 = frontier_phi_82_pred_1;
                    _3129 = frontier_phi_82_pred_2;
                    _3127 = frontier_phi_82_pred_3;
                    _3125 = frontier_phi_82_pred_4;
                    _3123 = frontier_phi_82_pred_5;
                    uint _3289 = _3288 + 1u;
                    if (_3289 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3282 = _3123;
                        _3283 = _3125;
                        _3284 = _3127;
                        _3285 = _3129;
                        _3286 = _3131;
                        _3287 = _3133;
                        _3288 = _3289;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3129;
                frontier_phi_63_64_ladder_1 = _3133;
                frontier_phi_63_64_ladder_2 = _3131;
                frontier_phi_63_64_ladder_3 = _3127;
                frontier_phi_63_64_ladder_4 = _3125;
                frontier_phi_63_64_ladder_5 = _3123;
            }
            else
            {
                frontier_phi_63_64_ladder = _3007;
                frontier_phi_63_64_ladder_1 = _3011;
                frontier_phi_63_64_ladder_2 = _3009;
                frontier_phi_63_64_ladder_3 = _3005;
                frontier_phi_63_64_ladder_4 = _3003;
                frontier_phi_63_64_ladder_5 = _3001;
            }
            _3122 = frontier_phi_63_64_ladder_5;
            _3124 = frontier_phi_63_64_ladder_4;
            _3126 = frontier_phi_63_64_ladder_3;
            _3128 = frontier_phi_63_64_ladder;
            _3130 = frontier_phi_63_64_ladder_2;
            _3132 = frontier_phi_63_64_ladder_1;
        }
        float _3137 = isnan(1.0) ? _872 : (isnan(_872) ? 1.0 : min(_872, 1.0));
        _2934 = (_3137 * _3128) + _2446;
        _2936 = (_3137 * _3130) + _2448;
        _2938 = (_3137 * _3132) + _2450;
        _2940 = ((_3122 * _856) * _3137) + _2784;
        _2942 = ((_3124 * _858) * _3137) + _2786;
        _2944 = ((_3126 * _859) * _3137) + _2788;
    }
    else
    {
        _2934 = _2446;
        _2936 = _2448;
        _2938 = _2450;
        _2940 = _2784;
        _2942 = _2786;
        _2944 = _2788;
    }
    float _4934 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4945 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4956 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _2961 = ((isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2934 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _872))) + ((_2940 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1712)) * cbPerFrame._m0[3u].x);
    float _2962 = ((isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2936 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _872))) + ((_2942 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1712)) * cbPerFrame._m0[3u].x);
    float _2963 = ((isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2938 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _872))) + ((_2944 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1712)) * cbPerFrame._m0[3u].x);
    uint _2964 = _246 + 6u;
    float _2972 = _794 / cbSceneParam._m0[86u].x;
    float _2973 = _795 / cbSceneParam._m0[86u].y;
    vec4 _2987 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2972, _2973, (log2((isnan(cbSceneParam._m0[77u].w) ? _716 : (isnan(_716) ? cbSceneParam._m0[77u].w : min(_716, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2989 = _2987.x;
    float _2990 = _2987.y;
    float _2991 = _2987.z;
    float _2992 = _2987.w;
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    if (_716 > cbSceneParam._m0[78u].w)
    {
        float _3026 = isnan(_716) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _716 : min(cbSceneParam._m0[80u].w, _716));
        float _3027 = _3026 / _716;
        float _3038 = _3027 * _767;
        float _3039 = _768 * _3027;
        float _3040 = (-0.0) - _3039;
        float _3042 = _3027 * _769;
        float _3044 = (cbSceneParam._m0[77u].w * _3040) / _3026;
        float _3045 = _3044 + cbSceneParam._m0[79u].w;
        float _3046 = cbSceneParam._m0[79u].w - _3039;
        float _3052 = sqrt(((_3038 * _3038) + (_3039 * _3039)) + (_3042 * _3042));
        float _3055 = (1.0 - (cbSceneParam._m0[77u].w / _3026)) * _3052;
        float _3060 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3062 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3239;
        if (abs((_3040 - _3044) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3239 = ((((_3045 > 0.0) ? exp2(_3060 * _3045) : (2.0 - exp2(_3062 * _3045))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3055;
        }
        else
        {
            float _3183 = 1.0 / cbSceneParam._m0[80u].x;
            float _3184 = isnan(_3046) ? _3045 : (isnan(_3045) ? _3046 : max(_3045, _3046));
            float _3185 = isnan(_3046) ? _3045 : (isnan(_3045) ? _3046 : min(_3045, _3046));
            float _3194 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : min(_3184, 0.0));
            float _3195 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : min(_3185, 0.0));
            _3239 = ((abs(_3052 / _3040) * cbSceneParam._m0[80u].y) * ((((_3194 - _3195) * 2.0) - ((exp2(_3060 * (isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0)))) - exp2(_3060 * (isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0))))) * _3183)) - ((exp2(_3062 * _3194) - exp2(_3062 * _3195)) * _3183))) + (_3055 * cbSceneParam._m0[80u].z);
        }
        vec4 _3241 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2972, _2973, 1.0), 0.0);
        float _3250 = exp2((_3239 * (-1.44269502162933349609375)) * (1.0 - _3241.w));
        float _3251 = log2(_3250);
        float _3267 = log2(_2992);
        _3064 = (exp2(_3267 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].x)) * _3241.x) / cbSceneParam._m0[78u].x)) + _2989;
        _3066 = (exp2(_3267 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].y)) * _3241.y) / cbSceneParam._m0[78u].y)) + _2990;
        _3068 = (exp2(_3267 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].z)) * _3241.z) / cbSceneParam._m0[78u].z)) + _2991;
        _3070 = _3250 * _2992;
    }
    else
    {
        _3064 = _2989;
        _3066 = _2990;
        _3068 = _2991;
        _3070 = _2992;
    }
    bool _3277;
    vec4 _3080;
    vec4 _3102;
    float _3104;
    float _3108;
    float _3109;
    float _3110;
    float _3111;
    bool _3121;
    for (;;)
    {
        _3080 = cbMatDynParam._m0[0u];
        float _3082 = roundEven(_3080.y);
        bool _3083 = _3082 == 3.0;
        float _3084 = log2(_3070);
        float _3091 = exp2(_3084 * cbSceneParam._m0[78u].x) * _2961;
        float _3092 = exp2(_3084 * cbSceneParam._m0[78u].y) * _2962;
        float _3093 = exp2(_3084 * cbSceneParam._m0[78u].z) * _2963;
        float _3100 = _783 + (-0.5);
        _3102 = cbMtdParam._m0[1u];
        _3104 = _3102.y * _3100;
        float _3107 = (_3082 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3108 = _3107 * (_3083 ? _3091 : (_3091 + (cbSceneParam._m0[72u].w * _3064)));
        _3109 = _3107 * (_3083 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3066)));
        _3110 = _3107 * (_3083 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3068)));
        _3111 = _3100 * 0.999000012874603271484375;
        _3121 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3121)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _3111) < 0.5)
            {
                _3277 = true;
                break;
            }
        }
        uint _3218 = _832 + uint(_3080.w);
        if ((cbInstanceData._m0[_3218].w < 1.0) && ((cbInstanceData._m0[_3218].w + _3111) < 0.5))
        {
            _3277 = true;
            break;
        }
        if ((_3104 + 1.0) < _3102.x)
        {
            _3277 = true;
            break;
        }
        _3277 = false;
        break;
    }
    float _3481;
    if (_3277)
    {
        discard_state = true;
        _3481 = 0.0;
    }
    else
    {
        _3481 = cbInstanceData._m0[_2964].w;
    }
    SV_Target.x = _3108;
    SV_Target.y = _3109;
    SV_Target.z = _3110;
    SV_Target.w = _3481;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2964].w;
    discard_exit();
}


