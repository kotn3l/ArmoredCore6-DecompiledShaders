#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1459;
float _4122;
float _4123;
float _4124;
float _4125;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _373 = _371.x;
    float _385 = dot(vec4(_373, _371.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _402 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_373 - _385) * cbMtdParam._m0[24u].y) + _385) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4134 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _410 = (_403 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _411 = (_403 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _412 = (_403 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _429 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _451 = _449.x;
    float _461 = dot(vec4(_451, _449.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _475 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_451 - _461) * cbMtdParam._m0[24u].y) + _461) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4145 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _483 = (_476 * ((_429.x * cbMtdParam._m0[13u].x) - _410)) + _410;
    float _484 = (_476 * ((_429.y * cbMtdParam._m0[13u].y) - _411)) + _411;
    float _485 = (_476 * ((_429.z * cbMtdParam._m0[13u].z) - _412)) + _412;
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _531 = ((_503.x - _522) * _403) + _522;
    float _532 = ((_503.y - _523) * _403) + _523;
    float _533 = ((_503.z - _524) * _403) + _524;
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _558 = ((_545.z - _533) * _476) + _533;
    float _561 = ((((_545.x - _531) * _476) + _531) * 2.0) + (-1.0);
    float _563 = ((((_545.y - _532) * _476) + _532) * 2.0) + (-1.0);
    float _564 = dot(vec2(_561, _563), vec2(_561, _563));
    float _4156 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))));
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _608 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _610 = _608.x;
    float _611 = 1.0 - _610;
    float _617 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _620 = ((isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : min(_617, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _629 = (_620 - ((((((_610 - _611) * cbMtdParam._m0[24u].z) + _611) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _620))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4177 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _637 = (_630 * (cbMtdParam._m0[17u].x - _483)) + _483;
    float _638 = (_630 * (cbMtdParam._m0[17u].y - _484)) + _484;
    float _639 = (_630 * (cbMtdParam._m0[17u].z - _485)) + _485;
    vec4 _651 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _653 = _651.x;
    float _654 = 1.0 - _653;
    float _681 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_653 - _654) * cbMtdParam._m0[24u].w) + _654) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4188 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _690 = ((((cbMtdParam._m0[10u].x - _637) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _682) + _637;
    float _691 = ((((cbMtdParam._m0[10u].y - _638) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _682) + _638;
    float _692 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _639)) * _682) + _639;
    vec4 _718 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _720 = _718.x;
    float _738 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _720) * _403) + _720;
    float _755 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _738) * _476) + _738;
    float _759 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _755) * cbMtdParam._m0[19u].z) + _755;
    float _761 = _759 - (_759 * _630);
    float _763 = _761 - (_761 * _682);
    float _767 = (cbMtdParam._m0[19u].w * (_583.z - _558)) + _558;
    vec4 _781 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _788 = (_781.x * 2.0) + (-1.0);
    float _789 = (_781.y * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _4199 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _798 = (_630 * (_781.z - _767)) + _767;
    float _801 = ((cbMtdParam._m0[23u].y - _798) * _682) + _798;
    vec4 _820 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _826 = (_820.x * 2.0) + (-1.0);
    float _827 = (_820.y * 2.0) + (-1.0);
    float _828 = dot(vec2(_826, _827), vec2(_826, _827));
    float _4210 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _836 = (((_583.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _561;
    float _837 = (((_583.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _563;
    float _849 = (((_788 - _836) + (cbMtdParam._m0[21u].x * _836)) * _630) + _836;
    float _850 = (((_789 - _837) + (cbMtdParam._m0[21u].x * _837)) * _630) + _837;
    float _851 = (_630 * (sqrt(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) - _569)) + _569;
    float _862 = (((_826 - _849) + (_849 * cbMtdParam._m0[22u].z)) * _682) + _849;
    float _863 = (((_827 - _850) + (_850 * cbMtdParam._m0[22u].z)) * _682) + _850;
    float _864 = ((sqrt(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) - _851) * _682) + _851;
    float _866 = cbMtdParam._m0[22u].x + _583.w;
    float _869 = fma(_864, _252 * NORMAL.x, fma(_863, _259 * TANGENT.x, (_245 * _237) * _862));
    float _872 = fma(_864, _252 * NORMAL.y, fma(_863, _259 * TANGENT.y, (_245 * _238) * _862));
    float _875 = fma(_864, _252 * NORMAL.z, fma(_863, _259 * TANGENT.z, (_245 * _239) * _862));
    float _879 = inversesqrt(dot(vec3(_869, _872, _875), vec3(_869, _872, _875)));
    float _880 = _879 * _869;
    float _881 = _879 * _872;
    float _882 = _879 * _875;
    float _4221 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _883 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4243 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4254 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4265 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4276 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _888 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _902 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _952 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _942);
    float _953 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _942);
    float _954 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _942);
    float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
    float _959 = _952 * _958;
    float _960 = _953 * _958;
    float _961 = _954 * _958;
    vec4 _966 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _968 = _966.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1140 = sqrt(((_952 * _952) + (_953 * _953)) + (_954 * _954));
        float _1146 = (cbMatDynParam._m0[5u].x * _1140) + cbMatDynParam._m0[5u].y;
        float _4287 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1151 = (cbMatDynParam._m0[5u].z * _1140) + cbMatDynParam._m0[5u].w;
        float _4298 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) - _1147)) + _1147) < ((_968 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _979 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _980 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _998 = fma(_882, cbSceneParam._m0[5u].z, fma(_881, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _880));
    float _1001 = fma(_882, cbSceneParam._m0[6u].z, fma(_881, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _880));
    float _1004 = fma(_882, cbSceneParam._m0[7u].z, fma(_881, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _880));
    uint _1017 = _265 + 9u;
    uint _1018 = _1017 + uint(cbMatDynParam._m0[0u].w);
    float _1024 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * cbInstanceData._m0[_1018].x;
    float _1025 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * cbInstanceData._m0[_1018].y;
    float _1026 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * cbInstanceData._m0[_1018].z;
    float _4309 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _4320 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1028 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _4331 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _1030 = 1.0 - _888;
    float _1031 = _1027 * _1030;
    float _1032 = _1028 * _1030;
    float _1033 = _1029 * _1030;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _888;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _888;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _888;
    float _1041 = _1038 + 0.039999999105930328369140625;
    float _1043 = _1039 + 0.039999999105930328369140625;
    float _1044 = _1040 + 0.039999999105930328369140625;
    vec4 _1053 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _979, cbSceneParam._m0[86u].y * _980));
    float _1057 = ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * TEXCOORD_5.w) * _1053.x;
    float _1058 = dot(vec3(_880, _881, _882), vec3(_959, _960, _961));
    float _1061 = _1058 * 2.0;
    float _1065 = (_1061 * _880) - _959;
    float _1066 = (_1061 * _881) - _960;
    float _1067 = (_1061 * _882) - _961;
    float _1071 = abs(dot(vec3(_959, _960, _961), vec3(_880, _881, _882)));
    float _4342 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1073 = sqrt(_883);
    float _1086 = exp2((_1073 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1073 * 3.0));
    float _1092 = (1.0 - _1086) * ((_1073 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1093 = _1086 * _1073;
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1458;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1183 = fma(_1129, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121));
        float _1187 = fma(_1129, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121));
        float _1191 = fma(_1129, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121));
        float _1216 = _1121 + _880;
        float _1217 = _1125 + _881;
        float _1218 = _1129 + _882;
        float _1228 = fma(_1218, cbModelParam._m0[26u].z, fma(_1217, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1216)) - _1183;
        float _1229 = fma(_1218, cbModelParam._m0[27u].z, fma(_1217, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1216)) - _1187;
        float _1230 = fma(_1218, cbModelParam._m0[28u].z, fma(_1217, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1216)) - _1191;
        float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
        float _1247 = ((_1234 * _1228) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1183 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1234 * _1229) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1187 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1234 * _1230) / cbModelParam._m0[34u].z) + ((((((_1191 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        float _1286 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1252.x + (-0.5));
        float _1288 = _1286 * (_1252.y + (-0.5));
        float _1289 = _1286 * (_1252.z + (-0.5));
        float _1296 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1259.x + (-0.5));
        float _1298 = _1296 * (_1259.y + (-0.5));
        float _1299 = _1296 * (_1259.z + (-0.5));
        float _1306 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1266.x + (-0.5));
        float _1308 = _1306 * (_1266.y + (-0.5));
        float _1309 = _1306 * (_1266.z + (-0.5));
        float _1316 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1273.x + (-0.5));
        float _1318 = _1316 * (_1273.y + (-0.5));
        float _1319 = _1316 * (_1273.z + (-0.5));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = _1287 * 0.5;
        float _1324 = _1297 * 0.5;
        float _1325 = _1307 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1340 = (dot(vec3(_880, _881, _882), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1350 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4390 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1352 + 1.0))) + _1357) * _1320;
        float _1367 = _1288 * 0.5;
        float _1368 = _1298 * 0.5;
        float _1369 = _1308 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_880, _881, _882), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4423 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1394 + 1.0))) + _1399) * _1321;
        float _1409 = _1289 * 0.5;
        float _1410 = _1299 * 0.5;
        float _1411 = _1309 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_880, _881, _882), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4456 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1436 + 1.0))) + _1441) * _1322;
        _1458 = _1289;
        _1460 = _1288;
        _1461 = _1287;
        _1462 = _1299;
        _1463 = _1298;
        _1464 = _1297;
        _1465 = _1309;
        _1466 = _1308;
        _1467 = _1307;
        _1468 = _1322;
        _1469 = _1321;
        _1470 = _1320;
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
    }
    else
    {
        _1458 = _1459;
        _1460 = _1459;
        _1461 = _1459;
        _1462 = _1459;
        _1463 = _1459;
        _1464 = _1459;
        _1465 = _1459;
        _1466 = _1459;
        _1467 = _1459;
        _1468 = _1459;
        _1469 = _1459;
        _1470 = _1459;
        _1471 = 0.0;
        _1472 = 0.0;
        _1473 = 0.0;
    }
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1500 = fma(_1129, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121));
        float _1504 = fma(_1129, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121));
        float _1508 = fma(_1129, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121));
        float _1531 = _1121 + _880;
        float _1532 = _1125 + _881;
        float _1533 = _1129 + _882;
        float _1543 = fma(_1533, cbModelParam._m0[30u].z, fma(_1532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1531)) - _1500;
        float _1544 = fma(_1533, cbModelParam._m0[31u].z, fma(_1532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1531)) - _1504;
        float _1545 = fma(_1533, cbModelParam._m0[32u].z, fma(_1532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1531)) - _1508;
        float _1549 = inversesqrt(dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545)));
        float _1562 = ((_1549 * _1543) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1500 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1549 * _1544) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1504 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1564 = ((_1549 * _1545) / cbModelParam._m0[35u].z) + ((((((_1508 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        float _1599 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1566.x + (-0.5));
        float _1601 = _1599 * (_1566.y + (-0.5));
        float _1602 = _1599 * (_1566.z + (-0.5));
        float _1609 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1573.x + (-0.5));
        float _1611 = _1609 * (_1573.y + (-0.5));
        float _1612 = _1609 * (_1573.z + (-0.5));
        float _1619 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1580.x + (-0.5));
        float _1621 = _1619 * (_1580.y + (-0.5));
        float _1622 = _1619 * (_1580.z + (-0.5));
        float _1629 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1587.x + (-0.5));
        float _1631 = _1629 * (_1587.y + (-0.5));
        float _1632 = _1629 * (_1587.z + (-0.5));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = _1600 * 0.5;
        float _1637 = _1610 * 0.5;
        float _1638 = _1620 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_880, _881, _882), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4497 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4508 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4519 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_1663 + 1.0))) + _1668) * _1633;
        float _1678 = _1601 * 0.5;
        float _1679 = _1611 * 0.5;
        float _1680 = _1621 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_880, _881, _882), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4530 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4541 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4552 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_1705 + 1.0))) + _1710) * _1634;
        float _1720 = _1602 * 0.5;
        float _1721 = _1612 * 0.5;
        float _1722 = _1622 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_880, _881, _882), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4563 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4574 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4585 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_1747 + 1.0))) + _1752) * _1635;
        _1769 = _1602;
        _1770 = _1601;
        _1771 = _1600;
        _1772 = _1612;
        _1773 = _1611;
        _1774 = _1610;
        _1775 = _1622;
        _1776 = _1621;
        _1777 = _1620;
        _1778 = _1635;
        _1779 = _1634;
        _1780 = _1633;
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
    }
    else
    {
        _1769 = _1459;
        _1770 = _1459;
        _1771 = _1459;
        _1772 = _1459;
        _1773 = _1459;
        _1774 = _1459;
        _1775 = _1459;
        _1776 = _1459;
        _1777 = _1459;
        _1778 = _1459;
        _1779 = _1459;
        _1780 = _1459;
        _1781 = 0.0;
        _1782 = 0.0;
        _1783 = 0.0;
    }
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1471)) + _1471;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1472)) + _1472;
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1473)) + _1473;
    float _1816 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1793));
    float _1837 = _1065 * 0.5;
    float _1838 = _1066 * 0.5;
    float _1839 = _1067 * 0.5;
    float _1840 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1843 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1846 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1880;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1853 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1458, _1462, _1465, _1468));
        float _1857 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1460, _1463, _1466, _1469));
        float _1861 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1461, _1464, _1467, _1470));
        float _1868 = dot(vec4(cbModelParam._m0[39u]), vec4(_1837, _1838, _1839, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1868) ? 0.0 : (isnan(0.0) ? _1868 : max(0.0, _1868))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1891;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1882 = dot(vec4(cbModelParam._m0[40u]), vec4(_1837, _1838, _1839, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1895 = (_1891 * cbModelParam._m0[1u].x) + (_1880 * (1.0 - cbModelParam._m0[1u].x));
    float _1905 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _883);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1905 : min(cbModelParam._m0[25u].z, _1905));
    float _1987;
    float _1989;
    float _1991;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1954 = fma(_1129, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1121)) + cbModelParam._m0[13u].w;
        float _1958 = fma(_1129, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1121)) + cbModelParam._m0[14u].w;
        float _1962 = fma(_1129, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1121)) + cbModelParam._m0[15u].w;
        float _1965 = fma(_1067, cbModelParam._m0[13u].z, fma(_1066, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1065));
        float _1968 = fma(_1067, cbModelParam._m0[14u].z, fma(_1066, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1065));
        float _1971 = fma(_1067, cbModelParam._m0[15u].z, fma(_1066, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1065));
        float _1999;
        if (_1965 > 0.0)
        {
            _1999 = abs((1.0 - _1954) / _1965);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1954 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1999 = frontier_phi_17_15_ladder;
        }
        float _2171;
        if (_1968 > 0.0)
        {
            _2171 = abs((1.0 - _1958) / _1968);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1958 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2171 = frontier_phi_26_22_ladder;
        }
        float _2466;
        if (_1971 > 0.0)
        {
            _2466 = abs((1.0 - _1962) / _1971);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1962 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2466 = frontier_phi_38_33_ladder;
        }
        float _2468 = isnan(_2171) ? _1999 : (isnan(_1999) ? _2171 : min(_1999, _2171));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1965) + _1954;
        float _2474 = (_2469 * _1968) + _1958;
        float _2475 = (_2469 * _1971) + _1962;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2478 = (-1.0) - _2476;
        float _2480 = _2476 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2475 > _2480) || ((_2475 < _2478) || ((_2474 > _2480) || ((_2474 < _2478) || ((_2473 < _2478) || (_2473 > _2480))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2475, cbModelParam._m0[9u].z, fma(_2474, cbModelParam._m0[9u].y, _2473 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2475, cbModelParam._m0[10u].z, fma(_2474, cbModelParam._m0[10u].y, _2473 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2475, cbModelParam._m0[11u].z, fma(_2474, cbModelParam._m0[11u].y, _2473 * cbModelParam._m0[11u].x))), _1906);
            frontier_phi_16_38_ladder = _2620.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2620.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2620.x * cbModelParam._m0[1u].y;
        }
        _1987 = frontier_phi_16_38_ladder_2;
        _1989 = frontier_phi_16_38_ladder_1;
        _1991 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1975 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1065, _1066, _1067), _1906);
        _1987 = _1975.x * cbModelParam._m0[1u].y;
        _1989 = _1975.y * cbModelParam._m0[1u].y;
        _1991 = _1975.z * cbModelParam._m0[1u].y;
    }
    float _1995 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _883);
    float _1996 = isnan(_1995) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1995 : min(cbModelParam._m0[25u].w, _1995));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2050 = fma(_1129, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1121)) + cbModelParam._m0[21u].w;
        float _2054 = fma(_1129, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1121)) + cbModelParam._m0[22u].w;
        float _2058 = fma(_1129, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1121)) + cbModelParam._m0[23u].w;
        float _2061 = fma(_1067, cbModelParam._m0[21u].z, fma(_1066, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1065));
        float _2064 = fma(_1067, cbModelParam._m0[22u].z, fma(_1066, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1065));
        float _2067 = fma(_1067, cbModelParam._m0[23u].z, fma(_1066, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1065));
        float _2176;
        if (_2061 > 0.0)
        {
            _2176 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2176 = frontier_phi_28_24_ladder;
        }
        float _2493;
        if (_2064 > 0.0)
        {
            _2493 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2493 = frontier_phi_40_35_ladder;
        }
        float _2831;
        if (_2067 > 0.0)
        {
            _2831 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2831 = frontier_phi_50_47_ladder;
        }
        float _2833 = isnan(_2493) ? _2176 : (isnan(_2176) ? _2493 : min(_2176, _2493));
        float _2834 = isnan(_2831) ? _2833 : (isnan(_2833) ? _2831 : min(_2833, _2831));
        float _2838 = (_2834 * _2061) + _2050;
        float _2839 = (_2834 * _2064) + _2054;
        float _2840 = (_2834 * _2067) + _2058;
        float _2841 = _2834 * 9.9999997473787516355514526367188e-05;
        float _2842 = (-1.0) - _2841;
        float _2844 = _2841 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2840 > _2844) || ((_2840 < _2842) || ((_2839 > _2844) || ((_2839 < _2842) || ((_2838 < _2842) || (_2838 > _2844))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2840, cbModelParam._m0[17u].z, fma(_2839, cbModelParam._m0[17u].y, _2838 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2840, cbModelParam._m0[18u].z, fma(_2839, cbModelParam._m0[18u].y, _2838 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2840, cbModelParam._m0[19u].z, fma(_2839, cbModelParam._m0[19u].y, _2838 * cbModelParam._m0[19u].x))), _1996);
            frontier_phi_25_50_ladder = _2962.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2962.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2962.x * cbModelParam._m0[1u].z;
        }
        _2086 = frontier_phi_25_50_ladder_2;
        _2088 = frontier_phi_25_50_ladder_1;
        _2090 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1065, _1066, _1067), _1996);
        _2086 = _2070.x * cbModelParam._m0[1u].z;
        _2088 = _2070.y * cbModelParam._m0[1u].z;
        _2090 = _2070.z * cbModelParam._m0[1u].z;
    }
    float _2103 = (((_1092 * _1041) + _1093) * _1057) * ((cbModelParam._m0[1u].w * (_2086 - _1987)) + _1987);
    float _2105 = (((_1092 * _1043) + _1093) * _1057) * ((cbModelParam._m0[1u].w * (_2088 - _1989)) + _1989);
    float _2107 = (((_1092 * _1044) + _1093) * _1057) * ((cbModelParam._m0[1u].w * (_2090 - _1991)) + _1991);
    float _2110 = fma(_2107, cbSceneParam._m0[89u].z, fma(_2105, cbSceneParam._m0[89u].y, _2103 * cbSceneParam._m0[89u].x));
    float _2113 = fma(_2107, cbSceneParam._m0[90u].z, fma(_2105, cbSceneParam._m0[90u].y, _2103 * cbSceneParam._m0[90u].x));
    float _2116 = fma(_2107, cbSceneParam._m0[91u].z, fma(_2105, cbSceneParam._m0[91u].y, _2103 * cbSceneParam._m0[91u].x));
    float _2150 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2154 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2158 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2162 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2163 = _2150 / _2162;
    float _2164 = _2154 / _2162;
    float _2165 = _2158 / _2162;
    float _2312;
    float _2313;
    float _2314;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2192 = ((uint(_2165 > cbSceneParam._m0[59u].y) + uint(_2165 > cbSceneParam._m0[59u].x)) + uint(_2165 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2193 = _2192 + 43u;
        uint _2201 = _2192 + 44u;
        uint _2209 = _2192 + 45u;
        uint _2217 = _2192 + 46u;
        float _2228 = fma(_2162, cbSceneParam._m0[_2193].w, fma(_2158, cbSceneParam._m0[_2193].z, fma(_2154, cbSceneParam._m0[_2193].y, _2150 * cbSceneParam._m0[_2193].x)));
        float _2232 = fma(_2162, cbSceneParam._m0[_2201].w, fma(_2158, cbSceneParam._m0[_2201].z, fma(_2154, cbSceneParam._m0[_2201].y, _2150 * cbSceneParam._m0[_2201].x)));
        float _2240 = fma(_2162, cbSceneParam._m0[_2217].w, fma(_2158, cbSceneParam._m0[_2217].z, fma(_2154, cbSceneParam._m0[_2217].y, _2150 * cbSceneParam._m0[_2217].x)));
        float _2245 = cbSceneParam._m0[33u].z * _2240;
        float _2247 = cbSceneParam._m0[33u].w * _2240;
        float _2250 = fma(_2162, cbSceneParam._m0[_2209].w, fma(_2158, cbSceneParam._m0[_2209].z, fma(_2154, cbSceneParam._m0[_2209].y, _2150 * cbSceneParam._m0[_2209].x))) / _2240;
        float _2298 = (cbSceneParam._m0[33u].x - sqrt(((_2164 * _2164) + (_2163 * _2163)) + (_2165 * _2165))) * cbSceneParam._m0[33u].y;
        float _4711 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2305 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2245 + _2228) / _2240, (_2247 + _2232) / _2240), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2247 + _2228) / _2240, (_2232 - _2245) / _2240), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2228 - _2245) / _2240, (_2232 - _2247) / _2240), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2228 - _2247) / _2240, (_2245 + _2232) / _2240), _2250), 0.0)).x), vec4(0.25)));
        _2312 = 1.0 - (_2305 * cbSceneParam._m0[34u].x);
        _2313 = 1.0 - (_2305 * cbSceneParam._m0[34u].y);
        _2314 = 1.0 - (_2305 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2312 = 1.0;
        _2313 = 1.0;
        _2314 = 1.0;
    }
    float _2378;
    float _2380;
    float _2382;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2366 = fma(_2162, cbSceneParam._m0[63u].w, fma(_2158, cbSceneParam._m0[63u].z, fma(_2154, cbSceneParam._m0[63u].y, _2150 * cbSceneParam._m0[63u].x)));
        float _2367 = fma(_2162, cbSceneParam._m0[60u].w, fma(_2158, cbSceneParam._m0[60u].z, fma(_2154, cbSceneParam._m0[60u].y, _2150 * cbSceneParam._m0[60u].x))) / _2366;
        float _2368 = fma(_2162, cbSceneParam._m0[61u].w, fma(_2158, cbSceneParam._m0[61u].z, fma(_2154, cbSceneParam._m0[61u].y, _2150 * cbSceneParam._m0[61u].x))) / _2366;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2367 >= cbSceneParam._m0[64u].x) && (_2368 >= cbSceneParam._m0[64u].y)) && (_2367 <= cbSceneParam._m0[64u].z)) && (_2368 <= cbSceneParam._m0[64u].w))
        {
            float _2506 = fma(_2162, cbSceneParam._m0[62u].w, fma(_2158, cbSceneParam._m0[62u].z, fma(_2154, cbSceneParam._m0[62u].y, _2150 * cbSceneParam._m0[62u].x))) / _2366;
            float _2510 = isnan(cbSceneParam._m0[41u].w) ? _2506 : (isnan(_2506) ? cbSceneParam._m0[41u].w : max(_2506, cbSceneParam._m0[41u].w));
            float _2553 = (cbSceneParam._m0[33u].x - sqrt(((_2164 * _2164) + (_2163 * _2163)) + (_2165 * _2165))) * cbSceneParam._m0[33u].y;
            float _4727 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
            float _2560 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2367, cbSceneParam._m0[33u].w + _2368), _2510), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2367, _2368 - cbSceneParam._m0[33u].z), _2510), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2367 - cbSceneParam._m0[33u].z, _2368 - cbSceneParam._m0[33u].w), _2510), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2367 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2368), _2510), 0.0)).x), vec4(0.25)));
            float _2564 = 1.0 - (_2560 * cbSceneParam._m0[34u].x);
            float _2565 = 1.0 - (_2560 * cbSceneParam._m0[34u].y);
            float _2566 = 1.0 - (_2560 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2566) ? _2314 : (isnan(_2314) ? _2566 : min(_2314, _2566));
            frontier_phi_37_36_ladder_1 = isnan(_2565) ? _2313 : (isnan(_2313) ? _2565 : min(_2313, _2565));
            frontier_phi_37_36_ladder_2 = isnan(_2564) ? _2312 : (isnan(_2312) ? _2564 : min(_2312, _2564));
        }
        else
        {
            frontier_phi_37_36_ladder = _2314;
            frontier_phi_37_36_ladder_1 = _2313;
            frontier_phi_37_36_ladder_2 = _2312;
        }
        _2378 = frontier_phi_37_36_ladder_2;
        _2380 = frontier_phi_37_36_ladder_1;
        _2382 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2378 = _2312;
        _2380 = _2313;
        _2382 = _2314;
    }
    uvec4 _2387 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2389 = _2387.x * 14u;
    uint _2390 = _2389 + 13u;
    float _2397 = _1057 + (-1.0);
    float _2402 = (cbLight._m0[_2390].x * _2397) + 1.0;
    float _2403 = (cbLight._m0[_2390].y * _2397) + 1.0;
    float _2404 = (cbLight._m0[_2390].z * _2397) + 1.0;
    float _2405 = (cbLight._m0[_2390].w * _2397) + 1.0;
    uint _2406 = _2389 + 5u;
    float _2412 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
    uint _2416 = _2389 + 4u;
    float _2425 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
    uint _2429 = _2389 | 1u;
    float _2440 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_880, _881, _882));
    float _2443 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_880, _881, _882));
    float _4763 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _4774 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2448 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * 0.3183098733425140380859375;
    float _2450 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * 0.3183098733425140380859375;
    float _2457 = ((cbLight._m0[_2406].x * _2412) * _2450) + (((cbLight._m0[_2416].x * _2378) * _2425) * _2448);
    float _2458 = ((_2412 * cbLight._m0[_2406].y) * _2450) + (((cbLight._m0[_2416].y * _2380) * _2425) * _2448);
    float _2459 = ((_2412 * cbLight._m0[_2406].z) * _2450) + (((cbLight._m0[_2416].z * _2382) * _2425) * _2448);
    uvec4 _2463 = floatBitsToUint(cbLight._m0[_2389 + 12u]);
    bool _2465 = _2463.x == 0u;
    float _2567;
    float _2569;
    float _2571;
    if (_2465)
    {
        _2567 = _2457;
        _2569 = _2458;
        _2571 = _2459;
    }
    else
    {
        uint _2575 = _2389 + 6u;
        float _2591 = (dot(vec3(cbLight._m0[_2389 + 2u].xyz), vec3(_880, _881, _882)) * 0.5) + 0.5;
        float _2592 = _2591 * _2591;
        float _4785 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2593 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2594 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
        _2567 = (((cbLight._m0[_2575].x * 0.3183098733425140380859375) * _2593) * _2594) + _2457;
        _2569 = (((cbLight._m0[_2575].y * 0.3183098733425140380859375) * _2593) * _2594) + _2458;
        _2571 = (((cbLight._m0[_2575].z * 0.3183098733425140380859375) * _2593) * _2594) + _2459;
    }
    bool _2574 = _2463.y == 0u;
    float _2629;
    float _2631;
    float _2633;
    if (_2574)
    {
        _2629 = _2567;
        _2631 = _2569;
        _2633 = _2571;
    }
    else
    {
        uint _2802 = _2389 + 7u;
        float _2818 = (dot(vec3(cbLight._m0[_2389 + 3u].xyz), vec3(_880, _881, _882)) * 0.5) + 0.5;
        float _2819 = _2818 * _2818;
        float _4801 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2820 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2821 = isnan(1.0) ? _2405 : (isnan(_2405) ? 1.0 : min(_2405, 1.0));
        _2629 = (((cbLight._m0[_2802].x * 0.3183098733425140380859375) * _2820) * _2821) + _2567;
        _2631 = (((cbLight._m0[_2802].y * 0.3183098733425140380859375) * _2820) * _2821) + _2569;
        _2633 = (((cbLight._m0[_2802].z * 0.3183098733425140380859375) * _2820) * _2821) + _2571;
    }
    uint _2636 = _2389 + 8u;
    float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _883) * 0.949999988079071044921875);
    float _2650 = _2649 * _2649;
    float _2651 = cbLight._m0[_2389].x + _959;
    float _2652 = cbLight._m0[_2389].y + _960;
    float _2653 = cbLight._m0[_2389].z + _961;
    float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
    float _2658 = _2657 * _2651;
    float _2659 = _2657 * _2652;
    float _2660 = _2657 * _2653;
    float _2661 = dot(vec3(_880, _881, _882), vec3(cbLight._m0[_2389].xyz));
    float _4817 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
    float _4828 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _2665 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
    float _2666 = dot(vec3(_880, _881, _882), vec3(_2658, _2659, _2660));
    float _4839 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2669 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
    float _2670 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2658, _2659, _2660));
    float _4850 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2674 = _2650 * _2650;
    float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
    float _2686 = exp2(log2(1.0 - (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) * 5.0);
    float _2687 = 0.959999978542327880859375 - _1038;
    float _2689 = 0.959999978542327880859375 - _1039;
    float _2690 = 0.959999978542327880859375 - _1040;
    float _2697 = 1.0 - _2650;
    float _2708 = (0.5 / (((_2665 * ((_2664 * _2697) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2665 * _2697) + _2650) * _2664))) * _2664;
    float _4861 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2710 = (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
    uint _2724 = _2389 + 9u;
    float _2735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _883) * 0.949999988079071044921875);
    float _2736 = _2735 * _2735;
    float _2737 = cbLight._m0[_2429].x + _959;
    float _2738 = cbLight._m0[_2429].y + _960;
    float _2739 = cbLight._m0[_2429].z + _961;
    float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
    float _2744 = _2743 * _2737;
    float _2745 = _2743 * _2738;
    float _2746 = _2743 * _2739;
    float _2747 = dot(vec3(_880, _881, _882), vec3(cbLight._m0[_2429].xyz));
    float _4872 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
    float _2750 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
    float _2751 = dot(vec3(_880, _881, _882), vec3(_2744, _2745, _2746));
    float _4883 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
    float _2754 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
    float _2755 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2744, _2745, _2746));
    float _4894 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2759 = _2736 * _2736;
    float _2763 = ((_2754 * _2754) * (_2759 + (-1.0))) + 1.0;
    float _2770 = exp2(log2(1.0 - (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) * 5.0);
    float _2777 = 1.0 - _2736;
    float _2787 = (0.5 / (((_2665 * ((_2750 * _2777) + _2736)) + 9.9999999392252902907785028219223e-09) + (((_2665 * _2777) + _2736) * _2750))) * _2750;
    float _4905 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2789 = (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2759 / ((_2763 * _2763) * 3.141590118408203125));
    float _2799 = (((((_2770 * _2687) + _1041) * cbLight._m0[_2724].x) * _2789) * _2412) + ((((cbLight._m0[_2636].x * _2378) * ((_2686 * _2687) + _1041)) * _2710) * _2425);
    float _2800 = (((((_2770 * _2689) + _1043) * cbLight._m0[_2724].y) * _2789) * _2412) + ((((cbLight._m0[_2636].y * _2380) * ((_2686 * _2689) + _1043)) * _2710) * _2425);
    float _2801 = (((((_2770 * _2690) + _1044) * cbLight._m0[_2724].z) * _2789) * _2412) + ((((cbLight._m0[_2636].z * _2382) * ((_2686 * _2690) + _1044)) * _2710) * _2425);
    float _2857;
    float _2859;
    float _2861;
    if (_2465)
    {
        _2857 = _2799;
        _2859 = _2800;
        _2861 = _2801;
    }
    else
    {
        uint _2863 = _2389 + 2u;
        uint _2867 = _2389 + 10u;
        float _2881 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2863].w)) * _883) * 0.949999988079071044921875);
        float _2882 = _2881 * _2881;
        float _2883 = cbLight._m0[_2863].x + _959;
        float _2884 = cbLight._m0[_2863].y + _960;
        float _2885 = cbLight._m0[_2863].z + _961;
        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
        float _2890 = _2889 * _2883;
        float _2891 = _2889 * _2884;
        float _2892 = _2889 * _2885;
        float _2893 = dot(vec3(_880, _881, _882), vec3(cbLight._m0[_2863].xyz));
        float _4916 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2896 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
        float _2897 = dot(vec3(_880, _881, _882), vec3(_2890, _2891, _2892));
        float _4927 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2900 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
        float _2901 = dot(vec3(cbLight._m0[_2863].xyz), vec3(_2890, _2891, _2892));
        float _4938 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2905 = _2882 * _2882;
        float _2909 = ((_2900 * _2900) * (_2905 + (-1.0))) + 1.0;
        float _2916 = exp2(log2(1.0 - (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0)))) * 5.0);
        float _2923 = 1.0 - _2882;
        float _2933 = (0.5 / (((_2665 * ((_2896 * _2923) + _2882)) + 9.9999999392252902907785028219223e-09) + (((_2665 * _2923) + _2882) * _2896))) * _2896;
        float _4949 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2935 = (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2905 / ((_2909 * _2909) * 3.141590118408203125));
        float _2936 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
        _2857 = (((((_2916 * _2687) + _1041) * cbLight._m0[_2867].x) * _2935) * _2936) + _2799;
        _2859 = (((((_2916 * _2689) + _1043) * cbLight._m0[_2867].y) * _2935) * _2936) + _2800;
        _2861 = (((((_2916 * _2690) + _1044) * cbLight._m0[_2867].z) * _2935) * _2936) + _2801;
    }
    float _2967;
    float _2969;
    float _2971;
    if (_2574)
    {
        _2967 = _2857;
        _2969 = _2859;
        _2971 = _2861;
    }
    else
    {
        uint _2978 = _2389 + 3u;
        uint _2982 = _2389 + 11u;
        float _2996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2978].w)) * _883) * 0.949999988079071044921875);
        float _2997 = _2996 * _2996;
        float _2998 = cbLight._m0[_2978].x + _959;
        float _2999 = cbLight._m0[_2978].y + _960;
        float _3000 = cbLight._m0[_2978].z + _961;
        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
        float _3005 = _3004 * _2998;
        float _3006 = _3004 * _2999;
        float _3007 = _3004 * _3000;
        float _3008 = dot(vec3(_880, _881, _882), vec3(cbLight._m0[_2978].xyz));
        float _4965 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        float _3011 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
        float _3012 = dot(vec3(_880, _881, _882), vec3(_3005, _3006, _3007));
        float _4976 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        float _3015 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
        float _3016 = dot(vec3(cbLight._m0[_2978].xyz), vec3(_3005, _3006, _3007));
        float _4987 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        float _3020 = _2997 * _2997;
        float _3024 = ((_3015 * _3015) * (_3020 + (-1.0))) + 1.0;
        float _3031 = exp2(log2(1.0 - (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) * 5.0);
        float _3038 = 1.0 - _2997;
        float _3048 = (0.5 / (((_2665 * ((_3011 * _3038) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_2665 * _3038) + _2997) * _3011))) * _3011;
        float _4998 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3050 = (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_3020 / ((_3024 * _3024) * 3.141590118408203125));
        float _3051 = isnan(1.0) ? _2405 : (isnan(_2405) ? 1.0 : min(_2405, 1.0));
        _2967 = (((((_3031 * _2687) + _1041) * cbLight._m0[_2982].x) * _3050) * _3051) + _2857;
        _2969 = (((((_3031 * _2689) + _1043) * cbLight._m0[_2982].y) * _3050) * _3051) + _2859;
        _2971 = (((((_3031 * _2690) + _1044) * cbLight._m0[_2982].z) * _3050) * _3051) + _2861;
    }
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    if (_2387.y == 0u)
    {
        uvec4 _3072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3073 = _3072.x;
        uint _3084 = uint((float(_3072.y) * floor(float(uint(cbSceneParam._m0[85u].y * _980) / _3073))) + floor(float(uint(cbSceneParam._m0[85u].x * _979) / _3073)));
        float _3094 = (log2(_2165 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3095 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
        uint _3098 = uint(isnan(14.0) ? _3095 : (isnan(_3095) ? 14.0 : min(_3095, 14.0)));
        uvec4 _3103 = texelFetch(g_lightClusterGridBuffer, int(((_3098 << 2u) + (_3084 << 6u)) >> 2u));
        uint _3104 = _3103.x;
        uint _3105 = _3072.z;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        if (((((1u << ((_3105 >> 4u) & 15u)) + 4294967295u) & _3104) == 0u) || ((_3105 & 240u) == 0u))
        {
            _3184 = 0.0;
            _3186 = 0.0;
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
            _3194 = 0.0;
        }
        else
        {
            float _3185;
            float _3187;
            float _3189;
            float _3191;
            float _3193;
            float _3195;
            float _3337 = 0.0;
            float _3338 = 0.0;
            float _3339 = 0.0;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            uint _3343 = 0u;
            uint _3352;
            bool _3353;
            for (;;)
            {
                _3352 = texelFetch(g_lightClassification, int((((_3098 << 5u) + (_3084 << 9u)) + (_3343 << 2u)) >> 2u)).x;
                _3353 = _3352 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3353)
                {
                    frontier_phi_71_pred = _3342;
                    frontier_phi_71_pred_1 = _3341;
                    frontier_phi_71_pred_2 = _3340;
                    frontier_phi_71_pred_3 = _3339;
                    frontier_phi_71_pred_4 = _3338;
                    frontier_phi_71_pred_5 = _3337;
                }
                else
                {
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    uint _3488;
                    _3482 = _3337;
                    _3483 = _3338;
                    _3484 = _3339;
                    _3485 = _3340;
                    _3486 = _3341;
                    _3487 = _3342;
                    _3488 = _3352;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    for (;;)
                    {
                        uint _3492 = uint(findLSB(_3488)) + (_3343 << 5u);
                        uint _3489 = (_3488 + 4294967295u) & _3488;
                        uint _3494 = _3492 * 48u;
                        vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3494)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 3u)).x));
                        uint _3514 = (_3492 * 48u) + 4u;
                        vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3514)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 3u)).x));
                        uint _3533 = (_3492 * 48u) + 8u;
                        vec3 _3544 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3533)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 2u)).x));
                        float _3548 = _3508.x - _2163;
                        float _3549 = _3508.y - _2164;
                        float _3550 = _3508.z - _2165;
                        float _3551 = dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550));
                        float _3554 = inversesqrt(_3551);
                        float _3555 = _3554 * _3548;
                        float _3556 = _3554 * _3549;
                        float _3557 = _3554 * _3550;
                        float _3558 = dot(vec3(_998, _1001, _1004), vec3(_3555, _3556, _3557));
                        float _3563 = 1.0 - (_3551 * _3508.w);
                        float _5024 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3564 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                        float _3565 = sqrt(_3551) * _3527.w;
                        float _3568 = 1.39999997615814208984375 / (_3565 + 1.39999997615814208984375);
                        float _3569 = _3568 * _3568;
                        float _3572 = ((1.0 - _3569) * _3558) + _3569;
                        float _3575 = _3565 * _3565;
                        float _3579 = ((isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0))) * _3564) / ((_3575 * 0.699999988079071044921875) + 1.0);
                        float _3583 = (-0.0) - _2163;
                        float _3584 = (-0.0) - _2164;
                        float _3585 = (-0.0) - _2165;
                        float _3589 = inversesqrt(dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585)));
                        float _3590 = _3589 * _3583;
                        float _3591 = _3589 * _3584;
                        float _3592 = _3589 * _3585;
                        float _3599 = exp2(log2(1.0 / ((_3575 * 3.5) + 5.0)) * 0.25);
                        float _3600 = 1.0 - _1073;
                        float _3607 = sqrt(1.0 - ((1.0 - (_3600 * _3600)) * (1.0 - (_3599 * _3599))));
                        float _3608 = _3607 * _3607;
                        float _3609 = _3608 * _3608;
                        float _3610 = _3590 + _3555;
                        float _3611 = _3591 + _3556;
                        float _3612 = _3592 + _3557;
                        float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                        float _3620 = dot(vec3(_998, _1001, _1004), vec3(_3590, _3591, _3592));
                        float _5040 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3623 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                        float _3624 = dot(vec3(_998, _1001, _1004), vec3(_3616 * _3610, _3616 * _3611, _3616 * _3612));
                        float _5051 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                        float _3627 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                        float _3631 = ((_3627 * _3627) * (_3609 + (-1.0))) + 1.0;
                        float _3632 = _3568 * _3608;
                        float _3633 = _3632 * _3632;
                        float _3636 = ((1.0 - _3633) * _3558) + _3633;
                        float _5062 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                        float _3637 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                        float _3638 = 1.0 - _3608;
                        float _3648 = (0.5 / (((_3637 * ((_3623 * _3638) + _3608)) + 9.9999999392252902907785028219223e-09) + (((_3637 * _3638) + _3608) * _3623))) * _3637;
                        float _5073 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                        float _3659 = (((_3609 * 3.1415927410125732421875) * (isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0)))) / ((_3631 * _3631) * ((_3575 * 2.1991131305694580078125) + 3.141590118408203125))) * _3564;
                        _3412 = (_3579 * _3527.x) + _3485;
                        _3413 = (_3579 * _3527.y) + _3486;
                        _3414 = (_3579 * _3527.z) + _3487;
                        _3409 = (_3659 * _3544.x) + _3482;
                        _3410 = (_3659 * _3544.y) + _3483;
                        _3411 = (_3659 * _3544.z) + _3484;
                        if (_3489 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3482 = _3409;
                            _3483 = _3410;
                            _3484 = _3411;
                            _3485 = _3412;
                            _3486 = _3413;
                            _3487 = _3414;
                            _3488 = _3489;
                        }
                    }
                    frontier_phi_71_pred = _3414;
                    frontier_phi_71_pred_1 = _3413;
                    frontier_phi_71_pred_2 = _3412;
                    frontier_phi_71_pred_3 = _3411;
                    frontier_phi_71_pred_4 = _3410;
                    frontier_phi_71_pred_5 = _3409;
                }
                _3195 = frontier_phi_71_pred;
                _3193 = frontier_phi_71_pred_1;
                _3191 = frontier_phi_71_pred_2;
                _3189 = frontier_phi_71_pred_3;
                _3187 = frontier_phi_71_pred_4;
                _3185 = frontier_phi_71_pred_5;
                uint _3344 = _3343 + 1u;
                if (_3344 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3337 = _3185;
                    _3338 = _3187;
                    _3339 = _3189;
                    _3340 = _3191;
                    _3341 = _3193;
                    _3342 = _3195;
                    _3343 = _3344;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3184 = _3185;
            _3186 = _3187;
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
            _3194 = _3195;
        }
        uvec4 _3198 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3199 = _3198.z;
        uint _3201 = (_3199 >> 8u) & 15u;
        float _3305;
        float _3307;
        float _3309;
        float _3311;
        float _3313;
        float _3315;
        if (((4294967295u << _3201) & _3104) == 0u)
        {
            _3305 = _3184;
            _3307 = _3186;
            _3309 = _3188;
            _3311 = _3190;
            _3313 = _3192;
            _3315 = _3194;
        }
        else
        {
            float _3330 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
            float _3331 = _3330 * _2163;
            float _3332 = _3330 * _2164;
            float _3333 = _3330 * _2165;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3201 < ((_3199 >> 12u) & 15u))
            {
                float _3306;
                float _3308;
                float _3310;
                float _3312;
                float _3314;
                float _3316;
                float _3465 = _3184;
                float _3466 = _3186;
                float _3467 = _3188;
                float _3468 = _3190;
                float _3469 = _3192;
                float _3470 = _3194;
                uint _3471 = _3201;
                uint _3480;
                bool _3481;
                for (;;)
                {
                    _3480 = texelFetch(g_lightClassification, int((((_3098 << 5u) + (_3084 << 9u)) + (_3471 << 2u)) >> 2u)).x;
                    _3481 = _3480 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3481)
                    {
                        frontier_phi_82_pred = _3470;
                        frontier_phi_82_pred_1 = _3469;
                        frontier_phi_82_pred_2 = _3468;
                        frontier_phi_82_pred_3 = _3467;
                        frontier_phi_82_pred_4 = _3466;
                        frontier_phi_82_pred_5 = _3465;
                    }
                    else
                    {
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3966;
                        float _3967;
                        float _3968;
                        float _3969;
                        float _3970;
                        float _3971;
                        float _3686 = _3465;
                        float _3687 = _3466;
                        float _3688 = _3467;
                        float _3689 = _3468;
                        float _3690 = _3469;
                        float _3691 = _3470;
                        uint _3692 = _3480;
                        uint _3693;
                        vec4 _3718;
                        float _3719;
                        vec4 _3734;
                        vec3 _3746;
                        vec4 _3761;
                        vec4 _3776;
                        float _3822;
                        bool _3823;
                        for (;;)
                        {
                            uint _3703 = ((_3471 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3692));
                            _3693 = (_3692 + 4294967295u) & _3692;
                            uint _3705 = _3703 * 40u;
                            _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            _3719 = _3718.w;
                            uint _3721 = (_3703 * 40u) + 4u;
                            _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            uint _3736 = (_3703 * 40u) + 8u;
                            _3746 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x));
                            uint _3748 = (_3703 * 40u) + 16u;
                            _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            uint _3763 = (_3703 * 40u) + 20u;
                            _3776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 3u)).x));
                            uint _3778 = (_3703 * 40u) + 24u;
                            vec4 _3791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 3u)).x));
                            uint _3797 = (_3703 * 40u) + 28u;
                            vec4 _3810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 3u)).x));
                            _3822 = fma(_2165, _3810.z, fma(_2164, _3810.y, _3810.x * _2163)) + _3810.w;
                            _3823 = !((fma(_2165, _3791.z, fma(_2164, _3791.y, _3791.x * _2163)) + _3791.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3823)
                            {
                                float _3850 = _3718.x - _2163;
                                float _3851 = _3718.y - _2164;
                                float _3852 = _3718.z - _2165;
                                float _3853 = dot(vec3(_3850, _3851, _3852), vec3(_3850, _3851, _3852));
                                float _3856 = inversesqrt(_3853);
                                float _3857 = _3856 * _3850;
                                float _3858 = _3856 * _3851;
                                float _3859 = _3856 * _3852;
                                float _3863 = 1.0 - (_3853 / (_3719 * _3719));
                                float _5084 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3864 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                                float _3868 = sqrt(_3853) * _3734.w;
                                float _3870 = 1.39999997615814208984375 / (_3868 + 1.39999997615814208984375);
                                float _3871 = _3870 * _3870;
                                float _3874 = ((1.0 - _3871) * dot(vec3(_3857, _3858, _3859), vec3(_998, _1001, _1004))) + _3871;
                                float _3877 = _3868 * _3868;
                                float _3881 = (fma(_2165, _3761.z, fma(_2164, _3761.y, _3761.x * _2163)) + _3761.w) / _3822;
                                float _3882 = (fma(_2165, _3776.z, fma(_2164, _3776.y, _3776.x * _2163)) + _3776.w) / _3822;
                                float _3886 = 1.0 - dot(vec2(_3881, _3882), vec2(_3881, _3882));
                                float _5100 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3887 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
                                float _3888 = _3887 * (((isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0))) * _3864) / ((_3877 * 0.699999988079071044921875) + 1.0));
                                float _3900 = exp2(log2(1.0 / ((_3877 * 3.5) + 5.0)) * 0.25);
                                float _3901 = 1.0 - _1073;
                                float _3908 = sqrt(1.0 - ((1.0 - (_3901 * _3901)) * (1.0 - (_3900 * _3900))));
                                float _3909 = _3908 * _3908;
                                float _3910 = _3909 * _3909;
                                float _3911 = _3857 - _3331;
                                float _3912 = _3858 - _3332;
                                float _3913 = _3859 - _3333;
                                float _3917 = inversesqrt(dot(vec3(_3911, _3912, _3913), vec3(_3911, _3912, _3913)));
                                float _3921 = dot(vec3(_998, _1001, _1004), vec3((-0.0) - _3331, (-0.0) - _3332, (-0.0) - _3333));
                                float _5111 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3924 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                                float _3925 = dot(vec3(_998, _1001, _1004), vec3(_3917 * _3911, _3917 * _3912, _3917 * _3913));
                                float _5122 = isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0));
                                float _3928 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                                float _3932 = ((_3928 * _3928) * (_3910 + (-1.0))) + 1.0;
                                float _3933 = _3870 * _3909;
                                float _3934 = _3933 * _3933;
                                float _3940 = ((1.0 - _3934) * dot(vec3(_998, _1001, _1004), vec3(_3857, _3858, _3859))) + _3934;
                                float _5133 = isnan(0.0) ? _3940 : (isnan(_3940) ? 0.0 : max(_3940, 0.0));
                                float _3941 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                                float _3942 = 1.0 - _3909;
                                float _3952 = (0.5 / (((_3941 * ((_3924 * _3942) + _3909)) + 9.9999999392252902907785028219223e-09) + (((_3941 * _3942) + _3909) * _3924))) * _3941;
                                float _5144 = isnan(0.0) ? _3952 : (isnan(_3952) ? 0.0 : max(_3952, 0.0));
                                float _3962 = (_3887 * _3864) * (((_3910 * 3.1415927410125732421875) * (isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0)))) / ((_3932 * _3932) * ((_3877 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3888 * _3734.z;
                                frontier_phi_88_pred_1 = _3888 * _3734.y;
                                frontier_phi_88_pred_2 = _3888 * _3734.x;
                                frontier_phi_88_pred_3 = _3962 * _3746.z;
                                frontier_phi_88_pred_4 = _3962 * _3746.y;
                                frontier_phi_88_pred_5 = _3962 * _3746.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3971 = frontier_phi_88_pred;
                            _3970 = frontier_phi_88_pred_1;
                            _3969 = frontier_phi_88_pred_2;
                            _3968 = frontier_phi_88_pred_3;
                            _3967 = frontier_phi_88_pred_4;
                            _3966 = frontier_phi_88_pred_5;
                            _3676 = _3969 + _3689;
                            _3677 = _3970 + _3690;
                            _3678 = _3971 + _3691;
                            _3673 = _3966 + _3686;
                            _3674 = _3967 + _3687;
                            _3675 = _3968 + _3688;
                            if (_3693 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3686 = _3673;
                                _3687 = _3674;
                                _3688 = _3675;
                                _3689 = _3676;
                                _3690 = _3677;
                                _3691 = _3678;
                                _3692 = _3693;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3678;
                        frontier_phi_82_pred_1 = _3677;
                        frontier_phi_82_pred_2 = _3676;
                        frontier_phi_82_pred_3 = _3675;
                        frontier_phi_82_pred_4 = _3674;
                        frontier_phi_82_pred_5 = _3673;
                    }
                    _3316 = frontier_phi_82_pred;
                    _3314 = frontier_phi_82_pred_1;
                    _3312 = frontier_phi_82_pred_2;
                    _3310 = frontier_phi_82_pred_3;
                    _3308 = frontier_phi_82_pred_4;
                    _3306 = frontier_phi_82_pred_5;
                    uint _3472 = _3471 + 1u;
                    if (_3472 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3465 = _3306;
                        _3466 = _3308;
                        _3467 = _3310;
                        _3468 = _3312;
                        _3469 = _3314;
                        _3470 = _3316;
                        _3471 = _3472;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3312;
                frontier_phi_63_64_ladder_1 = _3316;
                frontier_phi_63_64_ladder_2 = _3314;
                frontier_phi_63_64_ladder_3 = _3310;
                frontier_phi_63_64_ladder_4 = _3308;
                frontier_phi_63_64_ladder_5 = _3306;
            }
            else
            {
                frontier_phi_63_64_ladder = _3190;
                frontier_phi_63_64_ladder_1 = _3194;
                frontier_phi_63_64_ladder_2 = _3192;
                frontier_phi_63_64_ladder_3 = _3188;
                frontier_phi_63_64_ladder_4 = _3186;
                frontier_phi_63_64_ladder_5 = _3184;
            }
            _3305 = frontier_phi_63_64_ladder_5;
            _3307 = frontier_phi_63_64_ladder_4;
            _3309 = frontier_phi_63_64_ladder_3;
            _3311 = frontier_phi_63_64_ladder;
            _3313 = frontier_phi_63_64_ladder_2;
            _3315 = frontier_phi_63_64_ladder_1;
        }
        float _3320 = isnan(1.0) ? _1057 : (isnan(_1057) ? 1.0 : min(_1057, 1.0));
        _3117 = (_3320 * _3311) + _2629;
        _3119 = (_3320 * _3313) + _2631;
        _3121 = (_3320 * _3315) + _2633;
        _3123 = ((_3305 * _1041) * _3320) + _2967;
        _3125 = ((_3307 * _1043) * _3320) + _2969;
        _3127 = ((_3309 * _1044) * _3320) + _2971;
    }
    else
    {
        _3117 = _2629;
        _3119 = _2631;
        _3121 = _2633;
        _3123 = _2967;
        _3125 = _2969;
        _3127 = _2971;
    }
    float _5160 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _5171 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _5182 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _3144 = ((isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0))) * (_3117 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1057))) + ((_3123 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    float _3145 = ((isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0))) * (_3119 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1057))) + ((_3125 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    float _3146 = ((isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0))) * (_3121 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1057))) + ((_3127 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    uint _3147 = _265 + 6u;
    float _3155 = _979 / cbSceneParam._m0[86u].x;
    float _3156 = _980 / cbSceneParam._m0[86u].y;
    vec4 _3170 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3155, _3156, (log2((isnan(cbSceneParam._m0[77u].w) ? _902 : (isnan(_902) ? cbSceneParam._m0[77u].w : min(_902, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3172 = _3170.x;
    float _3173 = _3170.y;
    float _3174 = _3170.z;
    float _3175 = _3170.w;
    float _3247;
    float _3249;
    float _3251;
    float _3253;
    if (_902 > cbSceneParam._m0[78u].w)
    {
        float _3209 = isnan(_902) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _902 : min(cbSceneParam._m0[80u].w, _902));
        float _3210 = _3209 / _902;
        float _3221 = _3210 * _952;
        float _3222 = _953 * _3210;
        float _3223 = (-0.0) - _3222;
        float _3225 = _3210 * _954;
        float _3227 = (cbSceneParam._m0[77u].w * _3223) / _3209;
        float _3228 = _3227 + cbSceneParam._m0[79u].w;
        float _3229 = cbSceneParam._m0[79u].w - _3222;
        float _3235 = sqrt(((_3221 * _3221) + (_3222 * _3222)) + (_3225 * _3225));
        float _3238 = (1.0 - (cbSceneParam._m0[77u].w / _3209)) * _3235;
        float _3243 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3245 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3422;
        if (abs((_3223 - _3227) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3422 = ((((_3228 > 0.0) ? exp2(_3243 * _3228) : (2.0 - exp2(_3245 * _3228))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3238;
        }
        else
        {
            float _3366 = 1.0 / cbSceneParam._m0[80u].x;
            float _3367 = isnan(_3229) ? _3228 : (isnan(_3228) ? _3229 : max(_3228, _3229));
            float _3368 = isnan(_3229) ? _3228 : (isnan(_3228) ? _3229 : min(_3228, _3229));
            float _3377 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : min(_3367, 0.0));
            float _3378 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : min(_3368, 0.0));
            _3422 = ((abs(_3235 / _3223) * cbSceneParam._m0[80u].y) * ((((_3377 - _3378) * 2.0) - ((exp2(_3243 * (isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0)))) - exp2(_3243 * (isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0))))) * _3366)) - ((exp2(_3245 * _3377) - exp2(_3245 * _3378)) * _3366))) + (_3238 * cbSceneParam._m0[80u].z);
        }
        vec4 _3424 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3155, _3156, 1.0), 0.0);
        float _3433 = exp2((_3422 * (-1.44269502162933349609375)) * (1.0 - _3424.w));
        float _3434 = log2(_3433);
        float _3450 = log2(_3175);
        _3247 = (exp2(_3450 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3434 * cbSceneParam._m0[78u].x)) * _3424.x) / cbSceneParam._m0[78u].x)) + _3172;
        _3249 = (exp2(_3450 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3434 * cbSceneParam._m0[78u].y)) * _3424.y) / cbSceneParam._m0[78u].y)) + _3173;
        _3251 = (exp2(_3450 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3434 * cbSceneParam._m0[78u].z)) * _3424.z) / cbSceneParam._m0[78u].z)) + _3174;
        _3253 = _3433 * _3175;
    }
    else
    {
        _3247 = _3172;
        _3249 = _3173;
        _3251 = _3174;
        _3253 = _3175;
    }
    bool _3460;
    vec4 _3263;
    vec4 _3285;
    float _3287;
    float _3291;
    float _3292;
    float _3293;
    float _3294;
    bool _3304;
    for (;;)
    {
        _3263 = cbMatDynParam._m0[0u];
        float _3265 = roundEven(_3263.y);
        bool _3266 = _3265 == 3.0;
        float _3267 = log2(_3253);
        float _3274 = exp2(_3267 * cbSceneParam._m0[78u].x) * _3144;
        float _3275 = exp2(_3267 * cbSceneParam._m0[78u].y) * _3145;
        float _3276 = exp2(_3267 * cbSceneParam._m0[78u].z) * _3146;
        float _3283 = _968 + (-0.5);
        _3285 = cbMtdParam._m0[1u];
        _3287 = _3285.y * _3283;
        float _3290 = (_3265 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3291 = _3290 * (_3266 ? _3274 : (_3274 + (cbSceneParam._m0[72u].w * _3247)));
        _3292 = _3290 * (_3266 ? _3275 : (_3275 + (cbSceneParam._m0[72u].w * _3249)));
        _3293 = _3290 * (_3266 ? _3276 : (_3276 + (cbSceneParam._m0[72u].w * _3251)));
        _3294 = _3283 * 0.999000012874603271484375;
        _3304 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3304)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3294) < 0.5)
            {
                _3460 = true;
                break;
            }
        }
        uint _3401 = _1017 + uint(_3263.w);
        if ((cbInstanceData._m0[_3401].w < 1.0) && ((cbInstanceData._m0[_3401].w + _3294) < 0.5))
        {
            _3460 = true;
            break;
        }
        if ((_3287 + 1.0) < _3285.x)
        {
            _3460 = true;
            break;
        }
        _3460 = false;
        break;
    }
    float _3664;
    if (_3460)
    {
        discard_state = true;
        _3664 = 0.0;
    }
    else
    {
        _3664 = cbInstanceData._m0[_3147].w;
    }
    SV_Target.x = _3291;
    SV_Target.y = _3292;
    SV_Target.z = _3293;
    SV_Target.w = _3664;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3147].w;
    discard_exit();
}


