#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1337;
float _3718;
float _3719;
float _3720;
float _3721;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _363 = _361.x;
    float _375 = dot(vec4(_363, _361.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_363 - _375) * cbMtdParam._m0[24u].y) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3730 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _400 = (_393 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _401 = (_393 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _402 = (_393 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _451 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _465 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_441 - _451) * cbMtdParam._m0[24u].y) + _451) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3741 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _473 = (_466 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _474 = (_466 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _475 = (_466 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _516 = ((_488.x - _507) * _393) + _507;
    float _517 = ((_488.y - _508) * _393) + _508;
    float _518 = ((_488.z - _509) * _393) + _509;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _543 = ((_530.z - _518) * _466) + _518;
    float _546 = ((((_530.x - _516) * _466) + _516) * 2.0) + (-1.0);
    float _548 = ((((_530.y - _517) * _466) + _517) * 2.0) + (-1.0);
    float _549 = dot(vec2(_546, _548), vec2(_546, _548));
    float _3752 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _554 = sqrt(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _583 = _581.x;
    float _584 = 1.0 - _583;
    float _612 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_583 - _584) * cbMtdParam._m0[24u].w) + _584) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3763 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _621 = ((((cbMtdParam._m0[10u].x - _473) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _613) + _473;
    float _622 = ((((cbMtdParam._m0[10u].y - _474) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _613) + _474;
    float _623 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _475)) * _613) + _475;
    vec4 _635 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _651 = _649.x;
    float _669 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _651) * _393) + _651;
    float _687 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _669) * _466) + _669;
    float _691 = ((_635.x - _687) * cbMtdParam._m0[19u].z) + _687;
    float _693 = _691 - (_691 * _613);
    float _697 = ((cbMtdParam._m0[23u].y - _543) * _613) + _543;
    vec4 _716 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _722 = (_716.x * 2.0) + (-1.0);
    float _723 = (_716.y * 2.0) + (-1.0);
    float _724 = dot(vec2(_722, _723), vec2(_722, _723));
    float _3774 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _740 = (_613 * (((cbMtdParam._m0[22u].z * _546) - _546) + _722)) + _546;
    float _741 = (_613 * (((cbMtdParam._m0[22u].z * _548) - _548) + _723)) + _548;
    float _742 = (_613 * (sqrt(1.0 - (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) - _554)) + _554;
    float _744 = cbMtdParam._m0[22u].x + _567.w;
    float _747 = fma(_742, _242 * NORMAL.x, fma(_741, _249 * TANGENT.x, (_235 * _227) * _740));
    float _750 = fma(_742, _242 * NORMAL.y, fma(_741, _249 * TANGENT.y, (_235 * _228) * _740));
    float _753 = fma(_742, _242 * NORMAL.z, fma(_741, _249 * TANGENT.z, (_235 * _229) * _740));
    float _757 = inversesqrt(dot(vec3(_747, _750, _753), vec3(_747, _750, _753)));
    float _758 = _757 * _747;
    float _759 = _757 * _750;
    float _760 = _757 * _753;
    float _3785 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _761 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _3807 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3818 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3829 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3840 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _766 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _780 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _830 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _820);
    float _831 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _820);
    float _832 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _820);
    float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
    float _837 = _830 * _836;
    float _838 = _831 * _836;
    float _839 = _832 * _836;
    vec4 _844 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _846 = _844.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1018 = sqrt(((_830 * _830) + (_831 * _831)) + (_832 * _832));
        float _1024 = (cbMatDynParam._m0[5u].x * _1018) + cbMatDynParam._m0[5u].y;
        float _3851 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1029 = (cbMatDynParam._m0[5u].z * _1018) + cbMatDynParam._m0[5u].w;
        float _3862 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) - _1025)) + _1025) < ((_846 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _857 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _858 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _876 = fma(_760, cbSceneParam._m0[5u].z, fma(_759, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _758));
    float _879 = fma(_760, cbSceneParam._m0[6u].z, fma(_759, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _758));
    float _882 = fma(_760, cbSceneParam._m0[7u].z, fma(_759, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _758));
    uint _895 = _255 + 9u;
    uint _896 = _895 + uint(cbMatDynParam._m0[0u].w);
    float _902 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_896].x;
    float _903 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * cbInstanceData._m0[_896].y;
    float _904 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * cbInstanceData._m0[_896].z;
    float _3873 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _908 = 1.0 - _766;
    float _909 = _905 * _908;
    float _910 = _906 * _908;
    float _911 = _907 * _908;
    float _916 = (_905 + (-0.039999999105930328369140625)) * _766;
    float _917 = (_906 + (-0.039999999105930328369140625)) * _766;
    float _918 = (_907 + (-0.039999999105930328369140625)) * _766;
    float _919 = _916 + 0.039999999105930328369140625;
    float _921 = _917 + 0.039999999105930328369140625;
    float _922 = _918 + 0.039999999105930328369140625;
    vec4 _931 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _857, cbSceneParam._m0[86u].y * _858));
    float _935 = ((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * TEXCOORD_5.w) * _931.x;
    float _936 = dot(vec3(_758, _759, _760), vec3(_837, _838, _839));
    float _939 = _936 * 2.0;
    float _943 = (_939 * _758) - _837;
    float _944 = (_939 * _759) - _838;
    float _945 = (_939 * _760) - _839;
    float _949 = abs(dot(vec3(_837, _838, _839), vec3(_758, _759, _760)));
    float _3906 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _951 = sqrt(_761);
    float _964 = exp2((_951 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_951 * 3.0));
    float _970 = (1.0 - _964) * ((_951 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _971 = _964 * _951;
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1336;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1061 = fma(_1007, cbModelParam._m0[26u].z, fma(_1003, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _999));
        float _1065 = fma(_1007, cbModelParam._m0[27u].z, fma(_1003, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _999));
        float _1069 = fma(_1007, cbModelParam._m0[28u].z, fma(_1003, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _999));
        float _1094 = _999 + _758;
        float _1095 = _1003 + _759;
        float _1096 = _1007 + _760;
        float _1106 = fma(_1096, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1094)) - _1061;
        float _1107 = fma(_1096, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1094)) - _1065;
        float _1108 = fma(_1096, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1094)) - _1069;
        float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
        float _1125 = ((_1112 * _1106) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1061 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1112 * _1107) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1065 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1112 * _1108) / cbModelParam._m0[34u].z) + ((((((_1069 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        float _1164 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1130.x + (-0.5));
        float _1166 = _1164 * (_1130.y + (-0.5));
        float _1167 = _1164 * (_1130.z + (-0.5));
        float _1174 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1137.x + (-0.5));
        float _1176 = _1174 * (_1137.y + (-0.5));
        float _1177 = _1174 * (_1137.z + (-0.5));
        float _1184 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1144.x + (-0.5));
        float _1186 = _1184 * (_1144.y + (-0.5));
        float _1187 = _1184 * (_1144.z + (-0.5));
        float _1194 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1151.x + (-0.5));
        float _1196 = _1194 * (_1151.y + (-0.5));
        float _1197 = _1194 * (_1151.z + (-0.5));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = _1165 * 0.5;
        float _1202 = _1175 * 0.5;
        float _1203 = _1185 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1218 = (dot(vec3(_758, _759, _760), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1228 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3954 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1230 + 1.0))) + _1235) * _1198;
        float _1245 = _1166 * 0.5;
        float _1246 = _1176 * 0.5;
        float _1247 = _1186 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_758, _759, _760), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3987 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1272 + 1.0))) + _1277) * _1199;
        float _1287 = _1167 * 0.5;
        float _1288 = _1177 * 0.5;
        float _1289 = _1187 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_758, _759, _760), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4020 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1314 + 1.0))) + _1319) * _1200;
        _1336 = _1167;
        _1338 = _1166;
        _1339 = _1165;
        _1340 = _1177;
        _1341 = _1176;
        _1342 = _1175;
        _1343 = _1187;
        _1344 = _1186;
        _1345 = _1185;
        _1346 = _1200;
        _1347 = _1199;
        _1348 = _1198;
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _1337;
        _1338 = _1337;
        _1339 = _1337;
        _1340 = _1337;
        _1341 = _1337;
        _1342 = _1337;
        _1343 = _1337;
        _1344 = _1337;
        _1345 = _1337;
        _1346 = _1337;
        _1347 = _1337;
        _1348 = _1337;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1378 = fma(_1007, cbModelParam._m0[30u].z, fma(_1003, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _999));
        float _1382 = fma(_1007, cbModelParam._m0[31u].z, fma(_1003, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _999));
        float _1386 = fma(_1007, cbModelParam._m0[32u].z, fma(_1003, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _999));
        float _1409 = _999 + _758;
        float _1410 = _1003 + _759;
        float _1411 = _1007 + _760;
        float _1421 = fma(_1411, cbModelParam._m0[30u].z, fma(_1410, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1409)) - _1378;
        float _1422 = fma(_1411, cbModelParam._m0[31u].z, fma(_1410, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1409)) - _1382;
        float _1423 = fma(_1411, cbModelParam._m0[32u].z, fma(_1410, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1409)) - _1386;
        float _1427 = inversesqrt(dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423)));
        float _1440 = ((_1427 * _1421) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1378 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1427 * _1422) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1382 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1427 * _1423) / cbModelParam._m0[35u].z) + ((((((_1386 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        float _1477 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1444.x + (-0.5));
        float _1479 = _1477 * (_1444.y + (-0.5));
        float _1480 = _1477 * (_1444.z + (-0.5));
        float _1487 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1451.x + (-0.5));
        float _1489 = _1487 * (_1451.y + (-0.5));
        float _1490 = _1487 * (_1451.z + (-0.5));
        float _1497 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1458.x + (-0.5));
        float _1499 = _1497 * (_1458.y + (-0.5));
        float _1500 = _1497 * (_1458.z + (-0.5));
        float _1507 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1465.x + (-0.5));
        float _1509 = _1507 * (_1465.y + (-0.5));
        float _1510 = _1507 * (_1465.z + (-0.5));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = _1478 * 0.5;
        float _1515 = _1488 * 0.5;
        float _1516 = _1498 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_758, _759, _760), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4083 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1541 + 1.0))) + _1546) * _1511;
        float _1556 = _1479 * 0.5;
        float _1557 = _1489 * 0.5;
        float _1558 = _1499 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_758, _759, _760), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4116 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1583 + 1.0))) + _1588) * _1512;
        float _1598 = _1480 * 0.5;
        float _1599 = _1490 * 0.5;
        float _1600 = _1500 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_758, _759, _760), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4149 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1625 + 1.0))) + _1630) * _1513;
        _1647 = _1480;
        _1648 = _1479;
        _1649 = _1478;
        _1650 = _1490;
        _1651 = _1489;
        _1652 = _1488;
        _1653 = _1500;
        _1654 = _1499;
        _1655 = _1498;
        _1656 = _1513;
        _1657 = _1512;
        _1658 = _1511;
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
    }
    else
    {
        _1647 = _1337;
        _1648 = _1337;
        _1649 = _1337;
        _1650 = _1337;
        _1651 = _1337;
        _1652 = _1337;
        _1653 = _1337;
        _1654 = _1337;
        _1655 = _1337;
        _1656 = _1337;
        _1657 = _1337;
        _1658 = _1337;
        _1659 = 0.0;
        _1660 = 0.0;
        _1661 = 0.0;
    }
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1349)) + _1349;
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1350)) + _1350;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1351)) + _1351;
    float _1694 = fma(_1673, cbSceneParam._m0[89u].z, fma(_1672, cbSceneParam._m0[89u].y, _1671 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1673, cbSceneParam._m0[90u].z, fma(_1672, cbSceneParam._m0[90u].y, _1671 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1673, cbSceneParam._m0[91u].z, fma(_1672, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1671));
    float _1715 = _943 * 0.5;
    float _1716 = _944 * 0.5;
    float _1717 = _945 * 0.5;
    float _1718 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1721 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1724 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1758;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1731 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1336, _1340, _1343, _1346));
        float _1735 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1739 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1339, _1342, _1345, _1348));
        float _1746 = dot(vec4(cbModelParam._m0[39u]), vec4(_1715, _1716, _1717, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1746) ? 0.0 : (isnan(0.0) ? _1746 : max(0.0, _1746))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1769;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1760 = dot(vec4(cbModelParam._m0[40u]), vec4(_1715, _1716, _1717, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1760) ? 0.0 : (isnan(0.0) ? _1760 : max(0.0, _1760))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1773 = (_1769 * cbModelParam._m0[1u].x) + (_1758 * (1.0 - cbModelParam._m0[1u].x));
    float _1783 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _761);
    float _1784 = isnan(_1783) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1783 : min(cbModelParam._m0[25u].z, _1783));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1833 = fma(_1007, cbModelParam._m0[13u].z, fma(_1003, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _999)) + cbModelParam._m0[13u].w;
        float _1837 = fma(_1007, cbModelParam._m0[14u].z, fma(_1003, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _999)) + cbModelParam._m0[14u].w;
        float _1841 = fma(_1007, cbModelParam._m0[15u].z, fma(_1003, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _999)) + cbModelParam._m0[15u].w;
        float _1844 = fma(_945, cbModelParam._m0[13u].z, fma(_944, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943));
        float _1847 = fma(_945, cbModelParam._m0[14u].z, fma(_944, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943));
        float _1850 = fma(_945, cbModelParam._m0[15u].z, fma(_944, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943));
        float _1878;
        if (_1844 > 0.0)
        {
            _1878 = abs((1.0 - _1833) / _1844);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1833 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1878 = frontier_phi_17_15_ladder;
        }
        float _2081;
        if (_1847 > 0.0)
        {
            _2081 = abs((1.0 - _1837) / _1847);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1837 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2081 = frontier_phi_26_22_ladder;
        }
        float _2335;
        if (_1850 > 0.0)
        {
            _2335 = abs((1.0 - _1841) / _1850);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1841 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2335 = frontier_phi_38_33_ladder;
        }
        float _2337 = isnan(_2081) ? _1878 : (isnan(_1878) ? _2081 : min(_1878, _2081));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1844) + _1833;
        float _2343 = (_2338 * _1847) + _1837;
        float _2344 = (_2338 * _1850) + _1841;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2345;
        float _2349 = _2345 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 > _2349) || ((_2343 < _2347) || ((_2342 < _2347) || (_2342 > _2349))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2344, cbModelParam._m0[9u].z, fma(_2343, cbModelParam._m0[9u].y, _2342 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2344, cbModelParam._m0[10u].z, fma(_2343, cbModelParam._m0[10u].y, _2342 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2344, cbModelParam._m0[11u].z, fma(_2343, cbModelParam._m0[11u].y, _2342 * cbModelParam._m0[11u].x))), _1784);
            frontier_phi_16_38_ladder = _2472.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2472.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2472.x * cbModelParam._m0[1u].y;
        }
        _1866 = frontier_phi_16_38_ladder_2;
        _1868 = frontier_phi_16_38_ladder_1;
        _1870 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_943, _944, _945), _1784);
        _1866 = _1854.x * cbModelParam._m0[1u].y;
        _1868 = _1854.y * cbModelParam._m0[1u].y;
        _1870 = _1854.z * cbModelParam._m0[1u].y;
    }
    float _1874 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _761);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1874 : min(cbModelParam._m0[25u].w, _1874));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1929 = fma(_1007, cbModelParam._m0[21u].z, fma(_1003, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _999)) + cbModelParam._m0[21u].w;
        float _1933 = fma(_1007, cbModelParam._m0[22u].z, fma(_1003, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _999)) + cbModelParam._m0[22u].w;
        float _1937 = fma(_1007, cbModelParam._m0[23u].z, fma(_1003, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _999)) + cbModelParam._m0[23u].w;
        float _1940 = fma(_945, cbModelParam._m0[21u].z, fma(_944, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943));
        float _1943 = fma(_945, cbModelParam._m0[22u].z, fma(_944, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943));
        float _1946 = fma(_945, cbModelParam._m0[23u].z, fma(_944, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943));
        float _2086;
        if (_1940 > 0.0)
        {
            _2086 = abs((1.0 - _1929) / _1940);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1929 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2086 = frontier_phi_28_24_ladder;
        }
        float _2362;
        if (_1943 > 0.0)
        {
            _2362 = abs((1.0 - _1933) / _1943);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1933 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2362 = frontier_phi_40_35_ladder;
        }
        float _2575;
        if (_1946 > 0.0)
        {
            _2575 = abs((1.0 - _1937) / _1946);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1937 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2575 = frontier_phi_49_46_ladder;
        }
        float _2577 = isnan(_2362) ? _2086 : (isnan(_2086) ? _2362 : min(_2086, _2362));
        float _2578 = isnan(_2575) ? _2577 : (isnan(_2577) ? _2575 : min(_2577, _2575));
        float _2582 = (_2578 * _1940) + _1929;
        float _2583 = (_2578 * _1943) + _1933;
        float _2584 = (_2578 * _1946) + _1937;
        float _2585 = _2578 * 9.9999997473787516355514526367188e-05;
        float _2586 = (-1.0) - _2585;
        float _2588 = _2585 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2584 > _2588) || ((_2584 < _2586) || ((_2583 > _2588) || ((_2583 < _2586) || ((_2582 < _2586) || (_2582 > _2588))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2584, cbModelParam._m0[17u].z, fma(_2583, cbModelParam._m0[17u].y, _2582 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2584, cbModelParam._m0[18u].z, fma(_2583, cbModelParam._m0[18u].y, _2582 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2584, cbModelParam._m0[19u].z, fma(_2583, cbModelParam._m0[19u].y, _2582 * cbModelParam._m0[19u].x))), _1875);
            frontier_phi_25_49_ladder = _2783.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2783.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2783.x * cbModelParam._m0[1u].z;
        }
        _1965 = frontier_phi_25_49_ladder_2;
        _1967 = frontier_phi_25_49_ladder_1;
        _1969 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1949 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_943, _944, _945), _1875);
        _1965 = _1949.x * cbModelParam._m0[1u].z;
        _1967 = _1949.y * cbModelParam._m0[1u].z;
        _1969 = _1949.z * cbModelParam._m0[1u].z;
    }
    float _1982 = (((_970 * _919) + _971) * _935) * ((cbModelParam._m0[1u].w * (_1965 - _1866)) + _1866);
    float _1984 = (((_970 * _921) + _971) * _935) * ((cbModelParam._m0[1u].w * (_1967 - _1868)) + _1868);
    float _1986 = (((_970 * _922) + _971) * _935) * ((cbModelParam._m0[1u].w * (_1969 - _1870)) + _1870);
    float _1989 = fma(_1986, cbSceneParam._m0[89u].z, fma(_1984, cbSceneParam._m0[89u].y, _1982 * cbSceneParam._m0[89u].x));
    float _1992 = fma(_1986, cbSceneParam._m0[90u].z, fma(_1984, cbSceneParam._m0[90u].y, _1982 * cbSceneParam._m0[90u].x));
    float _1995 = fma(_1986, cbSceneParam._m0[91u].z, fma(_1984, cbSceneParam._m0[91u].y, _1982 * cbSceneParam._m0[91u].x));
    uvec4 _2005 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2007 = _2005.x * 14u;
    uint _2008 = _2007 + 13u;
    float _2015 = _935 + (-1.0);
    float _2020 = (cbLight._m0[_2008].x * _2015) + 1.0;
    float _2021 = (cbLight._m0[_2008].y * _2015) + 1.0;
    float _2022 = (cbLight._m0[_2008].z * _2015) + 1.0;
    float _2023 = (cbLight._m0[_2008].w * _2015) + 1.0;
    uint _2024 = _2007 + 5u;
    float _2030 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
    uint _2034 = _2007 + 4u;
    float _2040 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
    uint _2044 = _2007 | 1u;
    float _2055 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_758, _759, _760));
    float _2058 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_758, _759, _760));
    float _4285 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _4296 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2063 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * 0.3183098733425140380859375;
    float _2065 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * 0.3183098733425140380859375;
    float _2072 = ((cbLight._m0[_2024].x * _2030) * _2065) + ((cbLight._m0[_2034].x * _2040) * _2063);
    float _2073 = ((_2030 * cbLight._m0[_2024].y) * _2065) + ((_2040 * cbLight._m0[_2034].y) * _2063);
    float _2074 = ((_2030 * cbLight._m0[_2024].z) * _2065) + ((_2040 * cbLight._m0[_2034].z) * _2063);
    uvec4 _2078 = floatBitsToUint(cbLight._m0[_2007 + 12u]);
    bool _2080 = _2078.x == 0u;
    float _2091;
    float _2093;
    float _2095;
    if (_2080)
    {
        _2091 = _2072;
        _2093 = _2073;
        _2095 = _2074;
    }
    else
    {
        uint _2099 = _2007 + 6u;
        float _2115 = (dot(vec3(cbLight._m0[_2007 + 2u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2116 = _2115 * _2115;
        float _4307 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2117 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2118 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
        _2091 = (((cbLight._m0[_2099].x * 0.3183098733425140380859375) * _2117) * _2118) + _2072;
        _2093 = (((cbLight._m0[_2099].y * 0.3183098733425140380859375) * _2117) * _2118) + _2073;
        _2095 = (((cbLight._m0[_2099].z * 0.3183098733425140380859375) * _2117) * _2118) + _2074;
    }
    bool _2098 = _2078.y == 0u;
    float _2136;
    float _2138;
    float _2140;
    if (_2098)
    {
        _2136 = _2091;
        _2138 = _2093;
        _2140 = _2095;
    }
    else
    {
        uint _2306 = _2007 + 7u;
        float _2322 = (dot(vec3(cbLight._m0[_2007 + 3u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4323 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2325 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2136 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2091;
        _2138 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2093;
        _2140 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2095;
    }
    uint _2143 = _2007 + 8u;
    float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _761) * 0.949999988079071044921875);
    float _2157 = _2156 * _2156;
    float _2158 = cbLight._m0[_2007].x + _837;
    float _2159 = cbLight._m0[_2007].y + _838;
    float _2160 = cbLight._m0[_2007].z + _839;
    float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
    float _2165 = _2164 * _2158;
    float _2166 = _2164 * _2159;
    float _2167 = _2164 * _2160;
    float _2168 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2007].xyz));
    float _4339 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _4350 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _2172 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2173 = dot(vec3(_758, _759, _760), vec3(_2165, _2166, _2167));
    float _4361 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2177 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2165, _2166, _2167));
    float _4372 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2181 = _2157 * _2157;
    float _2185 = ((_2176 * _2176) * (_2181 + (-1.0))) + 1.0;
    float _2193 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
    float _2194 = 0.959999978542327880859375 - _916;
    float _2196 = 0.959999978542327880859375 - _917;
    float _2197 = 0.959999978542327880859375 - _918;
    float _2204 = 1.0 - _2157;
    float _2215 = (0.5 / (((_2172 * ((_2171 * _2204) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_2172 * _2204) + _2157) * _2171))) * _2171;
    float _4383 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2217 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2181 / ((_2185 * _2185) * 3.141590118408203125));
    uint _2228 = _2007 + 9u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _761) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_2044].x + _837;
    float _2242 = cbLight._m0[_2044].y + _838;
    float _2243 = cbLight._m0[_2044].z + _839;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2044].xyz));
    float _4394 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2255 = dot(vec3(_758, _759, _760), vec3(_2248, _2249, _2250));
    float _4405 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2248, _2249, _2250));
    float _4416 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2240 * _2240;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2274 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
    float _2281 = 1.0 - _2240;
    float _2291 = (0.5 / (((_2172 * ((_2254 * _2281) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2172 * _2281) + _2240) * _2254))) * _2254;
    float _4427 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2293 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    float _2303 = (((((_2274 * _2194) + _919) * cbLight._m0[_2228].x) * _2293) * _2030) + (((((_2193 * _2194) + _919) * cbLight._m0[_2143].x) * _2217) * _2040);
    float _2304 = (((((_2274 * _2196) + _921) * cbLight._m0[_2228].y) * _2293) * _2030) + (((((_2193 * _2196) + _921) * cbLight._m0[_2143].y) * _2217) * _2040);
    float _2305 = (((((_2274 * _2197) + _922) * cbLight._m0[_2228].z) * _2293) * _2030) + (((((_2193 * _2197) + _922) * cbLight._m0[_2143].z) * _2217) * _2040);
    float _2367;
    float _2369;
    float _2371;
    if (_2080)
    {
        _2367 = _2303;
        _2369 = _2304;
        _2371 = _2305;
    }
    else
    {
        uint _2373 = _2007 + 2u;
        uint _2377 = _2007 + 10u;
        float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _761) * 0.949999988079071044921875);
        float _2392 = _2391 * _2391;
        float _2393 = cbLight._m0[_2373].x + _837;
        float _2394 = cbLight._m0[_2373].y + _838;
        float _2395 = cbLight._m0[_2373].z + _839;
        float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
        float _2400 = _2399 * _2393;
        float _2401 = _2399 * _2394;
        float _2402 = _2399 * _2395;
        float _2403 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2373].xyz));
        float _4438 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2407 = dot(vec3(_758, _759, _760), vec3(_2400, _2401, _2402));
        float _4449 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2411 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2400, _2401, _2402));
        float _4460 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2415 = _2392 * _2392;
        float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
        float _2426 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
        float _2433 = 1.0 - _2392;
        float _2443 = (0.5 / (((_2172 * ((_2406 * _2433) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2172 * _2433) + _2392) * _2406))) * _2406;
        float _4471 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2445 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
        float _2446 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
        _2367 = (((((_2426 * _2194) + _919) * cbLight._m0[_2377].x) * _2445) * _2446) + _2303;
        _2369 = (((((_2426 * _2196) + _921) * cbLight._m0[_2377].y) * _2445) * _2446) + _2304;
        _2371 = (((((_2426 * _2197) + _922) * cbLight._m0[_2377].z) * _2445) * _2446) + _2305;
    }
    float _2481;
    float _2483;
    float _2485;
    if (_2098)
    {
        _2481 = _2367;
        _2483 = _2369;
        _2485 = _2371;
    }
    else
    {
        uint _2492 = _2007 + 3u;
        uint _2496 = _2007 + 11u;
        float _2510 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2492].w)) * _761) * 0.949999988079071044921875);
        float _2511 = _2510 * _2510;
        float _2512 = cbLight._m0[_2492].x + _837;
        float _2513 = cbLight._m0[_2492].y + _838;
        float _2514 = cbLight._m0[_2492].z + _839;
        float _2518 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
        float _2519 = _2518 * _2512;
        float _2520 = _2518 * _2513;
        float _2521 = _2518 * _2514;
        float _2522 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2492].xyz));
        float _4487 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2526 = dot(vec3(_758, _759, _760), vec3(_2519, _2520, _2521));
        float _4498 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2530 = dot(vec3(cbLight._m0[_2492].xyz), vec3(_2519, _2520, _2521));
        float _4509 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2534 = _2511 * _2511;
        float _2538 = ((_2529 * _2529) * (_2534 + (-1.0))) + 1.0;
        float _2545 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
        float _2552 = 1.0 - _2511;
        float _2562 = (0.5 / (((_2172 * ((_2525 * _2552) + _2511)) + 9.9999999392252902907785028219223e-09) + (((_2172 * _2552) + _2511) * _2525))) * _2525;
        float _4520 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2564 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2534 / ((_2538 * _2538) * 3.141590118408203125));
        float _2565 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2481 = (((((_2545 * _2194) + _919) * cbLight._m0[_2496].x) * _2564) * _2565) + _2367;
        _2483 = (((((_2545 * _2196) + _921) * cbLight._m0[_2496].y) * _2564) * _2565) + _2369;
        _2485 = (((((_2545 * _2197) + _922) * cbLight._m0[_2496].z) * _2564) * _2565) + _2371;
    }
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    if (_2005.y == 0u)
    {
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2640;
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2640;
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2640;
        uvec4 _2655 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2656 = _2655.x;
        uint _2667 = uint((float(_2655.y) * floor(float(uint(cbSceneParam._m0[85u].y * _858) / _2656))) + floor(float(uint(cbSceneParam._m0[85u].x * _857) / _2656)));
        float _2677 = (log2(_2643 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2678 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        uint _2681 = uint(isnan(14.0) ? _2678 : (isnan(_2678) ? 14.0 : min(_2678, 14.0)));
        uvec4 _2686 = texelFetch(g_lightClusterGridBuffer, int(((_2681 << 2u) + (_2667 << 6u)) >> 2u));
        uint _2687 = _2686.x;
        uint _2688 = _2655.z;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        if (((((1u << ((_2688 >> 4u) & 15u)) + 4294967295u) & _2687) == 0u) || ((_2688 & 240u) == 0u))
        {
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
        }
        else
        {
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            uint _2947 = 0u;
            uint _2956;
            bool _2957;
            for (;;)
            {
                _2956 = texelFetch(g_lightClassification, int((((_2681 << 5u) + (_2667 << 9u)) + (_2947 << 2u)) >> 2u)).x;
                _2957 = _2956 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2957)
                {
                    frontier_phi_66_pred = _2941;
                    frontier_phi_66_pred_1 = _2946;
                    frontier_phi_66_pred_2 = _2945;
                    frontier_phi_66_pred_3 = _2944;
                    frontier_phi_66_pred_4 = _2943;
                    frontier_phi_66_pred_5 = _2942;
                }
                else
                {
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    uint _3092;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2956;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    for (;;)
                    {
                        uint _3096 = uint(findLSB(_3092)) + (_2947 << 5u);
                        uint _3093 = (_3092 + 4294967295u) & _3092;
                        uint _3098 = _3096 * 48u;
                        vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3118 = (_3096 * 48u) + 4u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3137 = (_3096 * 48u) + 8u;
                        vec3 _3148 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x));
                        float _3152 = _3112.x - _2641;
                        float _3153 = _3112.y - _2642;
                        float _3154 = _3112.z - _2643;
                        float _3155 = dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154));
                        float _3158 = inversesqrt(_3155);
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3162 = dot(vec3(_876, _879, _882), vec3(_3159, _3160, _3161));
                        float _3167 = 1.0 - (_3155 * _3112.w);
                        float _4546 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3169 = sqrt(_3155) * _3131.w;
                        float _3172 = 1.39999997615814208984375 / (_3169 + 1.39999997615814208984375);
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3162) + _3173;
                        float _3179 = _3169 * _3169;
                        float _3183 = ((isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))) * _3168) / ((_3179 * 0.699999988079071044921875) + 1.0);
                        float _3187 = (-0.0) - _2641;
                        float _3188 = (-0.0) - _2642;
                        float _3189 = (-0.0) - _2643;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3194 = _3193 * _3187;
                        float _3195 = _3193 * _3188;
                        float _3196 = _3193 * _3189;
                        float _3204 = exp2(log2(1.0 / ((_3179 * 3.5) + 5.0)) * 0.25);
                        float _3205 = 1.0 - _951;
                        float _3212 = sqrt(1.0 - ((1.0 - (_3205 * _3205)) * (1.0 - (_3204 * _3204))));
                        float _3213 = _3212 * _3212;
                        float _3214 = _3213 * _3213;
                        float _3215 = _3194 + _3159;
                        float _3216 = _3195 + _3160;
                        float _3217 = _3196 + _3161;
                        float _3221 = inversesqrt(dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217)));
                        float _3225 = dot(vec3(_876, _879, _882), vec3(_3194, _3195, _3196));
                        float _4562 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3228 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                        float _3229 = dot(vec3(_876, _879, _882), vec3(_3221 * _3215, _3221 * _3216, _3221 * _3217));
                        float _4573 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3232 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                        float _3236 = ((_3232 * _3232) * (_3214 + (-1.0))) + 1.0;
                        float _3237 = _3172 * _3213;
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3162) + _3238;
                        float _4584 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3243 = 1.0 - _3213;
                        float _3253 = (0.5 / (((_3242 * ((_3228 * _3243) + _3213)) + 9.9999999392252902907785028219223e-09) + (((_3242 * _3243) + _3213) * _3228))) * _3242;
                        float _4595 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3264 = (((_3214 * 3.1415927410125732421875) * (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) / ((_3236 * _3236) * ((_3179 * 2.1991131305694580078125) + 3.141590118408203125))) * _3168;
                        _3016 = (_3183 * _3131.x) + _3089;
                        _3017 = (_3183 * _3131.y) + _3090;
                        _3018 = (_3183 * _3131.z) + _3091;
                        _3013 = (_3264 * _3148.x) + _3086;
                        _3014 = (_3264 * _3148.y) + _3087;
                        _3015 = (_3264 * _3148.z) + _3088;
                        if (_3093 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3093;
                        }
                    }
                    frontier_phi_66_pred = _3013;
                    frontier_phi_66_pred_1 = _3018;
                    frontier_phi_66_pred_2 = _3017;
                    frontier_phi_66_pred_3 = _3016;
                    frontier_phi_66_pred_4 = _3015;
                    frontier_phi_66_pred_5 = _3014;
                }
                _2789 = frontier_phi_66_pred;
                _2799 = frontier_phi_66_pred_1;
                _2797 = frontier_phi_66_pred_2;
                _2795 = frontier_phi_66_pred_3;
                _2793 = frontier_phi_66_pred_4;
                _2791 = frontier_phi_66_pred_5;
                uint _2948 = _2947 + 1u;
                if (_2948 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2941 = _2789;
                    _2942 = _2791;
                    _2943 = _2793;
                    _2944 = _2795;
                    _2945 = _2797;
                    _2946 = _2799;
                    _2947 = _2948;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
        }
        uvec4 _2802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2803 = _2802.z;
        uint _2805 = (_2803 >> 8u) & 15u;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        if (((4294967295u << _2805) & _2687) == 0u)
        {
            _2909 = _2788;
            _2911 = _2790;
            _2913 = _2792;
            _2915 = _2794;
            _2917 = _2796;
            _2919 = _2798;
        }
        else
        {
            float _2934 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
            float _2935 = _2934 * _2641;
            float _2936 = _2934 * _2642;
            float _2937 = _2934 * _2643;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2805 < ((_2803 >> 12u) & 15u))
            {
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _3069 = _2788;
                float _3070 = _2790;
                float _3071 = _2792;
                float _3072 = _2794;
                float _3073 = _2796;
                float _3074 = _2798;
                uint _3075 = _2805;
                uint _3084;
                bool _3085;
                for (;;)
                {
                    _3084 = texelFetch(g_lightClassification, int((((_2681 << 5u) + (_2667 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                    _3085 = _3084 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3085)
                    {
                        frontier_phi_77_pred = _3074;
                        frontier_phi_77_pred_1 = _3073;
                        frontier_phi_77_pred_2 = _3072;
                        frontier_phi_77_pred_3 = _3071;
                        frontier_phi_77_pred_4 = _3070;
                        frontier_phi_77_pred_5 = _3069;
                    }
                    else
                    {
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3291 = _3069;
                        float _3292 = _3070;
                        float _3293 = _3071;
                        float _3294 = _3072;
                        float _3295 = _3073;
                        float _3296 = _3074;
                        uint _3297 = _3084;
                        uint _3298;
                        vec4 _3323;
                        float _3324;
                        vec4 _3339;
                        vec3 _3351;
                        vec4 _3366;
                        vec4 _3381;
                        float _3427;
                        bool _3428;
                        for (;;)
                        {
                            uint _3308 = ((_3075 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3297));
                            _3298 = (_3297 + 4294967295u) & _3297;
                            uint _3310 = _3308 * 40u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            _3324 = _3323.w;
                            uint _3326 = (_3308 * 40u) + 4u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3341 = (_3308 * 40u) + 8u;
                            _3351 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x));
                            uint _3353 = (_3308 * 40u) + 16u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3308 * 40u) + 20u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3308 * 40u) + 24u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3402 = (_3308 * 40u) + 28u;
                            vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            _3427 = fma(_2643, _3415.z, fma(_2642, _3415.y, _3415.x * _2641)) + _3415.w;
                            _3428 = !((fma(_2643, _3396.z, fma(_2642, _3396.y, _3396.x * _2641)) + _3396.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3428)
                            {
                                float _3455 = _3323.x - _2641;
                                float _3456 = _3323.y - _2642;
                                float _3457 = _3323.z - _2643;
                                float _3458 = dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457));
                                float _3461 = inversesqrt(_3458);
                                float _3462 = _3461 * _3455;
                                float _3463 = _3461 * _3456;
                                float _3464 = _3461 * _3457;
                                float _3468 = 1.0 - (_3458 / (_3324 * _3324));
                                float _4606 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3473 = sqrt(_3458) * _3339.w;
                                float _3475 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                                float _3476 = _3475 * _3475;
                                float _3479 = ((1.0 - _3476) * dot(vec3(_3462, _3463, _3464), vec3(_876, _879, _882))) + _3476;
                                float _3482 = _3473 * _3473;
                                float _3486 = (fma(_2643, _3366.z, fma(_2642, _3366.y, _3366.x * _2641)) + _3366.w) / _3427;
                                float _3487 = (fma(_2643, _3381.z, fma(_2642, _3381.y, _3381.x * _2641)) + _3381.w) / _3427;
                                float _3491 = 1.0 - dot(vec2(_3486, _3487), vec2(_3486, _3487));
                                float _4622 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3493 = _3492 * (((isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0))) * _3469) / ((_3482 * 0.699999988079071044921875) + 1.0));
                                float _3505 = exp2(log2(1.0 / ((_3482 * 3.5) + 5.0)) * 0.25);
                                float _3506 = 1.0 - _951;
                                float _3513 = sqrt(1.0 - ((1.0 - (_3506 * _3506)) * (1.0 - (_3505 * _3505))));
                                float _3514 = _3513 * _3513;
                                float _3515 = _3514 * _3514;
                                float _3516 = _3462 - _2935;
                                float _3517 = _3463 - _2936;
                                float _3518 = _3464 - _2937;
                                float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                                float _3526 = dot(vec3(_876, _879, _882), vec3((-0.0) - _2935, (-0.0) - _2936, (-0.0) - _2937));
                                float _4633 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3529 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3530 = dot(vec3(_876, _879, _882), vec3(_3522 * _3516, _3522 * _3517, _3522 * _3518));
                                float _4644 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3533 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3537 = ((_3533 * _3533) * (_3515 + (-1.0))) + 1.0;
                                float _3538 = _3475 * _3514;
                                float _3539 = _3538 * _3538;
                                float _3545 = ((1.0 - _3539) * dot(vec3(_876, _879, _882), vec3(_3462, _3463, _3464))) + _3539;
                                float _4655 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3547 = 1.0 - _3514;
                                float _3557 = (0.5 / (((_3546 * ((_3529 * _3547) + _3514)) + 9.9999999392252902907785028219223e-09) + (((_3546 * _3547) + _3514) * _3529))) * _3546;
                                float _4666 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3567 = (_3492 * _3469) * (((_3515 * 3.1415927410125732421875) * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) / ((_3537 * _3537) * ((_3482 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3493 * _3339.y;
                                frontier_phi_83_pred_1 = _3493 * _3339.x;
                                frontier_phi_83_pred_2 = _3567 * _3351.z;
                                frontier_phi_83_pred_3 = _3567 * _3351.y;
                                frontier_phi_83_pred_4 = _3567 * _3351.x;
                                frontier_phi_83_pred_5 = _3493 * _3339.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3575 = frontier_phi_83_pred;
                            _3574 = frontier_phi_83_pred_1;
                            _3573 = frontier_phi_83_pred_2;
                            _3572 = frontier_phi_83_pred_3;
                            _3571 = frontier_phi_83_pred_4;
                            _3576 = frontier_phi_83_pred_5;
                            _3281 = _3574 + _3294;
                            _3282 = _3575 + _3295;
                            _3283 = _3576 + _3296;
                            _3278 = _3571 + _3291;
                            _3279 = _3572 + _3292;
                            _3280 = _3573 + _3293;
                            if (_3298 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3298;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3283;
                        frontier_phi_77_pred_1 = _3282;
                        frontier_phi_77_pred_2 = _3281;
                        frontier_phi_77_pred_3 = _3280;
                        frontier_phi_77_pred_4 = _3279;
                        frontier_phi_77_pred_5 = _3278;
                    }
                    _2920 = frontier_phi_77_pred;
                    _2918 = frontier_phi_77_pred_1;
                    _2916 = frontier_phi_77_pred_2;
                    _2914 = frontier_phi_77_pred_3;
                    _2912 = frontier_phi_77_pred_4;
                    _2910 = frontier_phi_77_pred_5;
                    uint _3076 = _3075 + 1u;
                    if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3069 = _2910;
                        _3070 = _2912;
                        _3071 = _2914;
                        _3072 = _2916;
                        _3073 = _2918;
                        _3074 = _2920;
                        _3075 = _3076;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2914;
                frontier_phi_58_59_ladder_1 = _2920;
                frontier_phi_58_59_ladder_2 = _2918;
                frontier_phi_58_59_ladder_3 = _2916;
                frontier_phi_58_59_ladder_4 = _2912;
                frontier_phi_58_59_ladder_5 = _2910;
            }
            else
            {
                frontier_phi_58_59_ladder = _2792;
                frontier_phi_58_59_ladder_1 = _2798;
                frontier_phi_58_59_ladder_2 = _2796;
                frontier_phi_58_59_ladder_3 = _2794;
                frontier_phi_58_59_ladder_4 = _2790;
                frontier_phi_58_59_ladder_5 = _2788;
            }
            _2909 = frontier_phi_58_59_ladder_5;
            _2911 = frontier_phi_58_59_ladder_4;
            _2913 = frontier_phi_58_59_ladder;
            _2915 = frontier_phi_58_59_ladder_3;
            _2917 = frontier_phi_58_59_ladder_2;
            _2919 = frontier_phi_58_59_ladder_1;
        }
        float _2924 = isnan(1.0) ? _935 : (isnan(_935) ? 1.0 : min(_935, 1.0));
        _2700 = (_2924 * _2915) + _2136;
        _2702 = (_2924 * _2917) + _2138;
        _2704 = (_2924 * _2919) + _2140;
        _2706 = ((_2909 * _919) * _2924) + _2481;
        _2708 = ((_2911 * _921) * _2924) + _2483;
        _2710 = ((_2913 * _922) * _2924) + _2485;
    }
    else
    {
        _2700 = _2136;
        _2702 = _2138;
        _2704 = _2140;
        _2706 = _2481;
        _2708 = _2483;
        _2710 = _2485;
    }
    float _4682 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4693 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4704 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _2727 = ((isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2700 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _935))) + ((_2706 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1773)) * cbPerFrame._m0[3u].x);
    float _2728 = ((isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2702 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _935))) + ((_2708 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1773)) * cbPerFrame._m0[3u].x);
    float _2729 = ((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2704 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _935))) + ((_2710 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1773)) * cbPerFrame._m0[3u].x);
    uint _2730 = _255 + 6u;
    float _2738 = _857 / cbSceneParam._m0[86u].x;
    float _2739 = _858 / cbSceneParam._m0[86u].y;
    vec4 _2753 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2738, _2739, (log2((isnan(cbSceneParam._m0[77u].w) ? _780 : (isnan(_780) ? cbSceneParam._m0[77u].w : min(_780, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2755 = _2753.x;
    float _2756 = _2753.y;
    float _2757 = _2753.z;
    float _2758 = _2753.w;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    if (_780 > cbSceneParam._m0[78u].w)
    {
        float _2813 = isnan(_780) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _780 : min(cbSceneParam._m0[80u].w, _780));
        float _2814 = _2813 / _780;
        float _2825 = _2814 * _830;
        float _2826 = _831 * _2814;
        float _2827 = (-0.0) - _2826;
        float _2829 = _2814 * _832;
        float _2831 = (cbSceneParam._m0[77u].w * _2827) / _2813;
        float _2832 = _2831 + cbSceneParam._m0[79u].w;
        float _2833 = cbSceneParam._m0[79u].w - _2826;
        float _2839 = sqrt(((_2825 * _2825) + (_2826 * _2826)) + (_2829 * _2829));
        float _2842 = (1.0 - (cbSceneParam._m0[77u].w / _2813)) * _2839;
        float _2847 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2849 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3026;
        if (abs((_2827 - _2831) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3026 = ((((_2832 > 0.0) ? exp2(_2847 * _2832) : (2.0 - exp2(_2849 * _2832))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2842;
        }
        else
        {
            float _2970 = 1.0 / cbSceneParam._m0[80u].x;
            float _2971 = isnan(_2833) ? _2832 : (isnan(_2832) ? _2833 : max(_2832, _2833));
            float _2972 = isnan(_2833) ? _2832 : (isnan(_2832) ? _2833 : min(_2832, _2833));
            float _2981 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : min(_2971, 0.0));
            float _2982 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : min(_2972, 0.0));
            _3026 = ((abs(_2839 / _2827) * cbSceneParam._m0[80u].y) * ((((_2981 - _2982) * 2.0) - ((exp2(_2847 * (isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0)))) - exp2(_2847 * (isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0))))) * _2970)) - ((exp2(_2849 * _2981) - exp2(_2849 * _2982)) * _2970))) + (_2842 * cbSceneParam._m0[80u].z);
        }
        vec4 _3028 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2738, _2739, 1.0), 0.0);
        float _3037 = exp2((_3026 * (-1.44269502162933349609375)) * (1.0 - _3028.w));
        float _3038 = log2(_3037);
        float _3054 = log2(_2758);
        _2851 = (exp2(_3054 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].x)) * _3028.x) / cbSceneParam._m0[78u].x)) + _2755;
        _2853 = (exp2(_3054 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].y)) * _3028.y) / cbSceneParam._m0[78u].y)) + _2756;
        _2855 = (exp2(_3054 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].z)) * _3028.z) / cbSceneParam._m0[78u].z)) + _2757;
        _2857 = _3037 * _2758;
    }
    else
    {
        _2851 = _2755;
        _2853 = _2756;
        _2855 = _2757;
        _2857 = _2758;
    }
    bool _3064;
    vec4 _2867;
    vec4 _2889;
    float _2891;
    float _2895;
    float _2896;
    float _2897;
    float _2898;
    bool _2908;
    for (;;)
    {
        _2867 = cbMatDynParam._m0[0u];
        float _2869 = roundEven(_2867.y);
        bool _2870 = _2869 == 3.0;
        float _2871 = log2(_2857);
        float _2878 = exp2(_2871 * cbSceneParam._m0[78u].x) * _2727;
        float _2879 = exp2(_2871 * cbSceneParam._m0[78u].y) * _2728;
        float _2880 = exp2(_2871 * cbSceneParam._m0[78u].z) * _2729;
        float _2887 = _846 + (-0.5);
        _2889 = cbMtdParam._m0[1u];
        _2891 = _2889.y * _2887;
        float _2894 = (_2869 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2895 = _2894 * (_2870 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2851)));
        _2896 = _2894 * (_2870 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2853)));
        _2897 = _2894 * (_2870 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2855)));
        _2898 = _2887 * 0.999000012874603271484375;
        _2908 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2908)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2898) < 0.5)
            {
                _3064 = true;
                break;
            }
        }
        uint _3005 = _895 + uint(_2867.w);
        if ((cbInstanceData._m0[_3005].w < 1.0) && ((cbInstanceData._m0[_3005].w + _2898) < 0.5))
        {
            _3064 = true;
            break;
        }
        if ((_2891 + 1.0) < _2889.x)
        {
            _3064 = true;
            break;
        }
        _3064 = false;
        break;
    }
    float _3269;
    if (_3064)
    {
        discard_state = true;
        _3269 = 0.0;
    }
    else
    {
        _3269 = cbInstanceData._m0[_2730].w;
    }
    SV_Target.x = _2895;
    SV_Target.y = _2896;
    SV_Target.z = _2897;
    SV_Target.w = _3269;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2730].w;
    discard_exit();
}


