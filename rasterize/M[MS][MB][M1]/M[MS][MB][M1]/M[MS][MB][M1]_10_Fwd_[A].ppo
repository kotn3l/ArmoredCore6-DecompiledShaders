#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1153;
float _3536;
float _3537;
float _3538;
float _3539;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((_260 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_261 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _331 = _327.z;
    float _335 = (_327.x * 2.0) + (-1.0);
    float _336 = (_327.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_335, _336), vec2(_335, _336));
    float _3548 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))));
    float _348 = _335 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_301.x * 2.0) + (-1.0)));
    float _349 = _336 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_301.y * 2.0) + (-1.0)));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _364 = _362.x;
    float _365 = 1.0 - _364;
    float _398 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_364 - _365) * cbMtdParam._m0[24u].w) + _365) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3559 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _407 = ((((cbMtdParam._m0[10u].x - _286) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _399) + _286;
    float _408 = ((((cbMtdParam._m0[10u].y - _287) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _399) + _287;
    float _409 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _288)) * _399) + _288;
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _424 = _422.x;
    float _426 = _424 - (_424 * _399);
    float _431 = (((_301.z - _331) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _331;
    float _435 = ((cbMtdParam._m0[23u].y - _431) * _399) + _431;
    vec4 _457 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _459 = _457.x;
    float _460 = _457.y;
    float _467 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_229, _230, _231, 0.0));
    vec4 _482 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _260) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _261) + cbTextureTilingScale._m0[18u].w));
    float _484 = _482.x;
    float _489 = fract(_482.w + cbPerFrame._m0[22u].x);
    float _491 = (1.0 - _489) * _484;
    float _496 = ((_489 + (-1.0)) + _484) * 9.0;
    float _498 = ((_484 + (-1.0)) + _489) * 9.0;
    float _499 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _500 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _514 = (_491 * ((_482.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _499 : (isnan(_499) ? 3.0 : min(_499, 3.0))) * 3.1415927410125732421875);
    float _516 = (_491 * ((_482.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _500 : (isnan(_500) ? 3.0 : min(_500, 3.0))) * 3.1415927410125732421875);
    float _520 = inversesqrt(dot(vec3(_514, _516, 1.0), vec3(_514, _516, 1.0)));
    float _536 = (((((0.5 - _459) + ((_514 * 0.5) * _520)) * _467) + _459) * 2.0) + (-1.0);
    float _537 = (((((0.5 - _460) + ((_520 * 0.5) * _516)) * _467) + _460) * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3590 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _554 = ((((cbMtdParam._m0[22u].z * _348) - _348) + _536) * _399) + _348;
    float _555 = ((((cbMtdParam._m0[22u].z * _349) - _349) + _537) * _399) + _349;
    float _556 = (_399 * (sqrt(1.0 - (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) - _343)) + _343;
    float _558 = cbMtdParam._m0[22u].x + _327.w;
    float _561 = fma(_556, _229, fma(_555, _235 * TANGENT.x, (_221 * _213) * _554));
    float _564 = fma(_556, _230, fma(_555, _235 * TANGENT.y, (_221 * _214) * _554));
    float _567 = fma(_556, _231, fma(_555, _235 * TANGENT.z, (_221 * _215) * _554));
    float _571 = inversesqrt(dot(vec3(_561, _564, _567), vec3(_561, _564, _567)));
    float _572 = _571 * _561;
    float _573 = _571 * _564;
    float _574 = _571 * _567;
    float _3601 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _575 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _3612 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3623 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3634 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3645 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3656 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _580 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _594 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _645 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _635);
    float _646 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _635);
    float _647 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _635);
    float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
    float _652 = _645 * _651;
    float _653 = _646 * _651;
    float _654 = _647 * _651;
    vec4 _659 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _661 = _659.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _835 = sqrt(((_645 * _645) + (_646 * _646)) + (_647 * _647));
        float _841 = (cbMatDynParam._m0[5u].x * _835) + cbMatDynParam._m0[5u].y;
        float _3667 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _846 = (cbMatDynParam._m0[5u].z * _835) + cbMatDynParam._m0[5u].w;
        float _3678 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) - _842)) + _842) < ((_661 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _673 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _674 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_574, cbSceneParam._m0[5u].z, fma(_573, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _572));
    float _697 = fma(_574, cbSceneParam._m0[6u].z, fma(_573, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _572));
    float _700 = fma(_574, cbSceneParam._m0[7u].z, fma(_573, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _572));
    uint _713 = _241 + 9u;
    uint _714 = _713 + uint(cbMatDynParam._m0[0u].w);
    float _720 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_714].x;
    float _721 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * cbInstanceData._m0[_714].y;
    float _722 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * cbInstanceData._m0[_714].z;
    float _3689 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _3700 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _3711 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _726 = 1.0 - _580;
    float _727 = _723 * _726;
    float _728 = _724 * _726;
    float _729 = _725 * _726;
    float _734 = (_723 + (-0.039999999105930328369140625)) * _580;
    float _735 = (_724 + (-0.039999999105930328369140625)) * _580;
    float _736 = (_725 + (-0.039999999105930328369140625)) * _580;
    float _737 = _734 + 0.039999999105930328369140625;
    float _739 = _735 + 0.039999999105930328369140625;
    float _740 = _736 + 0.039999999105930328369140625;
    vec4 _749 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _673, cbSceneParam._m0[86u].y * _674));
    float _753 = ((isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * TEXCOORD_5.w) * _749.x;
    float _754 = dot(vec3(_572, _573, _574), vec3(_652, _653, _654));
    float _757 = _754 * 2.0;
    float _761 = (_757 * _572) - _652;
    float _762 = (_757 * _573) - _653;
    float _763 = (_757 * _574) - _654;
    float _767 = abs(dot(vec3(_652, _653, _654), vec3(_572, _573, _574)));
    float _3722 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _769 = sqrt(_575);
    float _781 = exp2((_769 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_769 * 3.0));
    float _787 = (1.0 - _781) * ((_769 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _788 = _781 * _769;
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1152;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _878 = fma(_824, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816));
        float _882 = fma(_824, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816));
        float _886 = fma(_824, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816));
        float _910 = _816 + _572;
        float _911 = _820 + _573;
        float _912 = _824 + _574;
        float _922 = fma(_912, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910)) - _878;
        float _923 = fma(_912, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910)) - _882;
        float _924 = fma(_912, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910)) - _886;
        float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
        float _941 = ((_928 * _922) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_878 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_928 * _923) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_882 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_928 * _924) / cbModelParam._m0[34u].z) + ((((((_886 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        float _980 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_946.x + (-0.5));
        float _982 = _980 * (_946.y + (-0.5));
        float _983 = _980 * (_946.z + (-0.5));
        float _990 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_953.x + (-0.5));
        float _992 = _990 * (_953.y + (-0.5));
        float _993 = _990 * (_953.z + (-0.5));
        float _1000 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_960.x + (-0.5));
        float _1002 = _1000 * (_960.y + (-0.5));
        float _1003 = _1000 * (_960.z + (-0.5));
        float _1010 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_967.x + (-0.5));
        float _1012 = _1010 * (_967.y + (-0.5));
        float _1013 = _1010 * (_967.z + (-0.5));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = _981 * 0.5;
        float _1018 = _991 * 0.5;
        float _1019 = _1001 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1034 = (dot(vec3(_572, _573, _574), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1044 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3770 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1046 + 1.0))) + _1051) * _1014;
        float _1061 = _982 * 0.5;
        float _1062 = _992 * 0.5;
        float _1063 = _1002 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_572, _573, _574), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3803 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1088 + 1.0))) + _1093) * _1015;
        float _1103 = _983 * 0.5;
        float _1104 = _993 * 0.5;
        float _1105 = _1003 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_572, _573, _574), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3836 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1130 + 1.0))) + _1135) * _1016;
        _1152 = _983;
        _1154 = _982;
        _1155 = _981;
        _1156 = _993;
        _1157 = _992;
        _1158 = _991;
        _1159 = _1003;
        _1160 = _1002;
        _1161 = _1001;
        _1162 = _1016;
        _1163 = _1015;
        _1164 = _1014;
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
    }
    else
    {
        _1152 = _1153;
        _1154 = _1153;
        _1155 = _1153;
        _1156 = _1153;
        _1157 = _1153;
        _1158 = _1153;
        _1159 = _1153;
        _1160 = _1153;
        _1161 = _1153;
        _1162 = _1153;
        _1163 = _1153;
        _1164 = _1153;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1195 = fma(_824, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816));
        float _1199 = fma(_824, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816));
        float _1203 = fma(_824, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816));
        float _1226 = _816 + _572;
        float _1227 = _820 + _573;
        float _1228 = _824 + _574;
        float _1238 = fma(_1228, cbModelParam._m0[30u].z, fma(_1227, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1226)) - _1195;
        float _1239 = fma(_1228, cbModelParam._m0[31u].z, fma(_1227, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1226)) - _1199;
        float _1240 = fma(_1228, cbModelParam._m0[32u].z, fma(_1227, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1226)) - _1203;
        float _1244 = inversesqrt(dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240)));
        float _1257 = ((_1244 * _1238) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1195 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1244 * _1239) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1199 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1244 * _1240) / cbModelParam._m0[35u].z) + ((((((_1203 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        float _1294 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1261.x + (-0.5));
        float _1296 = _1294 * (_1261.y + (-0.5));
        float _1297 = _1294 * (_1261.z + (-0.5));
        float _1304 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1268.x + (-0.5));
        float _1306 = _1304 * (_1268.y + (-0.5));
        float _1307 = _1304 * (_1268.z + (-0.5));
        float _1314 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1275.x + (-0.5));
        float _1316 = _1314 * (_1275.y + (-0.5));
        float _1317 = _1314 * (_1275.z + (-0.5));
        float _1324 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1282.x + (-0.5));
        float _1326 = _1324 * (_1282.y + (-0.5));
        float _1327 = _1324 * (_1282.z + (-0.5));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = _1295 * 0.5;
        float _1332 = _1305 * 0.5;
        float _1333 = _1315 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_572, _573, _574), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3899 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1358 + 1.0))) + _1363) * _1328;
        float _1373 = _1296 * 0.5;
        float _1374 = _1306 * 0.5;
        float _1375 = _1316 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_572, _573, _574), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _3932 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1400 + 1.0))) + _1405) * _1329;
        float _1415 = _1297 * 0.5;
        float _1416 = _1307 * 0.5;
        float _1417 = _1317 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_572, _573, _574), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3965 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1442 + 1.0))) + _1447) * _1330;
        _1464 = _1297;
        _1465 = _1296;
        _1466 = _1295;
        _1467 = _1307;
        _1468 = _1306;
        _1469 = _1305;
        _1470 = _1317;
        _1471 = _1316;
        _1472 = _1315;
        _1473 = _1330;
        _1474 = _1329;
        _1475 = _1328;
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
    }
    else
    {
        _1464 = _1153;
        _1465 = _1153;
        _1466 = _1153;
        _1467 = _1153;
        _1468 = _1153;
        _1469 = _1153;
        _1470 = _1153;
        _1471 = _1153;
        _1472 = _1153;
        _1473 = _1153;
        _1474 = _1153;
        _1475 = _1153;
        _1476 = 0.0;
        _1477 = 0.0;
        _1478 = 0.0;
    }
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1165)) + _1165;
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1166)) + _1166;
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1167)) + _1167;
    float _1511 = fma(_1490, cbSceneParam._m0[89u].z, fma(_1489, cbSceneParam._m0[89u].y, _1488 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1490, cbSceneParam._m0[90u].z, fma(_1489, cbSceneParam._m0[90u].y, _1488 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1490, cbSceneParam._m0[91u].z, fma(_1489, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1488));
    float _1532 = _761 * 0.5;
    float _1533 = _762 * 0.5;
    float _1534 = _763 * 0.5;
    float _1535 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1538 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1541 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1575;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1548 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1152, _1156, _1159, _1162));
        float _1552 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1556 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1563 = dot(vec4(cbModelParam._m0[39u]), vec4(_1532, _1533, _1534, 1.0));
        _1575 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1563) ? 0.0 : (isnan(0.0) ? _1563 : max(0.0, _1563))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1575 = 1.0;
    }
    float _1586;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1577 = dot(vec4(cbModelParam._m0[40u]), vec4(_1532, _1533, _1534, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1577) ? 0.0 : (isnan(0.0) ? _1577 : max(0.0, _1577))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1590 = (_1586 * cbModelParam._m0[1u].x) + (_1575 * (1.0 - cbModelParam._m0[1u].x));
    float _1600 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _575);
    float _1601 = isnan(_1600) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1600 : min(cbModelParam._m0[25u].z, _1600));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1650 = fma(_824, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816)) + cbModelParam._m0[13u].w;
        float _1654 = fma(_824, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816)) + cbModelParam._m0[14u].w;
        float _1658 = fma(_824, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816)) + cbModelParam._m0[15u].w;
        float _1661 = fma(_763, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761));
        float _1664 = fma(_763, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761));
        float _1667 = fma(_763, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761));
        float _1695;
        if (_1661 > 0.0)
        {
            _1695 = abs((1.0 - _1650) / _1661);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1650 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1695 = frontier_phi_17_15_ladder;
        }
        float _1899;
        if (_1664 > 0.0)
        {
            _1899 = abs((1.0 - _1654) / _1664);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1654 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1899 = frontier_phi_26_22_ladder;
        }
        float _2153;
        if (_1667 > 0.0)
        {
            _2153 = abs((1.0 - _1658) / _1667);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1658 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2153 = frontier_phi_38_33_ladder;
        }
        float _2155 = isnan(_1899) ? _1695 : (isnan(_1695) ? _1899 : min(_1695, _1899));
        float _2156 = isnan(_2153) ? _2155 : (isnan(_2155) ? _2153 : min(_2155, _2153));
        float _2160 = (_2156 * _1661) + _1650;
        float _2161 = (_2156 * _1664) + _1654;
        float _2162 = (_2156 * _1667) + _1658;
        float _2163 = _2156 * 9.9999997473787516355514526367188e-05;
        float _2165 = (-1.0) - _2163;
        float _2167 = _2163 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2162 > _2167) || ((_2162 < _2165) || ((_2161 > _2167) || ((_2161 < _2165) || ((_2160 < _2165) || (_2160 > _2167))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2290 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2162, cbModelParam._m0[9u].z, fma(_2161, cbModelParam._m0[9u].y, _2160 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2162, cbModelParam._m0[10u].z, fma(_2161, cbModelParam._m0[10u].y, _2160 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2162, cbModelParam._m0[11u].z, fma(_2161, cbModelParam._m0[11u].y, _2160 * cbModelParam._m0[11u].x))), _1601);
            frontier_phi_16_38_ladder = _2290.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2290.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2290.x * cbModelParam._m0[1u].y;
        }
        _1683 = frontier_phi_16_38_ladder_2;
        _1685 = frontier_phi_16_38_ladder_1;
        _1687 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1671 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_761, _762, _763), _1601);
        _1683 = _1671.x * cbModelParam._m0[1u].y;
        _1685 = _1671.y * cbModelParam._m0[1u].y;
        _1687 = _1671.z * cbModelParam._m0[1u].y;
    }
    float _1691 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _575);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1691 : min(cbModelParam._m0[25u].w, _1691));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1746 = fma(_824, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816)) + cbModelParam._m0[21u].w;
        float _1750 = fma(_824, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816)) + cbModelParam._m0[22u].w;
        float _1754 = fma(_824, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816)) + cbModelParam._m0[23u].w;
        float _1757 = fma(_763, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761));
        float _1760 = fma(_763, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761));
        float _1763 = fma(_763, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761));
        float _1904;
        if (_1757 > 0.0)
        {
            _1904 = abs((1.0 - _1746) / _1757);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1746 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1904 = frontier_phi_28_24_ladder;
        }
        float _2180;
        if (_1760 > 0.0)
        {
            _2180 = abs((1.0 - _1750) / _1760);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1750 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2180 = frontier_phi_40_35_ladder;
        }
        float _2393;
        if (_1763 > 0.0)
        {
            _2393 = abs((1.0 - _1754) / _1763);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1754 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2393 = frontier_phi_49_46_ladder;
        }
        float _2395 = isnan(_2180) ? _1904 : (isnan(_1904) ? _2180 : min(_1904, _2180));
        float _2396 = isnan(_2393) ? _2395 : (isnan(_2395) ? _2393 : min(_2395, _2393));
        float _2400 = (_2396 * _1757) + _1746;
        float _2401 = (_2396 * _1760) + _1750;
        float _2402 = (_2396 * _1763) + _1754;
        float _2403 = _2396 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2403;
        float _2406 = _2403 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2402 > _2406) || ((_2402 < _2404) || ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 < _2404) || (_2400 > _2406))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2601 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2402, cbModelParam._m0[17u].z, fma(_2401, cbModelParam._m0[17u].y, _2400 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2402, cbModelParam._m0[18u].z, fma(_2401, cbModelParam._m0[18u].y, _2400 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2402, cbModelParam._m0[19u].z, fma(_2401, cbModelParam._m0[19u].y, _2400 * cbModelParam._m0[19u].x))), _1692);
            frontier_phi_25_49_ladder = _2601.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2601.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2601.x * cbModelParam._m0[1u].z;
        }
        _1782 = frontier_phi_25_49_ladder_2;
        _1784 = frontier_phi_25_49_ladder_1;
        _1786 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_761, _762, _763), _1692);
        _1782 = _1766.x * cbModelParam._m0[1u].z;
        _1784 = _1766.y * cbModelParam._m0[1u].z;
        _1786 = _1766.z * cbModelParam._m0[1u].z;
    }
    float _1799 = (((_787 * _737) + _788) * _753) * ((cbModelParam._m0[1u].w * (_1782 - _1683)) + _1683);
    float _1801 = (((_787 * _739) + _788) * _753) * ((cbModelParam._m0[1u].w * (_1784 - _1685)) + _1685);
    float _1803 = (((_787 * _740) + _788) * _753) * ((cbModelParam._m0[1u].w * (_1786 - _1687)) + _1687);
    float _1806 = fma(_1803, cbSceneParam._m0[89u].z, fma(_1801, cbSceneParam._m0[89u].y, _1799 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1803, cbSceneParam._m0[90u].z, fma(_1801, cbSceneParam._m0[90u].y, _1799 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1803, cbSceneParam._m0[91u].z, fma(_1801, cbSceneParam._m0[91u].y, _1799 * cbSceneParam._m0[91u].x));
    uvec4 _1822 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1824 = _1822.x * 14u;
    uint _1825 = _1824 + 13u;
    float _1832 = _753 + (-1.0);
    float _1837 = (cbLight._m0[_1825].x * _1832) + 1.0;
    float _1838 = (cbLight._m0[_1825].y * _1832) + 1.0;
    float _1839 = (cbLight._m0[_1825].z * _1832) + 1.0;
    float _1840 = (cbLight._m0[_1825].w * _1832) + 1.0;
    uint _1841 = _1824 + 5u;
    float _1847 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
    uint _1851 = _1824 + 4u;
    float _1858 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
    uint _1862 = _1824 | 1u;
    float _1873 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_572, _573, _574));
    float _1876 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_572, _573, _574));
    float _4101 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _4112 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1881 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 0.3183098733425140380859375;
    float _1883 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.3183098733425140380859375;
    float _1890 = ((cbLight._m0[_1841].x * _1847) * _1883) + ((cbLight._m0[_1851].x * _1858) * _1881);
    float _1891 = ((_1847 * cbLight._m0[_1841].y) * _1883) + ((_1858 * cbLight._m0[_1851].y) * _1881);
    float _1892 = ((_1847 * cbLight._m0[_1841].z) * _1883) + ((_1858 * cbLight._m0[_1851].z) * _1881);
    uvec4 _1896 = floatBitsToUint(cbLight._m0[_1824 + 12u]);
    bool _1898 = _1896.x == 0u;
    float _1909;
    float _1911;
    float _1913;
    if (_1898)
    {
        _1909 = _1890;
        _1911 = _1891;
        _1913 = _1892;
    }
    else
    {
        uint _1917 = _1824 + 6u;
        float _1933 = (dot(vec3(cbLight._m0[_1824 + 2u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _1934 = _1933 * _1933;
        float _4123 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1936 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _1909 = (((cbLight._m0[_1917].x * 0.3183098733425140380859375) * _1935) * _1936) + _1890;
        _1911 = (((cbLight._m0[_1917].y * 0.3183098733425140380859375) * _1935) * _1936) + _1891;
        _1913 = (((cbLight._m0[_1917].z * 0.3183098733425140380859375) * _1935) * _1936) + _1892;
    }
    bool _1916 = _1896.y == 0u;
    float _1954;
    float _1956;
    float _1958;
    if (_1916)
    {
        _1954 = _1909;
        _1956 = _1911;
        _1958 = _1913;
    }
    else
    {
        uint _2124 = _1824 + 7u;
        float _2140 = (dot(vec3(cbLight._m0[_1824 + 3u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _2141 = _2140 * _2140;
        float _4139 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2142 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2143 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _1954 = (((cbLight._m0[_2124].x * 0.3183098733425140380859375) * _2142) * _2143) + _1909;
        _1956 = (((cbLight._m0[_2124].y * 0.3183098733425140380859375) * _2142) * _2143) + _1911;
        _1958 = (((cbLight._m0[_2124].z * 0.3183098733425140380859375) * _2142) * _2143) + _1913;
    }
    uint _1961 = _1824 + 8u;
    float _1974 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _575) * 0.949999988079071044921875);
    float _1975 = _1974 * _1974;
    float _1976 = cbLight._m0[_1824].x + _652;
    float _1977 = cbLight._m0[_1824].y + _653;
    float _1978 = cbLight._m0[_1824].z + _654;
    float _1982 = inversesqrt(dot(vec3(_1976, _1977, _1978), vec3(_1976, _1977, _1978)));
    float _1983 = _1982 * _1976;
    float _1984 = _1982 * _1977;
    float _1985 = _1982 * _1978;
    float _1986 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1824].xyz));
    float _4155 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _1990 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _1991 = dot(vec3(_572, _573, _574), vec3(_1983, _1984, _1985));
    float _4177 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _1995 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_1983, _1984, _1985));
    float _4188 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1999 = _1975 * _1975;
    float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
    float _2011 = exp2(log2(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * 5.0);
    float _2012 = 0.959999978542327880859375 - _734;
    float _2014 = 0.959999978542327880859375 - _735;
    float _2015 = 0.959999978542327880859375 - _736;
    float _2022 = 1.0 - _1975;
    float _2033 = (0.5 / (((_1990 * ((_1989 * _2022) + _1975)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2022) + _1975) * _1989))) * _1989;
    float _4199 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
    uint _2046 = _1824 + 9u;
    float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1862].w)) * _575) * 0.949999988079071044921875);
    float _2058 = _2057 * _2057;
    float _2059 = cbLight._m0[_1862].x + _652;
    float _2060 = cbLight._m0[_1862].y + _653;
    float _2061 = cbLight._m0[_1862].z + _654;
    float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
    float _2066 = _2065 * _2059;
    float _2067 = _2065 * _2060;
    float _2068 = _2065 * _2061;
    float _2069 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1862].xyz));
    float _4210 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _2073 = dot(vec3(_572, _573, _574), vec3(_2066, _2067, _2068));
    float _4221 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2077 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_2066, _2067, _2068));
    float _4232 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2081 = _2058 * _2058;
    float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
    float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * 5.0);
    float _2099 = 1.0 - _2058;
    float _2109 = (0.5 / (((_1990 * ((_2072 * _2099) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2099) + _2058) * _2072))) * _2072;
    float _4243 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2111 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
    float _2121 = (((((_2092 * _2012) + _737) * cbLight._m0[_2046].x) * _2111) * _1847) + (((((_2011 * _2012) + _737) * cbLight._m0[_1961].x) * _2035) * _1858);
    float _2122 = (((((_2092 * _2014) + _739) * cbLight._m0[_2046].y) * _2111) * _1847) + (((((_2011 * _2014) + _739) * cbLight._m0[_1961].y) * _2035) * _1858);
    float _2123 = (((((_2092 * _2015) + _740) * cbLight._m0[_2046].z) * _2111) * _1847) + (((((_2011 * _2015) + _740) * cbLight._m0[_1961].z) * _2035) * _1858);
    float _2185;
    float _2187;
    float _2189;
    if (_1898)
    {
        _2185 = _2121;
        _2187 = _2122;
        _2189 = _2123;
    }
    else
    {
        uint _2191 = _1824 + 2u;
        uint _2195 = _1824 + 10u;
        float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _575) * 0.949999988079071044921875);
        float _2210 = _2209 * _2209;
        float _2211 = cbLight._m0[_2191].x + _652;
        float _2212 = cbLight._m0[_2191].y + _653;
        float _2213 = cbLight._m0[_2191].z + _654;
        float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
        float _2218 = _2217 * _2211;
        float _2219 = _2217 * _2212;
        float _2220 = _2217 * _2213;
        float _2221 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2191].xyz));
        float _4254 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2225 = dot(vec3(_572, _573, _574), vec3(_2218, _2219, _2220));
        float _4265 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2229 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2218, _2219, _2220));
        float _4276 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2233 = _2210 * _2210;
        float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
        float _2244 = exp2(log2(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * 5.0);
        float _2251 = 1.0 - _2210;
        float _2261 = (0.5 / (((_1990 * ((_2224 * _2251) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2251) + _2210) * _2224))) * _2224;
        float _4287 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2263 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
        float _2264 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _2185 = (((((_2244 * _2012) + _737) * cbLight._m0[_2195].x) * _2263) * _2264) + _2121;
        _2187 = (((((_2244 * _2014) + _739) * cbLight._m0[_2195].y) * _2263) * _2264) + _2122;
        _2189 = (((((_2244 * _2015) + _740) * cbLight._m0[_2195].z) * _2263) * _2264) + _2123;
    }
    float _2299;
    float _2301;
    float _2303;
    if (_1916)
    {
        _2299 = _2185;
        _2301 = _2187;
        _2303 = _2189;
    }
    else
    {
        uint _2310 = _1824 + 3u;
        uint _2314 = _1824 + 11u;
        float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _575) * 0.949999988079071044921875);
        float _2329 = _2328 * _2328;
        float _2330 = cbLight._m0[_2310].x + _652;
        float _2331 = cbLight._m0[_2310].y + _653;
        float _2332 = cbLight._m0[_2310].z + _654;
        float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
        float _2337 = _2336 * _2330;
        float _2338 = _2336 * _2331;
        float _2339 = _2336 * _2332;
        float _2340 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2310].xyz));
        float _4303 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2344 = dot(vec3(_572, _573, _574), vec3(_2337, _2338, _2339));
        float _4314 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2348 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2337, _2338, _2339));
        float _4325 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2352 = _2329 * _2329;
        float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
        float _2363 = exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0);
        float _2370 = 1.0 - _2329;
        float _2380 = (0.5 / (((_1990 * ((_2343 * _2370) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2370) + _2329) * _2343))) * _2343;
        float _4336 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2382 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
        float _2383 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _2299 = (((((_2363 * _2012) + _737) * cbLight._m0[_2314].x) * _2382) * _2383) + _2185;
        _2301 = (((((_2363 * _2014) + _739) * cbLight._m0[_2314].y) * _2382) * _2383) + _2187;
        _2303 = (((((_2363 * _2015) + _740) * cbLight._m0[_2314].z) * _2382) * _2383) + _2189;
    }
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    if (_1822.y == 0u)
    {
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2458;
        float _2460 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2458;
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2458;
        uvec4 _2473 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2474 = _2473.x;
        uint _2485 = uint((float(_2473.y) * floor(float(uint(cbSceneParam._m0[85u].y * _674) / _2474))) + floor(float(uint(cbSceneParam._m0[85u].x * _673) / _2474)));
        float _2495 = (log2(_2461 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2496 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        uint _2499 = uint(isnan(14.0) ? _2496 : (isnan(_2496) ? 14.0 : min(_2496, 14.0)));
        uvec4 _2504 = texelFetch(g_lightClusterGridBuffer, int(((_2499 << 2u) + (_2485 << 6u)) >> 2u));
        uint _2505 = _2504.x;
        uint _2506 = _2473.z;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        if (((((1u << ((_2506 >> 4u) & 15u)) + 4294967295u) & _2505) == 0u) || ((_2506 & 240u) == 0u))
        {
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
        }
        else
        {
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            uint _2765 = 0u;
            uint _2774;
            bool _2775;
            for (;;)
            {
                _2774 = texelFetch(g_lightClassification, int((((_2499 << 5u) + (_2485 << 9u)) + (_2765 << 2u)) >> 2u)).x;
                _2775 = _2774 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2775)
                {
                    frontier_phi_66_pred = _2759;
                    frontier_phi_66_pred_1 = _2764;
                    frontier_phi_66_pred_2 = _2763;
                    frontier_phi_66_pred_3 = _2762;
                    frontier_phi_66_pred_4 = _2761;
                    frontier_phi_66_pred_5 = _2760;
                }
                else
                {
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    uint _2910;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2761;
                    _2907 = _2762;
                    _2908 = _2763;
                    _2909 = _2764;
                    _2910 = _2774;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    for (;;)
                    {
                        uint _2914 = uint(findLSB(_2910)) + (_2765 << 5u);
                        uint _2911 = (_2910 + 4294967295u) & _2910;
                        uint _2916 = _2914 * 48u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2936 = (_2914 * 48u) + 4u;
                        vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2955 = (_2914 * 48u) + 8u;
                        vec3 _2966 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x));
                        float _2970 = _2930.x - _2459;
                        float _2971 = _2930.y - _2460;
                        float _2972 = _2930.z - _2461;
                        float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                        float _2976 = inversesqrt(_2973);
                        float _2977 = _2976 * _2970;
                        float _2978 = _2976 * _2971;
                        float _2979 = _2976 * _2972;
                        float _2980 = dot(vec3(_694, _697, _700), vec3(_2977, _2978, _2979));
                        float _2985 = 1.0 - (_2973 * _2930.w);
                        float _4362 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2986 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _2987 = sqrt(_2973) * _2949.w;
                        float _2990 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2980) + _2991;
                        float _2997 = _2987 * _2987;
                        float _3001 = ((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2986) / ((_2997 * 0.699999988079071044921875) + 1.0);
                        float _3005 = (-0.0) - _2459;
                        float _3006 = (-0.0) - _2460;
                        float _3007 = (-0.0) - _2461;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3012 = _3011 * _3005;
                        float _3013 = _3011 * _3006;
                        float _3014 = _3011 * _3007;
                        float _3022 = exp2(log2(1.0 / ((_2997 * 3.5) + 5.0)) * 0.25);
                        float _3023 = 1.0 - _769;
                        float _3030 = sqrt(1.0 - ((1.0 - (_3023 * _3023)) * (1.0 - (_3022 * _3022))));
                        float _3031 = _3030 * _3030;
                        float _3032 = _3031 * _3031;
                        float _3033 = _3012 + _2977;
                        float _3034 = _3013 + _2978;
                        float _3035 = _3014 + _2979;
                        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
                        float _3043 = dot(vec3(_694, _697, _700), vec3(_3012, _3013, _3014));
                        float _4378 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3047 = dot(vec3(_694, _697, _700), vec3(_3039 * _3033, _3039 * _3034, _3039 * _3035));
                        float _4389 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3050 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _3054 = ((_3050 * _3050) * (_3032 + (-1.0))) + 1.0;
                        float _3055 = _2990 * _3031;
                        float _3056 = _3055 * _3055;
                        float _3059 = ((1.0 - _3056) * _2980) + _3056;
                        float _4400 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3060 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3061 = 1.0 - _3031;
                        float _3071 = (0.5 / (((_3060 * ((_3046 * _3061) + _3031)) + 9.9999999392252902907785028219223e-09) + (((_3060 * _3061) + _3031) * _3046))) * _3060;
                        float _4411 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3081 = (((_3032 * 3.1415927410125732421875) * (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) / ((_3054 * _3054) * ((_2997 * 2.1991131305694580078125) + 3.141590118408203125))) * _2986;
                        _2834 = (_3001 * _2949.x) + _2907;
                        _2835 = (_3001 * _2949.y) + _2908;
                        _2836 = (_3001 * _2949.z) + _2909;
                        _2831 = (_3081 * _2966.x) + _2904;
                        _2832 = (_3081 * _2966.y) + _2905;
                        _2833 = (_3081 * _2966.z) + _2906;
                        if (_2911 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2833;
                            _2907 = _2834;
                            _2908 = _2835;
                            _2909 = _2836;
                            _2910 = _2911;
                        }
                    }
                    frontier_phi_66_pred = _2831;
                    frontier_phi_66_pred_1 = _2836;
                    frontier_phi_66_pred_2 = _2835;
                    frontier_phi_66_pred_3 = _2834;
                    frontier_phi_66_pred_4 = _2833;
                    frontier_phi_66_pred_5 = _2832;
                }
                _2607 = frontier_phi_66_pred;
                _2617 = frontier_phi_66_pred_1;
                _2615 = frontier_phi_66_pred_2;
                _2613 = frontier_phi_66_pred_3;
                _2611 = frontier_phi_66_pred_4;
                _2609 = frontier_phi_66_pred_5;
                uint _2766 = _2765 + 1u;
                if (_2766 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2759 = _2607;
                    _2760 = _2609;
                    _2761 = _2611;
                    _2762 = _2613;
                    _2763 = _2615;
                    _2764 = _2617;
                    _2765 = _2766;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
        }
        uvec4 _2620 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2621 = _2620.z;
        uint _2623 = (_2621 >> 8u) & 15u;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((4294967295u << _2623) & _2505) == 0u)
        {
            _2727 = _2606;
            _2729 = _2608;
            _2731 = _2610;
            _2733 = _2612;
            _2735 = _2614;
            _2737 = _2616;
        }
        else
        {
            float _2752 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
            float _2753 = _2752 * _2459;
            float _2754 = _2752 * _2460;
            float _2755 = _2752 * _2461;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2623 < ((_2621 >> 12u) & 15u))
            {
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2887 = _2606;
                float _2888 = _2608;
                float _2889 = _2610;
                float _2890 = _2612;
                float _2891 = _2614;
                float _2892 = _2616;
                uint _2893 = _2623;
                uint _2902;
                bool _2903;
                for (;;)
                {
                    _2902 = texelFetch(g_lightClassification, int((((_2499 << 5u) + (_2485 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                    _2903 = _2902 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2903)
                    {
                        frontier_phi_77_pred = _2892;
                        frontier_phi_77_pred_1 = _2891;
                        frontier_phi_77_pred_2 = _2890;
                        frontier_phi_77_pred_3 = _2889;
                        frontier_phi_77_pred_4 = _2888;
                        frontier_phi_77_pred_5 = _2887;
                    }
                    else
                    {
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3108 = _2887;
                        float _3109 = _2888;
                        float _3110 = _2889;
                        float _3111 = _2890;
                        float _3112 = _2891;
                        float _3113 = _2892;
                        uint _3114 = _2902;
                        uint _3115;
                        vec4 _3140;
                        float _3141;
                        vec4 _3156;
                        vec3 _3168;
                        vec4 _3184;
                        vec4 _3199;
                        float _3245;
                        bool _3246;
                        for (;;)
                        {
                            uint _3125 = ((_2893 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3114));
                            _3115 = (_3114 + 4294967295u) & _3114;
                            uint _3127 = _3125 * 40u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            _3141 = _3140.w;
                            uint _3143 = (_3125 * 40u) + 4u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3158 = (_3125 * 40u) + 8u;
                            _3168 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x));
                            uint _3171 = (_3125 * 40u) + 16u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3186 = (_3125 * 40u) + 20u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3201 = (_3125 * 40u) + 24u;
                            vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3220 = (_3125 * 40u) + 28u;
                            vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            _3245 = fma(_2461, _3233.z, fma(_2460, _3233.y, _3233.x * _2459)) + _3233.w;
                            _3246 = !((fma(_2461, _3214.z, fma(_2460, _3214.y, _3214.x * _2459)) + _3214.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3246)
                            {
                                float _3273 = _3140.x - _2459;
                                float _3274 = _3140.y - _2460;
                                float _3275 = _3140.z - _2461;
                                float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                                float _3279 = inversesqrt(_3276);
                                float _3280 = _3279 * _3273;
                                float _3281 = _3279 * _3274;
                                float _3282 = _3279 * _3275;
                                float _3286 = 1.0 - (_3276 / (_3141 * _3141));
                                float _4422 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3291 = sqrt(_3276) * _3156.w;
                                float _3293 = 1.39999997615814208984375 / (_3291 + 1.39999997615814208984375);
                                float _3294 = _3293 * _3293;
                                float _3297 = ((1.0 - _3294) * dot(vec3(_3280, _3281, _3282), vec3(_694, _697, _700))) + _3294;
                                float _3300 = _3291 * _3291;
                                float _3304 = (fma(_2461, _3184.z, fma(_2460, _3184.y, _3184.x * _2459)) + _3184.w) / _3245;
                                float _3305 = (fma(_2461, _3199.z, fma(_2460, _3199.y, _3199.x * _2459)) + _3199.w) / _3245;
                                float _3309 = 1.0 - dot(vec2(_3304, _3305), vec2(_3304, _3305));
                                float _4438 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3311 = _3310 * (((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3287) / ((_3300 * 0.699999988079071044921875) + 1.0));
                                float _3323 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                                float _3324 = 1.0 - _769;
                                float _3331 = sqrt(1.0 - ((1.0 - (_3324 * _3324)) * (1.0 - (_3323 * _3323))));
                                float _3332 = _3331 * _3331;
                                float _3333 = _3332 * _3332;
                                float _3334 = _3280 - _2753;
                                float _3335 = _3281 - _2754;
                                float _3336 = _3282 - _2755;
                                float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                                float _3344 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2753, (-0.0) - _2754, (-0.0) - _2755));
                                float _4449 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3348 = dot(vec3(_694, _697, _700), vec3(_3340 * _3334, _3340 * _3335, _3340 * _3336));
                                float _4460 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3351 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3355 = ((_3351 * _3351) * (_3333 + (-1.0))) + 1.0;
                                float _3356 = _3293 * _3332;
                                float _3357 = _3356 * _3356;
                                float _3363 = ((1.0 - _3357) * dot(vec3(_694, _697, _700), vec3(_3280, _3281, _3282))) + _3357;
                                float _4471 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3365 = 1.0 - _3332;
                                float _3375 = (0.5 / (((_3364 * ((_3347 * _3365) + _3332)) + 9.9999999392252902907785028219223e-09) + (((_3364 * _3365) + _3332) * _3347))) * _3364;
                                float _4482 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3385 = (_3310 * _3287) * (((_3333 * 3.1415927410125732421875) * (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) / ((_3355 * _3355) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3311 * _3156.y;
                                frontier_phi_83_pred_1 = _3311 * _3156.x;
                                frontier_phi_83_pred_2 = _3385 * _3168.z;
                                frontier_phi_83_pred_3 = _3385 * _3168.y;
                                frontier_phi_83_pred_4 = _3385 * _3168.x;
                                frontier_phi_83_pred_5 = _3311 * _3156.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3393 = frontier_phi_83_pred;
                            _3392 = frontier_phi_83_pred_1;
                            _3391 = frontier_phi_83_pred_2;
                            _3390 = frontier_phi_83_pred_3;
                            _3389 = frontier_phi_83_pred_4;
                            _3394 = frontier_phi_83_pred_5;
                            _3098 = _3392 + _3111;
                            _3099 = _3393 + _3112;
                            _3100 = _3394 + _3113;
                            _3095 = _3389 + _3108;
                            _3096 = _3390 + _3109;
                            _3097 = _3391 + _3110;
                            if (_3115 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3115;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3100;
                        frontier_phi_77_pred_1 = _3099;
                        frontier_phi_77_pred_2 = _3098;
                        frontier_phi_77_pred_3 = _3097;
                        frontier_phi_77_pred_4 = _3096;
                        frontier_phi_77_pred_5 = _3095;
                    }
                    _2738 = frontier_phi_77_pred;
                    _2736 = frontier_phi_77_pred_1;
                    _2734 = frontier_phi_77_pred_2;
                    _2732 = frontier_phi_77_pred_3;
                    _2730 = frontier_phi_77_pred_4;
                    _2728 = frontier_phi_77_pred_5;
                    uint _2894 = _2893 + 1u;
                    if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2887 = _2728;
                        _2888 = _2730;
                        _2889 = _2732;
                        _2890 = _2734;
                        _2891 = _2736;
                        _2892 = _2738;
                        _2893 = _2894;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2732;
                frontier_phi_58_59_ladder_1 = _2738;
                frontier_phi_58_59_ladder_2 = _2736;
                frontier_phi_58_59_ladder_3 = _2734;
                frontier_phi_58_59_ladder_4 = _2730;
                frontier_phi_58_59_ladder_5 = _2728;
            }
            else
            {
                frontier_phi_58_59_ladder = _2610;
                frontier_phi_58_59_ladder_1 = _2616;
                frontier_phi_58_59_ladder_2 = _2614;
                frontier_phi_58_59_ladder_3 = _2612;
                frontier_phi_58_59_ladder_4 = _2608;
                frontier_phi_58_59_ladder_5 = _2606;
            }
            _2727 = frontier_phi_58_59_ladder_5;
            _2729 = frontier_phi_58_59_ladder_4;
            _2731 = frontier_phi_58_59_ladder;
            _2733 = frontier_phi_58_59_ladder_3;
            _2735 = frontier_phi_58_59_ladder_2;
            _2737 = frontier_phi_58_59_ladder_1;
        }
        float _2742 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
        _2518 = (_2742 * _2733) + _1954;
        _2520 = (_2742 * _2735) + _1956;
        _2522 = (_2742 * _2737) + _1958;
        _2524 = ((_2727 * _737) * _2742) + _2299;
        _2526 = ((_2729 * _739) * _2742) + _2301;
        _2528 = ((_2731 * _740) * _2742) + _2303;
    }
    else
    {
        _2518 = _1954;
        _2520 = _1956;
        _2522 = _1958;
        _2524 = _2299;
        _2526 = _2301;
        _2528 = _2303;
    }
    float _4498 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4509 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4520 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _2545 = ((isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2518 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _753))) + ((_2524 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1590)) * cbPerFrame._m0[3u].x);
    float _2546 = ((isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2520 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _753))) + ((_2526 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1590)) * cbPerFrame._m0[3u].x);
    float _2547 = ((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2522 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _753))) + ((_2528 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1590)) * cbPerFrame._m0[3u].x);
    uint _2548 = _241 + 6u;
    float _2556 = _673 / cbSceneParam._m0[86u].x;
    float _2557 = _674 / cbSceneParam._m0[86u].y;
    vec4 _2571 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2556, _2557, (log2((isnan(cbSceneParam._m0[77u].w) ? _594 : (isnan(_594) ? cbSceneParam._m0[77u].w : min(_594, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2573 = _2571.x;
    float _2574 = _2571.y;
    float _2575 = _2571.z;
    float _2576 = _2571.w;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    if (_594 > cbSceneParam._m0[78u].w)
    {
        float _2631 = isnan(_594) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _594 : min(cbSceneParam._m0[80u].w, _594));
        float _2632 = _2631 / _594;
        float _2643 = _2632 * _645;
        float _2644 = _646 * _2632;
        float _2645 = (-0.0) - _2644;
        float _2647 = _2632 * _647;
        float _2649 = (cbSceneParam._m0[77u].w * _2645) / _2631;
        float _2650 = _2649 + cbSceneParam._m0[79u].w;
        float _2651 = cbSceneParam._m0[79u].w - _2644;
        float _2657 = sqrt(((_2643 * _2643) + (_2644 * _2644)) + (_2647 * _2647));
        float _2660 = (1.0 - (cbSceneParam._m0[77u].w / _2631)) * _2657;
        float _2665 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2667 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2844;
        if (abs((_2645 - _2649) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2844 = ((((_2650 > 0.0) ? exp2(_2665 * _2650) : (2.0 - exp2(_2667 * _2650))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2660;
        }
        else
        {
            float _2788 = 1.0 / cbSceneParam._m0[80u].x;
            float _2789 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : max(_2650, _2651));
            float _2790 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : min(_2650, _2651));
            float _2799 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : min(_2789, 0.0));
            float _2800 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : min(_2790, 0.0));
            _2844 = ((abs(_2657 / _2645) * cbSceneParam._m0[80u].y) * ((((_2799 - _2800) * 2.0) - ((exp2(_2665 * (isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0)))) - exp2(_2665 * (isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0))))) * _2788)) - ((exp2(_2667 * _2799) - exp2(_2667 * _2800)) * _2788))) + (_2660 * cbSceneParam._m0[80u].z);
        }
        vec4 _2846 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2556, _2557, 1.0), 0.0);
        float _2855 = exp2((_2844 * (-1.44269502162933349609375)) * (1.0 - _2846.w));
        float _2856 = log2(_2855);
        float _2872 = log2(_2576);
        _2669 = (exp2(_2872 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].x)) * _2846.x) / cbSceneParam._m0[78u].x)) + _2573;
        _2671 = (exp2(_2872 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].y)) * _2846.y) / cbSceneParam._m0[78u].y)) + _2574;
        _2673 = (exp2(_2872 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].z)) * _2846.z) / cbSceneParam._m0[78u].z)) + _2575;
        _2675 = _2855 * _2576;
    }
    else
    {
        _2669 = _2573;
        _2671 = _2574;
        _2673 = _2575;
        _2675 = _2576;
    }
    bool _2882;
    vec4 _2685;
    vec4 _2707;
    float _2709;
    float _2713;
    float _2714;
    float _2715;
    float _2716;
    bool _2726;
    for (;;)
    {
        _2685 = cbMatDynParam._m0[0u];
        float _2687 = roundEven(_2685.y);
        bool _2688 = _2687 == 3.0;
        float _2689 = log2(_2675);
        float _2696 = exp2(_2689 * cbSceneParam._m0[78u].x) * _2545;
        float _2697 = exp2(_2689 * cbSceneParam._m0[78u].y) * _2546;
        float _2698 = exp2(_2689 * cbSceneParam._m0[78u].z) * _2547;
        float _2705 = _661 + (-0.5);
        _2707 = cbMtdParam._m0[1u];
        _2709 = _2707.y * _2705;
        float _2712 = (_2687 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2713 = _2712 * (_2688 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2669)));
        _2714 = _2712 * (_2688 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2671)));
        _2715 = _2712 * (_2688 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2673)));
        _2716 = _2705 * 0.999000012874603271484375;
        _2726 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2726)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2716) < 0.5)
            {
                _2882 = true;
                break;
            }
        }
        uint _2823 = _713 + uint(_2685.w);
        if ((cbInstanceData._m0[_2823].w < 1.0) && ((cbInstanceData._m0[_2823].w + _2716) < 0.5))
        {
            _2882 = true;
            break;
        }
        if ((_2709 + 1.0) < _2707.x)
        {
            _2882 = true;
            break;
        }
        _2882 = false;
        break;
    }
    float _3086;
    if (_2882)
    {
        discard_state = true;
        _3086 = 0.0;
    }
    else
    {
        _3086 = cbInstanceData._m0[_2548].w;
    }
    SV_Target.x = _2713;
    SV_Target.y = _2714;
    SV_Target.z = _2715;
    SV_Target.w = _3086;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2548].w;
    discard_exit();
}


