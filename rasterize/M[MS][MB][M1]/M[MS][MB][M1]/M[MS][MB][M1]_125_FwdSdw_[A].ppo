#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1264;
float _3926;
float _3927;
float _3928;
float _3929;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].y) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3938 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _395 = (_388 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _396 = (_388 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _397 = (_388 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _482 = _478.z;
    float _491 = ((_461.z - _482) * _388) + _482;
    float _494 = ((((_461.x - _480) * _388) + _480) * 2.0) + (-1.0);
    float _495 = ((((_461.y - _481) * _388) + _481) * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3949 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))));
    vec4 _514 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _534 = _532.x;
    float _535 = 1.0 - _534;
    float _548 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_534 - _535) * cbMtdParam._m0[24u].z) + _535) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3960 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _556 = (_549 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) + _395;
    float _557 = (_549 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) + _396;
    float _558 = (_549 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) + _397;
    vec4 _570 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _586 = _584.x;
    float _604 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _586) * _388) + _586;
    float _608 = ((_570.x - _604) * cbMtdParam._m0[19u].z) + _604;
    float _610 = _608 - (_608 * _549);
    float _615 = (((_436.z - _491) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _491;
    vec4 _628 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _635 = (_628.x * 2.0) + (-1.0);
    float _636 = (_628.y * 2.0) + (-1.0);
    float _637 = dot(vec2(_635, _636), vec2(_635, _636));
    float _3971 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _645 = (_549 * (_628.z - _615)) + _615;
    float _650 = _494 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_436.x * 2.0) + (-1.0)));
    float _651 = _495 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_436.y * 2.0) + (-1.0)));
    float _663 = (((_635 - _650) + (cbMtdParam._m0[21u].x * _650)) * _549) + _650;
    float _664 = (((_636 - _651) + (cbMtdParam._m0[21u].x * _651)) * _549) + _651;
    float _665 = (_549 * (sqrt(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) - _501)) + _501;
    float _670 = cbMtdParam._m0[22u].x + _514.w;
    float _673 = fma(_665, _237 * NORMAL.x, fma(_664, _244 * TANGENT.x, (_230 * _222) * _663));
    float _676 = fma(_665, _237 * NORMAL.y, fma(_664, _244 * TANGENT.y, (_230 * _223) * _663));
    float _679 = fma(_665, _237 * NORMAL.z, fma(_664, _244 * TANGENT.z, (_230 * _224) * _663));
    float _683 = inversesqrt(dot(vec3(_673, _676, _679), vec3(_673, _676, _679)));
    float _684 = _683 * _673;
    float _685 = _683 * _676;
    float _686 = _683 * _679;
    float _3982 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _687 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4004 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4015 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4026 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4037 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _692 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _706 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _757 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _747);
    float _758 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _747);
    float _759 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _747);
    float _763 = inversesqrt(dot(vec3(_757, _758, _759), vec3(_757, _758, _759)));
    float _764 = _757 * _763;
    float _765 = _758 * _763;
    float _766 = _759 * _763;
    vec4 _771 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _773 = _771.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _945 = sqrt(((_757 * _757) + (_758 * _758)) + (_759 * _759));
        float _951 = (cbMatDynParam._m0[5u].x * _945) + cbMatDynParam._m0[5u].y;
        float _4048 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _956 = (cbMatDynParam._m0[5u].z * _945) + cbMatDynParam._m0[5u].w;
        float _4059 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) - _952)) + _952) < ((_773 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _784 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _785 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _803 = fma(_686, cbSceneParam._m0[5u].z, fma(_685, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _684));
    float _806 = fma(_686, cbSceneParam._m0[6u].z, fma(_685, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _684));
    float _809 = fma(_686, cbSceneParam._m0[7u].z, fma(_685, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _684));
    uint _822 = _250 + 9u;
    uint _823 = _822 + uint(cbMatDynParam._m0[0u].w);
    float _829 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_823].x;
    float _830 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_823].y;
    float _831 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_823].z;
    float _4070 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _835 = 1.0 - _692;
    float _836 = _832 * _835;
    float _837 = _833 * _835;
    float _838 = _834 * _835;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _692;
    float _844 = (_833 + (-0.039999999105930328369140625)) * _692;
    float _845 = (_834 + (-0.039999999105930328369140625)) * _692;
    float _846 = _843 + 0.039999999105930328369140625;
    float _848 = _844 + 0.039999999105930328369140625;
    float _849 = _845 + 0.039999999105930328369140625;
    vec4 _858 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _784, cbSceneParam._m0[86u].y * _785));
    float _862 = ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * TEXCOORD_5.w) * _858.x;
    float _863 = dot(vec3(_684, _685, _686), vec3(_764, _765, _766));
    float _866 = _863 * 2.0;
    float _870 = (_866 * _684) - _764;
    float _871 = (_866 * _685) - _765;
    float _872 = (_866 * _686) - _766;
    float _876 = abs(dot(vec3(_764, _765, _766), vec3(_684, _685, _686)));
    float _4103 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _878 = sqrt(_687);
    float _891 = exp2((_878 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_878 * 3.0));
    float _897 = (1.0 - _891) * ((_878 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _898 = _891 * _878;
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1263;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _988 = fma(_934, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926));
        float _992 = fma(_934, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926));
        float _996 = fma(_934, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926));
        float _1021 = _926 + _684;
        float _1022 = _930 + _685;
        float _1023 = _934 + _686;
        float _1033 = fma(_1023, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021)) - _988;
        float _1034 = fma(_1023, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021)) - _992;
        float _1035 = fma(_1023, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021)) - _996;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_988 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_992 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[34u].z) + ((((((_996 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1091 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1057.x + (-0.5));
        float _1093 = _1091 * (_1057.y + (-0.5));
        float _1094 = _1091 * (_1057.z + (-0.5));
        float _1101 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1064.x + (-0.5));
        float _1103 = _1101 * (_1064.y + (-0.5));
        float _1104 = _1101 * (_1064.z + (-0.5));
        float _1111 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1071.x + (-0.5));
        float _1113 = _1111 * (_1071.y + (-0.5));
        float _1114 = _1111 * (_1071.z + (-0.5));
        float _1121 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1078.x + (-0.5));
        float _1123 = _1121 * (_1078.y + (-0.5));
        float _1124 = _1121 * (_1078.z + (-0.5));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = _1092 * 0.5;
        float _1129 = _1102 * 0.5;
        float _1130 = _1112 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1145 = (dot(vec3(_684, _685, _686), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1155 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _4151 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1157 + 1.0))) + _1162) * _1125;
        float _1172 = _1093 * 0.5;
        float _1173 = _1103 * 0.5;
        float _1174 = _1113 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_684, _685, _686), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _4184 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1199 + 1.0))) + _1204) * _1126;
        float _1214 = _1094 * 0.5;
        float _1215 = _1104 * 0.5;
        float _1216 = _1114 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_684, _685, _686), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _4217 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1241 + 1.0))) + _1246) * _1127;
        _1263 = _1094;
        _1265 = _1093;
        _1266 = _1092;
        _1267 = _1104;
        _1268 = _1103;
        _1269 = _1102;
        _1270 = _1114;
        _1271 = _1113;
        _1272 = _1112;
        _1273 = _1127;
        _1274 = _1126;
        _1275 = _1125;
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _1264;
        _1265 = _1264;
        _1266 = _1264;
        _1267 = _1264;
        _1268 = _1264;
        _1269 = _1264;
        _1270 = _1264;
        _1271 = _1264;
        _1272 = _1264;
        _1273 = _1264;
        _1274 = _1264;
        _1275 = _1264;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1306 = fma(_934, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926));
        float _1310 = fma(_934, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926));
        float _1314 = fma(_934, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926));
        float _1337 = _926 + _684;
        float _1338 = _930 + _685;
        float _1339 = _934 + _686;
        float _1349 = fma(_1339, cbModelParam._m0[30u].z, fma(_1338, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1337)) - _1306;
        float _1350 = fma(_1339, cbModelParam._m0[31u].z, fma(_1338, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1337)) - _1310;
        float _1351 = fma(_1339, cbModelParam._m0[32u].z, fma(_1338, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1337)) - _1314;
        float _1355 = inversesqrt(dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351)));
        float _1368 = ((_1355 * _1349) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1306 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1355 * _1350) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1310 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1355 * _1351) / cbModelParam._m0[35u].z) + ((((((_1314 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        float _1405 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1372.x + (-0.5));
        float _1407 = _1405 * (_1372.y + (-0.5));
        float _1408 = _1405 * (_1372.z + (-0.5));
        float _1415 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1379.x + (-0.5));
        float _1417 = _1415 * (_1379.y + (-0.5));
        float _1418 = _1415 * (_1379.z + (-0.5));
        float _1425 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1386.x + (-0.5));
        float _1427 = _1425 * (_1386.y + (-0.5));
        float _1428 = _1425 * (_1386.z + (-0.5));
        float _1435 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1393.x + (-0.5));
        float _1437 = _1435 * (_1393.y + (-0.5));
        float _1438 = _1435 * (_1393.z + (-0.5));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = _1406 * 0.5;
        float _1443 = _1416 * 0.5;
        float _1444 = _1426 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_684, _685, _686), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4280 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1469 + 1.0))) + _1474) * _1439;
        float _1484 = _1407 * 0.5;
        float _1485 = _1417 * 0.5;
        float _1486 = _1427 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_684, _685, _686), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4313 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1511 + 1.0))) + _1516) * _1440;
        float _1526 = _1408 * 0.5;
        float _1527 = _1418 * 0.5;
        float _1528 = _1428 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_684, _685, _686), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4346 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1553 + 1.0))) + _1558) * _1441;
        _1575 = _1408;
        _1576 = _1407;
        _1577 = _1406;
        _1578 = _1418;
        _1579 = _1417;
        _1580 = _1416;
        _1581 = _1428;
        _1582 = _1427;
        _1583 = _1426;
        _1584 = _1441;
        _1585 = _1440;
        _1586 = _1439;
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
    }
    else
    {
        _1575 = _1264;
        _1576 = _1264;
        _1577 = _1264;
        _1578 = _1264;
        _1579 = _1264;
        _1580 = _1264;
        _1581 = _1264;
        _1582 = _1264;
        _1583 = _1264;
        _1584 = _1264;
        _1585 = _1264;
        _1586 = _1264;
        _1587 = 0.0;
        _1588 = 0.0;
        _1589 = 0.0;
    }
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1276)) + _1276;
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1277)) + _1277;
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1278)) + _1278;
    float _1622 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1600, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1600, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1600, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1599));
    float _1643 = _870 * 0.5;
    float _1644 = _871 * 0.5;
    float _1645 = _872 * 0.5;
    float _1646 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1649 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1652 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1686;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1659 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1263, _1267, _1270, _1273));
        float _1663 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1667 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1674 = dot(vec4(cbModelParam._m0[39u]), vec4(_1643, _1644, _1645, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1697;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1688 = dot(vec4(cbModelParam._m0[40u]), vec4(_1643, _1644, _1645, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1701 = (_1697 * cbModelParam._m0[1u].x) + (_1686 * (1.0 - cbModelParam._m0[1u].x));
    float _1711 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _687);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1711 : min(cbModelParam._m0[25u].z, _1711));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1759 = fma(_934, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926)) + cbModelParam._m0[13u].w;
        float _1763 = fma(_934, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926)) + cbModelParam._m0[14u].w;
        float _1767 = fma(_934, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926)) + cbModelParam._m0[15u].w;
        float _1770 = fma(_872, cbModelParam._m0[13u].z, fma(_871, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _870));
        float _1773 = fma(_872, cbModelParam._m0[14u].z, fma(_871, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _870));
        float _1776 = fma(_872, cbModelParam._m0[15u].z, fma(_871, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _870));
        float _1804;
        if (_1770 > 0.0)
        {
            _1804 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1804 = frontier_phi_17_15_ladder;
        }
        float _1975;
        if (_1773 > 0.0)
        {
            _1975 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1975 = frontier_phi_26_22_ladder;
        }
        float _2270;
        if (_1776 > 0.0)
        {
            _2270 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2270 = frontier_phi_38_33_ladder;
        }
        float _2272 = isnan(_1975) ? _1804 : (isnan(_1804) ? _1975 : min(_1804, _1975));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1770) + _1759;
        float _2278 = (_2273 * _1773) + _1763;
        float _2279 = (_2273 * _1776) + _1767;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2280;
        float _2284 = _2280 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 > _2284) || ((_2278 < _2282) || ((_2277 < _2282) || (_2277 > _2284))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2424 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2279, cbModelParam._m0[9u].z, fma(_2278, cbModelParam._m0[9u].y, _2277 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2279, cbModelParam._m0[10u].z, fma(_2278, cbModelParam._m0[10u].y, _2277 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2279, cbModelParam._m0[11u].z, fma(_2278, cbModelParam._m0[11u].y, _2277 * cbModelParam._m0[11u].x))), _1712);
            frontier_phi_16_38_ladder = _2424.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2424.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2424.x * cbModelParam._m0[1u].y;
        }
        _1792 = frontier_phi_16_38_ladder_2;
        _1794 = frontier_phi_16_38_ladder_1;
        _1796 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_870, _871, _872), _1712);
        _1792 = _1780.x * cbModelParam._m0[1u].y;
        _1794 = _1780.y * cbModelParam._m0[1u].y;
        _1796 = _1780.z * cbModelParam._m0[1u].y;
    }
    float _1800 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _687);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1800 : min(cbModelParam._m0[25u].w, _1800));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1854 = fma(_934, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926)) + cbModelParam._m0[21u].w;
        float _1858 = fma(_934, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926)) + cbModelParam._m0[22u].w;
        float _1862 = fma(_934, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926)) + cbModelParam._m0[23u].w;
        float _1865 = fma(_872, cbModelParam._m0[21u].z, fma(_871, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _870));
        float _1868 = fma(_872, cbModelParam._m0[22u].z, fma(_871, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _870));
        float _1871 = fma(_872, cbModelParam._m0[23u].z, fma(_871, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _870));
        float _1980;
        if (_1865 > 0.0)
        {
            _1980 = abs((1.0 - _1854) / _1865);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1854 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1980 = frontier_phi_28_24_ladder;
        }
        float _2297;
        if (_1868 > 0.0)
        {
            _2297 = abs((1.0 - _1858) / _1868);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1858 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2297 = frontier_phi_40_35_ladder;
        }
        float _2635;
        if (_1871 > 0.0)
        {
            _2635 = abs((1.0 - _1862) / _1871);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1862 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2635 = frontier_phi_50_47_ladder;
        }
        float _2637 = isnan(_2297) ? _1980 : (isnan(_1980) ? _2297 : min(_1980, _2297));
        float _2638 = isnan(_2635) ? _2637 : (isnan(_2637) ? _2635 : min(_2637, _2635));
        float _2642 = (_2638 * _1865) + _1854;
        float _2643 = (_2638 * _1868) + _1858;
        float _2644 = (_2638 * _1871) + _1862;
        float _2645 = _2638 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2645;
        float _2648 = _2645 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2644 > _2648) || ((_2644 < _2646) || ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 < _2646) || (_2642 > _2648))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2644, cbModelParam._m0[17u].z, fma(_2643, cbModelParam._m0[17u].y, _2642 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2644, cbModelParam._m0[18u].z, fma(_2643, cbModelParam._m0[18u].y, _2642 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2644, cbModelParam._m0[19u].z, fma(_2643, cbModelParam._m0[19u].y, _2642 * cbModelParam._m0[19u].x))), _1801);
            frontier_phi_25_50_ladder = _2766.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2766.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2766.x * cbModelParam._m0[1u].z;
        }
        _1890 = frontier_phi_25_50_ladder_2;
        _1892 = frontier_phi_25_50_ladder_1;
        _1894 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_870, _871, _872), _1801);
        _1890 = _1874.x * cbModelParam._m0[1u].z;
        _1892 = _1874.y * cbModelParam._m0[1u].z;
        _1894 = _1874.z * cbModelParam._m0[1u].z;
    }
    float _1907 = (((_897 * _846) + _898) * _862) * ((cbModelParam._m0[1u].w * (_1890 - _1792)) + _1792);
    float _1909 = (((_897 * _848) + _898) * _862) * ((cbModelParam._m0[1u].w * (_1892 - _1794)) + _1794);
    float _1911 = (((_897 * _849) + _898) * _862) * ((cbModelParam._m0[1u].w * (_1894 - _1796)) + _1796);
    float _1914 = fma(_1911, cbSceneParam._m0[89u].z, fma(_1909, cbSceneParam._m0[89u].y, _1907 * cbSceneParam._m0[89u].x));
    float _1917 = fma(_1911, cbSceneParam._m0[90u].z, fma(_1909, cbSceneParam._m0[90u].y, _1907 * cbSceneParam._m0[90u].x));
    float _1920 = fma(_1911, cbSceneParam._m0[91u].z, fma(_1909, cbSceneParam._m0[91u].y, _1907 * cbSceneParam._m0[91u].x));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1958 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1962 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1966 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1967 = _1954 / _1966;
    float _1968 = _1958 / _1966;
    float _1969 = _1962 / _1966;
    float _2116;
    float _2117;
    float _2118;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1996 = ((uint(_1969 > cbSceneParam._m0[59u].y) + uint(_1969 > cbSceneParam._m0[59u].x)) + uint(_1969 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1997 = _1996 + 43u;
        uint _2005 = _1996 + 44u;
        uint _2013 = _1996 + 45u;
        uint _2021 = _1996 + 46u;
        float _2032 = fma(_1966, cbSceneParam._m0[_1997].w, fma(_1962, cbSceneParam._m0[_1997].z, fma(_1958, cbSceneParam._m0[_1997].y, _1954 * cbSceneParam._m0[_1997].x)));
        float _2036 = fma(_1966, cbSceneParam._m0[_2005].w, fma(_1962, cbSceneParam._m0[_2005].z, fma(_1958, cbSceneParam._m0[_2005].y, _1954 * cbSceneParam._m0[_2005].x)));
        float _2044 = fma(_1966, cbSceneParam._m0[_2021].w, fma(_1962, cbSceneParam._m0[_2021].z, fma(_1958, cbSceneParam._m0[_2021].y, _1954 * cbSceneParam._m0[_2021].x)));
        float _2049 = cbSceneParam._m0[33u].z * _2044;
        float _2051 = cbSceneParam._m0[33u].w * _2044;
        float _2054 = fma(_1966, cbSceneParam._m0[_2013].w, fma(_1962, cbSceneParam._m0[_2013].z, fma(_1958, cbSceneParam._m0[_2013].y, _1954 * cbSceneParam._m0[_2013].x))) / _2044;
        float _2102 = (cbSceneParam._m0[33u].x - sqrt(((_1968 * _1968) + (_1967 * _1967)) + (_1969 * _1969))) * cbSceneParam._m0[33u].y;
        float _4472 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2109 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2049 + _2032) / _2044, (_2051 + _2036) / _2044), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2051 + _2032) / _2044, (_2036 - _2049) / _2044), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2032 - _2049) / _2044, (_2036 - _2051) / _2044), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2032 - _2051) / _2044, (_2049 + _2036) / _2044), _2054), 0.0)).x), vec4(0.25)));
        _2116 = 1.0 - (_2109 * cbSceneParam._m0[34u].x);
        _2117 = 1.0 - (_2109 * cbSceneParam._m0[34u].y);
        _2118 = 1.0 - (_2109 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2116 = 1.0;
        _2117 = 1.0;
        _2118 = 1.0;
    }
    float _2182;
    float _2184;
    float _2186;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2170 = fma(_1966, cbSceneParam._m0[63u].w, fma(_1962, cbSceneParam._m0[63u].z, fma(_1958, cbSceneParam._m0[63u].y, _1954 * cbSceneParam._m0[63u].x)));
        float _2171 = fma(_1966, cbSceneParam._m0[60u].w, fma(_1962, cbSceneParam._m0[60u].z, fma(_1958, cbSceneParam._m0[60u].y, _1954 * cbSceneParam._m0[60u].x))) / _2170;
        float _2172 = fma(_1966, cbSceneParam._m0[61u].w, fma(_1962, cbSceneParam._m0[61u].z, fma(_1958, cbSceneParam._m0[61u].y, _1954 * cbSceneParam._m0[61u].x))) / _2170;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2171 >= cbSceneParam._m0[64u].x) && (_2172 >= cbSceneParam._m0[64u].y)) && (_2171 <= cbSceneParam._m0[64u].z)) && (_2172 <= cbSceneParam._m0[64u].w))
        {
            float _2310 = fma(_1966, cbSceneParam._m0[62u].w, fma(_1962, cbSceneParam._m0[62u].z, fma(_1958, cbSceneParam._m0[62u].y, _1954 * cbSceneParam._m0[62u].x))) / _2170;
            float _2314 = isnan(cbSceneParam._m0[41u].w) ? _2310 : (isnan(_2310) ? cbSceneParam._m0[41u].w : max(_2310, cbSceneParam._m0[41u].w));
            float _2357 = (cbSceneParam._m0[33u].x - sqrt(((_1968 * _1968) + (_1967 * _1967)) + (_1969 * _1969))) * cbSceneParam._m0[33u].y;
            float _4488 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
            float _2364 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2171, cbSceneParam._m0[33u].w + _2172), _2314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2171, _2172 - cbSceneParam._m0[33u].z), _2314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2171 - cbSceneParam._m0[33u].z, _2172 - cbSceneParam._m0[33u].w), _2314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2171 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2172), _2314), 0.0)).x), vec4(0.25)));
            float _2368 = 1.0 - (_2364 * cbSceneParam._m0[34u].x);
            float _2369 = 1.0 - (_2364 * cbSceneParam._m0[34u].y);
            float _2370 = 1.0 - (_2364 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2370) ? _2118 : (isnan(_2118) ? _2370 : min(_2118, _2370));
            frontier_phi_37_36_ladder_1 = isnan(_2369) ? _2117 : (isnan(_2117) ? _2369 : min(_2117, _2369));
            frontier_phi_37_36_ladder_2 = isnan(_2368) ? _2116 : (isnan(_2116) ? _2368 : min(_2116, _2368));
        }
        else
        {
            frontier_phi_37_36_ladder = _2118;
            frontier_phi_37_36_ladder_1 = _2117;
            frontier_phi_37_36_ladder_2 = _2116;
        }
        _2182 = frontier_phi_37_36_ladder_2;
        _2184 = frontier_phi_37_36_ladder_1;
        _2186 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2182 = _2116;
        _2184 = _2117;
        _2186 = _2118;
    }
    uvec4 _2191 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2193 = _2191.x * 14u;
    uint _2194 = _2193 + 13u;
    float _2201 = _862 + (-1.0);
    float _2206 = (cbLight._m0[_2194].x * _2201) + 1.0;
    float _2207 = (cbLight._m0[_2194].y * _2201) + 1.0;
    float _2208 = (cbLight._m0[_2194].z * _2201) + 1.0;
    float _2209 = (cbLight._m0[_2194].w * _2201) + 1.0;
    uint _2210 = _2193 + 5u;
    float _2216 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
    uint _2220 = _2193 + 4u;
    float _2229 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
    uint _2233 = _2193 | 1u;
    float _2244 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_684, _685, _686));
    float _2247 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_684, _685, _686));
    float _4524 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _4535 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2252 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * 0.3183098733425140380859375;
    float _2254 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * 0.3183098733425140380859375;
    float _2261 = ((cbLight._m0[_2210].x * _2216) * _2254) + (((cbLight._m0[_2220].x * _2182) * _2229) * _2252);
    float _2262 = ((_2216 * cbLight._m0[_2210].y) * _2254) + (((cbLight._m0[_2220].y * _2184) * _2229) * _2252);
    float _2263 = ((_2216 * cbLight._m0[_2210].z) * _2254) + (((cbLight._m0[_2220].z * _2186) * _2229) * _2252);
    uvec4 _2267 = floatBitsToUint(cbLight._m0[_2193 + 12u]);
    bool _2269 = _2267.x == 0u;
    float _2371;
    float _2373;
    float _2375;
    if (_2269)
    {
        _2371 = _2261;
        _2373 = _2262;
        _2375 = _2263;
    }
    else
    {
        uint _2379 = _2193 + 6u;
        float _2395 = (dot(vec3(cbLight._m0[_2193 + 2u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2396 = _2395 * _2395;
        float _4546 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2397 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2398 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2371 = (((cbLight._m0[_2379].x * 0.3183098733425140380859375) * _2397) * _2398) + _2261;
        _2373 = (((cbLight._m0[_2379].y * 0.3183098733425140380859375) * _2397) * _2398) + _2262;
        _2375 = (((cbLight._m0[_2379].z * 0.3183098733425140380859375) * _2397) * _2398) + _2263;
    }
    bool _2378 = _2267.y == 0u;
    float _2433;
    float _2435;
    float _2437;
    if (_2378)
    {
        _2433 = _2371;
        _2435 = _2373;
        _2437 = _2375;
    }
    else
    {
        uint _2606 = _2193 + 7u;
        float _2622 = (dot(vec3(cbLight._m0[_2193 + 3u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2623 = _2622 * _2622;
        float _4562 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2624 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2625 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2433 = (((cbLight._m0[_2606].x * 0.3183098733425140380859375) * _2624) * _2625) + _2371;
        _2435 = (((cbLight._m0[_2606].y * 0.3183098733425140380859375) * _2624) * _2625) + _2373;
        _2437 = (((cbLight._m0[_2606].z * 0.3183098733425140380859375) * _2624) * _2625) + _2375;
    }
    uint _2440 = _2193 + 8u;
    float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _687) * 0.949999988079071044921875);
    float _2454 = _2453 * _2453;
    float _2455 = cbLight._m0[_2193].x + _764;
    float _2456 = cbLight._m0[_2193].y + _765;
    float _2457 = cbLight._m0[_2193].z + _766;
    float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
    float _2462 = _2461 * _2455;
    float _2463 = _2461 * _2456;
    float _2464 = _2461 * _2457;
    float _2465 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2193].xyz));
    float _4578 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _4589 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2469 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2470 = dot(vec3(_684, _685, _686), vec3(_2462, _2463, _2464));
    float _4600 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2473 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2474 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2462, _2463, _2464));
    float _4611 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2478 = _2454 * _2454;
    float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
    float _2490 = exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0);
    float _2491 = 0.959999978542327880859375 - _843;
    float _2493 = 0.959999978542327880859375 - _844;
    float _2494 = 0.959999978542327880859375 - _845;
    float _2501 = 1.0 - _2454;
    float _2512 = (0.5 / (((_2469 * ((_2468 * _2501) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2469 * _2501) + _2454) * _2468))) * _2468;
    float _4622 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2514 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
    uint _2528 = _2193 + 9u;
    float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _687) * 0.949999988079071044921875);
    float _2540 = _2539 * _2539;
    float _2541 = cbLight._m0[_2233].x + _764;
    float _2542 = cbLight._m0[_2233].y + _765;
    float _2543 = cbLight._m0[_2233].z + _766;
    float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
    float _2548 = _2547 * _2541;
    float _2549 = _2547 * _2542;
    float _2550 = _2547 * _2543;
    float _2551 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2233].xyz));
    float _4633 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2555 = dot(vec3(_684, _685, _686), vec3(_2548, _2549, _2550));
    float _4644 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2559 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2548, _2549, _2550));
    float _4655 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2563 = _2540 * _2540;
    float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
    float _2574 = exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0);
    float _2581 = 1.0 - _2540;
    float _2591 = (0.5 / (((_2469 * ((_2554 * _2581) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2469 * _2581) + _2540) * _2554))) * _2554;
    float _4666 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2593 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
    float _2603 = (((((_2574 * _2491) + _846) * cbLight._m0[_2528].x) * _2593) * _2216) + ((((cbLight._m0[_2440].x * _2182) * ((_2490 * _2491) + _846)) * _2514) * _2229);
    float _2604 = (((((_2574 * _2493) + _848) * cbLight._m0[_2528].y) * _2593) * _2216) + ((((cbLight._m0[_2440].y * _2184) * ((_2490 * _2493) + _848)) * _2514) * _2229);
    float _2605 = (((((_2574 * _2494) + _849) * cbLight._m0[_2528].z) * _2593) * _2216) + ((((cbLight._m0[_2440].z * _2186) * ((_2490 * _2494) + _849)) * _2514) * _2229);
    float _2661;
    float _2663;
    float _2665;
    if (_2269)
    {
        _2661 = _2603;
        _2663 = _2604;
        _2665 = _2605;
    }
    else
    {
        uint _2667 = _2193 + 2u;
        uint _2671 = _2193 + 10u;
        float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _687) * 0.949999988079071044921875);
        float _2686 = _2685 * _2685;
        float _2687 = cbLight._m0[_2667].x + _764;
        float _2688 = cbLight._m0[_2667].y + _765;
        float _2689 = cbLight._m0[_2667].z + _766;
        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
        float _2694 = _2693 * _2687;
        float _2695 = _2693 * _2688;
        float _2696 = _2693 * _2689;
        float _2697 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2667].xyz));
        float _4677 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2701 = dot(vec3(_684, _685, _686), vec3(_2694, _2695, _2696));
        float _4688 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2705 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2694, _2695, _2696));
        float _4699 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2709 = _2686 * _2686;
        float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
        float _2720 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
        float _2727 = 1.0 - _2686;
        float _2737 = (0.5 / (((_2469 * ((_2700 * _2727) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2469 * _2727) + _2686) * _2700))) * _2700;
        float _4710 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2739 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
        float _2740 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2661 = (((((_2720 * _2491) + _846) * cbLight._m0[_2671].x) * _2739) * _2740) + _2603;
        _2663 = (((((_2720 * _2493) + _848) * cbLight._m0[_2671].y) * _2739) * _2740) + _2604;
        _2665 = (((((_2720 * _2494) + _849) * cbLight._m0[_2671].z) * _2739) * _2740) + _2605;
    }
    float _2771;
    float _2773;
    float _2775;
    if (_2378)
    {
        _2771 = _2661;
        _2773 = _2663;
        _2775 = _2665;
    }
    else
    {
        uint _2782 = _2193 + 3u;
        uint _2786 = _2193 + 11u;
        float _2800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2782].w)) * _687) * 0.949999988079071044921875);
        float _2801 = _2800 * _2800;
        float _2802 = cbLight._m0[_2782].x + _764;
        float _2803 = cbLight._m0[_2782].y + _765;
        float _2804 = cbLight._m0[_2782].z + _766;
        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
        float _2809 = _2808 * _2802;
        float _2810 = _2808 * _2803;
        float _2811 = _2808 * _2804;
        float _2812 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2782].xyz));
        float _4726 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2816 = dot(vec3(_684, _685, _686), vec3(_2809, _2810, _2811));
        float _4737 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2820 = dot(vec3(cbLight._m0[_2782].xyz), vec3(_2809, _2810, _2811));
        float _4748 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2824 = _2801 * _2801;
        float _2828 = ((_2819 * _2819) * (_2824 + (-1.0))) + 1.0;
        float _2835 = exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0);
        float _2842 = 1.0 - _2801;
        float _2852 = (0.5 / (((_2469 * ((_2815 * _2842) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2469 * _2842) + _2801) * _2815))) * _2815;
        float _4759 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2854 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2824 / ((_2828 * _2828) * 3.141590118408203125));
        float _2855 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2771 = (((((_2835 * _2491) + _846) * cbLight._m0[_2786].x) * _2854) * _2855) + _2661;
        _2773 = (((((_2835 * _2493) + _848) * cbLight._m0[_2786].y) * _2854) * _2855) + _2663;
        _2775 = (((((_2835 * _2494) + _849) * cbLight._m0[_2786].z) * _2854) * _2855) + _2665;
    }
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    if (_2191.y == 0u)
    {
        uvec4 _2876 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2877 = _2876.x;
        uint _2888 = uint((float(_2876.y) * floor(float(uint(cbSceneParam._m0[85u].y * _785) / _2877))) + floor(float(uint(cbSceneParam._m0[85u].x * _784) / _2877)));
        float _2898 = (log2(_1969 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2899 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        uint _2902 = uint(isnan(14.0) ? _2899 : (isnan(_2899) ? 14.0 : min(_2899, 14.0)));
        uvec4 _2907 = texelFetch(g_lightClusterGridBuffer, int(((_2902 << 2u) + (_2888 << 6u)) >> 2u));
        uint _2908 = _2907.x;
        uint _2909 = _2876.z;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        if (((((1u << ((_2909 >> 4u) & 15u)) + 4294967295u) & _2908) == 0u) || ((_2909 & 240u) == 0u))
        {
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
        }
        else
        {
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            uint _3147 = 0u;
            uint _3156;
            bool _3157;
            for (;;)
            {
                _3156 = texelFetch(g_lightClassification, int((((_2902 << 5u) + (_2888 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                _3157 = _3156 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3157)
                {
                    frontier_phi_71_pred = _3146;
                    frontier_phi_71_pred_1 = _3145;
                    frontier_phi_71_pred_2 = _3144;
                    frontier_phi_71_pred_3 = _3143;
                    frontier_phi_71_pred_4 = _3142;
                    frontier_phi_71_pred_5 = _3141;
                }
                else
                {
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    uint _3292;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3145;
                    _3291 = _3146;
                    _3292 = _3156;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    for (;;)
                    {
                        uint _3296 = uint(findLSB(_3292)) + (_3147 << 5u);
                        uint _3293 = (_3292 + 4294967295u) & _3292;
                        uint _3298 = _3296 * 48u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3298)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 3u)).x));
                        uint _3318 = (_3296 * 48u) + 4u;
                        vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3337 = (_3296 * 48u) + 8u;
                        vec3 _3348 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3337)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 2u)).x));
                        float _3352 = _3312.x - _1967;
                        float _3353 = _3312.y - _1968;
                        float _3354 = _3312.z - _1969;
                        float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                        float _3358 = inversesqrt(_3355);
                        float _3359 = _3358 * _3352;
                        float _3360 = _3358 * _3353;
                        float _3361 = _3358 * _3354;
                        float _3362 = dot(vec3(_803, _806, _809), vec3(_3359, _3360, _3361));
                        float _3367 = 1.0 - (_3355 * _3312.w);
                        float _4785 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3368 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3369 = sqrt(_3355) * _3331.w;
                        float _3372 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                        float _3373 = _3372 * _3372;
                        float _3376 = ((1.0 - _3373) * _3362) + _3373;
                        float _3379 = _3369 * _3369;
                        float _3383 = ((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3368) / ((_3379 * 0.699999988079071044921875) + 1.0);
                        float _3387 = (-0.0) - _1967;
                        float _3388 = (-0.0) - _1968;
                        float _3389 = (-0.0) - _1969;
                        float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                        float _3394 = _3393 * _3387;
                        float _3395 = _3393 * _3388;
                        float _3396 = _3393 * _3389;
                        float _3403 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                        float _3404 = 1.0 - _878;
                        float _3411 = sqrt(1.0 - ((1.0 - (_3404 * _3404)) * (1.0 - (_3403 * _3403))));
                        float _3412 = _3411 * _3411;
                        float _3413 = _3412 * _3412;
                        float _3414 = _3394 + _3359;
                        float _3415 = _3395 + _3360;
                        float _3416 = _3396 + _3361;
                        float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                        float _3424 = dot(vec3(_803, _806, _809), vec3(_3394, _3395, _3396));
                        float _4801 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3427 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3428 = dot(vec3(_803, _806, _809), vec3(_3420 * _3414, _3420 * _3415, _3420 * _3416));
                        float _4812 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3431 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3435 = ((_3431 * _3431) * (_3413 + (-1.0))) + 1.0;
                        float _3436 = _3372 * _3412;
                        float _3437 = _3436 * _3436;
                        float _3440 = ((1.0 - _3437) * _3362) + _3437;
                        float _4823 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3441 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3442 = 1.0 - _3412;
                        float _3452 = (0.5 / (((_3441 * ((_3427 * _3442) + _3412)) + 9.9999999392252902907785028219223e-09) + (((_3441 * _3442) + _3412) * _3427))) * _3441;
                        float _4834 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3463 = (((_3413 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3435 * _3435) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125))) * _3368;
                        _3216 = (_3383 * _3331.x) + _3289;
                        _3217 = (_3383 * _3331.y) + _3290;
                        _3218 = (_3383 * _3331.z) + _3291;
                        _3213 = (_3463 * _3348.x) + _3286;
                        _3214 = (_3463 * _3348.y) + _3287;
                        _3215 = (_3463 * _3348.z) + _3288;
                        if (_3293 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3217;
                            _3291 = _3218;
                            _3292 = _3293;
                        }
                    }
                    frontier_phi_71_pred = _3218;
                    frontier_phi_71_pred_1 = _3217;
                    frontier_phi_71_pred_2 = _3216;
                    frontier_phi_71_pred_3 = _3215;
                    frontier_phi_71_pred_4 = _3214;
                    frontier_phi_71_pred_5 = _3213;
                }
                _2999 = frontier_phi_71_pred;
                _2997 = frontier_phi_71_pred_1;
                _2995 = frontier_phi_71_pred_2;
                _2993 = frontier_phi_71_pred_3;
                _2991 = frontier_phi_71_pred_4;
                _2989 = frontier_phi_71_pred_5;
                uint _3148 = _3147 + 1u;
                if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3141 = _2989;
                    _3142 = _2991;
                    _3143 = _2993;
                    _3144 = _2995;
                    _3145 = _2997;
                    _3146 = _2999;
                    _3147 = _3148;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
        }
        uvec4 _3002 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3003 = _3002.z;
        uint _3005 = (_3003 >> 8u) & 15u;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        if (((4294967295u << _3005) & _2908) == 0u)
        {
            _3109 = _2988;
            _3111 = _2990;
            _3113 = _2992;
            _3115 = _2994;
            _3117 = _2996;
            _3119 = _2998;
        }
        else
        {
            float _3134 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
            float _3135 = _3134 * _1967;
            float _3136 = _3134 * _1968;
            float _3137 = _3134 * _1969;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3005 < ((_3003 >> 12u) & 15u))
            {
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3269 = _2988;
                float _3270 = _2990;
                float _3271 = _2992;
                float _3272 = _2994;
                float _3273 = _2996;
                float _3274 = _2998;
                uint _3275 = _3005;
                uint _3284;
                bool _3285;
                for (;;)
                {
                    _3284 = texelFetch(g_lightClassification, int((((_2902 << 5u) + (_2888 << 9u)) + (_3275 << 2u)) >> 2u)).x;
                    _3285 = _3284 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3285)
                    {
                        frontier_phi_82_pred = _3274;
                        frontier_phi_82_pred_1 = _3273;
                        frontier_phi_82_pred_2 = _3272;
                        frontier_phi_82_pred_3 = _3271;
                        frontier_phi_82_pred_4 = _3270;
                        frontier_phi_82_pred_5 = _3269;
                    }
                    else
                    {
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3490 = _3269;
                        float _3491 = _3270;
                        float _3492 = _3271;
                        float _3493 = _3272;
                        float _3494 = _3273;
                        float _3495 = _3274;
                        uint _3496 = _3284;
                        uint _3497;
                        vec4 _3522;
                        float _3523;
                        vec4 _3538;
                        vec3 _3550;
                        vec4 _3565;
                        vec4 _3580;
                        float _3626;
                        bool _3627;
                        for (;;)
                        {
                            uint _3507 = ((_3275 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3496));
                            _3497 = (_3496 + 4294967295u) & _3496;
                            uint _3509 = _3507 * 40u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3523 = _3522.w;
                            uint _3525 = (_3507 * 40u) + 4u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3507 * 40u) + 8u;
                            _3550 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x));
                            uint _3552 = (_3507 * 40u) + 16u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3567 = (_3507 * 40u) + 20u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3582 = (_3507 * 40u) + 24u;
                            vec4 _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3601 = (_3507 * 40u) + 28u;
                            vec4 _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            _3626 = fma(_1969, _3614.z, fma(_1968, _3614.y, _3614.x * _1967)) + _3614.w;
                            _3627 = !((fma(_1969, _3595.z, fma(_1968, _3595.y, _3595.x * _1967)) + _3595.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3627)
                            {
                                float _3654 = _3522.x - _1967;
                                float _3655 = _3522.y - _1968;
                                float _3656 = _3522.z - _1969;
                                float _3657 = dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656));
                                float _3660 = inversesqrt(_3657);
                                float _3661 = _3660 * _3654;
                                float _3662 = _3660 * _3655;
                                float _3663 = _3660 * _3656;
                                float _3667 = 1.0 - (_3657 / (_3523 * _3523));
                                float _4845 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3672 = sqrt(_3657) * _3538.w;
                                float _3674 = 1.39999997615814208984375 / (_3672 + 1.39999997615814208984375);
                                float _3675 = _3674 * _3674;
                                float _3678 = ((1.0 - _3675) * dot(vec3(_3661, _3662, _3663), vec3(_803, _806, _809))) + _3675;
                                float _3681 = _3672 * _3672;
                                float _3685 = (fma(_1969, _3565.z, fma(_1968, _3565.y, _3565.x * _1967)) + _3565.w) / _3626;
                                float _3686 = (fma(_1969, _3580.z, fma(_1968, _3580.y, _3580.x * _1967)) + _3580.w) / _3626;
                                float _3690 = 1.0 - dot(vec2(_3685, _3686), vec2(_3685, _3686));
                                float _4861 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3692 = _3691 * (((isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0))) * _3668) / ((_3681 * 0.699999988079071044921875) + 1.0));
                                float _3704 = exp2(log2(1.0 / ((_3681 * 3.5) + 5.0)) * 0.25);
                                float _3705 = 1.0 - _878;
                                float _3712 = sqrt(1.0 - ((1.0 - (_3705 * _3705)) * (1.0 - (_3704 * _3704))));
                                float _3713 = _3712 * _3712;
                                float _3714 = _3713 * _3713;
                                float _3715 = _3661 - _3135;
                                float _3716 = _3662 - _3136;
                                float _3717 = _3663 - _3137;
                                float _3721 = inversesqrt(dot(vec3(_3715, _3716, _3717), vec3(_3715, _3716, _3717)));
                                float _3725 = dot(vec3(_803, _806, _809), vec3((-0.0) - _3135, (-0.0) - _3136, (-0.0) - _3137));
                                float _4872 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3728 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3729 = dot(vec3(_803, _806, _809), vec3(_3721 * _3715, _3721 * _3716, _3721 * _3717));
                                float _4883 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3732 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3736 = ((_3732 * _3732) * (_3714 + (-1.0))) + 1.0;
                                float _3737 = _3674 * _3713;
                                float _3738 = _3737 * _3737;
                                float _3744 = ((1.0 - _3738) * dot(vec3(_803, _806, _809), vec3(_3661, _3662, _3663))) + _3738;
                                float _4894 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3745 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3746 = 1.0 - _3713;
                                float _3756 = (0.5 / (((_3745 * ((_3728 * _3746) + _3713)) + 9.9999999392252902907785028219223e-09) + (((_3745 * _3746) + _3713) * _3728))) * _3745;
                                float _4905 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3766 = (_3691 * _3668) * (((_3714 * 3.1415927410125732421875) * (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0)))) / ((_3736 * _3736) * ((_3681 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3692 * _3538.z;
                                frontier_phi_88_pred_1 = _3692 * _3538.y;
                                frontier_phi_88_pred_2 = _3692 * _3538.x;
                                frontier_phi_88_pred_3 = _3766 * _3550.z;
                                frontier_phi_88_pred_4 = _3766 * _3550.y;
                                frontier_phi_88_pred_5 = _3766 * _3550.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3775 = frontier_phi_88_pred;
                            _3774 = frontier_phi_88_pred_1;
                            _3773 = frontier_phi_88_pred_2;
                            _3772 = frontier_phi_88_pred_3;
                            _3771 = frontier_phi_88_pred_4;
                            _3770 = frontier_phi_88_pred_5;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            if (_3497 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3497;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3482;
                        frontier_phi_82_pred_1 = _3481;
                        frontier_phi_82_pred_2 = _3480;
                        frontier_phi_82_pred_3 = _3479;
                        frontier_phi_82_pred_4 = _3478;
                        frontier_phi_82_pred_5 = _3477;
                    }
                    _3120 = frontier_phi_82_pred;
                    _3118 = frontier_phi_82_pred_1;
                    _3116 = frontier_phi_82_pred_2;
                    _3114 = frontier_phi_82_pred_3;
                    _3112 = frontier_phi_82_pred_4;
                    _3110 = frontier_phi_82_pred_5;
                    uint _3276 = _3275 + 1u;
                    if (_3276 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3269 = _3110;
                        _3270 = _3112;
                        _3271 = _3114;
                        _3272 = _3116;
                        _3273 = _3118;
                        _3274 = _3120;
                        _3275 = _3276;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3116;
                frontier_phi_63_64_ladder_1 = _3120;
                frontier_phi_63_64_ladder_2 = _3118;
                frontier_phi_63_64_ladder_3 = _3114;
                frontier_phi_63_64_ladder_4 = _3112;
                frontier_phi_63_64_ladder_5 = _3110;
            }
            else
            {
                frontier_phi_63_64_ladder = _2994;
                frontier_phi_63_64_ladder_1 = _2998;
                frontier_phi_63_64_ladder_2 = _2996;
                frontier_phi_63_64_ladder_3 = _2992;
                frontier_phi_63_64_ladder_4 = _2990;
                frontier_phi_63_64_ladder_5 = _2988;
            }
            _3109 = frontier_phi_63_64_ladder_5;
            _3111 = frontier_phi_63_64_ladder_4;
            _3113 = frontier_phi_63_64_ladder_3;
            _3115 = frontier_phi_63_64_ladder;
            _3117 = frontier_phi_63_64_ladder_2;
            _3119 = frontier_phi_63_64_ladder_1;
        }
        float _3124 = isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0));
        _2921 = (_3124 * _3115) + _2433;
        _2923 = (_3124 * _3117) + _2435;
        _2925 = (_3124 * _3119) + _2437;
        _2927 = ((_3109 * _846) * _3124) + _2771;
        _2929 = ((_3111 * _848) * _3124) + _2773;
        _2931 = ((_3113 * _849) * _3124) + _2775;
    }
    else
    {
        _2921 = _2433;
        _2923 = _2435;
        _2925 = _2437;
        _2927 = _2771;
        _2929 = _2773;
        _2931 = _2775;
    }
    float _4921 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4932 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4943 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2948 = ((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2921 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _862))) + ((_2927 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    float _2949 = ((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2923 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _862))) + ((_2929 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    float _2950 = ((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2925 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _862))) + ((_2931 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    uint _2951 = _250 + 6u;
    float _2959 = _784 / cbSceneParam._m0[86u].x;
    float _2960 = _785 / cbSceneParam._m0[86u].y;
    vec4 _2974 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2959, _2960, (log2((isnan(cbSceneParam._m0[77u].w) ? _706 : (isnan(_706) ? cbSceneParam._m0[77u].w : min(_706, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2976 = _2974.x;
    float _2977 = _2974.y;
    float _2978 = _2974.z;
    float _2979 = _2974.w;
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    if (_706 > cbSceneParam._m0[78u].w)
    {
        float _3013 = isnan(_706) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _706 : min(cbSceneParam._m0[80u].w, _706));
        float _3014 = _3013 / _706;
        float _3025 = _3014 * _757;
        float _3026 = _758 * _3014;
        float _3027 = (-0.0) - _3026;
        float _3029 = _3014 * _759;
        float _3031 = (cbSceneParam._m0[77u].w * _3027) / _3013;
        float _3032 = _3031 + cbSceneParam._m0[79u].w;
        float _3033 = cbSceneParam._m0[79u].w - _3026;
        float _3039 = sqrt(((_3025 * _3025) + (_3026 * _3026)) + (_3029 * _3029));
        float _3042 = (1.0 - (cbSceneParam._m0[77u].w / _3013)) * _3039;
        float _3047 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3049 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3226;
        if (abs((_3027 - _3031) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3226 = ((((_3032 > 0.0) ? exp2(_3047 * _3032) : (2.0 - exp2(_3049 * _3032))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3042;
        }
        else
        {
            float _3170 = 1.0 / cbSceneParam._m0[80u].x;
            float _3171 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : max(_3032, _3033));
            float _3172 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : min(_3032, _3033));
            float _3181 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : min(_3171, 0.0));
            float _3182 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : min(_3172, 0.0));
            _3226 = ((abs(_3039 / _3027) * cbSceneParam._m0[80u].y) * ((((_3181 - _3182) * 2.0) - ((exp2(_3047 * (isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0)))) - exp2(_3047 * (isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))))) * _3170)) - ((exp2(_3049 * _3181) - exp2(_3049 * _3182)) * _3170))) + (_3042 * cbSceneParam._m0[80u].z);
        }
        vec4 _3228 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2959, _2960, 1.0), 0.0);
        float _3237 = exp2((_3226 * (-1.44269502162933349609375)) * (1.0 - _3228.w));
        float _3238 = log2(_3237);
        float _3254 = log2(_2979);
        _3051 = (exp2(_3254 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].x)) * _3228.x) / cbSceneParam._m0[78u].x)) + _2976;
        _3053 = (exp2(_3254 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].y)) * _3228.y) / cbSceneParam._m0[78u].y)) + _2977;
        _3055 = (exp2(_3254 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].z)) * _3228.z) / cbSceneParam._m0[78u].z)) + _2978;
        _3057 = _3237 * _2979;
    }
    else
    {
        _3051 = _2976;
        _3053 = _2977;
        _3055 = _2978;
        _3057 = _2979;
    }
    bool _3264;
    vec4 _3067;
    vec4 _3089;
    float _3091;
    float _3095;
    float _3096;
    float _3097;
    float _3098;
    bool _3108;
    for (;;)
    {
        _3067 = cbMatDynParam._m0[0u];
        float _3069 = roundEven(_3067.y);
        bool _3070 = _3069 == 3.0;
        float _3071 = log2(_3057);
        float _3078 = exp2(_3071 * cbSceneParam._m0[78u].x) * _2948;
        float _3079 = exp2(_3071 * cbSceneParam._m0[78u].y) * _2949;
        float _3080 = exp2(_3071 * cbSceneParam._m0[78u].z) * _2950;
        float _3087 = _773 + (-0.5);
        _3089 = cbMtdParam._m0[1u];
        _3091 = _3089.y * _3087;
        float _3094 = (_3069 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3095 = _3094 * (_3070 ? _3078 : (_3078 + (cbSceneParam._m0[72u].w * _3051)));
        _3096 = _3094 * (_3070 ? _3079 : (_3079 + (cbSceneParam._m0[72u].w * _3053)));
        _3097 = _3094 * (_3070 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3055)));
        _3098 = _3087 * 0.999000012874603271484375;
        _3108 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3108)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _3098) < 0.5)
            {
                _3264 = true;
                break;
            }
        }
        uint _3205 = _822 + uint(_3067.w);
        if ((cbInstanceData._m0[_3205].w < 1.0) && ((cbInstanceData._m0[_3205].w + _3098) < 0.5))
        {
            _3264 = true;
            break;
        }
        if ((_3091 + 1.0) < _3089.x)
        {
            _3264 = true;
            break;
        }
        _3264 = false;
        break;
    }
    float _3468;
    if (_3264)
    {
        discard_state = true;
        _3468 = 0.0;
    }
    else
    {
        _3468 = cbInstanceData._m0[_2951].w;
    }
    SV_Target.x = _3095;
    SV_Target.y = _3096;
    SV_Target.z = _3097;
    SV_Target.w = _3468;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2951].w;
    discard_exit();
}


