#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1109;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((_256 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_257 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _327 = _323.z;
    float _331 = (_323.x * 2.0) + (-1.0);
    float _332 = (_323.y * 2.0) + (-1.0);
    float _333 = dot(vec2(_331, _332), vec2(_331, _332));
    float _3438 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _339 = sqrt(1.0 - (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))));
    float _344 = _331 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_297.x * 2.0) + (-1.0)));
    float _345 = _332 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_297.y * 2.0) + (-1.0)));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _360 = _358.x;
    float _361 = 1.0 - _360;
    float _394 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_360 - _361) * cbMtdParam._m0[24u].w) + _361) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3449 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _403 = ((((cbMtdParam._m0[10u].x - _282) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _395) + _282;
    float _404 = ((((cbMtdParam._m0[10u].y - _283) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _395) + _283;
    float _405 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _284)) * _395) + _284;
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _420 = _418.x;
    float _422 = _420 - (_420 * _395);
    float _427 = (((_297.z - _327) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _327;
    float _431 = ((cbMtdParam._m0[23u].y - _427) * _395) + _427;
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _463 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_225, _226, _227, 0.0));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _256) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _257) + cbTextureTilingScale._m0[18u].w));
    float _480 = _478.x;
    float _485 = fract(_478.w + cbPerFrame._m0[22u].x);
    float _487 = (1.0 - _485) * _480;
    float _492 = ((_485 + (-1.0)) + _480) * 9.0;
    float _494 = ((_480 + (-1.0)) + _485) * 9.0;
    float _495 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _496 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _510 = (_487 * ((_478.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _495 : (isnan(_495) ? 3.0 : min(_495, 3.0))) * 3.1415927410125732421875);
    float _512 = (_487 * ((_478.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _496 : (isnan(_496) ? 3.0 : min(_496, 3.0))) * 3.1415927410125732421875);
    float _516 = inversesqrt(dot(vec3(_510, _512, 1.0), vec3(_510, _512, 1.0)));
    float _532 = (((((0.5 - _455) + ((_510 * 0.5) * _516)) * _463) + _455) * 2.0) + (-1.0);
    float _533 = (((((0.5 - _456) + ((_516 * 0.5) * _512)) * _463) + _456) * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3480 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _550 = ((((cbMtdParam._m0[22u].z * _344) - _344) + _532) * _395) + _344;
    float _551 = ((((cbMtdParam._m0[22u].z * _345) - _345) + _533) * _395) + _345;
    float _552 = (_395 * (sqrt(1.0 - (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) - _339)) + _339;
    float _554 = cbMtdParam._m0[22u].x + _323.w;
    float _557 = fma(_552, _225, fma(_551, _231 * TANGENT.x, (_217 * _209) * _550));
    float _560 = fma(_552, _226, fma(_551, _231 * TANGENT.y, (_217 * _210) * _550));
    float _563 = fma(_552, _227, fma(_551, _231 * TANGENT.z, (_217 * _211) * _550));
    float _567 = inversesqrt(dot(vec3(_557, _560, _563), vec3(_557, _560, _563)));
    float _568 = _567 * _557;
    float _569 = _567 * _560;
    float _570 = _567 * _563;
    float _3491 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _571 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3513 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3524 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3535 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3546 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _576 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _590 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _641 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _631);
    float _642 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _631);
    float _643 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _631);
    float _647 = inversesqrt(dot(vec3(_641, _642, _643), vec3(_641, _642, _643)));
    float _648 = _641 * _647;
    float _649 = _642 * _647;
    float _650 = _643 * _647;
    float _656 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _657 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _678 = fma(_570, cbSceneParam._m0[5u].z, fma(_569, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _568));
    float _681 = fma(_570, cbSceneParam._m0[6u].z, fma(_569, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _568));
    float _684 = fma(_570, cbSceneParam._m0[7u].z, fma(_569, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _568));
    uint _698 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _704 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_698].x;
    float _705 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * cbInstanceData._m0[_698].y;
    float _706 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * cbInstanceData._m0[_698].z;
    float _3557 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _3568 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _3579 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _710 = 1.0 - _576;
    float _711 = _707 * _710;
    float _712 = _708 * _710;
    float _713 = _709 * _710;
    float _718 = (_707 + (-0.039999999105930328369140625)) * _576;
    float _719 = (_708 + (-0.039999999105930328369140625)) * _576;
    float _720 = (_709 + (-0.039999999105930328369140625)) * _576;
    float _721 = _718 + 0.039999999105930328369140625;
    float _723 = _719 + 0.039999999105930328369140625;
    float _724 = _720 + 0.039999999105930328369140625;
    vec4 _733 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _656, cbSceneParam._m0[86u].y * _657));
    float _737 = ((isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * TEXCOORD_5.w) * _733.x;
    float _738 = dot(vec3(_568, _569, _570), vec3(_648, _649, _650));
    float _741 = _738 * 2.0;
    float _745 = (_741 * _568) - _648;
    float _746 = (_741 * _569) - _649;
    float _747 = (_741 * _570) - _650;
    float _751 = abs(dot(vec3(_648, _649, _650), vec3(_568, _569, _570)));
    float _3590 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _753 = sqrt(_571);
    float _765 = exp2((_753 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_753 * 3.0));
    float _771 = (1.0 - _765) * ((_753 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _772 = _765 * _753;
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1108;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _834 = fma(_808, cbModelParam._m0[26u].z, fma(_804, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800));
        float _838 = fma(_808, cbModelParam._m0[27u].z, fma(_804, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800));
        float _842 = fma(_808, cbModelParam._m0[28u].z, fma(_804, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800));
        float _866 = _800 + _568;
        float _867 = _804 + _569;
        float _868 = _808 + _570;
        float _878 = fma(_868, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _866)) - _834;
        float _879 = fma(_868, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _866)) - _838;
        float _880 = fma(_868, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _866)) - _842;
        float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
        float _897 = ((_884 * _878) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_834 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_884 * _879) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_838 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_884 * _880) / cbModelParam._m0[34u].z) + ((((((_842 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        float _936 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_902.x + (-0.5));
        float _938 = _936 * (_902.y + (-0.5));
        float _939 = _936 * (_902.z + (-0.5));
        float _946 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_909.x + (-0.5));
        float _948 = _946 * (_909.y + (-0.5));
        float _949 = _946 * (_909.z + (-0.5));
        float _956 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_916.x + (-0.5));
        float _958 = _956 * (_916.y + (-0.5));
        float _959 = _956 * (_916.z + (-0.5));
        float _966 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_923.x + (-0.5));
        float _968 = _966 * (_923.y + (-0.5));
        float _969 = _966 * (_923.z + (-0.5));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = _937 * 0.5;
        float _974 = _947 * 0.5;
        float _975 = _957 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _990 = (dot(vec3(_568, _569, _570), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _1000 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3638 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1002 + 1.0))) + _1007) * _970;
        float _1017 = _938 * 0.5;
        float _1018 = _948 * 0.5;
        float _1019 = _958 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_568, _569, _570), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3671 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1044 + 1.0))) + _1049) * _971;
        float _1059 = _939 * 0.5;
        float _1060 = _949 * 0.5;
        float _1061 = _959 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_568, _569, _570), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3704 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1086 + 1.0))) + _1091) * _972;
        _1108 = _939;
        _1110 = _938;
        _1111 = _937;
        _1112 = _949;
        _1113 = _948;
        _1114 = _947;
        _1115 = _959;
        _1116 = _958;
        _1117 = _957;
        _1118 = _972;
        _1119 = _971;
        _1120 = _970;
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
    }
    else
    {
        _1108 = _1109;
        _1110 = _1109;
        _1111 = _1109;
        _1112 = _1109;
        _1113 = _1109;
        _1114 = _1109;
        _1115 = _1109;
        _1116 = _1109;
        _1117 = _1109;
        _1118 = _1109;
        _1119 = _1109;
        _1120 = _1109;
        _1121 = 0.0;
        _1122 = 0.0;
        _1123 = 0.0;
    }
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1148 = fma(_808, cbModelParam._m0[30u].z, fma(_804, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _800));
        float _1152 = fma(_808, cbModelParam._m0[31u].z, fma(_804, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _800));
        float _1156 = fma(_808, cbModelParam._m0[32u].z, fma(_804, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _800));
        float _1179 = _800 + _568;
        float _1180 = _804 + _569;
        float _1181 = _808 + _570;
        float _1191 = fma(_1181, cbModelParam._m0[30u].z, fma(_1180, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1179)) - _1148;
        float _1192 = fma(_1181, cbModelParam._m0[31u].z, fma(_1180, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1179)) - _1152;
        float _1193 = fma(_1181, cbModelParam._m0[32u].z, fma(_1180, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1179)) - _1156;
        float _1197 = inversesqrt(dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193)));
        float _1210 = ((_1197 * _1191) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1148 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1197 * _1192) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1152 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1197 * _1193) / cbModelParam._m0[35u].z) + ((((((_1156 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        float _1247 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1214.x + (-0.5));
        float _1249 = _1247 * (_1214.y + (-0.5));
        float _1250 = _1247 * (_1214.z + (-0.5));
        float _1257 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1221.x + (-0.5));
        float _1259 = _1257 * (_1221.y + (-0.5));
        float _1260 = _1257 * (_1221.z + (-0.5));
        float _1267 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1228.x + (-0.5));
        float _1269 = _1267 * (_1228.y + (-0.5));
        float _1270 = _1267 * (_1228.z + (-0.5));
        float _1277 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1235.x + (-0.5));
        float _1279 = _1277 * (_1235.y + (-0.5));
        float _1280 = _1277 * (_1235.z + (-0.5));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = _1248 * 0.5;
        float _1285 = _1258 * 0.5;
        float _1286 = _1268 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_568, _569, _570), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3767 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1311 + 1.0))) + _1316) * _1281;
        float _1326 = _1249 * 0.5;
        float _1327 = _1259 * 0.5;
        float _1328 = _1269 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_568, _569, _570), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3800 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1353 + 1.0))) + _1358) * _1282;
        float _1368 = _1250 * 0.5;
        float _1369 = _1260 * 0.5;
        float _1370 = _1270 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_568, _569, _570), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3833 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1395 + 1.0))) + _1400) * _1283;
        _1417 = _1250;
        _1418 = _1249;
        _1419 = _1248;
        _1420 = _1260;
        _1421 = _1259;
        _1422 = _1258;
        _1423 = _1270;
        _1424 = _1269;
        _1425 = _1268;
        _1426 = _1283;
        _1427 = _1282;
        _1428 = _1281;
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
    }
    else
    {
        _1417 = _1109;
        _1418 = _1109;
        _1419 = _1109;
        _1420 = _1109;
        _1421 = _1109;
        _1422 = _1109;
        _1423 = _1109;
        _1424 = _1109;
        _1425 = _1109;
        _1426 = _1109;
        _1427 = _1109;
        _1428 = _1109;
        _1429 = 0.0;
        _1430 = 0.0;
        _1431 = 0.0;
    }
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1121)) + _1121;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1122)) + _1122;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1123)) + _1123;
    float _1464 = fma(_1443, cbSceneParam._m0[89u].z, fma(_1442, cbSceneParam._m0[89u].y, _1441 * cbSceneParam._m0[89u].x));
    float _1467 = fma(_1443, cbSceneParam._m0[90u].z, fma(_1442, cbSceneParam._m0[90u].y, _1441 * cbSceneParam._m0[90u].x));
    float _1470 = fma(_1443, cbSceneParam._m0[91u].z, fma(_1442, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1441));
    float _1485 = _745 * 0.5;
    float _1486 = _746 * 0.5;
    float _1487 = _747 * 0.5;
    float _1488 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1491 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1494 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1528;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1501 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1108, _1112, _1115, _1118));
        float _1505 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1110, _1113, _1116, _1119));
        float _1509 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1516 = dot(vec4(cbModelParam._m0[39u]), vec4(_1485, _1486, _1487, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1539;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1530 = dot(vec4(cbModelParam._m0[40u]), vec4(_1485, _1486, _1487, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1543 = (_1539 * cbModelParam._m0[1u].x) + (_1528 * (1.0 - cbModelParam._m0[1u].x));
    float _1553 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _571);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1553 : min(cbModelParam._m0[25u].z, _1553));
    float _1636;
    float _1638;
    float _1640;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1603 = fma(_808, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _800)) + cbModelParam._m0[13u].w;
        float _1607 = fma(_808, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _800)) + cbModelParam._m0[14u].w;
        float _1611 = fma(_808, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _800)) + cbModelParam._m0[15u].w;
        float _1614 = fma(_747, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745));
        float _1617 = fma(_747, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745));
        float _1620 = fma(_747, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745));
        float _1648;
        if (_1614 > 0.0)
        {
            _1648 = abs((1.0 - _1603) / _1614);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1603 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1648 = frontier_phi_14_12_ladder;
        }
        float _1852;
        if (_1617 > 0.0)
        {
            _1852 = abs((1.0 - _1607) / _1617);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1607 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1852 = frontier_phi_23_19_ladder;
        }
        float _2106;
        if (_1620 > 0.0)
        {
            _2106 = abs((1.0 - _1611) / _1620);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1611 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2106 = frontier_phi_35_30_ladder;
        }
        float _2108 = isnan(_1852) ? _1648 : (isnan(_1648) ? _1852 : min(_1648, _1852));
        float _2109 = isnan(_2106) ? _2108 : (isnan(_2108) ? _2106 : min(_2108, _2106));
        float _2113 = (_2109 * _1614) + _1603;
        float _2114 = (_2109 * _1617) + _1607;
        float _2115 = (_2109 * _1620) + _1611;
        float _2116 = _2109 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2116;
        float _2120 = _2116 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 > _2120) || ((_2114 < _2118) || ((_2113 < _2118) || (_2113 > _2120))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2115, cbModelParam._m0[9u].z, fma(_2114, cbModelParam._m0[9u].y, _2113 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2115, cbModelParam._m0[10u].z, fma(_2114, cbModelParam._m0[10u].y, _2113 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2115, cbModelParam._m0[11u].z, fma(_2114, cbModelParam._m0[11u].y, _2113 * cbModelParam._m0[11u].x))), _1554);
            frontier_phi_13_35_ladder = _2243.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2243.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2243.x * cbModelParam._m0[1u].y;
        }
        _1636 = frontier_phi_13_35_ladder_2;
        _1638 = frontier_phi_13_35_ladder_1;
        _1640 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1624 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_745, _746, _747), _1554);
        _1636 = _1624.x * cbModelParam._m0[1u].y;
        _1638 = _1624.y * cbModelParam._m0[1u].y;
        _1640 = _1624.z * cbModelParam._m0[1u].y;
    }
    float _1644 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _571);
    float _1645 = isnan(_1644) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1644 : min(cbModelParam._m0[25u].w, _1644));
    float _1735;
    float _1737;
    float _1739;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1699 = fma(_808, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _800)) + cbModelParam._m0[21u].w;
        float _1703 = fma(_808, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _800)) + cbModelParam._m0[22u].w;
        float _1707 = fma(_808, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _800)) + cbModelParam._m0[23u].w;
        float _1710 = fma(_747, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745));
        float _1713 = fma(_747, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745));
        float _1716 = fma(_747, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745));
        float _1857;
        if (_1710 > 0.0)
        {
            _1857 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1857 = frontier_phi_25_21_ladder;
        }
        float _2133;
        if (_1713 > 0.0)
        {
            _2133 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2133 = frontier_phi_37_32_ladder;
        }
        float _2346;
        if (_1716 > 0.0)
        {
            _2346 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2346 = frontier_phi_46_43_ladder;
        }
        float _2348 = isnan(_2133) ? _1857 : (isnan(_1857) ? _2133 : min(_1857, _2133));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1710) + _1699;
        float _2354 = (_2349 * _1713) + _1703;
        float _2355 = (_2349 * _1716) + _1707;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2356;
        float _2359 = _2356 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2355 > _2359) || ((_2355 < _2357) || ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 < _2357) || (_2353 > _2359))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2355, cbModelParam._m0[17u].z, fma(_2354, cbModelParam._m0[17u].y, _2353 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2355, cbModelParam._m0[18u].z, fma(_2354, cbModelParam._m0[18u].y, _2353 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2355, cbModelParam._m0[19u].z, fma(_2354, cbModelParam._m0[19u].y, _2353 * cbModelParam._m0[19u].x))), _1645);
            frontier_phi_22_46_ladder = _2554.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2554.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2554.x * cbModelParam._m0[1u].z;
        }
        _1735 = frontier_phi_22_46_ladder_2;
        _1737 = frontier_phi_22_46_ladder_1;
        _1739 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_745, _746, _747), _1645);
        _1735 = _1719.x * cbModelParam._m0[1u].z;
        _1737 = _1719.y * cbModelParam._m0[1u].z;
        _1739 = _1719.z * cbModelParam._m0[1u].z;
    }
    float _1752 = (((_771 * _721) + _772) * _737) * ((cbModelParam._m0[1u].w * (_1735 - _1636)) + _1636);
    float _1754 = (((_771 * _723) + _772) * _737) * ((cbModelParam._m0[1u].w * (_1737 - _1638)) + _1638);
    float _1756 = (((_771 * _724) + _772) * _737) * ((cbModelParam._m0[1u].w * (_1739 - _1640)) + _1640);
    float _1759 = fma(_1756, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1752 * cbSceneParam._m0[89u].x));
    float _1762 = fma(_1756, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1752 * cbSceneParam._m0[90u].x));
    float _1765 = fma(_1756, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, _1752 * cbSceneParam._m0[91u].x));
    uvec4 _1775 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1777 = _1775.x * 14u;
    uint _1778 = _1777 + 13u;
    float _1785 = _737 + (-1.0);
    float _1790 = (cbLight._m0[_1778].x * _1785) + 1.0;
    float _1791 = (cbLight._m0[_1778].y * _1785) + 1.0;
    float _1792 = (cbLight._m0[_1778].z * _1785) + 1.0;
    float _1793 = (cbLight._m0[_1778].w * _1785) + 1.0;
    uint _1794 = _1777 + 5u;
    float _1800 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
    uint _1804 = _1777 + 4u;
    float _1811 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
    uint _1815 = _1777 | 1u;
    float _1826 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_568, _569, _570));
    float _1829 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_568, _569, _570));
    float _3969 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _3980 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1834 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.3183098733425140380859375;
    float _1836 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.3183098733425140380859375;
    float _1843 = ((cbLight._m0[_1794].x * _1800) * _1836) + ((cbLight._m0[_1804].x * _1811) * _1834);
    float _1844 = ((_1800 * cbLight._m0[_1794].y) * _1836) + ((_1811 * cbLight._m0[_1804].y) * _1834);
    float _1845 = ((_1800 * cbLight._m0[_1794].z) * _1836) + ((_1811 * cbLight._m0[_1804].z) * _1834);
    uvec4 _1849 = floatBitsToUint(cbLight._m0[_1777 + 12u]);
    bool _1851 = _1849.x == 0u;
    float _1862;
    float _1864;
    float _1866;
    if (_1851)
    {
        _1862 = _1843;
        _1864 = _1844;
        _1866 = _1845;
    }
    else
    {
        uint _1870 = _1777 + 6u;
        float _1886 = (dot(vec3(cbLight._m0[_1777 + 2u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _1887 = _1886 * _1886;
        float _3991 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1889 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _1862 = (((cbLight._m0[_1870].x * 0.3183098733425140380859375) * _1888) * _1889) + _1843;
        _1864 = (((cbLight._m0[_1870].y * 0.3183098733425140380859375) * _1888) * _1889) + _1844;
        _1866 = (((cbLight._m0[_1870].z * 0.3183098733425140380859375) * _1888) * _1889) + _1845;
    }
    bool _1869 = _1849.y == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1869)
    {
        _1907 = _1862;
        _1909 = _1864;
        _1911 = _1866;
    }
    else
    {
        uint _2077 = _1777 + 7u;
        float _2093 = (dot(vec3(cbLight._m0[_1777 + 3u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _2094 = _2093 * _2093;
        float _4007 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2095 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2096 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _1907 = (((cbLight._m0[_2077].x * 0.3183098733425140380859375) * _2095) * _2096) + _1862;
        _1909 = (((cbLight._m0[_2077].y * 0.3183098733425140380859375) * _2095) * _2096) + _1864;
        _1911 = (((cbLight._m0[_2077].z * 0.3183098733425140380859375) * _2095) * _2096) + _1866;
    }
    uint _1914 = _1777 + 8u;
    float _1927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _571) * 0.949999988079071044921875);
    float _1928 = _1927 * _1927;
    float _1929 = cbLight._m0[_1777].x + _648;
    float _1930 = cbLight._m0[_1777].y + _649;
    float _1931 = cbLight._m0[_1777].z + _650;
    float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
    float _1936 = _1935 * _1929;
    float _1937 = _1935 * _1930;
    float _1938 = _1935 * _1931;
    float _1939 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1777].xyz));
    float _4023 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1942 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _1943 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _1944 = dot(vec3(_568, _569, _570), vec3(_1936, _1937, _1938));
    float _4045 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _1948 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1936, _1937, _1938));
    float _4056 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1952 = _1928 * _1928;
    float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
    float _1964 = exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0);
    float _1965 = 0.959999978542327880859375 - _718;
    float _1967 = 0.959999978542327880859375 - _719;
    float _1968 = 0.959999978542327880859375 - _720;
    float _1975 = 1.0 - _1928;
    float _1986 = (0.5 / (((_1943 * ((_1942 * _1975) + _1928)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _1975) + _1928) * _1942))) * _1942;
    float _4067 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
    uint _1999 = _1777 + 9u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _571) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1815].x + _648;
    float _2013 = cbLight._m0[_1815].y + _649;
    float _2014 = cbLight._m0[_1815].z + _650;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1815].xyz));
    float _4078 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _2026 = dot(vec3(_568, _569, _570), vec3(_2019, _2020, _2021));
    float _4089 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_2019, _2020, _2021));
    float _4100 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2034 = _2011 * _2011;
    float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
    float _2045 = exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0);
    float _2052 = 1.0 - _2011;
    float _2062 = (0.5 / (((_1943 * ((_2025 * _2052) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _2052) + _2011) * _2025))) * _2025;
    float _4111 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
    float _2074 = (((((_2045 * _1965) + _721) * cbLight._m0[_1999].x) * _2064) * _1800) + (((((_1964 * _1965) + _721) * cbLight._m0[_1914].x) * _1988) * _1811);
    float _2075 = (((((_2045 * _1967) + _723) * cbLight._m0[_1999].y) * _2064) * _1800) + (((((_1964 * _1967) + _723) * cbLight._m0[_1914].y) * _1988) * _1811);
    float _2076 = (((((_2045 * _1968) + _724) * cbLight._m0[_1999].z) * _2064) * _1800) + (((((_1964 * _1968) + _724) * cbLight._m0[_1914].z) * _1988) * _1811);
    float _2138;
    float _2140;
    float _2142;
    if (_1851)
    {
        _2138 = _2074;
        _2140 = _2075;
        _2142 = _2076;
    }
    else
    {
        uint _2144 = _1777 + 2u;
        uint _2148 = _1777 + 10u;
        float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _571) * 0.949999988079071044921875);
        float _2163 = _2162 * _2162;
        float _2164 = cbLight._m0[_2144].x + _648;
        float _2165 = cbLight._m0[_2144].y + _649;
        float _2166 = cbLight._m0[_2144].z + _650;
        float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
        float _2171 = _2170 * _2164;
        float _2172 = _2170 * _2165;
        float _2173 = _2170 * _2166;
        float _2174 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2144].xyz));
        float _4122 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2177 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2178 = dot(vec3(_568, _569, _570), vec3(_2171, _2172, _2173));
        float _4133 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2181 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2182 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2171, _2172, _2173));
        float _4144 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2186 = _2163 * _2163;
        float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
        float _2197 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
        float _2204 = 1.0 - _2163;
        float _2214 = (0.5 / (((_1943 * ((_2177 * _2204) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _2204) + _2163) * _2177))) * _2177;
        float _4155 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2216 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
        float _2217 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _2138 = (((((_2197 * _1965) + _721) * cbLight._m0[_2148].x) * _2216) * _2217) + _2074;
        _2140 = (((((_2197 * _1967) + _723) * cbLight._m0[_2148].y) * _2216) * _2217) + _2075;
        _2142 = (((((_2197 * _1968) + _724) * cbLight._m0[_2148].z) * _2216) * _2217) + _2076;
    }
    float _2252;
    float _2254;
    float _2256;
    if (_1869)
    {
        _2252 = _2138;
        _2254 = _2140;
        _2256 = _2142;
    }
    else
    {
        uint _2263 = _1777 + 3u;
        uint _2267 = _1777 + 11u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _571) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _648;
        float _2284 = cbLight._m0[_2263].y + _649;
        float _2285 = cbLight._m0[_2263].z + _650;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2263].xyz));
        float _4171 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2297 = dot(vec3(_568, _569, _570), vec3(_2290, _2291, _2292));
        float _4182 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4193 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
        float _2323 = 1.0 - _2282;
        float _2333 = (0.5 / (((_1943 * ((_2296 * _2323) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _2323) + _2282) * _2296))) * _2296;
        float _4204 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _2252 = (((((_2316 * _1965) + _721) * cbLight._m0[_2267].x) * _2335) * _2336) + _2138;
        _2254 = (((((_2316 * _1967) + _723) * cbLight._m0[_2267].y) * _2335) * _2336) + _2140;
        _2256 = (((((_2316 * _1968) + _724) * cbLight._m0[_2267].z) * _2335) * _2336) + _2142;
    }
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_1775.y == 0u)
    {
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2411;
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2411;
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2411;
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.x;
        uint _2438 = uint((float(_2426.y) * floor(float(uint(cbSceneParam._m0[85u].y * _657) / _2427))) + floor(float(uint(cbSceneParam._m0[85u].x * _656) / _2427)));
        float _2448 = (log2(_2414 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2449 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        uint _2452 = uint(isnan(14.0) ? _2449 : (isnan(_2449) ? 14.0 : min(_2449, 14.0)));
        uvec4 _2457 = texelFetch(g_lightClusterGridBuffer, int(((_2452 << 2u) + (_2438 << 6u)) >> 2u));
        uint _2458 = _2457.x;
        uint _2459 = _2426.z;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((((1u << ((_2459 >> 4u) & 15u)) + 4294967295u) & _2458) == 0u) || ((_2459 & 240u) == 0u))
        {
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
        }
        else
        {
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            uint _2710 = 0u;
            uint _2719;
            bool _2720;
            for (;;)
            {
                _2719 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2710 << 2u)) >> 2u)).x;
                _2720 = _2719 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2720)
                {
                    frontier_phi_61_pred = _2704;
                    frontier_phi_61_pred_1 = _2709;
                    frontier_phi_61_pred_2 = _2708;
                    frontier_phi_61_pred_3 = _2707;
                    frontier_phi_61_pred_4 = _2706;
                    frontier_phi_61_pred_5 = _2705;
                }
                else
                {
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    uint _2834;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2706;
                    _2831 = _2707;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2719;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    for (;;)
                    {
                        uint _2838 = uint(findLSB(_2834)) + (_2710 << 5u);
                        uint _2835 = (_2834 + 4294967295u) & _2834;
                        uint _2840 = _2838 * 48u;
                        vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 3u)).x));
                        uint _2860 = (_2838 * 48u) + 4u;
                        vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 3u)).x));
                        uint _2879 = (_2838 * 48u) + 8u;
                        vec3 _2890 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x));
                        float _2894 = _2854.x - _2412;
                        float _2895 = _2854.y - _2413;
                        float _2896 = _2854.z - _2414;
                        float _2897 = dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896));
                        float _2900 = inversesqrt(_2897);
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2904 = dot(vec3(_678, _681, _684), vec3(_2901, _2902, _2903));
                        float _2909 = 1.0 - (_2897 * _2854.w);
                        float _4230 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2910 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2911 = sqrt(_2897) * _2873.w;
                        float _2914 = 1.39999997615814208984375 / (_2911 + 1.39999997615814208984375);
                        float _2915 = _2914 * _2914;
                        float _2918 = ((1.0 - _2915) * _2904) + _2915;
                        float _2921 = _2911 * _2911;
                        float _2925 = ((isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))) * _2910) / ((_2921 * 0.699999988079071044921875) + 1.0);
                        float _2929 = (-0.0) - _2412;
                        float _2930 = (-0.0) - _2413;
                        float _2931 = (-0.0) - _2414;
                        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                        float _2936 = _2935 * _2929;
                        float _2937 = _2935 * _2930;
                        float _2938 = _2935 * _2931;
                        float _2946 = exp2(log2(1.0 / ((_2921 * 3.5) + 5.0)) * 0.25);
                        float _2947 = 1.0 - _753;
                        float _2954 = sqrt(1.0 - ((1.0 - (_2947 * _2947)) * (1.0 - (_2946 * _2946))));
                        float _2955 = _2954 * _2954;
                        float _2956 = _2955 * _2955;
                        float _2957 = _2936 + _2901;
                        float _2958 = _2937 + _2902;
                        float _2959 = _2938 + _2903;
                        float _2963 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
                        float _2967 = dot(vec3(_678, _681, _684), vec3(_2936, _2937, _2938));
                        float _4246 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2970 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2971 = dot(vec3(_678, _681, _684), vec3(_2963 * _2957, _2963 * _2958, _2963 * _2959));
                        float _4257 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2974 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _2978 = ((_2974 * _2974) * (_2956 + (-1.0))) + 1.0;
                        float _2979 = _2914 * _2955;
                        float _2980 = _2979 * _2979;
                        float _2983 = ((1.0 - _2980) * _2904) + _2980;
                        float _4268 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2984 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2985 = 1.0 - _2955;
                        float _2995 = (0.5 / (((_2984 * ((_2970 * _2985) + _2955)) + 9.9999999392252902907785028219223e-09) + (((_2984 * _2985) + _2955) * _2970))) * _2984;
                        float _4279 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _3005 = (((_2956 * 3.1415927410125732421875) * (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) / ((_2978 * _2978) * ((_2921 * 2.1991131305694580078125) + 3.141590118408203125))) * _2910;
                        _2763 = (_2925 * _2873.x) + _2831;
                        _2764 = (_2925 * _2873.y) + _2832;
                        _2765 = (_2925 * _2873.z) + _2833;
                        _2760 = (_3005 * _2890.x) + _2828;
                        _2761 = (_3005 * _2890.y) + _2829;
                        _2762 = (_3005 * _2890.z) + _2830;
                        if (_2835 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2763;
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2835;
                        }
                    }
                    frontier_phi_61_pred = _2760;
                    frontier_phi_61_pred_1 = _2765;
                    frontier_phi_61_pred_2 = _2764;
                    frontier_phi_61_pred_3 = _2763;
                    frontier_phi_61_pred_4 = _2762;
                    frontier_phi_61_pred_5 = _2761;
                }
                _2560 = frontier_phi_61_pred;
                _2570 = frontier_phi_61_pred_1;
                _2568 = frontier_phi_61_pred_2;
                _2566 = frontier_phi_61_pred_3;
                _2564 = frontier_phi_61_pred_4;
                _2562 = frontier_phi_61_pred_5;
                uint _2711 = _2710 + 1u;
                if (_2711 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2704 = _2560;
                    _2705 = _2562;
                    _2706 = _2564;
                    _2707 = _2566;
                    _2708 = _2568;
                    _2709 = _2570;
                    _2710 = _2711;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
        }
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.z;
        uint _2576 = (_2574 >> 8u) & 15u;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        if (((4294967295u << _2576) & _2458) == 0u)
        {
            _2672 = _2559;
            _2674 = _2561;
            _2676 = _2563;
            _2678 = _2565;
            _2680 = _2567;
            _2682 = _2569;
        }
        else
        {
            float _2697 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
            float _2698 = _2697 * _2412;
            float _2699 = _2697 * _2413;
            float _2700 = _2697 * _2414;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2576 < ((_2574 >> 12u) & 15u))
            {
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2811 = _2559;
                float _2812 = _2561;
                float _2813 = _2563;
                float _2814 = _2565;
                float _2815 = _2567;
                float _2816 = _2569;
                uint _2817 = _2576;
                uint _2826;
                bool _2827;
                for (;;)
                {
                    _2826 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2817 << 2u)) >> 2u)).x;
                    _2827 = _2826 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2827)
                    {
                        frontier_phi_67_pred = _2814;
                        frontier_phi_67_pred_1 = _2815;
                        frontier_phi_67_pred_2 = _2816;
                        frontier_phi_67_pred_3 = _2813;
                        frontier_phi_67_pred_4 = _2812;
                        frontier_phi_67_pred_5 = _2811;
                    }
                    else
                    {
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3023 = _2811;
                        float _3024 = _2812;
                        float _3025 = _2813;
                        float _3026 = _2814;
                        float _3027 = _2815;
                        float _3028 = _2816;
                        uint _3029 = _2826;
                        uint _3030;
                        vec4 _3055;
                        float _3056;
                        vec4 _3071;
                        vec3 _3083;
                        vec4 _3099;
                        vec4 _3114;
                        float _3160;
                        bool _3161;
                        for (;;)
                        {
                            uint _3040 = ((_2817 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3029));
                            _3030 = (_3029 + 4294967295u) & _3029;
                            uint _3042 = _3040 * 40u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3056 = _3055.w;
                            uint _3058 = (_3040 * 40u) + 4u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3073 = (_3040 * 40u) + 8u;
                            _3083 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x));
                            uint _3086 = (_3040 * 40u) + 16u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3101 = (_3040 * 40u) + 20u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3040 * 40u) + 24u;
                            vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3135 = (_3040 * 40u) + 28u;
                            vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            _3160 = fma(_2414, _3148.z, fma(_2413, _3148.y, _3148.x * _2412)) + _3148.w;
                            _3161 = !((fma(_2414, _3129.z, fma(_2413, _3129.y, _3129.x * _2412)) + _3129.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3161)
                            {
                                float _3188 = _3055.x - _2412;
                                float _3189 = _3055.y - _2413;
                                float _3190 = _3055.z - _2414;
                                float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                                float _3194 = inversesqrt(_3191);
                                float _3195 = _3194 * _3188;
                                float _3196 = _3194 * _3189;
                                float _3197 = _3194 * _3190;
                                float _3201 = 1.0 - (_3191 / (_3056 * _3056));
                                float _4290 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3206 = sqrt(_3191) * _3071.w;
                                float _3208 = 1.39999997615814208984375 / (_3206 + 1.39999997615814208984375);
                                float _3209 = _3208 * _3208;
                                float _3212 = ((1.0 - _3209) * dot(vec3(_3195, _3196, _3197), vec3(_678, _681, _684))) + _3209;
                                float _3215 = _3206 * _3206;
                                float _3219 = (fma(_2414, _3099.z, fma(_2413, _3099.y, _3099.x * _2412)) + _3099.w) / _3160;
                                float _3220 = (fma(_2414, _3114.z, fma(_2413, _3114.y, _3114.x * _2412)) + _3114.w) / _3160;
                                float _3224 = 1.0 - dot(vec2(_3219, _3220), vec2(_3219, _3220));
                                float _4306 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3226 = _3225 * (((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3202) / ((_3215 * 0.699999988079071044921875) + 1.0));
                                float _3238 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                                float _3239 = 1.0 - _753;
                                float _3246 = sqrt(1.0 - ((1.0 - (_3239 * _3239)) * (1.0 - (_3238 * _3238))));
                                float _3247 = _3246 * _3246;
                                float _3248 = _3247 * _3247;
                                float _3249 = _3195 - _2698;
                                float _3250 = _3196 - _2699;
                                float _3251 = _3197 - _2700;
                                float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                                float _3259 = dot(vec3(_678, _681, _684), vec3((-0.0) - _2698, (-0.0) - _2699, (-0.0) - _2700));
                                float _4317 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3262 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3263 = dot(vec3(_678, _681, _684), vec3(_3255 * _3249, _3255 * _3250, _3255 * _3251));
                                float _4328 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3270 = ((_3266 * _3266) * (_3248 + (-1.0))) + 1.0;
                                float _3271 = _3208 * _3247;
                                float _3272 = _3271 * _3271;
                                float _3278 = ((1.0 - _3272) * dot(vec3(_678, _681, _684), vec3(_3195, _3196, _3197))) + _3272;
                                float _4339 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3280 = 1.0 - _3247;
                                float _3290 = (0.5 / (((_3279 * ((_3262 * _3280) + _3247)) + 9.9999999392252902907785028219223e-09) + (((_3279 * _3280) + _3247) * _3262))) * _3279;
                                float _4350 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3300 = (_3225 * _3202) * (((_3248 * 3.1415927410125732421875) * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) / ((_3270 * _3270) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3300 * _3083.x;
                                frontier_phi_73_pred_1 = _3300 * _3083.y;
                                frontier_phi_73_pred_2 = _3226 * _3071.z;
                                frontier_phi_73_pred_3 = _3226 * _3071.y;
                                frontier_phi_73_pred_4 = _3226 * _3071.x;
                                frontier_phi_73_pred_5 = _3300 * _3083.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3304 = frontier_phi_73_pred;
                            _3305 = frontier_phi_73_pred_1;
                            _3309 = frontier_phi_73_pred_2;
                            _3308 = frontier_phi_73_pred_3;
                            _3307 = frontier_phi_73_pred_4;
                            _3306 = frontier_phi_73_pred_5;
                            _3013 = _3307 + _3026;
                            _3014 = _3308 + _3027;
                            _3015 = _3309 + _3028;
                            _3010 = _3304 + _3023;
                            _3011 = _3305 + _3024;
                            _3012 = _3306 + _3025;
                            if (_3030 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3030;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3013;
                        frontier_phi_67_pred_1 = _3014;
                        frontier_phi_67_pred_2 = _3015;
                        frontier_phi_67_pred_3 = _3012;
                        frontier_phi_67_pred_4 = _3011;
                        frontier_phi_67_pred_5 = _3010;
                    }
                    _2679 = frontier_phi_67_pred;
                    _2681 = frontier_phi_67_pred_1;
                    _2683 = frontier_phi_67_pred_2;
                    _2677 = frontier_phi_67_pred_3;
                    _2675 = frontier_phi_67_pred_4;
                    _2673 = frontier_phi_67_pred_5;
                    uint _2818 = _2817 + 1u;
                    if (_2818 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2811 = _2673;
                        _2812 = _2675;
                        _2813 = _2677;
                        _2814 = _2679;
                        _2815 = _2681;
                        _2816 = _2683;
                        _2817 = _2818;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2681;
                frontier_phi_55_56_ladder_1 = _2683;
                frontier_phi_55_56_ladder_2 = _2679;
                frontier_phi_55_56_ladder_3 = _2677;
                frontier_phi_55_56_ladder_4 = _2675;
                frontier_phi_55_56_ladder_5 = _2673;
            }
            else
            {
                frontier_phi_55_56_ladder = _2567;
                frontier_phi_55_56_ladder_1 = _2569;
                frontier_phi_55_56_ladder_2 = _2565;
                frontier_phi_55_56_ladder_3 = _2563;
                frontier_phi_55_56_ladder_4 = _2561;
                frontier_phi_55_56_ladder_5 = _2559;
            }
            _2672 = frontier_phi_55_56_ladder_5;
            _2674 = frontier_phi_55_56_ladder_4;
            _2676 = frontier_phi_55_56_ladder_3;
            _2678 = frontier_phi_55_56_ladder_2;
            _2680 = frontier_phi_55_56_ladder;
            _2682 = frontier_phi_55_56_ladder_1;
        }
        float _2687 = isnan(1.0) ? _737 : (isnan(_737) ? 1.0 : min(_737, 1.0));
        _2471 = (_2687 * _2678) + _1907;
        _2473 = (_2687 * _2680) + _1909;
        _2475 = (_2687 * _2682) + _1911;
        _2477 = ((_2672 * _721) * _2687) + _2252;
        _2479 = ((_2674 * _723) * _2687) + _2254;
        _2481 = ((_2676 * _724) * _2687) + _2256;
    }
    else
    {
        _2471 = _1907;
        _2473 = _1909;
        _2475 = _1911;
        _2477 = _2252;
        _2479 = _2254;
        _2481 = _2256;
    }
    float _4366 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4377 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4388 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    uint _2501 = _237 + 6u;
    float _2509 = _656 / cbSceneParam._m0[86u].x;
    float _2510 = _657 / cbSceneParam._m0[86u].y;
    vec4 _2524 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, (log2((isnan(cbSceneParam._m0[77u].w) ? _590 : (isnan(_590) ? cbSceneParam._m0[77u].w : min(_590, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2526 = _2524.x;
    float _2527 = _2524.y;
    float _2528 = _2524.z;
    float _2529 = _2524.w;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    if (_590 > cbSceneParam._m0[78u].w)
    {
        float _2584 = isnan(_590) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _590 : min(cbSceneParam._m0[80u].w, _590));
        float _2585 = _2584 / _590;
        float _2596 = _2585 * _641;
        float _2597 = _642 * _2585;
        float _2598 = (-0.0) - _2597;
        float _2600 = _2585 * _643;
        float _2602 = (cbSceneParam._m0[77u].w * _2598) / _2584;
        float _2603 = _2602 + cbSceneParam._m0[79u].w;
        float _2604 = cbSceneParam._m0[79u].w - _2597;
        float _2610 = sqrt(((_2596 * _2596) + (_2597 * _2597)) + (_2600 * _2600));
        float _2613 = (1.0 - (cbSceneParam._m0[77u].w / _2584)) * _2610;
        float _2618 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2620 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2773;
        if (abs((_2598 - _2602) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2773 = ((((_2603 > 0.0) ? exp2(_2618 * _2603) : (2.0 - exp2(_2620 * _2603))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2613;
        }
        else
        {
            float _2733 = 1.0 / cbSceneParam._m0[80u].x;
            float _2734 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : max(_2603, _2604));
            float _2735 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : min(_2603, _2604));
            float _2744 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : min(_2734, 0.0));
            float _2745 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : min(_2735, 0.0));
            _2773 = ((abs(_2610 / _2598) * cbSceneParam._m0[80u].y) * ((((_2744 - _2745) * 2.0) - ((exp2(_2618 * (isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0)))) - exp2(_2618 * (isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))))) * _2733)) - ((exp2(_2620 * _2744) - exp2(_2620 * _2745)) * _2733))) + (_2613 * cbSceneParam._m0[80u].z);
        }
        vec4 _2775 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, 1.0), 0.0);
        float _2784 = exp2((_2773 * (-1.44269502162933349609375)) * (1.0 - _2775.w));
        float _2785 = log2(_2784);
        float _2801 = log2(_2529);
        _2622 = (exp2(_2801 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].x)) * _2775.x) / cbSceneParam._m0[78u].x)) + _2526;
        _2624 = (exp2(_2801 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].y)) * _2775.y) / cbSceneParam._m0[78u].y)) + _2527;
        _2626 = (exp2(_2801 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].z)) * _2775.z) / cbSceneParam._m0[78u].z)) + _2528;
        _2628 = _2784 * _2529;
    }
    else
    {
        _2622 = _2526;
        _2624 = _2527;
        _2626 = _2528;
        _2628 = _2529;
    }
    float _2640 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2641 = _2640 == 3.0;
    float _2642 = log2(_2628);
    float _2649 = exp2(_2642 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2471 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _737))) + ((_2477 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1543)) * cbPerFrame._m0[3u].x));
    float _2650 = exp2(_2642 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2473 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _737))) + ((_2479 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1543)) * cbPerFrame._m0[3u].x));
    float _2651 = exp2(_2642 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2475 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _737))) + ((_2481 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1543)) * cbPerFrame._m0[3u].x));
    float _2660 = (_2640 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2660 * (_2641 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2622)));
    SV_Target.y = _2660 * (_2641 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2624)));
    SV_Target.z = _2660 * (_2641 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2626)));
    SV_Target.w = cbInstanceData._m0[_2501].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2501].w;
}


