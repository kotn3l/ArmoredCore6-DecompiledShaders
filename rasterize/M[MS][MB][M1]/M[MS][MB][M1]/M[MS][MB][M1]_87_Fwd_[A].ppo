#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1310;
float _3691;
float _3692;
float _3693;
float _3694;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3703 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3714 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3725 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].y) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3736 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _428 = (_421 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _429 = (_421 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _430 = (_421 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _434 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _428;
    float _437 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _429;
    float _440 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _430;
    float _447 = ((_428 - _434) * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) + _434;
    float _448 = ((_429 - _437) * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) + _437;
    float _449 = ((_430 - _440) * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) + _440;
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _421) + _513;
    float _525 = ((((_492.x - _511) * _421) + _511) * 2.0) + (-1.0);
    float _526 = ((((_492.y - _512) * _421) + _512) * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3747 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))));
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _575 = _573.x;
    float _576 = 1.0 - _575;
    float _589 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_575 - _576) * cbMtdParam._m0[24u].z) + _576) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3758 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _597 = (_590 * (cbMtdParam._m0[17u].x - _447)) + _447;
    float _598 = (_590 * (cbMtdParam._m0[17u].y - _448)) + _448;
    float _599 = (_590 * (cbMtdParam._m0[17u].z - _449)) + _449;
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _625 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _627 = _625.x;
    float _645 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _627) * _421) + _627;
    float _649 = ((_611.x - _645) * cbMtdParam._m0[19u].z) + _645;
    float _651 = _649 - (_649 * _590);
    float _656 = (((_467.z - _522) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _522;
    float _660 = ((_548.z - _656) * cbMtdParam._m0[19u].w) + _656;
    vec4 _673 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _680 = (_673.x * 2.0) + (-1.0);
    float _681 = (_673.y * 2.0) + (-1.0);
    float _682 = dot(vec2(_680, _681), vec2(_680, _681));
    float _3769 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _690 = (_590 * (_673.z - _660)) + _660;
    float _699 = (_525 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_467.x * 2.0) + (-1.0)))) + (((_548.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _700 = (_526 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_467.y * 2.0) + (-1.0)))) + (((_548.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _712 = (((_680 - _699) + (cbMtdParam._m0[21u].x * _699)) * _590) + _699;
    float _713 = (((_681 - _700) + (cbMtdParam._m0[21u].x * _700)) * _590) + _700;
    float _714 = (_590 * (sqrt(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) - _532)) + _532;
    float _716 = cbMtdParam._m0[22u].x + _548.w;
    float _719 = fma(_714, _236 * NORMAL.x, fma(_713, _243 * TANGENT.x, (_229 * _221) * _712));
    float _722 = fma(_714, _236 * NORMAL.y, fma(_713, _243 * TANGENT.y, (_229 * _222) * _712));
    float _725 = fma(_714, _236 * NORMAL.z, fma(_713, _243 * TANGENT.z, (_229 * _223) * _712));
    float _729 = inversesqrt(dot(vec3(_719, _722, _725), vec3(_719, _722, _725)));
    float _730 = _729 * _719;
    float _731 = _729 * _722;
    float _732 = _729 * _725;
    float _3780 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _733 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _3802 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3813 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3824 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3835 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _738 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _752 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _803 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _793);
    float _804 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _793);
    float _805 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _793);
    float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
    float _810 = _803 * _809;
    float _811 = _804 * _809;
    float _812 = _805 * _809;
    vec4 _817 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _819 = _817.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _991 = sqrt(((_803 * _803) + (_804 * _804)) + (_805 * _805));
        float _997 = (cbMatDynParam._m0[5u].x * _991) + cbMatDynParam._m0[5u].y;
        float _3846 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1002 = (cbMatDynParam._m0[5u].z * _991) + cbMatDynParam._m0[5u].w;
        float _3857 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) - _998)) + _998) < ((_819 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _830 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _831 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _849 = fma(_732, cbSceneParam._m0[5u].z, fma(_731, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _730));
    float _852 = fma(_732, cbSceneParam._m0[6u].z, fma(_731, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _730));
    float _855 = fma(_732, cbSceneParam._m0[7u].z, fma(_731, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _730));
    uint _868 = _270 + 9u;
    uint _869 = _868 + uint(cbMatDynParam._m0[0u].w);
    float _875 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_869].x;
    float _876 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_869].y;
    float _877 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * cbInstanceData._m0[_869].z;
    float _3868 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _881 = 1.0 - _738;
    float _882 = _878 * _881;
    float _883 = _879 * _881;
    float _884 = _880 * _881;
    float _889 = (_878 + (-0.039999999105930328369140625)) * _738;
    float _890 = (_879 + (-0.039999999105930328369140625)) * _738;
    float _891 = (_880 + (-0.039999999105930328369140625)) * _738;
    float _892 = _889 + 0.039999999105930328369140625;
    float _894 = _890 + 0.039999999105930328369140625;
    float _895 = _891 + 0.039999999105930328369140625;
    vec4 _904 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _830, cbSceneParam._m0[86u].y * _831));
    float _908 = ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * TEXCOORD_5.w) * _904.x;
    float _909 = dot(vec3(_730, _731, _732), vec3(_810, _811, _812));
    float _912 = _909 * 2.0;
    float _916 = (_912 * _730) - _810;
    float _917 = (_912 * _731) - _811;
    float _918 = (_912 * _732) - _812;
    float _922 = abs(dot(vec3(_810, _811, _812), vec3(_730, _731, _732)));
    float _3901 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _924 = sqrt(_733);
    float _937 = exp2((_924 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_924 * 3.0));
    float _943 = (1.0 - _937) * ((_924 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _944 = _937 * _924;
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1309;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1034 = fma(_980, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _972));
        float _1038 = fma(_980, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _972));
        float _1042 = fma(_980, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _972));
        float _1067 = _972 + _730;
        float _1068 = _976 + _731;
        float _1069 = _980 + _732;
        float _1079 = fma(_1069, cbModelParam._m0[26u].z, fma(_1068, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1067)) - _1034;
        float _1080 = fma(_1069, cbModelParam._m0[27u].z, fma(_1068, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1067)) - _1038;
        float _1081 = fma(_1069, cbModelParam._m0[28u].z, fma(_1068, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1067)) - _1042;
        float _1085 = inversesqrt(dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081)));
        float _1098 = ((_1085 * _1079) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1034 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1085 * _1080) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1038 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1085 * _1081) / cbModelParam._m0[34u].z) + ((((((_1042 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        float _1137 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1103.x + (-0.5));
        float _1139 = _1137 * (_1103.y + (-0.5));
        float _1140 = _1137 * (_1103.z + (-0.5));
        float _1147 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1110.x + (-0.5));
        float _1149 = _1147 * (_1110.y + (-0.5));
        float _1150 = _1147 * (_1110.z + (-0.5));
        float _1157 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1117.x + (-0.5));
        float _1159 = _1157 * (_1117.y + (-0.5));
        float _1160 = _1157 * (_1117.z + (-0.5));
        float _1167 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1124.x + (-0.5));
        float _1169 = _1167 * (_1124.y + (-0.5));
        float _1170 = _1167 * (_1124.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1191 = (dot(vec3(_730, _731, _732), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1201 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3949 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1203 + 1.0))) + _1208) * _1171;
        float _1218 = _1139 * 0.5;
        float _1219 = _1149 * 0.5;
        float _1220 = _1159 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_730, _731, _732), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3982 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1245 + 1.0))) + _1250) * _1172;
        float _1260 = _1140 * 0.5;
        float _1261 = _1150 * 0.5;
        float _1262 = _1160 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_730, _731, _732), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4015 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1287 + 1.0))) + _1292) * _1173;
        _1309 = _1140;
        _1311 = _1139;
        _1312 = _1138;
        _1313 = _1150;
        _1314 = _1149;
        _1315 = _1148;
        _1316 = _1160;
        _1317 = _1159;
        _1318 = _1158;
        _1319 = _1173;
        _1320 = _1172;
        _1321 = _1171;
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1323 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1324 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
    }
    else
    {
        _1309 = _1310;
        _1311 = _1310;
        _1312 = _1310;
        _1313 = _1310;
        _1314 = _1310;
        _1315 = _1310;
        _1316 = _1310;
        _1317 = _1310;
        _1318 = _1310;
        _1319 = _1310;
        _1320 = _1310;
        _1321 = _1310;
        _1322 = 0.0;
        _1323 = 0.0;
        _1324 = 0.0;
    }
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1352 = fma(_980, cbModelParam._m0[30u].z, fma(_976, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _972));
        float _1356 = fma(_980, cbModelParam._m0[31u].z, fma(_976, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _972));
        float _1360 = fma(_980, cbModelParam._m0[32u].z, fma(_976, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _972));
        float _1383 = _972 + _730;
        float _1384 = _976 + _731;
        float _1385 = _980 + _732;
        float _1395 = fma(_1385, cbModelParam._m0[30u].z, fma(_1384, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1383)) - _1352;
        float _1396 = fma(_1385, cbModelParam._m0[31u].z, fma(_1384, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1383)) - _1356;
        float _1397 = fma(_1385, cbModelParam._m0[32u].z, fma(_1384, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1383)) - _1360;
        float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
        float _1414 = ((_1401 * _1395) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1352 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1401 * _1396) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1356 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1401 * _1397) / cbModelParam._m0[35u].z) + ((((((_1360 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        float _1451 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1418.x + (-0.5));
        float _1453 = _1451 * (_1418.y + (-0.5));
        float _1454 = _1451 * (_1418.z + (-0.5));
        float _1461 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1425.x + (-0.5));
        float _1463 = _1461 * (_1425.y + (-0.5));
        float _1464 = _1461 * (_1425.z + (-0.5));
        float _1471 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1432.x + (-0.5));
        float _1473 = _1471 * (_1432.y + (-0.5));
        float _1474 = _1471 * (_1432.z + (-0.5));
        float _1481 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1439.x + (-0.5));
        float _1483 = _1481 * (_1439.y + (-0.5));
        float _1484 = _1481 * (_1439.z + (-0.5));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = _1452 * 0.5;
        float _1489 = _1462 * 0.5;
        float _1490 = _1472 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_730, _731, _732), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4078 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1515 + 1.0))) + _1520) * _1485;
        float _1530 = _1453 * 0.5;
        float _1531 = _1463 * 0.5;
        float _1532 = _1473 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_730, _731, _732), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4111 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1557 + 1.0))) + _1562) * _1486;
        float _1572 = _1454 * 0.5;
        float _1573 = _1464 * 0.5;
        float _1574 = _1474 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_730, _731, _732), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4144 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1599 + 1.0))) + _1604) * _1487;
        _1621 = _1454;
        _1622 = _1453;
        _1623 = _1452;
        _1624 = _1464;
        _1625 = _1463;
        _1626 = _1462;
        _1627 = _1474;
        _1628 = _1473;
        _1629 = _1472;
        _1630 = _1487;
        _1631 = _1486;
        _1632 = _1485;
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
    }
    else
    {
        _1621 = _1310;
        _1622 = _1310;
        _1623 = _1310;
        _1624 = _1310;
        _1625 = _1310;
        _1626 = _1310;
        _1627 = _1310;
        _1628 = _1310;
        _1629 = _1310;
        _1630 = _1310;
        _1631 = _1310;
        _1632 = _1310;
        _1633 = 0.0;
        _1634 = 0.0;
        _1635 = 0.0;
    }
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1322)) + _1322;
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1323)) + _1323;
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1324)) + _1324;
    float _1668 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1671 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1674 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1645));
    float _1689 = _916 * 0.5;
    float _1690 = _917 * 0.5;
    float _1691 = _918 * 0.5;
    float _1692 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1695 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1698 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1732;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1705 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1309, _1313, _1316, _1319));
        float _1709 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1311, _1314, _1317, _1320));
        float _1713 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1312, _1315, _1318, _1321));
        float _1720 = dot(vec4(cbModelParam._m0[39u]), vec4(_1689, _1690, _1691, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1743;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1734 = dot(vec4(cbModelParam._m0[40u]), vec4(_1689, _1690, _1691, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1747 = (_1743 * cbModelParam._m0[1u].x) + (_1732 * (1.0 - cbModelParam._m0[1u].x));
    float _1757 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _733);
    float _1758 = isnan(_1757) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1757 : min(cbModelParam._m0[25u].z, _1757));
    float _1839;
    float _1841;
    float _1843;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1806 = fma(_980, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972)) + cbModelParam._m0[13u].w;
        float _1810 = fma(_980, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972)) + cbModelParam._m0[14u].w;
        float _1814 = fma(_980, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972)) + cbModelParam._m0[15u].w;
        float _1817 = fma(_918, cbModelParam._m0[13u].z, fma(_917, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916));
        float _1820 = fma(_918, cbModelParam._m0[14u].z, fma(_917, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916));
        float _1823 = fma(_918, cbModelParam._m0[15u].z, fma(_917, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916));
        float _1851;
        if (_1817 > 0.0)
        {
            _1851 = abs((1.0 - _1806) / _1817);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1806 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1851 = frontier_phi_17_15_ladder;
        }
        float _2054;
        if (_1820 > 0.0)
        {
            _2054 = abs((1.0 - _1810) / _1820);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1810 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2054 = frontier_phi_26_22_ladder;
        }
        float _2308;
        if (_1823 > 0.0)
        {
            _2308 = abs((1.0 - _1814) / _1823);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1814 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2308 = frontier_phi_38_33_ladder;
        }
        float _2310 = isnan(_2054) ? _1851 : (isnan(_1851) ? _2054 : min(_1851, _2054));
        float _2311 = isnan(_2308) ? _2310 : (isnan(_2310) ? _2308 : min(_2310, _2308));
        float _2315 = (_2311 * _1817) + _1806;
        float _2316 = (_2311 * _1820) + _1810;
        float _2317 = (_2311 * _1823) + _1814;
        float _2318 = _2311 * 9.9999997473787516355514526367188e-05;
        float _2320 = (-1.0) - _2318;
        float _2322 = _2318 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2317 > _2322) || ((_2317 < _2320) || ((_2316 > _2322) || ((_2316 < _2320) || ((_2315 < _2320) || (_2315 > _2322))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2317, cbModelParam._m0[9u].z, fma(_2316, cbModelParam._m0[9u].y, _2315 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2317, cbModelParam._m0[10u].z, fma(_2316, cbModelParam._m0[10u].y, _2315 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2317, cbModelParam._m0[11u].z, fma(_2316, cbModelParam._m0[11u].y, _2315 * cbModelParam._m0[11u].x))), _1758);
            frontier_phi_16_38_ladder = _2445.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2445.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2445.x * cbModelParam._m0[1u].y;
        }
        _1839 = frontier_phi_16_38_ladder_2;
        _1841 = frontier_phi_16_38_ladder_1;
        _1843 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_916, _917, _918), _1758);
        _1839 = _1827.x * cbModelParam._m0[1u].y;
        _1841 = _1827.y * cbModelParam._m0[1u].y;
        _1843 = _1827.z * cbModelParam._m0[1u].y;
    }
    float _1847 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _733);
    float _1848 = isnan(_1847) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1847 : min(cbModelParam._m0[25u].w, _1847));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1902 = fma(_980, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972)) + cbModelParam._m0[21u].w;
        float _1906 = fma(_980, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972)) + cbModelParam._m0[22u].w;
        float _1910 = fma(_980, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972)) + cbModelParam._m0[23u].w;
        float _1913 = fma(_918, cbModelParam._m0[21u].z, fma(_917, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916));
        float _1916 = fma(_918, cbModelParam._m0[22u].z, fma(_917, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916));
        float _1919 = fma(_918, cbModelParam._m0[23u].z, fma(_917, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916));
        float _2059;
        if (_1913 > 0.0)
        {
            _2059 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2059 = frontier_phi_28_24_ladder;
        }
        float _2335;
        if (_1916 > 0.0)
        {
            _2335 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2335 = frontier_phi_40_35_ladder;
        }
        float _2548;
        if (_1919 > 0.0)
        {
            _2548 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2548 = frontier_phi_49_46_ladder;
        }
        float _2550 = isnan(_2335) ? _2059 : (isnan(_2059) ? _2335 : min(_2059, _2335));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _1913) + _1902;
        float _2556 = (_2551 * _1916) + _1906;
        float _2557 = (_2551 * _1919) + _1910;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2558;
        float _2561 = _2558 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2557 > _2561) || ((_2557 < _2559) || ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 < _2559) || (_2555 > _2561))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2557, cbModelParam._m0[17u].z, fma(_2556, cbModelParam._m0[17u].y, _2555 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2557, cbModelParam._m0[18u].z, fma(_2556, cbModelParam._m0[18u].y, _2555 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2557, cbModelParam._m0[19u].z, fma(_2556, cbModelParam._m0[19u].y, _2555 * cbModelParam._m0[19u].x))), _1848);
            frontier_phi_25_49_ladder = _2756.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2756.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2756.x * cbModelParam._m0[1u].z;
        }
        _1938 = frontier_phi_25_49_ladder_2;
        _1940 = frontier_phi_25_49_ladder_1;
        _1942 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_916, _917, _918), _1848);
        _1938 = _1922.x * cbModelParam._m0[1u].z;
        _1940 = _1922.y * cbModelParam._m0[1u].z;
        _1942 = _1922.z * cbModelParam._m0[1u].z;
    }
    float _1955 = (((_943 * _892) + _944) * _908) * ((cbModelParam._m0[1u].w * (_1938 - _1839)) + _1839);
    float _1957 = (((_943 * _894) + _944) * _908) * ((cbModelParam._m0[1u].w * (_1940 - _1841)) + _1841);
    float _1959 = (((_943 * _895) + _944) * _908) * ((cbModelParam._m0[1u].w * (_1942 - _1843)) + _1843);
    float _1962 = fma(_1959, cbSceneParam._m0[89u].z, fma(_1957, cbSceneParam._m0[89u].y, _1955 * cbSceneParam._m0[89u].x));
    float _1965 = fma(_1959, cbSceneParam._m0[90u].z, fma(_1957, cbSceneParam._m0[90u].y, _1955 * cbSceneParam._m0[90u].x));
    float _1968 = fma(_1959, cbSceneParam._m0[91u].z, fma(_1957, cbSceneParam._m0[91u].y, _1955 * cbSceneParam._m0[91u].x));
    uvec4 _1978 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1980 = _1978.x * 14u;
    uint _1981 = _1980 + 13u;
    float _1988 = _908 + (-1.0);
    float _1993 = (cbLight._m0[_1981].x * _1988) + 1.0;
    float _1994 = (cbLight._m0[_1981].y * _1988) + 1.0;
    float _1995 = (cbLight._m0[_1981].z * _1988) + 1.0;
    float _1996 = (cbLight._m0[_1981].w * _1988) + 1.0;
    uint _1997 = _1980 + 5u;
    float _2003 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
    uint _2007 = _1980 + 4u;
    float _2013 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
    uint _2017 = _1980 | 1u;
    float _2028 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_730, _731, _732));
    float _2031 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_730, _731, _732));
    float _4280 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _4291 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2036 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.3183098733425140380859375;
    float _2038 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * 0.3183098733425140380859375;
    float _2045 = ((cbLight._m0[_1997].x * _2003) * _2038) + ((cbLight._m0[_2007].x * _2013) * _2036);
    float _2046 = ((_2003 * cbLight._m0[_1997].y) * _2038) + ((_2013 * cbLight._m0[_2007].y) * _2036);
    float _2047 = ((_2003 * cbLight._m0[_1997].z) * _2038) + ((_2013 * cbLight._m0[_2007].z) * _2036);
    uvec4 _2051 = floatBitsToUint(cbLight._m0[_1980 + 12u]);
    bool _2053 = _2051.x == 0u;
    float _2064;
    float _2066;
    float _2068;
    if (_2053)
    {
        _2064 = _2045;
        _2066 = _2046;
        _2068 = _2047;
    }
    else
    {
        uint _2072 = _1980 + 6u;
        float _2088 = (dot(vec3(cbLight._m0[_1980 + 2u].xyz), vec3(_730, _731, _732)) * 0.5) + 0.5;
        float _2089 = _2088 * _2088;
        float _4302 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2090 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2091 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2064 = (((cbLight._m0[_2072].x * 0.3183098733425140380859375) * _2090) * _2091) + _2045;
        _2066 = (((cbLight._m0[_2072].y * 0.3183098733425140380859375) * _2090) * _2091) + _2046;
        _2068 = (((cbLight._m0[_2072].z * 0.3183098733425140380859375) * _2090) * _2091) + _2047;
    }
    bool _2071 = _2051.y == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2071)
    {
        _2109 = _2064;
        _2111 = _2066;
        _2113 = _2068;
    }
    else
    {
        uint _2279 = _1980 + 7u;
        float _2295 = (dot(vec3(cbLight._m0[_1980 + 3u].xyz), vec3(_730, _731, _732)) * 0.5) + 0.5;
        float _2296 = _2295 * _2295;
        float _4318 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2297 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2298 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2109 = (((cbLight._m0[_2279].x * 0.3183098733425140380859375) * _2297) * _2298) + _2064;
        _2111 = (((cbLight._m0[_2279].y * 0.3183098733425140380859375) * _2297) * _2298) + _2066;
        _2113 = (((cbLight._m0[_2279].z * 0.3183098733425140380859375) * _2297) * _2298) + _2068;
    }
    uint _2116 = _1980 + 8u;
    float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1980].w)) * _733) * 0.949999988079071044921875);
    float _2130 = _2129 * _2129;
    float _2131 = cbLight._m0[_1980].x + _810;
    float _2132 = cbLight._m0[_1980].y + _811;
    float _2133 = cbLight._m0[_1980].z + _812;
    float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
    float _2138 = _2137 * _2131;
    float _2139 = _2137 * _2132;
    float _2140 = _2137 * _2133;
    float _2141 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_1980].xyz));
    float _4334 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _4345 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _2145 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2146 = dot(vec3(_730, _731, _732), vec3(_2138, _2139, _2140));
    float _4356 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2150 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_2138, _2139, _2140));
    float _4367 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2154 = _2130 * _2130;
    float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
    float _2166 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
    float _2167 = 0.959999978542327880859375 - _889;
    float _2169 = 0.959999978542327880859375 - _890;
    float _2170 = 0.959999978542327880859375 - _891;
    float _2177 = 1.0 - _2130;
    float _2188 = (0.5 / (((_2145 * ((_2144 * _2177) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2177) + _2130) * _2144))) * _2144;
    float _4378 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2190 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
    uint _2201 = _1980 + 9u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _733) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_2017].x + _810;
    float _2215 = cbLight._m0[_2017].y + _811;
    float _2216 = cbLight._m0[_2017].z + _812;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_2017].xyz));
    float _4389 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2228 = dot(vec3(_730, _731, _732), vec3(_2221, _2222, _2223));
    float _4400 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2232 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2221, _2222, _2223));
    float _4411 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2236 = _2213 * _2213;
    float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
    float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
    float _2254 = 1.0 - _2213;
    float _2264 = (0.5 / (((_2145 * ((_2227 * _2254) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2254) + _2213) * _2227))) * _2227;
    float _4422 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2266 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
    float _2276 = (((((_2247 * _2167) + _892) * cbLight._m0[_2201].x) * _2266) * _2003) + (((((_2166 * _2167) + _892) * cbLight._m0[_2116].x) * _2190) * _2013);
    float _2277 = (((((_2247 * _2169) + _894) * cbLight._m0[_2201].y) * _2266) * _2003) + (((((_2166 * _2169) + _894) * cbLight._m0[_2116].y) * _2190) * _2013);
    float _2278 = (((((_2247 * _2170) + _895) * cbLight._m0[_2201].z) * _2266) * _2003) + (((((_2166 * _2170) + _895) * cbLight._m0[_2116].z) * _2190) * _2013);
    float _2340;
    float _2342;
    float _2344;
    if (_2053)
    {
        _2340 = _2276;
        _2342 = _2277;
        _2344 = _2278;
    }
    else
    {
        uint _2346 = _1980 + 2u;
        uint _2350 = _1980 + 10u;
        float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _733) * 0.949999988079071044921875);
        float _2365 = _2364 * _2364;
        float _2366 = cbLight._m0[_2346].x + _810;
        float _2367 = cbLight._m0[_2346].y + _811;
        float _2368 = cbLight._m0[_2346].z + _812;
        float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
        float _2373 = _2372 * _2366;
        float _2374 = _2372 * _2367;
        float _2375 = _2372 * _2368;
        float _2376 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_2346].xyz));
        float _4433 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2380 = dot(vec3(_730, _731, _732), vec3(_2373, _2374, _2375));
        float _4444 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2384 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2373, _2374, _2375));
        float _4455 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2388 = _2365 * _2365;
        float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
        float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
        float _2406 = 1.0 - _2365;
        float _2416 = (0.5 / (((_2145 * ((_2379 * _2406) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2406) + _2365) * _2379))) * _2379;
        float _4466 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2418 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
        float _2419 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2340 = (((((_2399 * _2167) + _892) * cbLight._m0[_2350].x) * _2418) * _2419) + _2276;
        _2342 = (((((_2399 * _2169) + _894) * cbLight._m0[_2350].y) * _2418) * _2419) + _2277;
        _2344 = (((((_2399 * _2170) + _895) * cbLight._m0[_2350].z) * _2418) * _2419) + _2278;
    }
    float _2454;
    float _2456;
    float _2458;
    if (_2071)
    {
        _2454 = _2340;
        _2456 = _2342;
        _2458 = _2344;
    }
    else
    {
        uint _2465 = _1980 + 3u;
        uint _2469 = _1980 + 11u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _733) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _810;
        float _2486 = cbLight._m0[_2465].y + _811;
        float _2487 = cbLight._m0[_2465].z + _812;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_2465].xyz));
        float _4482 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2499 = dot(vec3(_730, _731, _732), vec3(_2492, _2493, _2494));
        float _4493 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4504 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0);
        float _2525 = 1.0 - _2484;
        float _2535 = (0.5 / (((_2145 * ((_2498 * _2525) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2525) + _2484) * _2498))) * _2498;
        float _4515 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2454 = (((((_2518 * _2167) + _892) * cbLight._m0[_2469].x) * _2537) * _2538) + _2340;
        _2456 = (((((_2518 * _2169) + _894) * cbLight._m0[_2469].y) * _2537) * _2538) + _2342;
        _2458 = (((((_2518 * _2170) + _895) * cbLight._m0[_2469].z) * _2537) * _2538) + _2344;
    }
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    if (_1978.y == 0u)
    {
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2613;
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2613;
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2613;
        uvec4 _2628 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2629 = _2628.x;
        uint _2640 = uint((float(_2628.y) * floor(float(uint(cbSceneParam._m0[85u].y * _831) / _2629))) + floor(float(uint(cbSceneParam._m0[85u].x * _830) / _2629)));
        float _2650 = (log2(_2616 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2651 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        uint _2654 = uint(isnan(14.0) ? _2651 : (isnan(_2651) ? 14.0 : min(_2651, 14.0)));
        uvec4 _2659 = texelFetch(g_lightClusterGridBuffer, int(((_2654 << 2u) + (_2640 << 6u)) >> 2u));
        uint _2660 = _2659.x;
        uint _2661 = _2628.z;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        if (((((1u << ((_2661 >> 4u) & 15u)) + 4294967295u) & _2660) == 0u) || ((_2661 & 240u) == 0u))
        {
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
        }
        else
        {
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            uint _2920 = 0u;
            uint _2929;
            bool _2930;
            for (;;)
            {
                _2929 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_2920 << 2u)) >> 2u)).x;
                _2930 = _2929 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2930)
                {
                    frontier_phi_66_pred = _2914;
                    frontier_phi_66_pred_1 = _2919;
                    frontier_phi_66_pred_2 = _2918;
                    frontier_phi_66_pred_3 = _2917;
                    frontier_phi_66_pred_4 = _2916;
                    frontier_phi_66_pred_5 = _2915;
                }
                else
                {
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    uint _3065;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2919;
                    _3065 = _2929;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    for (;;)
                    {
                        uint _3069 = uint(findLSB(_3065)) + (_2920 << 5u);
                        uint _3066 = (_3065 + 4294967295u) & _3065;
                        uint _3071 = _3069 * 48u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3091 = (_3069 * 48u) + 4u;
                        vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 3u)).x));
                        uint _3110 = (_3069 * 48u) + 8u;
                        vec3 _3121 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x));
                        float _3125 = _3085.x - _2614;
                        float _3126 = _3085.y - _2615;
                        float _3127 = _3085.z - _2616;
                        float _3128 = dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127));
                        float _3131 = inversesqrt(_3128);
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3135 = dot(vec3(_849, _852, _855), vec3(_3132, _3133, _3134));
                        float _3140 = 1.0 - (_3128 * _3085.w);
                        float _4541 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3141 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3142 = sqrt(_3128) * _3104.w;
                        float _3145 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3135) + _3146;
                        float _3152 = _3142 * _3142;
                        float _3156 = ((isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))) * _3141) / ((_3152 * 0.699999988079071044921875) + 1.0);
                        float _3160 = (-0.0) - _2614;
                        float _3161 = (-0.0) - _2615;
                        float _3162 = (-0.0) - _2616;
                        float _3166 = inversesqrt(dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162)));
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3177 = exp2(log2(1.0 / ((_3152 * 3.5) + 5.0)) * 0.25);
                        float _3178 = 1.0 - _924;
                        float _3185 = sqrt(1.0 - ((1.0 - (_3178 * _3178)) * (1.0 - (_3177 * _3177))));
                        float _3186 = _3185 * _3185;
                        float _3187 = _3186 * _3186;
                        float _3188 = _3167 + _3132;
                        float _3189 = _3168 + _3133;
                        float _3190 = _3169 + _3134;
                        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                        float _3198 = dot(vec3(_849, _852, _855), vec3(_3167, _3168, _3169));
                        float _4557 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3202 = dot(vec3(_849, _852, _855), vec3(_3194 * _3188, _3194 * _3189, _3194 * _3190));
                        float _4568 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3205 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3209 = ((_3205 * _3205) * (_3187 + (-1.0))) + 1.0;
                        float _3210 = _3145 * _3186;
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3135) + _3211;
                        float _4579 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3215 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3216 = 1.0 - _3186;
                        float _3226 = (0.5 / (((_3215 * ((_3201 * _3216) + _3186)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3186) * _3201))) * _3215;
                        float _4590 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3237 = (((_3187 * 3.1415927410125732421875) * (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) / ((_3209 * _3209) * ((_3152 * 2.1991131305694580078125) + 3.141590118408203125))) * _3141;
                        _2989 = (_3156 * _3104.x) + _3062;
                        _2990 = (_3156 * _3104.y) + _3063;
                        _2991 = (_3156 * _3104.z) + _3064;
                        _2986 = (_3237 * _3121.x) + _3059;
                        _2987 = (_3237 * _3121.y) + _3060;
                        _2988 = (_3237 * _3121.z) + _3061;
                        if (_3066 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _2991;
                            _3065 = _3066;
                        }
                    }
                    frontier_phi_66_pred = _2986;
                    frontier_phi_66_pred_1 = _2991;
                    frontier_phi_66_pred_2 = _2990;
                    frontier_phi_66_pred_3 = _2989;
                    frontier_phi_66_pred_4 = _2988;
                    frontier_phi_66_pred_5 = _2987;
                }
                _2762 = frontier_phi_66_pred;
                _2772 = frontier_phi_66_pred_1;
                _2770 = frontier_phi_66_pred_2;
                _2768 = frontier_phi_66_pred_3;
                _2766 = frontier_phi_66_pred_4;
                _2764 = frontier_phi_66_pred_5;
                uint _2921 = _2920 + 1u;
                if (_2921 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2914 = _2762;
                    _2915 = _2764;
                    _2916 = _2766;
                    _2917 = _2768;
                    _2918 = _2770;
                    _2919 = _2772;
                    _2920 = _2921;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
        }
        uvec4 _2775 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2776 = _2775.z;
        uint _2778 = (_2776 >> 8u) & 15u;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        if (((4294967295u << _2778) & _2660) == 0u)
        {
            _2882 = _2761;
            _2884 = _2763;
            _2886 = _2765;
            _2888 = _2767;
            _2890 = _2769;
            _2892 = _2771;
        }
        else
        {
            float _2907 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
            float _2908 = _2907 * _2614;
            float _2909 = _2907 * _2615;
            float _2910 = _2907 * _2616;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2778 < ((_2776 >> 12u) & 15u))
            {
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _2893;
                float _3042 = _2761;
                float _3043 = _2763;
                float _3044 = _2765;
                float _3045 = _2767;
                float _3046 = _2769;
                float _3047 = _2771;
                uint _3048 = _2778;
                uint _3057;
                bool _3058;
                for (;;)
                {
                    _3057 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                    _3058 = _3057 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3058)
                    {
                        frontier_phi_77_pred = _3047;
                        frontier_phi_77_pred_1 = _3046;
                        frontier_phi_77_pred_2 = _3045;
                        frontier_phi_77_pred_3 = _3044;
                        frontier_phi_77_pred_4 = _3043;
                        frontier_phi_77_pred_5 = _3042;
                    }
                    else
                    {
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3264 = _3042;
                        float _3265 = _3043;
                        float _3266 = _3044;
                        float _3267 = _3045;
                        float _3268 = _3046;
                        float _3269 = _3047;
                        uint _3270 = _3057;
                        uint _3271;
                        vec4 _3296;
                        float _3297;
                        vec4 _3312;
                        vec3 _3324;
                        vec4 _3339;
                        vec4 _3354;
                        float _3400;
                        bool _3401;
                        for (;;)
                        {
                            uint _3281 = ((_3048 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3270));
                            _3271 = (_3270 + 4294967295u) & _3270;
                            uint _3283 = _3281 * 40u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            _3297 = _3296.w;
                            uint _3299 = (_3281 * 40u) + 4u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3281 * 40u) + 8u;
                            _3324 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x));
                            uint _3326 = (_3281 * 40u) + 16u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3341 = (_3281 * 40u) + 20u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3281 * 40u) + 24u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3375 = (_3281 * 40u) + 28u;
                            vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            _3400 = fma(_2616, _3388.z, fma(_2615, _3388.y, _3388.x * _2614)) + _3388.w;
                            _3401 = !((fma(_2616, _3369.z, fma(_2615, _3369.y, _3369.x * _2614)) + _3369.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3401)
                            {
                                float _3428 = _3296.x - _2614;
                                float _3429 = _3296.y - _2615;
                                float _3430 = _3296.z - _2616;
                                float _3431 = dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430));
                                float _3434 = inversesqrt(_3431);
                                float _3435 = _3434 * _3428;
                                float _3436 = _3434 * _3429;
                                float _3437 = _3434 * _3430;
                                float _3441 = 1.0 - (_3431 / (_3297 * _3297));
                                float _4601 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3446 = sqrt(_3431) * _3312.w;
                                float _3448 = 1.39999997615814208984375 / (_3446 + 1.39999997615814208984375);
                                float _3449 = _3448 * _3448;
                                float _3452 = ((1.0 - _3449) * dot(vec3(_3435, _3436, _3437), vec3(_849, _852, _855))) + _3449;
                                float _3455 = _3446 * _3446;
                                float _3459 = (fma(_2616, _3339.z, fma(_2615, _3339.y, _3339.x * _2614)) + _3339.w) / _3400;
                                float _3460 = (fma(_2616, _3354.z, fma(_2615, _3354.y, _3354.x * _2614)) + _3354.w) / _3400;
                                float _3464 = 1.0 - dot(vec2(_3459, _3460), vec2(_3459, _3460));
                                float _4617 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3466 = _3465 * (((isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0))) * _3442) / ((_3455 * 0.699999988079071044921875) + 1.0));
                                float _3478 = exp2(log2(1.0 / ((_3455 * 3.5) + 5.0)) * 0.25);
                                float _3479 = 1.0 - _924;
                                float _3486 = sqrt(1.0 - ((1.0 - (_3479 * _3479)) * (1.0 - (_3478 * _3478))));
                                float _3487 = _3486 * _3486;
                                float _3488 = _3487 * _3487;
                                float _3489 = _3435 - _2908;
                                float _3490 = _3436 - _2909;
                                float _3491 = _3437 - _2910;
                                float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                                float _3499 = dot(vec3(_849, _852, _855), vec3((-0.0) - _2908, (-0.0) - _2909, (-0.0) - _2910));
                                float _4628 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3502 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3503 = dot(vec3(_849, _852, _855), vec3(_3495 * _3489, _3495 * _3490, _3495 * _3491));
                                float _4639 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3506 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3510 = ((_3506 * _3506) * (_3488 + (-1.0))) + 1.0;
                                float _3511 = _3448 * _3487;
                                float _3512 = _3511 * _3511;
                                float _3518 = ((1.0 - _3512) * dot(vec3(_849, _852, _855), vec3(_3435, _3436, _3437))) + _3512;
                                float _4650 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3520 = 1.0 - _3487;
                                float _3530 = (0.5 / (((_3519 * ((_3502 * _3520) + _3487)) + 9.9999999392252902907785028219223e-09) + (((_3519 * _3520) + _3487) * _3502))) * _3519;
                                float _4661 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3540 = (_3465 * _3442) * (((_3488 * 3.1415927410125732421875) * (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) / ((_3510 * _3510) * ((_3455 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3466 * _3312.y;
                                frontier_phi_83_pred_1 = _3466 * _3312.x;
                                frontier_phi_83_pred_2 = _3540 * _3324.z;
                                frontier_phi_83_pred_3 = _3540 * _3324.y;
                                frontier_phi_83_pred_4 = _3540 * _3324.x;
                                frontier_phi_83_pred_5 = _3466 * _3312.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3548 = frontier_phi_83_pred;
                            _3547 = frontier_phi_83_pred_1;
                            _3546 = frontier_phi_83_pred_2;
                            _3545 = frontier_phi_83_pred_3;
                            _3544 = frontier_phi_83_pred_4;
                            _3549 = frontier_phi_83_pred_5;
                            _3254 = _3547 + _3267;
                            _3255 = _3548 + _3268;
                            _3256 = _3549 + _3269;
                            _3251 = _3544 + _3264;
                            _3252 = _3545 + _3265;
                            _3253 = _3546 + _3266;
                            if (_3271 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3271;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3256;
                        frontier_phi_77_pred_1 = _3255;
                        frontier_phi_77_pred_2 = _3254;
                        frontier_phi_77_pred_3 = _3253;
                        frontier_phi_77_pred_4 = _3252;
                        frontier_phi_77_pred_5 = _3251;
                    }
                    _2893 = frontier_phi_77_pred;
                    _2891 = frontier_phi_77_pred_1;
                    _2889 = frontier_phi_77_pred_2;
                    _2887 = frontier_phi_77_pred_3;
                    _2885 = frontier_phi_77_pred_4;
                    _2883 = frontier_phi_77_pred_5;
                    uint _3049 = _3048 + 1u;
                    if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3042 = _2883;
                        _3043 = _2885;
                        _3044 = _2887;
                        _3045 = _2889;
                        _3046 = _2891;
                        _3047 = _2893;
                        _3048 = _3049;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2887;
                frontier_phi_58_59_ladder_1 = _2893;
                frontier_phi_58_59_ladder_2 = _2891;
                frontier_phi_58_59_ladder_3 = _2889;
                frontier_phi_58_59_ladder_4 = _2885;
                frontier_phi_58_59_ladder_5 = _2883;
            }
            else
            {
                frontier_phi_58_59_ladder = _2765;
                frontier_phi_58_59_ladder_1 = _2771;
                frontier_phi_58_59_ladder_2 = _2769;
                frontier_phi_58_59_ladder_3 = _2767;
                frontier_phi_58_59_ladder_4 = _2763;
                frontier_phi_58_59_ladder_5 = _2761;
            }
            _2882 = frontier_phi_58_59_ladder_5;
            _2884 = frontier_phi_58_59_ladder_4;
            _2886 = frontier_phi_58_59_ladder;
            _2888 = frontier_phi_58_59_ladder_3;
            _2890 = frontier_phi_58_59_ladder_2;
            _2892 = frontier_phi_58_59_ladder_1;
        }
        float _2897 = isnan(1.0) ? _908 : (isnan(_908) ? 1.0 : min(_908, 1.0));
        _2673 = (_2897 * _2888) + _2109;
        _2675 = (_2897 * _2890) + _2111;
        _2677 = (_2897 * _2892) + _2113;
        _2679 = ((_2882 * _892) * _2897) + _2454;
        _2681 = ((_2884 * _894) * _2897) + _2456;
        _2683 = ((_2886 * _895) * _2897) + _2458;
    }
    else
    {
        _2673 = _2109;
        _2675 = _2111;
        _2677 = _2113;
        _2679 = _2454;
        _2681 = _2456;
        _2683 = _2458;
    }
    float _4677 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4688 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4699 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _2700 = ((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2673 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _908))) + ((_2679 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1747)) * cbPerFrame._m0[3u].x);
    float _2701 = ((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2675 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _908))) + ((_2681 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1747)) * cbPerFrame._m0[3u].x);
    float _2702 = ((isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2677 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _908))) + ((_2683 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1747)) * cbPerFrame._m0[3u].x);
    uint _2703 = _270 + 6u;
    float _2711 = _830 / cbSceneParam._m0[86u].x;
    float _2712 = _831 / cbSceneParam._m0[86u].y;
    vec4 _2726 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, (log2((isnan(cbSceneParam._m0[77u].w) ? _752 : (isnan(_752) ? cbSceneParam._m0[77u].w : min(_752, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2728 = _2726.x;
    float _2729 = _2726.y;
    float _2730 = _2726.z;
    float _2731 = _2726.w;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    if (_752 > cbSceneParam._m0[78u].w)
    {
        float _2786 = isnan(_752) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _752 : min(cbSceneParam._m0[80u].w, _752));
        float _2787 = _2786 / _752;
        float _2798 = _2787 * _803;
        float _2799 = _804 * _2787;
        float _2800 = (-0.0) - _2799;
        float _2802 = _2787 * _805;
        float _2804 = (cbSceneParam._m0[77u].w * _2800) / _2786;
        float _2805 = _2804 + cbSceneParam._m0[79u].w;
        float _2806 = cbSceneParam._m0[79u].w - _2799;
        float _2812 = sqrt(((_2798 * _2798) + (_2799 * _2799)) + (_2802 * _2802));
        float _2815 = (1.0 - (cbSceneParam._m0[77u].w / _2786)) * _2812;
        float _2820 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2822 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2999;
        if (abs((_2800 - _2804) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2999 = ((((_2805 > 0.0) ? exp2(_2820 * _2805) : (2.0 - exp2(_2822 * _2805))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2815;
        }
        else
        {
            float _2943 = 1.0 / cbSceneParam._m0[80u].x;
            float _2944 = isnan(_2806) ? _2805 : (isnan(_2805) ? _2806 : max(_2805, _2806));
            float _2945 = isnan(_2806) ? _2805 : (isnan(_2805) ? _2806 : min(_2805, _2806));
            float _2954 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : min(_2944, 0.0));
            float _2955 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : min(_2945, 0.0));
            _2999 = ((abs(_2812 / _2800) * cbSceneParam._m0[80u].y) * ((((_2954 - _2955) * 2.0) - ((exp2(_2820 * (isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0)))) - exp2(_2820 * (isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))))) * _2943)) - ((exp2(_2822 * _2954) - exp2(_2822 * _2955)) * _2943))) + (_2815 * cbSceneParam._m0[80u].z);
        }
        vec4 _3001 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, 1.0), 0.0);
        float _3010 = exp2((_2999 * (-1.44269502162933349609375)) * (1.0 - _3001.w));
        float _3011 = log2(_3010);
        float _3027 = log2(_2731);
        _2824 = (exp2(_3027 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].x)) * _3001.x) / cbSceneParam._m0[78u].x)) + _2728;
        _2826 = (exp2(_3027 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].y)) * _3001.y) / cbSceneParam._m0[78u].y)) + _2729;
        _2828 = (exp2(_3027 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].z)) * _3001.z) / cbSceneParam._m0[78u].z)) + _2730;
        _2830 = _3010 * _2731;
    }
    else
    {
        _2824 = _2728;
        _2826 = _2729;
        _2828 = _2730;
        _2830 = _2731;
    }
    bool _3037;
    vec4 _2840;
    vec4 _2862;
    float _2864;
    float _2868;
    float _2869;
    float _2870;
    float _2871;
    bool _2881;
    for (;;)
    {
        _2840 = cbMatDynParam._m0[0u];
        float _2842 = roundEven(_2840.y);
        bool _2843 = _2842 == 3.0;
        float _2844 = log2(_2830);
        float _2851 = exp2(_2844 * cbSceneParam._m0[78u].x) * _2700;
        float _2852 = exp2(_2844 * cbSceneParam._m0[78u].y) * _2701;
        float _2853 = exp2(_2844 * cbSceneParam._m0[78u].z) * _2702;
        float _2860 = _819 + (-0.5);
        _2862 = cbMtdParam._m0[1u];
        _2864 = _2862.y * _2860;
        float _2867 = (_2842 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2868 = _2867 * (_2843 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2824)));
        _2869 = _2867 * (_2843 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2826)));
        _2870 = _2867 * (_2843 ? _2853 : (_2853 + (cbSceneParam._m0[72u].w * _2828)));
        _2871 = _2860 * 0.999000012874603271484375;
        _2881 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2881)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _2871) < 0.5)
            {
                _3037 = true;
                break;
            }
        }
        uint _2978 = _868 + uint(_2840.w);
        if ((cbInstanceData._m0[_2978].w < 1.0) && ((cbInstanceData._m0[_2978].w + _2871) < 0.5))
        {
            _3037 = true;
            break;
        }
        if ((_2864 + 1.0) < _2862.x)
        {
            _3037 = true;
            break;
        }
        _3037 = false;
        break;
    }
    float _3242;
    if (_3037)
    {
        discard_state = true;
        _3242 = 0.0;
    }
    else
    {
        _3242 = cbInstanceData._m0[_2703].w;
    }
    SV_Target.x = _2868;
    SV_Target.y = _2869;
    SV_Target.z = _2870;
    SV_Target.w = _3242;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2703].w;
    discard_exit();
}


