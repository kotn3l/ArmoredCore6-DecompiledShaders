#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1175;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _329 = _325.z;
    float _334 = (_325.x * 2.0) + (-1.0);
    float _336 = (_325.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3526 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))));
    float _346 = fma(_343, _227, fma(_336, _234, _334 * _220));
    float _349 = fma(_343, _228, fma(_336, _235, _334 * _221));
    float _352 = fma(_343, _229, fma(_336, _236, _334 * _222));
    float _356 = inversesqrt(dot(vec3(_346, _349, _352), vec3(_346, _349, _352)));
    vec4 _392 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _394 = _392.x;
    float _395 = 1.0 - _394;
    float _402 = ((_394 - _395) * cbMtdParam._m0[24u].z) + _395;
    float _404 = (cbMtdParam._m0[19u].x + dot(vec4(_356 * _346, _356 * _349, _356 * _352, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_402 * cbMtdParam._m0[21u].z);
    float _3537 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _407 = (-0.0) - cbMtdParam._m0[24u].x;
    float _409 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _410 = isnan(1.0) ? _409 : (isnan(_409) ? 1.0 : min(_409, 1.0));
    float _417 = _405 - ((_405 * TEXCOORD_8.x) * _410);
    float _418 = _405 - ((_405 * TEXCOORD_8.y) * _410);
    float _419 = _405 - ((_405 * TEXCOORD_8.z) * _410);
    float _426 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _430 = ((isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : min(_426, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _438 = (_430 - (((_402 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _430))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3568 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _443 = ((_417 * ((_305.x * cbMtdParam._m0[18u].x) - _284)) * _439) + _284;
    float _444 = ((_418 * ((_305.y * cbMtdParam._m0[18u].y) - _285)) * _439) + _285;
    float _445 = ((_419 * ((_305.z * cbMtdParam._m0[18u].z) - _286)) * _439) + _286;
    vec4 _457 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _459 = _457.x;
    float _460 = 1.0 - _459;
    float _489 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_459 - _460) * cbMtdParam._m0[24u].w) + _460) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3579 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _498 = ((((cbMtdParam._m0[10u].x - _443) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _490) + _443;
    float _499 = ((((cbMtdParam._m0[10u].y - _444) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _490) + _444;
    float _500 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _445)) * _490) + _445;
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _515 = _513.x;
    float _518 = _515 - ((_515 * _417) * _439);
    float _520 = _518 - (_518 * _490);
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _541 = (_534.x * 2.0) + (-1.0);
    float _542 = (_534.y * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3590 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _552 = (((_534.z - _329) * _417) * _439) + _329;
    float _555 = ((cbMtdParam._m0[23u].y - _552) * _490) + _552;
    vec4 _574 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _580 = (_574.x * 2.0) + (-1.0);
    float _581 = (_574.y * 2.0) + (-1.0);
    float _582 = dot(vec2(_580, _581), vec2(_580, _581));
    float _3601 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _602 = (((cbMtdParam._m0[21u].x * _334) + ((_541 - _334) * _417)) * _439) + _334;
    float _603 = (((cbMtdParam._m0[21u].x * _336) + ((_542 - _336) * _418)) * _439) + _336;
    float _604 = (((sqrt(1.0 - (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) - _343) * _419) * _439) + _343;
    float _615 = (((_580 - _602) + (_602 * cbMtdParam._m0[22u].z)) * _490) + _602;
    float _616 = (((_581 - _603) + (_603 * cbMtdParam._m0[22u].z)) * _490) + _603;
    float _617 = ((sqrt(1.0 - (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) - _604) * _490) + _604;
    float _619 = cbMtdParam._m0[22u].x + _325.w;
    float _622 = fma(_617, _227, fma(_616, _234, _615 * _220));
    float _625 = fma(_617, _228, fma(_616, _235, _615 * _221));
    float _628 = fma(_617, _229, fma(_616, _236, _615 * _222));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _3612 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _636 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _3623 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3634 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3645 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3656 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3667 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _641 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _655 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _705 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _695);
    float _706 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _695);
    float _707 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _695);
    float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
    float _712 = _705 * _711;
    float _713 = _706 * _711;
    float _714 = _707 * _711;
    float _720 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _721 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _742 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _745 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _748 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    uint _762 = (_239 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _768 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * cbInstanceData._m0[_762].x;
    float _769 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * cbInstanceData._m0[_762].y;
    float _770 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * cbInstanceData._m0[_762].z;
    float _3678 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _3700 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _774 = 1.0 - _641;
    float _775 = _771 * _774;
    float _776 = _772 * _774;
    float _777 = _773 * _774;
    float _782 = (_771 + (-0.039999999105930328369140625)) * _641;
    float _783 = (_772 + (-0.039999999105930328369140625)) * _641;
    float _784 = (_773 + (-0.039999999105930328369140625)) * _641;
    float _785 = _782 + 0.039999999105930328369140625;
    float _787 = _783 + 0.039999999105930328369140625;
    float _788 = _784 + 0.039999999105930328369140625;
    vec4 _797 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _720, cbSceneParam._m0[86u].y * _721));
    float _801 = ((isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * TEXCOORD_5.w) * _797.x;
    float _802 = dot(vec3(_633, _634, _635), vec3(_712, _713, _714));
    float _805 = _802 * 2.0;
    float _809 = (_805 * _633) - _712;
    float _810 = (_805 * _634) - _713;
    float _811 = (_805 * _635) - _714;
    float _815 = abs(dot(vec3(_712, _713, _714), vec3(_633, _634, _635)));
    float _3711 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _817 = sqrt(_636);
    float _830 = exp2((_817 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_817 * 3.0));
    float _836 = (1.0 - _830) * ((_817 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _837 = _830 * _817;
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1174;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _899 = fma(_873, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865));
        float _903 = fma(_873, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865));
        float _907 = fma(_873, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865));
        float _932 = _865 + _633;
        float _933 = _869 + _634;
        float _934 = _873 + _635;
        float _944 = fma(_934, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932)) - _899;
        float _945 = fma(_934, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932)) - _903;
        float _946 = fma(_934, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932)) - _907;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_899 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_903 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[34u].z) + ((((((_907 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1002 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_968.x + (-0.5));
        float _1004 = _1002 * (_968.y + (-0.5));
        float _1005 = _1002 * (_968.z + (-0.5));
        float _1012 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_975.x + (-0.5));
        float _1014 = _1012 * (_975.y + (-0.5));
        float _1015 = _1012 * (_975.z + (-0.5));
        float _1022 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_982.x + (-0.5));
        float _1024 = _1022 * (_982.y + (-0.5));
        float _1025 = _1022 * (_982.z + (-0.5));
        float _1032 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_989.x + (-0.5));
        float _1034 = _1032 * (_989.y + (-0.5));
        float _1035 = _1032 * (_989.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1056 = (dot(vec3(_633, _634, _635), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1066 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3759 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1068 + 1.0))) + _1073) * _1036;
        float _1083 = _1004 * 0.5;
        float _1084 = _1014 * 0.5;
        float _1085 = _1024 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_633, _634, _635), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3792 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1110 + 1.0))) + _1115) * _1037;
        float _1125 = _1005 * 0.5;
        float _1126 = _1015 * 0.5;
        float _1127 = _1025 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_633, _634, _635), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3825 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1152 + 1.0))) + _1157) * _1038;
        _1174 = _1005;
        _1176 = _1004;
        _1177 = _1003;
        _1178 = _1015;
        _1179 = _1014;
        _1180 = _1013;
        _1181 = _1025;
        _1182 = _1024;
        _1183 = _1023;
        _1184 = _1038;
        _1185 = _1037;
        _1186 = _1036;
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _1175;
        _1176 = _1175;
        _1177 = _1175;
        _1178 = _1175;
        _1179 = _1175;
        _1180 = _1175;
        _1181 = _1175;
        _1182 = _1175;
        _1183 = _1175;
        _1184 = _1175;
        _1185 = _1175;
        _1186 = _1175;
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
    }
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1214 = fma(_873, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865));
        float _1218 = fma(_873, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865));
        float _1222 = fma(_873, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865));
        float _1245 = _865 + _633;
        float _1246 = _869 + _634;
        float _1247 = _873 + _635;
        float _1257 = fma(_1247, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245)) - _1214;
        float _1258 = fma(_1247, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245)) - _1218;
        float _1259 = fma(_1247, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245)) - _1222;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1214 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1218 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[35u].z) + ((((((_1222 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1313 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1280.x + (-0.5));
        float _1315 = _1313 * (_1280.y + (-0.5));
        float _1316 = _1313 * (_1280.z + (-0.5));
        float _1323 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1287.x + (-0.5));
        float _1325 = _1323 * (_1287.y + (-0.5));
        float _1326 = _1323 * (_1287.z + (-0.5));
        float _1333 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1294.x + (-0.5));
        float _1335 = _1333 * (_1294.y + (-0.5));
        float _1336 = _1333 * (_1294.z + (-0.5));
        float _1343 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1301.x + (-0.5));
        float _1345 = _1343 * (_1301.y + (-0.5));
        float _1346 = _1343 * (_1301.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_633, _634, _635), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3888 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1377 + 1.0))) + _1382) * _1347;
        float _1392 = _1315 * 0.5;
        float _1393 = _1325 * 0.5;
        float _1394 = _1335 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_633, _634, _635), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3921 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1419 + 1.0))) + _1424) * _1348;
        float _1434 = _1316 * 0.5;
        float _1435 = _1326 * 0.5;
        float _1436 = _1336 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_633, _634, _635), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3954 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1461 + 1.0))) + _1466) * _1349;
        _1483 = _1316;
        _1484 = _1315;
        _1485 = _1314;
        _1486 = _1326;
        _1487 = _1325;
        _1488 = _1324;
        _1489 = _1336;
        _1490 = _1335;
        _1491 = _1334;
        _1492 = _1349;
        _1493 = _1348;
        _1494 = _1347;
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1175;
        _1484 = _1175;
        _1485 = _1175;
        _1486 = _1175;
        _1487 = _1175;
        _1488 = _1175;
        _1489 = _1175;
        _1490 = _1175;
        _1491 = _1175;
        _1492 = _1175;
        _1493 = _1175;
        _1494 = _1175;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1187)) + _1187;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1188)) + _1188;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1189)) + _1189;
    float _1530 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1507));
    float _1551 = _809 * 0.5;
    float _1552 = _810 * 0.5;
    float _1553 = _811 * 0.5;
    float _1554 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1557 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1560 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1594;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1567 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1174, _1178, _1181, _1184));
        float _1571 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1575 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1582 = dot(vec4(cbModelParam._m0[39u]), vec4(_1551, _1552, _1553, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1605;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1596 = dot(vec4(cbModelParam._m0[40u]), vec4(_1551, _1552, _1553, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1609 = (_1605 * cbModelParam._m0[1u].x) + (_1594 * (1.0 - cbModelParam._m0[1u].x));
    float _1619 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _636);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1619 : min(cbModelParam._m0[25u].z, _1619));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1667 = fma(_873, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865)) + cbModelParam._m0[13u].w;
        float _1671 = fma(_873, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865)) + cbModelParam._m0[14u].w;
        float _1675 = fma(_873, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865)) + cbModelParam._m0[15u].w;
        float _1678 = fma(_811, cbModelParam._m0[13u].z, fma(_810, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809));
        float _1681 = fma(_811, cbModelParam._m0[14u].z, fma(_810, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809));
        float _1684 = fma(_811, cbModelParam._m0[15u].z, fma(_810, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809));
        float _1712;
        if (_1678 > 0.0)
        {
            _1712 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1712 = frontier_phi_14_12_ladder;
        }
        float _1936;
        if (_1681 > 0.0)
        {
            _1936 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1936 = frontier_phi_23_19_ladder;
        }
        float _2193;
        if (_1684 > 0.0)
        {
            _2193 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2193 = frontier_phi_35_30_ladder;
        }
        float _2195 = isnan(_1936) ? _1712 : (isnan(_1712) ? _1936 : min(_1712, _1936));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1678) + _1667;
        float _2201 = (_2196 * _1681) + _1671;
        float _2202 = (_2196 * _1684) + _1675;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2203;
        float _2207 = _2203 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 > _2207) || ((_2201 < _2205) || ((_2200 < _2205) || (_2200 > _2207))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2330 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2202, cbModelParam._m0[9u].z, fma(_2201, cbModelParam._m0[9u].y, _2200 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2202, cbModelParam._m0[10u].z, fma(_2201, cbModelParam._m0[10u].y, _2200 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2202, cbModelParam._m0[11u].z, fma(_2201, cbModelParam._m0[11u].y, _2200 * cbModelParam._m0[11u].x))), _1620);
            frontier_phi_13_35_ladder = _2330.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2330.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2330.x * cbModelParam._m0[1u].y;
        }
        _1700 = frontier_phi_13_35_ladder_2;
        _1702 = frontier_phi_13_35_ladder_1;
        _1704 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_809, _810, _811), _1620);
        _1700 = _1688.x * cbModelParam._m0[1u].y;
        _1702 = _1688.y * cbModelParam._m0[1u].y;
        _1704 = _1688.z * cbModelParam._m0[1u].y;
    }
    float _1708 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _636);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1708 : min(cbModelParam._m0[25u].w, _1708));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1762 = fma(_873, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865)) + cbModelParam._m0[21u].w;
        float _1766 = fma(_873, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865)) + cbModelParam._m0[22u].w;
        float _1770 = fma(_873, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865)) + cbModelParam._m0[23u].w;
        float _1773 = fma(_811, cbModelParam._m0[21u].z, fma(_810, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809));
        float _1776 = fma(_811, cbModelParam._m0[22u].z, fma(_810, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809));
        float _1779 = fma(_811, cbModelParam._m0[23u].z, fma(_810, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809));
        float _1941;
        if (_1773 > 0.0)
        {
            _1941 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1941 = frontier_phi_25_21_ladder;
        }
        float _2220;
        if (_1776 > 0.0)
        {
            _2220 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2220 = frontier_phi_37_32_ladder;
        }
        float _2433;
        if (_1779 > 0.0)
        {
            _2433 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2433 = frontier_phi_46_43_ladder;
        }
        float _2435 = isnan(_2220) ? _1941 : (isnan(_1941) ? _2220 : min(_1941, _2220));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1773) + _1762;
        float _2441 = (_2436 * _1776) + _1766;
        float _2442 = (_2436 * _1779) + _1770;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2443;
        float _2446 = _2443 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2442 > _2446) || ((_2442 < _2444) || ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 < _2444) || (_2440 > _2446))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2641 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2442, cbModelParam._m0[17u].z, fma(_2441, cbModelParam._m0[17u].y, _2440 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2442, cbModelParam._m0[18u].z, fma(_2441, cbModelParam._m0[18u].y, _2440 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2442, cbModelParam._m0[19u].z, fma(_2441, cbModelParam._m0[19u].y, _2440 * cbModelParam._m0[19u].x))), _1709);
            frontier_phi_22_46_ladder = _2641.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2641.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2641.x * cbModelParam._m0[1u].z;
        }
        _1798 = frontier_phi_22_46_ladder_2;
        _1800 = frontier_phi_22_46_ladder_1;
        _1802 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_809, _810, _811), _1709);
        _1798 = _1782.x * cbModelParam._m0[1u].z;
        _1800 = _1782.y * cbModelParam._m0[1u].z;
        _1802 = _1782.z * cbModelParam._m0[1u].z;
    }
    float _1815 = (((_836 * _785) + _837) * _801) * ((cbModelParam._m0[1u].w * (_1798 - _1700)) + _1700);
    float _1817 = (((_836 * _787) + _837) * _801) * ((cbModelParam._m0[1u].w * (_1800 - _1702)) + _1702);
    float _1819 = (((_836 * _788) + _837) * _801) * ((cbModelParam._m0[1u].w * (_1802 - _1704)) + _1704);
    float _1822 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1817, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1825 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1817, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1828 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1817, cbSceneParam._m0[91u].y, _1815 * cbSceneParam._m0[91u].x));
    vec4 _1836 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_720, _721));
    float _1838 = _1836.w;
    float _1850 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1838);
    float _1851 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1838);
    float _1852 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1838);
    uvec4 _1856 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1858 = _1856.x * 14u;
    uint _1859 = _1858 + 13u;
    float _1866 = _801 + (-1.0);
    float _1871 = (cbLight._m0[_1859].x * _1866) + 1.0;
    float _1872 = (cbLight._m0[_1859].y * _1866) + 1.0;
    float _1873 = (cbLight._m0[_1859].z * _1866) + 1.0;
    float _1874 = (cbLight._m0[_1859].w * _1866) + 1.0;
    uint _1875 = _1858 + 5u;
    float _1881 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
    uint _1885 = _1858 + 4u;
    float _1895 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
    uint _1899 = _1858 | 1u;
    float _1910 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_633, _634, _635));
    float _1913 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_633, _634, _635));
    float _4090 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _4101 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1918 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * 0.3183098733425140380859375;
    float _1920 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 0.3183098733425140380859375;
    float _1927 = ((cbLight._m0[_1875].x * _1881) * _1920) + (((cbLight._m0[_1885].x * _1850) * _1895) * _1918);
    float _1928 = ((_1881 * cbLight._m0[_1875].y) * _1920) + (((cbLight._m0[_1885].y * _1851) * _1895) * _1918);
    float _1929 = ((_1881 * cbLight._m0[_1875].z) * _1920) + (((cbLight._m0[_1885].z * _1852) * _1895) * _1918);
    uvec4 _1933 = floatBitsToUint(cbLight._m0[_1858 + 12u]);
    bool _1935 = _1933.x == 0u;
    float _1946;
    float _1948;
    float _1950;
    if (_1935)
    {
        _1946 = _1927;
        _1948 = _1928;
        _1950 = _1929;
    }
    else
    {
        uint _1954 = _1858 + 6u;
        float _1970 = (dot(vec3(cbLight._m0[_1858 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _1971 = _1970 * _1970;
        float _4112 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1972 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1973 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _1946 = (((cbLight._m0[_1954].x * 0.3183098733425140380859375) * _1972) * _1973) + _1927;
        _1948 = (((cbLight._m0[_1954].y * 0.3183098733425140380859375) * _1972) * _1973) + _1928;
        _1950 = (((cbLight._m0[_1954].z * 0.3183098733425140380859375) * _1972) * _1973) + _1929;
    }
    bool _1953 = _1933.y == 0u;
    float _1991;
    float _1993;
    float _1995;
    if (_1953)
    {
        _1991 = _1946;
        _1993 = _1948;
        _1995 = _1950;
    }
    else
    {
        uint _2164 = _1858 + 7u;
        float _2180 = (dot(vec3(cbLight._m0[_1858 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2181 = _2180 * _2180;
        float _4128 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2182 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2183 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _1991 = (((cbLight._m0[_2164].x * 0.3183098733425140380859375) * _2182) * _2183) + _1946;
        _1993 = (((cbLight._m0[_2164].y * 0.3183098733425140380859375) * _2182) * _2183) + _1948;
        _1995 = (((cbLight._m0[_2164].z * 0.3183098733425140380859375) * _2182) * _2183) + _1950;
    }
    uint _1998 = _1858 + 8u;
    float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1858].w)) * _636) * 0.949999988079071044921875);
    float _2012 = _2011 * _2011;
    float _2013 = cbLight._m0[_1858].x + _712;
    float _2014 = cbLight._m0[_1858].y + _713;
    float _2015 = cbLight._m0[_1858].z + _714;
    float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
    float _2020 = _2019 * _2013;
    float _2021 = _2019 * _2014;
    float _2022 = _2019 * _2015;
    float _2023 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1858].xyz));
    float _4144 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _2027 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2028 = dot(vec3(_633, _634, _635), vec3(_2020, _2021, _2022));
    float _4166 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_2020, _2021, _2022));
    float _4177 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2036 = _2012 * _2012;
    float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
    float _2048 = exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0);
    float _2049 = 0.959999978542327880859375 - _782;
    float _2051 = 0.959999978542327880859375 - _783;
    float _2052 = 0.959999978542327880859375 - _784;
    float _2059 = 1.0 - _2012;
    float _2070 = (0.5 / (((_2027 * ((_2026 * _2059) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2059) + _2012) * _2026))) * _2026;
    float _4188 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2072 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
    uint _2086 = _1858 + 9u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _636) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1899].x + _712;
    float _2100 = cbLight._m0[_1899].y + _713;
    float _2101 = cbLight._m0[_1899].z + _714;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1899].xyz));
    float _4199 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2113 = dot(vec3(_633, _634, _635), vec3(_2106, _2107, _2108));
    float _4210 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_2106, _2107, _2108));
    float _4221 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2098 * _2098;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2132 = exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0);
    float _2139 = 1.0 - _2098;
    float _2149 = (0.5 / (((_2027 * ((_2112 * _2139) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2139) + _2098) * _2112))) * _2112;
    float _4232 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    float _2161 = (((((_2132 * _2049) + _785) * cbLight._m0[_2086].x) * _2151) * _1881) + ((((cbLight._m0[_1998].x * _1850) * ((_2048 * _2049) + _785)) * _2072) * _1895);
    float _2162 = (((((_2132 * _2051) + _787) * cbLight._m0[_2086].y) * _2151) * _1881) + ((((cbLight._m0[_1998].y * _1851) * ((_2048 * _2051) + _787)) * _2072) * _1895);
    float _2163 = (((((_2132 * _2052) + _788) * cbLight._m0[_2086].z) * _2151) * _1881) + ((((cbLight._m0[_1998].z * _1852) * ((_2048 * _2052) + _788)) * _2072) * _1895);
    float _2225;
    float _2227;
    float _2229;
    if (_1935)
    {
        _2225 = _2161;
        _2227 = _2162;
        _2229 = _2163;
    }
    else
    {
        uint _2231 = _1858 + 2u;
        uint _2235 = _1858 + 10u;
        float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _636) * 0.949999988079071044921875);
        float _2250 = _2249 * _2249;
        float _2251 = cbLight._m0[_2231].x + _712;
        float _2252 = cbLight._m0[_2231].y + _713;
        float _2253 = cbLight._m0[_2231].z + _714;
        float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
        float _2258 = _2257 * _2251;
        float _2259 = _2257 * _2252;
        float _2260 = _2257 * _2253;
        float _2261 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2231].xyz));
        float _4243 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2265 = dot(vec3(_633, _634, _635), vec3(_2258, _2259, _2260));
        float _4254 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2269 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2258, _2259, _2260));
        float _4265 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2273 = _2250 * _2250;
        float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
        float _2284 = exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0);
        float _2291 = 1.0 - _2250;
        float _2301 = (0.5 / (((_2027 * ((_2264 * _2291) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2291) + _2250) * _2264))) * _2264;
        float _4276 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2303 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
        float _2304 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2225 = (((((_2284 * _2049) + _785) * cbLight._m0[_2235].x) * _2303) * _2304) + _2161;
        _2227 = (((((_2284 * _2051) + _787) * cbLight._m0[_2235].y) * _2303) * _2304) + _2162;
        _2229 = (((((_2284 * _2052) + _788) * cbLight._m0[_2235].z) * _2303) * _2304) + _2163;
    }
    float _2339;
    float _2341;
    float _2343;
    if (_1953)
    {
        _2339 = _2225;
        _2341 = _2227;
        _2343 = _2229;
    }
    else
    {
        uint _2350 = _1858 + 3u;
        uint _2354 = _1858 + 11u;
        float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _636) * 0.949999988079071044921875);
        float _2369 = _2368 * _2368;
        float _2370 = cbLight._m0[_2350].x + _712;
        float _2371 = cbLight._m0[_2350].y + _713;
        float _2372 = cbLight._m0[_2350].z + _714;
        float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
        float _2377 = _2376 * _2370;
        float _2378 = _2376 * _2371;
        float _2379 = _2376 * _2372;
        float _2380 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2350].xyz));
        float _4292 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2384 = dot(vec3(_633, _634, _635), vec3(_2377, _2378, _2379));
        float _4303 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2388 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2377, _2378, _2379));
        float _4314 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2392 = _2369 * _2369;
        float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
        float _2403 = exp2(log2(1.0 - (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * 5.0);
        float _2410 = 1.0 - _2369;
        float _2420 = (0.5 / (((_2027 * ((_2383 * _2410) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2410) + _2369) * _2383))) * _2383;
        float _4325 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _2339 = (((((_2403 * _2049) + _785) * cbLight._m0[_2354].x) * _2422) * _2423) + _2225;
        _2341 = (((((_2403 * _2051) + _787) * cbLight._m0[_2354].y) * _2422) * _2423) + _2227;
        _2343 = (((((_2403 * _2052) + _788) * cbLight._m0[_2354].z) * _2422) * _2423) + _2229;
    }
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    if (_1856.y == 0u)
    {
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2498;
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2498;
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2498;
        uvec4 _2513 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2514 = _2513.x;
        uint _2525 = uint((float(_2513.y) * floor(float(uint(cbSceneParam._m0[85u].y * _721) / _2514))) + floor(float(uint(cbSceneParam._m0[85u].x * _720) / _2514)));
        float _2535 = (log2(_2501 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2536 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        uint _2539 = uint(isnan(14.0) ? _2536 : (isnan(_2536) ? 14.0 : min(_2536, 14.0)));
        uvec4 _2544 = texelFetch(g_lightClusterGridBuffer, int(((_2539 << 2u) + (_2525 << 6u)) >> 2u));
        uint _2545 = _2544.x;
        uint _2546 = _2513.z;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        if (((((1u << ((_2546 >> 4u) & 15u)) + 4294967295u) & _2545) == 0u) || ((_2546 & 240u) == 0u))
        {
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
        }
        else
        {
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2657;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            uint _2796 = 0u;
            uint _2805;
            bool _2806;
            for (;;)
            {
                _2805 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2796 << 2u)) >> 2u)).x;
                _2806 = _2805 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2806)
                {
                    frontier_phi_61_pred = _2790;
                    frontier_phi_61_pred_1 = _2795;
                    frontier_phi_61_pred_2 = _2794;
                    frontier_phi_61_pred_3 = _2793;
                    frontier_phi_61_pred_4 = _2792;
                    frontier_phi_61_pred_5 = _2791;
                }
                else
                {
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    uint _2920;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2795;
                    _2920 = _2805;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    for (;;)
                    {
                        uint _2924 = uint(findLSB(_2920)) + (_2796 << 5u);
                        uint _2921 = (_2920 + 4294967295u) & _2920;
                        uint _2926 = _2924 * 48u;
                        vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2946 = (_2924 * 48u) + 4u;
                        vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 3u)).x));
                        uint _2965 = (_2924 * 48u) + 8u;
                        vec3 _2976 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x));
                        float _2980 = _2940.x - _2499;
                        float _2981 = _2940.y - _2500;
                        float _2982 = _2940.z - _2501;
                        float _2983 = dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982));
                        float _2986 = inversesqrt(_2983);
                        float _2987 = _2986 * _2980;
                        float _2988 = _2986 * _2981;
                        float _2989 = _2986 * _2982;
                        float _2990 = dot(vec3(_742, _745, _748), vec3(_2987, _2988, _2989));
                        float _2995 = 1.0 - (_2983 * _2940.w);
                        float _4351 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2996 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _2997 = sqrt(_2983) * _2959.w;
                        float _3000 = 1.39999997615814208984375 / (_2997 + 1.39999997615814208984375);
                        float _3001 = _3000 * _3000;
                        float _3004 = ((1.0 - _3001) * _2990) + _3001;
                        float _3007 = _2997 * _2997;
                        float _3011 = ((isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))) * _2996) / ((_3007 * 0.699999988079071044921875) + 1.0);
                        float _3015 = (-0.0) - _2499;
                        float _3016 = (-0.0) - _2500;
                        float _3017 = (-0.0) - _2501;
                        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3032 = exp2(log2(1.0 / ((_3007 * 3.5) + 5.0)) * 0.25);
                        float _3033 = 1.0 - _817;
                        float _3040 = sqrt(1.0 - ((1.0 - (_3033 * _3033)) * (1.0 - (_3032 * _3032))));
                        float _3041 = _3040 * _3040;
                        float _3042 = _3041 * _3041;
                        float _3043 = _3022 + _2987;
                        float _3044 = _3023 + _2988;
                        float _3045 = _3024 + _2989;
                        float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
                        float _3053 = dot(vec3(_742, _745, _748), vec3(_3022, _3023, _3024));
                        float _4367 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3056 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3057 = dot(vec3(_742, _745, _748), vec3(_3049 * _3043, _3049 * _3044, _3049 * _3045));
                        float _4378 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3060 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3064 = ((_3060 * _3060) * (_3042 + (-1.0))) + 1.0;
                        float _3065 = _3000 * _3041;
                        float _3066 = _3065 * _3065;
                        float _3069 = ((1.0 - _3066) * _2990) + _3066;
                        float _4389 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3070 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _3071 = 1.0 - _3041;
                        float _3081 = (0.5 / (((_3070 * ((_3056 * _3071) + _3041)) + 9.9999999392252902907785028219223e-09) + (((_3070 * _3071) + _3041) * _3056))) * _3070;
                        float _4400 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3092 = (((_3042 * 3.1415927410125732421875) * (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) / ((_3064 * _3064) * ((_3007 * 2.1991131305694580078125) + 3.141590118408203125))) * _2996;
                        _2849 = (_3011 * _2959.x) + _2917;
                        _2850 = (_3011 * _2959.y) + _2918;
                        _2851 = (_3011 * _2959.z) + _2919;
                        _2846 = (_3092 * _2976.x) + _2914;
                        _2847 = (_3092 * _2976.y) + _2915;
                        _2848 = (_3092 * _2976.z) + _2916;
                        if (_2921 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2851;
                            _2920 = _2921;
                        }
                    }
                    frontier_phi_61_pred = _2846;
                    frontier_phi_61_pred_1 = _2851;
                    frontier_phi_61_pred_2 = _2850;
                    frontier_phi_61_pred_3 = _2849;
                    frontier_phi_61_pred_4 = _2848;
                    frontier_phi_61_pred_5 = _2847;
                }
                _2647 = frontier_phi_61_pred;
                _2657 = frontier_phi_61_pred_1;
                _2655 = frontier_phi_61_pred_2;
                _2653 = frontier_phi_61_pred_3;
                _2651 = frontier_phi_61_pred_4;
                _2649 = frontier_phi_61_pred_5;
                uint _2797 = _2796 + 1u;
                if (_2797 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2790 = _2647;
                    _2791 = _2649;
                    _2792 = _2651;
                    _2793 = _2653;
                    _2794 = _2655;
                    _2795 = _2657;
                    _2796 = _2797;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
        }
        uvec4 _2660 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2661 = _2660.z;
        uint _2663 = (_2661 >> 8u) & 15u;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        if (((4294967295u << _2663) & _2545) == 0u)
        {
            _2758 = _2646;
            _2760 = _2648;
            _2762 = _2650;
            _2764 = _2652;
            _2766 = _2654;
            _2768 = _2656;
        }
        else
        {
            float _2783 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
            float _2784 = _2783 * _2499;
            float _2785 = _2783 * _2500;
            float _2786 = _2783 * _2501;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2663 < ((_2661 >> 12u) & 15u))
            {
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2769;
                float _2897 = _2646;
                float _2898 = _2648;
                float _2899 = _2650;
                float _2900 = _2652;
                float _2901 = _2654;
                float _2902 = _2656;
                uint _2903 = _2663;
                uint _2912;
                bool _2913;
                for (;;)
                {
                    _2912 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2903 << 2u)) >> 2u)).x;
                    _2913 = _2912 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2913)
                    {
                        frontier_phi_67_pred = _2900;
                        frontier_phi_67_pred_1 = _2901;
                        frontier_phi_67_pred_2 = _2902;
                        frontier_phi_67_pred_3 = _2899;
                        frontier_phi_67_pred_4 = _2898;
                        frontier_phi_67_pred_5 = _2897;
                    }
                    else
                    {
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        float _3112 = _2899;
                        float _3113 = _2900;
                        float _3114 = _2901;
                        float _3115 = _2902;
                        uint _3116 = _2912;
                        uint _3117;
                        vec4 _3142;
                        float _3143;
                        vec4 _3158;
                        vec3 _3170;
                        vec4 _3186;
                        vec4 _3202;
                        float _3248;
                        bool _3249;
                        for (;;)
                        {
                            uint _3127 = ((_2903 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3116));
                            _3117 = (_3116 + 4294967295u) & _3116;
                            uint _3129 = _3127 * 40u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            _3143 = _3142.w;
                            uint _3145 = (_3127 * 40u) + 4u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3160 = (_3127 * 40u) + 8u;
                            _3170 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x));
                            uint _3173 = (_3127 * 40u) + 16u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3189 = (_3127 * 40u) + 20u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3204 = (_3127 * 40u) + 24u;
                            vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3223 = (_3127 * 40u) + 28u;
                            vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            _3248 = fma(_2501, _3236.z, fma(_2500, _3236.y, _3236.x * _2499)) + _3236.w;
                            _3249 = !((fma(_2501, _3217.z, fma(_2500, _3217.y, _3217.x * _2499)) + _3217.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3249)
                            {
                                float _3276 = _3142.x - _2499;
                                float _3277 = _3142.y - _2500;
                                float _3278 = _3142.z - _2501;
                                float _3279 = dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278));
                                float _3282 = inversesqrt(_3279);
                                float _3283 = _3282 * _3276;
                                float _3284 = _3282 * _3277;
                                float _3285 = _3282 * _3278;
                                float _3289 = 1.0 - (_3279 / (_3143 * _3143));
                                float _4411 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3294 = sqrt(_3279) * _3158.w;
                                float _3296 = 1.39999997615814208984375 / (_3294 + 1.39999997615814208984375);
                                float _3297 = _3296 * _3296;
                                float _3300 = ((1.0 - _3297) * dot(vec3(_3283, _3284, _3285), vec3(_742, _745, _748))) + _3297;
                                float _3303 = _3294 * _3294;
                                float _3307 = (fma(_2501, _3186.z, fma(_2500, _3186.y, _3186.x * _2499)) + _3186.w) / _3248;
                                float _3308 = (fma(_2501, _3202.z, fma(_2500, _3202.y, _3202.x * _2499)) + _3202.w) / _3248;
                                float _3312 = 1.0 - dot(vec2(_3307, _3308), vec2(_3307, _3308));
                                float _4427 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3314 = _3313 * (((isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0))) * _3290) / ((_3303 * 0.699999988079071044921875) + 1.0));
                                float _3326 = exp2(log2(1.0 / ((_3303 * 3.5) + 5.0)) * 0.25);
                                float _3327 = 1.0 - _817;
                                float _3334 = sqrt(1.0 - ((1.0 - (_3327 * _3327)) * (1.0 - (_3326 * _3326))));
                                float _3335 = _3334 * _3334;
                                float _3336 = _3335 * _3335;
                                float _3337 = _3283 - _2784;
                                float _3338 = _3284 - _2785;
                                float _3339 = _3285 - _2786;
                                float _3343 = inversesqrt(dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339)));
                                float _3347 = dot(vec3(_742, _745, _748), vec3((-0.0) - _2784, (-0.0) - _2785, (-0.0) - _2786));
                                float _4438 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3350 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3351 = dot(vec3(_742, _745, _748), vec3(_3343 * _3337, _3343 * _3338, _3343 * _3339));
                                float _4449 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3354 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3358 = ((_3354 * _3354) * (_3336 + (-1.0))) + 1.0;
                                float _3359 = _3296 * _3335;
                                float _3360 = _3359 * _3359;
                                float _3366 = ((1.0 - _3360) * dot(vec3(_742, _745, _748), vec3(_3283, _3284, _3285))) + _3360;
                                float _4460 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3367 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3368 = 1.0 - _3335;
                                float _3378 = (0.5 / (((_3367 * ((_3350 * _3368) + _3335)) + 9.9999999392252902907785028219223e-09) + (((_3367 * _3368) + _3335) * _3350))) * _3367;
                                float _4471 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3388 = (_3313 * _3290) * (((_3336 * 3.1415927410125732421875) * (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) / ((_3358 * _3358) * ((_3303 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3388 * _3170.x;
                                frontier_phi_73_pred_1 = _3388 * _3170.y;
                                frontier_phi_73_pred_2 = _3314 * _3158.z;
                                frontier_phi_73_pred_3 = _3314 * _3158.y;
                                frontier_phi_73_pred_4 = _3314 * _3158.x;
                                frontier_phi_73_pred_5 = _3388 * _3170.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3392 = frontier_phi_73_pred;
                            _3393 = frontier_phi_73_pred_1;
                            _3397 = frontier_phi_73_pred_2;
                            _3396 = frontier_phi_73_pred_3;
                            _3395 = frontier_phi_73_pred_4;
                            _3394 = frontier_phi_73_pred_5;
                            _3100 = _3395 + _3113;
                            _3101 = _3396 + _3114;
                            _3102 = _3397 + _3115;
                            _3097 = _3392 + _3110;
                            _3098 = _3393 + _3111;
                            _3099 = _3394 + _3112;
                            if (_3117 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3117;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3100;
                        frontier_phi_67_pred_1 = _3101;
                        frontier_phi_67_pred_2 = _3102;
                        frontier_phi_67_pred_3 = _3099;
                        frontier_phi_67_pred_4 = _3098;
                        frontier_phi_67_pred_5 = _3097;
                    }
                    _2765 = frontier_phi_67_pred;
                    _2767 = frontier_phi_67_pred_1;
                    _2769 = frontier_phi_67_pred_2;
                    _2763 = frontier_phi_67_pred_3;
                    _2761 = frontier_phi_67_pred_4;
                    _2759 = frontier_phi_67_pred_5;
                    uint _2904 = _2903 + 1u;
                    if (_2904 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2897 = _2759;
                        _2898 = _2761;
                        _2899 = _2763;
                        _2900 = _2765;
                        _2901 = _2767;
                        _2902 = _2769;
                        _2903 = _2904;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2767;
                frontier_phi_55_56_ladder_1 = _2769;
                frontier_phi_55_56_ladder_2 = _2765;
                frontier_phi_55_56_ladder_3 = _2763;
                frontier_phi_55_56_ladder_4 = _2761;
                frontier_phi_55_56_ladder_5 = _2759;
            }
            else
            {
                frontier_phi_55_56_ladder = _2654;
                frontier_phi_55_56_ladder_1 = _2656;
                frontier_phi_55_56_ladder_2 = _2652;
                frontier_phi_55_56_ladder_3 = _2650;
                frontier_phi_55_56_ladder_4 = _2648;
                frontier_phi_55_56_ladder_5 = _2646;
            }
            _2758 = frontier_phi_55_56_ladder_5;
            _2760 = frontier_phi_55_56_ladder_4;
            _2762 = frontier_phi_55_56_ladder_3;
            _2764 = frontier_phi_55_56_ladder_2;
            _2766 = frontier_phi_55_56_ladder;
            _2768 = frontier_phi_55_56_ladder_1;
        }
        float _2773 = isnan(1.0) ? _801 : (isnan(_801) ? 1.0 : min(_801, 1.0));
        _2558 = (_2773 * _2764) + _1991;
        _2560 = (_2773 * _2766) + _1993;
        _2562 = (_2773 * _2768) + _1995;
        _2564 = ((_2758 * _785) * _2773) + _2339;
        _2566 = ((_2760 * _787) * _2773) + _2341;
        _2568 = ((_2762 * _788) * _2773) + _2343;
    }
    else
    {
        _2558 = _1991;
        _2560 = _1993;
        _2562 = _1995;
        _2564 = _2339;
        _2566 = _2341;
        _2568 = _2343;
    }
    float _4487 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4498 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4509 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    uint _2588 = _239 + 6u;
    float _2596 = _720 / cbSceneParam._m0[86u].x;
    float _2597 = _721 / cbSceneParam._m0[86u].y;
    vec4 _2611 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, (log2((isnan(cbSceneParam._m0[77u].w) ? _655 : (isnan(_655) ? cbSceneParam._m0[77u].w : min(_655, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2613 = _2611.x;
    float _2614 = _2611.y;
    float _2615 = _2611.z;
    float _2616 = _2611.w;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    if (_655 > cbSceneParam._m0[78u].w)
    {
        float _2671 = isnan(_655) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _655 : min(cbSceneParam._m0[80u].w, _655));
        float _2672 = _2671 / _655;
        float _2683 = _2672 * _705;
        float _2684 = _706 * _2672;
        float _2685 = (-0.0) - _2684;
        float _2686 = _2672 * _707;
        float _2688 = (cbSceneParam._m0[77u].w * _2685) / _2671;
        float _2689 = _2688 + cbSceneParam._m0[79u].w;
        float _2690 = cbSceneParam._m0[79u].w - _2684;
        float _2696 = sqrt(((_2683 * _2683) + (_2684 * _2684)) + (_2686 * _2686));
        float _2699 = (1.0 - (cbSceneParam._m0[77u].w / _2671)) * _2696;
        float _2704 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2706 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2859;
        if (abs((_2685 - _2688) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2859 = ((((_2689 > 0.0) ? exp2(_2704 * _2689) : (2.0 - exp2(_2706 * _2689))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2699;
        }
        else
        {
            float _2819 = 1.0 / cbSceneParam._m0[80u].x;
            float _2820 = isnan(_2690) ? _2689 : (isnan(_2689) ? _2690 : max(_2689, _2690));
            float _2821 = isnan(_2690) ? _2689 : (isnan(_2689) ? _2690 : min(_2689, _2690));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            float _2831 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : min(_2821, 0.0));
            _2859 = ((abs(_2696 / _2685) * cbSceneParam._m0[80u].y) * ((((_2830 - _2831) * 2.0) - ((exp2(_2704 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0)))) - exp2(_2704 * (isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0))))) * _2819)) - ((exp2(_2706 * _2830) - exp2(_2706 * _2831)) * _2819))) + (_2699 * cbSceneParam._m0[80u].z);
        }
        vec4 _2861 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, 1.0), 0.0);
        float _2870 = exp2((_2859 * (-1.44269502162933349609375)) * (1.0 - _2861.w));
        float _2871 = log2(_2870);
        float _2887 = log2(_2616);
        _2708 = (exp2(_2887 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2871 * cbSceneParam._m0[78u].x)) * _2861.x) / cbSceneParam._m0[78u].x)) + _2613;
        _2710 = (exp2(_2887 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2871 * cbSceneParam._m0[78u].y)) * _2861.y) / cbSceneParam._m0[78u].y)) + _2614;
        _2712 = (exp2(_2887 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2871 * cbSceneParam._m0[78u].z)) * _2861.z) / cbSceneParam._m0[78u].z)) + _2615;
        _2714 = _2870 * _2616;
    }
    else
    {
        _2708 = _2613;
        _2710 = _2614;
        _2712 = _2615;
        _2714 = _2616;
    }
    float _2726 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2727 = _2726 == 3.0;
    float _2728 = log2(_2714);
    float _2735 = exp2(_2728 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2558 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _801))) + ((_2564 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1609)) * cbPerFrame._m0[3u].x));
    float _2736 = exp2(_2728 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2560 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _801))) + ((_2566 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1609)) * cbPerFrame._m0[3u].x));
    float _2737 = exp2(_2728 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2562 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _801))) + ((_2568 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1609)) * cbPerFrame._m0[3u].x));
    float _2746 = (_2726 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2746 * (_2727 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2708)));
    SV_Target.y = _2746 * (_2727 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2710)));
    SV_Target.z = _2746 * (_2727 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2712)));
    SV_Target.w = cbInstanceData._m0[_2588].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2588].w;
}


