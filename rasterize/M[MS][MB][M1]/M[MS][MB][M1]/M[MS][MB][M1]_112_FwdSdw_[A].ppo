#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1253;
float _3918;
float _3919;
float _3920;
float _3921;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3930 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    float _437 = ((_407.z - _428) * _380) + _428;
    float _440 = ((((_407.x - _426) * _380) + _426) * 2.0) + (-1.0);
    float _442 = ((((_407.y - _427) * _380) + _427) * 2.0) + (-1.0);
    float _443 = dot(vec2(_440, _442), vec2(_440, _442));
    float _3941 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _448 = sqrt(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))));
    vec4 _464 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _476 = (((_464.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _440;
    float _477 = (((_464.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _442;
    float _480 = fma(_448, _230, fma(_477, _237, _476 * _223));
    float _483 = fma(_448, _231, fma(_477, _238, _476 * _224));
    float _486 = fma(_448, _232, fma(_477, _239, _476 * _225));
    float _490 = inversesqrt(dot(vec3(_480, _483, _486), vec3(_480, _483, _486)));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _519 = _517.x;
    float _520 = 1.0 - _519;
    float _524 = ((_519 - _520) * cbMtdParam._m0[24u].z) + _520;
    float _526 = (cbMtdParam._m0[19u].x + dot(vec4(_490 * _480, _490 * _483, _490 * _486, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_524 * cbMtdParam._m0[21u].z);
    float _3952 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _542 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_524 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3963 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _547 = ((_527 * (cbMtdParam._m0[17u].x - _387)) * _543) + _387;
    float _548 = ((_527 * (cbMtdParam._m0[17u].y - _388)) * _543) + _388;
    float _549 = ((_527 * (cbMtdParam._m0[17u].z - _389)) * _543) + _389;
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _575 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _577 = _575.x;
    float _595 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _577) * _380) + _577;
    float _599 = ((_561.x - _595) * cbMtdParam._m0[19u].z) + _595;
    float _602 = _599 - ((_543 * _527) * _599);
    float _606 = (cbMtdParam._m0[19u].w * (_464.z - _437)) + _437;
    vec4 _619 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _626 = (_619.x * 2.0) + (-1.0);
    float _627 = (_619.y * 2.0) + (-1.0);
    float _628 = dot(vec2(_626, _627), vec2(_626, _627));
    float _3974 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _637 = (((_619.z - _606) * _527) * _543) + _606;
    float _652 = (((cbMtdParam._m0[21u].x * _476) + ((_626 - _476) * _527)) * _543) + _476;
    float _653 = (((cbMtdParam._m0[21u].x * _477) + ((_627 - _477) * _527)) * _543) + _477;
    float _654 = (((sqrt(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) - _448) * _527) * _543) + _448;
    float _659 = cbMtdParam._m0[22u].x + _464.w;
    float _662 = fma(_654, _230, fma(_653, _237, _652 * _223));
    float _665 = fma(_654, _231, fma(_653, _238, _652 * _224));
    float _668 = fma(_654, _232, fma(_653, _239, _652 * _225));
    float _672 = inversesqrt(dot(vec3(_662, _665, _668), vec3(_662, _665, _668)));
    float _673 = _672 * _662;
    float _674 = _672 * _665;
    float _675 = _672 * _668;
    float _3985 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _676 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4007 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4018 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4029 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4040 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _681 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _746 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _736);
    float _747 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _736);
    float _748 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _736);
    float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
    float _753 = _746 * _752;
    float _754 = _747 * _752;
    float _755 = _748 * _752;
    vec4 _760 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _762 = _760.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _934 = sqrt(((_746 * _746) + (_747 * _747)) + (_748 * _748));
        float _940 = (cbMatDynParam._m0[5u].x * _934) + cbMatDynParam._m0[5u].y;
        float _4051 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _945 = (cbMatDynParam._m0[5u].z * _934) + cbMatDynParam._m0[5u].w;
        float _4062 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) - _941)) + _941) < ((_762 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _773 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _774 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _792 = fma(_675, cbSceneParam._m0[5u].z, fma(_674, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _673));
    float _795 = fma(_675, cbSceneParam._m0[6u].z, fma(_674, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _673));
    float _798 = fma(_675, cbSceneParam._m0[7u].z, fma(_674, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _673));
    uint _811 = _242 + 9u;
    uint _812 = _811 + uint(cbMatDynParam._m0[0u].w);
    float _818 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * cbInstanceData._m0[_812].x;
    float _819 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * cbInstanceData._m0[_812].y;
    float _820 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * cbInstanceData._m0[_812].z;
    float _4073 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _824 = 1.0 - _681;
    float _825 = _821 * _824;
    float _826 = _822 * _824;
    float _827 = _823 * _824;
    float _832 = (_821 + (-0.039999999105930328369140625)) * _681;
    float _833 = (_822 + (-0.039999999105930328369140625)) * _681;
    float _834 = (_823 + (-0.039999999105930328369140625)) * _681;
    float _835 = _832 + 0.039999999105930328369140625;
    float _837 = _833 + 0.039999999105930328369140625;
    float _838 = _834 + 0.039999999105930328369140625;
    vec4 _847 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _773, cbSceneParam._m0[86u].y * _774));
    float _851 = ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * TEXCOORD_5.w) * _847.x;
    float _852 = dot(vec3(_673, _674, _675), vec3(_753, _754, _755));
    float _855 = _852 * 2.0;
    float _859 = (_855 * _673) - _753;
    float _860 = (_855 * _674) - _754;
    float _861 = (_855 * _675) - _755;
    float _865 = abs(dot(vec3(_753, _754, _755), vec3(_673, _674, _675)));
    float _4106 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _867 = sqrt(_676);
    float _880 = exp2((_867 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_867 * 3.0));
    float _886 = (1.0 - _880) * ((_867 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _887 = _880 * _867;
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1252;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _977 = fma(_923, cbModelParam._m0[26u].z, fma(_919, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _915));
        float _981 = fma(_923, cbModelParam._m0[27u].z, fma(_919, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _915));
        float _985 = fma(_923, cbModelParam._m0[28u].z, fma(_919, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _915));
        float _1010 = _915 + _673;
        float _1011 = _919 + _674;
        float _1012 = _923 + _675;
        float _1022 = fma(_1012, cbModelParam._m0[26u].z, fma(_1011, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1010)) - _977;
        float _1023 = fma(_1012, cbModelParam._m0[27u].z, fma(_1011, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1010)) - _981;
        float _1024 = fma(_1012, cbModelParam._m0[28u].z, fma(_1011, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1010)) - _985;
        float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
        float _1041 = ((_1028 * _1022) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_977 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1028 * _1023) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_981 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1028 * _1024) / cbModelParam._m0[34u].z) + ((((((_985 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        float _1080 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1046.x + (-0.5));
        float _1082 = _1080 * (_1046.y + (-0.5));
        float _1083 = _1080 * (_1046.z + (-0.5));
        float _1090 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1053.x + (-0.5));
        float _1092 = _1090 * (_1053.y + (-0.5));
        float _1093 = _1090 * (_1053.z + (-0.5));
        float _1100 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1060.x + (-0.5));
        float _1102 = _1100 * (_1060.y + (-0.5));
        float _1103 = _1100 * (_1060.z + (-0.5));
        float _1110 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1067.x + (-0.5));
        float _1112 = _1110 * (_1067.y + (-0.5));
        float _1113 = _1110 * (_1067.z + (-0.5));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = _1081 * 0.5;
        float _1118 = _1091 * 0.5;
        float _1119 = _1101 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1134 = (dot(vec3(_673, _674, _675), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1144 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _4154 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1146 + 1.0))) + _1151) * _1114;
        float _1161 = _1082 * 0.5;
        float _1162 = _1092 * 0.5;
        float _1163 = _1102 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_673, _674, _675), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _4187 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1188 + 1.0))) + _1193) * _1115;
        float _1203 = _1083 * 0.5;
        float _1204 = _1093 * 0.5;
        float _1205 = _1103 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_673, _674, _675), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _4220 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1230 + 1.0))) + _1235) * _1116;
        _1252 = _1083;
        _1254 = _1082;
        _1255 = _1081;
        _1256 = _1093;
        _1257 = _1092;
        _1258 = _1091;
        _1259 = _1103;
        _1260 = _1102;
        _1261 = _1101;
        _1262 = _1116;
        _1263 = _1115;
        _1264 = _1114;
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
    }
    else
    {
        _1252 = _1253;
        _1254 = _1253;
        _1255 = _1253;
        _1256 = _1253;
        _1257 = _1253;
        _1258 = _1253;
        _1259 = _1253;
        _1260 = _1253;
        _1261 = _1253;
        _1262 = _1253;
        _1263 = _1253;
        _1264 = _1253;
        _1265 = 0.0;
        _1266 = 0.0;
        _1267 = 0.0;
    }
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1295 = fma(_923, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915));
        float _1299 = fma(_923, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915));
        float _1303 = fma(_923, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915));
        float _1326 = _915 + _673;
        float _1327 = _919 + _674;
        float _1328 = _923 + _675;
        float _1338 = fma(_1328, cbModelParam._m0[30u].z, fma(_1327, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1326)) - _1295;
        float _1339 = fma(_1328, cbModelParam._m0[31u].z, fma(_1327, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1326)) - _1299;
        float _1340 = fma(_1328, cbModelParam._m0[32u].z, fma(_1327, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1326)) - _1303;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1295 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1299 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[35u].z) + ((((((_1303 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1394 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1361.x + (-0.5));
        float _1396 = _1394 * (_1361.y + (-0.5));
        float _1397 = _1394 * (_1361.z + (-0.5));
        float _1404 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1368.x + (-0.5));
        float _1406 = _1404 * (_1368.y + (-0.5));
        float _1407 = _1404 * (_1368.z + (-0.5));
        float _1414 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1375.x + (-0.5));
        float _1416 = _1414 * (_1375.y + (-0.5));
        float _1417 = _1414 * (_1375.z + (-0.5));
        float _1424 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1382.x + (-0.5));
        float _1426 = _1424 * (_1382.y + (-0.5));
        float _1427 = _1424 * (_1382.z + (-0.5));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = _1395 * 0.5;
        float _1432 = _1405 * 0.5;
        float _1433 = _1415 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_673, _674, _675), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4283 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1458 + 1.0))) + _1463) * _1428;
        float _1473 = _1396 * 0.5;
        float _1474 = _1406 * 0.5;
        float _1475 = _1416 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_673, _674, _675), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4316 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1500 + 1.0))) + _1505) * _1429;
        float _1515 = _1397 * 0.5;
        float _1516 = _1407 * 0.5;
        float _1517 = _1417 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_673, _674, _675), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4349 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1542 + 1.0))) + _1547) * _1430;
        _1564 = _1397;
        _1565 = _1396;
        _1566 = _1395;
        _1567 = _1407;
        _1568 = _1406;
        _1569 = _1405;
        _1570 = _1417;
        _1571 = _1416;
        _1572 = _1415;
        _1573 = _1430;
        _1574 = _1429;
        _1575 = _1428;
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _1253;
        _1565 = _1253;
        _1566 = _1253;
        _1567 = _1253;
        _1568 = _1253;
        _1569 = _1253;
        _1570 = _1253;
        _1571 = _1253;
        _1572 = _1253;
        _1573 = _1253;
        _1574 = _1253;
        _1575 = _1253;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1265)) + _1265;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1266)) + _1266;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1267)) + _1267;
    float _1611 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1588));
    float _1632 = _859 * 0.5;
    float _1633 = _860 * 0.5;
    float _1634 = _861 * 0.5;
    float _1635 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1638 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1641 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1675;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1648 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1252, _1256, _1259, _1262));
        float _1652 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1656 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1663 = dot(vec4(cbModelParam._m0[39u]), vec4(_1632, _1633, _1634, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1686;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1677 = dot(vec4(cbModelParam._m0[40u]), vec4(_1632, _1633, _1634, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1690 = (_1686 * cbModelParam._m0[1u].x) + (_1675 * (1.0 - cbModelParam._m0[1u].x));
    float _1700 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _676);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1700 : min(cbModelParam._m0[25u].z, _1700));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1749 = fma(_923, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915)) + cbModelParam._m0[13u].w;
        float _1753 = fma(_923, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915)) + cbModelParam._m0[14u].w;
        float _1757 = fma(_923, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915)) + cbModelParam._m0[15u].w;
        float _1760 = fma(_861, cbModelParam._m0[13u].z, fma(_860, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859));
        float _1763 = fma(_861, cbModelParam._m0[14u].z, fma(_860, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859));
        float _1766 = fma(_861, cbModelParam._m0[15u].z, fma(_860, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859));
        float _1794;
        if (_1760 > 0.0)
        {
            _1794 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1794 = frontier_phi_17_15_ladder;
        }
        float _1966;
        if (_1763 > 0.0)
        {
            _1966 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1966 = frontier_phi_26_22_ladder;
        }
        float _2261;
        if (_1766 > 0.0)
        {
            _2261 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2261 = frontier_phi_38_33_ladder;
        }
        float _2263 = isnan(_1966) ? _1794 : (isnan(_1794) ? _1966 : min(_1794, _1966));
        float _2264 = isnan(_2261) ? _2263 : (isnan(_2263) ? _2261 : min(_2263, _2261));
        float _2268 = (_2264 * _1760) + _1749;
        float _2269 = (_2264 * _1763) + _1753;
        float _2270 = (_2264 * _1766) + _1757;
        float _2271 = _2264 * 9.9999997473787516355514526367188e-05;
        float _2273 = (-1.0) - _2271;
        float _2275 = _2271 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2270 > _2275) || ((_2270 < _2273) || ((_2269 > _2275) || ((_2269 < _2273) || ((_2268 < _2273) || (_2268 > _2275))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2270, cbModelParam._m0[9u].z, fma(_2269, cbModelParam._m0[9u].y, _2268 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2270, cbModelParam._m0[10u].z, fma(_2269, cbModelParam._m0[10u].y, _2268 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2270, cbModelParam._m0[11u].z, fma(_2269, cbModelParam._m0[11u].y, _2268 * cbModelParam._m0[11u].x))), _1701);
            frontier_phi_16_38_ladder = _2415.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2415.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2415.x * cbModelParam._m0[1u].y;
        }
        _1782 = frontier_phi_16_38_ladder_2;
        _1784 = frontier_phi_16_38_ladder_1;
        _1786 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1770 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_859, _860, _861), _1701);
        _1782 = _1770.x * cbModelParam._m0[1u].y;
        _1784 = _1770.y * cbModelParam._m0[1u].y;
        _1786 = _1770.z * cbModelParam._m0[1u].y;
    }
    float _1790 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _676);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1790 : min(cbModelParam._m0[25u].w, _1790));
    float _1881;
    float _1883;
    float _1885;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1845 = fma(_923, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915)) + cbModelParam._m0[21u].w;
        float _1849 = fma(_923, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915)) + cbModelParam._m0[22u].w;
        float _1853 = fma(_923, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915)) + cbModelParam._m0[23u].w;
        float _1856 = fma(_861, cbModelParam._m0[21u].z, fma(_860, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859));
        float _1859 = fma(_861, cbModelParam._m0[22u].z, fma(_860, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859));
        float _1862 = fma(_861, cbModelParam._m0[23u].z, fma(_860, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859));
        float _1971;
        if (_1856 > 0.0)
        {
            _1971 = abs((1.0 - _1845) / _1856);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1845 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1971 = frontier_phi_28_24_ladder;
        }
        float _2288;
        if (_1859 > 0.0)
        {
            _2288 = abs((1.0 - _1849) / _1859);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1849 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2288 = frontier_phi_40_35_ladder;
        }
        float _2626;
        if (_1862 > 0.0)
        {
            _2626 = abs((1.0 - _1853) / _1862);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1853 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2626 = frontier_phi_50_47_ladder;
        }
        float _2628 = isnan(_2288) ? _1971 : (isnan(_1971) ? _2288 : min(_1971, _2288));
        float _2629 = isnan(_2626) ? _2628 : (isnan(_2628) ? _2626 : min(_2628, _2626));
        float _2633 = (_2629 * _1856) + _1845;
        float _2634 = (_2629 * _1859) + _1849;
        float _2635 = (_2629 * _1862) + _1853;
        float _2636 = _2629 * 9.9999997473787516355514526367188e-05;
        float _2637 = (-1.0) - _2636;
        float _2639 = _2636 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2635 > _2639) || ((_2635 < _2637) || ((_2634 > _2639) || ((_2634 < _2637) || ((_2633 < _2637) || (_2633 > _2639))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2757 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2635, cbModelParam._m0[17u].z, fma(_2634, cbModelParam._m0[17u].y, _2633 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2635, cbModelParam._m0[18u].z, fma(_2634, cbModelParam._m0[18u].y, _2633 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2635, cbModelParam._m0[19u].z, fma(_2634, cbModelParam._m0[19u].y, _2633 * cbModelParam._m0[19u].x))), _1791);
            frontier_phi_25_50_ladder = _2757.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2757.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2757.x * cbModelParam._m0[1u].z;
        }
        _1881 = frontier_phi_25_50_ladder_2;
        _1883 = frontier_phi_25_50_ladder_1;
        _1885 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_859, _860, _861), _1791);
        _1881 = _1865.x * cbModelParam._m0[1u].z;
        _1883 = _1865.y * cbModelParam._m0[1u].z;
        _1885 = _1865.z * cbModelParam._m0[1u].z;
    }
    float _1898 = (((_886 * _835) + _887) * _851) * ((cbModelParam._m0[1u].w * (_1881 - _1782)) + _1782);
    float _1900 = (((_886 * _837) + _887) * _851) * ((cbModelParam._m0[1u].w * (_1883 - _1784)) + _1784);
    float _1902 = (((_886 * _838) + _887) * _851) * ((cbModelParam._m0[1u].w * (_1885 - _1786)) + _1786);
    float _1905 = fma(_1902, cbSceneParam._m0[89u].z, fma(_1900, cbSceneParam._m0[89u].y, _1898 * cbSceneParam._m0[89u].x));
    float _1908 = fma(_1902, cbSceneParam._m0[90u].z, fma(_1900, cbSceneParam._m0[90u].y, _1898 * cbSceneParam._m0[90u].x));
    float _1911 = fma(_1902, cbSceneParam._m0[91u].z, fma(_1900, cbSceneParam._m0[91u].y, _1898 * cbSceneParam._m0[91u].x));
    float _1945 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1949 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1953 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1957 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1958 = _1945 / _1957;
    float _1959 = _1949 / _1957;
    float _1960 = _1953 / _1957;
    float _2107;
    float _2108;
    float _2109;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1987 = ((uint(_1960 > cbSceneParam._m0[59u].y) + uint(_1960 > cbSceneParam._m0[59u].x)) + uint(_1960 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1988 = _1987 + 43u;
        uint _1996 = _1987 + 44u;
        uint _2004 = _1987 + 45u;
        uint _2012 = _1987 + 46u;
        float _2023 = fma(_1957, cbSceneParam._m0[_1988].w, fma(_1953, cbSceneParam._m0[_1988].z, fma(_1949, cbSceneParam._m0[_1988].y, _1945 * cbSceneParam._m0[_1988].x)));
        float _2027 = fma(_1957, cbSceneParam._m0[_1996].w, fma(_1953, cbSceneParam._m0[_1996].z, fma(_1949, cbSceneParam._m0[_1996].y, _1945 * cbSceneParam._m0[_1996].x)));
        float _2035 = fma(_1957, cbSceneParam._m0[_2012].w, fma(_1953, cbSceneParam._m0[_2012].z, fma(_1949, cbSceneParam._m0[_2012].y, _1945 * cbSceneParam._m0[_2012].x)));
        float _2040 = cbSceneParam._m0[33u].z * _2035;
        float _2042 = cbSceneParam._m0[33u].w * _2035;
        float _2045 = fma(_1957, cbSceneParam._m0[_2004].w, fma(_1953, cbSceneParam._m0[_2004].z, fma(_1949, cbSceneParam._m0[_2004].y, _1945 * cbSceneParam._m0[_2004].x))) / _2035;
        float _2093 = (cbSceneParam._m0[33u].x - sqrt(((_1959 * _1959) + (_1958 * _1958)) + (_1960 * _1960))) * cbSceneParam._m0[33u].y;
        float _4475 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2100 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2040 + _2023) / _2035, (_2042 + _2027) / _2035), _2045), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2042 + _2023) / _2035, (_2027 - _2040) / _2035), _2045), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 - _2040) / _2035, (_2027 - _2042) / _2035), _2045), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 - _2042) / _2035, (_2040 + _2027) / _2035), _2045), 0.0)).x), vec4(0.25)));
        _2107 = 1.0 - (_2100 * cbSceneParam._m0[34u].x);
        _2108 = 1.0 - (_2100 * cbSceneParam._m0[34u].y);
        _2109 = 1.0 - (_2100 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2107 = 1.0;
        _2108 = 1.0;
        _2109 = 1.0;
    }
    float _2173;
    float _2175;
    float _2177;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2161 = fma(_1957, cbSceneParam._m0[63u].w, fma(_1953, cbSceneParam._m0[63u].z, fma(_1949, cbSceneParam._m0[63u].y, _1945 * cbSceneParam._m0[63u].x)));
        float _2162 = fma(_1957, cbSceneParam._m0[60u].w, fma(_1953, cbSceneParam._m0[60u].z, fma(_1949, cbSceneParam._m0[60u].y, _1945 * cbSceneParam._m0[60u].x))) / _2161;
        float _2163 = fma(_1957, cbSceneParam._m0[61u].w, fma(_1953, cbSceneParam._m0[61u].z, fma(_1949, cbSceneParam._m0[61u].y, _1945 * cbSceneParam._m0[61u].x))) / _2161;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2162 >= cbSceneParam._m0[64u].x) && (_2163 >= cbSceneParam._m0[64u].y)) && (_2162 <= cbSceneParam._m0[64u].z)) && (_2163 <= cbSceneParam._m0[64u].w))
        {
            float _2301 = fma(_1957, cbSceneParam._m0[62u].w, fma(_1953, cbSceneParam._m0[62u].z, fma(_1949, cbSceneParam._m0[62u].y, _1945 * cbSceneParam._m0[62u].x))) / _2161;
            float _2305 = isnan(cbSceneParam._m0[41u].w) ? _2301 : (isnan(_2301) ? cbSceneParam._m0[41u].w : max(_2301, cbSceneParam._m0[41u].w));
            float _2348 = (cbSceneParam._m0[33u].x - sqrt(((_1959 * _1959) + (_1958 * _1958)) + (_1960 * _1960))) * cbSceneParam._m0[33u].y;
            float _4491 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
            float _2355 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2162, cbSceneParam._m0[33u].w + _2163), _2305), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2162, _2163 - cbSceneParam._m0[33u].z), _2305), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2162 - cbSceneParam._m0[33u].z, _2163 - cbSceneParam._m0[33u].w), _2305), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2162 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2163), _2305), 0.0)).x), vec4(0.25)));
            float _2359 = 1.0 - (_2355 * cbSceneParam._m0[34u].x);
            float _2360 = 1.0 - (_2355 * cbSceneParam._m0[34u].y);
            float _2361 = 1.0 - (_2355 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2361) ? _2109 : (isnan(_2109) ? _2361 : min(_2109, _2361));
            frontier_phi_37_36_ladder_1 = isnan(_2360) ? _2108 : (isnan(_2108) ? _2360 : min(_2108, _2360));
            frontier_phi_37_36_ladder_2 = isnan(_2359) ? _2107 : (isnan(_2107) ? _2359 : min(_2107, _2359));
        }
        else
        {
            frontier_phi_37_36_ladder = _2109;
            frontier_phi_37_36_ladder_1 = _2108;
            frontier_phi_37_36_ladder_2 = _2107;
        }
        _2173 = frontier_phi_37_36_ladder_2;
        _2175 = frontier_phi_37_36_ladder_1;
        _2177 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2173 = _2107;
        _2175 = _2108;
        _2177 = _2109;
    }
    uvec4 _2182 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2184 = _2182.x * 14u;
    uint _2185 = _2184 + 13u;
    float _2192 = _851 + (-1.0);
    float _2197 = (cbLight._m0[_2185].x * _2192) + 1.0;
    float _2198 = (cbLight._m0[_2185].y * _2192) + 1.0;
    float _2199 = (cbLight._m0[_2185].z * _2192) + 1.0;
    float _2200 = (cbLight._m0[_2185].w * _2192) + 1.0;
    uint _2201 = _2184 + 5u;
    float _2207 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
    uint _2211 = _2184 + 4u;
    float _2220 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
    uint _2224 = _2184 | 1u;
    float _2235 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_673, _674, _675));
    float _2238 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_673, _674, _675));
    float _4527 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _4538 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2243 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * 0.3183098733425140380859375;
    float _2245 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * 0.3183098733425140380859375;
    float _2252 = ((cbLight._m0[_2201].x * _2207) * _2245) + (((cbLight._m0[_2211].x * _2173) * _2220) * _2243);
    float _2253 = ((_2207 * cbLight._m0[_2201].y) * _2245) + (((cbLight._m0[_2211].y * _2175) * _2220) * _2243);
    float _2254 = ((_2207 * cbLight._m0[_2201].z) * _2245) + (((cbLight._m0[_2211].z * _2177) * _2220) * _2243);
    uvec4 _2258 = floatBitsToUint(cbLight._m0[_2184 + 12u]);
    bool _2260 = _2258.x == 0u;
    float _2362;
    float _2364;
    float _2366;
    if (_2260)
    {
        _2362 = _2252;
        _2364 = _2253;
        _2366 = _2254;
    }
    else
    {
        uint _2370 = _2184 + 6u;
        float _2386 = (dot(vec3(cbLight._m0[_2184 + 2u].xyz), vec3(_673, _674, _675)) * 0.5) + 0.5;
        float _2387 = _2386 * _2386;
        float _4549 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2388 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2389 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2362 = (((cbLight._m0[_2370].x * 0.3183098733425140380859375) * _2388) * _2389) + _2252;
        _2364 = (((cbLight._m0[_2370].y * 0.3183098733425140380859375) * _2388) * _2389) + _2253;
        _2366 = (((cbLight._m0[_2370].z * 0.3183098733425140380859375) * _2388) * _2389) + _2254;
    }
    bool _2369 = _2258.y == 0u;
    float _2424;
    float _2426;
    float _2428;
    if (_2369)
    {
        _2424 = _2362;
        _2426 = _2364;
        _2428 = _2366;
    }
    else
    {
        uint _2597 = _2184 + 7u;
        float _2613 = (dot(vec3(cbLight._m0[_2184 + 3u].xyz), vec3(_673, _674, _675)) * 0.5) + 0.5;
        float _2614 = _2613 * _2613;
        float _4565 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2615 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2616 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2424 = (((cbLight._m0[_2597].x * 0.3183098733425140380859375) * _2615) * _2616) + _2362;
        _2426 = (((cbLight._m0[_2597].y * 0.3183098733425140380859375) * _2615) * _2616) + _2364;
        _2428 = (((cbLight._m0[_2597].z * 0.3183098733425140380859375) * _2615) * _2616) + _2366;
    }
    uint _2431 = _2184 + 8u;
    float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _676) * 0.949999988079071044921875);
    float _2445 = _2444 * _2444;
    float _2446 = cbLight._m0[_2184].x + _753;
    float _2447 = cbLight._m0[_2184].y + _754;
    float _2448 = cbLight._m0[_2184].z + _755;
    float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
    float _2453 = _2452 * _2446;
    float _2454 = _2452 * _2447;
    float _2455 = _2452 * _2448;
    float _2456 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2184].xyz));
    float _4581 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _4592 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _2460 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2461 = dot(vec3(_673, _674, _675), vec3(_2453, _2454, _2455));
    float _4603 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2465 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2453, _2454, _2455));
    float _4614 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2469 = _2445 * _2445;
    float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
    float _2481 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
    float _2482 = 0.959999978542327880859375 - _832;
    float _2484 = 0.959999978542327880859375 - _833;
    float _2485 = 0.959999978542327880859375 - _834;
    float _2492 = 1.0 - _2445;
    float _2503 = (0.5 / (((_2460 * ((_2459 * _2492) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2460 * _2492) + _2445) * _2459))) * _2459;
    float _4625 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2505 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
    uint _2519 = _2184 + 9u;
    float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _676) * 0.949999988079071044921875);
    float _2531 = _2530 * _2530;
    float _2532 = cbLight._m0[_2224].x + _753;
    float _2533 = cbLight._m0[_2224].y + _754;
    float _2534 = cbLight._m0[_2224].z + _755;
    float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
    float _2539 = _2538 * _2532;
    float _2540 = _2538 * _2533;
    float _2541 = _2538 * _2534;
    float _2542 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2224].xyz));
    float _4636 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2546 = dot(vec3(_673, _674, _675), vec3(_2539, _2540, _2541));
    float _4647 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2550 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2539, _2540, _2541));
    float _4658 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2554 = _2531 * _2531;
    float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
    float _2565 = exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0);
    float _2572 = 1.0 - _2531;
    float _2582 = (0.5 / (((_2460 * ((_2545 * _2572) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2460 * _2572) + _2531) * _2545))) * _2545;
    float _4669 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2584 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
    float _2594 = (((((_2565 * _2482) + _835) * cbLight._m0[_2519].x) * _2584) * _2207) + ((((cbLight._m0[_2431].x * _2173) * ((_2481 * _2482) + _835)) * _2505) * _2220);
    float _2595 = (((((_2565 * _2484) + _837) * cbLight._m0[_2519].y) * _2584) * _2207) + ((((cbLight._m0[_2431].y * _2175) * ((_2481 * _2484) + _837)) * _2505) * _2220);
    float _2596 = (((((_2565 * _2485) + _838) * cbLight._m0[_2519].z) * _2584) * _2207) + ((((cbLight._m0[_2431].z * _2177) * ((_2481 * _2485) + _838)) * _2505) * _2220);
    float _2652;
    float _2654;
    float _2656;
    if (_2260)
    {
        _2652 = _2594;
        _2654 = _2595;
        _2656 = _2596;
    }
    else
    {
        uint _2658 = _2184 + 2u;
        uint _2662 = _2184 + 10u;
        float _2676 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2658].w)) * _676) * 0.949999988079071044921875);
        float _2677 = _2676 * _2676;
        float _2678 = cbLight._m0[_2658].x + _753;
        float _2679 = cbLight._m0[_2658].y + _754;
        float _2680 = cbLight._m0[_2658].z + _755;
        float _2684 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
        float _2685 = _2684 * _2678;
        float _2686 = _2684 * _2679;
        float _2687 = _2684 * _2680;
        float _2688 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2658].xyz));
        float _4680 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2692 = dot(vec3(_673, _674, _675), vec3(_2685, _2686, _2687));
        float _4691 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2696 = dot(vec3(cbLight._m0[_2658].xyz), vec3(_2685, _2686, _2687));
        float _4702 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2700 = _2677 * _2677;
        float _2704 = ((_2695 * _2695) * (_2700 + (-1.0))) + 1.0;
        float _2711 = exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0);
        float _2718 = 1.0 - _2677;
        float _2728 = (0.5 / (((_2460 * ((_2691 * _2718) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2460 * _2718) + _2677) * _2691))) * _2691;
        float _4713 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2730 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2700 / ((_2704 * _2704) * 3.141590118408203125));
        float _2731 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2652 = (((((_2711 * _2482) + _835) * cbLight._m0[_2662].x) * _2730) * _2731) + _2594;
        _2654 = (((((_2711 * _2484) + _837) * cbLight._m0[_2662].y) * _2730) * _2731) + _2595;
        _2656 = (((((_2711 * _2485) + _838) * cbLight._m0[_2662].z) * _2730) * _2731) + _2596;
    }
    float _2762;
    float _2764;
    float _2766;
    if (_2369)
    {
        _2762 = _2652;
        _2764 = _2654;
        _2766 = _2656;
    }
    else
    {
        uint _2773 = _2184 + 3u;
        uint _2777 = _2184 + 11u;
        float _2791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2773].w)) * _676) * 0.949999988079071044921875);
        float _2792 = _2791 * _2791;
        float _2793 = cbLight._m0[_2773].x + _753;
        float _2794 = cbLight._m0[_2773].y + _754;
        float _2795 = cbLight._m0[_2773].z + _755;
        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
        float _2800 = _2799 * _2793;
        float _2801 = _2799 * _2794;
        float _2802 = _2799 * _2795;
        float _2803 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2773].xyz));
        float _4729 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2807 = dot(vec3(_673, _674, _675), vec3(_2800, _2801, _2802));
        float _4740 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2811 = dot(vec3(cbLight._m0[_2773].xyz), vec3(_2800, _2801, _2802));
        float _4751 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2815 = _2792 * _2792;
        float _2819 = ((_2810 * _2810) * (_2815 + (-1.0))) + 1.0;
        float _2826 = exp2(log2(1.0 - (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) * 5.0);
        float _2833 = 1.0 - _2792;
        float _2843 = (0.5 / (((_2460 * ((_2806 * _2833) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2460 * _2833) + _2792) * _2806))) * _2806;
        float _4762 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2845 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2815 / ((_2819 * _2819) * 3.141590118408203125));
        float _2846 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2762 = (((((_2826 * _2482) + _835) * cbLight._m0[_2777].x) * _2845) * _2846) + _2652;
        _2764 = (((((_2826 * _2484) + _837) * cbLight._m0[_2777].y) * _2845) * _2846) + _2654;
        _2766 = (((((_2826 * _2485) + _838) * cbLight._m0[_2777].z) * _2845) * _2846) + _2656;
    }
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    if (_2182.y == 0u)
    {
        uvec4 _2867 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2868 = _2867.x;
        uint _2879 = uint((float(_2867.y) * floor(float(uint(cbSceneParam._m0[85u].y * _774) / _2868))) + floor(float(uint(cbSceneParam._m0[85u].x * _773) / _2868)));
        float _2889 = (log2(_1960 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2890 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        uint _2893 = uint(isnan(14.0) ? _2890 : (isnan(_2890) ? 14.0 : min(_2890, 14.0)));
        uvec4 _2898 = texelFetch(g_lightClusterGridBuffer, int(((_2893 << 2u) + (_2879 << 6u)) >> 2u));
        uint _2899 = _2898.x;
        uint _2900 = _2867.z;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        if (((((1u << ((_2900 >> 4u) & 15u)) + 4294967295u) & _2899) == 0u) || ((_2900 & 240u) == 0u))
        {
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
        }
        else
        {
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            uint _3138 = 0u;
            uint _3147;
            bool _3148;
            for (;;)
            {
                _3147 = texelFetch(g_lightClassification, int((((_2893 << 5u) + (_2879 << 9u)) + (_3138 << 2u)) >> 2u)).x;
                _3148 = _3147 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3148)
                {
                    frontier_phi_71_pred = _3137;
                    frontier_phi_71_pred_1 = _3136;
                    frontier_phi_71_pred_2 = _3135;
                    frontier_phi_71_pred_3 = _3134;
                    frontier_phi_71_pred_4 = _3133;
                    frontier_phi_71_pred_5 = _3132;
                }
                else
                {
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    uint _3283;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3147;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    for (;;)
                    {
                        uint _3287 = uint(findLSB(_3283)) + (_3138 << 5u);
                        uint _3284 = (_3283 + 4294967295u) & _3283;
                        uint _3289 = _3287 * 48u;
                        vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 3u)).x));
                        uint _3309 = (_3287 * 48u) + 4u;
                        vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3309)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 3u)).x));
                        uint _3328 = (_3287 * 48u) + 8u;
                        vec3 _3339 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3328)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 2u)).x));
                        float _3343 = _3303.x - _1958;
                        float _3344 = _3303.y - _1959;
                        float _3345 = _3303.z - _1960;
                        float _3346 = dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345));
                        float _3349 = inversesqrt(_3346);
                        float _3350 = _3349 * _3343;
                        float _3351 = _3349 * _3344;
                        float _3352 = _3349 * _3345;
                        float _3353 = dot(vec3(_792, _795, _798), vec3(_3350, _3351, _3352));
                        float _3358 = 1.0 - (_3346 * _3303.w);
                        float _4788 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3359 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3360 = sqrt(_3346) * _3322.w;
                        float _3363 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                        float _3364 = _3363 * _3363;
                        float _3367 = ((1.0 - _3364) * _3353) + _3364;
                        float _3370 = _3360 * _3360;
                        float _3374 = ((isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0))) * _3359) / ((_3370 * 0.699999988079071044921875) + 1.0);
                        float _3378 = (-0.0) - _1958;
                        float _3379 = (-0.0) - _1959;
                        float _3380 = (-0.0) - _1960;
                        float _3384 = inversesqrt(dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380)));
                        float _3385 = _3384 * _3378;
                        float _3386 = _3384 * _3379;
                        float _3387 = _3384 * _3380;
                        float _3394 = exp2(log2(1.0 / ((_3370 * 3.5) + 5.0)) * 0.25);
                        float _3395 = 1.0 - _867;
                        float _3402 = sqrt(1.0 - ((1.0 - (_3395 * _3395)) * (1.0 - (_3394 * _3394))));
                        float _3403 = _3402 * _3402;
                        float _3404 = _3403 * _3403;
                        float _3405 = _3385 + _3350;
                        float _3406 = _3386 + _3351;
                        float _3407 = _3387 + _3352;
                        float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                        float _3415 = dot(vec3(_792, _795, _798), vec3(_3385, _3386, _3387));
                        float _4804 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                        float _3419 = dot(vec3(_792, _795, _798), vec3(_3411 * _3405, _3411 * _3406, _3411 * _3407));
                        float _4815 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3426 = ((_3422 * _3422) * (_3404 + (-1.0))) + 1.0;
                        float _3427 = _3363 * _3403;
                        float _3428 = _3427 * _3427;
                        float _3431 = ((1.0 - _3428) * _3353) + _3428;
                        float _4826 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3432 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3433 = 1.0 - _3403;
                        float _3443 = (0.5 / (((_3432 * ((_3418 * _3433) + _3403)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3403) * _3418))) * _3432;
                        float _4837 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3454 = (((_3404 * 3.1415927410125732421875) * (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) / ((_3426 * _3426) * ((_3370 * 2.1991131305694580078125) + 3.141590118408203125))) * _3359;
                        _3207 = (_3374 * _3322.x) + _3280;
                        _3208 = (_3374 * _3322.y) + _3281;
                        _3209 = (_3374 * _3322.z) + _3282;
                        _3204 = (_3454 * _3339.x) + _3277;
                        _3205 = (_3454 * _3339.y) + _3278;
                        _3206 = (_3454 * _3339.z) + _3279;
                        if (_3284 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3284;
                        }
                    }
                    frontier_phi_71_pred = _3209;
                    frontier_phi_71_pred_1 = _3208;
                    frontier_phi_71_pred_2 = _3207;
                    frontier_phi_71_pred_3 = _3206;
                    frontier_phi_71_pred_4 = _3205;
                    frontier_phi_71_pred_5 = _3204;
                }
                _2990 = frontier_phi_71_pred;
                _2988 = frontier_phi_71_pred_1;
                _2986 = frontier_phi_71_pred_2;
                _2984 = frontier_phi_71_pred_3;
                _2982 = frontier_phi_71_pred_4;
                _2980 = frontier_phi_71_pred_5;
                uint _3139 = _3138 + 1u;
                if (_3139 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3132 = _2980;
                    _3133 = _2982;
                    _3134 = _2984;
                    _3135 = _2986;
                    _3136 = _2988;
                    _3137 = _2990;
                    _3138 = _3139;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
        }
        uvec4 _2993 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2994 = _2993.z;
        uint _2996 = (_2994 >> 8u) & 15u;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        if (((4294967295u << _2996) & _2899) == 0u)
        {
            _3100 = _2979;
            _3102 = _2981;
            _3104 = _2983;
            _3106 = _2985;
            _3108 = _2987;
            _3110 = _2989;
        }
        else
        {
            float _3125 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
            float _3126 = _3125 * _1958;
            float _3127 = _3125 * _1959;
            float _3128 = _3125 * _1960;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2996 < ((_2994 >> 12u) & 15u))
            {
                float _3101;
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3260 = _2979;
                float _3261 = _2981;
                float _3262 = _2983;
                float _3263 = _2985;
                float _3264 = _2987;
                float _3265 = _2989;
                uint _3266 = _2996;
                uint _3275;
                bool _3276;
                for (;;)
                {
                    _3275 = texelFetch(g_lightClassification, int((((_2893 << 5u) + (_2879 << 9u)) + (_3266 << 2u)) >> 2u)).x;
                    _3276 = _3275 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3276)
                    {
                        frontier_phi_82_pred = _3265;
                        frontier_phi_82_pred_1 = _3264;
                        frontier_phi_82_pred_2 = _3263;
                        frontier_phi_82_pred_3 = _3262;
                        frontier_phi_82_pred_4 = _3261;
                        frontier_phi_82_pred_5 = _3260;
                    }
                    else
                    {
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3481 = _3260;
                        float _3482 = _3261;
                        float _3483 = _3262;
                        float _3484 = _3263;
                        float _3485 = _3264;
                        float _3486 = _3265;
                        uint _3487 = _3275;
                        uint _3488;
                        vec4 _3513;
                        float _3514;
                        vec4 _3529;
                        vec3 _3541;
                        vec4 _3556;
                        vec4 _3572;
                        float _3618;
                        bool _3619;
                        for (;;)
                        {
                            uint _3498 = ((_3266 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3487));
                            _3488 = (_3487 + 4294967295u) & _3487;
                            uint _3500 = _3498 * 40u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            _3514 = _3513.w;
                            uint _3516 = (_3498 * 40u) + 4u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3498 * 40u) + 8u;
                            _3541 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x));
                            uint _3543 = (_3498 * 40u) + 16u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3559 = (_3498 * 40u) + 20u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3498 * 40u) + 24u;
                            vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3593 = (_3498 * 40u) + 28u;
                            vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            _3618 = fma(_1960, _3606.z, fma(_1959, _3606.y, _3606.x * _1958)) + _3606.w;
                            _3619 = !((fma(_1960, _3587.z, fma(_1959, _3587.y, _3587.x * _1958)) + _3587.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3619)
                            {
                                float _3646 = _3513.x - _1958;
                                float _3647 = _3513.y - _1959;
                                float _3648 = _3513.z - _1960;
                                float _3649 = dot(vec3(_3646, _3647, _3648), vec3(_3646, _3647, _3648));
                                float _3652 = inversesqrt(_3649);
                                float _3653 = _3652 * _3646;
                                float _3654 = _3652 * _3647;
                                float _3655 = _3652 * _3648;
                                float _3659 = 1.0 - (_3649 / (_3514 * _3514));
                                float _4848 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3664 = sqrt(_3649) * _3529.w;
                                float _3666 = 1.39999997615814208984375 / (_3664 + 1.39999997615814208984375);
                                float _3667 = _3666 * _3666;
                                float _3670 = ((1.0 - _3667) * dot(vec3(_3653, _3654, _3655), vec3(_792, _795, _798))) + _3667;
                                float _3673 = _3664 * _3664;
                                float _3677 = (fma(_1960, _3556.z, fma(_1959, _3556.y, _3556.x * _1958)) + _3556.w) / _3618;
                                float _3678 = (fma(_1960, _3572.z, fma(_1959, _3572.y, _3572.x * _1958)) + _3572.w) / _3618;
                                float _3682 = 1.0 - dot(vec2(_3677, _3678), vec2(_3677, _3678));
                                float _4864 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3684 = _3683 * (((isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0))) * _3660) / ((_3673 * 0.699999988079071044921875) + 1.0));
                                float _3696 = exp2(log2(1.0 / ((_3673 * 3.5) + 5.0)) * 0.25);
                                float _3697 = 1.0 - _867;
                                float _3704 = sqrt(1.0 - ((1.0 - (_3697 * _3697)) * (1.0 - (_3696 * _3696))));
                                float _3705 = _3704 * _3704;
                                float _3706 = _3705 * _3705;
                                float _3707 = _3653 - _3126;
                                float _3708 = _3654 - _3127;
                                float _3709 = _3655 - _3128;
                                float _3713 = inversesqrt(dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709)));
                                float _3717 = dot(vec3(_792, _795, _798), vec3((-0.0) - _3126, (-0.0) - _3127, (-0.0) - _3128));
                                float _4875 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3721 = dot(vec3(_792, _795, _798), vec3(_3713 * _3707, _3713 * _3708, _3713 * _3709));
                                float _4886 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3728 = ((_3724 * _3724) * (_3706 + (-1.0))) + 1.0;
                                float _3729 = _3666 * _3705;
                                float _3730 = _3729 * _3729;
                                float _3736 = ((1.0 - _3730) * dot(vec3(_792, _795, _798), vec3(_3653, _3654, _3655))) + _3730;
                                float _4897 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3737 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3738 = 1.0 - _3705;
                                float _3748 = (0.5 / (((_3737 * ((_3720 * _3738) + _3705)) + 9.9999999392252902907785028219223e-09) + (((_3737 * _3738) + _3705) * _3720))) * _3737;
                                float _4908 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3758 = (_3683 * _3660) * (((_3706 * 3.1415927410125732421875) * (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0)))) / ((_3728 * _3728) * ((_3673 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3684 * _3529.z;
                                frontier_phi_88_pred_1 = _3684 * _3529.y;
                                frontier_phi_88_pred_2 = _3684 * _3529.x;
                                frontier_phi_88_pred_3 = _3758 * _3541.z;
                                frontier_phi_88_pred_4 = _3758 * _3541.y;
                                frontier_phi_88_pred_5 = _3758 * _3541.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3767 = frontier_phi_88_pred;
                            _3766 = frontier_phi_88_pred_1;
                            _3765 = frontier_phi_88_pred_2;
                            _3764 = frontier_phi_88_pred_3;
                            _3763 = frontier_phi_88_pred_4;
                            _3762 = frontier_phi_88_pred_5;
                            _3471 = _3765 + _3484;
                            _3472 = _3766 + _3485;
                            _3473 = _3767 + _3486;
                            _3468 = _3762 + _3481;
                            _3469 = _3763 + _3482;
                            _3470 = _3764 + _3483;
                            if (_3488 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3488;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3473;
                        frontier_phi_82_pred_1 = _3472;
                        frontier_phi_82_pred_2 = _3471;
                        frontier_phi_82_pred_3 = _3470;
                        frontier_phi_82_pred_4 = _3469;
                        frontier_phi_82_pred_5 = _3468;
                    }
                    _3111 = frontier_phi_82_pred;
                    _3109 = frontier_phi_82_pred_1;
                    _3107 = frontier_phi_82_pred_2;
                    _3105 = frontier_phi_82_pred_3;
                    _3103 = frontier_phi_82_pred_4;
                    _3101 = frontier_phi_82_pred_5;
                    uint _3267 = _3266 + 1u;
                    if (_3267 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3260 = _3101;
                        _3261 = _3103;
                        _3262 = _3105;
                        _3263 = _3107;
                        _3264 = _3109;
                        _3265 = _3111;
                        _3266 = _3267;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3107;
                frontier_phi_63_64_ladder_1 = _3111;
                frontier_phi_63_64_ladder_2 = _3109;
                frontier_phi_63_64_ladder_3 = _3105;
                frontier_phi_63_64_ladder_4 = _3103;
                frontier_phi_63_64_ladder_5 = _3101;
            }
            else
            {
                frontier_phi_63_64_ladder = _2985;
                frontier_phi_63_64_ladder_1 = _2989;
                frontier_phi_63_64_ladder_2 = _2987;
                frontier_phi_63_64_ladder_3 = _2983;
                frontier_phi_63_64_ladder_4 = _2981;
                frontier_phi_63_64_ladder_5 = _2979;
            }
            _3100 = frontier_phi_63_64_ladder_5;
            _3102 = frontier_phi_63_64_ladder_4;
            _3104 = frontier_phi_63_64_ladder_3;
            _3106 = frontier_phi_63_64_ladder;
            _3108 = frontier_phi_63_64_ladder_2;
            _3110 = frontier_phi_63_64_ladder_1;
        }
        float _3115 = isnan(1.0) ? _851 : (isnan(_851) ? 1.0 : min(_851, 1.0));
        _2912 = (_3115 * _3106) + _2424;
        _2914 = (_3115 * _3108) + _2426;
        _2916 = (_3115 * _3110) + _2428;
        _2918 = ((_3100 * _835) * _3115) + _2762;
        _2920 = ((_3102 * _837) * _3115) + _2764;
        _2922 = ((_3104 * _838) * _3115) + _2766;
    }
    else
    {
        _2912 = _2424;
        _2914 = _2426;
        _2916 = _2428;
        _2918 = _2762;
        _2920 = _2764;
        _2922 = _2766;
    }
    float _4924 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4935 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4946 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _2939 = ((isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2912 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _851))) + ((_2918 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    float _2940 = ((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2914 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _851))) + ((_2920 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    float _2941 = ((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2916 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _851))) + ((_2922 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    uint _2942 = _242 + 6u;
    float _2950 = _773 / cbSceneParam._m0[86u].x;
    float _2951 = _774 / cbSceneParam._m0[86u].y;
    vec4 _2965 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2950, _2951, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2967 = _2965.x;
    float _2968 = _2965.y;
    float _2969 = _2965.z;
    float _2970 = _2965.w;
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _3004 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _3005 = _3004 / _695;
        float _3016 = _3005 * _746;
        float _3017 = _747 * _3005;
        float _3018 = (-0.0) - _3017;
        float _3020 = _3005 * _748;
        float _3022 = (cbSceneParam._m0[77u].w * _3018) / _3004;
        float _3023 = _3022 + cbSceneParam._m0[79u].w;
        float _3024 = cbSceneParam._m0[79u].w - _3017;
        float _3030 = sqrt(((_3016 * _3016) + (_3017 * _3017)) + (_3020 * _3020));
        float _3033 = (1.0 - (cbSceneParam._m0[77u].w / _3004)) * _3030;
        float _3038 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3040 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3217;
        if (abs((_3018 - _3022) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3217 = ((((_3023 > 0.0) ? exp2(_3038 * _3023) : (2.0 - exp2(_3040 * _3023))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3033;
        }
        else
        {
            float _3161 = 1.0 / cbSceneParam._m0[80u].x;
            float _3162 = isnan(_3024) ? _3023 : (isnan(_3023) ? _3024 : max(_3023, _3024));
            float _3163 = isnan(_3024) ? _3023 : (isnan(_3023) ? _3024 : min(_3023, _3024));
            float _3172 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : min(_3162, 0.0));
            float _3173 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : min(_3163, 0.0));
            _3217 = ((abs(_3030 / _3018) * cbSceneParam._m0[80u].y) * ((((_3172 - _3173) * 2.0) - ((exp2(_3038 * (isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0)))) - exp2(_3038 * (isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))))) * _3161)) - ((exp2(_3040 * _3172) - exp2(_3040 * _3173)) * _3161))) + (_3033 * cbSceneParam._m0[80u].z);
        }
        vec4 _3219 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2950, _2951, 1.0), 0.0);
        float _3228 = exp2((_3217 * (-1.44269502162933349609375)) * (1.0 - _3219.w));
        float _3229 = log2(_3228);
        float _3245 = log2(_2970);
        _3042 = (exp2(_3245 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].x)) * _3219.x) / cbSceneParam._m0[78u].x)) + _2967;
        _3044 = (exp2(_3245 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].y)) * _3219.y) / cbSceneParam._m0[78u].y)) + _2968;
        _3046 = (exp2(_3245 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].z)) * _3219.z) / cbSceneParam._m0[78u].z)) + _2969;
        _3048 = _3228 * _2970;
    }
    else
    {
        _3042 = _2967;
        _3044 = _2968;
        _3046 = _2969;
        _3048 = _2970;
    }
    bool _3255;
    vec4 _3058;
    vec4 _3080;
    float _3082;
    float _3086;
    float _3087;
    float _3088;
    float _3089;
    bool _3099;
    for (;;)
    {
        _3058 = cbMatDynParam._m0[0u];
        float _3060 = roundEven(_3058.y);
        bool _3061 = _3060 == 3.0;
        float _3062 = log2(_3048);
        float _3069 = exp2(_3062 * cbSceneParam._m0[78u].x) * _2939;
        float _3070 = exp2(_3062 * cbSceneParam._m0[78u].y) * _2940;
        float _3071 = exp2(_3062 * cbSceneParam._m0[78u].z) * _2941;
        float _3078 = _762 + (-0.5);
        _3080 = cbMtdParam._m0[1u];
        _3082 = _3080.y * _3078;
        float _3085 = (_3060 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3086 = _3085 * (_3061 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3042)));
        _3087 = _3085 * (_3061 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3044)));
        _3088 = _3085 * (_3061 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3046)));
        _3089 = _3078 * 0.999000012874603271484375;
        _3099 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3099)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _3089) < 0.5)
            {
                _3255 = true;
                break;
            }
        }
        uint _3196 = _811 + uint(_3058.w);
        if ((cbInstanceData._m0[_3196].w < 1.0) && ((cbInstanceData._m0[_3196].w + _3089) < 0.5))
        {
            _3255 = true;
            break;
        }
        if ((_3082 + 1.0) < _3080.x)
        {
            _3255 = true;
            break;
        }
        _3255 = false;
        break;
    }
    float _3459;
    if (_3255)
    {
        discard_state = true;
        _3459 = 0.0;
    }
    else
    {
        _3459 = cbInstanceData._m0[_2942].w;
    }
    SV_Target.x = _3086;
    SV_Target.y = _3087;
    SV_Target.z = _3088;
    SV_Target.w = _3459;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2942].w;
    discard_exit();
}


