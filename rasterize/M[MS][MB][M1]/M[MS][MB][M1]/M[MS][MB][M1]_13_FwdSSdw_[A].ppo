#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1020;
float _3429;
float _3430;
float _3431;
float _3432;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _292 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _296 = _292.z;
    float _301 = (_292.x * 2.0) + (-1.0);
    float _303 = (_292.y * 2.0) + (-1.0);
    float _304 = dot(vec2(_301, _303), vec2(_301, _303));
    float _3441 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _310 = sqrt(1.0 - (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _329 = _327.x;
    float _330 = 1.0 - _329;
    float _346 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_329 - _330) * cbMtdParam._m0[24u].z) + _330) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3452 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _347 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _354 = (_347 * (cbMtdParam._m0[17u].x - _272)) + _272;
    float _355 = (_347 * (cbMtdParam._m0[17u].y - _273)) + _273;
    float _356 = (_347 * (cbMtdParam._m0[17u].z - _274)) + _274;
    vec4 _369 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _371 = _369.x;
    float _373 = _371 - (_371 * _347);
    vec4 _386 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _393 = (_386.x * 2.0) + (-1.0);
    float _394 = (_386.y * 2.0) + (-1.0);
    float _395 = dot(vec2(_393, _394), vec2(_393, _394));
    float _3463 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _403 = (_347 * (_386.z - _296)) + _296;
    float _415 = (((_393 - _301) + (cbMtdParam._m0[21u].x * _301)) * _347) + _301;
    float _416 = (((_394 - _303) + (cbMtdParam._m0[21u].x * _303)) * _347) + _303;
    float _417 = (_347 * (sqrt(1.0 - (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) - _310)) + _310;
    float _422 = cbMtdParam._m0[22u].x + _292.w;
    float _425 = fma(_417, _213 * NORMAL.x, fma(_416, _220 * TANGENT.x, (_206 * _198) * _415));
    float _428 = fma(_417, _213 * NORMAL.y, fma(_416, _220 * TANGENT.y, (_206 * _199) * _415));
    float _431 = fma(_417, _213 * NORMAL.z, fma(_416, _220 * TANGENT.z, (_206 * _200) * _415));
    float _435 = inversesqrt(dot(vec3(_425, _428, _431), vec3(_425, _428, _431)));
    float _436 = _435 * _425;
    float _437 = _435 * _428;
    float _438 = _435 * _431;
    float _3474 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _439 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3496 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3507 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3518 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _3529 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _444 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _458 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _499 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _509 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _499);
    float _510 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _499);
    float _511 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _499);
    float _515 = inversesqrt(dot(vec3(_509, _510, _511), vec3(_509, _510, _511)));
    float _516 = _509 * _515;
    float _517 = _510 * _515;
    float _518 = _511 * _515;
    vec4 _523 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _525 = _523.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _700 = sqrt(((_509 * _509) + (_510 * _510)) + (_511 * _511));
        float _706 = (cbMatDynParam._m0[5u].x * _700) + cbMatDynParam._m0[5u].y;
        float _3540 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _711 = (cbMatDynParam._m0[5u].z * _700) + cbMatDynParam._m0[5u].w;
        float _3551 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) - _707)) + _707) < ((_525 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _537 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _538 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _558 = fma(_438, cbSceneParam._m0[5u].z, fma(_437, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _436));
    float _561 = fma(_438, cbSceneParam._m0[6u].z, fma(_437, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _436));
    float _564 = fma(_438, cbSceneParam._m0[7u].z, fma(_437, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _436));
    uint _577 = _226 + 9u;
    uint _578 = _577 + uint(cbMatDynParam._m0[0u].w);
    float _584 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_578].x;
    float _585 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_578].y;
    float _586 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) * cbInstanceData._m0[_578].z;
    float _3562 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _3584 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _590 = 1.0 - _444;
    float _591 = _587 * _590;
    float _592 = _588 * _590;
    float _593 = _589 * _590;
    float _598 = (_587 + (-0.039999999105930328369140625)) * _444;
    float _599 = (_588 + (-0.039999999105930328369140625)) * _444;
    float _600 = (_589 + (-0.039999999105930328369140625)) * _444;
    float _601 = _598 + 0.039999999105930328369140625;
    float _603 = _599 + 0.039999999105930328369140625;
    float _604 = _600 + 0.039999999105930328369140625;
    vec4 _613 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _537, cbSceneParam._m0[86u].y * _538));
    float _617 = ((isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * TEXCOORD_5.w) * _613.x;
    float _618 = dot(vec3(_436, _437, _438), vec3(_516, _517, _518));
    float _621 = _618 * 2.0;
    float _625 = (_621 * _436) - _516;
    float _626 = (_621 * _437) - _517;
    float _627 = (_621 * _438) - _518;
    float _631 = abs(dot(vec3(_516, _517, _518), vec3(_436, _437, _438)));
    float _3595 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _633 = sqrt(_439);
    float _646 = exp2((_633 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_633 * 3.0));
    float _652 = (1.0 - _646) * ((_633 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _653 = _646 * _633;
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1019;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _744 = fma(_689, cbModelParam._m0[26u].z, fma(_685, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _681));
        float _748 = fma(_689, cbModelParam._m0[27u].z, fma(_685, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _681));
        float _752 = fma(_689, cbModelParam._m0[28u].z, fma(_685, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _681));
        float _777 = _681 + _436;
        float _778 = _685 + _437;
        float _779 = _689 + _438;
        float _789 = fma(_779, cbModelParam._m0[26u].z, fma(_778, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777)) - _744;
        float _790 = fma(_779, cbModelParam._m0[27u].z, fma(_778, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777)) - _748;
        float _791 = fma(_779, cbModelParam._m0[28u].z, fma(_778, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777)) - _752;
        float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
        float _808 = ((_795 * _789) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_744 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _809 = ((_795 * _790) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_748 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_795 * _791) / cbModelParam._m0[34u].z) + ((((((_752 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        float _847 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_813.x + (-0.5));
        float _849 = _847 * (_813.y + (-0.5));
        float _850 = _847 * (_813.z + (-0.5));
        float _857 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_820.x + (-0.5));
        float _859 = _857 * (_820.y + (-0.5));
        float _860 = _857 * (_820.z + (-0.5));
        float _867 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_827.x + (-0.5));
        float _869 = _867 * (_827.y + (-0.5));
        float _870 = _867 * (_827.z + (-0.5));
        float _877 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_834.x + (-0.5));
        float _879 = _877 * (_834.y + (-0.5));
        float _880 = _877 * (_834.z + (-0.5));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = _848 * 0.5;
        float _885 = _858 * 0.5;
        float _886 = _868 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _901 = (dot(vec3(_436, _437, _438), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _911 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3643 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_913 + 1.0))) + _918) * _881;
        float _928 = _849 * 0.5;
        float _929 = _859 * 0.5;
        float _930 = _869 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_436, _437, _438), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3676 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_955 + 1.0))) + _960) * _882;
        float _970 = _850 * 0.5;
        float _971 = _860 * 0.5;
        float _972 = _870 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_436, _437, _438), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3709 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_997 + 1.0))) + _1002) * _883;
        _1019 = _850;
        _1021 = _849;
        _1022 = _848;
        _1023 = _860;
        _1024 = _859;
        _1025 = _858;
        _1026 = _870;
        _1027 = _869;
        _1028 = _868;
        _1029 = _883;
        _1030 = _882;
        _1031 = _881;
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
    }
    else
    {
        _1019 = _1020;
        _1021 = _1020;
        _1022 = _1020;
        _1023 = _1020;
        _1024 = _1020;
        _1025 = _1020;
        _1026 = _1020;
        _1027 = _1020;
        _1028 = _1020;
        _1029 = _1020;
        _1030 = _1020;
        _1031 = _1020;
        _1032 = 0.0;
        _1033 = 0.0;
        _1034 = 0.0;
    }
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1062 = fma(_689, cbModelParam._m0[30u].z, fma(_685, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _681));
        float _1066 = fma(_689, cbModelParam._m0[31u].z, fma(_685, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _681));
        float _1070 = fma(_689, cbModelParam._m0[32u].z, fma(_685, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _681));
        float _1093 = _681 + _436;
        float _1094 = _685 + _437;
        float _1095 = _689 + _438;
        float _1105 = fma(_1095, cbModelParam._m0[30u].z, fma(_1094, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093)) - _1062;
        float _1106 = fma(_1095, cbModelParam._m0[31u].z, fma(_1094, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093)) - _1066;
        float _1107 = fma(_1095, cbModelParam._m0[32u].z, fma(_1094, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093)) - _1070;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1062 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1066 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[35u].z) + ((((((_1070 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1161 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1128.x + (-0.5));
        float _1163 = _1161 * (_1128.y + (-0.5));
        float _1164 = _1161 * (_1128.z + (-0.5));
        float _1171 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1135.x + (-0.5));
        float _1173 = _1171 * (_1135.y + (-0.5));
        float _1174 = _1171 * (_1135.z + (-0.5));
        float _1181 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1142.x + (-0.5));
        float _1183 = _1181 * (_1142.y + (-0.5));
        float _1184 = _1181 * (_1142.z + (-0.5));
        float _1191 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1149.x + (-0.5));
        float _1193 = _1191 * (_1149.y + (-0.5));
        float _1194 = _1191 * (_1149.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_436, _437, _438), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3772 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1225 + 1.0))) + _1230) * _1195;
        float _1240 = _1163 * 0.5;
        float _1241 = _1173 * 0.5;
        float _1242 = _1183 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_436, _437, _438), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3805 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1267 + 1.0))) + _1272) * _1196;
        float _1282 = _1164 * 0.5;
        float _1283 = _1174 * 0.5;
        float _1284 = _1184 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_436, _437, _438), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3838 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1309 + 1.0))) + _1314) * _1197;
        _1331 = _1164;
        _1332 = _1163;
        _1333 = _1162;
        _1334 = _1174;
        _1335 = _1173;
        _1336 = _1172;
        _1337 = _1184;
        _1338 = _1183;
        _1339 = _1182;
        _1340 = _1197;
        _1341 = _1196;
        _1342 = _1195;
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1020;
        _1332 = _1020;
        _1333 = _1020;
        _1334 = _1020;
        _1335 = _1020;
        _1336 = _1020;
        _1337 = _1020;
        _1338 = _1020;
        _1339 = _1020;
        _1340 = _1020;
        _1341 = _1020;
        _1342 = _1020;
        _1343 = 0.0;
        _1344 = 0.0;
        _1345 = 0.0;
    }
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1032)) + _1032;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1033)) + _1033;
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1034)) + _1034;
    float _1378 = fma(_1357, cbSceneParam._m0[89u].z, fma(_1356, cbSceneParam._m0[89u].y, _1355 * cbSceneParam._m0[89u].x));
    float _1381 = fma(_1357, cbSceneParam._m0[90u].z, fma(_1356, cbSceneParam._m0[90u].y, _1355 * cbSceneParam._m0[90u].x));
    float _1384 = fma(_1357, cbSceneParam._m0[91u].z, fma(_1356, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1355));
    float _1399 = _625 * 0.5;
    float _1400 = _626 * 0.5;
    float _1401 = _627 * 0.5;
    float _1402 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1405 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1408 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1442;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1415 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1019, _1023, _1026, _1029));
        float _1419 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1021, _1024, _1027, _1030));
        float _1423 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1430 = dot(vec4(cbModelParam._m0[39u]), vec4(_1399, _1400, _1401, 1.0));
        _1442 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1430) ? 0.0 : (isnan(0.0) ? _1430 : max(0.0, _1430))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1442 = 1.0;
    }
    float _1453;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1444 = dot(vec4(cbModelParam._m0[40u]), vec4(_1399, _1400, _1401, 1.0));
        _1453 = dot(vec3(isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1453 = 1.0;
    }
    float _1457 = (_1453 * cbModelParam._m0[1u].x) + (_1442 * (1.0 - cbModelParam._m0[1u].x));
    float _1467 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _439);
    float _1468 = isnan(_1467) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1467 : min(cbModelParam._m0[25u].z, _1467));
    float _1549;
    float _1551;
    float _1553;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1516 = fma(_689, cbModelParam._m0[13u].z, fma(_685, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _681)) + cbModelParam._m0[13u].w;
        float _1520 = fma(_689, cbModelParam._m0[14u].z, fma(_685, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _681)) + cbModelParam._m0[14u].w;
        float _1524 = fma(_689, cbModelParam._m0[15u].z, fma(_685, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _681)) + cbModelParam._m0[15u].w;
        float _1527 = fma(_627, cbModelParam._m0[13u].z, fma(_626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625));
        float _1530 = fma(_627, cbModelParam._m0[14u].z, fma(_626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625));
        float _1533 = fma(_627, cbModelParam._m0[15u].z, fma(_626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625));
        float _1561;
        if (_1527 > 0.0)
        {
            _1561 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1561 = frontier_phi_17_15_ladder;
        }
        float _1787;
        if (_1530 > 0.0)
        {
            _1787 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1787 = frontier_phi_26_22_ladder;
        }
        float _2044;
        if (_1533 > 0.0)
        {
            _2044 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2044 = frontier_phi_38_33_ladder;
        }
        float _2046 = isnan(_1787) ? _1561 : (isnan(_1561) ? _1787 : min(_1561, _1787));
        float _2047 = isnan(_2044) ? _2046 : (isnan(_2046) ? _2044 : min(_2046, _2044));
        float _2051 = (_2047 * _1527) + _1516;
        float _2052 = (_2047 * _1530) + _1520;
        float _2053 = (_2047 * _1533) + _1524;
        float _2054 = _2047 * 9.9999997473787516355514526367188e-05;
        float _2056 = (-1.0) - _2054;
        float _2058 = _2054 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2053 > _2058) || ((_2053 < _2056) || ((_2052 > _2058) || ((_2052 < _2056) || ((_2051 < _2056) || (_2051 > _2058))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2181 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2053, cbModelParam._m0[9u].z, fma(_2052, cbModelParam._m0[9u].y, _2051 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2053, cbModelParam._m0[10u].z, fma(_2052, cbModelParam._m0[10u].y, _2051 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2053, cbModelParam._m0[11u].z, fma(_2052, cbModelParam._m0[11u].y, _2051 * cbModelParam._m0[11u].x))), _1468);
            frontier_phi_16_38_ladder = _2181.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2181.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2181.x * cbModelParam._m0[1u].y;
        }
        _1549 = frontier_phi_16_38_ladder_2;
        _1551 = frontier_phi_16_38_ladder_1;
        _1553 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_625, _626, _627), _1468);
        _1549 = _1537.x * cbModelParam._m0[1u].y;
        _1551 = _1537.y * cbModelParam._m0[1u].y;
        _1553 = _1537.z * cbModelParam._m0[1u].y;
    }
    float _1557 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _439);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1557 : min(cbModelParam._m0[25u].w, _1557));
    float _1649;
    float _1651;
    float _1653;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1613 = fma(_689, cbModelParam._m0[21u].z, fma(_685, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _681)) + cbModelParam._m0[21u].w;
        float _1617 = fma(_689, cbModelParam._m0[22u].z, fma(_685, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _681)) + cbModelParam._m0[22u].w;
        float _1621 = fma(_689, cbModelParam._m0[23u].z, fma(_685, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _681)) + cbModelParam._m0[23u].w;
        float _1624 = fma(_627, cbModelParam._m0[21u].z, fma(_626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625));
        float _1627 = fma(_627, cbModelParam._m0[22u].z, fma(_626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625));
        float _1630 = fma(_627, cbModelParam._m0[23u].z, fma(_626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625));
        float _1792;
        if (_1624 > 0.0)
        {
            _1792 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1792 = frontier_phi_28_24_ladder;
        }
        float _2071;
        if (_1627 > 0.0)
        {
            _2071 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2071 = frontier_phi_40_35_ladder;
        }
        float _2284;
        if (_1630 > 0.0)
        {
            _2284 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2284 = frontier_phi_49_46_ladder;
        }
        float _2286 = isnan(_2071) ? _1792 : (isnan(_1792) ? _2071 : min(_1792, _2071));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1624) + _1613;
        float _2292 = (_2287 * _1627) + _1617;
        float _2293 = (_2287 * _1630) + _1621;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2294;
        float _2297 = _2294 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2293 > _2297) || ((_2293 < _2295) || ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 < _2295) || (_2291 > _2297))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2492 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2293, cbModelParam._m0[17u].z, fma(_2292, cbModelParam._m0[17u].y, _2291 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2293, cbModelParam._m0[18u].z, fma(_2292, cbModelParam._m0[18u].y, _2291 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2293, cbModelParam._m0[19u].z, fma(_2292, cbModelParam._m0[19u].y, _2291 * cbModelParam._m0[19u].x))), _1558);
            frontier_phi_25_49_ladder = _2492.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2492.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2492.x * cbModelParam._m0[1u].z;
        }
        _1649 = frontier_phi_25_49_ladder_2;
        _1651 = frontier_phi_25_49_ladder_1;
        _1653 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_625, _626, _627), _1558);
        _1649 = _1633.x * cbModelParam._m0[1u].z;
        _1651 = _1633.y * cbModelParam._m0[1u].z;
        _1653 = _1633.z * cbModelParam._m0[1u].z;
    }
    float _1666 = (((_652 * _601) + _653) * _617) * ((cbModelParam._m0[1u].w * (_1649 - _1549)) + _1549);
    float _1668 = (((_652 * _603) + _653) * _617) * ((cbModelParam._m0[1u].w * (_1651 - _1551)) + _1551);
    float _1670 = (((_652 * _604) + _653) * _617) * ((cbModelParam._m0[1u].w * (_1653 - _1553)) + _1553);
    float _1673 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, _1666 * cbSceneParam._m0[91u].x));
    vec4 _1687 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_537, _538));
    float _1689 = _1687.w;
    float _1701 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1689);
    float _1702 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1689);
    float _1703 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1689);
    uvec4 _1707 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1709 = _1707.x * 14u;
    uint _1710 = _1709 + 13u;
    float _1717 = _617 + (-1.0);
    float _1722 = (cbLight._m0[_1710].x * _1717) + 1.0;
    float _1723 = (cbLight._m0[_1710].y * _1717) + 1.0;
    float _1724 = (cbLight._m0[_1710].z * _1717) + 1.0;
    float _1725 = (cbLight._m0[_1710].w * _1717) + 1.0;
    uint _1726 = _1709 + 5u;
    float _1732 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1736 = _1709 + 4u;
    float _1746 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
    uint _1750 = _1709 | 1u;
    float _1761 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_436, _437, _438));
    float _1764 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_436, _437, _438));
    float _3974 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _3985 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1769 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 0.3183098733425140380859375;
    float _1771 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * 0.3183098733425140380859375;
    float _1778 = ((cbLight._m0[_1726].x * _1732) * _1771) + (((cbLight._m0[_1736].x * _1701) * _1746) * _1769);
    float _1779 = ((_1732 * cbLight._m0[_1726].y) * _1771) + (((cbLight._m0[_1736].y * _1702) * _1746) * _1769);
    float _1780 = ((_1732 * cbLight._m0[_1726].z) * _1771) + (((cbLight._m0[_1736].z * _1703) * _1746) * _1769);
    uvec4 _1784 = floatBitsToUint(cbLight._m0[_1709 + 12u]);
    bool _1786 = _1784.x == 0u;
    float _1797;
    float _1799;
    float _1801;
    if (_1786)
    {
        _1797 = _1778;
        _1799 = _1779;
        _1801 = _1780;
    }
    else
    {
        uint _1805 = _1709 + 6u;
        float _1821 = (dot(vec3(cbLight._m0[_1709 + 2u].xyz), vec3(_436, _437, _438)) * 0.5) + 0.5;
        float _1822 = _1821 * _1821;
        float _3996 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1824 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _1797 = (((cbLight._m0[_1805].x * 0.3183098733425140380859375) * _1823) * _1824) + _1778;
        _1799 = (((cbLight._m0[_1805].y * 0.3183098733425140380859375) * _1823) * _1824) + _1779;
        _1801 = (((cbLight._m0[_1805].z * 0.3183098733425140380859375) * _1823) * _1824) + _1780;
    }
    bool _1804 = _1784.y == 0u;
    float _1842;
    float _1844;
    float _1846;
    if (_1804)
    {
        _1842 = _1797;
        _1844 = _1799;
        _1846 = _1801;
    }
    else
    {
        uint _2015 = _1709 + 7u;
        float _2031 = (dot(vec3(cbLight._m0[_1709 + 3u].xyz), vec3(_436, _437, _438)) * 0.5) + 0.5;
        float _2032 = _2031 * _2031;
        float _4012 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2033 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _2034 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _1842 = (((cbLight._m0[_2015].x * 0.3183098733425140380859375) * _2033) * _2034) + _1797;
        _1844 = (((cbLight._m0[_2015].y * 0.3183098733425140380859375) * _2033) * _2034) + _1799;
        _1846 = (((cbLight._m0[_2015].z * 0.3183098733425140380859375) * _2033) * _2034) + _1801;
    }
    uint _1849 = _1709 + 8u;
    float _1862 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1709].w)) * _439) * 0.949999988079071044921875);
    float _1863 = _1862 * _1862;
    float _1864 = cbLight._m0[_1709].x + _516;
    float _1865 = cbLight._m0[_1709].y + _517;
    float _1866 = cbLight._m0[_1709].z + _518;
    float _1870 = inversesqrt(dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866)));
    float _1871 = _1870 * _1864;
    float _1872 = _1870 * _1865;
    float _1873 = _1870 * _1866;
    float _1874 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_1709].xyz));
    float _4028 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _1878 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _1879 = dot(vec3(_436, _437, _438), vec3(_1871, _1872, _1873));
    float _4050 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _1883 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_1871, _1872, _1873));
    float _4061 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1887 = _1863 * _1863;
    float _1891 = ((_1882 * _1882) * (_1887 + (-1.0))) + 1.0;
    float _1899 = exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0);
    float _1900 = 0.959999978542327880859375 - _598;
    float _1902 = 0.959999978542327880859375 - _599;
    float _1903 = 0.959999978542327880859375 - _600;
    float _1910 = 1.0 - _1863;
    float _1921 = (0.5 / (((_1878 * ((_1877 * _1910) + _1863)) + 9.9999999392252902907785028219223e-09) + (((_1878 * _1910) + _1863) * _1877))) * _1877;
    float _4072 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1923 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1887 / ((_1891 * _1891) * 3.141590118408203125));
    uint _1937 = _1709 + 9u;
    float _1948 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1750].w)) * _439) * 0.949999988079071044921875);
    float _1949 = _1948 * _1948;
    float _1950 = cbLight._m0[_1750].x + _516;
    float _1951 = cbLight._m0[_1750].y + _517;
    float _1952 = cbLight._m0[_1750].z + _518;
    float _1956 = inversesqrt(dot(vec3(_1950, _1951, _1952), vec3(_1950, _1951, _1952)));
    float _1957 = _1956 * _1950;
    float _1958 = _1956 * _1951;
    float _1959 = _1956 * _1952;
    float _1960 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_1750].xyz));
    float _4083 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1963 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _1964 = dot(vec3(_436, _437, _438), vec3(_1957, _1958, _1959));
    float _4094 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1968 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_1957, _1958, _1959));
    float _4105 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1972 = _1949 * _1949;
    float _1976 = ((_1967 * _1967) * (_1972 + (-1.0))) + 1.0;
    float _1983 = exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0);
    float _1990 = 1.0 - _1949;
    float _2000 = (0.5 / (((_1878 * ((_1963 * _1990) + _1949)) + 9.9999999392252902907785028219223e-09) + (((_1878 * _1990) + _1949) * _1963))) * _1963;
    float _4116 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2002 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1972 / ((_1976 * _1976) * 3.141590118408203125));
    float _2012 = (((((_1983 * _1900) + _601) * cbLight._m0[_1937].x) * _2002) * _1732) + ((((cbLight._m0[_1849].x * _1701) * ((_1899 * _1900) + _601)) * _1923) * _1746);
    float _2013 = (((((_1983 * _1902) + _603) * cbLight._m0[_1937].y) * _2002) * _1732) + ((((cbLight._m0[_1849].y * _1702) * ((_1899 * _1902) + _603)) * _1923) * _1746);
    float _2014 = (((((_1983 * _1903) + _604) * cbLight._m0[_1937].z) * _2002) * _1732) + ((((cbLight._m0[_1849].z * _1703) * ((_1899 * _1903) + _604)) * _1923) * _1746);
    float _2076;
    float _2078;
    float _2080;
    if (_1786)
    {
        _2076 = _2012;
        _2078 = _2013;
        _2080 = _2014;
    }
    else
    {
        uint _2082 = _1709 + 2u;
        uint _2086 = _1709 + 10u;
        float _2100 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _439) * 0.949999988079071044921875);
        float _2101 = _2100 * _2100;
        float _2102 = cbLight._m0[_2082].x + _516;
        float _2103 = cbLight._m0[_2082].y + _517;
        float _2104 = cbLight._m0[_2082].z + _518;
        float _2108 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
        float _2109 = _2108 * _2102;
        float _2110 = _2108 * _2103;
        float _2111 = _2108 * _2104;
        float _2112 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_2082].xyz));
        float _4127 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2115 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2116 = dot(vec3(_436, _437, _438), vec3(_2109, _2110, _2111));
        float _4138 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2120 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2109, _2110, _2111));
        float _4149 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2124 = _2101 * _2101;
        float _2128 = ((_2119 * _2119) * (_2124 + (-1.0))) + 1.0;
        float _2135 = exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0);
        float _2142 = 1.0 - _2101;
        float _2152 = (0.5 / (((_1878 * ((_2115 * _2142) + _2101)) + 9.9999999392252902907785028219223e-09) + (((_1878 * _2142) + _2101) * _2115))) * _2115;
        float _4160 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2154 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2124 / ((_2128 * _2128) * 3.141590118408203125));
        float _2155 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _2076 = (((((_2135 * _1900) + _601) * cbLight._m0[_2086].x) * _2154) * _2155) + _2012;
        _2078 = (((((_2135 * _1902) + _603) * cbLight._m0[_2086].y) * _2154) * _2155) + _2013;
        _2080 = (((((_2135 * _1903) + _604) * cbLight._m0[_2086].z) * _2154) * _2155) + _2014;
    }
    float _2190;
    float _2192;
    float _2194;
    if (_1804)
    {
        _2190 = _2076;
        _2192 = _2078;
        _2194 = _2080;
    }
    else
    {
        uint _2201 = _1709 + 3u;
        uint _2205 = _1709 + 11u;
        float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _439) * 0.949999988079071044921875);
        float _2220 = _2219 * _2219;
        float _2221 = cbLight._m0[_2201].x + _516;
        float _2222 = cbLight._m0[_2201].y + _517;
        float _2223 = cbLight._m0[_2201].z + _518;
        float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
        float _2228 = _2227 * _2221;
        float _2229 = _2227 * _2222;
        float _2230 = _2227 * _2223;
        float _2231 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_2201].xyz));
        float _4176 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2235 = dot(vec3(_436, _437, _438), vec3(_2228, _2229, _2230));
        float _4187 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2239 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2228, _2229, _2230));
        float _4198 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2243 = _2220 * _2220;
        float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
        float _2254 = exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0);
        float _2261 = 1.0 - _2220;
        float _2271 = (0.5 / (((_1878 * ((_2234 * _2261) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_1878 * _2261) + _2220) * _2234))) * _2234;
        float _4209 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2273 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
        float _2274 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _2190 = (((((_2254 * _1900) + _601) * cbLight._m0[_2205].x) * _2273) * _2274) + _2076;
        _2192 = (((((_2254 * _1902) + _603) * cbLight._m0[_2205].y) * _2273) * _2274) + _2078;
        _2194 = (((((_2254 * _1903) + _604) * cbLight._m0[_2205].z) * _2273) * _2274) + _2080;
    }
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    if (_1707.y == 0u)
    {
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2349;
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2349;
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2349;
        uvec4 _2364 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2365 = _2364.x;
        uint _2376 = uint((float(_2364.y) * floor(float(uint(cbSceneParam._m0[85u].y * _538) / _2365))) + floor(float(uint(cbSceneParam._m0[85u].x * _537) / _2365)));
        float _2386 = (log2(_2352 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2387 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        uint _2390 = uint(isnan(14.0) ? _2387 : (isnan(_2387) ? 14.0 : min(_2387, 14.0)));
        uvec4 _2395 = texelFetch(g_lightClusterGridBuffer, int(((_2390 << 2u) + (_2376 << 6u)) >> 2u));
        uint _2396 = _2395.x;
        uint _2397 = _2364.z;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        if (((((1u << ((_2397 >> 4u) & 15u)) + 4294967295u) & _2396) == 0u) || ((_2397 & 240u) == 0u))
        {
            _2497 = 0.0;
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
        }
        else
        {
            float _2498;
            float _2500;
            float _2502;
            float _2504;
            float _2506;
            float _2508;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            uint _2656 = 0u;
            uint _2665;
            bool _2666;
            for (;;)
            {
                _2665 = texelFetch(g_lightClassification, int((((_2390 << 5u) + (_2376 << 9u)) + (_2656 << 2u)) >> 2u)).x;
                _2666 = _2665 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2666)
                {
                    frontier_phi_66_pred = _2650;
                    frontier_phi_66_pred_1 = _2655;
                    frontier_phi_66_pred_2 = _2654;
                    frontier_phi_66_pred_3 = _2653;
                    frontier_phi_66_pred_4 = _2652;
                    frontier_phi_66_pred_5 = _2651;
                }
                else
                {
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    uint _2801;
                    _2795 = _2650;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2653;
                    _2799 = _2654;
                    _2800 = _2655;
                    _2801 = _2665;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    for (;;)
                    {
                        uint _2805 = uint(findLSB(_2801)) + (_2656 << 5u);
                        uint _2802 = (_2801 + 4294967295u) & _2801;
                        uint _2807 = _2805 * 48u;
                        vec4 _2821 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 3u)).x));
                        uint _2827 = (_2805 * 48u) + 4u;
                        vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 3u)).x));
                        uint _2846 = (_2805 * 48u) + 8u;
                        vec3 _2857 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x));
                        float _2861 = _2821.x - _2350;
                        float _2862 = _2821.y - _2351;
                        float _2863 = _2821.z - _2352;
                        float _2864 = dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863));
                        float _2867 = inversesqrt(_2864);
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2871 = dot(vec3(_558, _561, _564), vec3(_2868, _2869, _2870));
                        float _2876 = 1.0 - (_2864 * _2821.w);
                        float _4235 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2877 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2878 = sqrt(_2864) * _2840.w;
                        float _2881 = 1.39999997615814208984375 / (_2878 + 1.39999997615814208984375);
                        float _2882 = _2881 * _2881;
                        float _2885 = ((1.0 - _2882) * _2871) + _2882;
                        float _2888 = _2878 * _2878;
                        float _2892 = ((isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0))) * _2877) / ((_2888 * 0.699999988079071044921875) + 1.0);
                        float _2896 = (-0.0) - _2350;
                        float _2897 = (-0.0) - _2351;
                        float _2898 = (-0.0) - _2352;
                        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
                        float _2903 = _2902 * _2896;
                        float _2904 = _2902 * _2897;
                        float _2905 = _2902 * _2898;
                        float _2913 = exp2(log2(1.0 / ((_2888 * 3.5) + 5.0)) * 0.25);
                        float _2914 = 1.0 - _633;
                        float _2921 = sqrt(1.0 - ((1.0 - (_2914 * _2914)) * (1.0 - (_2913 * _2913))));
                        float _2922 = _2921 * _2921;
                        float _2923 = _2922 * _2922;
                        float _2924 = _2903 + _2868;
                        float _2925 = _2904 + _2869;
                        float _2926 = _2905 + _2870;
                        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
                        float _2934 = dot(vec3(_558, _561, _564), vec3(_2903, _2904, _2905));
                        float _4251 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2937 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2938 = dot(vec3(_558, _561, _564), vec3(_2930 * _2924, _2930 * _2925, _2930 * _2926));
                        float _4262 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2941 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                        float _2945 = ((_2941 * _2941) * (_2923 + (-1.0))) + 1.0;
                        float _2946 = _2881 * _2922;
                        float _2947 = _2946 * _2946;
                        float _2950 = ((1.0 - _2947) * _2871) + _2947;
                        float _4273 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2951 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                        float _2952 = 1.0 - _2922;
                        float _2962 = (0.5 / (((_2951 * ((_2937 * _2952) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2951 * _2952) + _2922) * _2937))) * _2951;
                        float _4284 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2973 = (((_2923 * 3.1415927410125732421875) * (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) / ((_2945 * _2945) * ((_2888 * 2.1991131305694580078125) + 3.141590118408203125))) * _2877;
                        _2725 = (_2892 * _2840.x) + _2798;
                        _2726 = (_2892 * _2840.y) + _2799;
                        _2727 = (_2892 * _2840.z) + _2800;
                        _2722 = (_2973 * _2857.x) + _2795;
                        _2723 = (_2973 * _2857.y) + _2796;
                        _2724 = (_2973 * _2857.z) + _2797;
                        if (_2802 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2725;
                            _2799 = _2726;
                            _2800 = _2727;
                            _2801 = _2802;
                        }
                    }
                    frontier_phi_66_pred = _2722;
                    frontier_phi_66_pred_1 = _2727;
                    frontier_phi_66_pred_2 = _2726;
                    frontier_phi_66_pred_3 = _2725;
                    frontier_phi_66_pred_4 = _2724;
                    frontier_phi_66_pred_5 = _2723;
                }
                _2498 = frontier_phi_66_pred;
                _2508 = frontier_phi_66_pred_1;
                _2506 = frontier_phi_66_pred_2;
                _2504 = frontier_phi_66_pred_3;
                _2502 = frontier_phi_66_pred_4;
                _2500 = frontier_phi_66_pred_5;
                uint _2657 = _2656 + 1u;
                if (_2657 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2650 = _2498;
                    _2651 = _2500;
                    _2652 = _2502;
                    _2653 = _2504;
                    _2654 = _2506;
                    _2655 = _2508;
                    _2656 = _2657;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2497 = _2498;
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
        }
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.z;
        uint _2514 = (_2512 >> 8u) & 15u;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        if (((4294967295u << _2514) & _2396) == 0u)
        {
            _2618 = _2497;
            _2620 = _2499;
            _2622 = _2501;
            _2624 = _2503;
            _2626 = _2505;
            _2628 = _2507;
        }
        else
        {
            float _2643 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
            float _2644 = _2643 * _2350;
            float _2645 = _2643 * _2351;
            float _2646 = _2643 * _2352;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2514 < ((_2512 >> 12u) & 15u))
            {
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2627;
                float _2629;
                float _2778 = _2497;
                float _2779 = _2499;
                float _2780 = _2501;
                float _2781 = _2503;
                float _2782 = _2505;
                float _2783 = _2507;
                uint _2784 = _2514;
                uint _2793;
                bool _2794;
                for (;;)
                {
                    _2793 = texelFetch(g_lightClassification, int((((_2390 << 5u) + (_2376 << 9u)) + (_2784 << 2u)) >> 2u)).x;
                    _2794 = _2793 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2794)
                    {
                        frontier_phi_77_pred = _2783;
                        frontier_phi_77_pred_1 = _2782;
                        frontier_phi_77_pred_2 = _2781;
                        frontier_phi_77_pred_3 = _2780;
                        frontier_phi_77_pred_4 = _2779;
                        frontier_phi_77_pred_5 = _2778;
                    }
                    else
                    {
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3000 = _2778;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        float _3003 = _2781;
                        float _3004 = _2782;
                        float _3005 = _2783;
                        uint _3006 = _2793;
                        uint _3007;
                        vec4 _3032;
                        float _3033;
                        vec4 _3048;
                        vec3 _3060;
                        vec4 _3076;
                        vec4 _3092;
                        float _3138;
                        bool _3139;
                        for (;;)
                        {
                            uint _3017 = ((_2784 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3006));
                            _3007 = (_3006 + 4294967295u) & _3006;
                            uint _3019 = _3017 * 40u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            _3033 = _3032.w;
                            uint _3035 = (_3017 * 40u) + 4u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3050 = (_3017 * 40u) + 8u;
                            _3060 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x));
                            uint _3063 = (_3017 * 40u) + 16u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3079 = (_3017 * 40u) + 20u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3017 * 40u) + 24u;
                            vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3113 = (_3017 * 40u) + 28u;
                            vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            _3138 = fma(_2352, _3126.z, fma(_2351, _3126.y, _3126.x * _2350)) + _3126.w;
                            _3139 = !((fma(_2352, _3107.z, fma(_2351, _3107.y, _3107.x * _2350)) + _3107.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3139)
                            {
                                float _3166 = _3032.x - _2350;
                                float _3167 = _3032.y - _2351;
                                float _3168 = _3032.z - _2352;
                                float _3169 = dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168));
                                float _3172 = inversesqrt(_3169);
                                float _3173 = _3172 * _3166;
                                float _3174 = _3172 * _3167;
                                float _3175 = _3172 * _3168;
                                float _3179 = 1.0 - (_3169 / (_3033 * _3033));
                                float _4295 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3180 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3184 = sqrt(_3169) * _3048.w;
                                float _3186 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                                float _3187 = _3186 * _3186;
                                float _3190 = ((1.0 - _3187) * dot(vec3(_3173, _3174, _3175), vec3(_558, _561, _564))) + _3187;
                                float _3193 = _3184 * _3184;
                                float _3197 = (fma(_2352, _3076.z, fma(_2351, _3076.y, _3076.x * _2350)) + _3076.w) / _3138;
                                float _3198 = (fma(_2352, _3092.z, fma(_2351, _3092.y, _3092.x * _2350)) + _3092.w) / _3138;
                                float _3202 = 1.0 - dot(vec2(_3197, _3198), vec2(_3197, _3198));
                                float _4311 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3204 = _3203 * (((isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0))) * _3180) / ((_3193 * 0.699999988079071044921875) + 1.0));
                                float _3216 = exp2(log2(1.0 / ((_3193 * 3.5) + 5.0)) * 0.25);
                                float _3217 = 1.0 - _633;
                                float _3224 = sqrt(1.0 - ((1.0 - (_3217 * _3217)) * (1.0 - (_3216 * _3216))));
                                float _3225 = _3224 * _3224;
                                float _3226 = _3225 * _3225;
                                float _3227 = _3173 - _2644;
                                float _3228 = _3174 - _2645;
                                float _3229 = _3175 - _2646;
                                float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                                float _3237 = dot(vec3(_558, _561, _564), vec3((-0.0) - _2644, (-0.0) - _2645, (-0.0) - _2646));
                                float _4322 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3240 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3241 = dot(vec3(_558, _561, _564), vec3(_3233 * _3227, _3233 * _3228, _3233 * _3229));
                                float _4333 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3244 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3248 = ((_3244 * _3244) * (_3226 + (-1.0))) + 1.0;
                                float _3249 = _3186 * _3225;
                                float _3250 = _3249 * _3249;
                                float _3256 = ((1.0 - _3250) * dot(vec3(_558, _561, _564), vec3(_3173, _3174, _3175))) + _3250;
                                float _4344 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3258 = 1.0 - _3225;
                                float _3268 = (0.5 / (((_3257 * ((_3240 * _3258) + _3225)) + 9.9999999392252902907785028219223e-09) + (((_3257 * _3258) + _3225) * _3240))) * _3257;
                                float _4355 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3278 = (_3203 * _3180) * (((_3226 * 3.1415927410125732421875) * (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) / ((_3248 * _3248) * ((_3193 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3204 * _3048.y;
                                frontier_phi_83_pred_1 = _3204 * _3048.x;
                                frontier_phi_83_pred_2 = _3278 * _3060.z;
                                frontier_phi_83_pred_3 = _3278 * _3060.y;
                                frontier_phi_83_pred_4 = _3278 * _3060.x;
                                frontier_phi_83_pred_5 = _3204 * _3048.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3286 = frontier_phi_83_pred;
                            _3285 = frontier_phi_83_pred_1;
                            _3284 = frontier_phi_83_pred_2;
                            _3283 = frontier_phi_83_pred_3;
                            _3282 = frontier_phi_83_pred_4;
                            _3287 = frontier_phi_83_pred_5;
                            _2990 = _3285 + _3003;
                            _2991 = _3286 + _3004;
                            _2992 = _3287 + _3005;
                            _2987 = _3282 + _3000;
                            _2988 = _3283 + _3001;
                            _2989 = _3284 + _3002;
                            if (_3007 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _3007;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2992;
                        frontier_phi_77_pred_1 = _2991;
                        frontier_phi_77_pred_2 = _2990;
                        frontier_phi_77_pred_3 = _2989;
                        frontier_phi_77_pred_4 = _2988;
                        frontier_phi_77_pred_5 = _2987;
                    }
                    _2629 = frontier_phi_77_pred;
                    _2627 = frontier_phi_77_pred_1;
                    _2625 = frontier_phi_77_pred_2;
                    _2623 = frontier_phi_77_pred_3;
                    _2621 = frontier_phi_77_pred_4;
                    _2619 = frontier_phi_77_pred_5;
                    uint _2785 = _2784 + 1u;
                    if (_2785 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2778 = _2619;
                        _2779 = _2621;
                        _2780 = _2623;
                        _2781 = _2625;
                        _2782 = _2627;
                        _2783 = _2629;
                        _2784 = _2785;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2623;
                frontier_phi_58_59_ladder_1 = _2629;
                frontier_phi_58_59_ladder_2 = _2627;
                frontier_phi_58_59_ladder_3 = _2625;
                frontier_phi_58_59_ladder_4 = _2621;
                frontier_phi_58_59_ladder_5 = _2619;
            }
            else
            {
                frontier_phi_58_59_ladder = _2501;
                frontier_phi_58_59_ladder_1 = _2507;
                frontier_phi_58_59_ladder_2 = _2505;
                frontier_phi_58_59_ladder_3 = _2503;
                frontier_phi_58_59_ladder_4 = _2499;
                frontier_phi_58_59_ladder_5 = _2497;
            }
            _2618 = frontier_phi_58_59_ladder_5;
            _2620 = frontier_phi_58_59_ladder_4;
            _2622 = frontier_phi_58_59_ladder;
            _2624 = frontier_phi_58_59_ladder_3;
            _2626 = frontier_phi_58_59_ladder_2;
            _2628 = frontier_phi_58_59_ladder_1;
        }
        float _2633 = isnan(1.0) ? _617 : (isnan(_617) ? 1.0 : min(_617, 1.0));
        _2409 = (_2633 * _2624) + _1842;
        _2411 = (_2633 * _2626) + _1844;
        _2413 = (_2633 * _2628) + _1846;
        _2415 = ((_2618 * _601) * _2633) + _2190;
        _2417 = ((_2620 * _603) * _2633) + _2192;
        _2419 = ((_2622 * _604) * _2633) + _2194;
    }
    else
    {
        _2409 = _1842;
        _2411 = _1844;
        _2413 = _1846;
        _2415 = _2190;
        _2417 = _2192;
        _2419 = _2194;
    }
    float _4371 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4382 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4393 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _2436 = ((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2409 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _617))) + ((_2415 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1457)) * cbPerFrame._m0[3u].x);
    float _2437 = ((isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2411 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _617))) + ((_2417 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1457)) * cbPerFrame._m0[3u].x);
    float _2438 = ((isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2413 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _617))) + ((_2419 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1457)) * cbPerFrame._m0[3u].x);
    uint _2439 = _226 + 6u;
    float _2447 = _537 / cbSceneParam._m0[86u].x;
    float _2448 = _538 / cbSceneParam._m0[86u].y;
    vec4 _2462 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2447, _2448, (log2((isnan(cbSceneParam._m0[77u].w) ? _458 : (isnan(_458) ? cbSceneParam._m0[77u].w : min(_458, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2464 = _2462.x;
    float _2465 = _2462.y;
    float _2466 = _2462.z;
    float _2467 = _2462.w;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    if (_458 > cbSceneParam._m0[78u].w)
    {
        float _2522 = isnan(_458) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _458 : min(cbSceneParam._m0[80u].w, _458));
        float _2523 = _2522 / _458;
        float _2534 = _2523 * _509;
        float _2535 = _510 * _2523;
        float _2536 = (-0.0) - _2535;
        float _2538 = _2523 * _511;
        float _2540 = (cbSceneParam._m0[77u].w * _2536) / _2522;
        float _2541 = _2540 + cbSceneParam._m0[79u].w;
        float _2542 = cbSceneParam._m0[79u].w - _2535;
        float _2548 = sqrt(((_2534 * _2534) + (_2535 * _2535)) + (_2538 * _2538));
        float _2551 = (1.0 - (cbSceneParam._m0[77u].w / _2522)) * _2548;
        float _2556 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2558 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2735;
        if (abs((_2536 - _2540) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2735 = ((((_2541 > 0.0) ? exp2(_2556 * _2541) : (2.0 - exp2(_2558 * _2541))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2551;
        }
        else
        {
            float _2679 = 1.0 / cbSceneParam._m0[80u].x;
            float _2680 = isnan(_2542) ? _2541 : (isnan(_2541) ? _2542 : max(_2541, _2542));
            float _2681 = isnan(_2542) ? _2541 : (isnan(_2541) ? _2542 : min(_2541, _2542));
            float _2690 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : min(_2680, 0.0));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            _2735 = ((abs(_2548 / _2536) * cbSceneParam._m0[80u].y) * ((((_2690 - _2691) * 2.0) - ((exp2(_2556 * (isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0)))) - exp2(_2556 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0))))) * _2679)) - ((exp2(_2558 * _2690) - exp2(_2558 * _2691)) * _2679))) + (_2551 * cbSceneParam._m0[80u].z);
        }
        vec4 _2737 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2447, _2448, 1.0), 0.0);
        float _2746 = exp2((_2735 * (-1.44269502162933349609375)) * (1.0 - _2737.w));
        float _2747 = log2(_2746);
        float _2763 = log2(_2467);
        _2560 = (exp2(_2763 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2747 * cbSceneParam._m0[78u].x)) * _2737.x) / cbSceneParam._m0[78u].x)) + _2464;
        _2562 = (exp2(_2763 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2747 * cbSceneParam._m0[78u].y)) * _2737.y) / cbSceneParam._m0[78u].y)) + _2465;
        _2564 = (exp2(_2763 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2747 * cbSceneParam._m0[78u].z)) * _2737.z) / cbSceneParam._m0[78u].z)) + _2466;
        _2566 = _2746 * _2467;
    }
    else
    {
        _2560 = _2464;
        _2562 = _2465;
        _2564 = _2466;
        _2566 = _2467;
    }
    bool _2773;
    vec4 _2576;
    vec4 _2598;
    float _2600;
    float _2604;
    float _2605;
    float _2606;
    float _2607;
    bool _2617;
    for (;;)
    {
        _2576 = cbMatDynParam._m0[0u];
        float _2578 = roundEven(_2576.y);
        bool _2579 = _2578 == 3.0;
        float _2580 = log2(_2566);
        float _2587 = exp2(_2580 * cbSceneParam._m0[78u].x) * _2436;
        float _2588 = exp2(_2580 * cbSceneParam._m0[78u].y) * _2437;
        float _2589 = exp2(_2580 * cbSceneParam._m0[78u].z) * _2438;
        float _2596 = _525 + (-0.5);
        _2598 = cbMtdParam._m0[1u];
        _2600 = _2598.y * _2596;
        float _2603 = (_2578 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2604 = _2603 * (_2579 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2560)));
        _2605 = _2603 * (_2579 ? _2588 : (_2588 + (cbSceneParam._m0[72u].w * _2562)));
        _2606 = _2603 * (_2579 ? _2589 : (_2589 + (cbSceneParam._m0[72u].w * _2564)));
        _2607 = _2596 * 0.999000012874603271484375;
        _2617 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2617)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2607) < 0.5)
            {
                _2773 = true;
                break;
            }
        }
        uint _2714 = _577 + uint(_2576.w);
        if ((cbInstanceData._m0[_2714].w < 1.0) && ((cbInstanceData._m0[_2714].w + _2607) < 0.5))
        {
            _2773 = true;
            break;
        }
        if ((_2600 + 1.0) < _2598.x)
        {
            _2773 = true;
            break;
        }
        _2773 = false;
        break;
    }
    float _2978;
    if (_2773)
    {
        discard_state = true;
        _2978 = 0.0;
    }
    else
    {
        _2978 = cbInstanceData._m0[_2439].w;
    }
    SV_Target.x = _2604;
    SV_Target.y = _2605;
    SV_Target.z = _2606;
    SV_Target.w = _2978;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2439].w;
    discard_exit();
}


