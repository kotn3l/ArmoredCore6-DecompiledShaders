#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1320;
float _3700;
float _3701;
float _3702;
float _3703;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _355 = _353.x;
    float _367 = dot(vec4(_355, _353.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_355 - _367) * cbMtdParam._m0[24u].y) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3712 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _392 = (_385 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _393 = (_385 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _394 = (_385 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _443 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _457 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_433 - _443) * cbMtdParam._m0[24u].y) + _443) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3723 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _465 = (_458 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _466 = (_458 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _467 = (_458 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _502 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _504 = _502.x;
    float _505 = _502.y;
    float _506 = _502.z;
    float _513 = ((_485.x - _504) * _385) + _504;
    float _514 = ((_485.y - _505) * _385) + _505;
    float _515 = ((_485.z - _506) * _385) + _506;
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _540 = ((_527.z - _515) * _458) + _515;
    float _543 = ((((_527.x - _513) * _458) + _513) * 2.0) + (-1.0);
    float _545 = ((((_527.y - _514) * _458) + _514) * 2.0) + (-1.0);
    float _546 = dot(vec2(_543, _545), vec2(_543, _545));
    float _3734 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))));
    vec4 _564 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _584 = _582.x;
    float _585 = 1.0 - _584;
    float _598 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_584 - _585) * cbMtdParam._m0[24u].z) + _585) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3745 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _606 = (_599 * (cbMtdParam._m0[17u].x - _465)) + _465;
    float _607 = (_599 * (cbMtdParam._m0[17u].y - _466)) + _466;
    float _608 = (_599 * (cbMtdParam._m0[17u].z - _467)) + _467;
    vec4 _620 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _636 = _634.x;
    float _654 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _636) * _385) + _636;
    float _671 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _266) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _267) + cbTextureTilingScale._m0[21u].w)).x - _654) * _458) + _654;
    float _675 = ((_620.x - _671) * cbMtdParam._m0[19u].z) + _671;
    float _677 = _675 - (_675 * _599);
    vec4 _690 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _697 = (_690.x * 2.0) + (-1.0);
    float _698 = (_690.y * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _3756 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _707 = (_599 * (_690.z - _540)) + _540;
    float _719 = (((_697 - _543) + (cbMtdParam._m0[21u].x * _543)) * _599) + _543;
    float _720 = (((_698 - _545) + (cbMtdParam._m0[21u].x * _545)) * _599) + _545;
    float _721 = (_599 * (sqrt(1.0 - (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) - _551)) + _551;
    float _726 = cbMtdParam._m0[22u].x + _564.w;
    float _729 = fma(_721, _233 * NORMAL.x, fma(_720, _240 * TANGENT.x, (_226 * _218) * _719));
    float _732 = fma(_721, _233 * NORMAL.y, fma(_720, _240 * TANGENT.y, (_226 * _219) * _719));
    float _735 = fma(_721, _233 * NORMAL.z, fma(_720, _240 * TANGENT.z, (_226 * _220) * _719));
    float _739 = inversesqrt(dot(vec3(_729, _732, _735), vec3(_729, _732, _735)));
    float _740 = _739 * _729;
    float _741 = _739 * _732;
    float _742 = _739 * _735;
    float _3767 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _743 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _3789 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3800 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3811 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3822 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _748 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _762 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _813 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _803);
    float _814 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _803);
    float _815 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _803);
    float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
    float _820 = _813 * _819;
    float _821 = _814 * _819;
    float _822 = _815 * _819;
    vec4 _827 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _829 = _827.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1001 = sqrt(((_813 * _813) + (_814 * _814)) + (_815 * _815));
        float _1007 = (cbMatDynParam._m0[5u].x * _1001) + cbMatDynParam._m0[5u].y;
        float _3833 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1012 = (cbMatDynParam._m0[5u].z * _1001) + cbMatDynParam._m0[5u].w;
        float _3844 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) - _1008)) + _1008) < ((_829 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _840 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _841 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _859 = fma(_742, cbSceneParam._m0[5u].z, fma(_741, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _740));
    float _862 = fma(_742, cbSceneParam._m0[6u].z, fma(_741, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _740));
    float _865 = fma(_742, cbSceneParam._m0[7u].z, fma(_741, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _740));
    uint _878 = _246 + 9u;
    uint _879 = _878 + uint(cbMatDynParam._m0[0u].w);
    float _885 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * cbInstanceData._m0[_879].x;
    float _886 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * cbInstanceData._m0[_879].y;
    float _887 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_879].z;
    float _3855 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _891 = 1.0 - _748;
    float _892 = _888 * _891;
    float _893 = _889 * _891;
    float _894 = _890 * _891;
    float _899 = (_888 + (-0.039999999105930328369140625)) * _748;
    float _900 = (_889 + (-0.039999999105930328369140625)) * _748;
    float _901 = (_890 + (-0.039999999105930328369140625)) * _748;
    float _902 = _899 + 0.039999999105930328369140625;
    float _904 = _900 + 0.039999999105930328369140625;
    float _905 = _901 + 0.039999999105930328369140625;
    vec4 _914 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _840, cbSceneParam._m0[86u].y * _841));
    float _918 = ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * TEXCOORD_5.w) * _914.x;
    float _919 = dot(vec3(_740, _741, _742), vec3(_820, _821, _822));
    float _922 = _919 * 2.0;
    float _926 = (_922 * _740) - _820;
    float _927 = (_922 * _741) - _821;
    float _928 = (_922 * _742) - _822;
    float _932 = abs(dot(vec3(_820, _821, _822), vec3(_740, _741, _742)));
    float _3888 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _934 = sqrt(_743);
    float _947 = exp2((_934 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_934 * 3.0));
    float _953 = (1.0 - _947) * ((_934 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _954 = _947 * _934;
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1319;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1044 = fma(_990, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _982));
        float _1048 = fma(_990, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _982));
        float _1052 = fma(_990, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _982));
        float _1077 = _982 + _740;
        float _1078 = _986 + _741;
        float _1079 = _990 + _742;
        float _1089 = fma(_1079, cbModelParam._m0[26u].z, fma(_1078, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077)) - _1044;
        float _1090 = fma(_1079, cbModelParam._m0[27u].z, fma(_1078, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077)) - _1048;
        float _1091 = fma(_1079, cbModelParam._m0[28u].z, fma(_1078, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077)) - _1052;
        float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
        float _1108 = ((_1095 * _1089) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1044 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1095 * _1090) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1048 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1095 * _1091) / cbModelParam._m0[34u].z) + ((((((_1052 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        float _1147 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1113.x + (-0.5));
        float _1149 = _1147 * (_1113.y + (-0.5));
        float _1150 = _1147 * (_1113.z + (-0.5));
        float _1157 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1120.x + (-0.5));
        float _1159 = _1157 * (_1120.y + (-0.5));
        float _1160 = _1157 * (_1120.z + (-0.5));
        float _1167 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1127.x + (-0.5));
        float _1169 = _1167 * (_1127.y + (-0.5));
        float _1170 = _1167 * (_1127.z + (-0.5));
        float _1177 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1134.x + (-0.5));
        float _1179 = _1177 * (_1134.y + (-0.5));
        float _1180 = _1177 * (_1134.z + (-0.5));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = _1148 * 0.5;
        float _1185 = _1158 * 0.5;
        float _1186 = _1168 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1201 = (dot(vec3(_740, _741, _742), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1211 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3936 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1213 + 1.0))) + _1218) * _1181;
        float _1228 = _1149 * 0.5;
        float _1229 = _1159 * 0.5;
        float _1230 = _1169 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_740, _741, _742), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3969 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1255 + 1.0))) + _1260) * _1182;
        float _1270 = _1150 * 0.5;
        float _1271 = _1160 * 0.5;
        float _1272 = _1170 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_740, _741, _742), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4002 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1297 + 1.0))) + _1302) * _1183;
        _1319 = _1150;
        _1321 = _1149;
        _1322 = _1148;
        _1323 = _1160;
        _1324 = _1159;
        _1325 = _1158;
        _1326 = _1170;
        _1327 = _1169;
        _1328 = _1168;
        _1329 = _1183;
        _1330 = _1182;
        _1331 = _1181;
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
    }
    else
    {
        _1319 = _1320;
        _1321 = _1320;
        _1322 = _1320;
        _1323 = _1320;
        _1324 = _1320;
        _1325 = _1320;
        _1326 = _1320;
        _1327 = _1320;
        _1328 = _1320;
        _1329 = _1320;
        _1330 = _1320;
        _1331 = _1320;
        _1332 = 0.0;
        _1333 = 0.0;
        _1334 = 0.0;
    }
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1361 = fma(_990, cbModelParam._m0[30u].z, fma(_986, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982));
        float _1365 = fma(_990, cbModelParam._m0[31u].z, fma(_986, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982));
        float _1369 = fma(_990, cbModelParam._m0[32u].z, fma(_986, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982));
        float _1392 = _982 + _740;
        float _1393 = _986 + _741;
        float _1394 = _990 + _742;
        float _1404 = fma(_1394, cbModelParam._m0[30u].z, fma(_1393, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1392)) - _1361;
        float _1405 = fma(_1394, cbModelParam._m0[31u].z, fma(_1393, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1392)) - _1365;
        float _1406 = fma(_1394, cbModelParam._m0[32u].z, fma(_1393, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1392)) - _1369;
        float _1410 = inversesqrt(dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406)));
        float _1423 = ((_1410 * _1404) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1361 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1410 * _1405) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1365 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1410 * _1406) / cbModelParam._m0[35u].z) + ((((((_1369 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        float _1460 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1427.x + (-0.5));
        float _1462 = _1460 * (_1427.y + (-0.5));
        float _1463 = _1460 * (_1427.z + (-0.5));
        float _1470 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1434.x + (-0.5));
        float _1472 = _1470 * (_1434.y + (-0.5));
        float _1473 = _1470 * (_1434.z + (-0.5));
        float _1480 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1441.x + (-0.5));
        float _1482 = _1480 * (_1441.y + (-0.5));
        float _1483 = _1480 * (_1441.z + (-0.5));
        float _1490 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1448.x + (-0.5));
        float _1492 = _1490 * (_1448.y + (-0.5));
        float _1493 = _1490 * (_1448.z + (-0.5));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = _1461 * 0.5;
        float _1498 = _1471 * 0.5;
        float _1499 = _1481 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_740, _741, _742), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4065 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1524 + 1.0))) + _1529) * _1494;
        float _1539 = _1462 * 0.5;
        float _1540 = _1472 * 0.5;
        float _1541 = _1482 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_740, _741, _742), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4098 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1566 + 1.0))) + _1571) * _1495;
        float _1581 = _1463 * 0.5;
        float _1582 = _1473 * 0.5;
        float _1583 = _1483 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_740, _741, _742), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4131 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1608 + 1.0))) + _1613) * _1496;
        _1630 = _1463;
        _1631 = _1462;
        _1632 = _1461;
        _1633 = _1473;
        _1634 = _1472;
        _1635 = _1471;
        _1636 = _1483;
        _1637 = _1482;
        _1638 = _1481;
        _1639 = _1496;
        _1640 = _1495;
        _1641 = _1494;
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    }
    else
    {
        _1630 = _1320;
        _1631 = _1320;
        _1632 = _1320;
        _1633 = _1320;
        _1634 = _1320;
        _1635 = _1320;
        _1636 = _1320;
        _1637 = _1320;
        _1638 = _1320;
        _1639 = _1320;
        _1640 = _1320;
        _1641 = _1320;
        _1642 = 0.0;
        _1643 = 0.0;
        _1644 = 0.0;
    }
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1332)) + _1332;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1333)) + _1333;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1334)) + _1334;
    float _1677 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1654));
    float _1698 = _926 * 0.5;
    float _1699 = _927 * 0.5;
    float _1700 = _928 * 0.5;
    float _1701 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1704 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1707 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1741;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1714 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1319, _1323, _1326, _1329));
        float _1718 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1722 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1322, _1325, _1328, _1331));
        float _1729 = dot(vec4(cbModelParam._m0[39u]), vec4(_1698, _1699, _1700, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1752;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1743 = dot(vec4(cbModelParam._m0[40u]), vec4(_1698, _1699, _1700, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1756 = (_1752 * cbModelParam._m0[1u].x) + (_1741 * (1.0 - cbModelParam._m0[1u].x));
    float _1766 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _743);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1766 : min(cbModelParam._m0[25u].z, _1766));
    float _1848;
    float _1850;
    float _1852;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1815 = fma(_990, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982)) + cbModelParam._m0[13u].w;
        float _1819 = fma(_990, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982)) + cbModelParam._m0[14u].w;
        float _1823 = fma(_990, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982)) + cbModelParam._m0[15u].w;
        float _1826 = fma(_928, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926));
        float _1829 = fma(_928, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926));
        float _1832 = fma(_928, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926));
        float _1860;
        if (_1826 > 0.0)
        {
            _1860 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1860 = frontier_phi_17_15_ladder;
        }
        float _2063;
        if (_1829 > 0.0)
        {
            _2063 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2063 = frontier_phi_26_22_ladder;
        }
        float _2317;
        if (_1832 > 0.0)
        {
            _2317 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2317 = frontier_phi_38_33_ladder;
        }
        float _2319 = isnan(_2063) ? _1860 : (isnan(_1860) ? _2063 : min(_1860, _2063));
        float _2320 = isnan(_2317) ? _2319 : (isnan(_2319) ? _2317 : min(_2319, _2317));
        float _2324 = (_2320 * _1826) + _1815;
        float _2325 = (_2320 * _1829) + _1819;
        float _2326 = (_2320 * _1832) + _1823;
        float _2327 = _2320 * 9.9999997473787516355514526367188e-05;
        float _2329 = (-1.0) - _2327;
        float _2331 = _2327 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2326 > _2331) || ((_2326 < _2329) || ((_2325 > _2331) || ((_2325 < _2329) || ((_2324 < _2329) || (_2324 > _2331))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2326, cbModelParam._m0[9u].z, fma(_2325, cbModelParam._m0[9u].y, _2324 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2326, cbModelParam._m0[10u].z, fma(_2325, cbModelParam._m0[10u].y, _2324 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2326, cbModelParam._m0[11u].z, fma(_2325, cbModelParam._m0[11u].y, _2324 * cbModelParam._m0[11u].x))), _1767);
            frontier_phi_16_38_ladder = _2454.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2454.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2454.x * cbModelParam._m0[1u].y;
        }
        _1848 = frontier_phi_16_38_ladder_2;
        _1850 = frontier_phi_16_38_ladder_1;
        _1852 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_926, _927, _928), _1767);
        _1848 = _1836.x * cbModelParam._m0[1u].y;
        _1850 = _1836.y * cbModelParam._m0[1u].y;
        _1852 = _1836.z * cbModelParam._m0[1u].y;
    }
    float _1856 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _743);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1856 : min(cbModelParam._m0[25u].w, _1856));
    float _1947;
    float _1949;
    float _1951;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1911 = fma(_990, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982)) + cbModelParam._m0[21u].w;
        float _1915 = fma(_990, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982)) + cbModelParam._m0[22u].w;
        float _1919 = fma(_990, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982)) + cbModelParam._m0[23u].w;
        float _1922 = fma(_928, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926));
        float _1925 = fma(_928, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926));
        float _1928 = fma(_928, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926));
        float _2068;
        if (_1922 > 0.0)
        {
            _2068 = abs((1.0 - _1911) / _1922);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1911 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2068 = frontier_phi_28_24_ladder;
        }
        float _2344;
        if (_1925 > 0.0)
        {
            _2344 = abs((1.0 - _1915) / _1925);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1915 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2344 = frontier_phi_40_35_ladder;
        }
        float _2557;
        if (_1928 > 0.0)
        {
            _2557 = abs((1.0 - _1919) / _1928);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1919 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2557 = frontier_phi_49_46_ladder;
        }
        float _2559 = isnan(_2344) ? _2068 : (isnan(_2068) ? _2344 : min(_2068, _2344));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _1922) + _1911;
        float _2565 = (_2560 * _1925) + _1915;
        float _2566 = (_2560 * _1928) + _1919;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2567;
        float _2570 = _2567 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2566 > _2570) || ((_2566 < _2568) || ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 < _2568) || (_2564 > _2570))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2566, cbModelParam._m0[17u].z, fma(_2565, cbModelParam._m0[17u].y, _2564 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2566, cbModelParam._m0[18u].z, fma(_2565, cbModelParam._m0[18u].y, _2564 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2566, cbModelParam._m0[19u].z, fma(_2565, cbModelParam._m0[19u].y, _2564 * cbModelParam._m0[19u].x))), _1857);
            frontier_phi_25_49_ladder = _2765.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2765.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2765.x * cbModelParam._m0[1u].z;
        }
        _1947 = frontier_phi_25_49_ladder_2;
        _1949 = frontier_phi_25_49_ladder_1;
        _1951 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1931 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_926, _927, _928), _1857);
        _1947 = _1931.x * cbModelParam._m0[1u].z;
        _1949 = _1931.y * cbModelParam._m0[1u].z;
        _1951 = _1931.z * cbModelParam._m0[1u].z;
    }
    float _1964 = (((_953 * _902) + _954) * _918) * ((cbModelParam._m0[1u].w * (_1947 - _1848)) + _1848);
    float _1966 = (((_953 * _904) + _954) * _918) * ((cbModelParam._m0[1u].w * (_1949 - _1850)) + _1850);
    float _1968 = (((_953 * _905) + _954) * _918) * ((cbModelParam._m0[1u].w * (_1951 - _1852)) + _1852);
    float _1971 = fma(_1968, cbSceneParam._m0[89u].z, fma(_1966, cbSceneParam._m0[89u].y, _1964 * cbSceneParam._m0[89u].x));
    float _1974 = fma(_1968, cbSceneParam._m0[90u].z, fma(_1966, cbSceneParam._m0[90u].y, _1964 * cbSceneParam._m0[90u].x));
    float _1977 = fma(_1968, cbSceneParam._m0[91u].z, fma(_1966, cbSceneParam._m0[91u].y, _1964 * cbSceneParam._m0[91u].x));
    uvec4 _1987 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _1989 = _1987.x * 14u;
    uint _1990 = _1989 + 13u;
    float _1997 = _918 + (-1.0);
    float _2002 = (cbLight._m0[_1990].x * _1997) + 1.0;
    float _2003 = (cbLight._m0[_1990].y * _1997) + 1.0;
    float _2004 = (cbLight._m0[_1990].z * _1997) + 1.0;
    float _2005 = (cbLight._m0[_1990].w * _1997) + 1.0;
    uint _2006 = _1989 + 5u;
    float _2012 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2016 = _1989 + 4u;
    float _2022 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2026 = _1989 | 1u;
    float _2037 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_740, _741, _742));
    float _2040 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_740, _741, _742));
    float _4267 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _4278 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2045 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * 0.3183098733425140380859375;
    float _2047 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2054 = ((cbLight._m0[_2006].x * _2012) * _2047) + ((cbLight._m0[_2016].x * _2022) * _2045);
    float _2055 = ((_2012 * cbLight._m0[_2006].y) * _2047) + ((_2022 * cbLight._m0[_2016].y) * _2045);
    float _2056 = ((_2012 * cbLight._m0[_2006].z) * _2047) + ((_2022 * cbLight._m0[_2016].z) * _2045);
    uvec4 _2060 = floatBitsToUint(cbLight._m0[_1989 + 12u]);
    bool _2062 = _2060.x == 0u;
    float _2073;
    float _2075;
    float _2077;
    if (_2062)
    {
        _2073 = _2054;
        _2075 = _2055;
        _2077 = _2056;
    }
    else
    {
        uint _2081 = _1989 + 6u;
        float _2097 = (dot(vec3(cbLight._m0[_1989 + 2u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2098 = _2097 * _2097;
        float _4289 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2099 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2100 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2073 = (((cbLight._m0[_2081].x * 0.3183098733425140380859375) * _2099) * _2100) + _2054;
        _2075 = (((cbLight._m0[_2081].y * 0.3183098733425140380859375) * _2099) * _2100) + _2055;
        _2077 = (((cbLight._m0[_2081].z * 0.3183098733425140380859375) * _2099) * _2100) + _2056;
    }
    bool _2080 = _2060.y == 0u;
    float _2118;
    float _2120;
    float _2122;
    if (_2080)
    {
        _2118 = _2073;
        _2120 = _2075;
        _2122 = _2077;
    }
    else
    {
        uint _2288 = _1989 + 7u;
        float _2304 = (dot(vec3(cbLight._m0[_1989 + 3u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2305 = _2304 * _2304;
        float _4305 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2306 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2307 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2118 = (((cbLight._m0[_2288].x * 0.3183098733425140380859375) * _2306) * _2307) + _2073;
        _2120 = (((cbLight._m0[_2288].y * 0.3183098733425140380859375) * _2306) * _2307) + _2075;
        _2122 = (((cbLight._m0[_2288].z * 0.3183098733425140380859375) * _2306) * _2307) + _2077;
    }
    uint _2125 = _1989 + 8u;
    float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _743) * 0.949999988079071044921875);
    float _2139 = _2138 * _2138;
    float _2140 = cbLight._m0[_1989].x + _820;
    float _2141 = cbLight._m0[_1989].y + _821;
    float _2142 = cbLight._m0[_1989].z + _822;
    float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
    float _2147 = _2146 * _2140;
    float _2148 = _2146 * _2141;
    float _2149 = _2146 * _2142;
    float _2150 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_1989].xyz));
    float _4321 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _4332 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _2154 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2155 = dot(vec3(_740, _741, _742), vec3(_2147, _2148, _2149));
    float _4343 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2159 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2147, _2148, _2149));
    float _4354 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2163 = _2139 * _2139;
    float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
    float _2175 = exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0);
    float _2176 = 0.959999978542327880859375 - _899;
    float _2178 = 0.959999978542327880859375 - _900;
    float _2179 = 0.959999978542327880859375 - _901;
    float _2186 = 1.0 - _2139;
    float _2197 = (0.5 / (((_2154 * ((_2153 * _2186) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2186) + _2139) * _2153))) * _2153;
    float _4365 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
    uint _2210 = _1989 + 9u;
    float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _743) * 0.949999988079071044921875);
    float _2222 = _2221 * _2221;
    float _2223 = cbLight._m0[_2026].x + _820;
    float _2224 = cbLight._m0[_2026].y + _821;
    float _2225 = cbLight._m0[_2026].z + _822;
    float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
    float _2230 = _2229 * _2223;
    float _2231 = _2229 * _2224;
    float _2232 = _2229 * _2225;
    float _2233 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2026].xyz));
    float _4376 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2237 = dot(vec3(_740, _741, _742), vec3(_2230, _2231, _2232));
    float _4387 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2241 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2230, _2231, _2232));
    float _4398 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2245 = _2222 * _2222;
    float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
    float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
    float _2263 = 1.0 - _2222;
    float _2273 = (0.5 / (((_2154 * ((_2236 * _2263) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2263) + _2222) * _2236))) * _2236;
    float _4409 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2275 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
    float _2285 = (((((_2256 * _2176) + _902) * cbLight._m0[_2210].x) * _2275) * _2012) + (((((_2175 * _2176) + _902) * cbLight._m0[_2125].x) * _2199) * _2022);
    float _2286 = (((((_2256 * _2178) + _904) * cbLight._m0[_2210].y) * _2275) * _2012) + (((((_2175 * _2178) + _904) * cbLight._m0[_2125].y) * _2199) * _2022);
    float _2287 = (((((_2256 * _2179) + _905) * cbLight._m0[_2210].z) * _2275) * _2012) + (((((_2175 * _2179) + _905) * cbLight._m0[_2125].z) * _2199) * _2022);
    float _2349;
    float _2351;
    float _2353;
    if (_2062)
    {
        _2349 = _2285;
        _2351 = _2286;
        _2353 = _2287;
    }
    else
    {
        uint _2355 = _1989 + 2u;
        uint _2359 = _1989 + 10u;
        float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _743) * 0.949999988079071044921875);
        float _2374 = _2373 * _2373;
        float _2375 = cbLight._m0[_2355].x + _820;
        float _2376 = cbLight._m0[_2355].y + _821;
        float _2377 = cbLight._m0[_2355].z + _822;
        float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
        float _2382 = _2381 * _2375;
        float _2383 = _2381 * _2376;
        float _2384 = _2381 * _2377;
        float _2385 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2355].xyz));
        float _4420 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2389 = dot(vec3(_740, _741, _742), vec3(_2382, _2383, _2384));
        float _4431 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2393 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2382, _2383, _2384));
        float _4442 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2397 = _2374 * _2374;
        float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
        float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
        float _2415 = 1.0 - _2374;
        float _2425 = (0.5 / (((_2154 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2415) + _2374) * _2388))) * _2388;
        float _4453 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2427 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
        float _2428 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2349 = (((((_2408 * _2176) + _902) * cbLight._m0[_2359].x) * _2427) * _2428) + _2285;
        _2351 = (((((_2408 * _2178) + _904) * cbLight._m0[_2359].y) * _2427) * _2428) + _2286;
        _2353 = (((((_2408 * _2179) + _905) * cbLight._m0[_2359].z) * _2427) * _2428) + _2287;
    }
    float _2463;
    float _2465;
    float _2467;
    if (_2080)
    {
        _2463 = _2349;
        _2465 = _2351;
        _2467 = _2353;
    }
    else
    {
        uint _2474 = _1989 + 3u;
        uint _2478 = _1989 + 11u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _743) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _820;
        float _2495 = cbLight._m0[_2474].y + _821;
        float _2496 = cbLight._m0[_2474].z + _822;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2474].xyz));
        float _4469 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2508 = dot(vec3(_740, _741, _742), vec3(_2501, _2502, _2503));
        float _4480 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4491 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0);
        float _2534 = 1.0 - _2493;
        float _2544 = (0.5 / (((_2154 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2534) + _2493) * _2507))) * _2507;
        float _4502 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2463 = (((((_2527 * _2176) + _902) * cbLight._m0[_2478].x) * _2546) * _2547) + _2349;
        _2465 = (((((_2527 * _2178) + _904) * cbLight._m0[_2478].y) * _2546) * _2547) + _2351;
        _2467 = (((((_2527 * _2179) + _905) * cbLight._m0[_2478].z) * _2546) * _2547) + _2353;
    }
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    if (_1987.y == 0u)
    {
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2622;
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2622;
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2622;
        uvec4 _2637 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2638 = _2637.x;
        uint _2649 = uint((float(_2637.y) * floor(float(uint(cbSceneParam._m0[85u].y * _841) / _2638))) + floor(float(uint(cbSceneParam._m0[85u].x * _840) / _2638)));
        float _2659 = (log2(_2625 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2660 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        uint _2663 = uint(isnan(14.0) ? _2660 : (isnan(_2660) ? 14.0 : min(_2660, 14.0)));
        uvec4 _2668 = texelFetch(g_lightClusterGridBuffer, int(((_2663 << 2u) + (_2649 << 6u)) >> 2u));
        uint _2669 = _2668.x;
        uint _2670 = _2637.z;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        if (((((1u << ((_2670 >> 4u) & 15u)) + 4294967295u) & _2669) == 0u) || ((_2670 & 240u) == 0u))
        {
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
        }
        else
        {
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            uint _2929 = 0u;
            uint _2938;
            bool _2939;
            for (;;)
            {
                _2938 = texelFetch(g_lightClassification, int((((_2663 << 5u) + (_2649 << 9u)) + (_2929 << 2u)) >> 2u)).x;
                _2939 = _2938 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2939)
                {
                    frontier_phi_66_pred = _2923;
                    frontier_phi_66_pred_1 = _2928;
                    frontier_phi_66_pred_2 = _2927;
                    frontier_phi_66_pred_3 = _2926;
                    frontier_phi_66_pred_4 = _2925;
                    frontier_phi_66_pred_5 = _2924;
                }
                else
                {
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    uint _3074;
                    _3068 = _2923;
                    _3069 = _2924;
                    _3070 = _2925;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2938;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    for (;;)
                    {
                        uint _3078 = uint(findLSB(_3074)) + (_2929 << 5u);
                        uint _3075 = (_3074 + 4294967295u) & _3074;
                        uint _3080 = _3078 * 48u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3100 = (_3078 * 48u) + 4u;
                        vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 3u)).x));
                        uint _3119 = (_3078 * 48u) + 8u;
                        vec3 _3130 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x));
                        float _3134 = _3094.x - _2623;
                        float _3135 = _3094.y - _2624;
                        float _3136 = _3094.z - _2625;
                        float _3137 = dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136));
                        float _3140 = inversesqrt(_3137);
                        float _3141 = _3140 * _3134;
                        float _3142 = _3140 * _3135;
                        float _3143 = _3140 * _3136;
                        float _3144 = dot(vec3(_859, _862, _865), vec3(_3141, _3142, _3143));
                        float _3149 = 1.0 - (_3137 * _3094.w);
                        float _4528 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3151 = sqrt(_3137) * _3113.w;
                        float _3154 = 1.39999997615814208984375 / (_3151 + 1.39999997615814208984375);
                        float _3155 = _3154 * _3154;
                        float _3158 = ((1.0 - _3155) * _3144) + _3155;
                        float _3161 = _3151 * _3151;
                        float _3165 = ((isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))) * _3150) / ((_3161 * 0.699999988079071044921875) + 1.0);
                        float _3169 = (-0.0) - _2623;
                        float _3170 = (-0.0) - _2624;
                        float _3171 = (-0.0) - _2625;
                        float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3186 = exp2(log2(1.0 / ((_3161 * 3.5) + 5.0)) * 0.25);
                        float _3187 = 1.0 - _934;
                        float _3194 = sqrt(1.0 - ((1.0 - (_3187 * _3187)) * (1.0 - (_3186 * _3186))));
                        float _3195 = _3194 * _3194;
                        float _3196 = _3195 * _3195;
                        float _3197 = _3176 + _3141;
                        float _3198 = _3177 + _3142;
                        float _3199 = _3178 + _3143;
                        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                        float _3207 = dot(vec3(_859, _862, _865), vec3(_3176, _3177, _3178));
                        float _4544 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3210 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3211 = dot(vec3(_859, _862, _865), vec3(_3203 * _3197, _3203 * _3198, _3203 * _3199));
                        float _4555 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3214 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3218 = ((_3214 * _3214) * (_3196 + (-1.0))) + 1.0;
                        float _3219 = _3154 * _3195;
                        float _3220 = _3219 * _3219;
                        float _3223 = ((1.0 - _3220) * _3144) + _3220;
                        float _4566 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3224 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3225 = 1.0 - _3195;
                        float _3235 = (0.5 / (((_3224 * ((_3210 * _3225) + _3195)) + 9.9999999392252902907785028219223e-09) + (((_3224 * _3225) + _3195) * _3210))) * _3224;
                        float _4577 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3246 = (((_3196 * 3.1415927410125732421875) * (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) / ((_3218 * _3218) * ((_3161 * 2.1991131305694580078125) + 3.141590118408203125))) * _3150;
                        _2998 = (_3165 * _3113.x) + _3071;
                        _2999 = (_3165 * _3113.y) + _3072;
                        _3000 = (_3165 * _3113.z) + _3073;
                        _2995 = (_3246 * _3130.x) + _3068;
                        _2996 = (_3246 * _3130.y) + _3069;
                        _2997 = (_3246 * _3130.z) + _3070;
                        if (_3075 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3068 = _2995;
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3075;
                        }
                    }
                    frontier_phi_66_pred = _2995;
                    frontier_phi_66_pred_1 = _3000;
                    frontier_phi_66_pred_2 = _2999;
                    frontier_phi_66_pred_3 = _2998;
                    frontier_phi_66_pred_4 = _2997;
                    frontier_phi_66_pred_5 = _2996;
                }
                _2771 = frontier_phi_66_pred;
                _2781 = frontier_phi_66_pred_1;
                _2779 = frontier_phi_66_pred_2;
                _2777 = frontier_phi_66_pred_3;
                _2775 = frontier_phi_66_pred_4;
                _2773 = frontier_phi_66_pred_5;
                uint _2930 = _2929 + 1u;
                if (_2930 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2923 = _2771;
                    _2924 = _2773;
                    _2925 = _2775;
                    _2926 = _2777;
                    _2927 = _2779;
                    _2928 = _2781;
                    _2929 = _2930;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
        }
        uvec4 _2784 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2785 = _2784.z;
        uint _2787 = (_2785 >> 8u) & 15u;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        if (((4294967295u << _2787) & _2669) == 0u)
        {
            _2891 = _2770;
            _2893 = _2772;
            _2895 = _2774;
            _2897 = _2776;
            _2899 = _2778;
            _2901 = _2780;
        }
        else
        {
            float _2916 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
            float _2917 = _2916 * _2623;
            float _2918 = _2916 * _2624;
            float _2919 = _2916 * _2625;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2787 < ((_2785 >> 12u) & 15u))
            {
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _3051 = _2770;
                float _3052 = _2772;
                float _3053 = _2774;
                float _3054 = _2776;
                float _3055 = _2778;
                float _3056 = _2780;
                uint _3057 = _2787;
                uint _3066;
                bool _3067;
                for (;;)
                {
                    _3066 = texelFetch(g_lightClassification, int((((_2663 << 5u) + (_2649 << 9u)) + (_3057 << 2u)) >> 2u)).x;
                    _3067 = _3066 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3067)
                    {
                        frontier_phi_77_pred = _3056;
                        frontier_phi_77_pred_1 = _3055;
                        frontier_phi_77_pred_2 = _3054;
                        frontier_phi_77_pred_3 = _3053;
                        frontier_phi_77_pred_4 = _3052;
                        frontier_phi_77_pred_5 = _3051;
                    }
                    else
                    {
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3273 = _3051;
                        float _3274 = _3052;
                        float _3275 = _3053;
                        float _3276 = _3054;
                        float _3277 = _3055;
                        float _3278 = _3056;
                        uint _3279 = _3066;
                        uint _3280;
                        vec4 _3305;
                        float _3306;
                        vec4 _3321;
                        vec3 _3333;
                        vec4 _3348;
                        vec4 _3363;
                        float _3409;
                        bool _3410;
                        for (;;)
                        {
                            uint _3290 = ((_3057 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3279));
                            _3280 = (_3279 + 4294967295u) & _3279;
                            uint _3292 = _3290 * 40u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3306 = _3305.w;
                            uint _3308 = (_3290 * 40u) + 4u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3290 * 40u) + 8u;
                            _3333 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x));
                            uint _3335 = (_3290 * 40u) + 16u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3290 * 40u) + 20u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3290 * 40u) + 24u;
                            vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3384 = (_3290 * 40u) + 28u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3409 = fma(_2625, _3397.z, fma(_2624, _3397.y, _3397.x * _2623)) + _3397.w;
                            _3410 = !((fma(_2625, _3378.z, fma(_2624, _3378.y, _3378.x * _2623)) + _3378.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3410)
                            {
                                float _3437 = _3305.x - _2623;
                                float _3438 = _3305.y - _2624;
                                float _3439 = _3305.z - _2625;
                                float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                                float _3443 = inversesqrt(_3440);
                                float _3444 = _3443 * _3437;
                                float _3445 = _3443 * _3438;
                                float _3446 = _3443 * _3439;
                                float _3450 = 1.0 - (_3440 / (_3306 * _3306));
                                float _4588 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3455 = sqrt(_3440) * _3321.w;
                                float _3457 = 1.39999997615814208984375 / (_3455 + 1.39999997615814208984375);
                                float _3458 = _3457 * _3457;
                                float _3461 = ((1.0 - _3458) * dot(vec3(_3444, _3445, _3446), vec3(_859, _862, _865))) + _3458;
                                float _3464 = _3455 * _3455;
                                float _3468 = (fma(_2625, _3348.z, fma(_2624, _3348.y, _3348.x * _2623)) + _3348.w) / _3409;
                                float _3469 = (fma(_2625, _3363.z, fma(_2624, _3363.y, _3363.x * _2623)) + _3363.w) / _3409;
                                float _3473 = 1.0 - dot(vec2(_3468, _3469), vec2(_3468, _3469));
                                float _4604 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3475 = _3474 * (((isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0))) * _3451) / ((_3464 * 0.699999988079071044921875) + 1.0));
                                float _3487 = exp2(log2(1.0 / ((_3464 * 3.5) + 5.0)) * 0.25);
                                float _3488 = 1.0 - _934;
                                float _3495 = sqrt(1.0 - ((1.0 - (_3488 * _3488)) * (1.0 - (_3487 * _3487))));
                                float _3496 = _3495 * _3495;
                                float _3497 = _3496 * _3496;
                                float _3498 = _3444 - _2917;
                                float _3499 = _3445 - _2918;
                                float _3500 = _3446 - _2919;
                                float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                                float _3508 = dot(vec3(_859, _862, _865), vec3((-0.0) - _2917, (-0.0) - _2918, (-0.0) - _2919));
                                float _4615 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3512 = dot(vec3(_859, _862, _865), vec3(_3504 * _3498, _3504 * _3499, _3504 * _3500));
                                float _4626 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3519 = ((_3515 * _3515) * (_3497 + (-1.0))) + 1.0;
                                float _3520 = _3457 * _3496;
                                float _3521 = _3520 * _3520;
                                float _3527 = ((1.0 - _3521) * dot(vec3(_859, _862, _865), vec3(_3444, _3445, _3446))) + _3521;
                                float _4637 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3529 = 1.0 - _3496;
                                float _3539 = (0.5 / (((_3528 * ((_3511 * _3529) + _3496)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3496) * _3511))) * _3528;
                                float _4648 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3549 = (_3474 * _3451) * (((_3497 * 3.1415927410125732421875) * (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) / ((_3519 * _3519) * ((_3464 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3475 * _3321.y;
                                frontier_phi_83_pred_1 = _3475 * _3321.x;
                                frontier_phi_83_pred_2 = _3549 * _3333.z;
                                frontier_phi_83_pred_3 = _3549 * _3333.y;
                                frontier_phi_83_pred_4 = _3549 * _3333.x;
                                frontier_phi_83_pred_5 = _3475 * _3321.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3557 = frontier_phi_83_pred;
                            _3556 = frontier_phi_83_pred_1;
                            _3555 = frontier_phi_83_pred_2;
                            _3554 = frontier_phi_83_pred_3;
                            _3553 = frontier_phi_83_pred_4;
                            _3558 = frontier_phi_83_pred_5;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            if (_3280 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3280;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3265;
                        frontier_phi_77_pred_1 = _3264;
                        frontier_phi_77_pred_2 = _3263;
                        frontier_phi_77_pred_3 = _3262;
                        frontier_phi_77_pred_4 = _3261;
                        frontier_phi_77_pred_5 = _3260;
                    }
                    _2902 = frontier_phi_77_pred;
                    _2900 = frontier_phi_77_pred_1;
                    _2898 = frontier_phi_77_pred_2;
                    _2896 = frontier_phi_77_pred_3;
                    _2894 = frontier_phi_77_pred_4;
                    _2892 = frontier_phi_77_pred_5;
                    uint _3058 = _3057 + 1u;
                    if (_3058 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3051 = _2892;
                        _3052 = _2894;
                        _3053 = _2896;
                        _3054 = _2898;
                        _3055 = _2900;
                        _3056 = _2902;
                        _3057 = _3058;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2896;
                frontier_phi_58_59_ladder_1 = _2902;
                frontier_phi_58_59_ladder_2 = _2900;
                frontier_phi_58_59_ladder_3 = _2898;
                frontier_phi_58_59_ladder_4 = _2894;
                frontier_phi_58_59_ladder_5 = _2892;
            }
            else
            {
                frontier_phi_58_59_ladder = _2774;
                frontier_phi_58_59_ladder_1 = _2780;
                frontier_phi_58_59_ladder_2 = _2778;
                frontier_phi_58_59_ladder_3 = _2776;
                frontier_phi_58_59_ladder_4 = _2772;
                frontier_phi_58_59_ladder_5 = _2770;
            }
            _2891 = frontier_phi_58_59_ladder_5;
            _2893 = frontier_phi_58_59_ladder_4;
            _2895 = frontier_phi_58_59_ladder;
            _2897 = frontier_phi_58_59_ladder_3;
            _2899 = frontier_phi_58_59_ladder_2;
            _2901 = frontier_phi_58_59_ladder_1;
        }
        float _2906 = isnan(1.0) ? _918 : (isnan(_918) ? 1.0 : min(_918, 1.0));
        _2682 = (_2906 * _2897) + _2118;
        _2684 = (_2906 * _2899) + _2120;
        _2686 = (_2906 * _2901) + _2122;
        _2688 = ((_2891 * _902) * _2906) + _2463;
        _2690 = ((_2893 * _904) * _2906) + _2465;
        _2692 = ((_2895 * _905) * _2906) + _2467;
    }
    else
    {
        _2682 = _2118;
        _2684 = _2120;
        _2686 = _2122;
        _2688 = _2463;
        _2690 = _2465;
        _2692 = _2467;
    }
    float _4664 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4675 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4686 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _2709 = ((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2682 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _918))) + ((_2688 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    float _2710 = ((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2684 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _918))) + ((_2690 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    float _2711 = ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2686 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _918))) + ((_2692 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    uint _2712 = _246 + 6u;
    float _2720 = _840 / cbSceneParam._m0[86u].x;
    float _2721 = _841 / cbSceneParam._m0[86u].y;
    vec4 _2735 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2720, _2721, (log2((isnan(cbSceneParam._m0[77u].w) ? _762 : (isnan(_762) ? cbSceneParam._m0[77u].w : min(_762, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2737 = _2735.x;
    float _2738 = _2735.y;
    float _2739 = _2735.z;
    float _2740 = _2735.w;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_762 > cbSceneParam._m0[78u].w)
    {
        float _2795 = isnan(_762) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _762 : min(cbSceneParam._m0[80u].w, _762));
        float _2796 = _2795 / _762;
        float _2807 = _2796 * _813;
        float _2808 = _814 * _2796;
        float _2809 = (-0.0) - _2808;
        float _2811 = _2796 * _815;
        float _2813 = (cbSceneParam._m0[77u].w * _2809) / _2795;
        float _2814 = _2813 + cbSceneParam._m0[79u].w;
        float _2815 = cbSceneParam._m0[79u].w - _2808;
        float _2821 = sqrt(((_2807 * _2807) + (_2808 * _2808)) + (_2811 * _2811));
        float _2824 = (1.0 - (cbSceneParam._m0[77u].w / _2795)) * _2821;
        float _2829 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2831 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3008;
        if (abs((_2809 - _2813) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3008 = ((((_2814 > 0.0) ? exp2(_2829 * _2814) : (2.0 - exp2(_2831 * _2814))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2824;
        }
        else
        {
            float _2952 = 1.0 / cbSceneParam._m0[80u].x;
            float _2953 = isnan(_2815) ? _2814 : (isnan(_2814) ? _2815 : max(_2814, _2815));
            float _2954 = isnan(_2815) ? _2814 : (isnan(_2814) ? _2815 : min(_2814, _2815));
            float _2963 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : min(_2953, 0.0));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            _3008 = ((abs(_2821 / _2809) * cbSceneParam._m0[80u].y) * ((((_2963 - _2964) * 2.0) - ((exp2(_2829 * (isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0)))) - exp2(_2829 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0))))) * _2952)) - ((exp2(_2831 * _2963) - exp2(_2831 * _2964)) * _2952))) + (_2824 * cbSceneParam._m0[80u].z);
        }
        vec4 _3010 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2720, _2721, 1.0), 0.0);
        float _3019 = exp2((_3008 * (-1.44269502162933349609375)) * (1.0 - _3010.w));
        float _3020 = log2(_3019);
        float _3036 = log2(_2740);
        _2833 = (exp2(_3036 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].x)) * _3010.x) / cbSceneParam._m0[78u].x)) + _2737;
        _2835 = (exp2(_3036 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].y)) * _3010.y) / cbSceneParam._m0[78u].y)) + _2738;
        _2837 = (exp2(_3036 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].z)) * _3010.z) / cbSceneParam._m0[78u].z)) + _2739;
        _2839 = _3019 * _2740;
    }
    else
    {
        _2833 = _2737;
        _2835 = _2738;
        _2837 = _2739;
        _2839 = _2740;
    }
    bool _3046;
    vec4 _2849;
    vec4 _2871;
    float _2873;
    float _2877;
    float _2878;
    float _2879;
    float _2880;
    bool _2890;
    for (;;)
    {
        _2849 = cbMatDynParam._m0[0u];
        float _2851 = roundEven(_2849.y);
        bool _2852 = _2851 == 3.0;
        float _2853 = log2(_2839);
        float _2860 = exp2(_2853 * cbSceneParam._m0[78u].x) * _2709;
        float _2861 = exp2(_2853 * cbSceneParam._m0[78u].y) * _2710;
        float _2862 = exp2(_2853 * cbSceneParam._m0[78u].z) * _2711;
        float _2869 = _829 + (-0.5);
        _2871 = cbMtdParam._m0[1u];
        _2873 = _2871.y * _2869;
        float _2876 = (_2851 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2877 = _2876 * (_2852 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2833)));
        _2878 = _2876 * (_2852 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2835)));
        _2879 = _2876 * (_2852 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2837)));
        _2880 = _2869 * 0.999000012874603271484375;
        _2890 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2890)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _2880) < 0.5)
            {
                _3046 = true;
                break;
            }
        }
        uint _2987 = _878 + uint(_2849.w);
        if ((cbInstanceData._m0[_2987].w < 1.0) && ((cbInstanceData._m0[_2987].w + _2880) < 0.5))
        {
            _3046 = true;
            break;
        }
        if ((_2873 + 1.0) < _2871.x)
        {
            _3046 = true;
            break;
        }
        _3046 = false;
        break;
    }
    float _3251;
    if (_3046)
    {
        discard_state = true;
        _3251 = 0.0;
    }
    else
    {
        _3251 = cbInstanceData._m0[_2712].w;
    }
    SV_Target.x = _2877;
    SV_Target.y = _2878;
    SV_Target.z = _2879;
    SV_Target.w = _3251;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2712].w;
    discard_exit();
}


