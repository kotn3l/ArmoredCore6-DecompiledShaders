#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1221;
float _3885;
float _3886;
float _3887;
float _3888;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _335 = _331.z;
    float _340 = (_331.x * 2.0) + (-1.0);
    float _342 = (_331.y * 2.0) + (-1.0);
    float _343 = dot(vec2(_340, _342), vec2(_340, _342));
    float _3897 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _349 = sqrt(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))));
    float _352 = fma(_349, _233, fma(_342, _240, _340 * _226));
    float _355 = fma(_349, _234, fma(_342, _241, _340 * _227));
    float _358 = fma(_349, _235, fma(_342, _242, _340 * _228));
    float _362 = inversesqrt(dot(vec3(_352, _355, _358), vec3(_352, _355, _358)));
    vec4 _398 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _400 = _398.x;
    float _401 = 1.0 - _400;
    float _408 = ((_400 - _401) * cbMtdParam._m0[24u].z) + _401;
    float _410 = (cbMtdParam._m0[19u].x + dot(vec4(_362 * _352, _362 * _355, _362 * _358, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_408 * cbMtdParam._m0[21u].z);
    float _3908 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _413 = (-0.0) - cbMtdParam._m0[24u].x;
    float _415 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _416 = isnan(1.0) ? _415 : (isnan(_415) ? 1.0 : min(_415, 1.0));
    float _423 = _411 - ((_411 * TEXCOORD_8.x) * _416);
    float _424 = _411 - ((_411 * TEXCOORD_8.y) * _416);
    float _425 = _411 - ((_411 * TEXCOORD_8.z) * _416);
    float _432 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _436 = ((isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : min(_432, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _444 = (_436 - (((_408 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _436))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3939 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _449 = ((_423 * ((_311.x * cbMtdParam._m0[18u].x) - _290)) * _445) + _290;
    float _450 = ((_424 * ((_311.y * cbMtdParam._m0[18u].y) - _291)) * _445) + _291;
    float _451 = ((_425 * ((_311.z * cbMtdParam._m0[18u].z) - _292)) * _445) + _292;
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _465 = _463.x;
    float _466 = 1.0 - _465;
    float _495 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_465 - _466) * cbMtdParam._m0[24u].w) + _466) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3950 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _504 = ((((cbMtdParam._m0[10u].x - _449) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _496) + _449;
    float _505 = ((((cbMtdParam._m0[10u].y - _450) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _496) + _450;
    float _506 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _451)) * _496) + _451;
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _521 = _519.x;
    float _524 = _521 - ((_521 * _423) * _445);
    float _526 = _524 - (_524 * _496);
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _547 = (_540.x * 2.0) + (-1.0);
    float _548 = (_540.y * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3961 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _558 = (((_540.z - _335) * _423) * _445) + _335;
    float _561 = ((cbMtdParam._m0[23u].y - _558) * _496) + _558;
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _586 = (_580.x * 2.0) + (-1.0);
    float _587 = (_580.y * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _3972 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _608 = (((cbMtdParam._m0[21u].x * _340) + ((_547 - _340) * _423)) * _445) + _340;
    float _609 = (((cbMtdParam._m0[21u].x * _342) + ((_548 - _342) * _424)) * _445) + _342;
    float _610 = (((sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) - _349) * _425) * _445) + _349;
    float _621 = (((_586 - _608) + (_608 * cbMtdParam._m0[22u].z)) * _496) + _608;
    float _622 = (((_587 - _609) + (_609 * cbMtdParam._m0[22u].z)) * _496) + _609;
    float _623 = ((sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) - _610) * _496) + _610;
    float _625 = cbMtdParam._m0[22u].x + _331.w;
    float _628 = fma(_623, _233, fma(_622, _240, _621 * _226));
    float _631 = fma(_623, _234, fma(_622, _241, _621 * _227));
    float _634 = fma(_623, _235, fma(_622, _242, _621 * _228));
    float _638 = inversesqrt(dot(vec3(_628, _631, _634), vec3(_628, _631, _634)));
    float _639 = _638 * _628;
    float _640 = _638 * _631;
    float _641 = _638 * _634;
    float _3983 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _642 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4005 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _4016 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _4027 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _4038 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _647 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _661 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _711 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _701);
    float _712 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _701);
    float _713 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _701);
    float _717 = inversesqrt(dot(vec3(_711, _712, _713), vec3(_711, _712, _713)));
    float _718 = _711 * _717;
    float _719 = _712 * _717;
    float _720 = _713 * _717;
    vec4 _725 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _727 = _725.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _902 = sqrt(((_711 * _711) + (_712 * _712)) + (_713 * _713));
        float _908 = (cbMatDynParam._m0[5u].x * _902) + cbMatDynParam._m0[5u].y;
        float _4049 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _913 = (cbMatDynParam._m0[5u].z * _902) + cbMatDynParam._m0[5u].w;
        float _4060 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) - _909)) + _909) < ((_727 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _739 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _740 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _760 = fma(_641, cbSceneParam._m0[5u].z, fma(_640, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _639));
    float _763 = fma(_641, cbSceneParam._m0[6u].z, fma(_640, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _639));
    float _766 = fma(_641, cbSceneParam._m0[7u].z, fma(_640, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _639));
    uint _779 = _245 + 9u;
    uint _780 = _779 + uint(cbMatDynParam._m0[0u].w);
    float _786 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_780].x;
    float _787 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_780].y;
    float _788 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_780].z;
    float _4071 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _792 = 1.0 - _647;
    float _793 = _789 * _792;
    float _794 = _790 * _792;
    float _795 = _791 * _792;
    float _800 = (_789 + (-0.039999999105930328369140625)) * _647;
    float _801 = (_790 + (-0.039999999105930328369140625)) * _647;
    float _802 = (_791 + (-0.039999999105930328369140625)) * _647;
    float _803 = _800 + 0.039999999105930328369140625;
    float _805 = _801 + 0.039999999105930328369140625;
    float _806 = _802 + 0.039999999105930328369140625;
    vec4 _815 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _739, cbSceneParam._m0[86u].y * _740));
    float _819 = ((isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * TEXCOORD_5.w) * _815.x;
    float _820 = dot(vec3(_639, _640, _641), vec3(_718, _719, _720));
    float _823 = _820 * 2.0;
    float _827 = (_823 * _639) - _718;
    float _828 = (_823 * _640) - _719;
    float _829 = (_823 * _641) - _720;
    float _833 = abs(dot(vec3(_718, _719, _720), vec3(_639, _640, _641)));
    float _4104 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _835 = sqrt(_642);
    float _848 = exp2((_835 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_835 * 3.0));
    float _854 = (1.0 - _848) * ((_835 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _855 = _848 * _835;
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1220;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _945 = fma(_891, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883));
        float _949 = fma(_891, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883));
        float _953 = fma(_891, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883));
        float _978 = _883 + _639;
        float _979 = _887 + _640;
        float _980 = _891 + _641;
        float _990 = fma(_980, cbModelParam._m0[26u].z, fma(_979, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978)) - _945;
        float _991 = fma(_980, cbModelParam._m0[27u].z, fma(_979, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978)) - _949;
        float _992 = fma(_980, cbModelParam._m0[28u].z, fma(_979, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978)) - _953;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_945 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_949 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[34u].z) + ((((((_953 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1048 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1014.x + (-0.5));
        float _1050 = _1048 * (_1014.y + (-0.5));
        float _1051 = _1048 * (_1014.z + (-0.5));
        float _1058 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1021.x + (-0.5));
        float _1060 = _1058 * (_1021.y + (-0.5));
        float _1061 = _1058 * (_1021.z + (-0.5));
        float _1068 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1028.x + (-0.5));
        float _1070 = _1068 * (_1028.y + (-0.5));
        float _1071 = _1068 * (_1028.z + (-0.5));
        float _1078 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1035.x + (-0.5));
        float _1080 = _1078 * (_1035.y + (-0.5));
        float _1081 = _1078 * (_1035.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1102 = (dot(vec3(_639, _640, _641), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1112 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _4152 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1114 + 1.0))) + _1119) * _1082;
        float _1129 = _1050 * 0.5;
        float _1130 = _1060 * 0.5;
        float _1131 = _1070 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_639, _640, _641), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _4185 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1156 + 1.0))) + _1161) * _1083;
        float _1171 = _1051 * 0.5;
        float _1172 = _1061 * 0.5;
        float _1173 = _1071 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_639, _640, _641), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _4218 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1198 + 1.0))) + _1203) * _1084;
        _1220 = _1051;
        _1222 = _1050;
        _1223 = _1049;
        _1224 = _1061;
        _1225 = _1060;
        _1226 = _1059;
        _1227 = _1071;
        _1228 = _1070;
        _1229 = _1069;
        _1230 = _1084;
        _1231 = _1083;
        _1232 = _1082;
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _1221;
        _1222 = _1221;
        _1223 = _1221;
        _1224 = _1221;
        _1225 = _1221;
        _1226 = _1221;
        _1227 = _1221;
        _1228 = _1221;
        _1229 = _1221;
        _1230 = _1221;
        _1231 = _1221;
        _1232 = _1221;
        _1233 = 0.0;
        _1234 = 0.0;
        _1235 = 0.0;
    }
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1263 = fma(_891, cbModelParam._m0[30u].z, fma(_887, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _883));
        float _1267 = fma(_891, cbModelParam._m0[31u].z, fma(_887, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _883));
        float _1271 = fma(_891, cbModelParam._m0[32u].z, fma(_887, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _883));
        float _1294 = _883 + _639;
        float _1295 = _887 + _640;
        float _1296 = _891 + _641;
        float _1306 = fma(_1296, cbModelParam._m0[30u].z, fma(_1295, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1294)) - _1263;
        float _1307 = fma(_1296, cbModelParam._m0[31u].z, fma(_1295, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1294)) - _1267;
        float _1308 = fma(_1296, cbModelParam._m0[32u].z, fma(_1295, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1294)) - _1271;
        float _1312 = inversesqrt(dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308)));
        float _1325 = ((_1312 * _1306) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1263 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1312 * _1307) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1267 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1312 * _1308) / cbModelParam._m0[35u].z) + ((((((_1271 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        float _1362 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1329.x + (-0.5));
        float _1364 = _1362 * (_1329.y + (-0.5));
        float _1365 = _1362 * (_1329.z + (-0.5));
        float _1372 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1336.x + (-0.5));
        float _1374 = _1372 * (_1336.y + (-0.5));
        float _1375 = _1372 * (_1336.z + (-0.5));
        float _1382 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1343.x + (-0.5));
        float _1384 = _1382 * (_1343.y + (-0.5));
        float _1385 = _1382 * (_1343.z + (-0.5));
        float _1392 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1350.x + (-0.5));
        float _1394 = _1392 * (_1350.y + (-0.5));
        float _1395 = _1392 * (_1350.z + (-0.5));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = _1363 * 0.5;
        float _1400 = _1373 * 0.5;
        float _1401 = _1383 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_639, _640, _641), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4281 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1426 + 1.0))) + _1431) * _1396;
        float _1441 = _1364 * 0.5;
        float _1442 = _1374 * 0.5;
        float _1443 = _1384 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_639, _640, _641), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4314 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1468 + 1.0))) + _1473) * _1397;
        float _1483 = _1365 * 0.5;
        float _1484 = _1375 * 0.5;
        float _1485 = _1385 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_639, _640, _641), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4347 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1510 + 1.0))) + _1515) * _1398;
        _1532 = _1365;
        _1533 = _1364;
        _1534 = _1363;
        _1535 = _1375;
        _1536 = _1374;
        _1537 = _1373;
        _1538 = _1385;
        _1539 = _1384;
        _1540 = _1383;
        _1541 = _1398;
        _1542 = _1397;
        _1543 = _1396;
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
    }
    else
    {
        _1532 = _1221;
        _1533 = _1221;
        _1534 = _1221;
        _1535 = _1221;
        _1536 = _1221;
        _1537 = _1221;
        _1538 = _1221;
        _1539 = _1221;
        _1540 = _1221;
        _1541 = _1221;
        _1542 = _1221;
        _1543 = _1221;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1233)) + _1233;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1234)) + _1234;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1235)) + _1235;
    float _1579 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1582 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1585 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1556));
    float _1600 = _827 * 0.5;
    float _1601 = _828 * 0.5;
    float _1602 = _829 * 0.5;
    float _1603 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1606 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1609 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1643;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1616 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1220, _1224, _1227, _1230));
        float _1620 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1222, _1225, _1228, _1231));
        float _1624 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1223, _1226, _1229, _1232));
        float _1631 = dot(vec4(cbModelParam._m0[39u]), vec4(_1600, _1601, _1602, 1.0));
        _1643 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1643 = 1.0;
    }
    float _1654;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1645 = dot(vec4(cbModelParam._m0[40u]), vec4(_1600, _1601, _1602, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1658 = (_1654 * cbModelParam._m0[1u].x) + (_1643 * (1.0 - cbModelParam._m0[1u].x));
    float _1668 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _642);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1668 : min(cbModelParam._m0[25u].z, _1668));
    float _1749;
    float _1751;
    float _1753;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1716 = fma(_891, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883)) + cbModelParam._m0[13u].w;
        float _1720 = fma(_891, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883)) + cbModelParam._m0[14u].w;
        float _1724 = fma(_891, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883)) + cbModelParam._m0[15u].w;
        float _1727 = fma(_829, cbModelParam._m0[13u].z, fma(_828, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827));
        float _1730 = fma(_829, cbModelParam._m0[14u].z, fma(_828, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827));
        float _1733 = fma(_829, cbModelParam._m0[15u].z, fma(_828, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827));
        float _1761;
        if (_1727 > 0.0)
        {
            _1761 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1761 = frontier_phi_17_15_ladder;
        }
        float _1932;
        if (_1730 > 0.0)
        {
            _1932 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1932 = frontier_phi_26_22_ladder;
        }
        float _2228;
        if (_1733 > 0.0)
        {
            _2228 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2228 = frontier_phi_38_33_ladder;
        }
        float _2230 = isnan(_1932) ? _1761 : (isnan(_1761) ? _1932 : min(_1761, _1932));
        float _2231 = isnan(_2228) ? _2230 : (isnan(_2230) ? _2228 : min(_2230, _2228));
        float _2235 = (_2231 * _1727) + _1716;
        float _2236 = (_2231 * _1730) + _1720;
        float _2237 = (_2231 * _1733) + _1724;
        float _2238 = _2231 * 9.9999997473787516355514526367188e-05;
        float _2240 = (-1.0) - _2238;
        float _2242 = _2238 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2237 > _2242) || ((_2237 < _2240) || ((_2236 > _2242) || ((_2236 < _2240) || ((_2235 < _2240) || (_2235 > _2242))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2382 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2237, cbModelParam._m0[9u].z, fma(_2236, cbModelParam._m0[9u].y, _2235 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2237, cbModelParam._m0[10u].z, fma(_2236, cbModelParam._m0[10u].y, _2235 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2237, cbModelParam._m0[11u].z, fma(_2236, cbModelParam._m0[11u].y, _2235 * cbModelParam._m0[11u].x))), _1669);
            frontier_phi_16_38_ladder = _2382.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2382.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2382.x * cbModelParam._m0[1u].y;
        }
        _1749 = frontier_phi_16_38_ladder_2;
        _1751 = frontier_phi_16_38_ladder_1;
        _1753 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1737 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_827, _828, _829), _1669);
        _1749 = _1737.x * cbModelParam._m0[1u].y;
        _1751 = _1737.y * cbModelParam._m0[1u].y;
        _1753 = _1737.z * cbModelParam._m0[1u].y;
    }
    float _1757 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _642);
    float _1758 = isnan(_1757) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1757 : min(cbModelParam._m0[25u].w, _1757));
    float _1847;
    float _1849;
    float _1851;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1811 = fma(_891, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883)) + cbModelParam._m0[21u].w;
        float _1815 = fma(_891, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883)) + cbModelParam._m0[22u].w;
        float _1819 = fma(_891, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883)) + cbModelParam._m0[23u].w;
        float _1822 = fma(_829, cbModelParam._m0[21u].z, fma(_828, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827));
        float _1825 = fma(_829, cbModelParam._m0[22u].z, fma(_828, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827));
        float _1828 = fma(_829, cbModelParam._m0[23u].z, fma(_828, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827));
        float _1937;
        if (_1822 > 0.0)
        {
            _1937 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1937 = frontier_phi_28_24_ladder;
        }
        float _2255;
        if (_1825 > 0.0)
        {
            _2255 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2255 = frontier_phi_40_35_ladder;
        }
        float _2593;
        if (_1828 > 0.0)
        {
            _2593 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2593 = frontier_phi_50_47_ladder;
        }
        float _2595 = isnan(_2255) ? _1937 : (isnan(_1937) ? _2255 : min(_1937, _2255));
        float _2596 = isnan(_2593) ? _2595 : (isnan(_2595) ? _2593 : min(_2595, _2593));
        float _2600 = (_2596 * _1822) + _1811;
        float _2601 = (_2596 * _1825) + _1815;
        float _2602 = (_2596 * _1828) + _1819;
        float _2603 = _2596 * 9.9999997473787516355514526367188e-05;
        float _2604 = (-1.0) - _2603;
        float _2606 = _2603 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2602 > _2606) || ((_2602 < _2604) || ((_2601 > _2606) || ((_2601 < _2604) || ((_2600 < _2604) || (_2600 > _2606))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2602, cbModelParam._m0[17u].z, fma(_2601, cbModelParam._m0[17u].y, _2600 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2602, cbModelParam._m0[18u].z, fma(_2601, cbModelParam._m0[18u].y, _2600 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2602, cbModelParam._m0[19u].z, fma(_2601, cbModelParam._m0[19u].y, _2600 * cbModelParam._m0[19u].x))), _1758);
            frontier_phi_25_50_ladder = _2724.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2724.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2724.x * cbModelParam._m0[1u].z;
        }
        _1847 = frontier_phi_25_50_ladder_2;
        _1849 = frontier_phi_25_50_ladder_1;
        _1851 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_827, _828, _829), _1758);
        _1847 = _1831.x * cbModelParam._m0[1u].z;
        _1849 = _1831.y * cbModelParam._m0[1u].z;
        _1851 = _1831.z * cbModelParam._m0[1u].z;
    }
    float _1864 = (((_854 * _803) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1847 - _1749)) + _1749);
    float _1866 = (((_854 * _805) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1849 - _1751)) + _1751);
    float _1868 = (((_854 * _806) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1851 - _1753)) + _1753);
    float _1871 = fma(_1868, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1864 * cbSceneParam._m0[89u].x));
    float _1874 = fma(_1868, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1864 * cbSceneParam._m0[90u].x));
    float _1877 = fma(_1868, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, _1864 * cbSceneParam._m0[91u].x));
    float _1911 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1915 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1919 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1924 = _1911 / _1923;
    float _1925 = _1915 / _1923;
    float _1926 = _1919 / _1923;
    float _2073;
    float _2074;
    float _2075;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1953 = ((uint(_1926 > cbSceneParam._m0[59u].y) + uint(_1926 > cbSceneParam._m0[59u].x)) + uint(_1926 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1954 = _1953 + 43u;
        uint _1962 = _1953 + 44u;
        uint _1970 = _1953 + 45u;
        uint _1978 = _1953 + 46u;
        float _1989 = fma(_1923, cbSceneParam._m0[_1954].w, fma(_1919, cbSceneParam._m0[_1954].z, fma(_1915, cbSceneParam._m0[_1954].y, _1911 * cbSceneParam._m0[_1954].x)));
        float _1993 = fma(_1923, cbSceneParam._m0[_1962].w, fma(_1919, cbSceneParam._m0[_1962].z, fma(_1915, cbSceneParam._m0[_1962].y, _1911 * cbSceneParam._m0[_1962].x)));
        float _2001 = fma(_1923, cbSceneParam._m0[_1978].w, fma(_1919, cbSceneParam._m0[_1978].z, fma(_1915, cbSceneParam._m0[_1978].y, _1911 * cbSceneParam._m0[_1978].x)));
        float _2006 = cbSceneParam._m0[33u].z * _2001;
        float _2008 = cbSceneParam._m0[33u].w * _2001;
        float _2011 = fma(_1923, cbSceneParam._m0[_1970].w, fma(_1919, cbSceneParam._m0[_1970].z, fma(_1915, cbSceneParam._m0[_1970].y, _1911 * cbSceneParam._m0[_1970].x))) / _2001;
        float _2059 = (cbSceneParam._m0[33u].x - sqrt(((_1925 * _1925) + (_1924 * _1924)) + (_1926 * _1926))) * cbSceneParam._m0[33u].y;
        float _4473 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2066 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 + _1989) / _2001, (_2008 + _1993) / _2001), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2008 + _1989) / _2001, (_1993 - _2006) / _2001), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1989 - _2006) / _2001, (_1993 - _2008) / _2001), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1989 - _2008) / _2001, (_2006 + _1993) / _2001), _2011), 0.0)).x), vec4(0.25)));
        _2073 = 1.0 - (_2066 * cbSceneParam._m0[34u].x);
        _2074 = 1.0 - (_2066 * cbSceneParam._m0[34u].y);
        _2075 = 1.0 - (_2066 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2073 = 1.0;
        _2074 = 1.0;
        _2075 = 1.0;
    }
    float _2139;
    float _2141;
    float _2143;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2127 = fma(_1923, cbSceneParam._m0[63u].w, fma(_1919, cbSceneParam._m0[63u].z, fma(_1915, cbSceneParam._m0[63u].y, _1911 * cbSceneParam._m0[63u].x)));
        float _2128 = fma(_1923, cbSceneParam._m0[60u].w, fma(_1919, cbSceneParam._m0[60u].z, fma(_1915, cbSceneParam._m0[60u].y, _1911 * cbSceneParam._m0[60u].x))) / _2127;
        float _2129 = fma(_1923, cbSceneParam._m0[61u].w, fma(_1919, cbSceneParam._m0[61u].z, fma(_1915, cbSceneParam._m0[61u].y, _1911 * cbSceneParam._m0[61u].x))) / _2127;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2128 >= cbSceneParam._m0[64u].x) && (_2129 >= cbSceneParam._m0[64u].y)) && (_2128 <= cbSceneParam._m0[64u].z)) && (_2129 <= cbSceneParam._m0[64u].w))
        {
            float _2268 = fma(_1923, cbSceneParam._m0[62u].w, fma(_1919, cbSceneParam._m0[62u].z, fma(_1915, cbSceneParam._m0[62u].y, _1911 * cbSceneParam._m0[62u].x))) / _2127;
            float _2272 = isnan(cbSceneParam._m0[41u].w) ? _2268 : (isnan(_2268) ? cbSceneParam._m0[41u].w : max(_2268, cbSceneParam._m0[41u].w));
            float _2315 = (cbSceneParam._m0[33u].x - sqrt(((_1925 * _1925) + (_1924 * _1924)) + (_1926 * _1926))) * cbSceneParam._m0[33u].y;
            float _4489 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
            float _2322 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2128, cbSceneParam._m0[33u].w + _2129), _2272), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2128, _2129 - cbSceneParam._m0[33u].z), _2272), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2128 - cbSceneParam._m0[33u].z, _2129 - cbSceneParam._m0[33u].w), _2272), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2128 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2129), _2272), 0.0)).x), vec4(0.25)));
            float _2326 = 1.0 - (_2322 * cbSceneParam._m0[34u].x);
            float _2327 = 1.0 - (_2322 * cbSceneParam._m0[34u].y);
            float _2328 = 1.0 - (_2322 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2328) ? _2075 : (isnan(_2075) ? _2328 : min(_2075, _2328));
            frontier_phi_37_36_ladder_1 = isnan(_2327) ? _2074 : (isnan(_2074) ? _2327 : min(_2074, _2327));
            frontier_phi_37_36_ladder_2 = isnan(_2326) ? _2073 : (isnan(_2073) ? _2326 : min(_2073, _2326));
        }
        else
        {
            frontier_phi_37_36_ladder = _2075;
            frontier_phi_37_36_ladder_1 = _2074;
            frontier_phi_37_36_ladder_2 = _2073;
        }
        _2139 = frontier_phi_37_36_ladder_2;
        _2141 = frontier_phi_37_36_ladder_1;
        _2143 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2139 = _2073;
        _2141 = _2074;
        _2143 = _2075;
    }
    uvec4 _2148 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _2150 = _2148.x * 14u;
    uint _2151 = _2150 + 13u;
    float _2158 = _819 + (-1.0);
    float _2163 = (cbLight._m0[_2151].x * _2158) + 1.0;
    float _2164 = (cbLight._m0[_2151].y * _2158) + 1.0;
    float _2165 = (cbLight._m0[_2151].z * _2158) + 1.0;
    float _2166 = (cbLight._m0[_2151].w * _2158) + 1.0;
    uint _2167 = _2150 + 5u;
    float _2173 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
    uint _2177 = _2150 + 4u;
    float _2187 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
    uint _2191 = _2150 | 1u;
    float _2202 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_639, _640, _641));
    float _2205 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_639, _640, _641));
    float _4525 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _4536 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2210 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * 0.3183098733425140380859375;
    float _2212 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * 0.3183098733425140380859375;
    float _2219 = ((cbLight._m0[_2167].x * _2173) * _2212) + (((cbLight._m0[_2177].x * _2139) * _2187) * _2210);
    float _2220 = ((_2173 * cbLight._m0[_2167].y) * _2212) + (((cbLight._m0[_2177].y * _2141) * _2187) * _2210);
    float _2221 = ((_2173 * cbLight._m0[_2167].z) * _2212) + (((cbLight._m0[_2177].z * _2143) * _2187) * _2210);
    uvec4 _2225 = floatBitsToUint(cbLight._m0[_2150 + 12u]);
    bool _2227 = _2225.x == 0u;
    float _2329;
    float _2331;
    float _2333;
    if (_2227)
    {
        _2329 = _2219;
        _2331 = _2220;
        _2333 = _2221;
    }
    else
    {
        uint _2337 = _2150 + 6u;
        float _2353 = (dot(vec3(cbLight._m0[_2150 + 2u].xyz), vec3(_639, _640, _641)) * 0.5) + 0.5;
        float _2354 = _2353 * _2353;
        float _4547 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2355 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2356 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2329 = (((cbLight._m0[_2337].x * 0.3183098733425140380859375) * _2355) * _2356) + _2219;
        _2331 = (((cbLight._m0[_2337].y * 0.3183098733425140380859375) * _2355) * _2356) + _2220;
        _2333 = (((cbLight._m0[_2337].z * 0.3183098733425140380859375) * _2355) * _2356) + _2221;
    }
    bool _2336 = _2225.y == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2336)
    {
        _2391 = _2329;
        _2393 = _2331;
        _2395 = _2333;
    }
    else
    {
        uint _2564 = _2150 + 7u;
        float _2580 = (dot(vec3(cbLight._m0[_2150 + 3u].xyz), vec3(_639, _640, _641)) * 0.5) + 0.5;
        float _2581 = _2580 * _2580;
        float _4563 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2582 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2583 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2391 = (((cbLight._m0[_2564].x * 0.3183098733425140380859375) * _2582) * _2583) + _2329;
        _2393 = (((cbLight._m0[_2564].y * 0.3183098733425140380859375) * _2582) * _2583) + _2331;
        _2395 = (((cbLight._m0[_2564].z * 0.3183098733425140380859375) * _2582) * _2583) + _2333;
    }
    uint _2398 = _2150 + 8u;
    float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _642) * 0.949999988079071044921875);
    float _2412 = _2411 * _2411;
    float _2413 = cbLight._m0[_2150].x + _718;
    float _2414 = cbLight._m0[_2150].y + _719;
    float _2415 = cbLight._m0[_2150].z + _720;
    float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
    float _2420 = _2419 * _2413;
    float _2421 = _2419 * _2414;
    float _2422 = _2419 * _2415;
    float _2423 = dot(vec3(_639, _640, _641), vec3(cbLight._m0[_2150].xyz));
    float _4579 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _4590 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _2427 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2428 = dot(vec3(_639, _640, _641), vec3(_2420, _2421, _2422));
    float _4601 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2431 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2432 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2420, _2421, _2422));
    float _4612 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2436 = _2412 * _2412;
    float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
    float _2448 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
    float _2449 = 0.959999978542327880859375 - _800;
    float _2451 = 0.959999978542327880859375 - _801;
    float _2452 = 0.959999978542327880859375 - _802;
    float _2459 = 1.0 - _2412;
    float _2470 = (0.5 / (((_2427 * ((_2426 * _2459) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2459) + _2412) * _2426))) * _2426;
    float _4623 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
    uint _2486 = _2150 + 9u;
    float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _642) * 0.949999988079071044921875);
    float _2498 = _2497 * _2497;
    float _2499 = cbLight._m0[_2191].x + _718;
    float _2500 = cbLight._m0[_2191].y + _719;
    float _2501 = cbLight._m0[_2191].z + _720;
    float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
    float _2506 = _2505 * _2499;
    float _2507 = _2505 * _2500;
    float _2508 = _2505 * _2501;
    float _2509 = dot(vec3(_639, _640, _641), vec3(cbLight._m0[_2191].xyz));
    float _4634 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2513 = dot(vec3(_639, _640, _641), vec3(_2506, _2507, _2508));
    float _4645 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _2517 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2506, _2507, _2508));
    float _4656 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2521 = _2498 * _2498;
    float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
    float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
    float _2539 = 1.0 - _2498;
    float _2549 = (0.5 / (((_2427 * ((_2512 * _2539) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2539) + _2498) * _2512))) * _2512;
    float _4667 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2551 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
    float _2561 = (((((_2532 * _2449) + _803) * cbLight._m0[_2486].x) * _2551) * _2173) + ((((cbLight._m0[_2398].x * _2139) * ((_2448 * _2449) + _803)) * _2472) * _2187);
    float _2562 = (((((_2532 * _2451) + _805) * cbLight._m0[_2486].y) * _2551) * _2173) + ((((cbLight._m0[_2398].y * _2141) * ((_2448 * _2451) + _805)) * _2472) * _2187);
    float _2563 = (((((_2532 * _2452) + _806) * cbLight._m0[_2486].z) * _2551) * _2173) + ((((cbLight._m0[_2398].z * _2143) * ((_2448 * _2452) + _806)) * _2472) * _2187);
    float _2619;
    float _2621;
    float _2623;
    if (_2227)
    {
        _2619 = _2561;
        _2621 = _2562;
        _2623 = _2563;
    }
    else
    {
        uint _2625 = _2150 + 2u;
        uint _2629 = _2150 + 10u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _642) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _718;
        float _2646 = cbLight._m0[_2625].y + _719;
        float _2647 = cbLight._m0[_2625].z + _720;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_639, _640, _641), vec3(cbLight._m0[_2625].xyz));
        float _4678 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2659 = dot(vec3(_639, _640, _641), vec3(_2652, _2653, _2654));
        float _4689 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4700 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2678 = exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0);
        float _2685 = 1.0 - _2644;
        float _2695 = (0.5 / (((_2427 * ((_2658 * _2685) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2685) + _2644) * _2658))) * _2658;
        float _4711 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2697 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2698 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2619 = (((((_2678 * _2449) + _803) * cbLight._m0[_2629].x) * _2697) * _2698) + _2561;
        _2621 = (((((_2678 * _2451) + _805) * cbLight._m0[_2629].y) * _2697) * _2698) + _2562;
        _2623 = (((((_2678 * _2452) + _806) * cbLight._m0[_2629].z) * _2697) * _2698) + _2563;
    }
    float _2729;
    float _2731;
    float _2733;
    if (_2336)
    {
        _2729 = _2619;
        _2731 = _2621;
        _2733 = _2623;
    }
    else
    {
        uint _2740 = _2150 + 3u;
        uint _2744 = _2150 + 11u;
        float _2758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2740].w)) * _642) * 0.949999988079071044921875);
        float _2759 = _2758 * _2758;
        float _2760 = cbLight._m0[_2740].x + _718;
        float _2761 = cbLight._m0[_2740].y + _719;
        float _2762 = cbLight._m0[_2740].z + _720;
        float _2766 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
        float _2767 = _2766 * _2760;
        float _2768 = _2766 * _2761;
        float _2769 = _2766 * _2762;
        float _2770 = dot(vec3(_639, _640, _641), vec3(cbLight._m0[_2740].xyz));
        float _4727 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2773 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _2774 = dot(vec3(_639, _640, _641), vec3(_2767, _2768, _2769));
        float _4738 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2778 = dot(vec3(cbLight._m0[_2740].xyz), vec3(_2767, _2768, _2769));
        float _4749 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2782 = _2759 * _2759;
        float _2786 = ((_2777 * _2777) * (_2782 + (-1.0))) + 1.0;
        float _2793 = exp2(log2(1.0 - (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) * 5.0);
        float _2800 = 1.0 - _2759;
        float _2810 = (0.5 / (((_2427 * ((_2773 * _2800) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2800) + _2759) * _2773))) * _2773;
        float _4760 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2812 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2782 / ((_2786 * _2786) * 3.141590118408203125));
        float _2813 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2729 = (((((_2793 * _2449) + _803) * cbLight._m0[_2744].x) * _2812) * _2813) + _2619;
        _2731 = (((((_2793 * _2451) + _805) * cbLight._m0[_2744].y) * _2812) * _2813) + _2621;
        _2733 = (((((_2793 * _2452) + _806) * cbLight._m0[_2744].z) * _2812) * _2813) + _2623;
    }
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    if (_2148.y == 0u)
    {
        uvec4 _2834 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2835 = _2834.x;
        uint _2846 = uint((float(_2834.y) * floor(float(uint(cbSceneParam._m0[85u].y * _740) / _2835))) + floor(float(uint(cbSceneParam._m0[85u].x * _739) / _2835)));
        float _2856 = (log2(_1926 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2857 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        uint _2860 = uint(isnan(14.0) ? _2857 : (isnan(_2857) ? 14.0 : min(_2857, 14.0)));
        uvec4 _2865 = texelFetch(g_lightClusterGridBuffer, int(((_2860 << 2u) + (_2846 << 6u)) >> 2u));
        uint _2866 = _2865.x;
        uint _2867 = _2834.z;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        if (((((1u << ((_2867 >> 4u) & 15u)) + 4294967295u) & _2866) == 0u) || ((_2867 & 240u) == 0u))
        {
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
        }
        else
        {
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            uint _3104 = 0u;
            uint _3113;
            bool _3114;
            for (;;)
            {
                _3113 = texelFetch(g_lightClassification, int((((_2860 << 5u) + (_2846 << 9u)) + (_3104 << 2u)) >> 2u)).x;
                _3114 = _3113 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3114)
                {
                    frontier_phi_71_pred = _3103;
                    frontier_phi_71_pred_1 = _3102;
                    frontier_phi_71_pred_2 = _3101;
                    frontier_phi_71_pred_3 = _3100;
                    frontier_phi_71_pred_4 = _3099;
                    frontier_phi_71_pred_5 = _3098;
                }
                else
                {
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    uint _3249;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3113;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    for (;;)
                    {
                        uint _3253 = uint(findLSB(_3249)) + (_3104 << 5u);
                        uint _3250 = (_3249 + 4294967295u) & _3249;
                        uint _3255 = _3253 * 48u;
                        vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 3u)).x));
                        uint _3275 = (_3253 * 48u) + 4u;
                        vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 3u)).x));
                        uint _3294 = (_3253 * 48u) + 8u;
                        vec3 _3305 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x));
                        float _3309 = _3269.x - _1924;
                        float _3310 = _3269.y - _1925;
                        float _3311 = _3269.z - _1926;
                        float _3312 = dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311));
                        float _3315 = inversesqrt(_3312);
                        float _3316 = _3315 * _3309;
                        float _3317 = _3315 * _3310;
                        float _3318 = _3315 * _3311;
                        float _3319 = dot(vec3(_760, _763, _766), vec3(_3316, _3317, _3318));
                        float _3324 = 1.0 - (_3312 * _3269.w);
                        float _4786 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3325 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3326 = sqrt(_3312) * _3288.w;
                        float _3329 = 1.39999997615814208984375 / (_3326 + 1.39999997615814208984375);
                        float _3330 = _3329 * _3329;
                        float _3333 = ((1.0 - _3330) * _3319) + _3330;
                        float _3336 = _3326 * _3326;
                        float _3340 = ((isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0))) * _3325) / ((_3336 * 0.699999988079071044921875) + 1.0);
                        float _3344 = (-0.0) - _1924;
                        float _3345 = (-0.0) - _1925;
                        float _3346 = (-0.0) - _1926;
                        float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                        float _3351 = _3350 * _3344;
                        float _3352 = _3350 * _3345;
                        float _3353 = _3350 * _3346;
                        float _3360 = exp2(log2(1.0 / ((_3336 * 3.5) + 5.0)) * 0.25);
                        float _3361 = 1.0 - _835;
                        float _3368 = sqrt(1.0 - ((1.0 - (_3361 * _3361)) * (1.0 - (_3360 * _3360))));
                        float _3369 = _3368 * _3368;
                        float _3370 = _3369 * _3369;
                        float _3371 = _3351 + _3316;
                        float _3372 = _3352 + _3317;
                        float _3373 = _3353 + _3318;
                        float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                        float _3381 = dot(vec3(_760, _763, _766), vec3(_3351, _3352, _3353));
                        float _4802 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3384 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3385 = dot(vec3(_760, _763, _766), vec3(_3377 * _3371, _3377 * _3372, _3377 * _3373));
                        float _4813 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3388 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3392 = ((_3388 * _3388) * (_3370 + (-1.0))) + 1.0;
                        float _3393 = _3329 * _3369;
                        float _3394 = _3393 * _3393;
                        float _3397 = ((1.0 - _3394) * _3319) + _3394;
                        float _4824 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3398 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3399 = 1.0 - _3369;
                        float _3409 = (0.5 / (((_3398 * ((_3384 * _3399) + _3369)) + 9.9999999392252902907785028219223e-09) + (((_3398 * _3399) + _3369) * _3384))) * _3398;
                        float _4835 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3420 = (((_3370 * 3.1415927410125732421875) * (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) / ((_3392 * _3392) * ((_3336 * 2.1991131305694580078125) + 3.141590118408203125))) * _3325;
                        _3173 = (_3340 * _3288.x) + _3246;
                        _3174 = (_3340 * _3288.y) + _3247;
                        _3175 = (_3340 * _3288.z) + _3248;
                        _3170 = (_3420 * _3305.x) + _3243;
                        _3171 = (_3420 * _3305.y) + _3244;
                        _3172 = (_3420 * _3305.z) + _3245;
                        if (_3250 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3250;
                        }
                    }
                    frontier_phi_71_pred = _3175;
                    frontier_phi_71_pred_1 = _3174;
                    frontier_phi_71_pred_2 = _3173;
                    frontier_phi_71_pred_3 = _3172;
                    frontier_phi_71_pred_4 = _3171;
                    frontier_phi_71_pred_5 = _3170;
                }
                _2957 = frontier_phi_71_pred;
                _2955 = frontier_phi_71_pred_1;
                _2953 = frontier_phi_71_pred_2;
                _2951 = frontier_phi_71_pred_3;
                _2949 = frontier_phi_71_pred_4;
                _2947 = frontier_phi_71_pred_5;
                uint _3105 = _3104 + 1u;
                if (_3105 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3098 = _2947;
                    _3099 = _2949;
                    _3100 = _2951;
                    _3101 = _2953;
                    _3102 = _2955;
                    _3103 = _2957;
                    _3104 = _3105;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
        }
        uvec4 _2960 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2961 = _2960.z;
        uint _2963 = (_2961 >> 8u) & 15u;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        if (((4294967295u << _2963) & _2866) == 0u)
        {
            _3066 = _2946;
            _3068 = _2948;
            _3070 = _2950;
            _3072 = _2952;
            _3074 = _2954;
            _3076 = _2956;
        }
        else
        {
            float _3091 = inversesqrt(dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926)));
            float _3092 = _3091 * _1924;
            float _3093 = _3091 * _1925;
            float _3094 = _3091 * _1926;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2963 < ((_2961 >> 12u) & 15u))
            {
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3226 = _2946;
                float _3227 = _2948;
                float _3228 = _2950;
                float _3229 = _2952;
                float _3230 = _2954;
                float _3231 = _2956;
                uint _3232 = _2963;
                uint _3241;
                bool _3242;
                for (;;)
                {
                    _3241 = texelFetch(g_lightClassification, int((((_2860 << 5u) + (_2846 << 9u)) + (_3232 << 2u)) >> 2u)).x;
                    _3242 = _3241 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3242)
                    {
                        frontier_phi_82_pred = _3231;
                        frontier_phi_82_pred_1 = _3230;
                        frontier_phi_82_pred_2 = _3229;
                        frontier_phi_82_pred_3 = _3228;
                        frontier_phi_82_pred_4 = _3227;
                        frontier_phi_82_pred_5 = _3226;
                    }
                    else
                    {
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3447 = _3226;
                        float _3448 = _3227;
                        float _3449 = _3228;
                        float _3450 = _3229;
                        float _3451 = _3230;
                        float _3452 = _3231;
                        uint _3453 = _3241;
                        uint _3454;
                        vec4 _3479;
                        float _3480;
                        vec4 _3495;
                        vec3 _3507;
                        vec4 _3523;
                        vec4 _3539;
                        float _3585;
                        bool _3586;
                        for (;;)
                        {
                            uint _3464 = ((_3232 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3453));
                            _3454 = (_3453 + 4294967295u) & _3453;
                            uint _3466 = _3464 * 40u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            _3480 = _3479.w;
                            uint _3482 = (_3464 * 40u) + 4u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3464 * 40u) + 8u;
                            _3507 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x));
                            uint _3510 = (_3464 * 40u) + 16u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3526 = (_3464 * 40u) + 20u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3464 * 40u) + 24u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3560 = (_3464 * 40u) + 28u;
                            vec4 _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            _3585 = fma(_1926, _3573.z, fma(_1925, _3573.y, _3573.x * _1924)) + _3573.w;
                            _3586 = !((fma(_1926, _3554.z, fma(_1925, _3554.y, _3554.x * _1924)) + _3554.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3586)
                            {
                                float _3613 = _3479.x - _1924;
                                float _3614 = _3479.y - _1925;
                                float _3615 = _3479.z - _1926;
                                float _3616 = dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615));
                                float _3619 = inversesqrt(_3616);
                                float _3620 = _3619 * _3613;
                                float _3621 = _3619 * _3614;
                                float _3622 = _3619 * _3615;
                                float _3626 = 1.0 - (_3616 / (_3480 * _3480));
                                float _4846 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3631 = sqrt(_3616) * _3495.w;
                                float _3633 = 1.39999997615814208984375 / (_3631 + 1.39999997615814208984375);
                                float _3634 = _3633 * _3633;
                                float _3637 = ((1.0 - _3634) * dot(vec3(_3620, _3621, _3622), vec3(_760, _763, _766))) + _3634;
                                float _3640 = _3631 * _3631;
                                float _3644 = (fma(_1926, _3523.z, fma(_1925, _3523.y, _3523.x * _1924)) + _3523.w) / _3585;
                                float _3645 = (fma(_1926, _3539.z, fma(_1925, _3539.y, _3539.x * _1924)) + _3539.w) / _3585;
                                float _3649 = 1.0 - dot(vec2(_3644, _3645), vec2(_3644, _3645));
                                float _4862 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3651 = _3650 * (((isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0))) * _3627) / ((_3640 * 0.699999988079071044921875) + 1.0));
                                float _3663 = exp2(log2(1.0 / ((_3640 * 3.5) + 5.0)) * 0.25);
                                float _3664 = 1.0 - _835;
                                float _3671 = sqrt(1.0 - ((1.0 - (_3664 * _3664)) * (1.0 - (_3663 * _3663))));
                                float _3672 = _3671 * _3671;
                                float _3673 = _3672 * _3672;
                                float _3674 = _3620 - _3092;
                                float _3675 = _3621 - _3093;
                                float _3676 = _3622 - _3094;
                                float _3680 = inversesqrt(dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676)));
                                float _3684 = dot(vec3(_760, _763, _766), vec3((-0.0) - _3092, (-0.0) - _3093, (-0.0) - _3094));
                                float _4873 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3688 = dot(vec3(_760, _763, _766), vec3(_3680 * _3674, _3680 * _3675, _3680 * _3676));
                                float _4884 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3691 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3695 = ((_3691 * _3691) * (_3673 + (-1.0))) + 1.0;
                                float _3696 = _3633 * _3672;
                                float _3697 = _3696 * _3696;
                                float _3703 = ((1.0 - _3697) * dot(vec3(_760, _763, _766), vec3(_3620, _3621, _3622))) + _3697;
                                float _4895 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3705 = 1.0 - _3672;
                                float _3715 = (0.5 / (((_3704 * ((_3687 * _3705) + _3672)) + 9.9999999392252902907785028219223e-09) + (((_3704 * _3705) + _3672) * _3687))) * _3704;
                                float _4906 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3725 = (_3650 * _3627) * (((_3673 * 3.1415927410125732421875) * (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) / ((_3695 * _3695) * ((_3640 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3651 * _3495.z;
                                frontier_phi_88_pred_1 = _3651 * _3495.y;
                                frontier_phi_88_pred_2 = _3651 * _3495.x;
                                frontier_phi_88_pred_3 = _3725 * _3507.z;
                                frontier_phi_88_pred_4 = _3725 * _3507.y;
                                frontier_phi_88_pred_5 = _3725 * _3507.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3734 = frontier_phi_88_pred;
                            _3733 = frontier_phi_88_pred_1;
                            _3732 = frontier_phi_88_pred_2;
                            _3731 = frontier_phi_88_pred_3;
                            _3730 = frontier_phi_88_pred_4;
                            _3729 = frontier_phi_88_pred_5;
                            _3437 = _3732 + _3450;
                            _3438 = _3733 + _3451;
                            _3439 = _3734 + _3452;
                            _3434 = _3729 + _3447;
                            _3435 = _3730 + _3448;
                            _3436 = _3731 + _3449;
                            if (_3454 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3454;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3439;
                        frontier_phi_82_pred_1 = _3438;
                        frontier_phi_82_pred_2 = _3437;
                        frontier_phi_82_pred_3 = _3436;
                        frontier_phi_82_pred_4 = _3435;
                        frontier_phi_82_pred_5 = _3434;
                    }
                    _3077 = frontier_phi_82_pred;
                    _3075 = frontier_phi_82_pred_1;
                    _3073 = frontier_phi_82_pred_2;
                    _3071 = frontier_phi_82_pred_3;
                    _3069 = frontier_phi_82_pred_4;
                    _3067 = frontier_phi_82_pred_5;
                    uint _3233 = _3232 + 1u;
                    if (_3233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3226 = _3067;
                        _3227 = _3069;
                        _3228 = _3071;
                        _3229 = _3073;
                        _3230 = _3075;
                        _3231 = _3077;
                        _3232 = _3233;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3073;
                frontier_phi_63_64_ladder_1 = _3077;
                frontier_phi_63_64_ladder_2 = _3075;
                frontier_phi_63_64_ladder_3 = _3071;
                frontier_phi_63_64_ladder_4 = _3069;
                frontier_phi_63_64_ladder_5 = _3067;
            }
            else
            {
                frontier_phi_63_64_ladder = _2952;
                frontier_phi_63_64_ladder_1 = _2956;
                frontier_phi_63_64_ladder_2 = _2954;
                frontier_phi_63_64_ladder_3 = _2950;
                frontier_phi_63_64_ladder_4 = _2948;
                frontier_phi_63_64_ladder_5 = _2946;
            }
            _3066 = frontier_phi_63_64_ladder_5;
            _3068 = frontier_phi_63_64_ladder_4;
            _3070 = frontier_phi_63_64_ladder_3;
            _3072 = frontier_phi_63_64_ladder;
            _3074 = frontier_phi_63_64_ladder_2;
            _3076 = frontier_phi_63_64_ladder_1;
        }
        float _3081 = isnan(1.0) ? _819 : (isnan(_819) ? 1.0 : min(_819, 1.0));
        _2879 = (_3081 * _3072) + _2391;
        _2881 = (_3081 * _3074) + _2393;
        _2883 = (_3081 * _3076) + _2395;
        _2885 = ((_3066 * _803) * _3081) + _2729;
        _2887 = ((_3068 * _805) * _3081) + _2731;
        _2889 = ((_3070 * _806) * _3081) + _2733;
    }
    else
    {
        _2879 = _2391;
        _2881 = _2393;
        _2883 = _2395;
        _2885 = _2729;
        _2887 = _2731;
        _2889 = _2733;
    }
    float _4922 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4933 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4944 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _2906 = ((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2879 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _819))) + ((_2885 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1658)) * cbPerFrame._m0[3u].x);
    float _2907 = ((isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2881 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _819))) + ((_2887 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1658)) * cbPerFrame._m0[3u].x);
    float _2908 = ((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2883 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _819))) + ((_2889 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1658)) * cbPerFrame._m0[3u].x);
    uint _2909 = _245 + 6u;
    float _2917 = _739 / cbSceneParam._m0[86u].x;
    float _2918 = _740 / cbSceneParam._m0[86u].y;
    vec4 _2932 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2917, _2918, (log2((isnan(cbSceneParam._m0[77u].w) ? _661 : (isnan(_661) ? cbSceneParam._m0[77u].w : min(_661, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2934 = _2932.x;
    float _2935 = _2932.y;
    float _2936 = _2932.z;
    float _2937 = _2932.w;
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    if (_661 > cbSceneParam._m0[78u].w)
    {
        float _2971 = isnan(_661) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _661 : min(cbSceneParam._m0[80u].w, _661));
        float _2972 = _2971 / _661;
        float _2983 = _2972 * _711;
        float _2984 = _712 * _2972;
        float _2985 = (-0.0) - _2984;
        float _2986 = _2972 * _713;
        float _2988 = (cbSceneParam._m0[77u].w * _2985) / _2971;
        float _2989 = _2988 + cbSceneParam._m0[79u].w;
        float _2990 = cbSceneParam._m0[79u].w - _2984;
        float _2996 = sqrt(((_2983 * _2983) + (_2984 * _2984)) + (_2986 * _2986));
        float _2999 = (1.0 - (cbSceneParam._m0[77u].w / _2971)) * _2996;
        float _3004 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3006 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3183;
        if (abs((_2985 - _2988) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3183 = ((((_2989 > 0.0) ? exp2(_3004 * _2989) : (2.0 - exp2(_3006 * _2989))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2999;
        }
        else
        {
            float _3127 = 1.0 / cbSceneParam._m0[80u].x;
            float _3128 = isnan(_2990) ? _2989 : (isnan(_2989) ? _2990 : max(_2989, _2990));
            float _3129 = isnan(_2990) ? _2989 : (isnan(_2989) ? _2990 : min(_2989, _2990));
            float _3138 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : min(_3128, 0.0));
            float _3139 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : min(_3129, 0.0));
            _3183 = ((abs(_2996 / _2985) * cbSceneParam._m0[80u].y) * ((((_3138 - _3139) * 2.0) - ((exp2(_3004 * (isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0)))) - exp2(_3004 * (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))))) * _3127)) - ((exp2(_3006 * _3138) - exp2(_3006 * _3139)) * _3127))) + (_2999 * cbSceneParam._m0[80u].z);
        }
        vec4 _3185 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2917, _2918, 1.0), 0.0);
        float _3194 = exp2((_3183 * (-1.44269502162933349609375)) * (1.0 - _3185.w));
        float _3195 = log2(_3194);
        float _3211 = log2(_2937);
        _3008 = (exp2(_3211 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].x)) * _3185.x) / cbSceneParam._m0[78u].x)) + _2934;
        _3010 = (exp2(_3211 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].y)) * _3185.y) / cbSceneParam._m0[78u].y)) + _2935;
        _3012 = (exp2(_3211 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].z)) * _3185.z) / cbSceneParam._m0[78u].z)) + _2936;
        _3014 = _3194 * _2937;
    }
    else
    {
        _3008 = _2934;
        _3010 = _2935;
        _3012 = _2936;
        _3014 = _2937;
    }
    bool _3221;
    vec4 _3024;
    vec4 _3046;
    float _3048;
    float _3052;
    float _3053;
    float _3054;
    float _3055;
    bool _3065;
    for (;;)
    {
        _3024 = cbMatDynParam._m0[0u];
        float _3026 = roundEven(_3024.y);
        bool _3027 = _3026 == 3.0;
        float _3028 = log2(_3014);
        float _3035 = exp2(_3028 * cbSceneParam._m0[78u].x) * _2906;
        float _3036 = exp2(_3028 * cbSceneParam._m0[78u].y) * _2907;
        float _3037 = exp2(_3028 * cbSceneParam._m0[78u].z) * _2908;
        float _3044 = _727 + (-0.5);
        _3046 = cbMtdParam._m0[1u];
        _3048 = _3046.y * _3044;
        float _3051 = (_3026 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3052 = _3051 * (_3027 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3008)));
        _3053 = _3051 * (_3027 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3010)));
        _3054 = _3051 * (_3027 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3012)));
        _3055 = _3044 * 0.999000012874603271484375;
        _3065 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3065)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _3055) < 0.5)
            {
                _3221 = true;
                break;
            }
        }
        uint _3162 = _779 + uint(_3024.w);
        if ((cbInstanceData._m0[_3162].w < 1.0) && ((cbInstanceData._m0[_3162].w + _3055) < 0.5))
        {
            _3221 = true;
            break;
        }
        if ((_3048 + 1.0) < _3046.x)
        {
            _3221 = true;
            break;
        }
        _3221 = false;
        break;
    }
    float _3425;
    if (_3221)
    {
        discard_state = true;
        _3425 = 0.0;
    }
    else
    {
        _3425 = cbInstanceData._m0[_2909].w;
    }
    SV_Target.x = _3052;
    SV_Target.y = _3053;
    SV_Target.z = _3054;
    SV_Target.w = _3425;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2909].w;
    discard_exit();
}


