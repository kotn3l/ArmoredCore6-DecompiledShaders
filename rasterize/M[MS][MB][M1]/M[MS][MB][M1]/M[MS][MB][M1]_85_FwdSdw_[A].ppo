#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1296;
float _3960;
float _3961;
float _3962;
float _3963;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3972 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3983 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3994 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[24u].y) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4005 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _432 = (_425 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _433 = (_425 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _434 = (_425 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    float _438 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _432;
    float _441 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _433;
    float _444 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _434;
    float _451 = ((_432 - _438) * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) + _438;
    float _452 = ((_433 - _441) * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) + _441;
    float _453 = ((_434 - _444) * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) + _444;
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    float _526 = ((_496.z - _517) * _425) + _517;
    float _529 = ((((_496.x - _515) * _425) + _515) * 2.0) + (-1.0);
    float _530 = ((((_496.y - _516) * _425) + _516) * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _4016 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))));
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _569 = _567.x;
    float _570 = 1.0 - _569;
    float _583 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_569 - _570) * cbMtdParam._m0[24u].z) + _570) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4027 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _591 = (_584 * (cbMtdParam._m0[17u].x - _451)) + _451;
    float _592 = (_584 * (cbMtdParam._m0[17u].y - _452)) + _452;
    float _593 = (_584 * (cbMtdParam._m0[17u].z - _453)) + _453;
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _619 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _621 = _619.x;
    float _639 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _621) * _425) + _621;
    float _643 = ((_605.x - _639) * cbMtdParam._m0[19u].z) + _639;
    float _645 = _643 - (_643 * _584);
    float _650 = (((_471.z - _526) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _526;
    vec4 _663 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _670 = (_663.x * 2.0) + (-1.0);
    float _671 = (_663.y * 2.0) + (-1.0);
    float _672 = dot(vec2(_670, _671), vec2(_670, _671));
    float _4038 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _680 = (_584 * (_663.z - _650)) + _650;
    float _685 = _529 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_471.x * 2.0) + (-1.0)));
    float _686 = _530 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_471.y * 2.0) + (-1.0)));
    float _698 = (((_670 - _685) + (cbMtdParam._m0[21u].x * _685)) * _584) + _685;
    float _699 = (((_671 - _686) + (cbMtdParam._m0[21u].x * _686)) * _584) + _686;
    float _700 = (_584 * (sqrt(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) - _536)) + _536;
    float _702 = cbMtdParam._m0[22u].x + _549.w;
    float _705 = fma(_700, _240 * NORMAL.x, fma(_699, _247 * TANGENT.x, (_233 * _225) * _698));
    float _708 = fma(_700, _240 * NORMAL.y, fma(_699, _247 * TANGENT.y, (_233 * _226) * _698));
    float _711 = fma(_700, _240 * NORMAL.z, fma(_699, _247 * TANGENT.z, (_233 * _227) * _698));
    float _715 = inversesqrt(dot(vec3(_705, _708, _711), vec3(_705, _708, _711)));
    float _716 = _715 * _705;
    float _717 = _715 * _708;
    float _718 = _715 * _711;
    float _4049 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _719 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _4071 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4082 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4093 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4104 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _724 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _738 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _789 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _779);
    float _790 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _779);
    float _791 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _779);
    float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
    float _796 = _789 * _795;
    float _797 = _790 * _795;
    float _798 = _791 * _795;
    vec4 _803 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _805 = _803.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _977 = sqrt(((_789 * _789) + (_790 * _790)) + (_791 * _791));
        float _983 = (cbMatDynParam._m0[5u].x * _977) + cbMatDynParam._m0[5u].y;
        float _4115 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _988 = (cbMatDynParam._m0[5u].z * _977) + cbMatDynParam._m0[5u].w;
        float _4126 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) - _984)) + _984) < ((_805 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _816 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _817 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _835 = fma(_718, cbSceneParam._m0[5u].z, fma(_717, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _716));
    float _838 = fma(_718, cbSceneParam._m0[6u].z, fma(_717, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _716));
    float _841 = fma(_718, cbSceneParam._m0[7u].z, fma(_717, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _716));
    uint _854 = _274 + 9u;
    uint _855 = _854 + uint(cbMatDynParam._m0[0u].w);
    float _861 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_855].x;
    float _862 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * cbInstanceData._m0[_855].y;
    float _863 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * cbInstanceData._m0[_855].z;
    float _4137 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _4159 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _867 = 1.0 - _724;
    float _868 = _864 * _867;
    float _869 = _865 * _867;
    float _870 = _866 * _867;
    float _875 = (_864 + (-0.039999999105930328369140625)) * _724;
    float _876 = (_865 + (-0.039999999105930328369140625)) * _724;
    float _877 = (_866 + (-0.039999999105930328369140625)) * _724;
    float _878 = _875 + 0.039999999105930328369140625;
    float _880 = _876 + 0.039999999105930328369140625;
    float _881 = _877 + 0.039999999105930328369140625;
    vec4 _890 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _816, cbSceneParam._m0[86u].y * _817));
    float _894 = ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * TEXCOORD_5.w) * _890.x;
    float _895 = dot(vec3(_716, _717, _718), vec3(_796, _797, _798));
    float _898 = _895 * 2.0;
    float _902 = (_898 * _716) - _796;
    float _903 = (_898 * _717) - _797;
    float _904 = (_898 * _718) - _798;
    float _908 = abs(dot(vec3(_796, _797, _798), vec3(_716, _717, _718)));
    float _4170 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _910 = sqrt(_719);
    float _923 = exp2((_910 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_910 * 3.0));
    float _929 = (1.0 - _923) * ((_910 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _930 = _923 * _910;
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1295;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1020 = fma(_966, cbModelParam._m0[26u].z, fma(_962, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _958));
        float _1024 = fma(_966, cbModelParam._m0[27u].z, fma(_962, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _958));
        float _1028 = fma(_966, cbModelParam._m0[28u].z, fma(_962, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _958));
        float _1053 = _958 + _716;
        float _1054 = _962 + _717;
        float _1055 = _966 + _718;
        float _1065 = fma(_1055, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1053)) - _1020;
        float _1066 = fma(_1055, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1053)) - _1024;
        float _1067 = fma(_1055, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1053)) - _1028;
        float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
        float _1084 = ((_1071 * _1065) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1020 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1071 * _1066) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1024 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1071 * _1067) / cbModelParam._m0[34u].z) + ((((((_1028 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        float _1123 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1089.x + (-0.5));
        float _1125 = _1123 * (_1089.y + (-0.5));
        float _1126 = _1123 * (_1089.z + (-0.5));
        float _1133 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1096.x + (-0.5));
        float _1135 = _1133 * (_1096.y + (-0.5));
        float _1136 = _1133 * (_1096.z + (-0.5));
        float _1143 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1103.x + (-0.5));
        float _1145 = _1143 * (_1103.y + (-0.5));
        float _1146 = _1143 * (_1103.z + (-0.5));
        float _1153 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1110.x + (-0.5));
        float _1155 = _1153 * (_1110.y + (-0.5));
        float _1156 = _1153 * (_1110.z + (-0.5));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = _1124 * 0.5;
        float _1161 = _1134 * 0.5;
        float _1162 = _1144 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1177 = (dot(vec3(_716, _717, _718), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1187 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _4218 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1189 + 1.0))) + _1194) * _1157;
        float _1204 = _1125 * 0.5;
        float _1205 = _1135 * 0.5;
        float _1206 = _1145 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_716, _717, _718), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _4251 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1231 + 1.0))) + _1236) * _1158;
        float _1246 = _1126 * 0.5;
        float _1247 = _1136 * 0.5;
        float _1248 = _1146 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_716, _717, _718), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4284 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1273 + 1.0))) + _1278) * _1159;
        _1295 = _1126;
        _1297 = _1125;
        _1298 = _1124;
        _1299 = _1136;
        _1300 = _1135;
        _1301 = _1134;
        _1302 = _1146;
        _1303 = _1145;
        _1304 = _1144;
        _1305 = _1159;
        _1306 = _1158;
        _1307 = _1157;
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
    }
    else
    {
        _1295 = _1296;
        _1297 = _1296;
        _1298 = _1296;
        _1299 = _1296;
        _1300 = _1296;
        _1301 = _1296;
        _1302 = _1296;
        _1303 = _1296;
        _1304 = _1296;
        _1305 = _1296;
        _1306 = _1296;
        _1307 = _1296;
        _1308 = 0.0;
        _1309 = 0.0;
        _1310 = 0.0;
    }
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1338 = fma(_966, cbModelParam._m0[30u].z, fma(_962, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _958));
        float _1342 = fma(_966, cbModelParam._m0[31u].z, fma(_962, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _958));
        float _1346 = fma(_966, cbModelParam._m0[32u].z, fma(_962, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _958));
        float _1369 = _958 + _716;
        float _1370 = _962 + _717;
        float _1371 = _966 + _718;
        float _1381 = fma(_1371, cbModelParam._m0[30u].z, fma(_1370, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1369)) - _1338;
        float _1382 = fma(_1371, cbModelParam._m0[31u].z, fma(_1370, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1369)) - _1342;
        float _1383 = fma(_1371, cbModelParam._m0[32u].z, fma(_1370, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1369)) - _1346;
        float _1387 = inversesqrt(dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383)));
        float _1400 = ((_1387 * _1381) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1338 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1387 * _1382) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1342 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1387 * _1383) / cbModelParam._m0[35u].z) + ((((((_1346 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        float _1437 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1404.x + (-0.5));
        float _1439 = _1437 * (_1404.y + (-0.5));
        float _1440 = _1437 * (_1404.z + (-0.5));
        float _1447 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1411.x + (-0.5));
        float _1449 = _1447 * (_1411.y + (-0.5));
        float _1450 = _1447 * (_1411.z + (-0.5));
        float _1457 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1418.x + (-0.5));
        float _1459 = _1457 * (_1418.y + (-0.5));
        float _1460 = _1457 * (_1418.z + (-0.5));
        float _1467 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1425.x + (-0.5));
        float _1469 = _1467 * (_1425.y + (-0.5));
        float _1470 = _1467 * (_1425.z + (-0.5));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = _1438 * 0.5;
        float _1475 = _1448 * 0.5;
        float _1476 = _1458 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_716, _717, _718), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4347 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1501 + 1.0))) + _1506) * _1471;
        float _1516 = _1439 * 0.5;
        float _1517 = _1449 * 0.5;
        float _1518 = _1459 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_716, _717, _718), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4380 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1543 + 1.0))) + _1548) * _1472;
        float _1558 = _1440 * 0.5;
        float _1559 = _1450 * 0.5;
        float _1560 = _1460 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_716, _717, _718), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4391 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4402 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4413 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_1585 + 1.0))) + _1590) * _1473;
        _1607 = _1440;
        _1608 = _1439;
        _1609 = _1438;
        _1610 = _1450;
        _1611 = _1449;
        _1612 = _1448;
        _1613 = _1460;
        _1614 = _1459;
        _1615 = _1458;
        _1616 = _1473;
        _1617 = _1472;
        _1618 = _1471;
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
    }
    else
    {
        _1607 = _1296;
        _1608 = _1296;
        _1609 = _1296;
        _1610 = _1296;
        _1611 = _1296;
        _1612 = _1296;
        _1613 = _1296;
        _1614 = _1296;
        _1615 = _1296;
        _1616 = _1296;
        _1617 = _1296;
        _1618 = _1296;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1308)) + _1308;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1309)) + _1309;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1310)) + _1310;
    float _1654 = fma(_1633, cbSceneParam._m0[89u].z, fma(_1632, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1633, cbSceneParam._m0[90u].z, fma(_1632, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1633, cbSceneParam._m0[91u].z, fma(_1632, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1631));
    float _1675 = _902 * 0.5;
    float _1676 = _903 * 0.5;
    float _1677 = _904 * 0.5;
    float _1678 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1681 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1684 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1718;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1691 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1295, _1299, _1302, _1305));
        float _1695 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1297, _1300, _1303, _1306));
        float _1699 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1706 = dot(vec4(cbModelParam._m0[39u]), vec4(_1675, _1676, _1677, 1.0));
        _1718 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1718 = 1.0;
    }
    float _1729;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1720 = dot(vec4(cbModelParam._m0[40u]), vec4(_1675, _1676, _1677, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1733 = (_1729 * cbModelParam._m0[1u].x) + (_1718 * (1.0 - cbModelParam._m0[1u].x));
    float _1743 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _719);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1743 : min(cbModelParam._m0[25u].z, _1743));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1792 = fma(_966, cbModelParam._m0[13u].z, fma(_962, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _958)) + cbModelParam._m0[13u].w;
        float _1796 = fma(_966, cbModelParam._m0[14u].z, fma(_962, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _958)) + cbModelParam._m0[14u].w;
        float _1800 = fma(_966, cbModelParam._m0[15u].z, fma(_962, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _958)) + cbModelParam._m0[15u].w;
        float _1803 = fma(_904, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _902));
        float _1806 = fma(_904, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _902));
        float _1809 = fma(_904, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _902));
        float _1837;
        if (_1803 > 0.0)
        {
            _1837 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1837 = frontier_phi_17_15_ladder;
        }
        float _2009;
        if (_1806 > 0.0)
        {
            _2009 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2009 = frontier_phi_26_22_ladder;
        }
        float _2304;
        if (_1809 > 0.0)
        {
            _2304 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2304 = frontier_phi_38_33_ladder;
        }
        float _2306 = isnan(_2009) ? _1837 : (isnan(_1837) ? _2009 : min(_1837, _2009));
        float _2307 = isnan(_2304) ? _2306 : (isnan(_2306) ? _2304 : min(_2306, _2304));
        float _2311 = (_2307 * _1803) + _1792;
        float _2312 = (_2307 * _1806) + _1796;
        float _2313 = (_2307 * _1809) + _1800;
        float _2314 = _2307 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2314;
        float _2318 = _2314 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 > _2318) || ((_2312 < _2316) || ((_2311 < _2316) || (_2311 > _2318))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2458 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2313, cbModelParam._m0[9u].z, fma(_2312, cbModelParam._m0[9u].y, _2311 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2313, cbModelParam._m0[10u].z, fma(_2312, cbModelParam._m0[10u].y, _2311 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2313, cbModelParam._m0[11u].z, fma(_2312, cbModelParam._m0[11u].y, _2311 * cbModelParam._m0[11u].x))), _1744);
            frontier_phi_16_38_ladder = _2458.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2458.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2458.x * cbModelParam._m0[1u].y;
        }
        _1825 = frontier_phi_16_38_ladder_2;
        _1827 = frontier_phi_16_38_ladder_1;
        _1829 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_902, _903, _904), _1744);
        _1825 = _1813.x * cbModelParam._m0[1u].y;
        _1827 = _1813.y * cbModelParam._m0[1u].y;
        _1829 = _1813.z * cbModelParam._m0[1u].y;
    }
    float _1833 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _719);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1833 : min(cbModelParam._m0[25u].w, _1833));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1888 = fma(_966, cbModelParam._m0[21u].z, fma(_962, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _958)) + cbModelParam._m0[21u].w;
        float _1892 = fma(_966, cbModelParam._m0[22u].z, fma(_962, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _958)) + cbModelParam._m0[22u].w;
        float _1896 = fma(_966, cbModelParam._m0[23u].z, fma(_962, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _958)) + cbModelParam._m0[23u].w;
        float _1899 = fma(_904, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _902));
        float _1902 = fma(_904, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _902));
        float _1905 = fma(_904, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _902));
        float _2014;
        if (_1899 > 0.0)
        {
            _2014 = abs((1.0 - _1888) / _1899);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1888 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2014 = frontier_phi_28_24_ladder;
        }
        float _2331;
        if (_1902 > 0.0)
        {
            _2331 = abs((1.0 - _1892) / _1902);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1892 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2331 = frontier_phi_40_35_ladder;
        }
        float _2669;
        if (_1905 > 0.0)
        {
            _2669 = abs((1.0 - _1896) / _1905);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1896 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2669 = frontier_phi_50_47_ladder;
        }
        float _2671 = isnan(_2331) ? _2014 : (isnan(_2014) ? _2331 : min(_2014, _2331));
        float _2672 = isnan(_2669) ? _2671 : (isnan(_2671) ? _2669 : min(_2671, _2669));
        float _2676 = (_2672 * _1899) + _1888;
        float _2677 = (_2672 * _1902) + _1892;
        float _2678 = (_2672 * _1905) + _1896;
        float _2679 = _2672 * 9.9999997473787516355514526367188e-05;
        float _2680 = (-1.0) - _2679;
        float _2682 = _2679 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2678 > _2682) || ((_2678 < _2680) || ((_2677 > _2682) || ((_2677 < _2680) || ((_2676 < _2680) || (_2676 > _2682))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2678, cbModelParam._m0[17u].z, fma(_2677, cbModelParam._m0[17u].y, _2676 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2678, cbModelParam._m0[18u].z, fma(_2677, cbModelParam._m0[18u].y, _2676 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2678, cbModelParam._m0[19u].z, fma(_2677, cbModelParam._m0[19u].y, _2676 * cbModelParam._m0[19u].x))), _1834);
            frontier_phi_25_50_ladder = _2800.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2800.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2800.x * cbModelParam._m0[1u].z;
        }
        _1924 = frontier_phi_25_50_ladder_2;
        _1926 = frontier_phi_25_50_ladder_1;
        _1928 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_902, _903, _904), _1834);
        _1924 = _1908.x * cbModelParam._m0[1u].z;
        _1926 = _1908.y * cbModelParam._m0[1u].z;
        _1928 = _1908.z * cbModelParam._m0[1u].z;
    }
    float _1941 = (((_929 * _878) + _930) * _894) * ((cbModelParam._m0[1u].w * (_1924 - _1825)) + _1825);
    float _1943 = (((_929 * _880) + _930) * _894) * ((cbModelParam._m0[1u].w * (_1926 - _1827)) + _1827);
    float _1945 = (((_929 * _881) + _930) * _894) * ((cbModelParam._m0[1u].w * (_1928 - _1829)) + _1829);
    float _1948 = fma(_1945, cbSceneParam._m0[89u].z, fma(_1943, cbSceneParam._m0[89u].y, _1941 * cbSceneParam._m0[89u].x));
    float _1951 = fma(_1945, cbSceneParam._m0[90u].z, fma(_1943, cbSceneParam._m0[90u].y, _1941 * cbSceneParam._m0[90u].x));
    float _1954 = fma(_1945, cbSceneParam._m0[91u].z, fma(_1943, cbSceneParam._m0[91u].y, _1941 * cbSceneParam._m0[91u].x));
    float _1988 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1992 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2000 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2001 = _1988 / _2000;
    float _2002 = _1992 / _2000;
    float _2003 = _1996 / _2000;
    float _2150;
    float _2151;
    float _2152;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2030 = ((uint(_2003 > cbSceneParam._m0[59u].y) + uint(_2003 > cbSceneParam._m0[59u].x)) + uint(_2003 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2031 = _2030 + 43u;
        uint _2039 = _2030 + 44u;
        uint _2047 = _2030 + 45u;
        uint _2055 = _2030 + 46u;
        float _2066 = fma(_2000, cbSceneParam._m0[_2031].w, fma(_1996, cbSceneParam._m0[_2031].z, fma(_1992, cbSceneParam._m0[_2031].y, _1988 * cbSceneParam._m0[_2031].x)));
        float _2070 = fma(_2000, cbSceneParam._m0[_2039].w, fma(_1996, cbSceneParam._m0[_2039].z, fma(_1992, cbSceneParam._m0[_2039].y, _1988 * cbSceneParam._m0[_2039].x)));
        float _2078 = fma(_2000, cbSceneParam._m0[_2055].w, fma(_1996, cbSceneParam._m0[_2055].z, fma(_1992, cbSceneParam._m0[_2055].y, _1988 * cbSceneParam._m0[_2055].x)));
        float _2083 = cbSceneParam._m0[33u].z * _2078;
        float _2085 = cbSceneParam._m0[33u].w * _2078;
        float _2088 = fma(_2000, cbSceneParam._m0[_2047].w, fma(_1996, cbSceneParam._m0[_2047].z, fma(_1992, cbSceneParam._m0[_2047].y, _1988 * cbSceneParam._m0[_2047].x))) / _2078;
        float _2136 = (cbSceneParam._m0[33u].x - sqrt(((_2002 * _2002) + (_2001 * _2001)) + (_2003 * _2003))) * cbSceneParam._m0[33u].y;
        float _4539 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2143 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 + _2066) / _2078, (_2085 + _2070) / _2078), _2088), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2085 + _2066) / _2078, (_2070 - _2083) / _2078), _2088), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2066 - _2083) / _2078, (_2070 - _2085) / _2078), _2088), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2066 - _2085) / _2078, (_2083 + _2070) / _2078), _2088), 0.0)).x), vec4(0.25)));
        _2150 = 1.0 - (_2143 * cbSceneParam._m0[34u].x);
        _2151 = 1.0 - (_2143 * cbSceneParam._m0[34u].y);
        _2152 = 1.0 - (_2143 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2150 = 1.0;
        _2151 = 1.0;
        _2152 = 1.0;
    }
    float _2216;
    float _2218;
    float _2220;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2204 = fma(_2000, cbSceneParam._m0[63u].w, fma(_1996, cbSceneParam._m0[63u].z, fma(_1992, cbSceneParam._m0[63u].y, _1988 * cbSceneParam._m0[63u].x)));
        float _2205 = fma(_2000, cbSceneParam._m0[60u].w, fma(_1996, cbSceneParam._m0[60u].z, fma(_1992, cbSceneParam._m0[60u].y, _1988 * cbSceneParam._m0[60u].x))) / _2204;
        float _2206 = fma(_2000, cbSceneParam._m0[61u].w, fma(_1996, cbSceneParam._m0[61u].z, fma(_1992, cbSceneParam._m0[61u].y, _1988 * cbSceneParam._m0[61u].x))) / _2204;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2205 >= cbSceneParam._m0[64u].x) && (_2206 >= cbSceneParam._m0[64u].y)) && (_2205 <= cbSceneParam._m0[64u].z)) && (_2206 <= cbSceneParam._m0[64u].w))
        {
            float _2344 = fma(_2000, cbSceneParam._m0[62u].w, fma(_1996, cbSceneParam._m0[62u].z, fma(_1992, cbSceneParam._m0[62u].y, _1988 * cbSceneParam._m0[62u].x))) / _2204;
            float _2348 = isnan(cbSceneParam._m0[41u].w) ? _2344 : (isnan(_2344) ? cbSceneParam._m0[41u].w : max(_2344, cbSceneParam._m0[41u].w));
            float _2391 = (cbSceneParam._m0[33u].x - sqrt(((_2002 * _2002) + (_2001 * _2001)) + (_2003 * _2003))) * cbSceneParam._m0[33u].y;
            float _4555 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
            float _2398 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2205, cbSceneParam._m0[33u].w + _2206), _2348), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2205, _2206 - cbSceneParam._m0[33u].z), _2348), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2205 - cbSceneParam._m0[33u].z, _2206 - cbSceneParam._m0[33u].w), _2348), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2205 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2206), _2348), 0.0)).x), vec4(0.25)));
            float _2402 = 1.0 - (_2398 * cbSceneParam._m0[34u].x);
            float _2403 = 1.0 - (_2398 * cbSceneParam._m0[34u].y);
            float _2404 = 1.0 - (_2398 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2404) ? _2152 : (isnan(_2152) ? _2404 : min(_2152, _2404));
            frontier_phi_37_36_ladder_1 = isnan(_2403) ? _2151 : (isnan(_2151) ? _2403 : min(_2151, _2403));
            frontier_phi_37_36_ladder_2 = isnan(_2402) ? _2150 : (isnan(_2150) ? _2402 : min(_2150, _2402));
        }
        else
        {
            frontier_phi_37_36_ladder = _2152;
            frontier_phi_37_36_ladder_1 = _2151;
            frontier_phi_37_36_ladder_2 = _2150;
        }
        _2216 = frontier_phi_37_36_ladder_2;
        _2218 = frontier_phi_37_36_ladder_1;
        _2220 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2216 = _2150;
        _2218 = _2151;
        _2220 = _2152;
    }
    uvec4 _2225 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2227 = _2225.x * 14u;
    uint _2228 = _2227 + 13u;
    float _2235 = _894 + (-1.0);
    float _2240 = (cbLight._m0[_2228].x * _2235) + 1.0;
    float _2241 = (cbLight._m0[_2228].y * _2235) + 1.0;
    float _2242 = (cbLight._m0[_2228].z * _2235) + 1.0;
    float _2243 = (cbLight._m0[_2228].w * _2235) + 1.0;
    uint _2244 = _2227 + 5u;
    float _2250 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
    uint _2254 = _2227 + 4u;
    float _2263 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
    uint _2267 = _2227 | 1u;
    float _2278 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_716, _717, _718));
    float _2281 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_716, _717, _718));
    float _4591 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _4602 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2286 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * 0.3183098733425140380859375;
    float _2288 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * 0.3183098733425140380859375;
    float _2295 = ((cbLight._m0[_2244].x * _2250) * _2288) + (((cbLight._m0[_2254].x * _2216) * _2263) * _2286);
    float _2296 = ((_2250 * cbLight._m0[_2244].y) * _2288) + (((cbLight._m0[_2254].y * _2218) * _2263) * _2286);
    float _2297 = ((_2250 * cbLight._m0[_2244].z) * _2288) + (((cbLight._m0[_2254].z * _2220) * _2263) * _2286);
    uvec4 _2301 = floatBitsToUint(cbLight._m0[_2227 + 12u]);
    bool _2303 = _2301.x == 0u;
    float _2405;
    float _2407;
    float _2409;
    if (_2303)
    {
        _2405 = _2295;
        _2407 = _2296;
        _2409 = _2297;
    }
    else
    {
        uint _2413 = _2227 + 6u;
        float _2429 = (dot(vec3(cbLight._m0[_2227 + 2u].xyz), vec3(_716, _717, _718)) * 0.5) + 0.5;
        float _2430 = _2429 * _2429;
        float _4613 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2431 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2432 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2405 = (((cbLight._m0[_2413].x * 0.3183098733425140380859375) * _2431) * _2432) + _2295;
        _2407 = (((cbLight._m0[_2413].y * 0.3183098733425140380859375) * _2431) * _2432) + _2296;
        _2409 = (((cbLight._m0[_2413].z * 0.3183098733425140380859375) * _2431) * _2432) + _2297;
    }
    bool _2412 = _2301.y == 0u;
    float _2467;
    float _2469;
    float _2471;
    if (_2412)
    {
        _2467 = _2405;
        _2469 = _2407;
        _2471 = _2409;
    }
    else
    {
        uint _2640 = _2227 + 7u;
        float _2656 = (dot(vec3(cbLight._m0[_2227 + 3u].xyz), vec3(_716, _717, _718)) * 0.5) + 0.5;
        float _2657 = _2656 * _2656;
        float _4629 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2658 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2659 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2467 = (((cbLight._m0[_2640].x * 0.3183098733425140380859375) * _2658) * _2659) + _2405;
        _2469 = (((cbLight._m0[_2640].y * 0.3183098733425140380859375) * _2658) * _2659) + _2407;
        _2471 = (((cbLight._m0[_2640].z * 0.3183098733425140380859375) * _2658) * _2659) + _2409;
    }
    uint _2474 = _2227 + 8u;
    float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _719) * 0.949999988079071044921875);
    float _2488 = _2487 * _2487;
    float _2489 = cbLight._m0[_2227].x + _796;
    float _2490 = cbLight._m0[_2227].y + _797;
    float _2491 = cbLight._m0[_2227].z + _798;
    float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
    float _2496 = _2495 * _2489;
    float _2497 = _2495 * _2490;
    float _2498 = _2495 * _2491;
    float _2499 = dot(vec3(_716, _717, _718), vec3(cbLight._m0[_2227].xyz));
    float _4645 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _4656 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _2503 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2504 = dot(vec3(_716, _717, _718), vec3(_2496, _2497, _2498));
    float _4667 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2508 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2496, _2497, _2498));
    float _4678 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2512 = _2488 * _2488;
    float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
    float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
    float _2525 = 0.959999978542327880859375 - _875;
    float _2527 = 0.959999978542327880859375 - _876;
    float _2528 = 0.959999978542327880859375 - _877;
    float _2535 = 1.0 - _2488;
    float _2546 = (0.5 / (((_2503 * ((_2502 * _2535) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2535) + _2488) * _2502))) * _2502;
    float _4689 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2548 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
    uint _2562 = _2227 + 9u;
    float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _719) * 0.949999988079071044921875);
    float _2574 = _2573 * _2573;
    float _2575 = cbLight._m0[_2267].x + _796;
    float _2576 = cbLight._m0[_2267].y + _797;
    float _2577 = cbLight._m0[_2267].z + _798;
    float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
    float _2582 = _2581 * _2575;
    float _2583 = _2581 * _2576;
    float _2584 = _2581 * _2577;
    float _2585 = dot(vec3(_716, _717, _718), vec3(cbLight._m0[_2267].xyz));
    float _4700 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    float _2589 = dot(vec3(_716, _717, _718), vec3(_2582, _2583, _2584));
    float _4711 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
    float _2593 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2582, _2583, _2584));
    float _4722 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2597 = _2574 * _2574;
    float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
    float _2608 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
    float _2615 = 1.0 - _2574;
    float _2625 = (0.5 / (((_2503 * ((_2588 * _2615) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2615) + _2574) * _2588))) * _2588;
    float _4733 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
    float _2637 = (((((_2608 * _2525) + _878) * cbLight._m0[_2562].x) * _2627) * _2250) + ((((cbLight._m0[_2474].x * _2216) * ((_2524 * _2525) + _878)) * _2548) * _2263);
    float _2638 = (((((_2608 * _2527) + _880) * cbLight._m0[_2562].y) * _2627) * _2250) + ((((cbLight._m0[_2474].y * _2218) * ((_2524 * _2527) + _880)) * _2548) * _2263);
    float _2639 = (((((_2608 * _2528) + _881) * cbLight._m0[_2562].z) * _2627) * _2250) + ((((cbLight._m0[_2474].z * _2220) * ((_2524 * _2528) + _881)) * _2548) * _2263);
    float _2695;
    float _2697;
    float _2699;
    if (_2303)
    {
        _2695 = _2637;
        _2697 = _2638;
        _2699 = _2639;
    }
    else
    {
        uint _2701 = _2227 + 2u;
        uint _2705 = _2227 + 10u;
        float _2719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2701].w)) * _719) * 0.949999988079071044921875);
        float _2720 = _2719 * _2719;
        float _2721 = cbLight._m0[_2701].x + _796;
        float _2722 = cbLight._m0[_2701].y + _797;
        float _2723 = cbLight._m0[_2701].z + _798;
        float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
        float _2728 = _2727 * _2721;
        float _2729 = _2727 * _2722;
        float _2730 = _2727 * _2723;
        float _2731 = dot(vec3(_716, _717, _718), vec3(cbLight._m0[_2701].xyz));
        float _4744 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2735 = dot(vec3(_716, _717, _718), vec3(_2728, _2729, _2730));
        float _4755 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2739 = dot(vec3(cbLight._m0[_2701].xyz), vec3(_2728, _2729, _2730));
        float _4766 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2743 = _2720 * _2720;
        float _2747 = ((_2738 * _2738) * (_2743 + (-1.0))) + 1.0;
        float _2754 = exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0);
        float _2761 = 1.0 - _2720;
        float _2771 = (0.5 / (((_2503 * ((_2734 * _2761) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2761) + _2720) * _2734))) * _2734;
        float _4777 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2773 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2743 / ((_2747 * _2747) * 3.141590118408203125));
        float _2774 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2695 = (((((_2754 * _2525) + _878) * cbLight._m0[_2705].x) * _2773) * _2774) + _2637;
        _2697 = (((((_2754 * _2527) + _880) * cbLight._m0[_2705].y) * _2773) * _2774) + _2638;
        _2699 = (((((_2754 * _2528) + _881) * cbLight._m0[_2705].z) * _2773) * _2774) + _2639;
    }
    float _2805;
    float _2807;
    float _2809;
    if (_2412)
    {
        _2805 = _2695;
        _2807 = _2697;
        _2809 = _2699;
    }
    else
    {
        uint _2816 = _2227 + 3u;
        uint _2820 = _2227 + 11u;
        float _2834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2816].w)) * _719) * 0.949999988079071044921875);
        float _2835 = _2834 * _2834;
        float _2836 = cbLight._m0[_2816].x + _796;
        float _2837 = cbLight._m0[_2816].y + _797;
        float _2838 = cbLight._m0[_2816].z + _798;
        float _2842 = inversesqrt(dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838)));
        float _2843 = _2842 * _2836;
        float _2844 = _2842 * _2837;
        float _2845 = _2842 * _2838;
        float _2846 = dot(vec3(_716, _717, _718), vec3(cbLight._m0[_2816].xyz));
        float _4793 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2849 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _2850 = dot(vec3(_716, _717, _718), vec3(_2843, _2844, _2845));
        float _4804 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2853 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2854 = dot(vec3(cbLight._m0[_2816].xyz), vec3(_2843, _2844, _2845));
        float _4815 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2858 = _2835 * _2835;
        float _2862 = ((_2853 * _2853) * (_2858 + (-1.0))) + 1.0;
        float _2869 = exp2(log2(1.0 - (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0)))) * 5.0);
        float _2876 = 1.0 - _2835;
        float _2886 = (0.5 / (((_2503 * ((_2849 * _2876) + _2835)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2876) + _2835) * _2849))) * _2849;
        float _4826 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2888 = (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2858 / ((_2862 * _2862) * 3.141590118408203125));
        float _2889 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2805 = (((((_2869 * _2525) + _878) * cbLight._m0[_2820].x) * _2888) * _2889) + _2695;
        _2807 = (((((_2869 * _2527) + _880) * cbLight._m0[_2820].y) * _2888) * _2889) + _2697;
        _2809 = (((((_2869 * _2528) + _881) * cbLight._m0[_2820].z) * _2888) * _2889) + _2699;
    }
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_2225.y == 0u)
    {
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.x;
        uint _2922 = uint((float(_2910.y) * floor(float(uint(cbSceneParam._m0[85u].y * _817) / _2911))) + floor(float(uint(cbSceneParam._m0[85u].x * _816) / _2911)));
        float _2932 = (log2(_2003 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2933 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        uint _2936 = uint(isnan(14.0) ? _2933 : (isnan(_2933) ? 14.0 : min(_2933, 14.0)));
        uvec4 _2941 = texelFetch(g_lightClusterGridBuffer, int(((_2936 << 2u) + (_2922 << 6u)) >> 2u));
        uint _2942 = _2941.x;
        uint _2943 = _2910.z;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((((1u << ((_2943 >> 4u) & 15u)) + 4294967295u) & _2942) == 0u) || ((_2943 & 240u) == 0u))
        {
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
        }
        else
        {
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            uint _3181 = 0u;
            uint _3190;
            bool _3191;
            for (;;)
            {
                _3190 = texelFetch(g_lightClassification, int((((_2936 << 5u) + (_2922 << 9u)) + (_3181 << 2u)) >> 2u)).x;
                _3191 = _3190 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3191)
                {
                    frontier_phi_71_pred = _3180;
                    frontier_phi_71_pred_1 = _3179;
                    frontier_phi_71_pred_2 = _3178;
                    frontier_phi_71_pred_3 = _3177;
                    frontier_phi_71_pred_4 = _3176;
                    frontier_phi_71_pred_5 = _3175;
                }
                else
                {
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    uint _3326;
                    _3320 = _3175;
                    _3321 = _3176;
                    _3322 = _3177;
                    _3323 = _3178;
                    _3324 = _3179;
                    _3325 = _3180;
                    _3326 = _3190;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    for (;;)
                    {
                        uint _3330 = uint(findLSB(_3326)) + (_3181 << 5u);
                        uint _3327 = (_3326 + 4294967295u) & _3326;
                        uint _3332 = _3330 * 48u;
                        vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3352 = (_3330 * 48u) + 4u;
                        vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 3u)).x));
                        uint _3371 = (_3330 * 48u) + 8u;
                        vec3 _3382 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x));
                        float _3386 = _3346.x - _2001;
                        float _3387 = _3346.y - _2002;
                        float _3388 = _3346.z - _2003;
                        float _3389 = dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388));
                        float _3392 = inversesqrt(_3389);
                        float _3393 = _3392 * _3386;
                        float _3394 = _3392 * _3387;
                        float _3395 = _3392 * _3388;
                        float _3396 = dot(vec3(_835, _838, _841), vec3(_3393, _3394, _3395));
                        float _3401 = 1.0 - (_3389 * _3346.w);
                        float _4852 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3402 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                        float _3403 = sqrt(_3389) * _3365.w;
                        float _3406 = 1.39999997615814208984375 / (_3403 + 1.39999997615814208984375);
                        float _3407 = _3406 * _3406;
                        float _3410 = ((1.0 - _3407) * _3396) + _3407;
                        float _3413 = _3403 * _3403;
                        float _3417 = ((isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0))) * _3402) / ((_3413 * 0.699999988079071044921875) + 1.0);
                        float _3421 = (-0.0) - _2001;
                        float _3422 = (-0.0) - _2002;
                        float _3423 = (-0.0) - _2003;
                        float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                        float _3428 = _3427 * _3421;
                        float _3429 = _3427 * _3422;
                        float _3430 = _3427 * _3423;
                        float _3437 = exp2(log2(1.0 / ((_3413 * 3.5) + 5.0)) * 0.25);
                        float _3438 = 1.0 - _910;
                        float _3445 = sqrt(1.0 - ((1.0 - (_3438 * _3438)) * (1.0 - (_3437 * _3437))));
                        float _3446 = _3445 * _3445;
                        float _3447 = _3446 * _3446;
                        float _3448 = _3428 + _3393;
                        float _3449 = _3429 + _3394;
                        float _3450 = _3430 + _3395;
                        float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                        float _3458 = dot(vec3(_835, _838, _841), vec3(_3428, _3429, _3430));
                        float _4868 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3461 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                        float _3462 = dot(vec3(_835, _838, _841), vec3(_3454 * _3448, _3454 * _3449, _3454 * _3450));
                        float _4879 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3465 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                        float _3469 = ((_3465 * _3465) * (_3447 + (-1.0))) + 1.0;
                        float _3470 = _3406 * _3446;
                        float _3471 = _3470 * _3470;
                        float _3474 = ((1.0 - _3471) * _3396) + _3471;
                        float _4890 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3475 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                        float _3476 = 1.0 - _3446;
                        float _3486 = (0.5 / (((_3475 * ((_3461 * _3476) + _3446)) + 9.9999999392252902907785028219223e-09) + (((_3475 * _3476) + _3446) * _3461))) * _3475;
                        float _4901 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3497 = (((_3447 * 3.1415927410125732421875) * (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) / ((_3469 * _3469) * ((_3413 * 2.1991131305694580078125) + 3.141590118408203125))) * _3402;
                        _3250 = (_3417 * _3365.x) + _3323;
                        _3251 = (_3417 * _3365.y) + _3324;
                        _3252 = (_3417 * _3365.z) + _3325;
                        _3247 = (_3497 * _3382.x) + _3320;
                        _3248 = (_3497 * _3382.y) + _3321;
                        _3249 = (_3497 * _3382.z) + _3322;
                        if (_3327 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3320 = _3247;
                            _3321 = _3248;
                            _3322 = _3249;
                            _3323 = _3250;
                            _3324 = _3251;
                            _3325 = _3252;
                            _3326 = _3327;
                        }
                    }
                    frontier_phi_71_pred = _3252;
                    frontier_phi_71_pred_1 = _3251;
                    frontier_phi_71_pred_2 = _3250;
                    frontier_phi_71_pred_3 = _3249;
                    frontier_phi_71_pred_4 = _3248;
                    frontier_phi_71_pred_5 = _3247;
                }
                _3033 = frontier_phi_71_pred;
                _3031 = frontier_phi_71_pred_1;
                _3029 = frontier_phi_71_pred_2;
                _3027 = frontier_phi_71_pred_3;
                _3025 = frontier_phi_71_pred_4;
                _3023 = frontier_phi_71_pred_5;
                uint _3182 = _3181 + 1u;
                if (_3182 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3175 = _3023;
                    _3176 = _3025;
                    _3177 = _3027;
                    _3178 = _3029;
                    _3179 = _3031;
                    _3180 = _3033;
                    _3181 = _3182;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
        }
        uvec4 _3036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3037 = _3036.z;
        uint _3039 = (_3037 >> 8u) & 15u;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        if (((4294967295u << _3039) & _2942) == 0u)
        {
            _3143 = _3022;
            _3145 = _3024;
            _3147 = _3026;
            _3149 = _3028;
            _3151 = _3030;
            _3153 = _3032;
        }
        else
        {
            float _3168 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
            float _3169 = _3168 * _2001;
            float _3170 = _3168 * _2002;
            float _3171 = _3168 * _2003;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3039 < ((_3037 >> 12u) & 15u))
            {
                float _3144;
                float _3146;
                float _3148;
                float _3150;
                float _3152;
                float _3154;
                float _3303 = _3022;
                float _3304 = _3024;
                float _3305 = _3026;
                float _3306 = _3028;
                float _3307 = _3030;
                float _3308 = _3032;
                uint _3309 = _3039;
                uint _3318;
                bool _3319;
                for (;;)
                {
                    _3318 = texelFetch(g_lightClassification, int((((_2936 << 5u) + (_2922 << 9u)) + (_3309 << 2u)) >> 2u)).x;
                    _3319 = _3318 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3319)
                    {
                        frontier_phi_82_pred = _3308;
                        frontier_phi_82_pred_1 = _3307;
                        frontier_phi_82_pred_2 = _3306;
                        frontier_phi_82_pred_3 = _3305;
                        frontier_phi_82_pred_4 = _3304;
                        frontier_phi_82_pred_5 = _3303;
                    }
                    else
                    {
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3524 = _3303;
                        float _3525 = _3304;
                        float _3526 = _3305;
                        float _3527 = _3306;
                        float _3528 = _3307;
                        float _3529 = _3308;
                        uint _3530 = _3318;
                        uint _3531;
                        vec4 _3556;
                        float _3557;
                        vec4 _3572;
                        vec3 _3584;
                        vec4 _3599;
                        vec4 _3614;
                        float _3660;
                        bool _3661;
                        for (;;)
                        {
                            uint _3541 = ((_3309 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3530));
                            _3531 = (_3530 + 4294967295u) & _3530;
                            uint _3543 = _3541 * 40u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            _3557 = _3556.w;
                            uint _3559 = (_3541 * 40u) + 4u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3541 * 40u) + 8u;
                            _3584 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x));
                            uint _3586 = (_3541 * 40u) + 16u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3601 = (_3541 * 40u) + 20u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3616 = (_3541 * 40u) + 24u;
                            vec4 _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3635 = (_3541 * 40u) + 28u;
                            vec4 _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            _3660 = fma(_2003, _3648.z, fma(_2002, _3648.y, _3648.x * _2001)) + _3648.w;
                            _3661 = !((fma(_2003, _3629.z, fma(_2002, _3629.y, _3629.x * _2001)) + _3629.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3661)
                            {
                                float _3688 = _3556.x - _2001;
                                float _3689 = _3556.y - _2002;
                                float _3690 = _3556.z - _2003;
                                float _3691 = dot(vec3(_3688, _3689, _3690), vec3(_3688, _3689, _3690));
                                float _3694 = inversesqrt(_3691);
                                float _3695 = _3694 * _3688;
                                float _3696 = _3694 * _3689;
                                float _3697 = _3694 * _3690;
                                float _3701 = 1.0 - (_3691 / (_3557 * _3557));
                                float _4912 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3702 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3706 = sqrt(_3691) * _3572.w;
                                float _3708 = 1.39999997615814208984375 / (_3706 + 1.39999997615814208984375);
                                float _3709 = _3708 * _3708;
                                float _3712 = ((1.0 - _3709) * dot(vec3(_3695, _3696, _3697), vec3(_835, _838, _841))) + _3709;
                                float _3715 = _3706 * _3706;
                                float _3719 = (fma(_2003, _3599.z, fma(_2002, _3599.y, _3599.x * _2001)) + _3599.w) / _3660;
                                float _3720 = (fma(_2003, _3614.z, fma(_2002, _3614.y, _3614.x * _2001)) + _3614.w) / _3660;
                                float _3724 = 1.0 - dot(vec2(_3719, _3720), vec2(_3719, _3720));
                                float _4928 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3726 = _3725 * (((isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0))) * _3702) / ((_3715 * 0.699999988079071044921875) + 1.0));
                                float _3738 = exp2(log2(1.0 / ((_3715 * 3.5) + 5.0)) * 0.25);
                                float _3739 = 1.0 - _910;
                                float _3746 = sqrt(1.0 - ((1.0 - (_3739 * _3739)) * (1.0 - (_3738 * _3738))));
                                float _3747 = _3746 * _3746;
                                float _3748 = _3747 * _3747;
                                float _3749 = _3695 - _3169;
                                float _3750 = _3696 - _3170;
                                float _3751 = _3697 - _3171;
                                float _3755 = inversesqrt(dot(vec3(_3749, _3750, _3751), vec3(_3749, _3750, _3751)));
                                float _3759 = dot(vec3(_835, _838, _841), vec3((-0.0) - _3169, (-0.0) - _3170, (-0.0) - _3171));
                                float _4939 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3762 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                                float _3763 = dot(vec3(_835, _838, _841), vec3(_3755 * _3749, _3755 * _3750, _3755 * _3751));
                                float _4950 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                                float _3770 = ((_3766 * _3766) * (_3748 + (-1.0))) + 1.0;
                                float _3771 = _3708 * _3747;
                                float _3772 = _3771 * _3771;
                                float _3778 = ((1.0 - _3772) * dot(vec3(_835, _838, _841), vec3(_3695, _3696, _3697))) + _3772;
                                float _4961 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3779 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3780 = 1.0 - _3747;
                                float _3790 = (0.5 / (((_3779 * ((_3762 * _3780) + _3747)) + 9.9999999392252902907785028219223e-09) + (((_3779 * _3780) + _3747) * _3762))) * _3779;
                                float _4972 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3800 = (_3725 * _3702) * (((_3748 * 3.1415927410125732421875) * (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0)))) / ((_3770 * _3770) * ((_3715 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3726 * _3572.z;
                                frontier_phi_88_pred_1 = _3726 * _3572.y;
                                frontier_phi_88_pred_2 = _3726 * _3572.x;
                                frontier_phi_88_pred_3 = _3800 * _3584.z;
                                frontier_phi_88_pred_4 = _3800 * _3584.y;
                                frontier_phi_88_pred_5 = _3800 * _3584.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3809 = frontier_phi_88_pred;
                            _3808 = frontier_phi_88_pred_1;
                            _3807 = frontier_phi_88_pred_2;
                            _3806 = frontier_phi_88_pred_3;
                            _3805 = frontier_phi_88_pred_4;
                            _3804 = frontier_phi_88_pred_5;
                            _3514 = _3807 + _3527;
                            _3515 = _3808 + _3528;
                            _3516 = _3809 + _3529;
                            _3511 = _3804 + _3524;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            if (_3531 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3531;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3516;
                        frontier_phi_82_pred_1 = _3515;
                        frontier_phi_82_pred_2 = _3514;
                        frontier_phi_82_pred_3 = _3513;
                        frontier_phi_82_pred_4 = _3512;
                        frontier_phi_82_pred_5 = _3511;
                    }
                    _3154 = frontier_phi_82_pred;
                    _3152 = frontier_phi_82_pred_1;
                    _3150 = frontier_phi_82_pred_2;
                    _3148 = frontier_phi_82_pred_3;
                    _3146 = frontier_phi_82_pred_4;
                    _3144 = frontier_phi_82_pred_5;
                    uint _3310 = _3309 + 1u;
                    if (_3310 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3303 = _3144;
                        _3304 = _3146;
                        _3305 = _3148;
                        _3306 = _3150;
                        _3307 = _3152;
                        _3308 = _3154;
                        _3309 = _3310;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3150;
                frontier_phi_63_64_ladder_1 = _3154;
                frontier_phi_63_64_ladder_2 = _3152;
                frontier_phi_63_64_ladder_3 = _3148;
                frontier_phi_63_64_ladder_4 = _3146;
                frontier_phi_63_64_ladder_5 = _3144;
            }
            else
            {
                frontier_phi_63_64_ladder = _3028;
                frontier_phi_63_64_ladder_1 = _3032;
                frontier_phi_63_64_ladder_2 = _3030;
                frontier_phi_63_64_ladder_3 = _3026;
                frontier_phi_63_64_ladder_4 = _3024;
                frontier_phi_63_64_ladder_5 = _3022;
            }
            _3143 = frontier_phi_63_64_ladder_5;
            _3145 = frontier_phi_63_64_ladder_4;
            _3147 = frontier_phi_63_64_ladder_3;
            _3149 = frontier_phi_63_64_ladder;
            _3151 = frontier_phi_63_64_ladder_2;
            _3153 = frontier_phi_63_64_ladder_1;
        }
        float _3158 = isnan(1.0) ? _894 : (isnan(_894) ? 1.0 : min(_894, 1.0));
        _2955 = (_3158 * _3149) + _2467;
        _2957 = (_3158 * _3151) + _2469;
        _2959 = (_3158 * _3153) + _2471;
        _2961 = ((_3143 * _878) * _3158) + _2805;
        _2963 = ((_3145 * _880) * _3158) + _2807;
        _2965 = ((_3147 * _881) * _3158) + _2809;
    }
    else
    {
        _2955 = _2467;
        _2957 = _2469;
        _2959 = _2471;
        _2961 = _2805;
        _2963 = _2807;
        _2965 = _2809;
    }
    float _4988 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4999 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _5010 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _2982 = ((isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0))) * (_2955 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _894))) + ((_2961 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1733)) * cbPerFrame._m0[3u].x);
    float _2983 = ((isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0))) * (_2957 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _894))) + ((_2963 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1733)) * cbPerFrame._m0[3u].x);
    float _2984 = ((isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0))) * (_2959 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _894))) + ((_2965 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1733)) * cbPerFrame._m0[3u].x);
    uint _2985 = _274 + 6u;
    float _2993 = _816 / cbSceneParam._m0[86u].x;
    float _2994 = _817 / cbSceneParam._m0[86u].y;
    vec4 _3008 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, (log2((isnan(cbSceneParam._m0[77u].w) ? _738 : (isnan(_738) ? cbSceneParam._m0[77u].w : min(_738, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3010 = _3008.x;
    float _3011 = _3008.y;
    float _3012 = _3008.z;
    float _3013 = _3008.w;
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    if (_738 > cbSceneParam._m0[78u].w)
    {
        float _3047 = isnan(_738) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _738 : min(cbSceneParam._m0[80u].w, _738));
        float _3048 = _3047 / _738;
        float _3059 = _3048 * _789;
        float _3060 = _790 * _3048;
        float _3061 = (-0.0) - _3060;
        float _3063 = _3048 * _791;
        float _3065 = (cbSceneParam._m0[77u].w * _3061) / _3047;
        float _3066 = _3065 + cbSceneParam._m0[79u].w;
        float _3067 = cbSceneParam._m0[79u].w - _3060;
        float _3073 = sqrt(((_3059 * _3059) + (_3060 * _3060)) + (_3063 * _3063));
        float _3076 = (1.0 - (cbSceneParam._m0[77u].w / _3047)) * _3073;
        float _3081 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3083 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3260;
        if (abs((_3061 - _3065) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3260 = ((((_3066 > 0.0) ? exp2(_3081 * _3066) : (2.0 - exp2(_3083 * _3066))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3076;
        }
        else
        {
            float _3204 = 1.0 / cbSceneParam._m0[80u].x;
            float _3205 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : max(_3066, _3067));
            float _3206 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : min(_3066, _3067));
            float _3215 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : min(_3205, 0.0));
            float _3216 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : min(_3206, 0.0));
            _3260 = ((abs(_3073 / _3061) * cbSceneParam._m0[80u].y) * ((((_3215 - _3216) * 2.0) - ((exp2(_3081 * (isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0)))) - exp2(_3081 * (isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0))))) * _3204)) - ((exp2(_3083 * _3215) - exp2(_3083 * _3216)) * _3204))) + (_3076 * cbSceneParam._m0[80u].z);
        }
        vec4 _3262 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, 1.0), 0.0);
        float _3271 = exp2((_3260 * (-1.44269502162933349609375)) * (1.0 - _3262.w));
        float _3272 = log2(_3271);
        float _3288 = log2(_3013);
        _3085 = (exp2(_3288 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].x)) * _3262.x) / cbSceneParam._m0[78u].x)) + _3010;
        _3087 = (exp2(_3288 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].y)) * _3262.y) / cbSceneParam._m0[78u].y)) + _3011;
        _3089 = (exp2(_3288 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].z)) * _3262.z) / cbSceneParam._m0[78u].z)) + _3012;
        _3091 = _3271 * _3013;
    }
    else
    {
        _3085 = _3010;
        _3087 = _3011;
        _3089 = _3012;
        _3091 = _3013;
    }
    bool _3298;
    vec4 _3101;
    vec4 _3123;
    float _3125;
    float _3129;
    float _3130;
    float _3131;
    float _3132;
    bool _3142;
    for (;;)
    {
        _3101 = cbMatDynParam._m0[0u];
        float _3103 = roundEven(_3101.y);
        bool _3104 = _3103 == 3.0;
        float _3105 = log2(_3091);
        float _3112 = exp2(_3105 * cbSceneParam._m0[78u].x) * _2982;
        float _3113 = exp2(_3105 * cbSceneParam._m0[78u].y) * _2983;
        float _3114 = exp2(_3105 * cbSceneParam._m0[78u].z) * _2984;
        float _3121 = _805 + (-0.5);
        _3123 = cbMtdParam._m0[1u];
        _3125 = _3123.y * _3121;
        float _3128 = (_3103 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3129 = _3128 * (_3104 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3085)));
        _3130 = _3128 * (_3104 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3087)));
        _3131 = _3128 * (_3104 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3089)));
        _3132 = _3121 * 0.999000012874603271484375;
        _3142 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3142)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _3132) < 0.5)
            {
                _3298 = true;
                break;
            }
        }
        uint _3239 = _854 + uint(_3101.w);
        if ((cbInstanceData._m0[_3239].w < 1.0) && ((cbInstanceData._m0[_3239].w + _3132) < 0.5))
        {
            _3298 = true;
            break;
        }
        if ((_3125 + 1.0) < _3123.x)
        {
            _3298 = true;
            break;
        }
        _3298 = false;
        break;
    }
    float _3502;
    if (_3298)
    {
        discard_state = true;
        _3502 = 0.0;
    }
    else
    {
        _3502 = cbInstanceData._m0[_2985].w;
    }
    SV_Target.x = _3129;
    SV_Target.y = _3130;
    SV_Target.z = _3131;
    SV_Target.w = _3502;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2985].w;
    discard_exit();
}


