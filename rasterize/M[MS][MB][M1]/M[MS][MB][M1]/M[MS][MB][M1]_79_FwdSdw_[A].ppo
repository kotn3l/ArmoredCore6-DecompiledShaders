#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1345;
float _4009;
float _4010;
float _4011;
float _4012;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4021 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _460 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _462 = _460.x;
    float _463 = _460.y;
    float _464 = _460.z;
    float _473 = ((_443.z - _464) * _396) + _464;
    float _476 = ((((_443.x - _462) * _396) + _462) * 2.0) + (-1.0);
    float _477 = ((((_443.y - _463) * _396) + _463) * 2.0) + (-1.0);
    float _478 = dot(vec2(_476, _477), vec2(_476, _477));
    float _4032 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _483 = sqrt(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _517 = (_476 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_418.x * 2.0) + (-1.0)))) + (((_505.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _518 = (_477 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_418.y * 2.0) + (-1.0)))) + (((_505.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _532 = _530.x;
    float _533 = 1.0 - _532;
    float _561 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_532 - _533) * cbMtdParam._m0[24u].w) + _533) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4043 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _570 = ((((cbMtdParam._m0[10u].x - _403) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _562) + _403;
    float _571 = ((((cbMtdParam._m0[10u].y - _404) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _562) + _404;
    float _572 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _405)) * _562) + _405;
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _598 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _600 = _598.x;
    float _618 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _600) * _396) + _600;
    float _622 = ((_584.x - _618) * cbMtdParam._m0[19u].z) + _618;
    float _624 = _622 - (_622 * _562);
    float _629 = (((_418.z - _473) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _473;
    float _633 = ((_505.z - _629) * cbMtdParam._m0[19u].w) + _629;
    float _637 = ((cbMtdParam._m0[23u].y - _633) * _562) + _633;
    vec4 _656 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _658 = _656.x;
    float _659 = _656.y;
    float _663 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_247, _248, _249, 0.0));
    vec4 _678 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _278) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _279) + cbTextureTilingScale._m0[18u].w));
    float _680 = _678.x;
    float _685 = fract(_678.w + cbPerFrame._m0[22u].x);
    float _687 = (1.0 - _685) * _680;
    float _692 = ((_685 + (-1.0)) + _680) * 9.0;
    float _694 = ((_680 + (-1.0)) + _685) * 9.0;
    float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _696 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _710 = (_687 * ((_678.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _695 : (isnan(_695) ? 3.0 : min(_695, 3.0))) * 3.1415927410125732421875);
    float _712 = (_687 * ((_678.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _696 : (isnan(_696) ? 3.0 : min(_696, 3.0))) * 3.1415927410125732421875);
    float _716 = inversesqrt(dot(vec3(_710, _712, 1.0), vec3(_710, _712, 1.0)));
    float _732 = (((((0.5 - _658) + ((_710 * 0.5) * _716)) * _663) + _658) * 2.0) + (-1.0);
    float _733 = (((((0.5 - _659) + ((_716 * 0.5) * _712)) * _663) + _659) * 2.0) + (-1.0);
    float _734 = dot(vec2(_732, _733), vec2(_732, _733));
    float _4074 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _750 = ((((cbMtdParam._m0[22u].z * _517) - _517) + _732) * _562) + _517;
    float _751 = ((((cbMtdParam._m0[22u].z * _518) - _518) + _733) * _562) + _518;
    float _752 = (_562 * (sqrt(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) - _483)) + _483;
    float _754 = cbMtdParam._m0[22u].x + _505.w;
    float _757 = fma(_752, _247, fma(_751, _253 * TANGENT.x, (_239 * _231) * _750));
    float _760 = fma(_752, _248, fma(_751, _253 * TANGENT.y, (_239 * _232) * _750));
    float _763 = fma(_752, _249, fma(_751, _253 * TANGENT.z, (_239 * _233) * _750));
    float _767 = inversesqrt(dot(vec3(_757, _760, _763), vec3(_757, _760, _763)));
    float _768 = _767 * _757;
    float _769 = _767 * _760;
    float _770 = _767 * _763;
    float _4085 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _771 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4107 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4118 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4129 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4140 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _776 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _790 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _840 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _830);
    float _841 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _830);
    float _842 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _830);
    float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
    float _847 = _840 * _846;
    float _848 = _841 * _846;
    float _849 = _842 * _846;
    vec4 _854 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _856 = _854.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1027 = sqrt(((_840 * _840) + (_841 * _841)) + (_842 * _842));
        float _1033 = (cbMatDynParam._m0[5u].x * _1027) + cbMatDynParam._m0[5u].y;
        float _4151 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1038 = (cbMatDynParam._m0[5u].z * _1027) + cbMatDynParam._m0[5u].w;
        float _4162 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) - _1034)) + _1034) < ((_856 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _867 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _868 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _886 = fma(_770, cbSceneParam._m0[5u].z, fma(_769, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _768));
    float _889 = fma(_770, cbSceneParam._m0[6u].z, fma(_769, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _768));
    float _892 = fma(_770, cbSceneParam._m0[7u].z, fma(_769, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _768));
    uint _905 = _259 + 9u;
    uint _906 = _905 + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_906].z;
    float _4173 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _918 = 1.0 - _776;
    float _919 = _915 * _918;
    float _920 = _916 * _918;
    float _921 = _917 * _918;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _776;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _776;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _776;
    float _929 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    float _932 = _928 + 0.039999999105930328369140625;
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _867, cbSceneParam._m0[86u].y * _868));
    float _945 = ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * TEXCOORD_5.w) * _941.x;
    float _946 = dot(vec3(_768, _769, _770), vec3(_847, _848, _849));
    float _949 = _946 * 2.0;
    float _953 = (_949 * _768) - _847;
    float _954 = (_949 * _769) - _848;
    float _955 = (_949 * _770) - _849;
    float _959 = abs(dot(vec3(_847, _848, _849), vec3(_768, _769, _770)));
    float _4206 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _961 = sqrt(_771);
    float _973 = exp2((_961 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_961 * 3.0));
    float _979 = (1.0 - _973) * ((_961 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _980 = _973 * _961;
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1344;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1070 = fma(_1016, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008));
        float _1074 = fma(_1016, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008));
        float _1078 = fma(_1016, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008));
        float _1102 = _1008 + _768;
        float _1103 = _1012 + _769;
        float _1104 = _1016 + _770;
        float _1114 = fma(_1104, cbModelParam._m0[26u].z, fma(_1103, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1102)) - _1070;
        float _1115 = fma(_1104, cbModelParam._m0[27u].z, fma(_1103, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1102)) - _1074;
        float _1116 = fma(_1104, cbModelParam._m0[28u].z, fma(_1103, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1102)) - _1078;
        float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
        float _1133 = ((_1120 * _1114) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1070 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1120 * _1115) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1074 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1120 * _1116) / cbModelParam._m0[34u].z) + ((((((_1078 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        float _1172 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1138.x + (-0.5));
        float _1174 = _1172 * (_1138.y + (-0.5));
        float _1175 = _1172 * (_1138.z + (-0.5));
        float _1182 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1145.x + (-0.5));
        float _1184 = _1182 * (_1145.y + (-0.5));
        float _1185 = _1182 * (_1145.z + (-0.5));
        float _1192 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1152.x + (-0.5));
        float _1194 = _1192 * (_1152.y + (-0.5));
        float _1195 = _1192 * (_1152.z + (-0.5));
        float _1202 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1159.x + (-0.5));
        float _1204 = _1202 * (_1159.y + (-0.5));
        float _1205 = _1202 * (_1159.z + (-0.5));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = _1173 * 0.5;
        float _1210 = _1183 * 0.5;
        float _1211 = _1193 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1226 = (dot(vec3(_768, _769, _770), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1236 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _4254 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1238 + 1.0))) + _1243) * _1206;
        float _1253 = _1174 * 0.5;
        float _1254 = _1184 * 0.5;
        float _1255 = _1194 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_768, _769, _770), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1280 + 1.0))) + _1285) * _1207;
        float _1295 = _1175 * 0.5;
        float _1296 = _1185 * 0.5;
        float _1297 = _1195 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_768, _769, _770), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4320 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1322 + 1.0))) + _1327) * _1208;
        _1344 = _1175;
        _1346 = _1174;
        _1347 = _1173;
        _1348 = _1185;
        _1349 = _1184;
        _1350 = _1183;
        _1351 = _1195;
        _1352 = _1194;
        _1353 = _1193;
        _1354 = _1208;
        _1355 = _1207;
        _1356 = _1206;
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
    }
    else
    {
        _1344 = _1345;
        _1346 = _1345;
        _1347 = _1345;
        _1348 = _1345;
        _1349 = _1345;
        _1350 = _1345;
        _1351 = _1345;
        _1352 = _1345;
        _1353 = _1345;
        _1354 = _1345;
        _1355 = _1345;
        _1356 = _1345;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1387 = fma(_1016, cbModelParam._m0[30u].z, fma(_1012, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008));
        float _1391 = fma(_1016, cbModelParam._m0[31u].z, fma(_1012, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008));
        float _1395 = fma(_1016, cbModelParam._m0[32u].z, fma(_1012, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008));
        float _1418 = _1008 + _768;
        float _1419 = _1012 + _769;
        float _1420 = _1016 + _770;
        float _1430 = fma(_1420, cbModelParam._m0[30u].z, fma(_1419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1418)) - _1387;
        float _1431 = fma(_1420, cbModelParam._m0[31u].z, fma(_1419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1418)) - _1391;
        float _1432 = fma(_1420, cbModelParam._m0[32u].z, fma(_1419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1418)) - _1395;
        float _1436 = inversesqrt(dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432)));
        float _1449 = ((_1436 * _1430) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1387 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1436 * _1431) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1391 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1436 * _1432) / cbModelParam._m0[35u].z) + ((((((_1395 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        float _1486 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1453.x + (-0.5));
        float _1488 = _1486 * (_1453.y + (-0.5));
        float _1489 = _1486 * (_1453.z + (-0.5));
        float _1496 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1460.x + (-0.5));
        float _1498 = _1496 * (_1460.y + (-0.5));
        float _1499 = _1496 * (_1460.z + (-0.5));
        float _1506 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1467.x + (-0.5));
        float _1508 = _1506 * (_1467.y + (-0.5));
        float _1509 = _1506 * (_1467.z + (-0.5));
        float _1516 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1474.x + (-0.5));
        float _1518 = _1516 * (_1474.y + (-0.5));
        float _1519 = _1516 * (_1474.z + (-0.5));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = _1487 * 0.5;
        float _1524 = _1497 * 0.5;
        float _1525 = _1507 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_768, _769, _770), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4383 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1550 + 1.0))) + _1555) * _1520;
        float _1565 = _1488 * 0.5;
        float _1566 = _1498 * 0.5;
        float _1567 = _1508 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_768, _769, _770), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4416 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1592 + 1.0))) + _1597) * _1521;
        float _1607 = _1489 * 0.5;
        float _1608 = _1499 * 0.5;
        float _1609 = _1509 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_768, _769, _770), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4449 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1634 + 1.0))) + _1639) * _1522;
        _1656 = _1489;
        _1657 = _1488;
        _1658 = _1487;
        _1659 = _1499;
        _1660 = _1498;
        _1661 = _1497;
        _1662 = _1509;
        _1663 = _1508;
        _1664 = _1507;
        _1665 = _1522;
        _1666 = _1521;
        _1667 = _1520;
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
    }
    else
    {
        _1656 = _1345;
        _1657 = _1345;
        _1658 = _1345;
        _1659 = _1345;
        _1660 = _1345;
        _1661 = _1345;
        _1662 = _1345;
        _1663 = _1345;
        _1664 = _1345;
        _1665 = _1345;
        _1666 = _1345;
        _1667 = _1345;
        _1668 = 0.0;
        _1669 = 0.0;
        _1670 = 0.0;
    }
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1357)) + _1357;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1358)) + _1358;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1359)) + _1359;
    float _1703 = fma(_1682, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1682, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1682, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1680));
    float _1724 = _953 * 0.5;
    float _1725 = _954 * 0.5;
    float _1726 = _955 * 0.5;
    float _1727 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1730 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1733 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1767;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1740 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1344, _1348, _1351, _1354));
        float _1744 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1346, _1349, _1352, _1355));
        float _1748 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1347, _1350, _1353, _1356));
        float _1755 = dot(vec4(cbModelParam._m0[39u]), vec4(_1724, _1725, _1726, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1778;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1769 = dot(vec4(cbModelParam._m0[40u]), vec4(_1724, _1725, _1726, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1782 = (_1778 * cbModelParam._m0[1u].x) + (_1767 * (1.0 - cbModelParam._m0[1u].x));
    float _1792 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _771);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1792 : min(cbModelParam._m0[25u].z, _1792));
    float _1875;
    float _1877;
    float _1879;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1842 = fma(_1016, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008)) + cbModelParam._m0[13u].w;
        float _1846 = fma(_1016, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008)) + cbModelParam._m0[14u].w;
        float _1850 = fma(_1016, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008)) + cbModelParam._m0[15u].w;
        float _1853 = fma(_955, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953));
        float _1856 = fma(_955, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953));
        float _1859 = fma(_955, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953));
        float _1887;
        if (_1853 > 0.0)
        {
            _1887 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1887 = frontier_phi_17_15_ladder;
        }
        float _2059;
        if (_1856 > 0.0)
        {
            _2059 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2059 = frontier_phi_26_22_ladder;
        }
        float _2354;
        if (_1859 > 0.0)
        {
            _2354 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2354 = frontier_phi_38_33_ladder;
        }
        float _2356 = isnan(_2059) ? _1887 : (isnan(_1887) ? _2059 : min(_1887, _2059));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1853) + _1842;
        float _2362 = (_2357 * _1856) + _1846;
        float _2363 = (_2357 * _1859) + _1850;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2366 = (-1.0) - _2364;
        float _2368 = _2364 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2363 > _2368) || ((_2363 < _2366) || ((_2362 > _2368) || ((_2362 < _2366) || ((_2361 < _2366) || (_2361 > _2368))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2363, cbModelParam._m0[9u].z, fma(_2362, cbModelParam._m0[9u].y, _2361 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2363, cbModelParam._m0[10u].z, fma(_2362, cbModelParam._m0[10u].y, _2361 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2363, cbModelParam._m0[11u].z, fma(_2362, cbModelParam._m0[11u].y, _2361 * cbModelParam._m0[11u].x))), _1793);
            frontier_phi_16_38_ladder = _2508.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2508.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2508.x * cbModelParam._m0[1u].y;
        }
        _1875 = frontier_phi_16_38_ladder_2;
        _1877 = frontier_phi_16_38_ladder_1;
        _1879 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1863 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_953, _954, _955), _1793);
        _1875 = _1863.x * cbModelParam._m0[1u].y;
        _1877 = _1863.y * cbModelParam._m0[1u].y;
        _1879 = _1863.z * cbModelParam._m0[1u].y;
    }
    float _1883 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _771);
    float _1884 = isnan(_1883) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1883 : min(cbModelParam._m0[25u].w, _1883));
    float _1974;
    float _1976;
    float _1978;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1938 = fma(_1016, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008)) + cbModelParam._m0[21u].w;
        float _1942 = fma(_1016, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008)) + cbModelParam._m0[22u].w;
        float _1946 = fma(_1016, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008)) + cbModelParam._m0[23u].w;
        float _1949 = fma(_955, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953));
        float _1952 = fma(_955, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953));
        float _1955 = fma(_955, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953));
        float _2064;
        if (_1949 > 0.0)
        {
            _2064 = abs((1.0 - _1938) / _1949);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1938 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2064 = frontier_phi_28_24_ladder;
        }
        float _2381;
        if (_1952 > 0.0)
        {
            _2381 = abs((1.0 - _1942) / _1952);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1942 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2381 = frontier_phi_40_35_ladder;
        }
        float _2719;
        if (_1955 > 0.0)
        {
            _2719 = abs((1.0 - _1946) / _1955);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1946 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2719 = frontier_phi_50_47_ladder;
        }
        float _2721 = isnan(_2381) ? _2064 : (isnan(_2064) ? _2381 : min(_2064, _2381));
        float _2722 = isnan(_2719) ? _2721 : (isnan(_2721) ? _2719 : min(_2721, _2719));
        float _2726 = (_2722 * _1949) + _1938;
        float _2727 = (_2722 * _1952) + _1942;
        float _2728 = (_2722 * _1955) + _1946;
        float _2729 = _2722 * 9.9999997473787516355514526367188e-05;
        float _2730 = (-1.0) - _2729;
        float _2732 = _2729 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2728 > _2732) || ((_2728 < _2730) || ((_2727 > _2732) || ((_2727 < _2730) || ((_2726 < _2730) || (_2726 > _2732))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2728, cbModelParam._m0[17u].z, fma(_2727, cbModelParam._m0[17u].y, _2726 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2728, cbModelParam._m0[18u].z, fma(_2727, cbModelParam._m0[18u].y, _2726 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2728, cbModelParam._m0[19u].z, fma(_2727, cbModelParam._m0[19u].y, _2726 * cbModelParam._m0[19u].x))), _1884);
            frontier_phi_25_50_ladder = _2850.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2850.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2850.x * cbModelParam._m0[1u].z;
        }
        _1974 = frontier_phi_25_50_ladder_2;
        _1976 = frontier_phi_25_50_ladder_1;
        _1978 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1958 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_953, _954, _955), _1884);
        _1974 = _1958.x * cbModelParam._m0[1u].z;
        _1976 = _1958.y * cbModelParam._m0[1u].z;
        _1978 = _1958.z * cbModelParam._m0[1u].z;
    }
    float _1991 = (((_979 * _929) + _980) * _945) * ((cbModelParam._m0[1u].w * (_1974 - _1875)) + _1875);
    float _1993 = (((_979 * _931) + _980) * _945) * ((cbModelParam._m0[1u].w * (_1976 - _1877)) + _1877);
    float _1995 = (((_979 * _932) + _980) * _945) * ((cbModelParam._m0[1u].w * (_1978 - _1879)) + _1879);
    float _1998 = fma(_1995, cbSceneParam._m0[89u].z, fma(_1993, cbSceneParam._m0[89u].y, _1991 * cbSceneParam._m0[89u].x));
    float _2001 = fma(_1995, cbSceneParam._m0[90u].z, fma(_1993, cbSceneParam._m0[90u].y, _1991 * cbSceneParam._m0[90u].x));
    float _2004 = fma(_1995, cbSceneParam._m0[91u].z, fma(_1993, cbSceneParam._m0[91u].y, _1991 * cbSceneParam._m0[91u].x));
    float _2038 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2042 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2046 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2050 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2051 = _2038 / _2050;
    float _2052 = _2042 / _2050;
    float _2053 = _2046 / _2050;
    float _2200;
    float _2201;
    float _2202;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2080 = ((uint(_2053 > cbSceneParam._m0[59u].y) + uint(_2053 > cbSceneParam._m0[59u].x)) + uint(_2053 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2081 = _2080 + 43u;
        uint _2089 = _2080 + 44u;
        uint _2097 = _2080 + 45u;
        uint _2105 = _2080 + 46u;
        float _2116 = fma(_2050, cbSceneParam._m0[_2081].w, fma(_2046, cbSceneParam._m0[_2081].z, fma(_2042, cbSceneParam._m0[_2081].y, _2038 * cbSceneParam._m0[_2081].x)));
        float _2120 = fma(_2050, cbSceneParam._m0[_2089].w, fma(_2046, cbSceneParam._m0[_2089].z, fma(_2042, cbSceneParam._m0[_2089].y, _2038 * cbSceneParam._m0[_2089].x)));
        float _2128 = fma(_2050, cbSceneParam._m0[_2105].w, fma(_2046, cbSceneParam._m0[_2105].z, fma(_2042, cbSceneParam._m0[_2105].y, _2038 * cbSceneParam._m0[_2105].x)));
        float _2133 = cbSceneParam._m0[33u].z * _2128;
        float _2135 = cbSceneParam._m0[33u].w * _2128;
        float _2138 = fma(_2050, cbSceneParam._m0[_2097].w, fma(_2046, cbSceneParam._m0[_2097].z, fma(_2042, cbSceneParam._m0[_2097].y, _2038 * cbSceneParam._m0[_2097].x))) / _2128;
        float _2186 = (cbSceneParam._m0[33u].x - sqrt(((_2052 * _2052) + (_2051 * _2051)) + (_2053 * _2053))) * cbSceneParam._m0[33u].y;
        float _4575 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2193 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2133 + _2116) / _2128, (_2135 + _2120) / _2128), _2138), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2135 + _2116) / _2128, (_2120 - _2133) / _2128), _2138), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2116 - _2133) / _2128, (_2120 - _2135) / _2128), _2138), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2116 - _2135) / _2128, (_2133 + _2120) / _2128), _2138), 0.0)).x), vec4(0.25)));
        _2200 = 1.0 - (_2193 * cbSceneParam._m0[34u].x);
        _2201 = 1.0 - (_2193 * cbSceneParam._m0[34u].y);
        _2202 = 1.0 - (_2193 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2200 = 1.0;
        _2201 = 1.0;
        _2202 = 1.0;
    }
    float _2266;
    float _2268;
    float _2270;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2254 = fma(_2050, cbSceneParam._m0[63u].w, fma(_2046, cbSceneParam._m0[63u].z, fma(_2042, cbSceneParam._m0[63u].y, _2038 * cbSceneParam._m0[63u].x)));
        float _2255 = fma(_2050, cbSceneParam._m0[60u].w, fma(_2046, cbSceneParam._m0[60u].z, fma(_2042, cbSceneParam._m0[60u].y, _2038 * cbSceneParam._m0[60u].x))) / _2254;
        float _2256 = fma(_2050, cbSceneParam._m0[61u].w, fma(_2046, cbSceneParam._m0[61u].z, fma(_2042, cbSceneParam._m0[61u].y, _2038 * cbSceneParam._m0[61u].x))) / _2254;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2255 >= cbSceneParam._m0[64u].x) && (_2256 >= cbSceneParam._m0[64u].y)) && (_2255 <= cbSceneParam._m0[64u].z)) && (_2256 <= cbSceneParam._m0[64u].w))
        {
            float _2394 = fma(_2050, cbSceneParam._m0[62u].w, fma(_2046, cbSceneParam._m0[62u].z, fma(_2042, cbSceneParam._m0[62u].y, _2038 * cbSceneParam._m0[62u].x))) / _2254;
            float _2398 = isnan(cbSceneParam._m0[41u].w) ? _2394 : (isnan(_2394) ? cbSceneParam._m0[41u].w : max(_2394, cbSceneParam._m0[41u].w));
            float _2441 = (cbSceneParam._m0[33u].x - sqrt(((_2052 * _2052) + (_2051 * _2051)) + (_2053 * _2053))) * cbSceneParam._m0[33u].y;
            float _4591 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
            float _2448 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2255, cbSceneParam._m0[33u].w + _2256), _2398), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2255, _2256 - cbSceneParam._m0[33u].z), _2398), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2255 - cbSceneParam._m0[33u].z, _2256 - cbSceneParam._m0[33u].w), _2398), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2255 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2256), _2398), 0.0)).x), vec4(0.25)));
            float _2452 = 1.0 - (_2448 * cbSceneParam._m0[34u].x);
            float _2453 = 1.0 - (_2448 * cbSceneParam._m0[34u].y);
            float _2454 = 1.0 - (_2448 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2454) ? _2202 : (isnan(_2202) ? _2454 : min(_2202, _2454));
            frontier_phi_37_36_ladder_1 = isnan(_2453) ? _2201 : (isnan(_2201) ? _2453 : min(_2201, _2453));
            frontier_phi_37_36_ladder_2 = isnan(_2452) ? _2200 : (isnan(_2200) ? _2452 : min(_2200, _2452));
        }
        else
        {
            frontier_phi_37_36_ladder = _2202;
            frontier_phi_37_36_ladder_1 = _2201;
            frontier_phi_37_36_ladder_2 = _2200;
        }
        _2266 = frontier_phi_37_36_ladder_2;
        _2268 = frontier_phi_37_36_ladder_1;
        _2270 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2266 = _2200;
        _2268 = _2201;
        _2270 = _2202;
    }
    uvec4 _2275 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2277 = _2275.x * 14u;
    uint _2278 = _2277 + 13u;
    float _2285 = _945 + (-1.0);
    float _2290 = (cbLight._m0[_2278].x * _2285) + 1.0;
    float _2291 = (cbLight._m0[_2278].y * _2285) + 1.0;
    float _2292 = (cbLight._m0[_2278].z * _2285) + 1.0;
    float _2293 = (cbLight._m0[_2278].w * _2285) + 1.0;
    uint _2294 = _2277 + 5u;
    float _2300 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
    uint _2304 = _2277 + 4u;
    float _2313 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
    uint _2317 = _2277 | 1u;
    float _2328 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_768, _769, _770));
    float _2331 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_768, _769, _770));
    float _4627 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _4638 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2336 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * 0.3183098733425140380859375;
    float _2338 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * 0.3183098733425140380859375;
    float _2345 = ((cbLight._m0[_2294].x * _2300) * _2338) + (((cbLight._m0[_2304].x * _2266) * _2313) * _2336);
    float _2346 = ((_2300 * cbLight._m0[_2294].y) * _2338) + (((cbLight._m0[_2304].y * _2268) * _2313) * _2336);
    float _2347 = ((_2300 * cbLight._m0[_2294].z) * _2338) + (((cbLight._m0[_2304].z * _2270) * _2313) * _2336);
    uvec4 _2351 = floatBitsToUint(cbLight._m0[_2277 + 12u]);
    bool _2353 = _2351.x == 0u;
    float _2455;
    float _2457;
    float _2459;
    if (_2353)
    {
        _2455 = _2345;
        _2457 = _2346;
        _2459 = _2347;
    }
    else
    {
        uint _2463 = _2277 + 6u;
        float _2479 = (dot(vec3(cbLight._m0[_2277 + 2u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2480 = _2479 * _2479;
        float _4649 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2481 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2482 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2455 = (((cbLight._m0[_2463].x * 0.3183098733425140380859375) * _2481) * _2482) + _2345;
        _2457 = (((cbLight._m0[_2463].y * 0.3183098733425140380859375) * _2481) * _2482) + _2346;
        _2459 = (((cbLight._m0[_2463].z * 0.3183098733425140380859375) * _2481) * _2482) + _2347;
    }
    bool _2462 = _2351.y == 0u;
    float _2517;
    float _2519;
    float _2521;
    if (_2462)
    {
        _2517 = _2455;
        _2519 = _2457;
        _2521 = _2459;
    }
    else
    {
        uint _2690 = _2277 + 7u;
        float _2706 = (dot(vec3(cbLight._m0[_2277 + 3u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2707 = _2706 * _2706;
        float _4665 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2708 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2709 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
        _2517 = (((cbLight._m0[_2690].x * 0.3183098733425140380859375) * _2708) * _2709) + _2455;
        _2519 = (((cbLight._m0[_2690].y * 0.3183098733425140380859375) * _2708) * _2709) + _2457;
        _2521 = (((cbLight._m0[_2690].z * 0.3183098733425140380859375) * _2708) * _2709) + _2459;
    }
    uint _2524 = _2277 + 8u;
    float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _771) * 0.949999988079071044921875);
    float _2538 = _2537 * _2537;
    float _2539 = cbLight._m0[_2277].x + _847;
    float _2540 = cbLight._m0[_2277].y + _848;
    float _2541 = cbLight._m0[_2277].z + _849;
    float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
    float _2546 = _2545 * _2539;
    float _2547 = _2545 * _2540;
    float _2548 = _2545 * _2541;
    float _2549 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2277].xyz));
    float _4681 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2552 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _4692 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _2553 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2554 = dot(vec3(_768, _769, _770), vec3(_2546, _2547, _2548));
    float _4703 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _2558 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2546, _2547, _2548));
    float _4714 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2562 = _2538 * _2538;
    float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
    float _2574 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
    float _2575 = 0.959999978542327880859375 - _926;
    float _2577 = 0.959999978542327880859375 - _927;
    float _2578 = 0.959999978542327880859375 - _928;
    float _2585 = 1.0 - _2538;
    float _2596 = (0.5 / (((_2553 * ((_2552 * _2585) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2553 * _2585) + _2538) * _2552))) * _2552;
    float _4725 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2598 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
    uint _2612 = _2277 + 9u;
    float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _771) * 0.949999988079071044921875);
    float _2624 = _2623 * _2623;
    float _2625 = cbLight._m0[_2317].x + _847;
    float _2626 = cbLight._m0[_2317].y + _848;
    float _2627 = cbLight._m0[_2317].z + _849;
    float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
    float _2632 = _2631 * _2625;
    float _2633 = _2631 * _2626;
    float _2634 = _2631 * _2627;
    float _2635 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2317].xyz));
    float _4736 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2638 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2639 = dot(vec3(_768, _769, _770), vec3(_2632, _2633, _2634));
    float _4747 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2643 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2632, _2633, _2634));
    float _4758 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2647 = _2624 * _2624;
    float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
    float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0);
    float _2665 = 1.0 - _2624;
    float _2675 = (0.5 / (((_2553 * ((_2638 * _2665) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2553 * _2665) + _2624) * _2638))) * _2638;
    float _4769 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2677 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
    float _2687 = (((((_2658 * _2575) + _929) * cbLight._m0[_2612].x) * _2677) * _2300) + ((((cbLight._m0[_2524].x * _2266) * ((_2574 * _2575) + _929)) * _2598) * _2313);
    float _2688 = (((((_2658 * _2577) + _931) * cbLight._m0[_2612].y) * _2677) * _2300) + ((((cbLight._m0[_2524].y * _2268) * ((_2574 * _2577) + _931)) * _2598) * _2313);
    float _2689 = (((((_2658 * _2578) + _932) * cbLight._m0[_2612].z) * _2677) * _2300) + ((((cbLight._m0[_2524].z * _2270) * ((_2574 * _2578) + _932)) * _2598) * _2313);
    float _2745;
    float _2747;
    float _2749;
    if (_2353)
    {
        _2745 = _2687;
        _2747 = _2688;
        _2749 = _2689;
    }
    else
    {
        uint _2751 = _2277 + 2u;
        uint _2755 = _2277 + 10u;
        float _2769 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2751].w)) * _771) * 0.949999988079071044921875);
        float _2770 = _2769 * _2769;
        float _2771 = cbLight._m0[_2751].x + _847;
        float _2772 = cbLight._m0[_2751].y + _848;
        float _2773 = cbLight._m0[_2751].z + _849;
        float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
        float _2778 = _2777 * _2771;
        float _2779 = _2777 * _2772;
        float _2780 = _2777 * _2773;
        float _2781 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2751].xyz));
        float _4780 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2784 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2785 = dot(vec3(_768, _769, _770), vec3(_2778, _2779, _2780));
        float _4791 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2789 = dot(vec3(cbLight._m0[_2751].xyz), vec3(_2778, _2779, _2780));
        float _4802 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2793 = _2770 * _2770;
        float _2797 = ((_2788 * _2788) * (_2793 + (-1.0))) + 1.0;
        float _2804 = exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0);
        float _2811 = 1.0 - _2770;
        float _2821 = (0.5 / (((_2553 * ((_2784 * _2811) + _2770)) + 9.9999999392252902907785028219223e-09) + (((_2553 * _2811) + _2770) * _2784))) * _2784;
        float _4813 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2823 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2793 / ((_2797 * _2797) * 3.141590118408203125));
        float _2824 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2745 = (((((_2804 * _2575) + _929) * cbLight._m0[_2755].x) * _2823) * _2824) + _2687;
        _2747 = (((((_2804 * _2577) + _931) * cbLight._m0[_2755].y) * _2823) * _2824) + _2688;
        _2749 = (((((_2804 * _2578) + _932) * cbLight._m0[_2755].z) * _2823) * _2824) + _2689;
    }
    float _2855;
    float _2857;
    float _2859;
    if (_2462)
    {
        _2855 = _2745;
        _2857 = _2747;
        _2859 = _2749;
    }
    else
    {
        uint _2866 = _2277 + 3u;
        uint _2870 = _2277 + 11u;
        float _2884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2866].w)) * _771) * 0.949999988079071044921875);
        float _2885 = _2884 * _2884;
        float _2886 = cbLight._m0[_2866].x + _847;
        float _2887 = cbLight._m0[_2866].y + _848;
        float _2888 = cbLight._m0[_2866].z + _849;
        float _2892 = inversesqrt(dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888)));
        float _2893 = _2892 * _2886;
        float _2894 = _2892 * _2887;
        float _2895 = _2892 * _2888;
        float _2896 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2866].xyz));
        float _4829 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2899 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2900 = dot(vec3(_768, _769, _770), vec3(_2893, _2894, _2895));
        float _4840 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2903 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2904 = dot(vec3(cbLight._m0[_2866].xyz), vec3(_2893, _2894, _2895));
        float _4851 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2908 = _2885 * _2885;
        float _2912 = ((_2903 * _2903) * (_2908 + (-1.0))) + 1.0;
        float _2919 = exp2(log2(1.0 - (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) * 5.0);
        float _2926 = 1.0 - _2885;
        float _2936 = (0.5 / (((_2553 * ((_2899 * _2926) + _2885)) + 9.9999999392252902907785028219223e-09) + (((_2553 * _2926) + _2885) * _2899))) * _2899;
        float _4862 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2938 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2908 / ((_2912 * _2912) * 3.141590118408203125));
        float _2939 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
        _2855 = (((((_2919 * _2575) + _929) * cbLight._m0[_2870].x) * _2938) * _2939) + _2745;
        _2857 = (((((_2919 * _2577) + _931) * cbLight._m0[_2870].y) * _2938) * _2939) + _2747;
        _2859 = (((((_2919 * _2578) + _932) * cbLight._m0[_2870].z) * _2938) * _2939) + _2749;
    }
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    float _3015;
    if (_2275.y == 0u)
    {
        uvec4 _2960 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2961 = _2960.x;
        uint _2972 = uint((float(_2960.y) * floor(float(uint(cbSceneParam._m0[85u].y * _868) / _2961))) + floor(float(uint(cbSceneParam._m0[85u].x * _867) / _2961)));
        float _2982 = (log2(_2053 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2983 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        uint _2986 = uint(isnan(14.0) ? _2983 : (isnan(_2983) ? 14.0 : min(_2983, 14.0)));
        uvec4 _2991 = texelFetch(g_lightClusterGridBuffer, int(((_2986 << 2u) + (_2972 << 6u)) >> 2u));
        uint _2992 = _2991.x;
        uint _2993 = _2960.z;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        if (((((1u << ((_2993 >> 4u) & 15u)) + 4294967295u) & _2992) == 0u) || ((_2993 & 240u) == 0u))
        {
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
        }
        else
        {
            float _3073;
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3083;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            uint _3231 = 0u;
            uint _3240;
            bool _3241;
            for (;;)
            {
                _3240 = texelFetch(g_lightClassification, int((((_2986 << 5u) + (_2972 << 9u)) + (_3231 << 2u)) >> 2u)).x;
                _3241 = _3240 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3241)
                {
                    frontier_phi_71_pred = _3230;
                    frontier_phi_71_pred_1 = _3229;
                    frontier_phi_71_pred_2 = _3228;
                    frontier_phi_71_pred_3 = _3227;
                    frontier_phi_71_pred_4 = _3226;
                    frontier_phi_71_pred_5 = _3225;
                }
                else
                {
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    uint _3376;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3240;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    for (;;)
                    {
                        uint _3380 = uint(findLSB(_3376)) + (_3231 << 5u);
                        uint _3377 = (_3376 + 4294967295u) & _3376;
                        uint _3382 = _3380 * 48u;
                        vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 3u)).x));
                        uint _3402 = (_3380 * 48u) + 4u;
                        vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3402)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 3u)).x));
                        uint _3421 = (_3380 * 48u) + 8u;
                        vec3 _3432 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x));
                        float _3436 = _3396.x - _2051;
                        float _3437 = _3396.y - _2052;
                        float _3438 = _3396.z - _2053;
                        float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                        float _3442 = inversesqrt(_3439);
                        float _3443 = _3442 * _3436;
                        float _3444 = _3442 * _3437;
                        float _3445 = _3442 * _3438;
                        float _3446 = dot(vec3(_886, _889, _892), vec3(_3443, _3444, _3445));
                        float _3451 = 1.0 - (_3439 * _3396.w);
                        float _4888 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3452 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3453 = sqrt(_3439) * _3415.w;
                        float _3456 = 1.39999997615814208984375 / (_3453 + 1.39999997615814208984375);
                        float _3457 = _3456 * _3456;
                        float _3460 = ((1.0 - _3457) * _3446) + _3457;
                        float _3463 = _3453 * _3453;
                        float _3467 = ((isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * _3452) / ((_3463 * 0.699999988079071044921875) + 1.0);
                        float _3471 = (-0.0) - _2051;
                        float _3472 = (-0.0) - _2052;
                        float _3473 = (-0.0) - _2053;
                        float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                        float _3478 = _3477 * _3471;
                        float _3479 = _3477 * _3472;
                        float _3480 = _3477 * _3473;
                        float _3487 = exp2(log2(1.0 / ((_3463 * 3.5) + 5.0)) * 0.25);
                        float _3488 = 1.0 - _961;
                        float _3495 = sqrt(1.0 - ((1.0 - (_3488 * _3488)) * (1.0 - (_3487 * _3487))));
                        float _3496 = _3495 * _3495;
                        float _3497 = _3496 * _3496;
                        float _3498 = _3478 + _3443;
                        float _3499 = _3479 + _3444;
                        float _3500 = _3480 + _3445;
                        float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                        float _3508 = dot(vec3(_886, _889, _892), vec3(_3478, _3479, _3480));
                        float _4904 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3511 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3512 = dot(vec3(_886, _889, _892), vec3(_3504 * _3498, _3504 * _3499, _3504 * _3500));
                        float _4915 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3515 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                        float _3519 = ((_3515 * _3515) * (_3497 + (-1.0))) + 1.0;
                        float _3520 = _3456 * _3496;
                        float _3521 = _3520 * _3520;
                        float _3524 = ((1.0 - _3521) * _3446) + _3521;
                        float _4926 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                        float _3525 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3526 = 1.0 - _3496;
                        float _3536 = (0.5 / (((_3525 * ((_3511 * _3526) + _3496)) + 9.9999999392252902907785028219223e-09) + (((_3525 * _3526) + _3496) * _3511))) * _3525;
                        float _4937 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3546 = (((_3497 * 3.1415927410125732421875) * (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) / ((_3519 * _3519) * ((_3463 * 2.1991131305694580078125) + 3.141590118408203125))) * _3452;
                        _3300 = (_3467 * _3415.x) + _3373;
                        _3301 = (_3467 * _3415.y) + _3374;
                        _3302 = (_3467 * _3415.z) + _3375;
                        _3297 = (_3546 * _3432.x) + _3370;
                        _3298 = (_3546 * _3432.y) + _3371;
                        _3299 = (_3546 * _3432.z) + _3372;
                        if (_3377 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3377;
                        }
                    }
                    frontier_phi_71_pred = _3302;
                    frontier_phi_71_pred_1 = _3301;
                    frontier_phi_71_pred_2 = _3300;
                    frontier_phi_71_pred_3 = _3299;
                    frontier_phi_71_pred_4 = _3298;
                    frontier_phi_71_pred_5 = _3297;
                }
                _3083 = frontier_phi_71_pred;
                _3081 = frontier_phi_71_pred_1;
                _3079 = frontier_phi_71_pred_2;
                _3077 = frontier_phi_71_pred_3;
                _3075 = frontier_phi_71_pred_4;
                _3073 = frontier_phi_71_pred_5;
                uint _3232 = _3231 + 1u;
                if (_3232 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3225 = _3073;
                    _3226 = _3075;
                    _3227 = _3077;
                    _3228 = _3079;
                    _3229 = _3081;
                    _3230 = _3083;
                    _3231 = _3232;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
        }
        uvec4 _3086 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3087 = _3086.z;
        uint _3089 = (_3087 >> 8u) & 15u;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        if (((4294967295u << _3089) & _2992) == 0u)
        {
            _3193 = _3072;
            _3195 = _3074;
            _3197 = _3076;
            _3199 = _3078;
            _3201 = _3080;
            _3203 = _3082;
        }
        else
        {
            float _3218 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
            float _3219 = _3218 * _2051;
            float _3220 = _3218 * _2052;
            float _3221 = _3218 * _2053;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3089 < ((_3087 >> 12u) & 15u))
            {
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3202;
                float _3204;
                float _3353 = _3072;
                float _3354 = _3074;
                float _3355 = _3076;
                float _3356 = _3078;
                float _3357 = _3080;
                float _3358 = _3082;
                uint _3359 = _3089;
                uint _3368;
                bool _3369;
                for (;;)
                {
                    _3368 = texelFetch(g_lightClassification, int((((_2986 << 5u) + (_2972 << 9u)) + (_3359 << 2u)) >> 2u)).x;
                    _3369 = _3368 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3369)
                    {
                        frontier_phi_82_pred = _3358;
                        frontier_phi_82_pred_1 = _3357;
                        frontier_phi_82_pred_2 = _3356;
                        frontier_phi_82_pred_3 = _3355;
                        frontier_phi_82_pred_4 = _3354;
                        frontier_phi_82_pred_5 = _3353;
                    }
                    else
                    {
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3857;
                        float _3858;
                        float _3573 = _3353;
                        float _3574 = _3354;
                        float _3575 = _3355;
                        float _3576 = _3356;
                        float _3577 = _3357;
                        float _3578 = _3358;
                        uint _3579 = _3368;
                        uint _3580;
                        vec4 _3605;
                        float _3606;
                        vec4 _3621;
                        vec3 _3633;
                        vec4 _3648;
                        vec4 _3663;
                        float _3709;
                        bool _3710;
                        for (;;)
                        {
                            uint _3590 = ((_3359 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3579));
                            _3580 = (_3579 + 4294967295u) & _3579;
                            uint _3592 = _3590 * 40u;
                            _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            _3606 = _3605.w;
                            uint _3608 = (_3590 * 40u) + 4u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3623 = (_3590 * 40u) + 8u;
                            _3633 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x));
                            uint _3635 = (_3590 * 40u) + 16u;
                            _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            uint _3650 = (_3590 * 40u) + 20u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3665 = (_3590 * 40u) + 24u;
                            vec4 _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3684 = (_3590 * 40u) + 28u;
                            vec4 _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            _3709 = fma(_2053, _3697.z, fma(_2052, _3697.y, _3697.x * _2051)) + _3697.w;
                            _3710 = !((fma(_2053, _3678.z, fma(_2052, _3678.y, _3678.x * _2051)) + _3678.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3710)
                            {
                                float _3737 = _3605.x - _2051;
                                float _3738 = _3605.y - _2052;
                                float _3739 = _3605.z - _2053;
                                float _3740 = dot(vec3(_3737, _3738, _3739), vec3(_3737, _3738, _3739));
                                float _3743 = inversesqrt(_3740);
                                float _3744 = _3743 * _3737;
                                float _3745 = _3743 * _3738;
                                float _3746 = _3743 * _3739;
                                float _3750 = 1.0 - (_3740 / (_3606 * _3606));
                                float _4948 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3751 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3755 = sqrt(_3740) * _3621.w;
                                float _3757 = 1.39999997615814208984375 / (_3755 + 1.39999997615814208984375);
                                float _3758 = _3757 * _3757;
                                float _3761 = ((1.0 - _3758) * dot(vec3(_3744, _3745, _3746), vec3(_886, _889, _892))) + _3758;
                                float _3764 = _3755 * _3755;
                                float _3768 = (fma(_2053, _3648.z, fma(_2052, _3648.y, _3648.x * _2051)) + _3648.w) / _3709;
                                float _3769 = (fma(_2053, _3663.z, fma(_2052, _3663.y, _3663.x * _2051)) + _3663.w) / _3709;
                                float _3773 = 1.0 - dot(vec2(_3768, _3769), vec2(_3768, _3769));
                                float _4964 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3775 = _3774 * (((isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0))) * _3751) / ((_3764 * 0.699999988079071044921875) + 1.0));
                                float _3787 = exp2(log2(1.0 / ((_3764 * 3.5) + 5.0)) * 0.25);
                                float _3788 = 1.0 - _961;
                                float _3795 = sqrt(1.0 - ((1.0 - (_3788 * _3788)) * (1.0 - (_3787 * _3787))));
                                float _3796 = _3795 * _3795;
                                float _3797 = _3796 * _3796;
                                float _3798 = _3744 - _3219;
                                float _3799 = _3745 - _3220;
                                float _3800 = _3746 - _3221;
                                float _3804 = inversesqrt(dot(vec3(_3798, _3799, _3800), vec3(_3798, _3799, _3800)));
                                float _3808 = dot(vec3(_886, _889, _892), vec3((-0.0) - _3219, (-0.0) - _3220, (-0.0) - _3221));
                                float _4975 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3811 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3812 = dot(vec3(_886, _889, _892), vec3(_3804 * _3798, _3804 * _3799, _3804 * _3800));
                                float _4986 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3815 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3819 = ((_3815 * _3815) * (_3797 + (-1.0))) + 1.0;
                                float _3820 = _3757 * _3796;
                                float _3821 = _3820 * _3820;
                                float _3827 = ((1.0 - _3821) * dot(vec3(_886, _889, _892), vec3(_3744, _3745, _3746))) + _3821;
                                float _4997 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3828 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3829 = 1.0 - _3796;
                                float _3839 = (0.5 / (((_3828 * ((_3811 * _3829) + _3796)) + 9.9999999392252902907785028219223e-09) + (((_3828 * _3829) + _3796) * _3811))) * _3828;
                                float _5008 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3849 = (_3774 * _3751) * (((_3797 * 3.1415927410125732421875) * (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) / ((_3819 * _3819) * ((_3764 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3775 * _3621.z;
                                frontier_phi_88_pred_1 = _3775 * _3621.y;
                                frontier_phi_88_pred_2 = _3775 * _3621.x;
                                frontier_phi_88_pred_3 = _3849 * _3633.z;
                                frontier_phi_88_pred_4 = _3849 * _3633.y;
                                frontier_phi_88_pred_5 = _3849 * _3633.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3858 = frontier_phi_88_pred;
                            _3857 = frontier_phi_88_pred_1;
                            _3856 = frontier_phi_88_pred_2;
                            _3855 = frontier_phi_88_pred_3;
                            _3854 = frontier_phi_88_pred_4;
                            _3853 = frontier_phi_88_pred_5;
                            _3563 = _3856 + _3576;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            _3560 = _3853 + _3573;
                            _3561 = _3854 + _3574;
                            _3562 = _3855 + _3575;
                            if (_3580 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3580;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3565;
                        frontier_phi_82_pred_1 = _3564;
                        frontier_phi_82_pred_2 = _3563;
                        frontier_phi_82_pred_3 = _3562;
                        frontier_phi_82_pred_4 = _3561;
                        frontier_phi_82_pred_5 = _3560;
                    }
                    _3204 = frontier_phi_82_pred;
                    _3202 = frontier_phi_82_pred_1;
                    _3200 = frontier_phi_82_pred_2;
                    _3198 = frontier_phi_82_pred_3;
                    _3196 = frontier_phi_82_pred_4;
                    _3194 = frontier_phi_82_pred_5;
                    uint _3360 = _3359 + 1u;
                    if (_3360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3353 = _3194;
                        _3354 = _3196;
                        _3355 = _3198;
                        _3356 = _3200;
                        _3357 = _3202;
                        _3358 = _3204;
                        _3359 = _3360;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3200;
                frontier_phi_63_64_ladder_1 = _3204;
                frontier_phi_63_64_ladder_2 = _3202;
                frontier_phi_63_64_ladder_3 = _3198;
                frontier_phi_63_64_ladder_4 = _3196;
                frontier_phi_63_64_ladder_5 = _3194;
            }
            else
            {
                frontier_phi_63_64_ladder = _3078;
                frontier_phi_63_64_ladder_1 = _3082;
                frontier_phi_63_64_ladder_2 = _3080;
                frontier_phi_63_64_ladder_3 = _3076;
                frontier_phi_63_64_ladder_4 = _3074;
                frontier_phi_63_64_ladder_5 = _3072;
            }
            _3193 = frontier_phi_63_64_ladder_5;
            _3195 = frontier_phi_63_64_ladder_4;
            _3197 = frontier_phi_63_64_ladder_3;
            _3199 = frontier_phi_63_64_ladder;
            _3201 = frontier_phi_63_64_ladder_2;
            _3203 = frontier_phi_63_64_ladder_1;
        }
        float _3208 = isnan(1.0) ? _945 : (isnan(_945) ? 1.0 : min(_945, 1.0));
        _3005 = (_3208 * _3199) + _2517;
        _3007 = (_3208 * _3201) + _2519;
        _3009 = (_3208 * _3203) + _2521;
        _3011 = ((_3193 * _929) * _3208) + _2855;
        _3013 = ((_3195 * _931) * _3208) + _2857;
        _3015 = ((_3197 * _932) * _3208) + _2859;
    }
    else
    {
        _3005 = _2517;
        _3007 = _2519;
        _3009 = _2521;
        _3011 = _2855;
        _3013 = _2857;
        _3015 = _2859;
    }
    float _5024 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _5035 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _5046 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _3032 = ((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_3005 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _945))) + ((_3011 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    float _3033 = ((isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_3007 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _945))) + ((_3013 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    float _3034 = ((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3009 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _945))) + ((_3015 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    uint _3035 = _259 + 6u;
    float _3043 = _867 / cbSceneParam._m0[86u].x;
    float _3044 = _868 / cbSceneParam._m0[86u].y;
    vec4 _3058 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3043, _3044, (log2((isnan(cbSceneParam._m0[77u].w) ? _790 : (isnan(_790) ? cbSceneParam._m0[77u].w : min(_790, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3060 = _3058.x;
    float _3061 = _3058.y;
    float _3062 = _3058.z;
    float _3063 = _3058.w;
    float _3135;
    float _3137;
    float _3139;
    float _3141;
    if (_790 > cbSceneParam._m0[78u].w)
    {
        float _3097 = isnan(_790) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _790 : min(cbSceneParam._m0[80u].w, _790));
        float _3098 = _3097 / _790;
        float _3109 = _3098 * _840;
        float _3110 = _841 * _3098;
        float _3111 = (-0.0) - _3110;
        float _3113 = _3098 * _842;
        float _3115 = (cbSceneParam._m0[77u].w * _3111) / _3097;
        float _3116 = _3115 + cbSceneParam._m0[79u].w;
        float _3117 = cbSceneParam._m0[79u].w - _3110;
        float _3123 = sqrt(((_3109 * _3109) + (_3110 * _3110)) + (_3113 * _3113));
        float _3126 = (1.0 - (cbSceneParam._m0[77u].w / _3097)) * _3123;
        float _3131 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3133 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3310;
        if (abs((_3111 - _3115) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3310 = ((((_3116 > 0.0) ? exp2(_3131 * _3116) : (2.0 - exp2(_3133 * _3116))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3126;
        }
        else
        {
            float _3254 = 1.0 / cbSceneParam._m0[80u].x;
            float _3255 = isnan(_3117) ? _3116 : (isnan(_3116) ? _3117 : max(_3116, _3117));
            float _3256 = isnan(_3117) ? _3116 : (isnan(_3116) ? _3117 : min(_3116, _3117));
            float _3265 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : min(_3255, 0.0));
            float _3266 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : min(_3256, 0.0));
            _3310 = ((abs(_3123 / _3111) * cbSceneParam._m0[80u].y) * ((((_3265 - _3266) * 2.0) - ((exp2(_3131 * (isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0)))) - exp2(_3131 * (isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))))) * _3254)) - ((exp2(_3133 * _3265) - exp2(_3133 * _3266)) * _3254))) + (_3126 * cbSceneParam._m0[80u].z);
        }
        vec4 _3312 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3043, _3044, 1.0), 0.0);
        float _3321 = exp2((_3310 * (-1.44269502162933349609375)) * (1.0 - _3312.w));
        float _3322 = log2(_3321);
        float _3338 = log2(_3063);
        _3135 = (exp2(_3338 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].x)) * _3312.x) / cbSceneParam._m0[78u].x)) + _3060;
        _3137 = (exp2(_3338 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].y)) * _3312.y) / cbSceneParam._m0[78u].y)) + _3061;
        _3139 = (exp2(_3338 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].z)) * _3312.z) / cbSceneParam._m0[78u].z)) + _3062;
        _3141 = _3321 * _3063;
    }
    else
    {
        _3135 = _3060;
        _3137 = _3061;
        _3139 = _3062;
        _3141 = _3063;
    }
    bool _3348;
    vec4 _3151;
    vec4 _3173;
    float _3175;
    float _3179;
    float _3180;
    float _3181;
    float _3182;
    bool _3192;
    for (;;)
    {
        _3151 = cbMatDynParam._m0[0u];
        float _3153 = roundEven(_3151.y);
        bool _3154 = _3153 == 3.0;
        float _3155 = log2(_3141);
        float _3162 = exp2(_3155 * cbSceneParam._m0[78u].x) * _3032;
        float _3163 = exp2(_3155 * cbSceneParam._m0[78u].y) * _3033;
        float _3164 = exp2(_3155 * cbSceneParam._m0[78u].z) * _3034;
        float _3171 = _856 + (-0.5);
        _3173 = cbMtdParam._m0[1u];
        _3175 = _3173.y * _3171;
        float _3178 = (_3153 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3179 = _3178 * (_3154 ? _3162 : (_3162 + (cbSceneParam._m0[72u].w * _3135)));
        _3180 = _3178 * (_3154 ? _3163 : (_3163 + (cbSceneParam._m0[72u].w * _3137)));
        _3181 = _3178 * (_3154 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3139)));
        _3182 = _3171 * 0.999000012874603271484375;
        _3192 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3192)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3182) < 0.5)
            {
                _3348 = true;
                break;
            }
        }
        uint _3289 = _905 + uint(_3151.w);
        if ((cbInstanceData._m0[_3289].w < 1.0) && ((cbInstanceData._m0[_3289].w + _3182) < 0.5))
        {
            _3348 = true;
            break;
        }
        if ((_3175 + 1.0) < _3173.x)
        {
            _3348 = true;
            break;
        }
        _3348 = false;
        break;
    }
    float _3551;
    if (_3348)
    {
        discard_state = true;
        _3551 = 0.0;
    }
    else
    {
        _3551 = cbInstanceData._m0[_3035].w;
    }
    SV_Target.x = _3179;
    SV_Target.y = _3180;
    SV_Target.z = _3181;
    SV_Target.w = _3551;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3035].w;
    discard_exit();
}


