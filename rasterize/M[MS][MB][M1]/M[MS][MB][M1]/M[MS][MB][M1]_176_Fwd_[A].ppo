#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1432;
float _3813;
float _3814;
float _3815;
float _3816;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3825 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3836 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3847 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[24u].y) + _419) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3858 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _444 = (_437 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _445 = (_437 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _446 = (_437 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[24u].y) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3869 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    float _523 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _517;
    float _526 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _518;
    float _529 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _519;
    float _536 = ((_517 - _523) * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) + _523;
    float _537 = ((_518 - _526) * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) + _526;
    float _538 = ((_519 - _529) * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) + _529;
    vec4 _550 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _590 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _592 = _590.x;
    float _593 = _590.y;
    float _594 = _590.z;
    float _601 = ((_573.x - _592) * _437) + _592;
    float _602 = ((_573.y - _593) * _437) + _593;
    float _603 = ((_573.z - _594) * _437) + _594;
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _628 = ((_615.z - _603) * _510) + _603;
    float _631 = ((((_615.x - _601) * _510) + _601) * 2.0) + (-1.0);
    float _632 = ((((_615.y - _602) * _510) + _602) * 2.0) + (-1.0);
    float _633 = dot(vec2(_631, _632), vec2(_631, _632));
    float _3880 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))));
    float _643 = _631 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_550.x * 2.0) + (-1.0)));
    float _644 = _632 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_550.y * 2.0) + (-1.0)));
    vec4 _657 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _671 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _673 = _671.x;
    float _674 = 1.0 - _673;
    float _700 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_673 - _674) * cbMtdParam._m0[24u].w) + _674) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3891 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _709 = ((((cbMtdParam._m0[10u].x - _536) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _701) + _536;
    float _710 = ((((cbMtdParam._m0[10u].y - _537) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _701) + _537;
    float _711 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _538)) * _701) + _538;
    vec4 _723 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _737 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _739 = _737.x;
    float _757 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _739) * _437) + _739;
    float _775 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _304) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _305) + cbTextureTilingScale._m0[21u].w)).x - _757) * _510) + _757;
    float _779 = ((_723.x - _775) * cbMtdParam._m0[19u].z) + _775;
    float _781 = _779 - (_779 * _701);
    float _786 = (((_550.z - _628) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _628;
    float _790 = ((cbMtdParam._m0[23u].y - _786) * _701) + _786;
    vec4 _809 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _815 = (_809.x * 2.0) + (-1.0);
    float _816 = (_809.y * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _3902 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _833 = (_701 * (((cbMtdParam._m0[22u].z * _643) - _643) + _815)) + _643;
    float _834 = (_701 * (((cbMtdParam._m0[22u].z * _644) - _644) + _816)) + _644;
    float _835 = (_701 * (sqrt(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) - _638)) + _638;
    float _839 = cbMtdParam._m0[22u].x + _657.w;
    float _842 = fma(_835, _253 * NORMAL.x, fma(_834, _260 * TANGENT.x, (_246 * _238) * _833));
    float _845 = fma(_835, _253 * NORMAL.y, fma(_834, _260 * TANGENT.y, (_246 * _239) * _833));
    float _848 = fma(_835, _253 * NORMAL.z, fma(_834, _260 * TANGENT.z, (_246 * _240) * _833));
    float _852 = inversesqrt(dot(vec3(_842, _845, _848), vec3(_842, _845, _848)));
    float _853 = _852 * _842;
    float _854 = _852 * _845;
    float _855 = _852 * _848;
    float _3913 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _856 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _3935 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _3946 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _3957 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3968 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _861 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _875 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _925 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _915);
    float _926 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _915);
    float _927 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _915);
    float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
    float _932 = _925 * _931;
    float _933 = _926 * _931;
    float _934 = _927 * _931;
    vec4 _939 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _941 = _939.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1113 = sqrt(((_925 * _925) + (_926 * _926)) + (_927 * _927));
        float _1119 = (cbMatDynParam._m0[5u].x * _1113) + cbMatDynParam._m0[5u].y;
        float _3979 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1124 = (cbMatDynParam._m0[5u].z * _1113) + cbMatDynParam._m0[5u].w;
        float _3990 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) - _1120)) + _1120) < ((_941 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _952 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _953 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _971 = fma(_855, cbSceneParam._m0[5u].z, fma(_854, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _853));
    float _974 = fma(_855, cbSceneParam._m0[6u].z, fma(_854, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _853));
    float _977 = fma(_855, cbSceneParam._m0[7u].z, fma(_854, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _853));
    uint _990 = _285 + 9u;
    uint _991 = _990 + uint(cbMatDynParam._m0[0u].w);
    float _997 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_991].x;
    float _998 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * cbInstanceData._m0[_991].y;
    float _999 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_991].z;
    float _4001 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _4023 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _1003 = 1.0 - _861;
    float _1004 = _1000 * _1003;
    float _1005 = _1001 * _1003;
    float _1006 = _1002 * _1003;
    float _1011 = (_1000 + (-0.039999999105930328369140625)) * _861;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _861;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _861;
    float _1014 = _1011 + 0.039999999105930328369140625;
    float _1016 = _1012 + 0.039999999105930328369140625;
    float _1017 = _1013 + 0.039999999105930328369140625;
    vec4 _1026 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _952, cbSceneParam._m0[86u].y * _953));
    float _1030 = ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * TEXCOORD_5.w) * _1026.x;
    float _1031 = dot(vec3(_853, _854, _855), vec3(_932, _933, _934));
    float _1034 = _1031 * 2.0;
    float _1038 = (_1034 * _853) - _932;
    float _1039 = (_1034 * _854) - _933;
    float _1040 = (_1034 * _855) - _934;
    float _1044 = abs(dot(vec3(_932, _933, _934), vec3(_853, _854, _855)));
    float _4034 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1046 = sqrt(_856);
    float _1059 = exp2((_1046 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1046 * 3.0));
    float _1065 = (1.0 - _1059) * ((_1046 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1066 = _1059 * _1046;
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1431;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1156 = fma(_1102, cbModelParam._m0[26u].z, fma(_1098, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1094));
        float _1160 = fma(_1102, cbModelParam._m0[27u].z, fma(_1098, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1094));
        float _1164 = fma(_1102, cbModelParam._m0[28u].z, fma(_1098, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1094));
        float _1189 = _1094 + _853;
        float _1190 = _1098 + _854;
        float _1191 = _1102 + _855;
        float _1201 = fma(_1191, cbModelParam._m0[26u].z, fma(_1190, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1189)) - _1156;
        float _1202 = fma(_1191, cbModelParam._m0[27u].z, fma(_1190, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1189)) - _1160;
        float _1203 = fma(_1191, cbModelParam._m0[28u].z, fma(_1190, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1189)) - _1164;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1156 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1160 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[34u].z) + ((((((_1164 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1259 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1225.x + (-0.5));
        float _1261 = _1259 * (_1225.y + (-0.5));
        float _1262 = _1259 * (_1225.z + (-0.5));
        float _1269 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1232.x + (-0.5));
        float _1271 = _1269 * (_1232.y + (-0.5));
        float _1272 = _1269 * (_1232.z + (-0.5));
        float _1279 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1239.x + (-0.5));
        float _1281 = _1279 * (_1239.y + (-0.5));
        float _1282 = _1279 * (_1239.z + (-0.5));
        float _1289 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1246.x + (-0.5));
        float _1291 = _1289 * (_1246.y + (-0.5));
        float _1292 = _1289 * (_1246.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1313 = (dot(vec3(_853, _854, _855), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1323 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4082 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1325 + 1.0))) + _1330) * _1293;
        float _1340 = _1261 * 0.5;
        float _1341 = _1271 * 0.5;
        float _1342 = _1281 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_853, _854, _855), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4115 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1367 + 1.0))) + _1372) * _1294;
        float _1382 = _1262 * 0.5;
        float _1383 = _1272 * 0.5;
        float _1384 = _1282 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_853, _854, _855), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4148 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1409 + 1.0))) + _1414) * _1295;
        _1431 = _1262;
        _1433 = _1261;
        _1434 = _1260;
        _1435 = _1272;
        _1436 = _1271;
        _1437 = _1270;
        _1438 = _1282;
        _1439 = _1281;
        _1440 = _1280;
        _1441 = _1295;
        _1442 = _1294;
        _1443 = _1293;
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
    }
    else
    {
        _1431 = _1432;
        _1433 = _1432;
        _1434 = _1432;
        _1435 = _1432;
        _1436 = _1432;
        _1437 = _1432;
        _1438 = _1432;
        _1439 = _1432;
        _1440 = _1432;
        _1441 = _1432;
        _1442 = _1432;
        _1443 = _1432;
        _1444 = 0.0;
        _1445 = 0.0;
        _1446 = 0.0;
    }
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1473 = fma(_1102, cbModelParam._m0[30u].z, fma(_1098, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1094));
        float _1477 = fma(_1102, cbModelParam._m0[31u].z, fma(_1098, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1094));
        float _1481 = fma(_1102, cbModelParam._m0[32u].z, fma(_1098, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1094));
        float _1504 = _1094 + _853;
        float _1505 = _1098 + _854;
        float _1506 = _1102 + _855;
        float _1516 = fma(_1506, cbModelParam._m0[30u].z, fma(_1505, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1504)) - _1473;
        float _1517 = fma(_1506, cbModelParam._m0[31u].z, fma(_1505, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1504)) - _1477;
        float _1518 = fma(_1506, cbModelParam._m0[32u].z, fma(_1505, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1504)) - _1481;
        float _1522 = inversesqrt(dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518)));
        float _1535 = ((_1522 * _1516) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1473 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1522 * _1517) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1477 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1522 * _1518) / cbModelParam._m0[35u].z) + ((((((_1481 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        float _1572 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1539.x + (-0.5));
        float _1574 = _1572 * (_1539.y + (-0.5));
        float _1575 = _1572 * (_1539.z + (-0.5));
        float _1582 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1546.x + (-0.5));
        float _1584 = _1582 * (_1546.y + (-0.5));
        float _1585 = _1582 * (_1546.z + (-0.5));
        float _1592 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1553.x + (-0.5));
        float _1594 = _1592 * (_1553.y + (-0.5));
        float _1595 = _1592 * (_1553.z + (-0.5));
        float _1602 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1560.x + (-0.5));
        float _1604 = _1602 * (_1560.y + (-0.5));
        float _1605 = _1602 * (_1560.z + (-0.5));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = _1573 * 0.5;
        float _1610 = _1583 * 0.5;
        float _1611 = _1593 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_853, _854, _855), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4211 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1636 + 1.0))) + _1641) * _1606;
        float _1651 = _1574 * 0.5;
        float _1652 = _1584 * 0.5;
        float _1653 = _1594 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_853, _854, _855), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4244 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1678 + 1.0))) + _1683) * _1607;
        float _1693 = _1575 * 0.5;
        float _1694 = _1585 * 0.5;
        float _1695 = _1595 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_853, _854, _855), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4277 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1720 + 1.0))) + _1725) * _1608;
        _1742 = _1575;
        _1743 = _1574;
        _1744 = _1573;
        _1745 = _1585;
        _1746 = _1584;
        _1747 = _1583;
        _1748 = _1595;
        _1749 = _1594;
        _1750 = _1593;
        _1751 = _1608;
        _1752 = _1607;
        _1753 = _1606;
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
    }
    else
    {
        _1742 = _1432;
        _1743 = _1432;
        _1744 = _1432;
        _1745 = _1432;
        _1746 = _1432;
        _1747 = _1432;
        _1748 = _1432;
        _1749 = _1432;
        _1750 = _1432;
        _1751 = _1432;
        _1752 = _1432;
        _1753 = _1432;
        _1754 = 0.0;
        _1755 = 0.0;
        _1756 = 0.0;
    }
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1444)) + _1444;
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1445)) + _1445;
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1446)) + _1446;
    float _1789 = fma(_1768, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1766 * cbSceneParam._m0[89u].x));
    float _1792 = fma(_1768, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1766 * cbSceneParam._m0[90u].x));
    float _1795 = fma(_1768, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1766));
    float _1810 = _1038 * 0.5;
    float _1811 = _1039 * 0.5;
    float _1812 = _1040 * 0.5;
    float _1813 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1816 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1819 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1853;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1826 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1431, _1435, _1438, _1441));
        float _1830 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1834 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1841 = dot(vec4(cbModelParam._m0[39u]), vec4(_1810, _1811, _1812, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1841) ? 0.0 : (isnan(0.0) ? _1841 : max(0.0, _1841))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1864;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1855 = dot(vec4(cbModelParam._m0[40u]), vec4(_1810, _1811, _1812, 1.0));
        _1864 = dot(vec3(isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1855) ? 0.0 : (isnan(0.0) ? _1855 : max(0.0, _1855))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1864 = 1.0;
    }
    float _1868 = (_1864 * cbModelParam._m0[1u].x) + (_1853 * (1.0 - cbModelParam._m0[1u].x));
    float _1878 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _856);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1878 : min(cbModelParam._m0[25u].z, _1878));
    float _1961;
    float _1963;
    float _1965;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1928 = fma(_1102, cbModelParam._m0[13u].z, fma(_1098, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1094)) + cbModelParam._m0[13u].w;
        float _1932 = fma(_1102, cbModelParam._m0[14u].z, fma(_1098, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1094)) + cbModelParam._m0[14u].w;
        float _1936 = fma(_1102, cbModelParam._m0[15u].z, fma(_1098, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1094)) + cbModelParam._m0[15u].w;
        float _1939 = fma(_1040, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038));
        float _1942 = fma(_1040, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038));
        float _1945 = fma(_1040, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038));
        float _1973;
        if (_1939 > 0.0)
        {
            _1973 = abs((1.0 - _1928) / _1939);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1928 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1973 = frontier_phi_17_15_ladder;
        }
        float _2176;
        if (_1942 > 0.0)
        {
            _2176 = abs((1.0 - _1932) / _1942);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1932 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2176 = frontier_phi_26_22_ladder;
        }
        float _2430;
        if (_1945 > 0.0)
        {
            _2430 = abs((1.0 - _1936) / _1945);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1936 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2430 = frontier_phi_38_33_ladder;
        }
        float _2432 = isnan(_2176) ? _1973 : (isnan(_1973) ? _2176 : min(_1973, _2176));
        float _2433 = isnan(_2430) ? _2432 : (isnan(_2432) ? _2430 : min(_2432, _2430));
        float _2437 = (_2433 * _1939) + _1928;
        float _2438 = (_2433 * _1942) + _1932;
        float _2439 = (_2433 * _1945) + _1936;
        float _2440 = _2433 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2440;
        float _2444 = _2440 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 > _2444) || ((_2438 < _2442) || ((_2437 < _2442) || (_2437 > _2444))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2567 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2439, cbModelParam._m0[9u].z, fma(_2438, cbModelParam._m0[9u].y, _2437 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2439, cbModelParam._m0[10u].z, fma(_2438, cbModelParam._m0[10u].y, _2437 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2439, cbModelParam._m0[11u].z, fma(_2438, cbModelParam._m0[11u].y, _2437 * cbModelParam._m0[11u].x))), _1879);
            frontier_phi_16_38_ladder = _2567.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2567.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2567.x * cbModelParam._m0[1u].y;
        }
        _1961 = frontier_phi_16_38_ladder_2;
        _1963 = frontier_phi_16_38_ladder_1;
        _1965 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1949 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1038, _1039, _1040), _1879);
        _1961 = _1949.x * cbModelParam._m0[1u].y;
        _1963 = _1949.y * cbModelParam._m0[1u].y;
        _1965 = _1949.z * cbModelParam._m0[1u].y;
    }
    float _1969 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _856);
    float _1970 = isnan(_1969) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1969 : min(cbModelParam._m0[25u].w, _1969));
    float _2060;
    float _2062;
    float _2064;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2024 = fma(_1102, cbModelParam._m0[21u].z, fma(_1098, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1094)) + cbModelParam._m0[21u].w;
        float _2028 = fma(_1102, cbModelParam._m0[22u].z, fma(_1098, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1094)) + cbModelParam._m0[22u].w;
        float _2032 = fma(_1102, cbModelParam._m0[23u].z, fma(_1098, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1094)) + cbModelParam._m0[23u].w;
        float _2035 = fma(_1040, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038));
        float _2038 = fma(_1040, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038));
        float _2041 = fma(_1040, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038));
        float _2181;
        if (_2035 > 0.0)
        {
            _2181 = abs((1.0 - _2024) / _2035);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2024 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2181 = frontier_phi_28_24_ladder;
        }
        float _2457;
        if (_2038 > 0.0)
        {
            _2457 = abs((1.0 - _2028) / _2038);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2028 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2457 = frontier_phi_40_35_ladder;
        }
        float _2670;
        if (_2041 > 0.0)
        {
            _2670 = abs((1.0 - _2032) / _2041);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2032 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2670 = frontier_phi_49_46_ladder;
        }
        float _2672 = isnan(_2457) ? _2181 : (isnan(_2181) ? _2457 : min(_2181, _2457));
        float _2673 = isnan(_2670) ? _2672 : (isnan(_2672) ? _2670 : min(_2672, _2670));
        float _2677 = (_2673 * _2035) + _2024;
        float _2678 = (_2673 * _2038) + _2028;
        float _2679 = (_2673 * _2041) + _2032;
        float _2680 = _2673 * 9.9999997473787516355514526367188e-05;
        float _2681 = (-1.0) - _2680;
        float _2683 = _2680 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2679 > _2683) || ((_2679 < _2681) || ((_2678 > _2683) || ((_2678 < _2681) || ((_2677 < _2681) || (_2677 > _2683))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2679, cbModelParam._m0[17u].z, fma(_2678, cbModelParam._m0[17u].y, _2677 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2679, cbModelParam._m0[18u].z, fma(_2678, cbModelParam._m0[18u].y, _2677 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2679, cbModelParam._m0[19u].z, fma(_2678, cbModelParam._m0[19u].y, _2677 * cbModelParam._m0[19u].x))), _1970);
            frontier_phi_25_49_ladder = _2878.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2878.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2878.x * cbModelParam._m0[1u].z;
        }
        _2060 = frontier_phi_25_49_ladder_2;
        _2062 = frontier_phi_25_49_ladder_1;
        _2064 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1038, _1039, _1040), _1970);
        _2060 = _2044.x * cbModelParam._m0[1u].z;
        _2062 = _2044.y * cbModelParam._m0[1u].z;
        _2064 = _2044.z * cbModelParam._m0[1u].z;
    }
    float _2077 = (((_1065 * _1014) + _1066) * _1030) * ((cbModelParam._m0[1u].w * (_2060 - _1961)) + _1961);
    float _2079 = (((_1065 * _1016) + _1066) * _1030) * ((cbModelParam._m0[1u].w * (_2062 - _1963)) + _1963);
    float _2081 = (((_1065 * _1017) + _1066) * _1030) * ((cbModelParam._m0[1u].w * (_2064 - _1965)) + _1965);
    float _2084 = fma(_2081, cbSceneParam._m0[89u].z, fma(_2079, cbSceneParam._m0[89u].y, _2077 * cbSceneParam._m0[89u].x));
    float _2087 = fma(_2081, cbSceneParam._m0[90u].z, fma(_2079, cbSceneParam._m0[90u].y, _2077 * cbSceneParam._m0[90u].x));
    float _2090 = fma(_2081, cbSceneParam._m0[91u].z, fma(_2079, cbSceneParam._m0[91u].y, _2077 * cbSceneParam._m0[91u].x));
    uvec4 _2100 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2102 = _2100.x * 14u;
    uint _2103 = _2102 + 13u;
    float _2110 = _1030 + (-1.0);
    float _2115 = (cbLight._m0[_2103].x * _2110) + 1.0;
    float _2116 = (cbLight._m0[_2103].y * _2110) + 1.0;
    float _2117 = (cbLight._m0[_2103].z * _2110) + 1.0;
    float _2118 = (cbLight._m0[_2103].w * _2110) + 1.0;
    uint _2119 = _2102 + 5u;
    float _2125 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
    uint _2129 = _2102 + 4u;
    float _2135 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
    uint _2139 = _2102 | 1u;
    float _2150 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_853, _854, _855));
    float _2153 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_853, _854, _855));
    float _4413 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _4424 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * 0.3183098733425140380859375;
    float _2160 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * 0.3183098733425140380859375;
    float _2167 = ((cbLight._m0[_2119].x * _2125) * _2160) + ((cbLight._m0[_2129].x * _2135) * _2158);
    float _2168 = ((_2125 * cbLight._m0[_2119].y) * _2160) + ((_2135 * cbLight._m0[_2129].y) * _2158);
    float _2169 = ((_2125 * cbLight._m0[_2119].z) * _2160) + ((_2135 * cbLight._m0[_2129].z) * _2158);
    uvec4 _2173 = floatBitsToUint(cbLight._m0[_2102 + 12u]);
    bool _2175 = _2173.x == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2175)
    {
        _2186 = _2167;
        _2188 = _2168;
        _2190 = _2169;
    }
    else
    {
        uint _2194 = _2102 + 6u;
        float _2210 = (dot(vec3(cbLight._m0[_2102 + 2u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2211 = _2210 * _2210;
        float _4435 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2212 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2213 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2186 = (((cbLight._m0[_2194].x * 0.3183098733425140380859375) * _2212) * _2213) + _2167;
        _2188 = (((cbLight._m0[_2194].y * 0.3183098733425140380859375) * _2212) * _2213) + _2168;
        _2190 = (((cbLight._m0[_2194].z * 0.3183098733425140380859375) * _2212) * _2213) + _2169;
    }
    bool _2193 = _2173.y == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2193)
    {
        _2231 = _2186;
        _2233 = _2188;
        _2235 = _2190;
    }
    else
    {
        uint _2401 = _2102 + 7u;
        float _2417 = (dot(vec3(cbLight._m0[_2102 + 3u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2418 = _2417 * _2417;
        float _4451 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2419 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2420 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2231 = (((cbLight._m0[_2401].x * 0.3183098733425140380859375) * _2419) * _2420) + _2186;
        _2233 = (((cbLight._m0[_2401].y * 0.3183098733425140380859375) * _2419) * _2420) + _2188;
        _2235 = (((cbLight._m0[_2401].z * 0.3183098733425140380859375) * _2419) * _2420) + _2190;
    }
    uint _2238 = _2102 + 8u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _856) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_2102].x + _932;
    float _2254 = cbLight._m0[_2102].y + _933;
    float _2255 = cbLight._m0[_2102].z + _934;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2102].xyz));
    float _4467 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _4478 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _2267 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2268 = dot(vec3(_853, _854, _855), vec3(_2260, _2261, _2262));
    float _4489 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2272 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2260, _2261, _2262));
    float _4500 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2276 = _2252 * _2252;
    float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
    float _2288 = exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0);
    float _2289 = 0.959999978542327880859375 - _1011;
    float _2291 = 0.959999978542327880859375 - _1012;
    float _2292 = 0.959999978542327880859375 - _1013;
    float _2299 = 1.0 - _2252;
    float _2310 = (0.5 / (((_2267 * ((_2266 * _2299) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2299) + _2252) * _2266))) * _2266;
    float _4511 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
    uint _2323 = _2102 + 9u;
    float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _856) * 0.949999988079071044921875);
    float _2335 = _2334 * _2334;
    float _2336 = cbLight._m0[_2139].x + _932;
    float _2337 = cbLight._m0[_2139].y + _933;
    float _2338 = cbLight._m0[_2139].z + _934;
    float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
    float _2343 = _2342 * _2336;
    float _2344 = _2342 * _2337;
    float _2345 = _2342 * _2338;
    float _2346 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2139].xyz));
    float _4522 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2350 = dot(vec3(_853, _854, _855), vec3(_2343, _2344, _2345));
    float _4533 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2354 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2343, _2344, _2345));
    float _4544 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2358 = _2335 * _2335;
    float _2362 = ((_2353 * _2353) * (_2358 + (-1.0))) + 1.0;
    float _2369 = exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0);
    float _2376 = 1.0 - _2335;
    float _2386 = (0.5 / (((_2267 * ((_2349 * _2376) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2376) + _2335) * _2349))) * _2349;
    float _4555 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2388 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2358 / ((_2362 * _2362) * 3.141590118408203125));
    float _2398 = (((((_2369 * _2289) + _1014) * cbLight._m0[_2323].x) * _2388) * _2125) + (((((_2288 * _2289) + _1014) * cbLight._m0[_2238].x) * _2312) * _2135);
    float _2399 = (((((_2369 * _2291) + _1016) * cbLight._m0[_2323].y) * _2388) * _2125) + (((((_2288 * _2291) + _1016) * cbLight._m0[_2238].y) * _2312) * _2135);
    float _2400 = (((((_2369 * _2292) + _1017) * cbLight._m0[_2323].z) * _2388) * _2125) + (((((_2288 * _2292) + _1017) * cbLight._m0[_2238].z) * _2312) * _2135);
    float _2462;
    float _2464;
    float _2466;
    if (_2175)
    {
        _2462 = _2398;
        _2464 = _2399;
        _2466 = _2400;
    }
    else
    {
        uint _2468 = _2102 + 2u;
        uint _2472 = _2102 + 10u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _856) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _932;
        float _2489 = cbLight._m0[_2468].y + _933;
        float _2490 = cbLight._m0[_2468].z + _934;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2468].xyz));
        float _4566 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2502 = dot(vec3(_853, _854, _855), vec3(_2495, _2496, _2497));
        float _4577 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4588 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2521 = exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0);
        float _2528 = 1.0 - _2487;
        float _2538 = (0.5 / (((_2267 * ((_2501 * _2528) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2528) + _2487) * _2501))) * _2501;
        float _4599 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2540 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2541 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2462 = (((((_2521 * _2289) + _1014) * cbLight._m0[_2472].x) * _2540) * _2541) + _2398;
        _2464 = (((((_2521 * _2291) + _1016) * cbLight._m0[_2472].y) * _2540) * _2541) + _2399;
        _2466 = (((((_2521 * _2292) + _1017) * cbLight._m0[_2472].z) * _2540) * _2541) + _2400;
    }
    float _2576;
    float _2578;
    float _2580;
    if (_2193)
    {
        _2576 = _2462;
        _2578 = _2464;
        _2580 = _2466;
    }
    else
    {
        uint _2587 = _2102 + 3u;
        uint _2591 = _2102 + 11u;
        float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2587].w)) * _856) * 0.949999988079071044921875);
        float _2606 = _2605 * _2605;
        float _2607 = cbLight._m0[_2587].x + _932;
        float _2608 = cbLight._m0[_2587].y + _933;
        float _2609 = cbLight._m0[_2587].z + _934;
        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
        float _2614 = _2613 * _2607;
        float _2615 = _2613 * _2608;
        float _2616 = _2613 * _2609;
        float _2617 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2587].xyz));
        float _4615 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2621 = dot(vec3(_853, _854, _855), vec3(_2614, _2615, _2616));
        float _4626 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2625 = dot(vec3(cbLight._m0[_2587].xyz), vec3(_2614, _2615, _2616));
        float _4637 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2629 = _2606 * _2606;
        float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
        float _2640 = exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0);
        float _2647 = 1.0 - _2606;
        float _2657 = (0.5 / (((_2267 * ((_2620 * _2647) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2647) + _2606) * _2620))) * _2620;
        float _4648 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2659 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
        float _2660 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2576 = (((((_2640 * _2289) + _1014) * cbLight._m0[_2591].x) * _2659) * _2660) + _2462;
        _2578 = (((((_2640 * _2291) + _1016) * cbLight._m0[_2591].y) * _2659) * _2660) + _2464;
        _2580 = (((((_2640 * _2292) + _1017) * cbLight._m0[_2591].z) * _2659) * _2660) + _2466;
    }
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    if (_2100.y == 0u)
    {
        float _2735 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2736 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2735;
        float _2737 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2735;
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2735;
        uvec4 _2750 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2751 = _2750.x;
        uint _2762 = uint((float(_2750.y) * floor(float(uint(cbSceneParam._m0[85u].y * _953) / _2751))) + floor(float(uint(cbSceneParam._m0[85u].x * _952) / _2751)));
        float _2772 = (log2(_2738 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2773 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        uint _2776 = uint(isnan(14.0) ? _2773 : (isnan(_2773) ? 14.0 : min(_2773, 14.0)));
        uvec4 _2781 = texelFetch(g_lightClusterGridBuffer, int(((_2776 << 2u) + (_2762 << 6u)) >> 2u));
        uint _2782 = _2781.x;
        uint _2783 = _2750.z;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        if (((((1u << ((_2783 >> 4u) & 15u)) + 4294967295u) & _2782) == 0u) || ((_2783 & 240u) == 0u))
        {
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
        }
        else
        {
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            uint _3042 = 0u;
            uint _3051;
            bool _3052;
            for (;;)
            {
                _3051 = texelFetch(g_lightClassification, int((((_2776 << 5u) + (_2762 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                _3052 = _3051 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3052)
                {
                    frontier_phi_66_pred = _3036;
                    frontier_phi_66_pred_1 = _3041;
                    frontier_phi_66_pred_2 = _3040;
                    frontier_phi_66_pred_3 = _3039;
                    frontier_phi_66_pred_4 = _3038;
                    frontier_phi_66_pred_5 = _3037;
                }
                else
                {
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    uint _3187;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3051;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    for (;;)
                    {
                        uint _3191 = uint(findLSB(_3187)) + (_3042 << 5u);
                        uint _3188 = (_3187 + 4294967295u) & _3187;
                        uint _3193 = _3191 * 48u;
                        vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 3u)).x));
                        uint _3213 = (_3191 * 48u) + 4u;
                        vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 3u)).x));
                        uint _3232 = (_3191 * 48u) + 8u;
                        vec3 _3243 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x));
                        float _3247 = _3207.x - _2736;
                        float _3248 = _3207.y - _2737;
                        float _3249 = _3207.z - _2738;
                        float _3250 = dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249));
                        float _3253 = inversesqrt(_3250);
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3257 = dot(vec3(_971, _974, _977), vec3(_3254, _3255, _3256));
                        float _3262 = 1.0 - (_3250 * _3207.w);
                        float _4674 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3263 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3264 = sqrt(_3250) * _3226.w;
                        float _3267 = 1.39999997615814208984375 / (_3264 + 1.39999997615814208984375);
                        float _3268 = _3267 * _3267;
                        float _3271 = ((1.0 - _3268) * _3257) + _3268;
                        float _3274 = _3264 * _3264;
                        float _3278 = ((isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))) * _3263) / ((_3274 * 0.699999988079071044921875) + 1.0);
                        float _3282 = (-0.0) - _2736;
                        float _3283 = (-0.0) - _2737;
                        float _3284 = (-0.0) - _2738;
                        float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                        float _3289 = _3288 * _3282;
                        float _3290 = _3288 * _3283;
                        float _3291 = _3288 * _3284;
                        float _3299 = exp2(log2(1.0 / ((_3274 * 3.5) + 5.0)) * 0.25);
                        float _3300 = 1.0 - _1046;
                        float _3307 = sqrt(1.0 - ((1.0 - (_3300 * _3300)) * (1.0 - (_3299 * _3299))));
                        float _3308 = _3307 * _3307;
                        float _3309 = _3308 * _3308;
                        float _3310 = _3289 + _3254;
                        float _3311 = _3290 + _3255;
                        float _3312 = _3291 + _3256;
                        float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                        float _3320 = dot(vec3(_971, _974, _977), vec3(_3289, _3290, _3291));
                        float _4690 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3323 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3324 = dot(vec3(_971, _974, _977), vec3(_3316 * _3310, _3316 * _3311, _3316 * _3312));
                        float _4701 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3327 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3331 = ((_3327 * _3327) * (_3309 + (-1.0))) + 1.0;
                        float _3332 = _3267 * _3308;
                        float _3333 = _3332 * _3332;
                        float _3336 = ((1.0 - _3333) * _3257) + _3333;
                        float _4712 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3337 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                        float _3338 = 1.0 - _3308;
                        float _3348 = (0.5 / (((_3337 * ((_3323 * _3338) + _3308)) + 9.9999999392252902907785028219223e-09) + (((_3337 * _3338) + _3308) * _3323))) * _3337;
                        float _4723 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3359 = (((_3309 * 3.1415927410125732421875) * (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) / ((_3331 * _3331) * ((_3274 * 2.1991131305694580078125) + 3.141590118408203125))) * _3263;
                        _3111 = (_3278 * _3226.x) + _3184;
                        _3112 = (_3278 * _3226.y) + _3185;
                        _3113 = (_3278 * _3226.z) + _3186;
                        _3108 = (_3359 * _3243.x) + _3181;
                        _3109 = (_3359 * _3243.y) + _3182;
                        _3110 = (_3359 * _3243.z) + _3183;
                        if (_3188 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3188;
                        }
                    }
                    frontier_phi_66_pred = _3108;
                    frontier_phi_66_pred_1 = _3113;
                    frontier_phi_66_pred_2 = _3112;
                    frontier_phi_66_pred_3 = _3111;
                    frontier_phi_66_pred_4 = _3110;
                    frontier_phi_66_pred_5 = _3109;
                }
                _2884 = frontier_phi_66_pred;
                _2894 = frontier_phi_66_pred_1;
                _2892 = frontier_phi_66_pred_2;
                _2890 = frontier_phi_66_pred_3;
                _2888 = frontier_phi_66_pred_4;
                _2886 = frontier_phi_66_pred_5;
                uint _3043 = _3042 + 1u;
                if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3036 = _2884;
                    _3037 = _2886;
                    _3038 = _2888;
                    _3039 = _2890;
                    _3040 = _2892;
                    _3041 = _2894;
                    _3042 = _3043;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
        }
        uvec4 _2897 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2898 = _2897.z;
        uint _2900 = (_2898 >> 8u) & 15u;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        if (((4294967295u << _2900) & _2782) == 0u)
        {
            _3004 = _2883;
            _3006 = _2885;
            _3008 = _2887;
            _3010 = _2889;
            _3012 = _2891;
            _3014 = _2893;
        }
        else
        {
            float _3029 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
            float _3030 = _3029 * _2736;
            float _3031 = _3029 * _2737;
            float _3032 = _3029 * _2738;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2900 < ((_2898 >> 12u) & 15u))
            {
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3164 = _2883;
                float _3165 = _2885;
                float _3166 = _2887;
                float _3167 = _2889;
                float _3168 = _2891;
                float _3169 = _2893;
                uint _3170 = _2900;
                uint _3179;
                bool _3180;
                for (;;)
                {
                    _3179 = texelFetch(g_lightClassification, int((((_2776 << 5u) + (_2762 << 9u)) + (_3170 << 2u)) >> 2u)).x;
                    _3180 = _3179 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3180)
                    {
                        frontier_phi_77_pred = _3169;
                        frontier_phi_77_pred_1 = _3168;
                        frontier_phi_77_pred_2 = _3167;
                        frontier_phi_77_pred_3 = _3166;
                        frontier_phi_77_pred_4 = _3165;
                        frontier_phi_77_pred_5 = _3164;
                    }
                    else
                    {
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3386 = _3164;
                        float _3387 = _3165;
                        float _3388 = _3166;
                        float _3389 = _3167;
                        float _3390 = _3168;
                        float _3391 = _3169;
                        uint _3392 = _3179;
                        uint _3393;
                        vec4 _3418;
                        float _3419;
                        vec4 _3434;
                        vec3 _3446;
                        vec4 _3461;
                        vec4 _3476;
                        float _3522;
                        bool _3523;
                        for (;;)
                        {
                            uint _3403 = ((_3170 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3392));
                            _3393 = (_3392 + 4294967295u) & _3392;
                            uint _3405 = _3403 * 40u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            _3419 = _3418.w;
                            uint _3421 = (_3403 * 40u) + 4u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3403 * 40u) + 8u;
                            _3446 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x));
                            uint _3448 = (_3403 * 40u) + 16u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3463 = (_3403 * 40u) + 20u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3403 * 40u) + 24u;
                            vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3497 = (_3403 * 40u) + 28u;
                            vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            _3522 = fma(_2738, _3510.z, fma(_2737, _3510.y, _3510.x * _2736)) + _3510.w;
                            _3523 = !((fma(_2738, _3491.z, fma(_2737, _3491.y, _3491.x * _2736)) + _3491.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3523)
                            {
                                float _3550 = _3418.x - _2736;
                                float _3551 = _3418.y - _2737;
                                float _3552 = _3418.z - _2738;
                                float _3553 = dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552));
                                float _3556 = inversesqrt(_3553);
                                float _3557 = _3556 * _3550;
                                float _3558 = _3556 * _3551;
                                float _3559 = _3556 * _3552;
                                float _3563 = 1.0 - (_3553 / (_3419 * _3419));
                                float _4734 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3568 = sqrt(_3553) * _3434.w;
                                float _3570 = 1.39999997615814208984375 / (_3568 + 1.39999997615814208984375);
                                float _3571 = _3570 * _3570;
                                float _3574 = ((1.0 - _3571) * dot(vec3(_3557, _3558, _3559), vec3(_971, _974, _977))) + _3571;
                                float _3577 = _3568 * _3568;
                                float _3581 = (fma(_2738, _3461.z, fma(_2737, _3461.y, _3461.x * _2736)) + _3461.w) / _3522;
                                float _3582 = (fma(_2738, _3476.z, fma(_2737, _3476.y, _3476.x * _2736)) + _3476.w) / _3522;
                                float _3586 = 1.0 - dot(vec2(_3581, _3582), vec2(_3581, _3582));
                                float _4750 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3588 = _3587 * (((isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0))) * _3564) / ((_3577 * 0.699999988079071044921875) + 1.0));
                                float _3600 = exp2(log2(1.0 / ((_3577 * 3.5) + 5.0)) * 0.25);
                                float _3601 = 1.0 - _1046;
                                float _3608 = sqrt(1.0 - ((1.0 - (_3601 * _3601)) * (1.0 - (_3600 * _3600))));
                                float _3609 = _3608 * _3608;
                                float _3610 = _3609 * _3609;
                                float _3611 = _3557 - _3030;
                                float _3612 = _3558 - _3031;
                                float _3613 = _3559 - _3032;
                                float _3617 = inversesqrt(dot(vec3(_3611, _3612, _3613), vec3(_3611, _3612, _3613)));
                                float _3621 = dot(vec3(_971, _974, _977), vec3((-0.0) - _3030, (-0.0) - _3031, (-0.0) - _3032));
                                float _4761 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3624 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3625 = dot(vec3(_971, _974, _977), vec3(_3617 * _3611, _3617 * _3612, _3617 * _3613));
                                float _4772 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3628 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3632 = ((_3628 * _3628) * (_3610 + (-1.0))) + 1.0;
                                float _3633 = _3570 * _3609;
                                float _3634 = _3633 * _3633;
                                float _3640 = ((1.0 - _3634) * dot(vec3(_971, _974, _977), vec3(_3557, _3558, _3559))) + _3634;
                                float _4783 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3641 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                                float _3642 = 1.0 - _3609;
                                float _3652 = (0.5 / (((_3641 * ((_3624 * _3642) + _3609)) + 9.9999999392252902907785028219223e-09) + (((_3641 * _3642) + _3609) * _3624))) * _3641;
                                float _4794 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3662 = (_3587 * _3564) * (((_3610 * 3.1415927410125732421875) * (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) / ((_3632 * _3632) * ((_3577 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3588 * _3434.y;
                                frontier_phi_83_pred_1 = _3588 * _3434.x;
                                frontier_phi_83_pred_2 = _3662 * _3446.z;
                                frontier_phi_83_pred_3 = _3662 * _3446.y;
                                frontier_phi_83_pred_4 = _3662 * _3446.x;
                                frontier_phi_83_pred_5 = _3588 * _3434.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3670 = frontier_phi_83_pred;
                            _3669 = frontier_phi_83_pred_1;
                            _3668 = frontier_phi_83_pred_2;
                            _3667 = frontier_phi_83_pred_3;
                            _3666 = frontier_phi_83_pred_4;
                            _3671 = frontier_phi_83_pred_5;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            _3378 = _3671 + _3391;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            if (_3393 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3393;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3378;
                        frontier_phi_77_pred_1 = _3377;
                        frontier_phi_77_pred_2 = _3376;
                        frontier_phi_77_pred_3 = _3375;
                        frontier_phi_77_pred_4 = _3374;
                        frontier_phi_77_pred_5 = _3373;
                    }
                    _3015 = frontier_phi_77_pred;
                    _3013 = frontier_phi_77_pred_1;
                    _3011 = frontier_phi_77_pred_2;
                    _3009 = frontier_phi_77_pred_3;
                    _3007 = frontier_phi_77_pred_4;
                    _3005 = frontier_phi_77_pred_5;
                    uint _3171 = _3170 + 1u;
                    if (_3171 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3164 = _3005;
                        _3165 = _3007;
                        _3166 = _3009;
                        _3167 = _3011;
                        _3168 = _3013;
                        _3169 = _3015;
                        _3170 = _3171;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3009;
                frontier_phi_58_59_ladder_1 = _3015;
                frontier_phi_58_59_ladder_2 = _3013;
                frontier_phi_58_59_ladder_3 = _3011;
                frontier_phi_58_59_ladder_4 = _3007;
                frontier_phi_58_59_ladder_5 = _3005;
            }
            else
            {
                frontier_phi_58_59_ladder = _2887;
                frontier_phi_58_59_ladder_1 = _2893;
                frontier_phi_58_59_ladder_2 = _2891;
                frontier_phi_58_59_ladder_3 = _2889;
                frontier_phi_58_59_ladder_4 = _2885;
                frontier_phi_58_59_ladder_5 = _2883;
            }
            _3004 = frontier_phi_58_59_ladder_5;
            _3006 = frontier_phi_58_59_ladder_4;
            _3008 = frontier_phi_58_59_ladder;
            _3010 = frontier_phi_58_59_ladder_3;
            _3012 = frontier_phi_58_59_ladder_2;
            _3014 = frontier_phi_58_59_ladder_1;
        }
        float _3019 = isnan(1.0) ? _1030 : (isnan(_1030) ? 1.0 : min(_1030, 1.0));
        _2795 = (_3019 * _3010) + _2231;
        _2797 = (_3019 * _3012) + _2233;
        _2799 = (_3019 * _3014) + _2235;
        _2801 = ((_3004 * _1014) * _3019) + _2576;
        _2803 = ((_3006 * _1016) * _3019) + _2578;
        _2805 = ((_3008 * _1017) * _3019) + _2580;
    }
    else
    {
        _2795 = _2231;
        _2797 = _2233;
        _2799 = _2235;
        _2801 = _2576;
        _2803 = _2578;
        _2805 = _2580;
    }
    float _4810 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _4821 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4832 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _2822 = ((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2795 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1030))) + ((_2801 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    float _2823 = ((isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2797 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1030))) + ((_2803 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    float _2824 = ((isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0))) * (_2799 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1030))) + ((_2805 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    uint _2825 = _285 + 6u;
    float _2833 = _952 / cbSceneParam._m0[86u].x;
    float _2834 = _953 / cbSceneParam._m0[86u].y;
    vec4 _2848 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, (log2((isnan(cbSceneParam._m0[77u].w) ? _875 : (isnan(_875) ? cbSceneParam._m0[77u].w : min(_875, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2850 = _2848.x;
    float _2851 = _2848.y;
    float _2852 = _2848.z;
    float _2853 = _2848.w;
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    if (_875 > cbSceneParam._m0[78u].w)
    {
        float _2908 = isnan(_875) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _875 : min(cbSceneParam._m0[80u].w, _875));
        float _2909 = _2908 / _875;
        float _2920 = _2909 * _925;
        float _2921 = _926 * _2909;
        float _2922 = (-0.0) - _2921;
        float _2924 = _2909 * _927;
        float _2926 = (cbSceneParam._m0[77u].w * _2922) / _2908;
        float _2927 = _2926 + cbSceneParam._m0[79u].w;
        float _2928 = cbSceneParam._m0[79u].w - _2921;
        float _2934 = sqrt(((_2920 * _2920) + (_2921 * _2921)) + (_2924 * _2924));
        float _2937 = (1.0 - (cbSceneParam._m0[77u].w / _2908)) * _2934;
        float _2942 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2944 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3121;
        if (abs((_2922 - _2926) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3121 = ((((_2927 > 0.0) ? exp2(_2942 * _2927) : (2.0 - exp2(_2944 * _2927))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2937;
        }
        else
        {
            float _3065 = 1.0 / cbSceneParam._m0[80u].x;
            float _3066 = isnan(_2928) ? _2927 : (isnan(_2927) ? _2928 : max(_2927, _2928));
            float _3067 = isnan(_2928) ? _2927 : (isnan(_2927) ? _2928 : min(_2927, _2928));
            float _3076 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : min(_3066, 0.0));
            float _3077 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : min(_3067, 0.0));
            _3121 = ((abs(_2934 / _2922) * cbSceneParam._m0[80u].y) * ((((_3076 - _3077) * 2.0) - ((exp2(_2942 * (isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0)))) - exp2(_2942 * (isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))))) * _3065)) - ((exp2(_2944 * _3076) - exp2(_2944 * _3077)) * _3065))) + (_2937 * cbSceneParam._m0[80u].z);
        }
        vec4 _3123 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, 1.0), 0.0);
        float _3132 = exp2((_3121 * (-1.44269502162933349609375)) * (1.0 - _3123.w));
        float _3133 = log2(_3132);
        float _3149 = log2(_2853);
        _2946 = (exp2(_3149 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].x)) * _3123.x) / cbSceneParam._m0[78u].x)) + _2850;
        _2948 = (exp2(_3149 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].y)) * _3123.y) / cbSceneParam._m0[78u].y)) + _2851;
        _2950 = (exp2(_3149 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].z)) * _3123.z) / cbSceneParam._m0[78u].z)) + _2852;
        _2952 = _3132 * _2853;
    }
    else
    {
        _2946 = _2850;
        _2948 = _2851;
        _2950 = _2852;
        _2952 = _2853;
    }
    bool _3159;
    vec4 _2962;
    vec4 _2984;
    float _2986;
    float _2990;
    float _2991;
    float _2992;
    float _2993;
    bool _3003;
    for (;;)
    {
        _2962 = cbMatDynParam._m0[0u];
        float _2964 = roundEven(_2962.y);
        bool _2965 = _2964 == 3.0;
        float _2966 = log2(_2952);
        float _2973 = exp2(_2966 * cbSceneParam._m0[78u].x) * _2822;
        float _2974 = exp2(_2966 * cbSceneParam._m0[78u].y) * _2823;
        float _2975 = exp2(_2966 * cbSceneParam._m0[78u].z) * _2824;
        float _2982 = _941 + (-0.5);
        _2984 = cbMtdParam._m0[1u];
        _2986 = _2984.y * _2982;
        float _2989 = (_2964 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2990 = _2989 * (_2965 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2946)));
        _2991 = _2989 * (_2965 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2948)));
        _2992 = _2989 * (_2965 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2950)));
        _2993 = _2982 * 0.999000012874603271484375;
        _3003 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3003)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _2993) < 0.5)
            {
                _3159 = true;
                break;
            }
        }
        uint _3100 = _990 + uint(_2962.w);
        if ((cbInstanceData._m0[_3100].w < 1.0) && ((cbInstanceData._m0[_3100].w + _2993) < 0.5))
        {
            _3159 = true;
            break;
        }
        if ((_2986 + 1.0) < _2984.x)
        {
            _3159 = true;
            break;
        }
        _3159 = false;
        break;
    }
    float _3364;
    if (_3159)
    {
        discard_state = true;
        _3364 = 0.0;
    }
    else
    {
        _3364 = cbInstanceData._m0[_2825].w;
    }
    SV_Target.x = _2990;
    SV_Target.y = _2991;
    SV_Target.z = _2992;
    SV_Target.w = _3364;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2825].w;
    discard_exit();
}


