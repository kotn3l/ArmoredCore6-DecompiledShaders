#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1424;
float _3828;
float _3829;
float _3830;
float _3831;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _368 = _366.x;
    float _380 = dot(vec4(_368, _366.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _397 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_368 - _380) * cbMtdParam._m0[24u].y) + _380) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3840 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _405 = (_398 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _406 = (_398 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _407 = (_398 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _452 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _471 = _469.x;
    float _472 = _469.y;
    float _473 = _469.z;
    float _482 = ((_452.z - _473) * _398) + _473;
    float _485 = ((((_452.x - _471) * _398) + _471) * 2.0) + (-1.0);
    float _486 = ((((_452.y - _472) * _398) + _472) * 2.0) + (-1.0);
    float _487 = dot(vec2(_485, _486), vec2(_485, _486));
    float _3851 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _492 = sqrt(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _524 = (_485 + ((((_425.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_512.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _525 = (_486 + ((((_425.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_512.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _528 = fma(_492, _249, fma(_525, _256, _524 * _242));
    float _531 = fma(_492, _250, fma(_525, _257, _524 * _243));
    float _534 = fma(_492, _251, fma(_525, _258, _524 * _244));
    float _538 = inversesqrt(dot(vec3(_528, _531, _534), vec3(_528, _531, _534)));
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _567 = _565.x;
    float _568 = 1.0 - _567;
    float _572 = ((_567 - _568) * cbMtdParam._m0[24u].z) + _568;
    float _574 = (cbMtdParam._m0[19u].x + dot(vec4(_538 * _528, _538 * _531, _538 * _534, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_572 * cbMtdParam._m0[21u].z);
    float _3862 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _577 = (-0.0) - cbMtdParam._m0[24u].x;
    float _579 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _579 : (isnan(_579) ? 1.0 : min(_579, 1.0));
    float _587 = _575 - ((_575 * TEXCOORD_8.x) * _580);
    float _588 = _575 - ((_575 * TEXCOORD_8.y) * _580);
    float _589 = _575 - ((_575 * TEXCOORD_8.z) * _580);
    float _596 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _600 = ((isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : min(_596, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _608 = (_600 - (((_572 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _600))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3893 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _613 = ((_587 * (cbMtdParam._m0[17u].x - _405)) * _609) + _405;
    float _614 = ((_588 * (cbMtdParam._m0[17u].y - _406)) * _609) + _406;
    float _615 = ((_589 * (cbMtdParam._m0[17u].z - _407)) * _609) + _407;
    vec4 _627 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _629 = _627.x;
    float _630 = 1.0 - _629;
    float _657 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_629 - _630) * cbMtdParam._m0[24u].w) + _630) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3904 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _666 = ((((cbMtdParam._m0[10u].x - _613) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _658) + _613;
    float _667 = ((((cbMtdParam._m0[10u].y - _614) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _658) + _614;
    float _668 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _615)) * _658) + _615;
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _696 = _694.x;
    float _714 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _696) * _398) + _696;
    float _718 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _714) * cbMtdParam._m0[19u].z) + _714;
    float _721 = _718 - ((_609 * _587) * _718);
    float _723 = _721 - (_721 * _658);
    float _728 = (((_425.z - _482) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _482;
    float _732 = ((_512.z - _728) * cbMtdParam._m0[19u].w) + _728;
    vec4 _746 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _753 = (_746.x * 2.0) + (-1.0);
    float _754 = (_746.y * 2.0) + (-1.0);
    float _755 = dot(vec2(_753, _754), vec2(_753, _754));
    float _3915 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _764 = (((_746.z - _732) * _587) * _609) + _732;
    float _767 = ((cbMtdParam._m0[23u].y - _764) * _658) + _764;
    vec4 _786 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _792 = (_786.x * 2.0) + (-1.0);
    float _793 = (_786.y * 2.0) + (-1.0);
    float _794 = dot(vec2(_792, _793), vec2(_792, _793));
    float _3926 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _814 = (((cbMtdParam._m0[21u].x * _524) + ((_753 - _524) * _587)) * _609) + _524;
    float _815 = (((cbMtdParam._m0[21u].x * _525) + ((_754 - _525) * _588)) * _609) + _525;
    float _816 = (((sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) - _492) * _589) * _609) + _492;
    float _827 = (((_792 - _814) + (_814 * cbMtdParam._m0[22u].z)) * _658) + _814;
    float _828 = (((_793 - _815) + (_815 * cbMtdParam._m0[22u].z)) * _658) + _815;
    float _829 = ((sqrt(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) - _816) * _658) + _816;
    float _831 = cbMtdParam._m0[22u].x + _512.w;
    float _834 = fma(_829, _249, fma(_828, _256, _827 * _242));
    float _837 = fma(_829, _250, fma(_828, _257, _827 * _243));
    float _840 = fma(_829, _251, fma(_828, _258, _827 * _244));
    float _844 = inversesqrt(dot(vec3(_834, _837, _840), vec3(_834, _837, _840)));
    float _845 = _844 * _834;
    float _846 = _844 * _837;
    float _847 = _844 * _840;
    float _3937 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _848 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _3959 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3970 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3981 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3992 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _853 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _867 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _917 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _907);
    float _918 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _907);
    float _919 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _907);
    float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
    float _924 = _917 * _923;
    float _925 = _918 * _923;
    float _926 = _919 * _923;
    vec4 _931 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _933 = _931.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1105 = sqrt(((_917 * _917) + (_918 * _918)) + (_919 * _919));
        float _1111 = (cbMatDynParam._m0[5u].x * _1105) + cbMatDynParam._m0[5u].y;
        float _4003 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1116 = (cbMatDynParam._m0[5u].z * _1105) + cbMatDynParam._m0[5u].w;
        float _4014 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) - _1112)) + _1112) < ((_933 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _944 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _945 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _963 = fma(_847, cbSceneParam._m0[5u].z, fma(_846, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _845));
    float _966 = fma(_847, cbSceneParam._m0[6u].z, fma(_846, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _845));
    float _969 = fma(_847, cbSceneParam._m0[7u].z, fma(_846, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _845));
    uint _982 = _261 + 9u;
    uint _983 = _982 + uint(cbMatDynParam._m0[0u].w);
    float _989 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * cbInstanceData._m0[_983].x;
    float _990 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_983].y;
    float _991 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_983].z;
    float _4025 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _995 = 1.0 - _853;
    float _996 = _992 * _995;
    float _997 = _993 * _995;
    float _998 = _994 * _995;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _853;
    float _1004 = (_993 + (-0.039999999105930328369140625)) * _853;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _853;
    float _1006 = _1003 + 0.039999999105930328369140625;
    float _1008 = _1004 + 0.039999999105930328369140625;
    float _1009 = _1005 + 0.039999999105930328369140625;
    vec4 _1018 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _944, cbSceneParam._m0[86u].y * _945));
    float _1022 = ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * TEXCOORD_5.w) * _1018.x;
    float _1023 = dot(vec3(_845, _846, _847), vec3(_924, _925, _926));
    float _1026 = _1023 * 2.0;
    float _1030 = (_1026 * _845) - _924;
    float _1031 = (_1026 * _846) - _925;
    float _1032 = (_1026 * _847) - _926;
    float _1036 = abs(dot(vec3(_924, _925, _926), vec3(_845, _846, _847)));
    float _4058 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1038 = sqrt(_848);
    float _1051 = exp2((_1038 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1038 * 3.0));
    float _1057 = (1.0 - _1051) * ((_1038 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1058 = _1051 * _1038;
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1423;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1148 = fma(_1094, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1086));
        float _1152 = fma(_1094, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1086));
        float _1156 = fma(_1094, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1086));
        float _1181 = _1086 + _845;
        float _1182 = _1090 + _846;
        float _1183 = _1094 + _847;
        float _1193 = fma(_1183, cbModelParam._m0[26u].z, fma(_1182, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1181)) - _1148;
        float _1194 = fma(_1183, cbModelParam._m0[27u].z, fma(_1182, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1181)) - _1152;
        float _1195 = fma(_1183, cbModelParam._m0[28u].z, fma(_1182, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1181)) - _1156;
        float _1199 = inversesqrt(dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195)));
        float _1212 = ((_1199 * _1193) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1148 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1199 * _1194) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1152 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1199 * _1195) / cbModelParam._m0[34u].z) + ((((((_1156 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        float _1251 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1217.x + (-0.5));
        float _1253 = _1251 * (_1217.y + (-0.5));
        float _1254 = _1251 * (_1217.z + (-0.5));
        float _1261 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1224.x + (-0.5));
        float _1263 = _1261 * (_1224.y + (-0.5));
        float _1264 = _1261 * (_1224.z + (-0.5));
        float _1271 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1231.x + (-0.5));
        float _1273 = _1271 * (_1231.y + (-0.5));
        float _1274 = _1271 * (_1231.z + (-0.5));
        float _1281 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1238.x + (-0.5));
        float _1283 = _1281 * (_1238.y + (-0.5));
        float _1284 = _1281 * (_1238.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1305 = (dot(vec3(_845, _846, _847), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1315 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4106 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1317 + 1.0))) + _1322) * _1285;
        float _1332 = _1253 * 0.5;
        float _1333 = _1263 * 0.5;
        float _1334 = _1273 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_845, _846, _847), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4139 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1359 + 1.0))) + _1364) * _1286;
        float _1374 = _1254 * 0.5;
        float _1375 = _1264 * 0.5;
        float _1376 = _1274 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_845, _846, _847), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4172 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1401 + 1.0))) + _1406) * _1287;
        _1423 = _1254;
        _1425 = _1253;
        _1426 = _1252;
        _1427 = _1264;
        _1428 = _1263;
        _1429 = _1262;
        _1430 = _1274;
        _1431 = _1273;
        _1432 = _1272;
        _1433 = _1287;
        _1434 = _1286;
        _1435 = _1285;
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
    }
    else
    {
        _1423 = _1424;
        _1425 = _1424;
        _1426 = _1424;
        _1427 = _1424;
        _1428 = _1424;
        _1429 = _1424;
        _1430 = _1424;
        _1431 = _1424;
        _1432 = _1424;
        _1433 = _1424;
        _1434 = _1424;
        _1435 = _1424;
        _1436 = 0.0;
        _1437 = 0.0;
        _1438 = 0.0;
    }
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1466 = fma(_1094, cbModelParam._m0[30u].z, fma(_1090, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1086));
        float _1470 = fma(_1094, cbModelParam._m0[31u].z, fma(_1090, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1086));
        float _1474 = fma(_1094, cbModelParam._m0[32u].z, fma(_1090, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1086));
        float _1497 = _1086 + _845;
        float _1498 = _1090 + _846;
        float _1499 = _1094 + _847;
        float _1509 = fma(_1499, cbModelParam._m0[30u].z, fma(_1498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1497)) - _1466;
        float _1510 = fma(_1499, cbModelParam._m0[31u].z, fma(_1498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1497)) - _1470;
        float _1511 = fma(_1499, cbModelParam._m0[32u].z, fma(_1498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1497)) - _1474;
        float _1515 = inversesqrt(dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511)));
        float _1528 = ((_1515 * _1509) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1466 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1515 * _1510) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1470 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1515 * _1511) / cbModelParam._m0[35u].z) + ((((((_1474 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        float _1565 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1532.x + (-0.5));
        float _1567 = _1565 * (_1532.y + (-0.5));
        float _1568 = _1565 * (_1532.z + (-0.5));
        float _1575 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1539.x + (-0.5));
        float _1577 = _1575 * (_1539.y + (-0.5));
        float _1578 = _1575 * (_1539.z + (-0.5));
        float _1585 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1546.x + (-0.5));
        float _1587 = _1585 * (_1546.y + (-0.5));
        float _1588 = _1585 * (_1546.z + (-0.5));
        float _1595 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1553.x + (-0.5));
        float _1597 = _1595 * (_1553.y + (-0.5));
        float _1598 = _1595 * (_1553.z + (-0.5));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = _1566 * 0.5;
        float _1603 = _1576 * 0.5;
        float _1604 = _1586 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_845, _846, _847), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4235 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1629 + 1.0))) + _1634) * _1599;
        float _1644 = _1567 * 0.5;
        float _1645 = _1577 * 0.5;
        float _1646 = _1587 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_845, _846, _847), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4268 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1671 + 1.0))) + _1676) * _1600;
        float _1686 = _1568 * 0.5;
        float _1687 = _1578 * 0.5;
        float _1688 = _1588 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_845, _846, _847), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4301 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1713 + 1.0))) + _1718) * _1601;
        _1735 = _1568;
        _1736 = _1567;
        _1737 = _1566;
        _1738 = _1578;
        _1739 = _1577;
        _1740 = _1576;
        _1741 = _1588;
        _1742 = _1587;
        _1743 = _1586;
        _1744 = _1601;
        _1745 = _1600;
        _1746 = _1599;
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
    }
    else
    {
        _1735 = _1424;
        _1736 = _1424;
        _1737 = _1424;
        _1738 = _1424;
        _1739 = _1424;
        _1740 = _1424;
        _1741 = _1424;
        _1742 = _1424;
        _1743 = _1424;
        _1744 = _1424;
        _1745 = _1424;
        _1746 = _1424;
        _1747 = 0.0;
        _1748 = 0.0;
        _1749 = 0.0;
    }
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1436)) + _1436;
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1437)) + _1437;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1438)) + _1438;
    float _1782 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1759));
    float _1803 = _1030 * 0.5;
    float _1804 = _1031 * 0.5;
    float _1805 = _1032 * 0.5;
    float _1806 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1809 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1812 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1846;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1819 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1423, _1427, _1430, _1433));
        float _1823 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1425, _1428, _1431, _1434));
        float _1827 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1426, _1429, _1432, _1435));
        float _1834 = dot(vec4(cbModelParam._m0[39u]), vec4(_1803, _1804, _1805, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1857;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1848 = dot(vec4(cbModelParam._m0[40u]), vec4(_1803, _1804, _1805, 1.0));
        _1857 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1848) ? 0.0 : (isnan(0.0) ? _1848 : max(0.0, _1848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1857 = 1.0;
    }
    float _1861 = (_1857 * cbModelParam._m0[1u].x) + (_1846 * (1.0 - cbModelParam._m0[1u].x));
    float _1871 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _848);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1871 : min(cbModelParam._m0[25u].z, _1871));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1920 = fma(_1094, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1086)) + cbModelParam._m0[13u].w;
        float _1924 = fma(_1094, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1086)) + cbModelParam._m0[14u].w;
        float _1928 = fma(_1094, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1086)) + cbModelParam._m0[15u].w;
        float _1931 = fma(_1032, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030));
        float _1934 = fma(_1032, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030));
        float _1937 = fma(_1032, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030));
        float _1965;
        if (_1931 > 0.0)
        {
            _1965 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1965 = frontier_phi_17_15_ladder;
        }
        float _2189;
        if (_1934 > 0.0)
        {
            _2189 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2189 = frontier_phi_26_22_ladder;
        }
        float _2446;
        if (_1937 > 0.0)
        {
            _2446 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2446 = frontier_phi_38_33_ladder;
        }
        float _2448 = isnan(_2189) ? _1965 : (isnan(_1965) ? _2189 : min(_1965, _2189));
        float _2449 = isnan(_2446) ? _2448 : (isnan(_2448) ? _2446 : min(_2448, _2446));
        float _2453 = (_2449 * _1931) + _1920;
        float _2454 = (_2449 * _1934) + _1924;
        float _2455 = (_2449 * _1937) + _1928;
        float _2456 = _2449 * 9.9999997473787516355514526367188e-05;
        float _2458 = (-1.0) - _2456;
        float _2460 = _2456 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2455 > _2460) || ((_2455 < _2458) || ((_2454 > _2460) || ((_2454 < _2458) || ((_2453 < _2458) || (_2453 > _2460))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2583 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2455, cbModelParam._m0[9u].z, fma(_2454, cbModelParam._m0[9u].y, _2453 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2455, cbModelParam._m0[10u].z, fma(_2454, cbModelParam._m0[10u].y, _2453 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2455, cbModelParam._m0[11u].z, fma(_2454, cbModelParam._m0[11u].y, _2453 * cbModelParam._m0[11u].x))), _1872);
            frontier_phi_16_38_ladder = _2583.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2583.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2583.x * cbModelParam._m0[1u].y;
        }
        _1953 = frontier_phi_16_38_ladder_2;
        _1955 = frontier_phi_16_38_ladder_1;
        _1957 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1030, _1031, _1032), _1872);
        _1953 = _1941.x * cbModelParam._m0[1u].y;
        _1955 = _1941.y * cbModelParam._m0[1u].y;
        _1957 = _1941.z * cbModelParam._m0[1u].y;
    }
    float _1961 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _848);
    float _1962 = isnan(_1961) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1961 : min(cbModelParam._m0[25u].w, _1961));
    float _2052;
    float _2054;
    float _2056;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2016 = fma(_1094, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1086)) + cbModelParam._m0[21u].w;
        float _2020 = fma(_1094, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1086)) + cbModelParam._m0[22u].w;
        float _2024 = fma(_1094, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1086)) + cbModelParam._m0[23u].w;
        float _2027 = fma(_1032, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030));
        float _2030 = fma(_1032, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030));
        float _2033 = fma(_1032, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030));
        float _2194;
        if (_2027 > 0.0)
        {
            _2194 = abs((1.0 - _2016) / _2027);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2016 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2194 = frontier_phi_28_24_ladder;
        }
        float _2473;
        if (_2030 > 0.0)
        {
            _2473 = abs((1.0 - _2020) / _2030);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2020 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2473 = frontier_phi_40_35_ladder;
        }
        float _2686;
        if (_2033 > 0.0)
        {
            _2686 = abs((1.0 - _2024) / _2033);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2024 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2686 = frontier_phi_49_46_ladder;
        }
        float _2688 = isnan(_2473) ? _2194 : (isnan(_2194) ? _2473 : min(_2194, _2473));
        float _2689 = isnan(_2686) ? _2688 : (isnan(_2688) ? _2686 : min(_2688, _2686));
        float _2693 = (_2689 * _2027) + _2016;
        float _2694 = (_2689 * _2030) + _2020;
        float _2695 = (_2689 * _2033) + _2024;
        float _2696 = _2689 * 9.9999997473787516355514526367188e-05;
        float _2697 = (-1.0) - _2696;
        float _2699 = _2696 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2695 > _2699) || ((_2695 < _2697) || ((_2694 > _2699) || ((_2694 < _2697) || ((_2693 < _2697) || (_2693 > _2699))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2695, cbModelParam._m0[17u].z, fma(_2694, cbModelParam._m0[17u].y, _2693 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2695, cbModelParam._m0[18u].z, fma(_2694, cbModelParam._m0[18u].y, _2693 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2695, cbModelParam._m0[19u].z, fma(_2694, cbModelParam._m0[19u].y, _2693 * cbModelParam._m0[19u].x))), _1962);
            frontier_phi_25_49_ladder = _2894.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2894.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2894.x * cbModelParam._m0[1u].z;
        }
        _2052 = frontier_phi_25_49_ladder_2;
        _2054 = frontier_phi_25_49_ladder_1;
        _2056 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2036 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1030, _1031, _1032), _1962);
        _2052 = _2036.x * cbModelParam._m0[1u].z;
        _2054 = _2036.y * cbModelParam._m0[1u].z;
        _2056 = _2036.z * cbModelParam._m0[1u].z;
    }
    float _2069 = (((_1057 * _1006) + _1058) * _1022) * ((cbModelParam._m0[1u].w * (_2052 - _1953)) + _1953);
    float _2071 = (((_1057 * _1008) + _1058) * _1022) * ((cbModelParam._m0[1u].w * (_2054 - _1955)) + _1955);
    float _2073 = (((_1057 * _1009) + _1058) * _1022) * ((cbModelParam._m0[1u].w * (_2056 - _1957)) + _1957);
    float _2076 = fma(_2073, cbSceneParam._m0[89u].z, fma(_2071, cbSceneParam._m0[89u].y, _2069 * cbSceneParam._m0[89u].x));
    float _2079 = fma(_2073, cbSceneParam._m0[90u].z, fma(_2071, cbSceneParam._m0[90u].y, _2069 * cbSceneParam._m0[90u].x));
    float _2082 = fma(_2073, cbSceneParam._m0[91u].z, fma(_2071, cbSceneParam._m0[91u].y, _2069 * cbSceneParam._m0[91u].x));
    vec4 _2090 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_944, _945));
    float _2092 = _2090.w;
    float _2104 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2092);
    float _2105 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2092);
    float _2106 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2092);
    uvec4 _2110 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2112 = _2110.x * 14u;
    uint _2113 = _2112 + 13u;
    float _2120 = _1022 + (-1.0);
    float _2125 = (cbLight._m0[_2113].x * _2120) + 1.0;
    float _2126 = (cbLight._m0[_2113].y * _2120) + 1.0;
    float _2127 = (cbLight._m0[_2113].z * _2120) + 1.0;
    float _2128 = (cbLight._m0[_2113].w * _2120) + 1.0;
    uint _2129 = _2112 + 5u;
    float _2135 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2139 = _2112 + 4u;
    float _2148 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
    uint _2152 = _2112 | 1u;
    float _2163 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_845, _846, _847));
    float _2166 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_845, _846, _847));
    float _4437 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _4448 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2171 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * 0.3183098733425140380859375;
    float _2173 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * 0.3183098733425140380859375;
    float _2180 = ((cbLight._m0[_2129].x * _2135) * _2173) + (((cbLight._m0[_2139].x * _2104) * _2148) * _2171);
    float _2181 = ((_2135 * cbLight._m0[_2129].y) * _2173) + (((cbLight._m0[_2139].y * _2105) * _2148) * _2171);
    float _2182 = ((_2135 * cbLight._m0[_2129].z) * _2173) + (((cbLight._m0[_2139].z * _2106) * _2148) * _2171);
    uvec4 _2186 = floatBitsToUint(cbLight._m0[_2112 + 12u]);
    bool _2188 = _2186.x == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2188)
    {
        _2199 = _2180;
        _2201 = _2181;
        _2203 = _2182;
    }
    else
    {
        uint _2207 = _2112 + 6u;
        float _2223 = (dot(vec3(cbLight._m0[_2112 + 2u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4459 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2226 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2199 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _2180;
        _2201 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _2181;
        _2203 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _2182;
    }
    bool _2206 = _2186.y == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2206)
    {
        _2244 = _2199;
        _2246 = _2201;
        _2248 = _2203;
    }
    else
    {
        uint _2417 = _2112 + 7u;
        float _2433 = (dot(vec3(cbLight._m0[_2112 + 3u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2434 = _2433 * _2433;
        float _4475 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2435 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2436 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2244 = (((cbLight._m0[_2417].x * 0.3183098733425140380859375) * _2435) * _2436) + _2199;
        _2246 = (((cbLight._m0[_2417].y * 0.3183098733425140380859375) * _2435) * _2436) + _2201;
        _2248 = (((cbLight._m0[_2417].z * 0.3183098733425140380859375) * _2435) * _2436) + _2203;
    }
    uint _2251 = _2112 + 8u;
    float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _848) * 0.949999988079071044921875);
    float _2265 = _2264 * _2264;
    float _2266 = cbLight._m0[_2112].x + _924;
    float _2267 = cbLight._m0[_2112].y + _925;
    float _2268 = cbLight._m0[_2112].z + _926;
    float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
    float _2273 = _2272 * _2266;
    float _2274 = _2272 * _2267;
    float _2275 = _2272 * _2268;
    float _2276 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2112].xyz));
    float _4491 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _4502 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _2280 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2281 = dot(vec3(_845, _846, _847), vec3(_2273, _2274, _2275));
    float _4513 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2273, _2274, _2275));
    float _4524 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2265 * _2265;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
    float _2302 = 0.959999978542327880859375 - _1003;
    float _2304 = 0.959999978542327880859375 - _1004;
    float _2305 = 0.959999978542327880859375 - _1005;
    float _2312 = 1.0 - _2265;
    float _2323 = (0.5 / (((_2280 * ((_2279 * _2312) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2312) + _2265) * _2279))) * _2279;
    float _4535 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2325 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    uint _2339 = _2112 + 9u;
    float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _848) * 0.949999988079071044921875);
    float _2351 = _2350 * _2350;
    float _2352 = cbLight._m0[_2152].x + _924;
    float _2353 = cbLight._m0[_2152].y + _925;
    float _2354 = cbLight._m0[_2152].z + _926;
    float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
    float _2359 = _2358 * _2352;
    float _2360 = _2358 * _2353;
    float _2361 = _2358 * _2354;
    float _2362 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2152].xyz));
    float _4546 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2366 = dot(vec3(_845, _846, _847), vec3(_2359, _2360, _2361));
    float _4557 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2370 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2359, _2360, _2361));
    float _4568 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2374 = _2351 * _2351;
    float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
    float _2385 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
    float _2392 = 1.0 - _2351;
    float _2402 = (0.5 / (((_2280 * ((_2365 * _2392) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2392) + _2351) * _2365))) * _2365;
    float _4579 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2404 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
    float _2414 = (((((_2385 * _2302) + _1006) * cbLight._m0[_2339].x) * _2404) * _2135) + ((((cbLight._m0[_2251].x * _2104) * ((_2301 * _2302) + _1006)) * _2325) * _2148);
    float _2415 = (((((_2385 * _2304) + _1008) * cbLight._m0[_2339].y) * _2404) * _2135) + ((((cbLight._m0[_2251].y * _2105) * ((_2301 * _2304) + _1008)) * _2325) * _2148);
    float _2416 = (((((_2385 * _2305) + _1009) * cbLight._m0[_2339].z) * _2404) * _2135) + ((((cbLight._m0[_2251].z * _2106) * ((_2301 * _2305) + _1009)) * _2325) * _2148);
    float _2478;
    float _2480;
    float _2482;
    if (_2188)
    {
        _2478 = _2414;
        _2480 = _2415;
        _2482 = _2416;
    }
    else
    {
        uint _2484 = _2112 + 2u;
        uint _2488 = _2112 + 10u;
        float _2502 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2484].w)) * _848) * 0.949999988079071044921875);
        float _2503 = _2502 * _2502;
        float _2504 = cbLight._m0[_2484].x + _924;
        float _2505 = cbLight._m0[_2484].y + _925;
        float _2506 = cbLight._m0[_2484].z + _926;
        float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
        float _2511 = _2510 * _2504;
        float _2512 = _2510 * _2505;
        float _2513 = _2510 * _2506;
        float _2514 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2484].xyz));
        float _4590 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2517 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2518 = dot(vec3(_845, _846, _847), vec3(_2511, _2512, _2513));
        float _4601 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2522 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_2511, _2512, _2513));
        float _4612 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2526 = _2503 * _2503;
        float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
        float _2537 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
        float _2544 = 1.0 - _2503;
        float _2554 = (0.5 / (((_2280 * ((_2517 * _2544) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2544) + _2503) * _2517))) * _2517;
        float _4623 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2556 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
        float _2557 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2478 = (((((_2537 * _2302) + _1006) * cbLight._m0[_2488].x) * _2556) * _2557) + _2414;
        _2480 = (((((_2537 * _2304) + _1008) * cbLight._m0[_2488].y) * _2556) * _2557) + _2415;
        _2482 = (((((_2537 * _2305) + _1009) * cbLight._m0[_2488].z) * _2556) * _2557) + _2416;
    }
    float _2592;
    float _2594;
    float _2596;
    if (_2206)
    {
        _2592 = _2478;
        _2594 = _2480;
        _2596 = _2482;
    }
    else
    {
        uint _2603 = _2112 + 3u;
        uint _2607 = _2112 + 11u;
        float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2603].w)) * _848) * 0.949999988079071044921875);
        float _2622 = _2621 * _2621;
        float _2623 = cbLight._m0[_2603].x + _924;
        float _2624 = cbLight._m0[_2603].y + _925;
        float _2625 = cbLight._m0[_2603].z + _926;
        float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
        float _2630 = _2629 * _2623;
        float _2631 = _2629 * _2624;
        float _2632 = _2629 * _2625;
        float _2633 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2603].xyz));
        float _4639 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2637 = dot(vec3(_845, _846, _847), vec3(_2630, _2631, _2632));
        float _4650 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2641 = dot(vec3(cbLight._m0[_2603].xyz), vec3(_2630, _2631, _2632));
        float _4661 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2645 = _2622 * _2622;
        float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
        float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
        float _2663 = 1.0 - _2622;
        float _2673 = (0.5 / (((_2280 * ((_2636 * _2663) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2663) + _2622) * _2636))) * _2636;
        float _4672 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2675 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
        float _2676 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2592 = (((((_2656 * _2302) + _1006) * cbLight._m0[_2607].x) * _2675) * _2676) + _2478;
        _2594 = (((((_2656 * _2304) + _1008) * cbLight._m0[_2607].y) * _2675) * _2676) + _2480;
        _2596 = (((((_2656 * _2305) + _1009) * cbLight._m0[_2607].z) * _2675) * _2676) + _2482;
    }
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    if (_2110.y == 0u)
    {
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2751;
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2751;
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2751;
        uvec4 _2766 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2767 = _2766.x;
        uint _2778 = uint((float(_2766.y) * floor(float(uint(cbSceneParam._m0[85u].y * _945) / _2767))) + floor(float(uint(cbSceneParam._m0[85u].x * _944) / _2767)));
        float _2788 = (log2(_2754 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2789 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        uint _2792 = uint(isnan(14.0) ? _2789 : (isnan(_2789) ? 14.0 : min(_2789, 14.0)));
        uvec4 _2797 = texelFetch(g_lightClusterGridBuffer, int(((_2792 << 2u) + (_2778 << 6u)) >> 2u));
        uint _2798 = _2797.x;
        uint _2799 = _2766.z;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        if (((((1u << ((_2799 >> 4u) & 15u)) + 4294967295u) & _2798) == 0u) || ((_2799 & 240u) == 0u))
        {
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
        }
        else
        {
            float _2900;
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            uint _3057 = 0u;
            uint _3066;
            bool _3067;
            for (;;)
            {
                _3066 = texelFetch(g_lightClassification, int((((_2792 << 5u) + (_2778 << 9u)) + (_3057 << 2u)) >> 2u)).x;
                _3067 = _3066 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3067)
                {
                    frontier_phi_66_pred = _3051;
                    frontier_phi_66_pred_1 = _3056;
                    frontier_phi_66_pred_2 = _3055;
                    frontier_phi_66_pred_3 = _3054;
                    frontier_phi_66_pred_4 = _3053;
                    frontier_phi_66_pred_5 = _3052;
                }
                else
                {
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    uint _3202;
                    _3196 = _3051;
                    _3197 = _3052;
                    _3198 = _3053;
                    _3199 = _3054;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3066;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    for (;;)
                    {
                        uint _3206 = uint(findLSB(_3202)) + (_3057 << 5u);
                        uint _3203 = (_3202 + 4294967295u) & _3202;
                        uint _3208 = _3206 * 48u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 3u)).x));
                        uint _3228 = (_3206 * 48u) + 4u;
                        vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 3u)).x));
                        uint _3247 = (_3206 * 48u) + 8u;
                        vec3 _3258 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x));
                        float _3262 = _3222.x - _2752;
                        float _3263 = _3222.y - _2753;
                        float _3264 = _3222.z - _2754;
                        float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                        float _3268 = inversesqrt(_3265);
                        float _3269 = _3268 * _3262;
                        float _3270 = _3268 * _3263;
                        float _3271 = _3268 * _3264;
                        float _3272 = dot(vec3(_963, _966, _969), vec3(_3269, _3270, _3271));
                        float _3277 = 1.0 - (_3265 * _3222.w);
                        float _4698 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3279 = sqrt(_3265) * _3241.w;
                        float _3282 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                        float _3283 = _3282 * _3282;
                        float _3286 = ((1.0 - _3283) * _3272) + _3283;
                        float _3289 = _3279 * _3279;
                        float _3293 = ((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3278) / ((_3289 * 0.699999988079071044921875) + 1.0);
                        float _3297 = (-0.0) - _2752;
                        float _3298 = (-0.0) - _2753;
                        float _3299 = (-0.0) - _2754;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3314 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                        float _3315 = 1.0 - _1038;
                        float _3322 = sqrt(1.0 - ((1.0 - (_3315 * _3315)) * (1.0 - (_3314 * _3314))));
                        float _3323 = _3322 * _3322;
                        float _3324 = _3323 * _3323;
                        float _3325 = _3304 + _3269;
                        float _3326 = _3305 + _3270;
                        float _3327 = _3306 + _3271;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3335 = dot(vec3(_963, _966, _969), vec3(_3304, _3305, _3306));
                        float _4714 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3338 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3339 = dot(vec3(_963, _966, _969), vec3(_3331 * _3325, _3331 * _3326, _3331 * _3327));
                        float _4725 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3342 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3346 = ((_3342 * _3342) * (_3324 + (-1.0))) + 1.0;
                        float _3347 = _3282 * _3323;
                        float _3348 = _3347 * _3347;
                        float _3351 = ((1.0 - _3348) * _3272) + _3348;
                        float _4736 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3352 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3353 = 1.0 - _3323;
                        float _3363 = (0.5 / (((_3352 * ((_3338 * _3353) + _3323)) + 9.9999999392252902907785028219223e-09) + (((_3352 * _3353) + _3323) * _3338))) * _3352;
                        float _4747 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3374 = (((_3324 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3346 * _3346) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125))) * _3278;
                        _3126 = (_3293 * _3241.x) + _3199;
                        _3127 = (_3293 * _3241.y) + _3200;
                        _3128 = (_3293 * _3241.z) + _3201;
                        _3123 = (_3374 * _3258.x) + _3196;
                        _3124 = (_3374 * _3258.y) + _3197;
                        _3125 = (_3374 * _3258.z) + _3198;
                        if (_3203 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3196 = _3123;
                            _3197 = _3124;
                            _3198 = _3125;
                            _3199 = _3126;
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3203;
                        }
                    }
                    frontier_phi_66_pred = _3123;
                    frontier_phi_66_pred_1 = _3128;
                    frontier_phi_66_pred_2 = _3127;
                    frontier_phi_66_pred_3 = _3126;
                    frontier_phi_66_pred_4 = _3125;
                    frontier_phi_66_pred_5 = _3124;
                }
                _2900 = frontier_phi_66_pred;
                _2910 = frontier_phi_66_pred_1;
                _2908 = frontier_phi_66_pred_2;
                _2906 = frontier_phi_66_pred_3;
                _2904 = frontier_phi_66_pred_4;
                _2902 = frontier_phi_66_pred_5;
                uint _3058 = _3057 + 1u;
                if (_3058 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3051 = _2900;
                    _3052 = _2902;
                    _3053 = _2904;
                    _3054 = _2906;
                    _3055 = _2908;
                    _3056 = _2910;
                    _3057 = _3058;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
        }
        uvec4 _2913 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2914 = _2913.z;
        uint _2916 = (_2914 >> 8u) & 15u;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        if (((4294967295u << _2916) & _2798) == 0u)
        {
            _3019 = _2899;
            _3021 = _2901;
            _3023 = _2903;
            _3025 = _2905;
            _3027 = _2907;
            _3029 = _2909;
        }
        else
        {
            float _3044 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
            float _3045 = _3044 * _2752;
            float _3046 = _3044 * _2753;
            float _3047 = _3044 * _2754;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2916 < ((_2914 >> 12u) & 15u))
            {
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3179 = _2899;
                float _3180 = _2901;
                float _3181 = _2903;
                float _3182 = _2905;
                float _3183 = _2907;
                float _3184 = _2909;
                uint _3185 = _2916;
                uint _3194;
                bool _3195;
                for (;;)
                {
                    _3194 = texelFetch(g_lightClassification, int((((_2792 << 5u) + (_2778 << 9u)) + (_3185 << 2u)) >> 2u)).x;
                    _3195 = _3194 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3195)
                    {
                        frontier_phi_77_pred = _3184;
                        frontier_phi_77_pred_1 = _3183;
                        frontier_phi_77_pred_2 = _3182;
                        frontier_phi_77_pred_3 = _3181;
                        frontier_phi_77_pred_4 = _3180;
                        frontier_phi_77_pred_5 = _3179;
                    }
                    else
                    {
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3401 = _3179;
                        float _3402 = _3180;
                        float _3403 = _3181;
                        float _3404 = _3182;
                        float _3405 = _3183;
                        float _3406 = _3184;
                        uint _3407 = _3194;
                        uint _3408;
                        vec4 _3433;
                        float _3434;
                        vec4 _3449;
                        vec3 _3461;
                        vec4 _3476;
                        vec4 _3491;
                        float _3537;
                        bool _3538;
                        for (;;)
                        {
                            uint _3418 = ((_3185 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3407));
                            _3408 = (_3407 + 4294967295u) & _3407;
                            uint _3420 = _3418 * 40u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            _3434 = _3433.w;
                            uint _3436 = (_3418 * 40u) + 4u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3418 * 40u) + 8u;
                            _3461 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x));
                            uint _3463 = (_3418 * 40u) + 16u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3418 * 40u) + 20u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3493 = (_3418 * 40u) + 24u;
                            vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3512 = (_3418 * 40u) + 28u;
                            vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            _3537 = fma(_2754, _3525.z, fma(_2753, _3525.y, _3525.x * _2752)) + _3525.w;
                            _3538 = !((fma(_2754, _3506.z, fma(_2753, _3506.y, _3506.x * _2752)) + _3506.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3538)
                            {
                                float _3565 = _3433.x - _2752;
                                float _3566 = _3433.y - _2753;
                                float _3567 = _3433.z - _2754;
                                float _3568 = dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567));
                                float _3571 = inversesqrt(_3568);
                                float _3572 = _3571 * _3565;
                                float _3573 = _3571 * _3566;
                                float _3574 = _3571 * _3567;
                                float _3578 = 1.0 - (_3568 / (_3434 * _3434));
                                float _4758 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3583 = sqrt(_3568) * _3449.w;
                                float _3585 = 1.39999997615814208984375 / (_3583 + 1.39999997615814208984375);
                                float _3586 = _3585 * _3585;
                                float _3589 = ((1.0 - _3586) * dot(vec3(_3572, _3573, _3574), vec3(_963, _966, _969))) + _3586;
                                float _3592 = _3583 * _3583;
                                float _3596 = (fma(_2754, _3476.z, fma(_2753, _3476.y, _3476.x * _2752)) + _3476.w) / _3537;
                                float _3597 = (fma(_2754, _3491.z, fma(_2753, _3491.y, _3491.x * _2752)) + _3491.w) / _3537;
                                float _3601 = 1.0 - dot(vec2(_3596, _3597), vec2(_3596, _3597));
                                float _4774 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3603 = _3602 * (((isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0))) * _3579) / ((_3592 * 0.699999988079071044921875) + 1.0));
                                float _3615 = exp2(log2(1.0 / ((_3592 * 3.5) + 5.0)) * 0.25);
                                float _3616 = 1.0 - _1038;
                                float _3623 = sqrt(1.0 - ((1.0 - (_3616 * _3616)) * (1.0 - (_3615 * _3615))));
                                float _3624 = _3623 * _3623;
                                float _3625 = _3624 * _3624;
                                float _3626 = _3572 - _3045;
                                float _3627 = _3573 - _3046;
                                float _3628 = _3574 - _3047;
                                float _3632 = inversesqrt(dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628)));
                                float _3636 = dot(vec3(_963, _966, _969), vec3((-0.0) - _3045, (-0.0) - _3046, (-0.0) - _3047));
                                float _4785 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3639 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3640 = dot(vec3(_963, _966, _969), vec3(_3632 * _3626, _3632 * _3627, _3632 * _3628));
                                float _4796 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3643 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3647 = ((_3643 * _3643) * (_3625 + (-1.0))) + 1.0;
                                float _3648 = _3585 * _3624;
                                float _3649 = _3648 * _3648;
                                float _3655 = ((1.0 - _3649) * dot(vec3(_963, _966, _969), vec3(_3572, _3573, _3574))) + _3649;
                                float _4807 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3657 = 1.0 - _3624;
                                float _3667 = (0.5 / (((_3656 * ((_3639 * _3657) + _3624)) + 9.9999999392252902907785028219223e-09) + (((_3656 * _3657) + _3624) * _3639))) * _3656;
                                float _4818 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3677 = (_3602 * _3579) * (((_3625 * 3.1415927410125732421875) * (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)))) / ((_3647 * _3647) * ((_3592 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3603 * _3449.y;
                                frontier_phi_83_pred_1 = _3603 * _3449.x;
                                frontier_phi_83_pred_2 = _3677 * _3461.z;
                                frontier_phi_83_pred_3 = _3677 * _3461.y;
                                frontier_phi_83_pred_4 = _3677 * _3461.x;
                                frontier_phi_83_pred_5 = _3603 * _3449.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3685 = frontier_phi_83_pred;
                            _3684 = frontier_phi_83_pred_1;
                            _3683 = frontier_phi_83_pred_2;
                            _3682 = frontier_phi_83_pred_3;
                            _3681 = frontier_phi_83_pred_4;
                            _3686 = frontier_phi_83_pred_5;
                            _3391 = _3684 + _3404;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            _3388 = _3681 + _3401;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            if (_3408 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3408;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3393;
                        frontier_phi_77_pred_1 = _3392;
                        frontier_phi_77_pred_2 = _3391;
                        frontier_phi_77_pred_3 = _3390;
                        frontier_phi_77_pred_4 = _3389;
                        frontier_phi_77_pred_5 = _3388;
                    }
                    _3030 = frontier_phi_77_pred;
                    _3028 = frontier_phi_77_pred_1;
                    _3026 = frontier_phi_77_pred_2;
                    _3024 = frontier_phi_77_pred_3;
                    _3022 = frontier_phi_77_pred_4;
                    _3020 = frontier_phi_77_pred_5;
                    uint _3186 = _3185 + 1u;
                    if (_3186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3179 = _3020;
                        _3180 = _3022;
                        _3181 = _3024;
                        _3182 = _3026;
                        _3183 = _3028;
                        _3184 = _3030;
                        _3185 = _3186;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3024;
                frontier_phi_58_59_ladder_1 = _3030;
                frontier_phi_58_59_ladder_2 = _3028;
                frontier_phi_58_59_ladder_3 = _3026;
                frontier_phi_58_59_ladder_4 = _3022;
                frontier_phi_58_59_ladder_5 = _3020;
            }
            else
            {
                frontier_phi_58_59_ladder = _2903;
                frontier_phi_58_59_ladder_1 = _2909;
                frontier_phi_58_59_ladder_2 = _2907;
                frontier_phi_58_59_ladder_3 = _2905;
                frontier_phi_58_59_ladder_4 = _2901;
                frontier_phi_58_59_ladder_5 = _2899;
            }
            _3019 = frontier_phi_58_59_ladder_5;
            _3021 = frontier_phi_58_59_ladder_4;
            _3023 = frontier_phi_58_59_ladder;
            _3025 = frontier_phi_58_59_ladder_3;
            _3027 = frontier_phi_58_59_ladder_2;
            _3029 = frontier_phi_58_59_ladder_1;
        }
        float _3034 = isnan(1.0) ? _1022 : (isnan(_1022) ? 1.0 : min(_1022, 1.0));
        _2811 = (_3034 * _3025) + _2244;
        _2813 = (_3034 * _3027) + _2246;
        _2815 = (_3034 * _3029) + _2248;
        _2817 = ((_3019 * _1006) * _3034) + _2592;
        _2819 = ((_3021 * _1008) * _3034) + _2594;
        _2821 = ((_3023 * _1009) * _3034) + _2596;
    }
    else
    {
        _2811 = _2244;
        _2813 = _2246;
        _2815 = _2248;
        _2817 = _2592;
        _2819 = _2594;
        _2821 = _2596;
    }
    float _4834 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4845 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4856 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2838 = ((isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2811 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1022))) + ((_2817 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1861)) * cbPerFrame._m0[3u].x);
    float _2839 = ((isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2813 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1022))) + ((_2819 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1861)) * cbPerFrame._m0[3u].x);
    float _2840 = ((isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2815 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1022))) + ((_2821 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1861)) * cbPerFrame._m0[3u].x);
    uint _2841 = _261 + 6u;
    float _2849 = _944 / cbSceneParam._m0[86u].x;
    float _2850 = _945 / cbSceneParam._m0[86u].y;
    vec4 _2864 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2849, _2850, (log2((isnan(cbSceneParam._m0[77u].w) ? _867 : (isnan(_867) ? cbSceneParam._m0[77u].w : min(_867, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2866 = _2864.x;
    float _2867 = _2864.y;
    float _2868 = _2864.z;
    float _2869 = _2864.w;
    float _2961;
    float _2963;
    float _2965;
    float _2967;
    if (_867 > cbSceneParam._m0[78u].w)
    {
        float _2924 = isnan(_867) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _867 : min(cbSceneParam._m0[80u].w, _867));
        float _2925 = _2924 / _867;
        float _2936 = _2925 * _917;
        float _2937 = _918 * _2925;
        float _2938 = (-0.0) - _2937;
        float _2939 = _2925 * _919;
        float _2941 = (cbSceneParam._m0[77u].w * _2938) / _2924;
        float _2942 = _2941 + cbSceneParam._m0[79u].w;
        float _2943 = cbSceneParam._m0[79u].w - _2937;
        float _2949 = sqrt(((_2936 * _2936) + (_2937 * _2937)) + (_2939 * _2939));
        float _2952 = (1.0 - (cbSceneParam._m0[77u].w / _2924)) * _2949;
        float _2957 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2959 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3136;
        if (abs((_2938 - _2941) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3136 = ((((_2942 > 0.0) ? exp2(_2957 * _2942) : (2.0 - exp2(_2959 * _2942))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2952;
        }
        else
        {
            float _3080 = 1.0 / cbSceneParam._m0[80u].x;
            float _3081 = isnan(_2943) ? _2942 : (isnan(_2942) ? _2943 : max(_2942, _2943));
            float _3082 = isnan(_2943) ? _2942 : (isnan(_2942) ? _2943 : min(_2942, _2943));
            float _3091 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : min(_3081, 0.0));
            float _3092 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : min(_3082, 0.0));
            _3136 = ((abs(_2949 / _2938) * cbSceneParam._m0[80u].y) * ((((_3091 - _3092) * 2.0) - ((exp2(_2957 * (isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0)))) - exp2(_2957 * (isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))))) * _3080)) - ((exp2(_2959 * _3091) - exp2(_2959 * _3092)) * _3080))) + (_2952 * cbSceneParam._m0[80u].z);
        }
        vec4 _3138 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2849, _2850, 1.0), 0.0);
        float _3147 = exp2((_3136 * (-1.44269502162933349609375)) * (1.0 - _3138.w));
        float _3148 = log2(_3147);
        float _3164 = log2(_2869);
        _2961 = (exp2(_3164 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].x)) * _3138.x) / cbSceneParam._m0[78u].x)) + _2866;
        _2963 = (exp2(_3164 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].y)) * _3138.y) / cbSceneParam._m0[78u].y)) + _2867;
        _2965 = (exp2(_3164 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].z)) * _3138.z) / cbSceneParam._m0[78u].z)) + _2868;
        _2967 = _3147 * _2869;
    }
    else
    {
        _2961 = _2866;
        _2963 = _2867;
        _2965 = _2868;
        _2967 = _2869;
    }
    bool _3174;
    vec4 _2977;
    vec4 _2999;
    float _3001;
    float _3005;
    float _3006;
    float _3007;
    float _3008;
    bool _3018;
    for (;;)
    {
        _2977 = cbMatDynParam._m0[0u];
        float _2979 = roundEven(_2977.y);
        bool _2980 = _2979 == 3.0;
        float _2981 = log2(_2967);
        float _2988 = exp2(_2981 * cbSceneParam._m0[78u].x) * _2838;
        float _2989 = exp2(_2981 * cbSceneParam._m0[78u].y) * _2839;
        float _2990 = exp2(_2981 * cbSceneParam._m0[78u].z) * _2840;
        float _2997 = _933 + (-0.5);
        _2999 = cbMtdParam._m0[1u];
        _3001 = _2999.y * _2997;
        float _3004 = (_2979 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3005 = _3004 * (_2980 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2961)));
        _3006 = _3004 * (_2980 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2963)));
        _3007 = _3004 * (_2980 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2965)));
        _3008 = _2997 * 0.999000012874603271484375;
        _3018 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3018)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3008) < 0.5)
            {
                _3174 = true;
                break;
            }
        }
        uint _3115 = _982 + uint(_2977.w);
        if ((cbInstanceData._m0[_3115].w < 1.0) && ((cbInstanceData._m0[_3115].w + _3008) < 0.5))
        {
            _3174 = true;
            break;
        }
        if ((_3001 + 1.0) < _2999.x)
        {
            _3174 = true;
            break;
        }
        _3174 = false;
        break;
    }
    float _3379;
    if (_3174)
    {
        discard_state = true;
        _3379 = 0.0;
    }
    else
    {
        _3379 = cbInstanceData._m0[_2841].w;
    }
    SV_Target.x = _3005;
    SV_Target.y = _3006;
    SV_Target.z = _3007;
    SV_Target.w = _3379;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2841].w;
    discard_exit();
}


