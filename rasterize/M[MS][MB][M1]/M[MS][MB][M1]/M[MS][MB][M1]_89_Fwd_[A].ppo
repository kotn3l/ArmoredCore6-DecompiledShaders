#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1315;
float _3697;
float _3698;
float _3699;
float _3700;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3709 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    float _447 = ((_417.z - _438) * _390) + _438;
    float _450 = ((((_417.x - _436) * _390) + _436) * 2.0) + (-1.0);
    float _452 = ((((_417.y - _437) * _390) + _437) * 2.0) + (-1.0);
    float _453 = dot(vec2(_450, _452), vec2(_450, _452));
    float _3720 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _491 = _489.x;
    float _492 = 1.0 - _491;
    float _498 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _501 = ((isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : min(_498, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _510 = (_501 - ((((((_491 - _492) * cbMtdParam._m0[24u].z) + _492) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _501))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3741 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _511 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _518 = (_511 * (cbMtdParam._m0[17u].x - _397)) + _397;
    float _519 = (_511 * (cbMtdParam._m0[17u].y - _398)) + _398;
    float _520 = (_511 * (cbMtdParam._m0[17u].z - _399)) + _399;
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _534 = _532.x;
    float _535 = 1.0 - _534;
    float _562 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_534 - _535) * cbMtdParam._m0[24u].w) + _535) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3752 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _571 = ((((cbMtdParam._m0[10u].x - _518) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _563) + _518;
    float _572 = ((((cbMtdParam._m0[10u].y - _519) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _563) + _519;
    float _573 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _520)) * _563) + _520;
    vec4 _585 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _599 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _601 = _599.x;
    float _619 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _601) * _390) + _601;
    float _623 = ((_585.x - _619) * cbMtdParam._m0[19u].z) + _619;
    float _625 = _623 - (_623 * _511);
    float _627 = _625 - (_625 * _563);
    vec4 _641 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _648 = (_641.x * 2.0) + (-1.0);
    float _649 = (_641.y * 2.0) + (-1.0);
    float _650 = dot(vec2(_648, _649), vec2(_648, _649));
    float _3763 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _658 = (_511 * (_641.z - _447)) + _447;
    float _661 = ((cbMtdParam._m0[23u].y - _658) * _563) + _658;
    vec4 _680 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _686 = (_680.x * 2.0) + (-1.0);
    float _687 = (_680.y * 2.0) + (-1.0);
    float _688 = dot(vec2(_686, _687), vec2(_686, _687));
    float _3774 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _705 = (((_648 - _450) + (cbMtdParam._m0[21u].x * _450)) * _511) + _450;
    float _706 = (((_649 - _452) + (cbMtdParam._m0[21u].x * _452)) * _511) + _452;
    float _707 = (_511 * (sqrt(1.0 - (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) - _458)) + _458;
    float _718 = (((_686 - _705) + (_705 * cbMtdParam._m0[22u].z)) * _563) + _705;
    float _719 = (((_687 - _706) + (_706 * cbMtdParam._m0[22u].z)) * _563) + _706;
    float _720 = ((sqrt(1.0 - (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) - _707) * _563) + _707;
    float _722 = cbMtdParam._m0[22u].x + _471.w;
    float _725 = fma(_720, _240 * NORMAL.x, fma(_719, _247 * TANGENT.x, (_233 * _225) * _718));
    float _728 = fma(_720, _240 * NORMAL.y, fma(_719, _247 * TANGENT.y, (_233 * _226) * _718));
    float _731 = fma(_720, _240 * NORMAL.z, fma(_719, _247 * TANGENT.z, (_233 * _227) * _718));
    float _735 = inversesqrt(dot(vec3(_725, _728, _731), vec3(_725, _728, _731)));
    float _736 = _735 * _725;
    float _737 = _735 * _728;
    float _738 = _735 * _731;
    float _3785 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _739 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _3807 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3818 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3829 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3840 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _744 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _758 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _808 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _798);
    float _809 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _798);
    float _810 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _798);
    float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
    float _815 = _808 * _814;
    float _816 = _809 * _814;
    float _817 = _810 * _814;
    vec4 _822 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _824 = _822.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _996 = sqrt(((_808 * _808) + (_809 * _809)) + (_810 * _810));
        float _1002 = (cbMatDynParam._m0[5u].x * _996) + cbMatDynParam._m0[5u].y;
        float _3851 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1007 = (cbMatDynParam._m0[5u].z * _996) + cbMatDynParam._m0[5u].w;
        float _3862 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) - _1003)) + _1003) < ((_824 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _835 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _836 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _854 = fma(_738, cbSceneParam._m0[5u].z, fma(_737, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _736));
    float _857 = fma(_738, cbSceneParam._m0[6u].z, fma(_737, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _736));
    float _860 = fma(_738, cbSceneParam._m0[7u].z, fma(_737, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _736));
    uint _873 = _253 + 9u;
    uint _874 = _873 + uint(cbMatDynParam._m0[0u].w);
    float _880 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_874].x;
    float _881 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * cbInstanceData._m0[_874].y;
    float _882 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * cbInstanceData._m0[_874].z;
    float _3873 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _886 = 1.0 - _744;
    float _887 = _883 * _886;
    float _888 = _884 * _886;
    float _889 = _885 * _886;
    float _894 = (_883 + (-0.039999999105930328369140625)) * _744;
    float _895 = (_884 + (-0.039999999105930328369140625)) * _744;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _744;
    float _897 = _894 + 0.039999999105930328369140625;
    float _899 = _895 + 0.039999999105930328369140625;
    float _900 = _896 + 0.039999999105930328369140625;
    vec4 _909 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _835, cbSceneParam._m0[86u].y * _836));
    float _913 = ((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * TEXCOORD_5.w) * _909.x;
    float _914 = dot(vec3(_736, _737, _738), vec3(_815, _816, _817));
    float _917 = _914 * 2.0;
    float _921 = (_917 * _736) - _815;
    float _922 = (_917 * _737) - _816;
    float _923 = (_917 * _738) - _817;
    float _927 = abs(dot(vec3(_815, _816, _817), vec3(_736, _737, _738)));
    float _3906 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _929 = sqrt(_739);
    float _942 = exp2((_929 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_929 * 3.0));
    float _948 = (1.0 - _942) * ((_929 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _949 = _942 * _929;
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1314;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1039 = fma(_985, cbModelParam._m0[26u].z, fma(_981, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _977));
        float _1043 = fma(_985, cbModelParam._m0[27u].z, fma(_981, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _977));
        float _1047 = fma(_985, cbModelParam._m0[28u].z, fma(_981, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _977));
        float _1072 = _977 + _736;
        float _1073 = _981 + _737;
        float _1074 = _985 + _738;
        float _1084 = fma(_1074, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072)) - _1039;
        float _1085 = fma(_1074, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072)) - _1043;
        float _1086 = fma(_1074, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072)) - _1047;
        float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
        float _1103 = ((_1090 * _1084) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1039 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1090 * _1085) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1043 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1090 * _1086) / cbModelParam._m0[34u].z) + ((((((_1047 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1142 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1108.x + (-0.5));
        float _1144 = _1142 * (_1108.y + (-0.5));
        float _1145 = _1142 * (_1108.z + (-0.5));
        float _1152 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1115.x + (-0.5));
        float _1154 = _1152 * (_1115.y + (-0.5));
        float _1155 = _1152 * (_1115.z + (-0.5));
        float _1162 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1122.x + (-0.5));
        float _1164 = _1162 * (_1122.y + (-0.5));
        float _1165 = _1162 * (_1122.z + (-0.5));
        float _1172 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1129.x + (-0.5));
        float _1174 = _1172 * (_1129.y + (-0.5));
        float _1175 = _1172 * (_1129.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1196 = (dot(vec3(_736, _737, _738), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1206 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3954 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1208 + 1.0))) + _1213) * _1176;
        float _1223 = _1144 * 0.5;
        float _1224 = _1154 * 0.5;
        float _1225 = _1164 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_736, _737, _738), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3987 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1250 + 1.0))) + _1255) * _1177;
        float _1265 = _1145 * 0.5;
        float _1266 = _1155 * 0.5;
        float _1267 = _1165 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_736, _737, _738), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4020 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1292 + 1.0))) + _1297) * _1178;
        _1314 = _1145;
        _1316 = _1144;
        _1317 = _1143;
        _1318 = _1155;
        _1319 = _1154;
        _1320 = _1153;
        _1321 = _1165;
        _1322 = _1164;
        _1323 = _1163;
        _1324 = _1178;
        _1325 = _1177;
        _1326 = _1176;
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1315;
        _1316 = _1315;
        _1317 = _1315;
        _1318 = _1315;
        _1319 = _1315;
        _1320 = _1315;
        _1321 = _1315;
        _1322 = _1315;
        _1323 = _1315;
        _1324 = _1315;
        _1325 = _1315;
        _1326 = _1315;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1357 = fma(_985, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _977));
        float _1361 = fma(_985, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _977));
        float _1365 = fma(_985, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _977));
        float _1388 = _977 + _736;
        float _1389 = _981 + _737;
        float _1390 = _985 + _738;
        float _1400 = fma(_1390, cbModelParam._m0[30u].z, fma(_1389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1388)) - _1357;
        float _1401 = fma(_1390, cbModelParam._m0[31u].z, fma(_1389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1388)) - _1361;
        float _1402 = fma(_1390, cbModelParam._m0[32u].z, fma(_1389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1388)) - _1365;
        float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
        float _1419 = ((_1406 * _1400) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1357 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1406 * _1401) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1361 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1406 * _1402) / cbModelParam._m0[35u].z) + ((((((_1365 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        float _1456 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1423.x + (-0.5));
        float _1458 = _1456 * (_1423.y + (-0.5));
        float _1459 = _1456 * (_1423.z + (-0.5));
        float _1466 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1430.x + (-0.5));
        float _1468 = _1466 * (_1430.y + (-0.5));
        float _1469 = _1466 * (_1430.z + (-0.5));
        float _1476 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1437.x + (-0.5));
        float _1478 = _1476 * (_1437.y + (-0.5));
        float _1479 = _1476 * (_1437.z + (-0.5));
        float _1486 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1444.x + (-0.5));
        float _1488 = _1486 * (_1444.y + (-0.5));
        float _1489 = _1486 * (_1444.z + (-0.5));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = _1457 * 0.5;
        float _1494 = _1467 * 0.5;
        float _1495 = _1477 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_736, _737, _738), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4083 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1520 + 1.0))) + _1525) * _1490;
        float _1535 = _1458 * 0.5;
        float _1536 = _1468 * 0.5;
        float _1537 = _1478 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_736, _737, _738), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4116 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1562 + 1.0))) + _1567) * _1491;
        float _1577 = _1459 * 0.5;
        float _1578 = _1469 * 0.5;
        float _1579 = _1479 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_736, _737, _738), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4149 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1604 + 1.0))) + _1609) * _1492;
        _1626 = _1459;
        _1627 = _1458;
        _1628 = _1457;
        _1629 = _1469;
        _1630 = _1468;
        _1631 = _1467;
        _1632 = _1479;
        _1633 = _1478;
        _1634 = _1477;
        _1635 = _1492;
        _1636 = _1491;
        _1637 = _1490;
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
    }
    else
    {
        _1626 = _1315;
        _1627 = _1315;
        _1628 = _1315;
        _1629 = _1315;
        _1630 = _1315;
        _1631 = _1315;
        _1632 = _1315;
        _1633 = _1315;
        _1634 = _1315;
        _1635 = _1315;
        _1636 = _1315;
        _1637 = _1315;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1327)) + _1327;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1328)) + _1328;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1329)) + _1329;
    float _1673 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1650));
    float _1694 = _921 * 0.5;
    float _1695 = _922 * 0.5;
    float _1696 = _923 * 0.5;
    float _1697 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1700 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1703 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1737;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1710 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1314, _1318, _1321, _1324));
        float _1714 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1718 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1725 = dot(vec4(cbModelParam._m0[39u]), vec4(_1694, _1695, _1696, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1748;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1739 = dot(vec4(cbModelParam._m0[40u]), vec4(_1694, _1695, _1696, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1752 = (_1748 * cbModelParam._m0[1u].x) + (_1737 * (1.0 - cbModelParam._m0[1u].x));
    float _1762 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _739);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1762 : min(cbModelParam._m0[25u].z, _1762));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1811 = fma(_985, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _977)) + cbModelParam._m0[13u].w;
        float _1815 = fma(_985, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _977)) + cbModelParam._m0[14u].w;
        float _1819 = fma(_985, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _977)) + cbModelParam._m0[15u].w;
        float _1822 = fma(_923, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921));
        float _1825 = fma(_923, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921));
        float _1828 = fma(_923, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921));
        float _1856;
        if (_1822 > 0.0)
        {
            _1856 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1856 = frontier_phi_17_15_ladder;
        }
        float _2059;
        if (_1825 > 0.0)
        {
            _2059 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2059 = frontier_phi_26_22_ladder;
        }
        float _2313;
        if (_1828 > 0.0)
        {
            _2313 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2313 = frontier_phi_38_33_ladder;
        }
        float _2315 = isnan(_2059) ? _1856 : (isnan(_1856) ? _2059 : min(_1856, _2059));
        float _2316 = isnan(_2313) ? _2315 : (isnan(_2315) ? _2313 : min(_2315, _2313));
        float _2320 = (_2316 * _1822) + _1811;
        float _2321 = (_2316 * _1825) + _1815;
        float _2322 = (_2316 * _1828) + _1819;
        float _2323 = _2316 * 9.9999997473787516355514526367188e-05;
        float _2325 = (-1.0) - _2323;
        float _2327 = _2323 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2322 > _2327) || ((_2322 < _2325) || ((_2321 > _2327) || ((_2321 < _2325) || ((_2320 < _2325) || (_2320 > _2327))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2450 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2322, cbModelParam._m0[9u].z, fma(_2321, cbModelParam._m0[9u].y, _2320 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2322, cbModelParam._m0[10u].z, fma(_2321, cbModelParam._m0[10u].y, _2320 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2322, cbModelParam._m0[11u].z, fma(_2321, cbModelParam._m0[11u].y, _2320 * cbModelParam._m0[11u].x))), _1763);
            frontier_phi_16_38_ladder = _2450.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2450.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2450.x * cbModelParam._m0[1u].y;
        }
        _1844 = frontier_phi_16_38_ladder_2;
        _1846 = frontier_phi_16_38_ladder_1;
        _1848 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_921, _922, _923), _1763);
        _1844 = _1832.x * cbModelParam._m0[1u].y;
        _1846 = _1832.y * cbModelParam._m0[1u].y;
        _1848 = _1832.z * cbModelParam._m0[1u].y;
    }
    float _1852 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _739);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1852 : min(cbModelParam._m0[25u].w, _1852));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1907 = fma(_985, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _977)) + cbModelParam._m0[21u].w;
        float _1911 = fma(_985, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _977)) + cbModelParam._m0[22u].w;
        float _1915 = fma(_985, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _977)) + cbModelParam._m0[23u].w;
        float _1918 = fma(_923, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921));
        float _1921 = fma(_923, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921));
        float _1924 = fma(_923, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921));
        float _2064;
        if (_1918 > 0.0)
        {
            _2064 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2064 = frontier_phi_28_24_ladder;
        }
        float _2340;
        if (_1921 > 0.0)
        {
            _2340 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2340 = frontier_phi_40_35_ladder;
        }
        float _2553;
        if (_1924 > 0.0)
        {
            _2553 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2553 = frontier_phi_49_46_ladder;
        }
        float _2555 = isnan(_2340) ? _2064 : (isnan(_2064) ? _2340 : min(_2064, _2340));
        float _2556 = isnan(_2553) ? _2555 : (isnan(_2555) ? _2553 : min(_2555, _2553));
        float _2560 = (_2556 * _1918) + _1907;
        float _2561 = (_2556 * _1921) + _1911;
        float _2562 = (_2556 * _1924) + _1915;
        float _2563 = _2556 * 9.9999997473787516355514526367188e-05;
        float _2564 = (-1.0) - _2563;
        float _2566 = _2563 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2562 > _2566) || ((_2562 < _2564) || ((_2561 > _2566) || ((_2561 < _2564) || ((_2560 < _2564) || (_2560 > _2566))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2761 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2562, cbModelParam._m0[17u].z, fma(_2561, cbModelParam._m0[17u].y, _2560 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2562, cbModelParam._m0[18u].z, fma(_2561, cbModelParam._m0[18u].y, _2560 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2562, cbModelParam._m0[19u].z, fma(_2561, cbModelParam._m0[19u].y, _2560 * cbModelParam._m0[19u].x))), _1853);
            frontier_phi_25_49_ladder = _2761.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2761.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2761.x * cbModelParam._m0[1u].z;
        }
        _1943 = frontier_phi_25_49_ladder_2;
        _1945 = frontier_phi_25_49_ladder_1;
        _1947 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_921, _922, _923), _1853);
        _1943 = _1927.x * cbModelParam._m0[1u].z;
        _1945 = _1927.y * cbModelParam._m0[1u].z;
        _1947 = _1927.z * cbModelParam._m0[1u].z;
    }
    float _1960 = (((_948 * _897) + _949) * _913) * ((cbModelParam._m0[1u].w * (_1943 - _1844)) + _1844);
    float _1962 = (((_948 * _899) + _949) * _913) * ((cbModelParam._m0[1u].w * (_1945 - _1846)) + _1846);
    float _1964 = (((_948 * _900) + _949) * _913) * ((cbModelParam._m0[1u].w * (_1947 - _1848)) + _1848);
    float _1967 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1962, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1970 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1962, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1973 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1962, cbSceneParam._m0[91u].y, _1960 * cbSceneParam._m0[91u].x));
    uvec4 _1983 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _1985 = _1983.x * 14u;
    uint _1986 = _1985 + 13u;
    float _1993 = _913 + (-1.0);
    float _1998 = (cbLight._m0[_1986].x * _1993) + 1.0;
    float _1999 = (cbLight._m0[_1986].y * _1993) + 1.0;
    float _2000 = (cbLight._m0[_1986].z * _1993) + 1.0;
    float _2001 = (cbLight._m0[_1986].w * _1993) + 1.0;
    uint _2002 = _1985 + 5u;
    float _2008 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
    uint _2012 = _1985 + 4u;
    float _2018 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
    uint _2022 = _1985 | 1u;
    float _2033 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_736, _737, _738));
    float _2036 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_736, _737, _738));
    float _4285 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _4296 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2041 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * 0.3183098733425140380859375;
    float _2043 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * 0.3183098733425140380859375;
    float _2050 = ((cbLight._m0[_2002].x * _2008) * _2043) + ((cbLight._m0[_2012].x * _2018) * _2041);
    float _2051 = ((_2008 * cbLight._m0[_2002].y) * _2043) + ((_2018 * cbLight._m0[_2012].y) * _2041);
    float _2052 = ((_2008 * cbLight._m0[_2002].z) * _2043) + ((_2018 * cbLight._m0[_2012].z) * _2041);
    uvec4 _2056 = floatBitsToUint(cbLight._m0[_1985 + 12u]);
    bool _2058 = _2056.x == 0u;
    float _2069;
    float _2071;
    float _2073;
    if (_2058)
    {
        _2069 = _2050;
        _2071 = _2051;
        _2073 = _2052;
    }
    else
    {
        uint _2077 = _1985 + 6u;
        float _2093 = (dot(vec3(cbLight._m0[_1985 + 2u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2094 = _2093 * _2093;
        float _4307 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2095 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2096 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
        _2069 = (((cbLight._m0[_2077].x * 0.3183098733425140380859375) * _2095) * _2096) + _2050;
        _2071 = (((cbLight._m0[_2077].y * 0.3183098733425140380859375) * _2095) * _2096) + _2051;
        _2073 = (((cbLight._m0[_2077].z * 0.3183098733425140380859375) * _2095) * _2096) + _2052;
    }
    bool _2076 = _2056.y == 0u;
    float _2114;
    float _2116;
    float _2118;
    if (_2076)
    {
        _2114 = _2069;
        _2116 = _2071;
        _2118 = _2073;
    }
    else
    {
        uint _2284 = _1985 + 7u;
        float _2300 = (dot(vec3(cbLight._m0[_1985 + 3u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2301 = _2300 * _2300;
        float _4323 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2302 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2303 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2114 = (((cbLight._m0[_2284].x * 0.3183098733425140380859375) * _2302) * _2303) + _2069;
        _2116 = (((cbLight._m0[_2284].y * 0.3183098733425140380859375) * _2302) * _2303) + _2071;
        _2118 = (((cbLight._m0[_2284].z * 0.3183098733425140380859375) * _2302) * _2303) + _2073;
    }
    uint _2121 = _1985 + 8u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _739) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_1985].x + _815;
    float _2137 = cbLight._m0[_1985].y + _816;
    float _2138 = cbLight._m0[_1985].z + _817;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_1985].xyz));
    float _4339 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _4350 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _2150 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2151 = dot(vec3(_736, _737, _738), vec3(_2143, _2144, _2145));
    float _4361 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2143, _2144, _2145));
    float _4372 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2135 * _2135;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
    float _2172 = 0.959999978542327880859375 - _894;
    float _2174 = 0.959999978542327880859375 - _895;
    float _2175 = 0.959999978542327880859375 - _896;
    float _2182 = 1.0 - _2135;
    float _2193 = (0.5 / (((_2150 * ((_2149 * _2182) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2182) + _2135) * _2149))) * _2149;
    float _4383 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    uint _2206 = _1985 + 9u;
    float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _739) * 0.949999988079071044921875);
    float _2218 = _2217 * _2217;
    float _2219 = cbLight._m0[_2022].x + _815;
    float _2220 = cbLight._m0[_2022].y + _816;
    float _2221 = cbLight._m0[_2022].z + _817;
    float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
    float _2226 = _2225 * _2219;
    float _2227 = _2225 * _2220;
    float _2228 = _2225 * _2221;
    float _2229 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2022].xyz));
    float _4394 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2233 = dot(vec3(_736, _737, _738), vec3(_2226, _2227, _2228));
    float _4405 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2237 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2226, _2227, _2228));
    float _4416 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2241 = _2218 * _2218;
    float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
    float _2252 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
    float _2259 = 1.0 - _2218;
    float _2269 = (0.5 / (((_2150 * ((_2232 * _2259) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2259) + _2218) * _2232))) * _2232;
    float _4427 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2271 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
    float _2281 = (((((_2252 * _2172) + _897) * cbLight._m0[_2206].x) * _2271) * _2008) + (((((_2171 * _2172) + _897) * cbLight._m0[_2121].x) * _2195) * _2018);
    float _2282 = (((((_2252 * _2174) + _899) * cbLight._m0[_2206].y) * _2271) * _2008) + (((((_2171 * _2174) + _899) * cbLight._m0[_2121].y) * _2195) * _2018);
    float _2283 = (((((_2252 * _2175) + _900) * cbLight._m0[_2206].z) * _2271) * _2008) + (((((_2171 * _2175) + _900) * cbLight._m0[_2121].z) * _2195) * _2018);
    float _2345;
    float _2347;
    float _2349;
    if (_2058)
    {
        _2345 = _2281;
        _2347 = _2282;
        _2349 = _2283;
    }
    else
    {
        uint _2351 = _1985 + 2u;
        uint _2355 = _1985 + 10u;
        float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _739) * 0.949999988079071044921875);
        float _2370 = _2369 * _2369;
        float _2371 = cbLight._m0[_2351].x + _815;
        float _2372 = cbLight._m0[_2351].y + _816;
        float _2373 = cbLight._m0[_2351].z + _817;
        float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
        float _2378 = _2377 * _2371;
        float _2379 = _2377 * _2372;
        float _2380 = _2377 * _2373;
        float _2381 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2351].xyz));
        float _4438 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2385 = dot(vec3(_736, _737, _738), vec3(_2378, _2379, _2380));
        float _4449 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2389 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2378, _2379, _2380));
        float _4460 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2393 = _2370 * _2370;
        float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
        float _2404 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
        float _2411 = 1.0 - _2370;
        float _2421 = (0.5 / (((_2150 * ((_2384 * _2411) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2411) + _2370) * _2384))) * _2384;
        float _4471 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2423 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
        float _2424 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
        _2345 = (((((_2404 * _2172) + _897) * cbLight._m0[_2355].x) * _2423) * _2424) + _2281;
        _2347 = (((((_2404 * _2174) + _899) * cbLight._m0[_2355].y) * _2423) * _2424) + _2282;
        _2349 = (((((_2404 * _2175) + _900) * cbLight._m0[_2355].z) * _2423) * _2424) + _2283;
    }
    float _2459;
    float _2461;
    float _2463;
    if (_2076)
    {
        _2459 = _2345;
        _2461 = _2347;
        _2463 = _2349;
    }
    else
    {
        uint _2470 = _1985 + 3u;
        uint _2474 = _1985 + 11u;
        float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _739) * 0.949999988079071044921875);
        float _2489 = _2488 * _2488;
        float _2490 = cbLight._m0[_2470].x + _815;
        float _2491 = cbLight._m0[_2470].y + _816;
        float _2492 = cbLight._m0[_2470].z + _817;
        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
        float _2497 = _2496 * _2490;
        float _2498 = _2496 * _2491;
        float _2499 = _2496 * _2492;
        float _2500 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2470].xyz));
        float _4487 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2504 = dot(vec3(_736, _737, _738), vec3(_2497, _2498, _2499));
        float _4498 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2508 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2497, _2498, _2499));
        float _4509 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2512 = _2489 * _2489;
        float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
        float _2523 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
        float _2530 = 1.0 - _2489;
        float _2540 = (0.5 / (((_2150 * ((_2503 * _2530) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2530) + _2489) * _2503))) * _2503;
        float _4520 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2542 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
        float _2543 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2459 = (((((_2523 * _2172) + _897) * cbLight._m0[_2474].x) * _2542) * _2543) + _2345;
        _2461 = (((((_2523 * _2174) + _899) * cbLight._m0[_2474].y) * _2542) * _2543) + _2347;
        _2463 = (((((_2523 * _2175) + _900) * cbLight._m0[_2474].z) * _2542) * _2543) + _2349;
    }
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    if (_1983.y == 0u)
    {
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2618;
        float _2620 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2618;
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2618;
        uvec4 _2633 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2634 = _2633.x;
        uint _2645 = uint((float(_2633.y) * floor(float(uint(cbSceneParam._m0[85u].y * _836) / _2634))) + floor(float(uint(cbSceneParam._m0[85u].x * _835) / _2634)));
        float _2655 = (log2(_2621 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2656 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        uint _2659 = uint(isnan(14.0) ? _2656 : (isnan(_2656) ? 14.0 : min(_2656, 14.0)));
        uvec4 _2664 = texelFetch(g_lightClusterGridBuffer, int(((_2659 << 2u) + (_2645 << 6u)) >> 2u));
        uint _2665 = _2664.x;
        uint _2666 = _2633.z;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        if (((((1u << ((_2666 >> 4u) & 15u)) + 4294967295u) & _2665) == 0u) || ((_2666 & 240u) == 0u))
        {
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
        }
        else
        {
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            uint _2925 = 0u;
            uint _2934;
            bool _2935;
            for (;;)
            {
                _2934 = texelFetch(g_lightClassification, int((((_2659 << 5u) + (_2645 << 9u)) + (_2925 << 2u)) >> 2u)).x;
                _2935 = _2934 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2935)
                {
                    frontier_phi_66_pred = _2919;
                    frontier_phi_66_pred_1 = _2924;
                    frontier_phi_66_pred_2 = _2923;
                    frontier_phi_66_pred_3 = _2922;
                    frontier_phi_66_pred_4 = _2921;
                    frontier_phi_66_pred_5 = _2920;
                }
                else
                {
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    uint _3070;
                    _3064 = _2919;
                    _3065 = _2920;
                    _3066 = _2921;
                    _3067 = _2922;
                    _3068 = _2923;
                    _3069 = _2924;
                    _3070 = _2934;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    for (;;)
                    {
                        uint _3074 = uint(findLSB(_3070)) + (_2925 << 5u);
                        uint _3071 = (_3070 + 4294967295u) & _3070;
                        uint _3076 = _3074 * 48u;
                        vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 3u)).x));
                        uint _3096 = (_3074 * 48u) + 4u;
                        vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 3u)).x));
                        uint _3115 = (_3074 * 48u) + 8u;
                        vec3 _3126 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x));
                        float _3130 = _3090.x - _2619;
                        float _3131 = _3090.y - _2620;
                        float _3132 = _3090.z - _2621;
                        float _3133 = dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132));
                        float _3136 = inversesqrt(_3133);
                        float _3137 = _3136 * _3130;
                        float _3138 = _3136 * _3131;
                        float _3139 = _3136 * _3132;
                        float _3140 = dot(vec3(_854, _857, _860), vec3(_3137, _3138, _3139));
                        float _3145 = 1.0 - (_3133 * _3090.w);
                        float _4546 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3146 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3147 = sqrt(_3133) * _3109.w;
                        float _3150 = 1.39999997615814208984375 / (_3147 + 1.39999997615814208984375);
                        float _3151 = _3150 * _3150;
                        float _3154 = ((1.0 - _3151) * _3140) + _3151;
                        float _3157 = _3147 * _3147;
                        float _3161 = ((isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))) * _3146) / ((_3157 * 0.699999988079071044921875) + 1.0);
                        float _3165 = (-0.0) - _2619;
                        float _3166 = (-0.0) - _2620;
                        float _3167 = (-0.0) - _2621;
                        float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
                        float _3172 = _3171 * _3165;
                        float _3173 = _3171 * _3166;
                        float _3174 = _3171 * _3167;
                        float _3182 = exp2(log2(1.0 / ((_3157 * 3.5) + 5.0)) * 0.25);
                        float _3183 = 1.0 - _929;
                        float _3190 = sqrt(1.0 - ((1.0 - (_3183 * _3183)) * (1.0 - (_3182 * _3182))));
                        float _3191 = _3190 * _3190;
                        float _3192 = _3191 * _3191;
                        float _3193 = _3172 + _3137;
                        float _3194 = _3173 + _3138;
                        float _3195 = _3174 + _3139;
                        float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                        float _3203 = dot(vec3(_854, _857, _860), vec3(_3172, _3173, _3174));
                        float _4562 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3206 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                        float _3207 = dot(vec3(_854, _857, _860), vec3(_3199 * _3193, _3199 * _3194, _3199 * _3195));
                        float _4573 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3210 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                        float _3214 = ((_3210 * _3210) * (_3192 + (-1.0))) + 1.0;
                        float _3215 = _3150 * _3191;
                        float _3216 = _3215 * _3215;
                        float _3219 = ((1.0 - _3216) * _3140) + _3216;
                        float _4584 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3220 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3221 = 1.0 - _3191;
                        float _3231 = (0.5 / (((_3220 * ((_3206 * _3221) + _3191)) + 9.9999999392252902907785028219223e-09) + (((_3220 * _3221) + _3191) * _3206))) * _3220;
                        float _4595 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3242 = (((_3192 * 3.1415927410125732421875) * (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) / ((_3214 * _3214) * ((_3157 * 2.1991131305694580078125) + 3.141590118408203125))) * _3146;
                        _2994 = (_3161 * _3109.x) + _3067;
                        _2995 = (_3161 * _3109.y) + _3068;
                        _2996 = (_3161 * _3109.z) + _3069;
                        _2991 = (_3242 * _3126.x) + _3064;
                        _2992 = (_3242 * _3126.y) + _3065;
                        _2993 = (_3242 * _3126.z) + _3066;
                        if (_3071 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3064 = _2991;
                            _3065 = _2992;
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _2995;
                            _3069 = _2996;
                            _3070 = _3071;
                        }
                    }
                    frontier_phi_66_pred = _2991;
                    frontier_phi_66_pred_1 = _2996;
                    frontier_phi_66_pred_2 = _2995;
                    frontier_phi_66_pred_3 = _2994;
                    frontier_phi_66_pred_4 = _2993;
                    frontier_phi_66_pred_5 = _2992;
                }
                _2767 = frontier_phi_66_pred;
                _2777 = frontier_phi_66_pred_1;
                _2775 = frontier_phi_66_pred_2;
                _2773 = frontier_phi_66_pred_3;
                _2771 = frontier_phi_66_pred_4;
                _2769 = frontier_phi_66_pred_5;
                uint _2926 = _2925 + 1u;
                if (_2926 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2919 = _2767;
                    _2920 = _2769;
                    _2921 = _2771;
                    _2922 = _2773;
                    _2923 = _2775;
                    _2924 = _2777;
                    _2925 = _2926;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
        }
        uvec4 _2780 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2781 = _2780.z;
        uint _2783 = (_2781 >> 8u) & 15u;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        if (((4294967295u << _2783) & _2665) == 0u)
        {
            _2887 = _2766;
            _2889 = _2768;
            _2891 = _2770;
            _2893 = _2772;
            _2895 = _2774;
            _2897 = _2776;
        }
        else
        {
            float _2912 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
            float _2913 = _2912 * _2619;
            float _2914 = _2912 * _2620;
            float _2915 = _2912 * _2621;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2783 < ((_2781 >> 12u) & 15u))
            {
                float _2888;
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _3047 = _2766;
                float _3048 = _2768;
                float _3049 = _2770;
                float _3050 = _2772;
                float _3051 = _2774;
                float _3052 = _2776;
                uint _3053 = _2783;
                uint _3062;
                bool _3063;
                for (;;)
                {
                    _3062 = texelFetch(g_lightClassification, int((((_2659 << 5u) + (_2645 << 9u)) + (_3053 << 2u)) >> 2u)).x;
                    _3063 = _3062 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3063)
                    {
                        frontier_phi_77_pred = _3052;
                        frontier_phi_77_pred_1 = _3051;
                        frontier_phi_77_pred_2 = _3050;
                        frontier_phi_77_pred_3 = _3049;
                        frontier_phi_77_pred_4 = _3048;
                        frontier_phi_77_pred_5 = _3047;
                    }
                    else
                    {
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3269 = _3047;
                        float _3270 = _3048;
                        float _3271 = _3049;
                        float _3272 = _3050;
                        float _3273 = _3051;
                        float _3274 = _3052;
                        uint _3275 = _3062;
                        uint _3276;
                        vec4 _3301;
                        float _3302;
                        vec4 _3317;
                        vec3 _3329;
                        vec4 _3344;
                        vec4 _3360;
                        float _3406;
                        bool _3407;
                        for (;;)
                        {
                            uint _3286 = ((_3053 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3275));
                            _3276 = (_3275 + 4294967295u) & _3275;
                            uint _3288 = _3286 * 40u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            _3302 = _3301.w;
                            uint _3304 = (_3286 * 40u) + 4u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3319 = (_3286 * 40u) + 8u;
                            _3329 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x));
                            uint _3331 = (_3286 * 40u) + 16u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3347 = (_3286 * 40u) + 20u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3286 * 40u) + 24u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3381 = (_3286 * 40u) + 28u;
                            vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3406 = fma(_2621, _3394.z, fma(_2620, _3394.y, _3394.x * _2619)) + _3394.w;
                            _3407 = !((fma(_2621, _3375.z, fma(_2620, _3375.y, _3375.x * _2619)) + _3375.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3407)
                            {
                                float _3434 = _3301.x - _2619;
                                float _3435 = _3301.y - _2620;
                                float _3436 = _3301.z - _2621;
                                float _3437 = dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436));
                                float _3440 = inversesqrt(_3437);
                                float _3441 = _3440 * _3434;
                                float _3442 = _3440 * _3435;
                                float _3443 = _3440 * _3436;
                                float _3447 = 1.0 - (_3437 / (_3302 * _3302));
                                float _4606 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3452 = sqrt(_3437) * _3317.w;
                                float _3454 = 1.39999997615814208984375 / (_3452 + 1.39999997615814208984375);
                                float _3455 = _3454 * _3454;
                                float _3458 = ((1.0 - _3455) * dot(vec3(_3441, _3442, _3443), vec3(_854, _857, _860))) + _3455;
                                float _3461 = _3452 * _3452;
                                float _3465 = (fma(_2621, _3344.z, fma(_2620, _3344.y, _3344.x * _2619)) + _3344.w) / _3406;
                                float _3466 = (fma(_2621, _3360.z, fma(_2620, _3360.y, _3360.x * _2619)) + _3360.w) / _3406;
                                float _3470 = 1.0 - dot(vec2(_3465, _3466), vec2(_3465, _3466));
                                float _4622 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3472 = _3471 * (((isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0))) * _3448) / ((_3461 * 0.699999988079071044921875) + 1.0));
                                float _3484 = exp2(log2(1.0 / ((_3461 * 3.5) + 5.0)) * 0.25);
                                float _3485 = 1.0 - _929;
                                float _3492 = sqrt(1.0 - ((1.0 - (_3485 * _3485)) * (1.0 - (_3484 * _3484))));
                                float _3493 = _3492 * _3492;
                                float _3494 = _3493 * _3493;
                                float _3495 = _3441 - _2913;
                                float _3496 = _3442 - _2914;
                                float _3497 = _3443 - _2915;
                                float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                                float _3505 = dot(vec3(_854, _857, _860), vec3((-0.0) - _2913, (-0.0) - _2914, (-0.0) - _2915));
                                float _4633 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3508 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3509 = dot(vec3(_854, _857, _860), vec3(_3501 * _3495, _3501 * _3496, _3501 * _3497));
                                float _4644 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3512 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3516 = ((_3512 * _3512) * (_3494 + (-1.0))) + 1.0;
                                float _3517 = _3454 * _3493;
                                float _3518 = _3517 * _3517;
                                float _3524 = ((1.0 - _3518) * dot(vec3(_854, _857, _860), vec3(_3441, _3442, _3443))) + _3518;
                                float _4655 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3526 = 1.0 - _3493;
                                float _3536 = (0.5 / (((_3525 * ((_3508 * _3526) + _3493)) + 9.9999999392252902907785028219223e-09) + (((_3525 * _3526) + _3493) * _3508))) * _3525;
                                float _4666 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3546 = (_3471 * _3448) * (((_3494 * 3.1415927410125732421875) * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) / ((_3516 * _3516) * ((_3461 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3472 * _3317.y;
                                frontier_phi_83_pred_1 = _3472 * _3317.x;
                                frontier_phi_83_pred_2 = _3546 * _3329.z;
                                frontier_phi_83_pred_3 = _3546 * _3329.y;
                                frontier_phi_83_pred_4 = _3546 * _3329.x;
                                frontier_phi_83_pred_5 = _3472 * _3317.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3554 = frontier_phi_83_pred;
                            _3553 = frontier_phi_83_pred_1;
                            _3552 = frontier_phi_83_pred_2;
                            _3551 = frontier_phi_83_pred_3;
                            _3550 = frontier_phi_83_pred_4;
                            _3555 = frontier_phi_83_pred_5;
                            _3259 = _3553 + _3272;
                            _3260 = _3554 + _3273;
                            _3261 = _3555 + _3274;
                            _3256 = _3550 + _3269;
                            _3257 = _3551 + _3270;
                            _3258 = _3552 + _3271;
                            if (_3276 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3276;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3261;
                        frontier_phi_77_pred_1 = _3260;
                        frontier_phi_77_pred_2 = _3259;
                        frontier_phi_77_pred_3 = _3258;
                        frontier_phi_77_pred_4 = _3257;
                        frontier_phi_77_pred_5 = _3256;
                    }
                    _2898 = frontier_phi_77_pred;
                    _2896 = frontier_phi_77_pred_1;
                    _2894 = frontier_phi_77_pred_2;
                    _2892 = frontier_phi_77_pred_3;
                    _2890 = frontier_phi_77_pred_4;
                    _2888 = frontier_phi_77_pred_5;
                    uint _3054 = _3053 + 1u;
                    if (_3054 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3047 = _2888;
                        _3048 = _2890;
                        _3049 = _2892;
                        _3050 = _2894;
                        _3051 = _2896;
                        _3052 = _2898;
                        _3053 = _3054;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2892;
                frontier_phi_58_59_ladder_1 = _2898;
                frontier_phi_58_59_ladder_2 = _2896;
                frontier_phi_58_59_ladder_3 = _2894;
                frontier_phi_58_59_ladder_4 = _2890;
                frontier_phi_58_59_ladder_5 = _2888;
            }
            else
            {
                frontier_phi_58_59_ladder = _2770;
                frontier_phi_58_59_ladder_1 = _2776;
                frontier_phi_58_59_ladder_2 = _2774;
                frontier_phi_58_59_ladder_3 = _2772;
                frontier_phi_58_59_ladder_4 = _2768;
                frontier_phi_58_59_ladder_5 = _2766;
            }
            _2887 = frontier_phi_58_59_ladder_5;
            _2889 = frontier_phi_58_59_ladder_4;
            _2891 = frontier_phi_58_59_ladder;
            _2893 = frontier_phi_58_59_ladder_3;
            _2895 = frontier_phi_58_59_ladder_2;
            _2897 = frontier_phi_58_59_ladder_1;
        }
        float _2902 = isnan(1.0) ? _913 : (isnan(_913) ? 1.0 : min(_913, 1.0));
        _2678 = (_2902 * _2893) + _2114;
        _2680 = (_2902 * _2895) + _2116;
        _2682 = (_2902 * _2897) + _2118;
        _2684 = ((_2887 * _897) * _2902) + _2459;
        _2686 = ((_2889 * _899) * _2902) + _2461;
        _2688 = ((_2891 * _900) * _2902) + _2463;
    }
    else
    {
        _2678 = _2114;
        _2680 = _2116;
        _2682 = _2118;
        _2684 = _2459;
        _2686 = _2461;
        _2688 = _2463;
    }
    float _4682 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4693 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4704 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2705 = ((isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2678 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _913))) + ((_2684 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    float _2706 = ((isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2680 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _913))) + ((_2686 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    float _2707 = ((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2682 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _913))) + ((_2688 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    uint _2708 = _253 + 6u;
    float _2716 = _835 / cbSceneParam._m0[86u].x;
    float _2717 = _836 / cbSceneParam._m0[86u].y;
    vec4 _2731 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2716, _2717, (log2((isnan(cbSceneParam._m0[77u].w) ? _758 : (isnan(_758) ? cbSceneParam._m0[77u].w : min(_758, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2733 = _2731.x;
    float _2734 = _2731.y;
    float _2735 = _2731.z;
    float _2736 = _2731.w;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_758 > cbSceneParam._m0[78u].w)
    {
        float _2791 = isnan(_758) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _758 : min(cbSceneParam._m0[80u].w, _758));
        float _2792 = _2791 / _758;
        float _2803 = _2792 * _808;
        float _2804 = _809 * _2792;
        float _2805 = (-0.0) - _2804;
        float _2807 = _2792 * _810;
        float _2809 = (cbSceneParam._m0[77u].w * _2805) / _2791;
        float _2810 = _2809 + cbSceneParam._m0[79u].w;
        float _2811 = cbSceneParam._m0[79u].w - _2804;
        float _2817 = sqrt(((_2803 * _2803) + (_2804 * _2804)) + (_2807 * _2807));
        float _2820 = (1.0 - (cbSceneParam._m0[77u].w / _2791)) * _2817;
        float _2825 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2827 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3004;
        if (abs((_2805 - _2809) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3004 = ((((_2810 > 0.0) ? exp2(_2825 * _2810) : (2.0 - exp2(_2827 * _2810))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2820;
        }
        else
        {
            float _2948 = 1.0 / cbSceneParam._m0[80u].x;
            float _2949 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : max(_2810, _2811));
            float _2950 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : min(_2810, _2811));
            float _2959 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : min(_2949, 0.0));
            float _2960 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : min(_2950, 0.0));
            _3004 = ((abs(_2817 / _2805) * cbSceneParam._m0[80u].y) * ((((_2959 - _2960) * 2.0) - ((exp2(_2825 * (isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0)))) - exp2(_2825 * (isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))))) * _2948)) - ((exp2(_2827 * _2959) - exp2(_2827 * _2960)) * _2948))) + (_2820 * cbSceneParam._m0[80u].z);
        }
        vec4 _3006 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2716, _2717, 1.0), 0.0);
        float _3015 = exp2((_3004 * (-1.44269502162933349609375)) * (1.0 - _3006.w));
        float _3016 = log2(_3015);
        float _3032 = log2(_2736);
        _2829 = (exp2(_3032 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].x)) * _3006.x) / cbSceneParam._m0[78u].x)) + _2733;
        _2831 = (exp2(_3032 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].y)) * _3006.y) / cbSceneParam._m0[78u].y)) + _2734;
        _2833 = (exp2(_3032 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].z)) * _3006.z) / cbSceneParam._m0[78u].z)) + _2735;
        _2835 = _3015 * _2736;
    }
    else
    {
        _2829 = _2733;
        _2831 = _2734;
        _2833 = _2735;
        _2835 = _2736;
    }
    bool _3042;
    vec4 _2845;
    vec4 _2867;
    float _2869;
    float _2873;
    float _2874;
    float _2875;
    float _2876;
    bool _2886;
    for (;;)
    {
        _2845 = cbMatDynParam._m0[0u];
        float _2847 = roundEven(_2845.y);
        bool _2848 = _2847 == 3.0;
        float _2849 = log2(_2835);
        float _2856 = exp2(_2849 * cbSceneParam._m0[78u].x) * _2705;
        float _2857 = exp2(_2849 * cbSceneParam._m0[78u].y) * _2706;
        float _2858 = exp2(_2849 * cbSceneParam._m0[78u].z) * _2707;
        float _2865 = _824 + (-0.5);
        _2867 = cbMtdParam._m0[1u];
        _2869 = _2867.y * _2865;
        float _2872 = (_2847 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2873 = _2872 * (_2848 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2829)));
        _2874 = _2872 * (_2848 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2831)));
        _2875 = _2872 * (_2848 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2833)));
        _2876 = _2865 * 0.999000012874603271484375;
        _2886 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2886)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _2876) < 0.5)
            {
                _3042 = true;
                break;
            }
        }
        uint _2983 = _873 + uint(_2845.w);
        if ((cbInstanceData._m0[_2983].w < 1.0) && ((cbInstanceData._m0[_2983].w + _2876) < 0.5))
        {
            _3042 = true;
            break;
        }
        if ((_2869 + 1.0) < _2867.x)
        {
            _3042 = true;
            break;
        }
        _3042 = false;
        break;
    }
    float _3247;
    if (_3042)
    {
        discard_state = true;
        _3247 = 0.0;
    }
    else
    {
        _3247 = cbInstanceData._m0[_2708].w;
    }
    SV_Target.x = _2873;
    SV_Target.y = _2874;
    SV_Target.z = _2875;
    SV_Target.w = _3247;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2708].w;
    discard_exit();
}


