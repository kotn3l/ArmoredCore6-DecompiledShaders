#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1385;
float _4046;
float _4047;
float _4048;
float _4049;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _258 + 1u;
    uint _268 = _258 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _379 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _396 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_367 - _379) * cbMtdParam._m0[24u].y) + _379) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4058 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _404 = (_397 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _405 = (_397 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _406 = (_397 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _455 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _469 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_445 - _455) * cbMtdParam._m0[24u].y) + _455) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4069 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _477 = (_470 * ((_423.x * cbMtdParam._m0[13u].x) - _404)) + _404;
    float _478 = (_470 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _479 = (_470 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _557 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _559 = _557.x;
    float _560 = _557.y;
    float _561 = _557.z;
    float _568 = ((_540.x - _559) * _397) + _559;
    float _569 = ((_540.y - _560) * _397) + _560;
    float _570 = ((_540.z - _561) * _397) + _561;
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _595 = ((_582.z - _570) * _470) + _570;
    float _598 = ((((_582.x - _568) * _470) + _568) * 2.0) + (-1.0);
    float _599 = ((((_582.y - _569) * _470) + _569) * 2.0) + (-1.0);
    float _600 = dot(vec2(_598, _599), vec2(_598, _599));
    float _4080 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _605 = sqrt(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))));
    vec4 _618 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _636 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _638 = _636.x;
    float _639 = 1.0 - _638;
    float _652 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_638 - _639) * cbMtdParam._m0[24u].z) + _639) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4091 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _653 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _660 = (_653 * ((_498.x * cbMtdParam._m0[18u].x) - _477)) + _477;
    float _661 = (_653 * ((_498.y * cbMtdParam._m0[18u].y) - _478)) + _478;
    float _662 = (_653 * ((_498.z * cbMtdParam._m0[18u].z) - _479)) + _479;
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _688 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _690 = _688.x;
    float _708 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _690) * _397) + _690;
    float _725 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _708) * _470) + _708;
    float _729 = ((_674.x - _725) * cbMtdParam._m0[19u].z) + _725;
    float _731 = _729 - (_729 * _653);
    float _736 = (((_517.z - _595) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _595;
    vec4 _749 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _756 = (_749.x * 2.0) + (-1.0);
    float _757 = (_749.y * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _4102 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _766 = (_653 * (_749.z - _736)) + _736;
    float _771 = _598 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_517.x * 2.0) + (-1.0)));
    float _772 = _599 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_517.y * 2.0) + (-1.0)));
    float _784 = (((_756 - _771) + (cbMtdParam._m0[21u].x * _771)) * _653) + _771;
    float _785 = (((_757 - _772) + (cbMtdParam._m0[21u].x * _772)) * _653) + _772;
    float _786 = (_653 * (sqrt(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) - _605)) + _605;
    float _791 = cbMtdParam._m0[22u].x + _618.w;
    float _794 = fma(_786, _245 * NORMAL.x, fma(_785, _252 * TANGENT.x, (_238 * _230) * _784));
    float _797 = fma(_786, _245 * NORMAL.y, fma(_785, _252 * TANGENT.y, (_238 * _231) * _784));
    float _800 = fma(_786, _245 * NORMAL.z, fma(_785, _252 * TANGENT.z, (_238 * _232) * _784));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    float _805 = _804 * _794;
    float _806 = _804 * _797;
    float _807 = _804 * _800;
    float _4113 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _808 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4135 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4146 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4157 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4168 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _813 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _827 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _878 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _868);
    float _879 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _868);
    float _880 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _868);
    float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
    float _885 = _878 * _884;
    float _886 = _879 * _884;
    float _887 = _880 * _884;
    vec4 _892 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _894 = _892.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1066 = sqrt(((_878 * _878) + (_879 * _879)) + (_880 * _880));
        float _1072 = (cbMatDynParam._m0[5u].x * _1066) + cbMatDynParam._m0[5u].y;
        float _4179 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1077 = (cbMatDynParam._m0[5u].z * _1066) + cbMatDynParam._m0[5u].w;
        float _4190 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) - _1073)) + _1073) < ((_894 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _905 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _906 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _924 = fma(_807, cbSceneParam._m0[5u].z, fma(_806, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _805));
    float _927 = fma(_807, cbSceneParam._m0[6u].z, fma(_806, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _805));
    float _930 = fma(_807, cbSceneParam._m0[7u].z, fma(_806, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _805));
    uint _943 = _258 + 9u;
    uint _944 = _943 + uint(cbMatDynParam._m0[0u].w);
    float _950 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * cbInstanceData._m0[_944].x;
    float _951 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * cbInstanceData._m0[_944].y;
    float _952 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_944].z;
    float _4201 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _956 = 1.0 - _813;
    float _957 = _953 * _956;
    float _958 = _954 * _956;
    float _959 = _955 * _956;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _813;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _813;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _813;
    float _967 = _964 + 0.039999999105930328369140625;
    float _969 = _965 + 0.039999999105930328369140625;
    float _970 = _966 + 0.039999999105930328369140625;
    vec4 _979 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _905, cbSceneParam._m0[86u].y * _906));
    float _983 = ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * TEXCOORD_5.w) * _979.x;
    float _984 = dot(vec3(_805, _806, _807), vec3(_885, _886, _887));
    float _987 = _984 * 2.0;
    float _991 = (_987 * _805) - _885;
    float _992 = (_987 * _806) - _886;
    float _993 = (_987 * _807) - _887;
    float _997 = abs(dot(vec3(_885, _886, _887), vec3(_805, _806, _807)));
    float _4234 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _999 = sqrt(_808);
    float _1012 = exp2((_999 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_999 * 3.0));
    float _1018 = (1.0 - _1012) * ((_999 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1019 = _1012 * _999;
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1384;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1109 = fma(_1055, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047));
        float _1113 = fma(_1055, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047));
        float _1117 = fma(_1055, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047));
        float _1142 = _1047 + _805;
        float _1143 = _1051 + _806;
        float _1144 = _1055 + _807;
        float _1154 = fma(_1144, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1142)) - _1109;
        float _1155 = fma(_1144, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1142)) - _1113;
        float _1156 = fma(_1144, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1142)) - _1117;
        float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
        float _1173 = ((_1160 * _1154) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1109 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1160 * _1155) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1113 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1160 * _1156) / cbModelParam._m0[34u].z) + ((((((_1117 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        float _1212 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1178.x + (-0.5));
        float _1214 = _1212 * (_1178.y + (-0.5));
        float _1215 = _1212 * (_1178.z + (-0.5));
        float _1222 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1185.x + (-0.5));
        float _1224 = _1222 * (_1185.y + (-0.5));
        float _1225 = _1222 * (_1185.z + (-0.5));
        float _1232 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1192.x + (-0.5));
        float _1234 = _1232 * (_1192.y + (-0.5));
        float _1235 = _1232 * (_1192.z + (-0.5));
        float _1242 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1199.x + (-0.5));
        float _1244 = _1242 * (_1199.y + (-0.5));
        float _1245 = _1242 * (_1199.z + (-0.5));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = _1213 * 0.5;
        float _1250 = _1223 * 0.5;
        float _1251 = _1233 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1266 = (dot(vec3(_805, _806, _807), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1276 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4282 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1278 + 1.0))) + _1283) * _1246;
        float _1293 = _1214 * 0.5;
        float _1294 = _1224 * 0.5;
        float _1295 = _1234 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_805, _806, _807), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4315 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1320 + 1.0))) + _1325) * _1247;
        float _1335 = _1215 * 0.5;
        float _1336 = _1225 * 0.5;
        float _1337 = _1235 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_805, _806, _807), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4348 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1362 + 1.0))) + _1367) * _1248;
        _1384 = _1215;
        _1386 = _1214;
        _1387 = _1213;
        _1388 = _1225;
        _1389 = _1224;
        _1390 = _1223;
        _1391 = _1235;
        _1392 = _1234;
        _1393 = _1233;
        _1394 = _1248;
        _1395 = _1247;
        _1396 = _1246;
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
    }
    else
    {
        _1384 = _1385;
        _1386 = _1385;
        _1387 = _1385;
        _1388 = _1385;
        _1389 = _1385;
        _1390 = _1385;
        _1391 = _1385;
        _1392 = _1385;
        _1393 = _1385;
        _1394 = _1385;
        _1395 = _1385;
        _1396 = _1385;
        _1397 = 0.0;
        _1398 = 0.0;
        _1399 = 0.0;
    }
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1426 = fma(_1055, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047));
        float _1430 = fma(_1055, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047));
        float _1434 = fma(_1055, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047));
        float _1457 = _1047 + _805;
        float _1458 = _1051 + _806;
        float _1459 = _1055 + _807;
        float _1469 = fma(_1459, cbModelParam._m0[30u].z, fma(_1458, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1457)) - _1426;
        float _1470 = fma(_1459, cbModelParam._m0[31u].z, fma(_1458, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1457)) - _1430;
        float _1471 = fma(_1459, cbModelParam._m0[32u].z, fma(_1458, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1457)) - _1434;
        float _1475 = inversesqrt(dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471)));
        float _1488 = ((_1475 * _1469) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1426 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1475 * _1470) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1430 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1475 * _1471) / cbModelParam._m0[35u].z) + ((((((_1434 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        float _1525 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1492.x + (-0.5));
        float _1527 = _1525 * (_1492.y + (-0.5));
        float _1528 = _1525 * (_1492.z + (-0.5));
        float _1535 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1499.x + (-0.5));
        float _1537 = _1535 * (_1499.y + (-0.5));
        float _1538 = _1535 * (_1499.z + (-0.5));
        float _1545 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1506.x + (-0.5));
        float _1547 = _1545 * (_1506.y + (-0.5));
        float _1548 = _1545 * (_1506.z + (-0.5));
        float _1555 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1513.x + (-0.5));
        float _1557 = _1555 * (_1513.y + (-0.5));
        float _1558 = _1555 * (_1513.z + (-0.5));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = _1526 * 0.5;
        float _1563 = _1536 * 0.5;
        float _1564 = _1546 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_805, _806, _807), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4411 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1589 + 1.0))) + _1594) * _1559;
        float _1604 = _1527 * 0.5;
        float _1605 = _1537 * 0.5;
        float _1606 = _1547 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_805, _806, _807), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4422 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4433 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4444 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_1631 + 1.0))) + _1636) * _1560;
        float _1646 = _1528 * 0.5;
        float _1647 = _1538 * 0.5;
        float _1648 = _1548 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_805, _806, _807), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4455 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4466 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4477 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_1673 + 1.0))) + _1678) * _1561;
        _1695 = _1528;
        _1696 = _1527;
        _1697 = _1526;
        _1698 = _1538;
        _1699 = _1537;
        _1700 = _1536;
        _1701 = _1548;
        _1702 = _1547;
        _1703 = _1546;
        _1704 = _1561;
        _1705 = _1560;
        _1706 = _1559;
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
    }
    else
    {
        _1695 = _1385;
        _1696 = _1385;
        _1697 = _1385;
        _1698 = _1385;
        _1699 = _1385;
        _1700 = _1385;
        _1701 = _1385;
        _1702 = _1385;
        _1703 = _1385;
        _1704 = _1385;
        _1705 = _1385;
        _1706 = _1385;
        _1707 = 0.0;
        _1708 = 0.0;
        _1709 = 0.0;
    }
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1397)) + _1397;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1398)) + _1398;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1399)) + _1399;
    float _1742 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1719));
    float _1763 = _991 * 0.5;
    float _1764 = _992 * 0.5;
    float _1765 = _993 * 0.5;
    float _1766 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1769 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1772 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1806;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1779 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1384, _1388, _1391, _1394));
        float _1783 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1386, _1389, _1392, _1395));
        float _1787 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1387, _1390, _1393, _1396));
        float _1794 = dot(vec4(cbModelParam._m0[39u]), vec4(_1763, _1764, _1765, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1817;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1808 = dot(vec4(cbModelParam._m0[40u]), vec4(_1763, _1764, _1765, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1821 = (_1817 * cbModelParam._m0[1u].x) + (_1806 * (1.0 - cbModelParam._m0[1u].x));
    float _1831 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _808);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1831 : min(cbModelParam._m0[25u].z, _1831));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1879 = fma(_1055, cbModelParam._m0[13u].z, fma(_1051, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047)) + cbModelParam._m0[13u].w;
        float _1883 = fma(_1055, cbModelParam._m0[14u].z, fma(_1051, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047)) + cbModelParam._m0[14u].w;
        float _1887 = fma(_1055, cbModelParam._m0[15u].z, fma(_1051, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047)) + cbModelParam._m0[15u].w;
        float _1890 = fma(_993, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991));
        float _1893 = fma(_993, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991));
        float _1896 = fma(_993, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991));
        float _1924;
        if (_1890 > 0.0)
        {
            _1924 = abs((1.0 - _1879) / _1890);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1879 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1924 = frontier_phi_17_15_ladder;
        }
        float _2095;
        if (_1893 > 0.0)
        {
            _2095 = abs((1.0 - _1883) / _1893);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1883 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2095 = frontier_phi_26_22_ladder;
        }
        float _2390;
        if (_1896 > 0.0)
        {
            _2390 = abs((1.0 - _1887) / _1896);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1887 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2390 = frontier_phi_38_33_ladder;
        }
        float _2392 = isnan(_2095) ? _1924 : (isnan(_1924) ? _2095 : min(_1924, _2095));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1890) + _1879;
        float _2398 = (_2393 * _1893) + _1883;
        float _2399 = (_2393 * _1896) + _1887;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2400;
        float _2404 = _2400 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 > _2404) || ((_2398 < _2402) || ((_2397 < _2402) || (_2397 > _2404))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2399, cbModelParam._m0[9u].z, fma(_2398, cbModelParam._m0[9u].y, _2397 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2399, cbModelParam._m0[10u].z, fma(_2398, cbModelParam._m0[10u].y, _2397 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2399, cbModelParam._m0[11u].z, fma(_2398, cbModelParam._m0[11u].y, _2397 * cbModelParam._m0[11u].x))), _1832);
            frontier_phi_16_38_ladder = _2544.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2544.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2544.x * cbModelParam._m0[1u].y;
        }
        _1912 = frontier_phi_16_38_ladder_2;
        _1914 = frontier_phi_16_38_ladder_1;
        _1916 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_991, _992, _993), _1832);
        _1912 = _1900.x * cbModelParam._m0[1u].y;
        _1914 = _1900.y * cbModelParam._m0[1u].y;
        _1916 = _1900.z * cbModelParam._m0[1u].y;
    }
    float _1920 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _808);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1920 : min(cbModelParam._m0[25u].w, _1920));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1974 = fma(_1055, cbModelParam._m0[21u].z, fma(_1051, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047)) + cbModelParam._m0[21u].w;
        float _1978 = fma(_1055, cbModelParam._m0[22u].z, fma(_1051, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047)) + cbModelParam._m0[22u].w;
        float _1982 = fma(_1055, cbModelParam._m0[23u].z, fma(_1051, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047)) + cbModelParam._m0[23u].w;
        float _1985 = fma(_993, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991));
        float _1988 = fma(_993, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991));
        float _1991 = fma(_993, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991));
        float _2100;
        if (_1985 > 0.0)
        {
            _2100 = abs((1.0 - _1974) / _1985);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1974 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2100 = frontier_phi_28_24_ladder;
        }
        float _2417;
        if (_1988 > 0.0)
        {
            _2417 = abs((1.0 - _1978) / _1988);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1978 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2417 = frontier_phi_40_35_ladder;
        }
        float _2755;
        if (_1991 > 0.0)
        {
            _2755 = abs((1.0 - _1982) / _1991);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1982 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2755 = frontier_phi_50_47_ladder;
        }
        float _2757 = isnan(_2417) ? _2100 : (isnan(_2100) ? _2417 : min(_2100, _2417));
        float _2758 = isnan(_2755) ? _2757 : (isnan(_2757) ? _2755 : min(_2757, _2755));
        float _2762 = (_2758 * _1985) + _1974;
        float _2763 = (_2758 * _1988) + _1978;
        float _2764 = (_2758 * _1991) + _1982;
        float _2765 = _2758 * 9.9999997473787516355514526367188e-05;
        float _2766 = (-1.0) - _2765;
        float _2768 = _2765 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2764 > _2768) || ((_2764 < _2766) || ((_2763 > _2768) || ((_2763 < _2766) || ((_2762 < _2766) || (_2762 > _2768))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2886 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2764, cbModelParam._m0[17u].z, fma(_2763, cbModelParam._m0[17u].y, _2762 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2764, cbModelParam._m0[18u].z, fma(_2763, cbModelParam._m0[18u].y, _2762 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2764, cbModelParam._m0[19u].z, fma(_2763, cbModelParam._m0[19u].y, _2762 * cbModelParam._m0[19u].x))), _1921);
            frontier_phi_25_50_ladder = _2886.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2886.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2886.x * cbModelParam._m0[1u].z;
        }
        _2010 = frontier_phi_25_50_ladder_2;
        _2012 = frontier_phi_25_50_ladder_1;
        _2014 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_991, _992, _993), _1921);
        _2010 = _1994.x * cbModelParam._m0[1u].z;
        _2012 = _1994.y * cbModelParam._m0[1u].z;
        _2014 = _1994.z * cbModelParam._m0[1u].z;
    }
    float _2027 = (((_1018 * _967) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_2010 - _1912)) + _1912);
    float _2029 = (((_1018 * _969) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2031 = (((_1018 * _970) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_2014 - _1916)) + _1916);
    float _2034 = fma(_2031, cbSceneParam._m0[89u].z, fma(_2029, cbSceneParam._m0[89u].y, _2027 * cbSceneParam._m0[89u].x));
    float _2037 = fma(_2031, cbSceneParam._m0[90u].z, fma(_2029, cbSceneParam._m0[90u].y, _2027 * cbSceneParam._m0[90u].x));
    float _2040 = fma(_2031, cbSceneParam._m0[91u].z, fma(_2029, cbSceneParam._m0[91u].y, _2027 * cbSceneParam._m0[91u].x));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2078 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2082 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2086 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2087 = _2074 / _2086;
    float _2088 = _2078 / _2086;
    float _2089 = _2082 / _2086;
    float _2236;
    float _2237;
    float _2238;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2116 = ((uint(_2089 > cbSceneParam._m0[59u].y) + uint(_2089 > cbSceneParam._m0[59u].x)) + uint(_2089 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2117 = _2116 + 43u;
        uint _2125 = _2116 + 44u;
        uint _2133 = _2116 + 45u;
        uint _2141 = _2116 + 46u;
        float _2152 = fma(_2086, cbSceneParam._m0[_2117].w, fma(_2082, cbSceneParam._m0[_2117].z, fma(_2078, cbSceneParam._m0[_2117].y, _2074 * cbSceneParam._m0[_2117].x)));
        float _2156 = fma(_2086, cbSceneParam._m0[_2125].w, fma(_2082, cbSceneParam._m0[_2125].z, fma(_2078, cbSceneParam._m0[_2125].y, _2074 * cbSceneParam._m0[_2125].x)));
        float _2164 = fma(_2086, cbSceneParam._m0[_2141].w, fma(_2082, cbSceneParam._m0[_2141].z, fma(_2078, cbSceneParam._m0[_2141].y, _2074 * cbSceneParam._m0[_2141].x)));
        float _2169 = cbSceneParam._m0[33u].z * _2164;
        float _2171 = cbSceneParam._m0[33u].w * _2164;
        float _2174 = fma(_2086, cbSceneParam._m0[_2133].w, fma(_2082, cbSceneParam._m0[_2133].z, fma(_2078, cbSceneParam._m0[_2133].y, _2074 * cbSceneParam._m0[_2133].x))) / _2164;
        float _2222 = (cbSceneParam._m0[33u].x - sqrt(((_2088 * _2088) + (_2087 * _2087)) + (_2089 * _2089))) * cbSceneParam._m0[33u].y;
        float _4603 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2229 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 + _2152) / _2164, (_2171 + _2156) / _2164), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2171 + _2152) / _2164, (_2156 - _2169) / _2164), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 - _2169) / _2164, (_2156 - _2171) / _2164), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 - _2171) / _2164, (_2169 + _2156) / _2164), _2174), 0.0)).x), vec4(0.25)));
        _2236 = 1.0 - (_2229 * cbSceneParam._m0[34u].x);
        _2237 = 1.0 - (_2229 * cbSceneParam._m0[34u].y);
        _2238 = 1.0 - (_2229 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2236 = 1.0;
        _2237 = 1.0;
        _2238 = 1.0;
    }
    float _2302;
    float _2304;
    float _2306;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2290 = fma(_2086, cbSceneParam._m0[63u].w, fma(_2082, cbSceneParam._m0[63u].z, fma(_2078, cbSceneParam._m0[63u].y, _2074 * cbSceneParam._m0[63u].x)));
        float _2291 = fma(_2086, cbSceneParam._m0[60u].w, fma(_2082, cbSceneParam._m0[60u].z, fma(_2078, cbSceneParam._m0[60u].y, _2074 * cbSceneParam._m0[60u].x))) / _2290;
        float _2292 = fma(_2086, cbSceneParam._m0[61u].w, fma(_2082, cbSceneParam._m0[61u].z, fma(_2078, cbSceneParam._m0[61u].y, _2074 * cbSceneParam._m0[61u].x))) / _2290;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2291 >= cbSceneParam._m0[64u].x) && (_2292 >= cbSceneParam._m0[64u].y)) && (_2291 <= cbSceneParam._m0[64u].z)) && (_2292 <= cbSceneParam._m0[64u].w))
        {
            float _2430 = fma(_2086, cbSceneParam._m0[62u].w, fma(_2082, cbSceneParam._m0[62u].z, fma(_2078, cbSceneParam._m0[62u].y, _2074 * cbSceneParam._m0[62u].x))) / _2290;
            float _2434 = isnan(cbSceneParam._m0[41u].w) ? _2430 : (isnan(_2430) ? cbSceneParam._m0[41u].w : max(_2430, cbSceneParam._m0[41u].w));
            float _2477 = (cbSceneParam._m0[33u].x - sqrt(((_2088 * _2088) + (_2087 * _2087)) + (_2089 * _2089))) * cbSceneParam._m0[33u].y;
            float _4619 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
            float _2484 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2291, cbSceneParam._m0[33u].w + _2292), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2291, _2292 - cbSceneParam._m0[33u].z), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2291 - cbSceneParam._m0[33u].z, _2292 - cbSceneParam._m0[33u].w), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2291 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2292), _2434), 0.0)).x), vec4(0.25)));
            float _2488 = 1.0 - (_2484 * cbSceneParam._m0[34u].x);
            float _2489 = 1.0 - (_2484 * cbSceneParam._m0[34u].y);
            float _2490 = 1.0 - (_2484 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2490) ? _2238 : (isnan(_2238) ? _2490 : min(_2238, _2490));
            frontier_phi_37_36_ladder_1 = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
            frontier_phi_37_36_ladder_2 = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
        }
        else
        {
            frontier_phi_37_36_ladder = _2238;
            frontier_phi_37_36_ladder_1 = _2237;
            frontier_phi_37_36_ladder_2 = _2236;
        }
        _2302 = frontier_phi_37_36_ladder_2;
        _2304 = frontier_phi_37_36_ladder_1;
        _2306 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2302 = _2236;
        _2304 = _2237;
        _2306 = _2238;
    }
    uvec4 _2311 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2313 = _2311.x * 14u;
    uint _2314 = _2313 + 13u;
    float _2321 = _983 + (-1.0);
    float _2326 = (cbLight._m0[_2314].x * _2321) + 1.0;
    float _2327 = (cbLight._m0[_2314].y * _2321) + 1.0;
    float _2328 = (cbLight._m0[_2314].z * _2321) + 1.0;
    float _2329 = (cbLight._m0[_2314].w * _2321) + 1.0;
    uint _2330 = _2313 + 5u;
    float _2336 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
    uint _2340 = _2313 + 4u;
    float _2349 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
    uint _2353 = _2313 | 1u;
    float _2364 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_805, _806, _807));
    float _2367 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_805, _806, _807));
    float _4655 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _4666 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2372 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * 0.3183098733425140380859375;
    float _2374 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * 0.3183098733425140380859375;
    float _2381 = ((cbLight._m0[_2330].x * _2336) * _2374) + (((cbLight._m0[_2340].x * _2302) * _2349) * _2372);
    float _2382 = ((_2336 * cbLight._m0[_2330].y) * _2374) + (((cbLight._m0[_2340].y * _2304) * _2349) * _2372);
    float _2383 = ((_2336 * cbLight._m0[_2330].z) * _2374) + (((cbLight._m0[_2340].z * _2306) * _2349) * _2372);
    uvec4 _2387 = floatBitsToUint(cbLight._m0[_2313 + 12u]);
    bool _2389 = _2387.x == 0u;
    float _2491;
    float _2493;
    float _2495;
    if (_2389)
    {
        _2491 = _2381;
        _2493 = _2382;
        _2495 = _2383;
    }
    else
    {
        uint _2499 = _2313 + 6u;
        float _2515 = (dot(vec3(cbLight._m0[_2313 + 2u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2516 = _2515 * _2515;
        float _4677 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2517 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2518 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2491 = (((cbLight._m0[_2499].x * 0.3183098733425140380859375) * _2517) * _2518) + _2381;
        _2493 = (((cbLight._m0[_2499].y * 0.3183098733425140380859375) * _2517) * _2518) + _2382;
        _2495 = (((cbLight._m0[_2499].z * 0.3183098733425140380859375) * _2517) * _2518) + _2383;
    }
    bool _2498 = _2387.y == 0u;
    float _2553;
    float _2555;
    float _2557;
    if (_2498)
    {
        _2553 = _2491;
        _2555 = _2493;
        _2557 = _2495;
    }
    else
    {
        uint _2726 = _2313 + 7u;
        float _2742 = (dot(vec3(cbLight._m0[_2313 + 3u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2743 = _2742 * _2742;
        float _4693 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2744 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2745 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2553 = (((cbLight._m0[_2726].x * 0.3183098733425140380859375) * _2744) * _2745) + _2491;
        _2555 = (((cbLight._m0[_2726].y * 0.3183098733425140380859375) * _2744) * _2745) + _2493;
        _2557 = (((cbLight._m0[_2726].z * 0.3183098733425140380859375) * _2744) * _2745) + _2495;
    }
    uint _2560 = _2313 + 8u;
    float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _808) * 0.949999988079071044921875);
    float _2574 = _2573 * _2573;
    float _2575 = cbLight._m0[_2313].x + _885;
    float _2576 = cbLight._m0[_2313].y + _886;
    float _2577 = cbLight._m0[_2313].z + _887;
    float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
    float _2582 = _2581 * _2575;
    float _2583 = _2581 * _2576;
    float _2584 = _2581 * _2577;
    float _2585 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2313].xyz));
    float _4709 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _4720 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _2589 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2590 = dot(vec3(_805, _806, _807), vec3(_2582, _2583, _2584));
    float _4731 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2594 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2582, _2583, _2584));
    float _4742 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2598 = _2574 * _2574;
    float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
    float _2610 = exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0);
    float _2611 = 0.959999978542327880859375 - _964;
    float _2613 = 0.959999978542327880859375 - _965;
    float _2614 = 0.959999978542327880859375 - _966;
    float _2621 = 1.0 - _2574;
    float _2632 = (0.5 / (((_2589 * ((_2588 * _2621) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2621) + _2574) * _2588))) * _2588;
    float _4753 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2634 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
    uint _2648 = _2313 + 9u;
    float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _808) * 0.949999988079071044921875);
    float _2660 = _2659 * _2659;
    float _2661 = cbLight._m0[_2353].x + _885;
    float _2662 = cbLight._m0[_2353].y + _886;
    float _2663 = cbLight._m0[_2353].z + _887;
    float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
    float _2668 = _2667 * _2661;
    float _2669 = _2667 * _2662;
    float _2670 = _2667 * _2663;
    float _2671 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2353].xyz));
    float _4764 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2674 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _2675 = dot(vec3(_805, _806, _807), vec3(_2668, _2669, _2670));
    float _4775 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2678 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
    float _2679 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2668, _2669, _2670));
    float _4786 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2683 = _2660 * _2660;
    float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
    float _2694 = exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0);
    float _2701 = 1.0 - _2660;
    float _2711 = (0.5 / (((_2589 * ((_2674 * _2701) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2701) + _2660) * _2674))) * _2674;
    float _4797 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2713 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
    float _2723 = (((((_2694 * _2611) + _967) * cbLight._m0[_2648].x) * _2713) * _2336) + ((((cbLight._m0[_2560].x * _2302) * ((_2610 * _2611) + _967)) * _2634) * _2349);
    float _2724 = (((((_2694 * _2613) + _969) * cbLight._m0[_2648].y) * _2713) * _2336) + ((((cbLight._m0[_2560].y * _2304) * ((_2610 * _2613) + _969)) * _2634) * _2349);
    float _2725 = (((((_2694 * _2614) + _970) * cbLight._m0[_2648].z) * _2713) * _2336) + ((((cbLight._m0[_2560].z * _2306) * ((_2610 * _2614) + _970)) * _2634) * _2349);
    float _2781;
    float _2783;
    float _2785;
    if (_2389)
    {
        _2781 = _2723;
        _2783 = _2724;
        _2785 = _2725;
    }
    else
    {
        uint _2787 = _2313 + 2u;
        uint _2791 = _2313 + 10u;
        float _2805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2787].w)) * _808) * 0.949999988079071044921875);
        float _2806 = _2805 * _2805;
        float _2807 = cbLight._m0[_2787].x + _885;
        float _2808 = cbLight._m0[_2787].y + _886;
        float _2809 = cbLight._m0[_2787].z + _887;
        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
        float _2814 = _2813 * _2807;
        float _2815 = _2813 * _2808;
        float _2816 = _2813 * _2809;
        float _2817 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2787].xyz));
        float _4808 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2821 = dot(vec3(_805, _806, _807), vec3(_2814, _2815, _2816));
        float _4819 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2825 = dot(vec3(cbLight._m0[_2787].xyz), vec3(_2814, _2815, _2816));
        float _4830 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2829 = _2806 * _2806;
        float _2833 = ((_2824 * _2824) * (_2829 + (-1.0))) + 1.0;
        float _2840 = exp2(log2(1.0 - (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) * 5.0);
        float _2847 = 1.0 - _2806;
        float _2857 = (0.5 / (((_2589 * ((_2820 * _2847) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2847) + _2806) * _2820))) * _2820;
        float _4841 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2859 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2829 / ((_2833 * _2833) * 3.141590118408203125));
        float _2860 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2781 = (((((_2840 * _2611) + _967) * cbLight._m0[_2791].x) * _2859) * _2860) + _2723;
        _2783 = (((((_2840 * _2613) + _969) * cbLight._m0[_2791].y) * _2859) * _2860) + _2724;
        _2785 = (((((_2840 * _2614) + _970) * cbLight._m0[_2791].z) * _2859) * _2860) + _2725;
    }
    float _2891;
    float _2893;
    float _2895;
    if (_2498)
    {
        _2891 = _2781;
        _2893 = _2783;
        _2895 = _2785;
    }
    else
    {
        uint _2902 = _2313 + 3u;
        uint _2906 = _2313 + 11u;
        float _2920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2902].w)) * _808) * 0.949999988079071044921875);
        float _2921 = _2920 * _2920;
        float _2922 = cbLight._m0[_2902].x + _885;
        float _2923 = cbLight._m0[_2902].y + _886;
        float _2924 = cbLight._m0[_2902].z + _887;
        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
        float _2929 = _2928 * _2922;
        float _2930 = _2928 * _2923;
        float _2931 = _2928 * _2924;
        float _2932 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2902].xyz));
        float _4857 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2936 = dot(vec3(_805, _806, _807), vec3(_2929, _2930, _2931));
        float _4868 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2939 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
        float _2940 = dot(vec3(cbLight._m0[_2902].xyz), vec3(_2929, _2930, _2931));
        float _4879 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2944 = _2921 * _2921;
        float _2948 = ((_2939 * _2939) * (_2944 + (-1.0))) + 1.0;
        float _2955 = exp2(log2(1.0 - (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) * 5.0);
        float _2962 = 1.0 - _2921;
        float _2972 = (0.5 / (((_2589 * ((_2935 * _2962) + _2921)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2962) + _2921) * _2935))) * _2935;
        float _4890 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2974 = (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2944 / ((_2948 * _2948) * 3.141590118408203125));
        float _2975 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2891 = (((((_2955 * _2611) + _967) * cbLight._m0[_2906].x) * _2974) * _2975) + _2781;
        _2893 = (((((_2955 * _2613) + _969) * cbLight._m0[_2906].y) * _2974) * _2975) + _2783;
        _2895 = (((((_2955 * _2614) + _970) * cbLight._m0[_2906].z) * _2974) * _2975) + _2785;
    }
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    float _3051;
    if (_2311.y == 0u)
    {
        uvec4 _2996 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2997 = _2996.x;
        uint _3008 = uint((float(_2996.y) * floor(float(uint(cbSceneParam._m0[85u].y * _906) / _2997))) + floor(float(uint(cbSceneParam._m0[85u].x * _905) / _2997)));
        float _3018 = (log2(_2089 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3019 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        uint _3022 = uint(isnan(14.0) ? _3019 : (isnan(_3019) ? 14.0 : min(_3019, 14.0)));
        uvec4 _3027 = texelFetch(g_lightClusterGridBuffer, int(((_3022 << 2u) + (_3008 << 6u)) >> 2u));
        uint _3028 = _3027.x;
        uint _3029 = _2996.z;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        if (((((1u << ((_3029 >> 4u) & 15u)) + 4294967295u) & _3028) == 0u) || ((_3029 & 240u) == 0u))
        {
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
        }
        else
        {
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            uint _3267 = 0u;
            uint _3276;
            bool _3277;
            for (;;)
            {
                _3276 = texelFetch(g_lightClassification, int((((_3022 << 5u) + (_3008 << 9u)) + (_3267 << 2u)) >> 2u)).x;
                _3277 = _3276 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3277)
                {
                    frontier_phi_71_pred = _3266;
                    frontier_phi_71_pred_1 = _3265;
                    frontier_phi_71_pred_2 = _3264;
                    frontier_phi_71_pred_3 = _3263;
                    frontier_phi_71_pred_4 = _3262;
                    frontier_phi_71_pred_5 = _3261;
                }
                else
                {
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    uint _3412;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3266;
                    _3412 = _3276;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    for (;;)
                    {
                        uint _3416 = uint(findLSB(_3412)) + (_3267 << 5u);
                        uint _3413 = (_3412 + 4294967295u) & _3412;
                        uint _3418 = _3416 * 48u;
                        vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 3u)).x));
                        uint _3438 = (_3416 * 48u) + 4u;
                        vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3438)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 3u)).x));
                        uint _3457 = (_3416 * 48u) + 8u;
                        vec3 _3468 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3457)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 2u)).x));
                        float _3472 = _3432.x - _2087;
                        float _3473 = _3432.y - _2088;
                        float _3474 = _3432.z - _2089;
                        float _3475 = dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474));
                        float _3478 = inversesqrt(_3475);
                        float _3479 = _3478 * _3472;
                        float _3480 = _3478 * _3473;
                        float _3481 = _3478 * _3474;
                        float _3482 = dot(vec3(_924, _927, _930), vec3(_3479, _3480, _3481));
                        float _3487 = 1.0 - (_3475 * _3432.w);
                        float _4916 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3488 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3489 = sqrt(_3475) * _3451.w;
                        float _3492 = 1.39999997615814208984375 / (_3489 + 1.39999997615814208984375);
                        float _3493 = _3492 * _3492;
                        float _3496 = ((1.0 - _3493) * _3482) + _3493;
                        float _3499 = _3489 * _3489;
                        float _3503 = ((isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0))) * _3488) / ((_3499 * 0.699999988079071044921875) + 1.0);
                        float _3507 = (-0.0) - _2087;
                        float _3508 = (-0.0) - _2088;
                        float _3509 = (-0.0) - _2089;
                        float _3513 = inversesqrt(dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509)));
                        float _3514 = _3513 * _3507;
                        float _3515 = _3513 * _3508;
                        float _3516 = _3513 * _3509;
                        float _3523 = exp2(log2(1.0 / ((_3499 * 3.5) + 5.0)) * 0.25);
                        float _3524 = 1.0 - _999;
                        float _3531 = sqrt(1.0 - ((1.0 - (_3524 * _3524)) * (1.0 - (_3523 * _3523))));
                        float _3532 = _3531 * _3531;
                        float _3533 = _3532 * _3532;
                        float _3534 = _3514 + _3479;
                        float _3535 = _3515 + _3480;
                        float _3536 = _3516 + _3481;
                        float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                        float _3544 = dot(vec3(_924, _927, _930), vec3(_3514, _3515, _3516));
                        float _4932 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3547 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3548 = dot(vec3(_924, _927, _930), vec3(_3540 * _3534, _3540 * _3535, _3540 * _3536));
                        float _4943 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3551 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3555 = ((_3551 * _3551) * (_3533 + (-1.0))) + 1.0;
                        float _3556 = _3492 * _3532;
                        float _3557 = _3556 * _3556;
                        float _3560 = ((1.0 - _3557) * _3482) + _3557;
                        float _4954 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3561 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                        float _3562 = 1.0 - _3532;
                        float _3572 = (0.5 / (((_3561 * ((_3547 * _3562) + _3532)) + 9.9999999392252902907785028219223e-09) + (((_3561 * _3562) + _3532) * _3547))) * _3561;
                        float _4965 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3583 = (((_3533 * 3.1415927410125732421875) * (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) / ((_3555 * _3555) * ((_3499 * 2.1991131305694580078125) + 3.141590118408203125))) * _3488;
                        _3336 = (_3503 * _3451.x) + _3409;
                        _3337 = (_3503 * _3451.y) + _3410;
                        _3338 = (_3503 * _3451.z) + _3411;
                        _3333 = (_3583 * _3468.x) + _3406;
                        _3334 = (_3583 * _3468.y) + _3407;
                        _3335 = (_3583 * _3468.z) + _3408;
                        if (_3413 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3338;
                            _3412 = _3413;
                        }
                    }
                    frontier_phi_71_pred = _3338;
                    frontier_phi_71_pred_1 = _3337;
                    frontier_phi_71_pred_2 = _3336;
                    frontier_phi_71_pred_3 = _3335;
                    frontier_phi_71_pred_4 = _3334;
                    frontier_phi_71_pred_5 = _3333;
                }
                _3119 = frontier_phi_71_pred;
                _3117 = frontier_phi_71_pred_1;
                _3115 = frontier_phi_71_pred_2;
                _3113 = frontier_phi_71_pred_3;
                _3111 = frontier_phi_71_pred_4;
                _3109 = frontier_phi_71_pred_5;
                uint _3268 = _3267 + 1u;
                if (_3268 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3261 = _3109;
                    _3262 = _3111;
                    _3263 = _3113;
                    _3264 = _3115;
                    _3265 = _3117;
                    _3266 = _3119;
                    _3267 = _3268;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
        }
        uvec4 _3122 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3123 = _3122.z;
        uint _3125 = (_3123 >> 8u) & 15u;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        if (((4294967295u << _3125) & _3028) == 0u)
        {
            _3229 = _3108;
            _3231 = _3110;
            _3233 = _3112;
            _3235 = _3114;
            _3237 = _3116;
            _3239 = _3118;
        }
        else
        {
            float _3254 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
            float _3255 = _3254 * _2087;
            float _3256 = _3254 * _2088;
            float _3257 = _3254 * _2089;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3125 < ((_3123 >> 12u) & 15u))
            {
                float _3230;
                float _3232;
                float _3234;
                float _3236;
                float _3238;
                float _3240;
                float _3389 = _3108;
                float _3390 = _3110;
                float _3391 = _3112;
                float _3392 = _3114;
                float _3393 = _3116;
                float _3394 = _3118;
                uint _3395 = _3125;
                uint _3404;
                bool _3405;
                for (;;)
                {
                    _3404 = texelFetch(g_lightClassification, int((((_3022 << 5u) + (_3008 << 9u)) + (_3395 << 2u)) >> 2u)).x;
                    _3405 = _3404 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3405)
                    {
                        frontier_phi_82_pred = _3394;
                        frontier_phi_82_pred_1 = _3393;
                        frontier_phi_82_pred_2 = _3392;
                        frontier_phi_82_pred_3 = _3391;
                        frontier_phi_82_pred_4 = _3390;
                        frontier_phi_82_pred_5 = _3389;
                    }
                    else
                    {
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3610 = _3389;
                        float _3611 = _3390;
                        float _3612 = _3391;
                        float _3613 = _3392;
                        float _3614 = _3393;
                        float _3615 = _3394;
                        uint _3616 = _3404;
                        uint _3617;
                        vec4 _3642;
                        float _3643;
                        vec4 _3658;
                        vec3 _3670;
                        vec4 _3685;
                        vec4 _3700;
                        float _3746;
                        bool _3747;
                        for (;;)
                        {
                            uint _3627 = ((_3395 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3616));
                            _3617 = (_3616 + 4294967295u) & _3616;
                            uint _3629 = _3627 * 40u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            _3643 = _3642.w;
                            uint _3645 = (_3627 * 40u) + 4u;
                            _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3660 = (_3627 * 40u) + 8u;
                            _3670 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x));
                            uint _3672 = (_3627 * 40u) + 16u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3687 = (_3627 * 40u) + 20u;
                            _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3702 = (_3627 * 40u) + 24u;
                            vec4 _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3721 = (_3627 * 40u) + 28u;
                            vec4 _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            _3746 = fma(_2089, _3734.z, fma(_2088, _3734.y, _3734.x * _2087)) + _3734.w;
                            _3747 = !((fma(_2089, _3715.z, fma(_2088, _3715.y, _3715.x * _2087)) + _3715.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3747)
                            {
                                float _3774 = _3642.x - _2087;
                                float _3775 = _3642.y - _2088;
                                float _3776 = _3642.z - _2089;
                                float _3777 = dot(vec3(_3774, _3775, _3776), vec3(_3774, _3775, _3776));
                                float _3780 = inversesqrt(_3777);
                                float _3781 = _3780 * _3774;
                                float _3782 = _3780 * _3775;
                                float _3783 = _3780 * _3776;
                                float _3787 = 1.0 - (_3777 / (_3643 * _3643));
                                float _4976 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3788 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3792 = sqrt(_3777) * _3658.w;
                                float _3794 = 1.39999997615814208984375 / (_3792 + 1.39999997615814208984375);
                                float _3795 = _3794 * _3794;
                                float _3798 = ((1.0 - _3795) * dot(vec3(_3781, _3782, _3783), vec3(_924, _927, _930))) + _3795;
                                float _3801 = _3792 * _3792;
                                float _3805 = (fma(_2089, _3685.z, fma(_2088, _3685.y, _3685.x * _2087)) + _3685.w) / _3746;
                                float _3806 = (fma(_2089, _3700.z, fma(_2088, _3700.y, _3700.x * _2087)) + _3700.w) / _3746;
                                float _3810 = 1.0 - dot(vec2(_3805, _3806), vec2(_3805, _3806));
                                float _4992 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3811 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3812 = _3811 * (((isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0))) * _3788) / ((_3801 * 0.699999988079071044921875) + 1.0));
                                float _3824 = exp2(log2(1.0 / ((_3801 * 3.5) + 5.0)) * 0.25);
                                float _3825 = 1.0 - _999;
                                float _3832 = sqrt(1.0 - ((1.0 - (_3825 * _3825)) * (1.0 - (_3824 * _3824))));
                                float _3833 = _3832 * _3832;
                                float _3834 = _3833 * _3833;
                                float _3835 = _3781 - _3255;
                                float _3836 = _3782 - _3256;
                                float _3837 = _3783 - _3257;
                                float _3841 = inversesqrt(dot(vec3(_3835, _3836, _3837), vec3(_3835, _3836, _3837)));
                                float _3845 = dot(vec3(_924, _927, _930), vec3((-0.0) - _3255, (-0.0) - _3256, (-0.0) - _3257));
                                float _5003 = isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0));
                                float _3848 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3849 = dot(vec3(_924, _927, _930), vec3(_3841 * _3835, _3841 * _3836, _3841 * _3837));
                                float _5014 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3852 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3856 = ((_3852 * _3852) * (_3834 + (-1.0))) + 1.0;
                                float _3857 = _3794 * _3833;
                                float _3858 = _3857 * _3857;
                                float _3864 = ((1.0 - _3858) * dot(vec3(_924, _927, _930), vec3(_3781, _3782, _3783))) + _3858;
                                float _5025 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3865 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3866 = 1.0 - _3833;
                                float _3876 = (0.5 / (((_3865 * ((_3848 * _3866) + _3833)) + 9.9999999392252902907785028219223e-09) + (((_3865 * _3866) + _3833) * _3848))) * _3865;
                                float _5036 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3886 = (_3811 * _3788) * (((_3834 * 3.1415927410125732421875) * (isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0)))) / ((_3856 * _3856) * ((_3801 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3812 * _3658.z;
                                frontier_phi_88_pred_1 = _3812 * _3658.y;
                                frontier_phi_88_pred_2 = _3812 * _3658.x;
                                frontier_phi_88_pred_3 = _3886 * _3670.z;
                                frontier_phi_88_pred_4 = _3886 * _3670.y;
                                frontier_phi_88_pred_5 = _3886 * _3670.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3895 = frontier_phi_88_pred;
                            _3894 = frontier_phi_88_pred_1;
                            _3893 = frontier_phi_88_pred_2;
                            _3892 = frontier_phi_88_pred_3;
                            _3891 = frontier_phi_88_pred_4;
                            _3890 = frontier_phi_88_pred_5;
                            _3600 = _3893 + _3613;
                            _3601 = _3894 + _3614;
                            _3602 = _3895 + _3615;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            if (_3617 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3617;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3602;
                        frontier_phi_82_pred_1 = _3601;
                        frontier_phi_82_pred_2 = _3600;
                        frontier_phi_82_pred_3 = _3599;
                        frontier_phi_82_pred_4 = _3598;
                        frontier_phi_82_pred_5 = _3597;
                    }
                    _3240 = frontier_phi_82_pred;
                    _3238 = frontier_phi_82_pred_1;
                    _3236 = frontier_phi_82_pred_2;
                    _3234 = frontier_phi_82_pred_3;
                    _3232 = frontier_phi_82_pred_4;
                    _3230 = frontier_phi_82_pred_5;
                    uint _3396 = _3395 + 1u;
                    if (_3396 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3389 = _3230;
                        _3390 = _3232;
                        _3391 = _3234;
                        _3392 = _3236;
                        _3393 = _3238;
                        _3394 = _3240;
                        _3395 = _3396;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3236;
                frontier_phi_63_64_ladder_1 = _3240;
                frontier_phi_63_64_ladder_2 = _3238;
                frontier_phi_63_64_ladder_3 = _3234;
                frontier_phi_63_64_ladder_4 = _3232;
                frontier_phi_63_64_ladder_5 = _3230;
            }
            else
            {
                frontier_phi_63_64_ladder = _3114;
                frontier_phi_63_64_ladder_1 = _3118;
                frontier_phi_63_64_ladder_2 = _3116;
                frontier_phi_63_64_ladder_3 = _3112;
                frontier_phi_63_64_ladder_4 = _3110;
                frontier_phi_63_64_ladder_5 = _3108;
            }
            _3229 = frontier_phi_63_64_ladder_5;
            _3231 = frontier_phi_63_64_ladder_4;
            _3233 = frontier_phi_63_64_ladder_3;
            _3235 = frontier_phi_63_64_ladder;
            _3237 = frontier_phi_63_64_ladder_2;
            _3239 = frontier_phi_63_64_ladder_1;
        }
        float _3244 = isnan(1.0) ? _983 : (isnan(_983) ? 1.0 : min(_983, 1.0));
        _3041 = (_3244 * _3235) + _2553;
        _3043 = (_3244 * _3237) + _2555;
        _3045 = (_3244 * _3239) + _2557;
        _3047 = ((_3229 * _967) * _3244) + _2891;
        _3049 = ((_3231 * _969) * _3244) + _2893;
        _3051 = ((_3233 * _970) * _3244) + _2895;
    }
    else
    {
        _3041 = _2553;
        _3043 = _2555;
        _3045 = _2557;
        _3047 = _2891;
        _3049 = _2893;
        _3051 = _2895;
    }
    float _5052 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _5063 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _5074 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _3068 = ((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_3041 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _983))) + ((_3047 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1821)) * cbPerFrame._m0[3u].x);
    float _3069 = ((isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0))) * (_3043 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _983))) + ((_3049 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1821)) * cbPerFrame._m0[3u].x);
    float _3070 = ((isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_3045 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _983))) + ((_3051 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1821)) * cbPerFrame._m0[3u].x);
    uint _3071 = _258 + 6u;
    float _3079 = _905 / cbSceneParam._m0[86u].x;
    float _3080 = _906 / cbSceneParam._m0[86u].y;
    vec4 _3094 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3079, _3080, (log2((isnan(cbSceneParam._m0[77u].w) ? _827 : (isnan(_827) ? cbSceneParam._m0[77u].w : min(_827, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3096 = _3094.x;
    float _3097 = _3094.y;
    float _3098 = _3094.z;
    float _3099 = _3094.w;
    float _3171;
    float _3173;
    float _3175;
    float _3177;
    if (_827 > cbSceneParam._m0[78u].w)
    {
        float _3133 = isnan(_827) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _827 : min(cbSceneParam._m0[80u].w, _827));
        float _3134 = _3133 / _827;
        float _3145 = _3134 * _878;
        float _3146 = _879 * _3134;
        float _3147 = (-0.0) - _3146;
        float _3149 = _3134 * _880;
        float _3151 = (cbSceneParam._m0[77u].w * _3147) / _3133;
        float _3152 = _3151 + cbSceneParam._m0[79u].w;
        float _3153 = cbSceneParam._m0[79u].w - _3146;
        float _3159 = sqrt(((_3145 * _3145) + (_3146 * _3146)) + (_3149 * _3149));
        float _3162 = (1.0 - (cbSceneParam._m0[77u].w / _3133)) * _3159;
        float _3167 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3169 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3346;
        if (abs((_3147 - _3151) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3346 = ((((_3152 > 0.0) ? exp2(_3167 * _3152) : (2.0 - exp2(_3169 * _3152))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3162;
        }
        else
        {
            float _3290 = 1.0 / cbSceneParam._m0[80u].x;
            float _3291 = isnan(_3153) ? _3152 : (isnan(_3152) ? _3153 : max(_3152, _3153));
            float _3292 = isnan(_3153) ? _3152 : (isnan(_3152) ? _3153 : min(_3152, _3153));
            float _3301 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : min(_3291, 0.0));
            float _3302 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : min(_3292, 0.0));
            _3346 = ((abs(_3159 / _3147) * cbSceneParam._m0[80u].y) * ((((_3301 - _3302) * 2.0) - ((exp2(_3167 * (isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0)))) - exp2(_3167 * (isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))))) * _3290)) - ((exp2(_3169 * _3301) - exp2(_3169 * _3302)) * _3290))) + (_3162 * cbSceneParam._m0[80u].z);
        }
        vec4 _3348 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3079, _3080, 1.0), 0.0);
        float _3357 = exp2((_3346 * (-1.44269502162933349609375)) * (1.0 - _3348.w));
        float _3358 = log2(_3357);
        float _3374 = log2(_3099);
        _3171 = (exp2(_3374 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3358 * cbSceneParam._m0[78u].x)) * _3348.x) / cbSceneParam._m0[78u].x)) + _3096;
        _3173 = (exp2(_3374 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3358 * cbSceneParam._m0[78u].y)) * _3348.y) / cbSceneParam._m0[78u].y)) + _3097;
        _3175 = (exp2(_3374 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3358 * cbSceneParam._m0[78u].z)) * _3348.z) / cbSceneParam._m0[78u].z)) + _3098;
        _3177 = _3357 * _3099;
    }
    else
    {
        _3171 = _3096;
        _3173 = _3097;
        _3175 = _3098;
        _3177 = _3099;
    }
    bool _3384;
    vec4 _3187;
    vec4 _3209;
    float _3211;
    float _3215;
    float _3216;
    float _3217;
    float _3218;
    bool _3228;
    for (;;)
    {
        _3187 = cbMatDynParam._m0[0u];
        float _3189 = roundEven(_3187.y);
        bool _3190 = _3189 == 3.0;
        float _3191 = log2(_3177);
        float _3198 = exp2(_3191 * cbSceneParam._m0[78u].x) * _3068;
        float _3199 = exp2(_3191 * cbSceneParam._m0[78u].y) * _3069;
        float _3200 = exp2(_3191 * cbSceneParam._m0[78u].z) * _3070;
        float _3207 = _894 + (-0.5);
        _3209 = cbMtdParam._m0[1u];
        _3211 = _3209.y * _3207;
        float _3214 = (_3189 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3215 = _3214 * (_3190 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3171)));
        _3216 = _3214 * (_3190 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3173)));
        _3217 = _3214 * (_3190 ? _3200 : (_3200 + (cbSceneParam._m0[72u].w * _3175)));
        _3218 = _3207 * 0.999000012874603271484375;
        _3228 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3228)
        {
            if ((cbInstanceData._m0[_258 + 7u].x + _3218) < 0.5)
            {
                _3384 = true;
                break;
            }
        }
        uint _3325 = _943 + uint(_3187.w);
        if ((cbInstanceData._m0[_3325].w < 1.0) && ((cbInstanceData._m0[_3325].w + _3218) < 0.5))
        {
            _3384 = true;
            break;
        }
        if ((_3211 + 1.0) < _3209.x)
        {
            _3384 = true;
            break;
        }
        _3384 = false;
        break;
    }
    float _3588;
    if (_3384)
    {
        discard_state = true;
        _3588 = 0.0;
    }
    else
    {
        _3588 = cbInstanceData._m0[_3071].w;
    }
    SV_Target.x = _3215;
    SV_Target.y = _3216;
    SV_Target.z = _3217;
    SV_Target.w = _3588;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3071].w;
    discard_exit();
}


