#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1251;
float _3657;
float _3658;
float _3659;
float _3660;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3669 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _435 = ((_405.z - _426) * _378) + _426;
    float _438 = ((((_405.x - _424) * _378) + _424) * 2.0) + (-1.0);
    float _440 = ((((_405.y - _425) * _378) + _425) * 2.0) + (-1.0);
    float _441 = dot(vec2(_438, _440), vec2(_438, _440));
    float _3680 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _446 = sqrt(1.0 - (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))));
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _474 = (((_462.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _438;
    float _475 = (((_462.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _440;
    float _478 = fma(_446, _228, fma(_475, _235, _474 * _221));
    float _481 = fma(_446, _229, fma(_475, _236, _474 * _222));
    float _484 = fma(_446, _230, fma(_475, _237, _474 * _223));
    float _488 = inversesqrt(dot(vec3(_478, _481, _484), vec3(_478, _481, _484)));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _517 = _515.x;
    float _518 = 1.0 - _517;
    float _522 = ((_517 - _518) * cbMtdParam._m0[24u].z) + _518;
    float _524 = (cbMtdParam._m0[19u].x + dot(vec4(_488 * _478, _488 * _481, _488 * _484, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_522 * cbMtdParam._m0[21u].z);
    float _3691 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _540 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_522 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3702 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _545 = ((_525 * (cbMtdParam._m0[17u].x - _385)) * _541) + _385;
    float _546 = ((_525 * (cbMtdParam._m0[17u].y - _386)) * _541) + _386;
    float _547 = ((_525 * (cbMtdParam._m0[17u].z - _387)) * _541) + _387;
    vec4 _559 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _575 = _573.x;
    float _593 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _575) * _378) + _575;
    float _597 = ((_559.x - _593) * cbMtdParam._m0[19u].z) + _593;
    float _600 = _597 - ((_541 * _525) * _597);
    float _604 = (cbMtdParam._m0[19u].w * (_462.z - _435)) + _435;
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _624 = (_617.x * 2.0) + (-1.0);
    float _625 = (_617.y * 2.0) + (-1.0);
    float _626 = dot(vec2(_624, _625), vec2(_624, _625));
    float _3713 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _635 = (((_617.z - _604) * _525) * _541) + _604;
    float _650 = (((cbMtdParam._m0[21u].x * _474) + ((_624 - _474) * _525)) * _541) + _474;
    float _651 = (((cbMtdParam._m0[21u].x * _475) + ((_625 - _475) * _525)) * _541) + _475;
    float _652 = (((sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) - _446) * _525) * _541) + _446;
    float _657 = cbMtdParam._m0[22u].x + _462.w;
    float _660 = fma(_652, _228, fma(_651, _235, _650 * _221));
    float _663 = fma(_652, _229, fma(_651, _236, _650 * _222));
    float _666 = fma(_652, _230, fma(_651, _237, _650 * _223));
    float _670 = inversesqrt(dot(vec3(_660, _663, _666), vec3(_660, _663, _666)));
    float _671 = _670 * _660;
    float _672 = _670 * _663;
    float _673 = _670 * _666;
    float _3724 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _674 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _3746 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3757 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3768 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3779 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _679 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _693 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _744 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _734);
    float _745 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _734);
    float _746 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _734);
    float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
    float _751 = _744 * _750;
    float _752 = _745 * _750;
    float _753 = _746 * _750;
    vec4 _758 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _760 = _758.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _932 = sqrt(((_744 * _744) + (_745 * _745)) + (_746 * _746));
        float _938 = (cbMatDynParam._m0[5u].x * _932) + cbMatDynParam._m0[5u].y;
        float _3790 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _943 = (cbMatDynParam._m0[5u].z * _932) + cbMatDynParam._m0[5u].w;
        float _3801 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) - _939)) + _939) < ((_760 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _771 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _772 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _790 = fma(_673, cbSceneParam._m0[5u].z, fma(_672, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _671));
    float _793 = fma(_673, cbSceneParam._m0[6u].z, fma(_672, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _671));
    float _796 = fma(_673, cbSceneParam._m0[7u].z, fma(_672, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _671));
    uint _809 = _240 + 9u;
    uint _810 = _809 + uint(cbMatDynParam._m0[0u].w);
    float _816 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * cbInstanceData._m0[_810].x;
    float _817 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * cbInstanceData._m0[_810].y;
    float _818 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_810].z;
    float _3812 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _822 = 1.0 - _679;
    float _823 = _819 * _822;
    float _824 = _820 * _822;
    float _825 = _821 * _822;
    float _830 = (_819 + (-0.039999999105930328369140625)) * _679;
    float _831 = (_820 + (-0.039999999105930328369140625)) * _679;
    float _832 = (_821 + (-0.039999999105930328369140625)) * _679;
    float _833 = _830 + 0.039999999105930328369140625;
    float _835 = _831 + 0.039999999105930328369140625;
    float _836 = _832 + 0.039999999105930328369140625;
    vec4 _845 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _771, cbSceneParam._m0[86u].y * _772));
    float _849 = ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * TEXCOORD_5.w) * _845.x;
    float _850 = dot(vec3(_671, _672, _673), vec3(_751, _752, _753));
    float _853 = _850 * 2.0;
    float _857 = (_853 * _671) - _751;
    float _858 = (_853 * _672) - _752;
    float _859 = (_853 * _673) - _753;
    float _863 = abs(dot(vec3(_751, _752, _753), vec3(_671, _672, _673)));
    float _3845 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _865 = sqrt(_674);
    float _878 = exp2((_865 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_865 * 3.0));
    float _884 = (1.0 - _878) * ((_865 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _885 = _878 * _865;
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1250;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _975 = fma(_921, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _913));
        float _979 = fma(_921, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _913));
        float _983 = fma(_921, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _913));
        float _1008 = _913 + _671;
        float _1009 = _917 + _672;
        float _1010 = _921 + _673;
        float _1020 = fma(_1010, cbModelParam._m0[26u].z, fma(_1009, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008)) - _975;
        float _1021 = fma(_1010, cbModelParam._m0[27u].z, fma(_1009, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008)) - _979;
        float _1022 = fma(_1010, cbModelParam._m0[28u].z, fma(_1009, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008)) - _983;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_975 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_979 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[34u].z) + ((((((_983 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1078 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1044.x + (-0.5));
        float _1080 = _1078 * (_1044.y + (-0.5));
        float _1081 = _1078 * (_1044.z + (-0.5));
        float _1088 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1051.x + (-0.5));
        float _1090 = _1088 * (_1051.y + (-0.5));
        float _1091 = _1088 * (_1051.z + (-0.5));
        float _1098 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1058.x + (-0.5));
        float _1100 = _1098 * (_1058.y + (-0.5));
        float _1101 = _1098 * (_1058.z + (-0.5));
        float _1108 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1065.x + (-0.5));
        float _1110 = _1108 * (_1065.y + (-0.5));
        float _1111 = _1108 * (_1065.z + (-0.5));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = _1079 * 0.5;
        float _1116 = _1089 * 0.5;
        float _1117 = _1099 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1132 = (dot(vec3(_671, _672, _673), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1142 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3893 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1144 + 1.0))) + _1149) * _1112;
        float _1159 = _1080 * 0.5;
        float _1160 = _1090 * 0.5;
        float _1161 = _1100 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_671, _672, _673), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3926 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1186 + 1.0))) + _1191) * _1113;
        float _1201 = _1081 * 0.5;
        float _1202 = _1091 * 0.5;
        float _1203 = _1101 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_671, _672, _673), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3959 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1228 + 1.0))) + _1233) * _1114;
        _1250 = _1081;
        _1252 = _1080;
        _1253 = _1079;
        _1254 = _1091;
        _1255 = _1090;
        _1256 = _1089;
        _1257 = _1101;
        _1258 = _1100;
        _1259 = _1099;
        _1260 = _1114;
        _1261 = _1113;
        _1262 = _1112;
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
    }
    else
    {
        _1250 = _1251;
        _1252 = _1251;
        _1253 = _1251;
        _1254 = _1251;
        _1255 = _1251;
        _1256 = _1251;
        _1257 = _1251;
        _1258 = _1251;
        _1259 = _1251;
        _1260 = _1251;
        _1261 = _1251;
        _1262 = _1251;
        _1263 = 0.0;
        _1264 = 0.0;
        _1265 = 0.0;
    }
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1293 = fma(_921, cbModelParam._m0[30u].z, fma(_917, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _913));
        float _1297 = fma(_921, cbModelParam._m0[31u].z, fma(_917, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _913));
        float _1301 = fma(_921, cbModelParam._m0[32u].z, fma(_917, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _913));
        float _1324 = _913 + _671;
        float _1325 = _917 + _672;
        float _1326 = _921 + _673;
        float _1336 = fma(_1326, cbModelParam._m0[30u].z, fma(_1325, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1324)) - _1293;
        float _1337 = fma(_1326, cbModelParam._m0[31u].z, fma(_1325, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1324)) - _1297;
        float _1338 = fma(_1326, cbModelParam._m0[32u].z, fma(_1325, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1324)) - _1301;
        float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
        float _1355 = ((_1342 * _1336) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1293 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1342 * _1337) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1297 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1342 * _1338) / cbModelParam._m0[35u].z) + ((((((_1301 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        float _1392 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1359.x + (-0.5));
        float _1394 = _1392 * (_1359.y + (-0.5));
        float _1395 = _1392 * (_1359.z + (-0.5));
        float _1402 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1366.x + (-0.5));
        float _1404 = _1402 * (_1366.y + (-0.5));
        float _1405 = _1402 * (_1366.z + (-0.5));
        float _1412 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1373.x + (-0.5));
        float _1414 = _1412 * (_1373.y + (-0.5));
        float _1415 = _1412 * (_1373.z + (-0.5));
        float _1422 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1380.x + (-0.5));
        float _1424 = _1422 * (_1380.y + (-0.5));
        float _1425 = _1422 * (_1380.z + (-0.5));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = _1393 * 0.5;
        float _1430 = _1403 * 0.5;
        float _1431 = _1413 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_671, _672, _673), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4022 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1456 + 1.0))) + _1461) * _1426;
        float _1471 = _1394 * 0.5;
        float _1472 = _1404 * 0.5;
        float _1473 = _1414 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_671, _672, _673), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4055 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1498 + 1.0))) + _1503) * _1427;
        float _1513 = _1395 * 0.5;
        float _1514 = _1405 * 0.5;
        float _1515 = _1415 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_671, _672, _673), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4088 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1540 + 1.0))) + _1545) * _1428;
        _1562 = _1395;
        _1563 = _1394;
        _1564 = _1393;
        _1565 = _1405;
        _1566 = _1404;
        _1567 = _1403;
        _1568 = _1415;
        _1569 = _1414;
        _1570 = _1413;
        _1571 = _1428;
        _1572 = _1427;
        _1573 = _1426;
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
    }
    else
    {
        _1562 = _1251;
        _1563 = _1251;
        _1564 = _1251;
        _1565 = _1251;
        _1566 = _1251;
        _1567 = _1251;
        _1568 = _1251;
        _1569 = _1251;
        _1570 = _1251;
        _1571 = _1251;
        _1572 = _1251;
        _1573 = _1251;
        _1574 = 0.0;
        _1575 = 0.0;
        _1576 = 0.0;
    }
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1263)) + _1263;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1264)) + _1264;
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1265)) + _1265;
    float _1609 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1587, cbSceneParam._m0[89u].y, _1586 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1587, cbSceneParam._m0[90u].y, _1586 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1587, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1586));
    float _1630 = _857 * 0.5;
    float _1631 = _858 * 0.5;
    float _1632 = _859 * 0.5;
    float _1633 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1636 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1639 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1673;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1646 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1250, _1254, _1257, _1260));
        float _1650 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1252, _1255, _1258, _1261));
        float _1654 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1661 = dot(vec4(cbModelParam._m0[39u]), vec4(_1630, _1631, _1632, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1684;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1675 = dot(vec4(cbModelParam._m0[40u]), vec4(_1630, _1631, _1632, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1675) ? 0.0 : (isnan(0.0) ? _1675 : max(0.0, _1675))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1688 = (_1684 * cbModelParam._m0[1u].x) + (_1673 * (1.0 - cbModelParam._m0[1u].x));
    float _1698 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _674);
    float _1699 = isnan(_1698) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1698 : min(cbModelParam._m0[25u].z, _1698));
    float _1780;
    float _1782;
    float _1784;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1747 = fma(_921, cbModelParam._m0[13u].z, fma(_917, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _913)) + cbModelParam._m0[13u].w;
        float _1751 = fma(_921, cbModelParam._m0[14u].z, fma(_917, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _913)) + cbModelParam._m0[14u].w;
        float _1755 = fma(_921, cbModelParam._m0[15u].z, fma(_917, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _913)) + cbModelParam._m0[15u].w;
        float _1758 = fma(_859, cbModelParam._m0[13u].z, fma(_858, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857));
        float _1761 = fma(_859, cbModelParam._m0[14u].z, fma(_858, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857));
        float _1764 = fma(_859, cbModelParam._m0[15u].z, fma(_858, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857));
        float _1792;
        if (_1758 > 0.0)
        {
            _1792 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1792 = frontier_phi_17_15_ladder;
        }
        float _2016;
        if (_1761 > 0.0)
        {
            _2016 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2016 = frontier_phi_26_22_ladder;
        }
        float _2273;
        if (_1764 > 0.0)
        {
            _2273 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2273 = frontier_phi_38_33_ladder;
        }
        float _2275 = isnan(_2016) ? _1792 : (isnan(_1792) ? _2016 : min(_1792, _2016));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1758) + _1747;
        float _2281 = (_2276 * _1761) + _1751;
        float _2282 = (_2276 * _1764) + _1755;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2283;
        float _2287 = _2283 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 > _2287) || ((_2281 < _2285) || ((_2280 < _2285) || (_2280 > _2287))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2282, cbModelParam._m0[9u].z, fma(_2281, cbModelParam._m0[9u].y, _2280 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2282, cbModelParam._m0[10u].z, fma(_2281, cbModelParam._m0[10u].y, _2280 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2282, cbModelParam._m0[11u].z, fma(_2281, cbModelParam._m0[11u].y, _2280 * cbModelParam._m0[11u].x))), _1699);
            frontier_phi_16_38_ladder = _2410.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2410.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2410.x * cbModelParam._m0[1u].y;
        }
        _1780 = frontier_phi_16_38_ladder_2;
        _1782 = frontier_phi_16_38_ladder_1;
        _1784 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1768 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_857, _858, _859), _1699);
        _1780 = _1768.x * cbModelParam._m0[1u].y;
        _1782 = _1768.y * cbModelParam._m0[1u].y;
        _1784 = _1768.z * cbModelParam._m0[1u].y;
    }
    float _1788 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _674);
    float _1789 = isnan(_1788) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1788 : min(cbModelParam._m0[25u].w, _1788));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1843 = fma(_921, cbModelParam._m0[21u].z, fma(_917, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _913)) + cbModelParam._m0[21u].w;
        float _1847 = fma(_921, cbModelParam._m0[22u].z, fma(_917, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _913)) + cbModelParam._m0[22u].w;
        float _1851 = fma(_921, cbModelParam._m0[23u].z, fma(_917, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _913)) + cbModelParam._m0[23u].w;
        float _1854 = fma(_859, cbModelParam._m0[21u].z, fma(_858, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857));
        float _1857 = fma(_859, cbModelParam._m0[22u].z, fma(_858, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857));
        float _1860 = fma(_859, cbModelParam._m0[23u].z, fma(_858, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857));
        float _2021;
        if (_1854 > 0.0)
        {
            _2021 = abs((1.0 - _1843) / _1854);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1843 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2021 = frontier_phi_28_24_ladder;
        }
        float _2300;
        if (_1857 > 0.0)
        {
            _2300 = abs((1.0 - _1847) / _1857);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1847 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2300 = frontier_phi_40_35_ladder;
        }
        float _2513;
        if (_1860 > 0.0)
        {
            _2513 = abs((1.0 - _1851) / _1860);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1851 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2513 = frontier_phi_49_46_ladder;
        }
        float _2515 = isnan(_2300) ? _2021 : (isnan(_2021) ? _2300 : min(_2021, _2300));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _1854) + _1843;
        float _2521 = (_2516 * _1857) + _1847;
        float _2522 = (_2516 * _1860) + _1851;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2524 = (-1.0) - _2523;
        float _2526 = _2523 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2522 > _2526) || ((_2522 < _2524) || ((_2521 > _2526) || ((_2521 < _2524) || ((_2520 < _2524) || (_2520 > _2526))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2522, cbModelParam._m0[17u].z, fma(_2521, cbModelParam._m0[17u].y, _2520 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2522, cbModelParam._m0[18u].z, fma(_2521, cbModelParam._m0[18u].y, _2520 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2522, cbModelParam._m0[19u].z, fma(_2521, cbModelParam._m0[19u].y, _2520 * cbModelParam._m0[19u].x))), _1789);
            frontier_phi_25_49_ladder = _2721.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2721.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2721.x * cbModelParam._m0[1u].z;
        }
        _1879 = frontier_phi_25_49_ladder_2;
        _1881 = frontier_phi_25_49_ladder_1;
        _1883 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_857, _858, _859), _1789);
        _1879 = _1863.x * cbModelParam._m0[1u].z;
        _1881 = _1863.y * cbModelParam._m0[1u].z;
        _1883 = _1863.z * cbModelParam._m0[1u].z;
    }
    float _1896 = (((_884 * _833) + _885) * _849) * ((cbModelParam._m0[1u].w * (_1879 - _1780)) + _1780);
    float _1898 = (((_884 * _835) + _885) * _849) * ((cbModelParam._m0[1u].w * (_1881 - _1782)) + _1782);
    float _1900 = (((_884 * _836) + _885) * _849) * ((cbModelParam._m0[1u].w * (_1883 - _1784)) + _1784);
    float _1903 = fma(_1900, cbSceneParam._m0[89u].z, fma(_1898, cbSceneParam._m0[89u].y, _1896 * cbSceneParam._m0[89u].x));
    float _1906 = fma(_1900, cbSceneParam._m0[90u].z, fma(_1898, cbSceneParam._m0[90u].y, _1896 * cbSceneParam._m0[90u].x));
    float _1909 = fma(_1900, cbSceneParam._m0[91u].z, fma(_1898, cbSceneParam._m0[91u].y, _1896 * cbSceneParam._m0[91u].x));
    vec4 _1917 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_771, _772));
    float _1919 = _1917.w;
    float _1931 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1919);
    float _1932 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1919);
    float _1933 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1919);
    uvec4 _1937 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1939 = _1937.x * 14u;
    uint _1940 = _1939 + 13u;
    float _1947 = _849 + (-1.0);
    float _1952 = (cbLight._m0[_1940].x * _1947) + 1.0;
    float _1953 = (cbLight._m0[_1940].y * _1947) + 1.0;
    float _1954 = (cbLight._m0[_1940].z * _1947) + 1.0;
    float _1955 = (cbLight._m0[_1940].w * _1947) + 1.0;
    uint _1956 = _1939 + 5u;
    float _1962 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1966 = _1939 + 4u;
    float _1975 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1979 = _1939 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_671, _672, _673));
    float _1993 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_671, _672, _673));
    float _4224 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _4235 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1998 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _2000 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _2007 = ((cbLight._m0[_1956].x * _1962) * _2000) + (((cbLight._m0[_1966].x * _1931) * _1975) * _1998);
    float _2008 = ((_1962 * cbLight._m0[_1956].y) * _2000) + (((cbLight._m0[_1966].y * _1932) * _1975) * _1998);
    float _2009 = ((_1962 * cbLight._m0[_1956].z) * _2000) + (((cbLight._m0[_1966].z * _1933) * _1975) * _1998);
    uvec4 _2013 = floatBitsToUint(cbLight._m0[_1939 + 12u]);
    bool _2015 = _2013.x == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_2015)
    {
        _2026 = _2007;
        _2028 = _2008;
        _2030 = _2009;
    }
    else
    {
        uint _2034 = _1939 + 6u;
        float _2050 = (dot(vec3(cbLight._m0[_1939 + 2u].xyz), vec3(_671, _672, _673)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _4246 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2053 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2026 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _2007;
        _2028 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _2008;
        _2030 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _2009;
    }
    bool _2033 = _2013.y == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2033)
    {
        _2071 = _2026;
        _2073 = _2028;
        _2075 = _2030;
    }
    else
    {
        uint _2244 = _1939 + 7u;
        float _2260 = (dot(vec3(cbLight._m0[_1939 + 3u].xyz), vec3(_671, _672, _673)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4262 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2263 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2071 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2026;
        _2073 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2028;
        _2075 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2030;
    }
    uint _2078 = _1939 + 8u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _674) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1939].x + _751;
    float _2094 = cbLight._m0[_1939].y + _752;
    float _2095 = cbLight._m0[_1939].z + _753;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_1939].xyz));
    float _4278 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _4289 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _2107 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2108 = dot(vec3(_671, _672, _673), vec3(_2100, _2101, _2102));
    float _4300 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2100, _2101, _2102));
    float _4311 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2092 * _2092;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2128 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
    float _2129 = 0.959999978542327880859375 - _830;
    float _2131 = 0.959999978542327880859375 - _831;
    float _2132 = 0.959999978542327880859375 - _832;
    float _2139 = 1.0 - _2092;
    float _2150 = (0.5 / (((_2107 * ((_2106 * _2139) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2139) + _2092) * _2106))) * _2106;
    float _4322 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    uint _2166 = _1939 + 9u;
    float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _674) * 0.949999988079071044921875);
    float _2178 = _2177 * _2177;
    float _2179 = cbLight._m0[_1979].x + _751;
    float _2180 = cbLight._m0[_1979].y + _752;
    float _2181 = cbLight._m0[_1979].z + _753;
    float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
    float _2186 = _2185 * _2179;
    float _2187 = _2185 * _2180;
    float _2188 = _2185 * _2181;
    float _2189 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_1979].xyz));
    float _4333 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2193 = dot(vec3(_671, _672, _673), vec3(_2186, _2187, _2188));
    float _4344 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2186, _2187, _2188));
    float _4355 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2178 * _2178;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2212 = exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0);
    float _2219 = 1.0 - _2178;
    float _2229 = (0.5 / (((_2107 * ((_2192 * _2219) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2219) + _2178) * _2192))) * _2192;
    float _4366 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    float _2241 = (((((_2212 * _2129) + _833) * cbLight._m0[_2166].x) * _2231) * _1962) + ((((cbLight._m0[_2078].x * _1931) * ((_2128 * _2129) + _833)) * _2152) * _1975);
    float _2242 = (((((_2212 * _2131) + _835) * cbLight._m0[_2166].y) * _2231) * _1962) + ((((cbLight._m0[_2078].y * _1932) * ((_2128 * _2131) + _835)) * _2152) * _1975);
    float _2243 = (((((_2212 * _2132) + _836) * cbLight._m0[_2166].z) * _2231) * _1962) + ((((cbLight._m0[_2078].z * _1933) * ((_2128 * _2132) + _836)) * _2152) * _1975);
    float _2305;
    float _2307;
    float _2309;
    if (_2015)
    {
        _2305 = _2241;
        _2307 = _2242;
        _2309 = _2243;
    }
    else
    {
        uint _2311 = _1939 + 2u;
        uint _2315 = _1939 + 10u;
        float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _674) * 0.949999988079071044921875);
        float _2330 = _2329 * _2329;
        float _2331 = cbLight._m0[_2311].x + _751;
        float _2332 = cbLight._m0[_2311].y + _752;
        float _2333 = cbLight._m0[_2311].z + _753;
        float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
        float _2338 = _2337 * _2331;
        float _2339 = _2337 * _2332;
        float _2340 = _2337 * _2333;
        float _2341 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_2311].xyz));
        float _4377 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2345 = dot(vec3(_671, _672, _673), vec3(_2338, _2339, _2340));
        float _4388 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2349 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2338, _2339, _2340));
        float _4399 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2353 = _2330 * _2330;
        float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
        float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0);
        float _2371 = 1.0 - _2330;
        float _2381 = (0.5 / (((_2107 * ((_2344 * _2371) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2371) + _2330) * _2344))) * _2344;
        float _4410 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2383 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
        float _2384 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2305 = (((((_2364 * _2129) + _833) * cbLight._m0[_2315].x) * _2383) * _2384) + _2241;
        _2307 = (((((_2364 * _2131) + _835) * cbLight._m0[_2315].y) * _2383) * _2384) + _2242;
        _2309 = (((((_2364 * _2132) + _836) * cbLight._m0[_2315].z) * _2383) * _2384) + _2243;
    }
    float _2419;
    float _2421;
    float _2423;
    if (_2033)
    {
        _2419 = _2305;
        _2421 = _2307;
        _2423 = _2309;
    }
    else
    {
        uint _2430 = _1939 + 3u;
        uint _2434 = _1939 + 11u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _674) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _751;
        float _2451 = cbLight._m0[_2430].y + _752;
        float _2452 = cbLight._m0[_2430].z + _753;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_2430].xyz));
        float _4426 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2464 = dot(vec3(_671, _672, _673), vec3(_2457, _2458, _2459));
        float _4437 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4448 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
        float _2490 = 1.0 - _2449;
        float _2500 = (0.5 / (((_2107 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2490) + _2449) * _2463))) * _2463;
        float _4459 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2419 = (((((_2483 * _2129) + _833) * cbLight._m0[_2434].x) * _2502) * _2503) + _2305;
        _2421 = (((((_2483 * _2131) + _835) * cbLight._m0[_2434].y) * _2502) * _2503) + _2307;
        _2423 = (((((_2483 * _2132) + _836) * cbLight._m0[_2434].z) * _2502) * _2503) + _2309;
    }
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    if (_1937.y == 0u)
    {
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2578;
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2578;
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2578;
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.x;
        uint _2605 = uint((float(_2593.y) * floor(float(uint(cbSceneParam._m0[85u].y * _772) / _2594))) + floor(float(uint(cbSceneParam._m0[85u].x * _771) / _2594)));
        float _2615 = (log2(_2581 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2616 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        uint _2619 = uint(isnan(14.0) ? _2616 : (isnan(_2616) ? 14.0 : min(_2616, 14.0)));
        uvec4 _2624 = texelFetch(g_lightClusterGridBuffer, int(((_2619 << 2u) + (_2605 << 6u)) >> 2u));
        uint _2625 = _2624.x;
        uint _2626 = _2593.z;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        if (((((1u << ((_2626 >> 4u) & 15u)) + 4294967295u) & _2625) == 0u) || ((_2626 & 240u) == 0u))
        {
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
        }
        else
        {
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            uint _2885 = 0u;
            uint _2894;
            bool _2895;
            for (;;)
            {
                _2894 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_2885 << 2u)) >> 2u)).x;
                _2895 = _2894 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2895)
                {
                    frontier_phi_66_pred = _2879;
                    frontier_phi_66_pred_1 = _2884;
                    frontier_phi_66_pred_2 = _2883;
                    frontier_phi_66_pred_3 = _2882;
                    frontier_phi_66_pred_4 = _2881;
                    frontier_phi_66_pred_5 = _2880;
                }
                else
                {
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    uint _3030;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2894;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    for (;;)
                    {
                        uint _3034 = uint(findLSB(_3030)) + (_2885 << 5u);
                        uint _3031 = (_3030 + 4294967295u) & _3030;
                        uint _3036 = _3034 * 48u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 3u)).x));
                        uint _3056 = (_3034 * 48u) + 4u;
                        vec4 _3069 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 3u)).x));
                        uint _3075 = (_3034 * 48u) + 8u;
                        vec3 _3086 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x));
                        float _3090 = _3050.x - _2579;
                        float _3091 = _3050.y - _2580;
                        float _3092 = _3050.z - _2581;
                        float _3093 = dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092));
                        float _3096 = inversesqrt(_3093);
                        float _3097 = _3096 * _3090;
                        float _3098 = _3096 * _3091;
                        float _3099 = _3096 * _3092;
                        float _3100 = dot(vec3(_790, _793, _796), vec3(_3097, _3098, _3099));
                        float _3105 = 1.0 - (_3093 * _3050.w);
                        float _4485 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3106 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3107 = sqrt(_3093) * _3069.w;
                        float _3110 = 1.39999997615814208984375 / (_3107 + 1.39999997615814208984375);
                        float _3111 = _3110 * _3110;
                        float _3114 = ((1.0 - _3111) * _3100) + _3111;
                        float _3117 = _3107 * _3107;
                        float _3121 = ((isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))) * _3106) / ((_3117 * 0.699999988079071044921875) + 1.0);
                        float _3125 = (-0.0) - _2579;
                        float _3126 = (-0.0) - _2580;
                        float _3127 = (-0.0) - _2581;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3142 = exp2(log2(1.0 / ((_3117 * 3.5) + 5.0)) * 0.25);
                        float _3143 = 1.0 - _865;
                        float _3150 = sqrt(1.0 - ((1.0 - (_3143 * _3143)) * (1.0 - (_3142 * _3142))));
                        float _3151 = _3150 * _3150;
                        float _3152 = _3151 * _3151;
                        float _3153 = _3132 + _3097;
                        float _3154 = _3133 + _3098;
                        float _3155 = _3134 + _3099;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3163 = dot(vec3(_790, _793, _796), vec3(_3132, _3133, _3134));
                        float _4501 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3166 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3167 = dot(vec3(_790, _793, _796), vec3(_3159 * _3153, _3159 * _3154, _3159 * _3155));
                        float _4512 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3170 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3174 = ((_3170 * _3170) * (_3152 + (-1.0))) + 1.0;
                        float _3175 = _3110 * _3151;
                        float _3176 = _3175 * _3175;
                        float _3179 = ((1.0 - _3176) * _3100) + _3176;
                        float _4523 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3180 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3181 = 1.0 - _3151;
                        float _3191 = (0.5 / (((_3180 * ((_3166 * _3181) + _3151)) + 9.9999999392252902907785028219223e-09) + (((_3180 * _3181) + _3151) * _3166))) * _3180;
                        float _4534 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3202 = (((_3152 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3174 * _3174) * ((_3117 * 2.1991131305694580078125) + 3.141590118408203125))) * _3106;
                        _2954 = (_3121 * _3069.x) + _3027;
                        _2955 = (_3121 * _3069.y) + _3028;
                        _2956 = (_3121 * _3069.z) + _3029;
                        _2951 = (_3202 * _3086.x) + _3024;
                        _2952 = (_3202 * _3086.y) + _3025;
                        _2953 = (_3202 * _3086.z) + _3026;
                        if (_3031 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _3031;
                        }
                    }
                    frontier_phi_66_pred = _2951;
                    frontier_phi_66_pred_1 = _2956;
                    frontier_phi_66_pred_2 = _2955;
                    frontier_phi_66_pred_3 = _2954;
                    frontier_phi_66_pred_4 = _2953;
                    frontier_phi_66_pred_5 = _2952;
                }
                _2727 = frontier_phi_66_pred;
                _2737 = frontier_phi_66_pred_1;
                _2735 = frontier_phi_66_pred_2;
                _2733 = frontier_phi_66_pred_3;
                _2731 = frontier_phi_66_pred_4;
                _2729 = frontier_phi_66_pred_5;
                uint _2886 = _2885 + 1u;
                if (_2886 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2879 = _2727;
                    _2880 = _2729;
                    _2881 = _2731;
                    _2882 = _2733;
                    _2883 = _2735;
                    _2884 = _2737;
                    _2885 = _2886;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
        }
        uvec4 _2740 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2741 = _2740.z;
        uint _2743 = (_2741 >> 8u) & 15u;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((4294967295u << _2743) & _2625) == 0u)
        {
            _2847 = _2726;
            _2849 = _2728;
            _2851 = _2730;
            _2853 = _2732;
            _2855 = _2734;
            _2857 = _2736;
        }
        else
        {
            float _2872 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
            float _2873 = _2872 * _2579;
            float _2874 = _2872 * _2580;
            float _2875 = _2872 * _2581;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2743 < ((_2741 >> 12u) & 15u))
            {
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _3007 = _2726;
                float _3008 = _2728;
                float _3009 = _2730;
                float _3010 = _2732;
                float _3011 = _2734;
                float _3012 = _2736;
                uint _3013 = _2743;
                uint _3022;
                bool _3023;
                for (;;)
                {
                    _3022 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_3013 << 2u)) >> 2u)).x;
                    _3023 = _3022 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3023)
                    {
                        frontier_phi_77_pred = _3012;
                        frontier_phi_77_pred_1 = _3011;
                        frontier_phi_77_pred_2 = _3010;
                        frontier_phi_77_pred_3 = _3009;
                        frontier_phi_77_pred_4 = _3008;
                        frontier_phi_77_pred_5 = _3007;
                    }
                    else
                    {
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3229 = _3007;
                        float _3230 = _3008;
                        float _3231 = _3009;
                        float _3232 = _3010;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        uint _3235 = _3022;
                        uint _3236;
                        vec4 _3261;
                        float _3262;
                        vec4 _3277;
                        vec3 _3289;
                        vec4 _3304;
                        vec4 _3320;
                        float _3366;
                        bool _3367;
                        for (;;)
                        {
                            uint _3246 = ((_3013 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3235));
                            _3236 = (_3235 + 4294967295u) & _3235;
                            uint _3248 = _3246 * 40u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3262 = _3261.w;
                            uint _3264 = (_3246 * 40u) + 4u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3246 * 40u) + 8u;
                            _3289 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x));
                            uint _3291 = (_3246 * 40u) + 16u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3307 = (_3246 * 40u) + 20u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3322 = (_3246 * 40u) + 24u;
                            vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3341 = (_3246 * 40u) + 28u;
                            vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            _3366 = fma(_2581, _3354.z, fma(_2580, _3354.y, _3354.x * _2579)) + _3354.w;
                            _3367 = !((fma(_2581, _3335.z, fma(_2580, _3335.y, _3335.x * _2579)) + _3335.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3367)
                            {
                                float _3394 = _3261.x - _2579;
                                float _3395 = _3261.y - _2580;
                                float _3396 = _3261.z - _2581;
                                float _3397 = dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396));
                                float _3400 = inversesqrt(_3397);
                                float _3401 = _3400 * _3394;
                                float _3402 = _3400 * _3395;
                                float _3403 = _3400 * _3396;
                                float _3407 = 1.0 - (_3397 / (_3262 * _3262));
                                float _4545 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3408 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3412 = sqrt(_3397) * _3277.w;
                                float _3414 = 1.39999997615814208984375 / (_3412 + 1.39999997615814208984375);
                                float _3415 = _3414 * _3414;
                                float _3418 = ((1.0 - _3415) * dot(vec3(_3401, _3402, _3403), vec3(_790, _793, _796))) + _3415;
                                float _3421 = _3412 * _3412;
                                float _3425 = (fma(_2581, _3304.z, fma(_2580, _3304.y, _3304.x * _2579)) + _3304.w) / _3366;
                                float _3426 = (fma(_2581, _3320.z, fma(_2580, _3320.y, _3320.x * _2579)) + _3320.w) / _3366;
                                float _3430 = 1.0 - dot(vec2(_3425, _3426), vec2(_3425, _3426));
                                float _4561 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3432 = _3431 * (((isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0))) * _3408) / ((_3421 * 0.699999988079071044921875) + 1.0));
                                float _3444 = exp2(log2(1.0 / ((_3421 * 3.5) + 5.0)) * 0.25);
                                float _3445 = 1.0 - _865;
                                float _3452 = sqrt(1.0 - ((1.0 - (_3445 * _3445)) * (1.0 - (_3444 * _3444))));
                                float _3453 = _3452 * _3452;
                                float _3454 = _3453 * _3453;
                                float _3455 = _3401 - _2873;
                                float _3456 = _3402 - _2874;
                                float _3457 = _3403 - _2875;
                                float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                                float _3465 = dot(vec3(_790, _793, _796), vec3((-0.0) - _2873, (-0.0) - _2874, (-0.0) - _2875));
                                float _4572 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3468 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3469 = dot(vec3(_790, _793, _796), vec3(_3461 * _3455, _3461 * _3456, _3461 * _3457));
                                float _4583 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3472 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3476 = ((_3472 * _3472) * (_3454 + (-1.0))) + 1.0;
                                float _3477 = _3414 * _3453;
                                float _3478 = _3477 * _3477;
                                float _3484 = ((1.0 - _3478) * dot(vec3(_790, _793, _796), vec3(_3401, _3402, _3403))) + _3478;
                                float _4594 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3486 = 1.0 - _3453;
                                float _3496 = (0.5 / (((_3485 * ((_3468 * _3486) + _3453)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3453) * _3468))) * _3485;
                                float _4605 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3506 = (_3431 * _3408) * (((_3454 * 3.1415927410125732421875) * (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) / ((_3476 * _3476) * ((_3421 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3432 * _3277.y;
                                frontier_phi_83_pred_1 = _3432 * _3277.x;
                                frontier_phi_83_pred_2 = _3506 * _3289.z;
                                frontier_phi_83_pred_3 = _3506 * _3289.y;
                                frontier_phi_83_pred_4 = _3506 * _3289.x;
                                frontier_phi_83_pred_5 = _3432 * _3277.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3514 = frontier_phi_83_pred;
                            _3513 = frontier_phi_83_pred_1;
                            _3512 = frontier_phi_83_pred_2;
                            _3511 = frontier_phi_83_pred_3;
                            _3510 = frontier_phi_83_pred_4;
                            _3515 = frontier_phi_83_pred_5;
                            _3219 = _3513 + _3232;
                            _3220 = _3514 + _3233;
                            _3221 = _3515 + _3234;
                            _3216 = _3510 + _3229;
                            _3217 = _3511 + _3230;
                            _3218 = _3512 + _3231;
                            if (_3236 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3236;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3221;
                        frontier_phi_77_pred_1 = _3220;
                        frontier_phi_77_pred_2 = _3219;
                        frontier_phi_77_pred_3 = _3218;
                        frontier_phi_77_pred_4 = _3217;
                        frontier_phi_77_pred_5 = _3216;
                    }
                    _2858 = frontier_phi_77_pred;
                    _2856 = frontier_phi_77_pred_1;
                    _2854 = frontier_phi_77_pred_2;
                    _2852 = frontier_phi_77_pred_3;
                    _2850 = frontier_phi_77_pred_4;
                    _2848 = frontier_phi_77_pred_5;
                    uint _3014 = _3013 + 1u;
                    if (_3014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3007 = _2848;
                        _3008 = _2850;
                        _3009 = _2852;
                        _3010 = _2854;
                        _3011 = _2856;
                        _3012 = _2858;
                        _3013 = _3014;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2852;
                frontier_phi_58_59_ladder_1 = _2858;
                frontier_phi_58_59_ladder_2 = _2856;
                frontier_phi_58_59_ladder_3 = _2854;
                frontier_phi_58_59_ladder_4 = _2850;
                frontier_phi_58_59_ladder_5 = _2848;
            }
            else
            {
                frontier_phi_58_59_ladder = _2730;
                frontier_phi_58_59_ladder_1 = _2736;
                frontier_phi_58_59_ladder_2 = _2734;
                frontier_phi_58_59_ladder_3 = _2732;
                frontier_phi_58_59_ladder_4 = _2728;
                frontier_phi_58_59_ladder_5 = _2726;
            }
            _2847 = frontier_phi_58_59_ladder_5;
            _2849 = frontier_phi_58_59_ladder_4;
            _2851 = frontier_phi_58_59_ladder;
            _2853 = frontier_phi_58_59_ladder_3;
            _2855 = frontier_phi_58_59_ladder_2;
            _2857 = frontier_phi_58_59_ladder_1;
        }
        float _2862 = isnan(1.0) ? _849 : (isnan(_849) ? 1.0 : min(_849, 1.0));
        _2638 = (_2862 * _2853) + _2071;
        _2640 = (_2862 * _2855) + _2073;
        _2642 = (_2862 * _2857) + _2075;
        _2644 = ((_2847 * _833) * _2862) + _2419;
        _2646 = ((_2849 * _835) * _2862) + _2421;
        _2648 = ((_2851 * _836) * _2862) + _2423;
    }
    else
    {
        _2638 = _2071;
        _2640 = _2073;
        _2642 = _2075;
        _2644 = _2419;
        _2646 = _2421;
        _2648 = _2423;
    }
    float _4621 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4632 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4643 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _2665 = ((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2638 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _849))) + ((_2644 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1688)) * cbPerFrame._m0[3u].x);
    float _2666 = ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2640 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _849))) + ((_2646 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1688)) * cbPerFrame._m0[3u].x);
    float _2667 = ((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2642 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _849))) + ((_2648 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1688)) * cbPerFrame._m0[3u].x);
    uint _2668 = _240 + 6u;
    float _2676 = _771 / cbSceneParam._m0[86u].x;
    float _2677 = _772 / cbSceneParam._m0[86u].y;
    vec4 _2691 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2676, _2677, (log2((isnan(cbSceneParam._m0[77u].w) ? _693 : (isnan(_693) ? cbSceneParam._m0[77u].w : min(_693, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2693 = _2691.x;
    float _2694 = _2691.y;
    float _2695 = _2691.z;
    float _2696 = _2691.w;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    if (_693 > cbSceneParam._m0[78u].w)
    {
        float _2751 = isnan(_693) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _693 : min(cbSceneParam._m0[80u].w, _693));
        float _2752 = _2751 / _693;
        float _2763 = _2752 * _744;
        float _2764 = _745 * _2752;
        float _2765 = (-0.0) - _2764;
        float _2767 = _2752 * _746;
        float _2769 = (cbSceneParam._m0[77u].w * _2765) / _2751;
        float _2770 = _2769 + cbSceneParam._m0[79u].w;
        float _2771 = cbSceneParam._m0[79u].w - _2764;
        float _2777 = sqrt(((_2763 * _2763) + (_2764 * _2764)) + (_2767 * _2767));
        float _2780 = (1.0 - (cbSceneParam._m0[77u].w / _2751)) * _2777;
        float _2785 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2787 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2964;
        if (abs((_2765 - _2769) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2964 = ((((_2770 > 0.0) ? exp2(_2785 * _2770) : (2.0 - exp2(_2787 * _2770))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2780;
        }
        else
        {
            float _2908 = 1.0 / cbSceneParam._m0[80u].x;
            float _2909 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : max(_2770, _2771));
            float _2910 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : min(_2770, _2771));
            float _2919 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : min(_2909, 0.0));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            _2964 = ((abs(_2777 / _2765) * cbSceneParam._m0[80u].y) * ((((_2919 - _2920) * 2.0) - ((exp2(_2785 * (isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0)))) - exp2(_2785 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0))))) * _2908)) - ((exp2(_2787 * _2919) - exp2(_2787 * _2920)) * _2908))) + (_2780 * cbSceneParam._m0[80u].z);
        }
        vec4 _2966 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2676, _2677, 1.0), 0.0);
        float _2975 = exp2((_2964 * (-1.44269502162933349609375)) * (1.0 - _2966.w));
        float _2976 = log2(_2975);
        float _2992 = log2(_2696);
        _2789 = (exp2(_2992 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].x)) * _2966.x) / cbSceneParam._m0[78u].x)) + _2693;
        _2791 = (exp2(_2992 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].y)) * _2966.y) / cbSceneParam._m0[78u].y)) + _2694;
        _2793 = (exp2(_2992 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].z)) * _2966.z) / cbSceneParam._m0[78u].z)) + _2695;
        _2795 = _2975 * _2696;
    }
    else
    {
        _2789 = _2693;
        _2791 = _2694;
        _2793 = _2695;
        _2795 = _2696;
    }
    bool _3002;
    vec4 _2805;
    vec4 _2827;
    float _2829;
    float _2833;
    float _2834;
    float _2835;
    float _2836;
    bool _2846;
    for (;;)
    {
        _2805 = cbMatDynParam._m0[0u];
        float _2807 = roundEven(_2805.y);
        bool _2808 = _2807 == 3.0;
        float _2809 = log2(_2795);
        float _2816 = exp2(_2809 * cbSceneParam._m0[78u].x) * _2665;
        float _2817 = exp2(_2809 * cbSceneParam._m0[78u].y) * _2666;
        float _2818 = exp2(_2809 * cbSceneParam._m0[78u].z) * _2667;
        float _2825 = _760 + (-0.5);
        _2827 = cbMtdParam._m0[1u];
        _2829 = _2827.y * _2825;
        float _2832 = (_2807 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2833 = _2832 * (_2808 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2789)));
        _2834 = _2832 * (_2808 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2791)));
        _2835 = _2832 * (_2808 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2793)));
        _2836 = _2825 * 0.999000012874603271484375;
        _2846 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2846)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2836) < 0.5)
            {
                _3002 = true;
                break;
            }
        }
        uint _2943 = _809 + uint(_2805.w);
        if ((cbInstanceData._m0[_2943].w < 1.0) && ((cbInstanceData._m0[_2943].w + _2836) < 0.5))
        {
            _3002 = true;
            break;
        }
        if ((_2829 + 1.0) < _2827.x)
        {
            _3002 = true;
            break;
        }
        _3002 = false;
        break;
    }
    float _3207;
    if (_3002)
    {
        discard_state = true;
        _3207 = 0.0;
    }
    else
    {
        _3207 = cbInstanceData._m0[_2668].w;
    }
    SV_Target.x = _2833;
    SV_Target.y = _2834;
    SV_Target.z = _2835;
    SV_Target.w = _3207;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2668].w;
    discard_exit();
}


