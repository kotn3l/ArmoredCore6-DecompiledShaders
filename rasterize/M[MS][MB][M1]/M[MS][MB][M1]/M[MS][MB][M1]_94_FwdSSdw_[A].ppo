#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1433;
float _3838;
float _3839;
float _3840;
float _3841;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3850 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3861 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3872 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].y) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3883 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _443 = (_436 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _444 = (_436 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _445 = (_436 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) + _455;
    vec4 _482 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    float _537 = ((_507.z - _528) * _436) + _528;
    float _540 = ((((_507.x - _526) * _436) + _526) * 2.0) + (-1.0);
    float _541 = ((((_507.y - _527) * _436) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3894 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))));
    vec4 _563 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _590 = _588.x;
    float _591 = 1.0 - _590;
    float _597 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _600 = ((isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : min(_597, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _609 = (_600 - ((((((_590 - _591) * cbMtdParam._m0[24u].z) + _591) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _600))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3915 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _610 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _617 = (_610 * (cbMtdParam._m0[17u].x - _462)) + _462;
    float _618 = (_610 * (cbMtdParam._m0[17u].y - _463)) + _463;
    float _619 = (_610 * (cbMtdParam._m0[17u].z - _464)) + _464;
    vec4 _631 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _633 = _631.x;
    float _634 = 1.0 - _633;
    float _659 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_633 - _634) * cbMtdParam._m0[24u].w) + _634) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3926 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _660 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _668 = ((((cbMtdParam._m0[10u].x - _617) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _660) + _617;
    float _669 = ((((cbMtdParam._m0[10u].y - _618) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _660) + _618;
    float _670 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _619)) * _660) + _619;
    vec4 _682 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _696 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _698 = _696.x;
    float _716 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _698) * _436) + _698;
    float _720 = ((_682.x - _716) * cbMtdParam._m0[19u].z) + _716;
    float _722 = _720 - (_720 * _610);
    float _724 = _722 - (_722 * _660);
    float _729 = (((_482.z - _537) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _537;
    float _733 = ((_563.z - _729) * cbMtdParam._m0[19u].w) + _729;
    vec4 _747 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _754 = (_747.x * 2.0) + (-1.0);
    float _755 = (_747.y * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _3937 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _764 = (_610 * (_747.z - _733)) + _733;
    float _767 = ((cbMtdParam._m0[23u].y - _764) * _660) + _764;
    vec4 _786 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _792 = (_786.x * 2.0) + (-1.0);
    float _793 = (_786.y * 2.0) + (-1.0);
    float _794 = dot(vec2(_792, _793), vec2(_792, _793));
    float _3948 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _808 = (_540 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_482.x * 2.0) + (-1.0)))) + (((_563.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _809 = (_541 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_482.y * 2.0) + (-1.0)))) + (((_563.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _821 = (((_754 - _808) + (cbMtdParam._m0[21u].x * _808)) * _610) + _808;
    float _822 = (((_755 - _809) + (cbMtdParam._m0[21u].x * _809)) * _610) + _809;
    float _823 = (_610 * (sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) - _547)) + _547;
    float _834 = (((_792 - _821) + (_821 * cbMtdParam._m0[22u].z)) * _660) + _821;
    float _835 = (((_793 - _822) + (_822 * cbMtdParam._m0[22u].z)) * _660) + _822;
    float _836 = ((sqrt(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) - _823) * _660) + _823;
    float _840 = cbMtdParam._m0[22u].x + _563.w;
    float _843 = fma(_836, _253 * NORMAL.x, fma(_835, _260 * TANGENT.x, (_246 * _238) * _834));
    float _846 = fma(_836, _253 * NORMAL.y, fma(_835, _260 * TANGENT.y, (_246 * _239) * _834));
    float _849 = fma(_836, _253 * NORMAL.z, fma(_835, _260 * TANGENT.z, (_246 * _240) * _834));
    float _853 = inversesqrt(dot(vec3(_843, _846, _849), vec3(_843, _846, _849)));
    float _854 = _853 * _843;
    float _855 = _853 * _846;
    float _856 = _853 * _849;
    float _3959 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _857 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _3981 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3992 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4003 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4014 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _862 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _876 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _926 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _916);
    float _927 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _916);
    float _928 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _916);
    float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
    float _933 = _926 * _932;
    float _934 = _927 * _932;
    float _935 = _928 * _932;
    vec4 _940 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _942 = _940.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1114 = sqrt(((_926 * _926) + (_927 * _927)) + (_928 * _928));
        float _1120 = (cbMatDynParam._m0[5u].x * _1114) + cbMatDynParam._m0[5u].y;
        float _4025 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1125 = (cbMatDynParam._m0[5u].z * _1114) + cbMatDynParam._m0[5u].w;
        float _4036 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) - _1121)) + _1121) < ((_942 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _953 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _954 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _972 = fma(_856, cbSceneParam._m0[5u].z, fma(_855, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _854));
    float _975 = fma(_856, cbSceneParam._m0[6u].z, fma(_855, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _854));
    float _978 = fma(_856, cbSceneParam._m0[7u].z, fma(_855, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _854));
    uint _991 = _285 + 9u;
    uint _992 = _991 + uint(cbMatDynParam._m0[0u].w);
    float _998 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_992].x;
    float _999 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_992].y;
    float _1000 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * cbInstanceData._m0[_992].z;
    float _4047 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _4058 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _1004 = 1.0 - _862;
    float _1005 = _1001 * _1004;
    float _1006 = _1002 * _1004;
    float _1007 = _1003 * _1004;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _862;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _862;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _862;
    float _1015 = _1012 + 0.039999999105930328369140625;
    float _1017 = _1013 + 0.039999999105930328369140625;
    float _1018 = _1014 + 0.039999999105930328369140625;
    vec4 _1027 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _953, cbSceneParam._m0[86u].y * _954));
    float _1031 = ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * TEXCOORD_5.w) * _1027.x;
    float _1032 = dot(vec3(_854, _855, _856), vec3(_933, _934, _935));
    float _1035 = _1032 * 2.0;
    float _1039 = (_1035 * _854) - _933;
    float _1040 = (_1035 * _855) - _934;
    float _1041 = (_1035 * _856) - _935;
    float _1045 = abs(dot(vec3(_933, _934, _935), vec3(_854, _855, _856)));
    float _4080 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1047 = sqrt(_857);
    float _1060 = exp2((_1047 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1047 * 3.0));
    float _1066 = (1.0 - _1060) * ((_1047 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1067 = _1060 * _1047;
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1432;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1157 = fma(_1103, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1095));
        float _1161 = fma(_1103, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1095));
        float _1165 = fma(_1103, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1095));
        float _1190 = _1095 + _854;
        float _1191 = _1099 + _855;
        float _1192 = _1103 + _856;
        float _1202 = fma(_1192, cbModelParam._m0[26u].z, fma(_1191, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190)) - _1157;
        float _1203 = fma(_1192, cbModelParam._m0[27u].z, fma(_1191, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190)) - _1161;
        float _1204 = fma(_1192, cbModelParam._m0[28u].z, fma(_1191, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190)) - _1165;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1157 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1161 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[34u].z) + ((((((_1165 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1260 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1226.x + (-0.5));
        float _1262 = _1260 * (_1226.y + (-0.5));
        float _1263 = _1260 * (_1226.z + (-0.5));
        float _1270 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1233.x + (-0.5));
        float _1272 = _1270 * (_1233.y + (-0.5));
        float _1273 = _1270 * (_1233.z + (-0.5));
        float _1280 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1240.x + (-0.5));
        float _1282 = _1280 * (_1240.y + (-0.5));
        float _1283 = _1280 * (_1240.z + (-0.5));
        float _1290 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1247.x + (-0.5));
        float _1292 = _1290 * (_1247.y + (-0.5));
        float _1293 = _1290 * (_1247.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1314 = (dot(vec3(_854, _855, _856), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1324 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4128 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1326 + 1.0))) + _1331) * _1294;
        float _1341 = _1262 * 0.5;
        float _1342 = _1272 * 0.5;
        float _1343 = _1282 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_854, _855, _856), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4161 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1368 + 1.0))) + _1373) * _1295;
        float _1383 = _1263 * 0.5;
        float _1384 = _1273 * 0.5;
        float _1385 = _1283 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_854, _855, _856), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4194 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1410 + 1.0))) + _1415) * _1296;
        _1432 = _1263;
        _1434 = _1262;
        _1435 = _1261;
        _1436 = _1273;
        _1437 = _1272;
        _1438 = _1271;
        _1439 = _1283;
        _1440 = _1282;
        _1441 = _1281;
        _1442 = _1296;
        _1443 = _1295;
        _1444 = _1294;
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
    }
    else
    {
        _1432 = _1433;
        _1434 = _1433;
        _1435 = _1433;
        _1436 = _1433;
        _1437 = _1433;
        _1438 = _1433;
        _1439 = _1433;
        _1440 = _1433;
        _1441 = _1433;
        _1442 = _1433;
        _1443 = _1433;
        _1444 = _1433;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1475 = fma(_1103, cbModelParam._m0[30u].z, fma(_1099, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1095));
        float _1479 = fma(_1103, cbModelParam._m0[31u].z, fma(_1099, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1095));
        float _1483 = fma(_1103, cbModelParam._m0[32u].z, fma(_1099, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1095));
        float _1506 = _1095 + _854;
        float _1507 = _1099 + _855;
        float _1508 = _1103 + _856;
        float _1518 = fma(_1508, cbModelParam._m0[30u].z, fma(_1507, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1506)) - _1475;
        float _1519 = fma(_1508, cbModelParam._m0[31u].z, fma(_1507, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1506)) - _1479;
        float _1520 = fma(_1508, cbModelParam._m0[32u].z, fma(_1507, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1506)) - _1483;
        float _1524 = inversesqrt(dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520)));
        float _1537 = ((_1524 * _1518) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1475 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1524 * _1519) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1479 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1539 = ((_1524 * _1520) / cbModelParam._m0[35u].z) + ((((((_1483 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        float _1574 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1541.x + (-0.5));
        float _1576 = _1574 * (_1541.y + (-0.5));
        float _1577 = _1574 * (_1541.z + (-0.5));
        float _1584 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1548.x + (-0.5));
        float _1586 = _1584 * (_1548.y + (-0.5));
        float _1587 = _1584 * (_1548.z + (-0.5));
        float _1594 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1555.x + (-0.5));
        float _1596 = _1594 * (_1555.y + (-0.5));
        float _1597 = _1594 * (_1555.z + (-0.5));
        float _1604 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1562.x + (-0.5));
        float _1606 = _1604 * (_1562.y + (-0.5));
        float _1607 = _1604 * (_1562.z + (-0.5));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = _1575 * 0.5;
        float _1612 = _1585 * 0.5;
        float _1613 = _1595 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_854, _855, _856), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4257 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1638 + 1.0))) + _1643) * _1608;
        float _1653 = _1576 * 0.5;
        float _1654 = _1586 * 0.5;
        float _1655 = _1596 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_854, _855, _856), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4290 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1680 + 1.0))) + _1685) * _1609;
        float _1695 = _1577 * 0.5;
        float _1696 = _1587 * 0.5;
        float _1697 = _1597 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_854, _855, _856), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4323 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1722 + 1.0))) + _1727) * _1610;
        _1744 = _1577;
        _1745 = _1576;
        _1746 = _1575;
        _1747 = _1587;
        _1748 = _1586;
        _1749 = _1585;
        _1750 = _1597;
        _1751 = _1596;
        _1752 = _1595;
        _1753 = _1610;
        _1754 = _1609;
        _1755 = _1608;
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
    }
    else
    {
        _1744 = _1433;
        _1745 = _1433;
        _1746 = _1433;
        _1747 = _1433;
        _1748 = _1433;
        _1749 = _1433;
        _1750 = _1433;
        _1751 = _1433;
        _1752 = _1433;
        _1753 = _1433;
        _1754 = _1433;
        _1755 = _1433;
        _1756 = 0.0;
        _1757 = 0.0;
        _1758 = 0.0;
    }
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1445)) + _1445;
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1446)) + _1446;
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1447)) + _1447;
    float _1791 = fma(_1770, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1768 * cbSceneParam._m0[89u].x));
    float _1794 = fma(_1770, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1768 * cbSceneParam._m0[90u].x));
    float _1797 = fma(_1770, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1768));
    float _1812 = _1039 * 0.5;
    float _1813 = _1040 * 0.5;
    float _1814 = _1041 * 0.5;
    float _1815 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1818 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1821 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1855;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1828 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1432, _1436, _1439, _1442));
        float _1832 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1836 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1435, _1438, _1441, _1444));
        float _1843 = dot(vec4(cbModelParam._m0[39u]), vec4(_1812, _1813, _1814, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1843) ? 0.0 : (isnan(0.0) ? _1843 : max(0.0, _1843))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1866;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1857 = dot(vec4(cbModelParam._m0[40u]), vec4(_1812, _1813, _1814, 1.0));
        _1866 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1857) ? 0.0 : (isnan(0.0) ? _1857 : max(0.0, _1857))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1866 = 1.0;
    }
    float _1870 = (_1866 * cbModelParam._m0[1u].x) + (_1855 * (1.0 - cbModelParam._m0[1u].x));
    float _1880 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _857);
    float _1881 = isnan(_1880) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1880 : min(cbModelParam._m0[25u].z, _1880));
    float _1962;
    float _1964;
    float _1966;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1929 = fma(_1103, cbModelParam._m0[13u].z, fma(_1099, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1095)) + cbModelParam._m0[13u].w;
        float _1933 = fma(_1103, cbModelParam._m0[14u].z, fma(_1099, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1095)) + cbModelParam._m0[14u].w;
        float _1937 = fma(_1103, cbModelParam._m0[15u].z, fma(_1099, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1095)) + cbModelParam._m0[15u].w;
        float _1940 = fma(_1041, cbModelParam._m0[13u].z, fma(_1040, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039));
        float _1943 = fma(_1041, cbModelParam._m0[14u].z, fma(_1040, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039));
        float _1946 = fma(_1041, cbModelParam._m0[15u].z, fma(_1040, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039));
        float _1974;
        if (_1940 > 0.0)
        {
            _1974 = abs((1.0 - _1929) / _1940);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1929 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1974 = frontier_phi_17_15_ladder;
        }
        float _2198;
        if (_1943 > 0.0)
        {
            _2198 = abs((1.0 - _1933) / _1943);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1933 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2198 = frontier_phi_26_22_ladder;
        }
        float _2455;
        if (_1946 > 0.0)
        {
            _2455 = abs((1.0 - _1937) / _1946);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1937 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2455 = frontier_phi_38_33_ladder;
        }
        float _2457 = isnan(_2198) ? _1974 : (isnan(_1974) ? _2198 : min(_1974, _2198));
        float _2458 = isnan(_2455) ? _2457 : (isnan(_2457) ? _2455 : min(_2457, _2455));
        float _2462 = (_2458 * _1940) + _1929;
        float _2463 = (_2458 * _1943) + _1933;
        float _2464 = (_2458 * _1946) + _1937;
        float _2465 = _2458 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2465;
        float _2469 = _2465 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 > _2469) || ((_2463 < _2467) || ((_2462 < _2467) || (_2462 > _2469))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2464, cbModelParam._m0[9u].z, fma(_2463, cbModelParam._m0[9u].y, _2462 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2464, cbModelParam._m0[10u].z, fma(_2463, cbModelParam._m0[10u].y, _2462 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2464, cbModelParam._m0[11u].z, fma(_2463, cbModelParam._m0[11u].y, _2462 * cbModelParam._m0[11u].x))), _1881);
            frontier_phi_16_38_ladder = _2592.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2592.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2592.x * cbModelParam._m0[1u].y;
        }
        _1962 = frontier_phi_16_38_ladder_2;
        _1964 = frontier_phi_16_38_ladder_1;
        _1966 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1950 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1039, _1040, _1041), _1881);
        _1962 = _1950.x * cbModelParam._m0[1u].y;
        _1964 = _1950.y * cbModelParam._m0[1u].y;
        _1966 = _1950.z * cbModelParam._m0[1u].y;
    }
    float _1970 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _857);
    float _1971 = isnan(_1970) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1970 : min(cbModelParam._m0[25u].w, _1970));
    float _2061;
    float _2063;
    float _2065;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2025 = fma(_1103, cbModelParam._m0[21u].z, fma(_1099, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1095)) + cbModelParam._m0[21u].w;
        float _2029 = fma(_1103, cbModelParam._m0[22u].z, fma(_1099, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1095)) + cbModelParam._m0[22u].w;
        float _2033 = fma(_1103, cbModelParam._m0[23u].z, fma(_1099, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1095)) + cbModelParam._m0[23u].w;
        float _2036 = fma(_1041, cbModelParam._m0[21u].z, fma(_1040, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039));
        float _2039 = fma(_1041, cbModelParam._m0[22u].z, fma(_1040, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039));
        float _2042 = fma(_1041, cbModelParam._m0[23u].z, fma(_1040, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039));
        float _2203;
        if (_2036 > 0.0)
        {
            _2203 = abs((1.0 - _2025) / _2036);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2025 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2203 = frontier_phi_28_24_ladder;
        }
        float _2482;
        if (_2039 > 0.0)
        {
            _2482 = abs((1.0 - _2029) / _2039);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2029 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2482 = frontier_phi_40_35_ladder;
        }
        float _2695;
        if (_2042 > 0.0)
        {
            _2695 = abs((1.0 - _2033) / _2042);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2033 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2695 = frontier_phi_49_46_ladder;
        }
        float _2697 = isnan(_2482) ? _2203 : (isnan(_2203) ? _2482 : min(_2203, _2482));
        float _2698 = isnan(_2695) ? _2697 : (isnan(_2697) ? _2695 : min(_2697, _2695));
        float _2702 = (_2698 * _2036) + _2025;
        float _2703 = (_2698 * _2039) + _2029;
        float _2704 = (_2698 * _2042) + _2033;
        float _2705 = _2698 * 9.9999997473787516355514526367188e-05;
        float _2706 = (-1.0) - _2705;
        float _2708 = _2705 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2704 > _2708) || ((_2704 < _2706) || ((_2703 > _2708) || ((_2703 < _2706) || ((_2702 < _2706) || (_2702 > _2708))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2903 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2704, cbModelParam._m0[17u].z, fma(_2703, cbModelParam._m0[17u].y, _2702 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2704, cbModelParam._m0[18u].z, fma(_2703, cbModelParam._m0[18u].y, _2702 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2704, cbModelParam._m0[19u].z, fma(_2703, cbModelParam._m0[19u].y, _2702 * cbModelParam._m0[19u].x))), _1971);
            frontier_phi_25_49_ladder = _2903.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2903.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2903.x * cbModelParam._m0[1u].z;
        }
        _2061 = frontier_phi_25_49_ladder_2;
        _2063 = frontier_phi_25_49_ladder_1;
        _2065 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2045 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1039, _1040, _1041), _1971);
        _2061 = _2045.x * cbModelParam._m0[1u].z;
        _2063 = _2045.y * cbModelParam._m0[1u].z;
        _2065 = _2045.z * cbModelParam._m0[1u].z;
    }
    float _2078 = (((_1066 * _1015) + _1067) * _1031) * ((cbModelParam._m0[1u].w * (_2061 - _1962)) + _1962);
    float _2080 = (((_1066 * _1017) + _1067) * _1031) * ((cbModelParam._m0[1u].w * (_2063 - _1964)) + _1964);
    float _2082 = (((_1066 * _1018) + _1067) * _1031) * ((cbModelParam._m0[1u].w * (_2065 - _1966)) + _1966);
    float _2085 = fma(_2082, cbSceneParam._m0[89u].z, fma(_2080, cbSceneParam._m0[89u].y, _2078 * cbSceneParam._m0[89u].x));
    float _2088 = fma(_2082, cbSceneParam._m0[90u].z, fma(_2080, cbSceneParam._m0[90u].y, _2078 * cbSceneParam._m0[90u].x));
    float _2091 = fma(_2082, cbSceneParam._m0[91u].z, fma(_2080, cbSceneParam._m0[91u].y, _2078 * cbSceneParam._m0[91u].x));
    vec4 _2099 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_953, _954));
    float _2101 = _2099.w;
    float _2113 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2101);
    float _2114 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2101);
    float _2115 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2101);
    uvec4 _2119 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2121 = _2119.x * 14u;
    uint _2122 = _2121 + 13u;
    float _2129 = _1031 + (-1.0);
    float _2134 = (cbLight._m0[_2122].x * _2129) + 1.0;
    float _2135 = (cbLight._m0[_2122].y * _2129) + 1.0;
    float _2136 = (cbLight._m0[_2122].z * _2129) + 1.0;
    float _2137 = (cbLight._m0[_2122].w * _2129) + 1.0;
    uint _2138 = _2121 + 5u;
    float _2144 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2148 = _2121 + 4u;
    float _2157 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
    uint _2161 = _2121 | 1u;
    float _2172 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_854, _855, _856));
    float _2175 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_854, _855, _856));
    float _4459 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _4470 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2180 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * 0.3183098733425140380859375;
    float _2182 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * 0.3183098733425140380859375;
    float _2189 = ((cbLight._m0[_2138].x * _2144) * _2182) + (((cbLight._m0[_2148].x * _2113) * _2157) * _2180);
    float _2190 = ((_2144 * cbLight._m0[_2138].y) * _2182) + (((cbLight._m0[_2148].y * _2114) * _2157) * _2180);
    float _2191 = ((_2144 * cbLight._m0[_2138].z) * _2182) + (((cbLight._m0[_2148].z * _2115) * _2157) * _2180);
    uvec4 _2195 = floatBitsToUint(cbLight._m0[_2121 + 12u]);
    bool _2197 = _2195.x == 0u;
    float _2208;
    float _2210;
    float _2212;
    if (_2197)
    {
        _2208 = _2189;
        _2210 = _2190;
        _2212 = _2191;
    }
    else
    {
        uint _2216 = _2121 + 6u;
        float _2232 = (dot(vec3(cbLight._m0[_2121 + 2u].xyz), vec3(_854, _855, _856)) * 0.5) + 0.5;
        float _2233 = _2232 * _2232;
        float _4481 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2234 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2235 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2208 = (((cbLight._m0[_2216].x * 0.3183098733425140380859375) * _2234) * _2235) + _2189;
        _2210 = (((cbLight._m0[_2216].y * 0.3183098733425140380859375) * _2234) * _2235) + _2190;
        _2212 = (((cbLight._m0[_2216].z * 0.3183098733425140380859375) * _2234) * _2235) + _2191;
    }
    bool _2215 = _2195.y == 0u;
    float _2253;
    float _2255;
    float _2257;
    if (_2215)
    {
        _2253 = _2208;
        _2255 = _2210;
        _2257 = _2212;
    }
    else
    {
        uint _2426 = _2121 + 7u;
        float _2442 = (dot(vec3(cbLight._m0[_2121 + 3u].xyz), vec3(_854, _855, _856)) * 0.5) + 0.5;
        float _2443 = _2442 * _2442;
        float _4497 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2444 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2445 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2253 = (((cbLight._m0[_2426].x * 0.3183098733425140380859375) * _2444) * _2445) + _2208;
        _2255 = (((cbLight._m0[_2426].y * 0.3183098733425140380859375) * _2444) * _2445) + _2210;
        _2257 = (((cbLight._m0[_2426].z * 0.3183098733425140380859375) * _2444) * _2445) + _2212;
    }
    uint _2260 = _2121 + 8u;
    float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _857) * 0.949999988079071044921875);
    float _2274 = _2273 * _2273;
    float _2275 = cbLight._m0[_2121].x + _933;
    float _2276 = cbLight._m0[_2121].y + _934;
    float _2277 = cbLight._m0[_2121].z + _935;
    float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
    float _2282 = _2281 * _2275;
    float _2283 = _2281 * _2276;
    float _2284 = _2281 * _2277;
    float _2285 = dot(vec3(_854, _855, _856), vec3(cbLight._m0[_2121].xyz));
    float _4513 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _4524 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _2289 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _2290 = dot(vec3(_854, _855, _856), vec3(_2282, _2283, _2284));
    float _4535 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _2294 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2282, _2283, _2284));
    float _4546 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = _2274 * _2274;
    float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
    float _2310 = exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0);
    float _2311 = 0.959999978542327880859375 - _1012;
    float _2313 = 0.959999978542327880859375 - _1013;
    float _2314 = 0.959999978542327880859375 - _1014;
    float _2321 = 1.0 - _2274;
    float _2332 = (0.5 / (((_2289 * ((_2288 * _2321) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2321) + _2274) * _2288))) * _2288;
    float _4557 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2334 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
    uint _2348 = _2121 + 9u;
    float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _857) * 0.949999988079071044921875);
    float _2360 = _2359 * _2359;
    float _2361 = cbLight._m0[_2161].x + _933;
    float _2362 = cbLight._m0[_2161].y + _934;
    float _2363 = cbLight._m0[_2161].z + _935;
    float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
    float _2368 = _2367 * _2361;
    float _2369 = _2367 * _2362;
    float _2370 = _2367 * _2363;
    float _2371 = dot(vec3(_854, _855, _856), vec3(cbLight._m0[_2161].xyz));
    float _4568 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2375 = dot(vec3(_854, _855, _856), vec3(_2368, _2369, _2370));
    float _4579 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2379 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2368, _2369, _2370));
    float _4590 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2383 = _2360 * _2360;
    float _2387 = ((_2378 * _2378) * (_2383 + (-1.0))) + 1.0;
    float _2394 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
    float _2401 = 1.0 - _2360;
    float _2411 = (0.5 / (((_2289 * ((_2374 * _2401) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2401) + _2360) * _2374))) * _2374;
    float _4601 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2413 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2383 / ((_2387 * _2387) * 3.141590118408203125));
    float _2423 = (((((_2394 * _2311) + _1015) * cbLight._m0[_2348].x) * _2413) * _2144) + ((((cbLight._m0[_2260].x * _2113) * ((_2310 * _2311) + _1015)) * _2334) * _2157);
    float _2424 = (((((_2394 * _2313) + _1017) * cbLight._m0[_2348].y) * _2413) * _2144) + ((((cbLight._m0[_2260].y * _2114) * ((_2310 * _2313) + _1017)) * _2334) * _2157);
    float _2425 = (((((_2394 * _2314) + _1018) * cbLight._m0[_2348].z) * _2413) * _2144) + ((((cbLight._m0[_2260].z * _2115) * ((_2310 * _2314) + _1018)) * _2334) * _2157);
    float _2487;
    float _2489;
    float _2491;
    if (_2197)
    {
        _2487 = _2423;
        _2489 = _2424;
        _2491 = _2425;
    }
    else
    {
        uint _2493 = _2121 + 2u;
        uint _2497 = _2121 + 10u;
        float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _857) * 0.949999988079071044921875);
        float _2512 = _2511 * _2511;
        float _2513 = cbLight._m0[_2493].x + _933;
        float _2514 = cbLight._m0[_2493].y + _934;
        float _2515 = cbLight._m0[_2493].z + _935;
        float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
        float _2520 = _2519 * _2513;
        float _2521 = _2519 * _2514;
        float _2522 = _2519 * _2515;
        float _2523 = dot(vec3(_854, _855, _856), vec3(cbLight._m0[_2493].xyz));
        float _4612 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2527 = dot(vec3(_854, _855, _856), vec3(_2520, _2521, _2522));
        float _4623 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2531 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2520, _2521, _2522));
        float _4634 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2535 = _2512 * _2512;
        float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
        float _2546 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
        float _2553 = 1.0 - _2512;
        float _2563 = (0.5 / (((_2289 * ((_2526 * _2553) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2553) + _2512) * _2526))) * _2526;
        float _4645 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2565 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
        float _2566 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2487 = (((((_2546 * _2311) + _1015) * cbLight._m0[_2497].x) * _2565) * _2566) + _2423;
        _2489 = (((((_2546 * _2313) + _1017) * cbLight._m0[_2497].y) * _2565) * _2566) + _2424;
        _2491 = (((((_2546 * _2314) + _1018) * cbLight._m0[_2497].z) * _2565) * _2566) + _2425;
    }
    float _2601;
    float _2603;
    float _2605;
    if (_2215)
    {
        _2601 = _2487;
        _2603 = _2489;
        _2605 = _2491;
    }
    else
    {
        uint _2612 = _2121 + 3u;
        uint _2616 = _2121 + 11u;
        float _2630 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2612].w)) * _857) * 0.949999988079071044921875);
        float _2631 = _2630 * _2630;
        float _2632 = cbLight._m0[_2612].x + _933;
        float _2633 = cbLight._m0[_2612].y + _934;
        float _2634 = cbLight._m0[_2612].z + _935;
        float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
        float _2639 = _2638 * _2632;
        float _2640 = _2638 * _2633;
        float _2641 = _2638 * _2634;
        float _2642 = dot(vec3(_854, _855, _856), vec3(cbLight._m0[_2612].xyz));
        float _4661 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2646 = dot(vec3(_854, _855, _856), vec3(_2639, _2640, _2641));
        float _4672 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2650 = dot(vec3(cbLight._m0[_2612].xyz), vec3(_2639, _2640, _2641));
        float _4683 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2654 = _2631 * _2631;
        float _2658 = ((_2649 * _2649) * (_2654 + (-1.0))) + 1.0;
        float _2665 = exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0);
        float _2672 = 1.0 - _2631;
        float _2682 = (0.5 / (((_2289 * ((_2645 * _2672) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2672) + _2631) * _2645))) * _2645;
        float _4694 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2684 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2654 / ((_2658 * _2658) * 3.141590118408203125));
        float _2685 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2601 = (((((_2665 * _2311) + _1015) * cbLight._m0[_2616].x) * _2684) * _2685) + _2487;
        _2603 = (((((_2665 * _2313) + _1017) * cbLight._m0[_2616].y) * _2684) * _2685) + _2489;
        _2605 = (((((_2665 * _2314) + _1018) * cbLight._m0[_2616].z) * _2684) * _2685) + _2491;
    }
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    if (_2119.y == 0u)
    {
        float _2760 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2760;
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2760;
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2760;
        uvec4 _2775 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2776 = _2775.x;
        uint _2787 = uint((float(_2775.y) * floor(float(uint(cbSceneParam._m0[85u].y * _954) / _2776))) + floor(float(uint(cbSceneParam._m0[85u].x * _953) / _2776)));
        float _2797 = (log2(_2763 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2798 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        uint _2801 = uint(isnan(14.0) ? _2798 : (isnan(_2798) ? 14.0 : min(_2798, 14.0)));
        uvec4 _2806 = texelFetch(g_lightClusterGridBuffer, int(((_2801 << 2u) + (_2787 << 6u)) >> 2u));
        uint _2807 = _2806.x;
        uint _2808 = _2775.z;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        if (((((1u << ((_2808 >> 4u) & 15u)) + 4294967295u) & _2807) == 0u) || ((_2808 & 240u) == 0u))
        {
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
        }
        else
        {
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            uint _3067 = 0u;
            uint _3076;
            bool _3077;
            for (;;)
            {
                _3076 = texelFetch(g_lightClassification, int((((_2801 << 5u) + (_2787 << 9u)) + (_3067 << 2u)) >> 2u)).x;
                _3077 = _3076 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3077)
                {
                    frontier_phi_66_pred = _3061;
                    frontier_phi_66_pred_1 = _3066;
                    frontier_phi_66_pred_2 = _3065;
                    frontier_phi_66_pred_3 = _3064;
                    frontier_phi_66_pred_4 = _3063;
                    frontier_phi_66_pred_5 = _3062;
                }
                else
                {
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    uint _3212;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3076;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    for (;;)
                    {
                        uint _3216 = uint(findLSB(_3212)) + (_3067 << 5u);
                        uint _3213 = (_3212 + 4294967295u) & _3212;
                        uint _3218 = _3216 * 48u;
                        vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3218)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 3u)).x));
                        uint _3238 = (_3216 * 48u) + 4u;
                        vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 3u)).x));
                        uint _3257 = (_3216 * 48u) + 8u;
                        vec3 _3268 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x));
                        float _3272 = _3232.x - _2761;
                        float _3273 = _3232.y - _2762;
                        float _3274 = _3232.z - _2763;
                        float _3275 = dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274));
                        float _3278 = inversesqrt(_3275);
                        float _3279 = _3278 * _3272;
                        float _3280 = _3278 * _3273;
                        float _3281 = _3278 * _3274;
                        float _3282 = dot(vec3(_972, _975, _978), vec3(_3279, _3280, _3281));
                        float _3287 = 1.0 - (_3275 * _3232.w);
                        float _4720 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3288 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3289 = sqrt(_3275) * _3251.w;
                        float _3292 = 1.39999997615814208984375 / (_3289 + 1.39999997615814208984375);
                        float _3293 = _3292 * _3292;
                        float _3296 = ((1.0 - _3293) * _3282) + _3293;
                        float _3299 = _3289 * _3289;
                        float _3303 = ((isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0))) * _3288) / ((_3299 * 0.699999988079071044921875) + 1.0);
                        float _3307 = (-0.0) - _2761;
                        float _3308 = (-0.0) - _2762;
                        float _3309 = (-0.0) - _2763;
                        float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                        float _3314 = _3313 * _3307;
                        float _3315 = _3313 * _3308;
                        float _3316 = _3313 * _3309;
                        float _3324 = exp2(log2(1.0 / ((_3299 * 3.5) + 5.0)) * 0.25);
                        float _3325 = 1.0 - _1047;
                        float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                        float _3333 = _3332 * _3332;
                        float _3334 = _3333 * _3333;
                        float _3335 = _3314 + _3279;
                        float _3336 = _3315 + _3280;
                        float _3337 = _3316 + _3281;
                        float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                        float _3345 = dot(vec3(_972, _975, _978), vec3(_3314, _3315, _3316));
                        float _4736 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3349 = dot(vec3(_972, _975, _978), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                        float _4747 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                        float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                        float _3357 = _3292 * _3333;
                        float _3358 = _3357 * _3357;
                        float _3361 = ((1.0 - _3358) * _3282) + _3358;
                        float _4758 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3363 = 1.0 - _3333;
                        float _3373 = (0.5 / (((_3362 * ((_3348 * _3363) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3333) * _3348))) * _3362;
                        float _4769 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3384 = (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) / ((_3356 * _3356) * ((_3299 * 2.1991131305694580078125) + 3.141590118408203125))) * _3288;
                        _3136 = (_3303 * _3251.x) + _3209;
                        _3137 = (_3303 * _3251.y) + _3210;
                        _3138 = (_3303 * _3251.z) + _3211;
                        _3133 = (_3384 * _3268.x) + _3206;
                        _3134 = (_3384 * _3268.y) + _3207;
                        _3135 = (_3384 * _3268.z) + _3208;
                        if (_3213 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3213;
                        }
                    }
                    frontier_phi_66_pred = _3133;
                    frontier_phi_66_pred_1 = _3138;
                    frontier_phi_66_pred_2 = _3137;
                    frontier_phi_66_pred_3 = _3136;
                    frontier_phi_66_pred_4 = _3135;
                    frontier_phi_66_pred_5 = _3134;
                }
                _2909 = frontier_phi_66_pred;
                _2919 = frontier_phi_66_pred_1;
                _2917 = frontier_phi_66_pred_2;
                _2915 = frontier_phi_66_pred_3;
                _2913 = frontier_phi_66_pred_4;
                _2911 = frontier_phi_66_pred_5;
                uint _3068 = _3067 + 1u;
                if (_3068 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3061 = _2909;
                    _3062 = _2911;
                    _3063 = _2913;
                    _3064 = _2915;
                    _3065 = _2917;
                    _3066 = _2919;
                    _3067 = _3068;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
        }
        uvec4 _2922 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2923 = _2922.z;
        uint _2925 = (_2923 >> 8u) & 15u;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        if (((4294967295u << _2925) & _2807) == 0u)
        {
            _3029 = _2908;
            _3031 = _2910;
            _3033 = _2912;
            _3035 = _2914;
            _3037 = _2916;
            _3039 = _2918;
        }
        else
        {
            float _3054 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
            float _3055 = _3054 * _2761;
            float _3056 = _3054 * _2762;
            float _3057 = _3054 * _2763;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2925 < ((_2923 >> 12u) & 15u))
            {
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3189 = _2908;
                float _3190 = _2910;
                float _3191 = _2912;
                float _3192 = _2914;
                float _3193 = _2916;
                float _3194 = _2918;
                uint _3195 = _2925;
                uint _3204;
                bool _3205;
                for (;;)
                {
                    _3204 = texelFetch(g_lightClassification, int((((_2801 << 5u) + (_2787 << 9u)) + (_3195 << 2u)) >> 2u)).x;
                    _3205 = _3204 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3205)
                    {
                        frontier_phi_77_pred = _3194;
                        frontier_phi_77_pred_1 = _3193;
                        frontier_phi_77_pred_2 = _3192;
                        frontier_phi_77_pred_3 = _3191;
                        frontier_phi_77_pred_4 = _3190;
                        frontier_phi_77_pred_5 = _3189;
                    }
                    else
                    {
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3411 = _3189;
                        float _3412 = _3190;
                        float _3413 = _3191;
                        float _3414 = _3192;
                        float _3415 = _3193;
                        float _3416 = _3194;
                        uint _3417 = _3204;
                        uint _3418;
                        vec4 _3443;
                        float _3444;
                        vec4 _3459;
                        vec3 _3471;
                        vec4 _3486;
                        vec4 _3501;
                        float _3547;
                        bool _3548;
                        for (;;)
                        {
                            uint _3428 = ((_3195 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3417));
                            _3418 = (_3417 + 4294967295u) & _3417;
                            uint _3430 = _3428 * 40u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            _3444 = _3443.w;
                            uint _3446 = (_3428 * 40u) + 4u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3428 * 40u) + 8u;
                            _3471 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x));
                            uint _3473 = (_3428 * 40u) + 16u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3428 * 40u) + 20u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3503 = (_3428 * 40u) + 24u;
                            vec4 _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3522 = (_3428 * 40u) + 28u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3547 = fma(_2763, _3535.z, fma(_2762, _3535.y, _3535.x * _2761)) + _3535.w;
                            _3548 = !((fma(_2763, _3516.z, fma(_2762, _3516.y, _3516.x * _2761)) + _3516.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3548)
                            {
                                float _3575 = _3443.x - _2761;
                                float _3576 = _3443.y - _2762;
                                float _3577 = _3443.z - _2763;
                                float _3578 = dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577));
                                float _3581 = inversesqrt(_3578);
                                float _3582 = _3581 * _3575;
                                float _3583 = _3581 * _3576;
                                float _3584 = _3581 * _3577;
                                float _3588 = 1.0 - (_3578 / (_3444 * _3444));
                                float _4780 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3593 = sqrt(_3578) * _3459.w;
                                float _3595 = 1.39999997615814208984375 / (_3593 + 1.39999997615814208984375);
                                float _3596 = _3595 * _3595;
                                float _3599 = ((1.0 - _3596) * dot(vec3(_3582, _3583, _3584), vec3(_972, _975, _978))) + _3596;
                                float _3602 = _3593 * _3593;
                                float _3606 = (fma(_2763, _3486.z, fma(_2762, _3486.y, _3486.x * _2761)) + _3486.w) / _3547;
                                float _3607 = (fma(_2763, _3501.z, fma(_2762, _3501.y, _3501.x * _2761)) + _3501.w) / _3547;
                                float _3611 = 1.0 - dot(vec2(_3606, _3607), vec2(_3606, _3607));
                                float _4796 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3613 = _3612 * (((isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0))) * _3589) / ((_3602 * 0.699999988079071044921875) + 1.0));
                                float _3625 = exp2(log2(1.0 / ((_3602 * 3.5) + 5.0)) * 0.25);
                                float _3626 = 1.0 - _1047;
                                float _3633 = sqrt(1.0 - ((1.0 - (_3626 * _3626)) * (1.0 - (_3625 * _3625))));
                                float _3634 = _3633 * _3633;
                                float _3635 = _3634 * _3634;
                                float _3636 = _3582 - _3055;
                                float _3637 = _3583 - _3056;
                                float _3638 = _3584 - _3057;
                                float _3642 = inversesqrt(dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638)));
                                float _3646 = dot(vec3(_972, _975, _978), vec3((-0.0) - _3055, (-0.0) - _3056, (-0.0) - _3057));
                                float _4807 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3650 = dot(vec3(_972, _975, _978), vec3(_3642 * _3636, _3642 * _3637, _3642 * _3638));
                                float _4818 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3653 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3657 = ((_3653 * _3653) * (_3635 + (-1.0))) + 1.0;
                                float _3658 = _3595 * _3634;
                                float _3659 = _3658 * _3658;
                                float _3665 = ((1.0 - _3659) * dot(vec3(_972, _975, _978), vec3(_3582, _3583, _3584))) + _3659;
                                float _4829 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3667 = 1.0 - _3634;
                                float _3677 = (0.5 / (((_3666 * ((_3649 * _3667) + _3634)) + 9.9999999392252902907785028219223e-09) + (((_3666 * _3667) + _3634) * _3649))) * _3666;
                                float _4840 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3687 = (_3612 * _3589) * (((_3635 * 3.1415927410125732421875) * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) / ((_3657 * _3657) * ((_3602 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3613 * _3459.y;
                                frontier_phi_83_pred_1 = _3613 * _3459.x;
                                frontier_phi_83_pred_2 = _3687 * _3471.z;
                                frontier_phi_83_pred_3 = _3687 * _3471.y;
                                frontier_phi_83_pred_4 = _3687 * _3471.x;
                                frontier_phi_83_pred_5 = _3613 * _3459.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3695 = frontier_phi_83_pred;
                            _3694 = frontier_phi_83_pred_1;
                            _3693 = frontier_phi_83_pred_2;
                            _3692 = frontier_phi_83_pred_3;
                            _3691 = frontier_phi_83_pred_4;
                            _3696 = frontier_phi_83_pred_5;
                            _3401 = _3694 + _3414;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3398 = _3691 + _3411;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            if (_3418 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3418;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3403;
                        frontier_phi_77_pred_1 = _3402;
                        frontier_phi_77_pred_2 = _3401;
                        frontier_phi_77_pred_3 = _3400;
                        frontier_phi_77_pred_4 = _3399;
                        frontier_phi_77_pred_5 = _3398;
                    }
                    _3040 = frontier_phi_77_pred;
                    _3038 = frontier_phi_77_pred_1;
                    _3036 = frontier_phi_77_pred_2;
                    _3034 = frontier_phi_77_pred_3;
                    _3032 = frontier_phi_77_pred_4;
                    _3030 = frontier_phi_77_pred_5;
                    uint _3196 = _3195 + 1u;
                    if (_3196 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3189 = _3030;
                        _3190 = _3032;
                        _3191 = _3034;
                        _3192 = _3036;
                        _3193 = _3038;
                        _3194 = _3040;
                        _3195 = _3196;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3034;
                frontier_phi_58_59_ladder_1 = _3040;
                frontier_phi_58_59_ladder_2 = _3038;
                frontier_phi_58_59_ladder_3 = _3036;
                frontier_phi_58_59_ladder_4 = _3032;
                frontier_phi_58_59_ladder_5 = _3030;
            }
            else
            {
                frontier_phi_58_59_ladder = _2912;
                frontier_phi_58_59_ladder_1 = _2918;
                frontier_phi_58_59_ladder_2 = _2916;
                frontier_phi_58_59_ladder_3 = _2914;
                frontier_phi_58_59_ladder_4 = _2910;
                frontier_phi_58_59_ladder_5 = _2908;
            }
            _3029 = frontier_phi_58_59_ladder_5;
            _3031 = frontier_phi_58_59_ladder_4;
            _3033 = frontier_phi_58_59_ladder;
            _3035 = frontier_phi_58_59_ladder_3;
            _3037 = frontier_phi_58_59_ladder_2;
            _3039 = frontier_phi_58_59_ladder_1;
        }
        float _3044 = isnan(1.0) ? _1031 : (isnan(_1031) ? 1.0 : min(_1031, 1.0));
        _2820 = (_3044 * _3035) + _2253;
        _2822 = (_3044 * _3037) + _2255;
        _2824 = (_3044 * _3039) + _2257;
        _2826 = ((_3029 * _1015) * _3044) + _2601;
        _2828 = ((_3031 * _1017) * _3044) + _2603;
        _2830 = ((_3033 * _1018) * _3044) + _2605;
    }
    else
    {
        _2820 = _2253;
        _2822 = _2255;
        _2824 = _2257;
        _2826 = _2601;
        _2828 = _2603;
        _2830 = _2605;
    }
    float _4856 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4867 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4878 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _2847 = ((isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2820 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1031))) + ((_2826 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1870)) * cbPerFrame._m0[3u].x);
    float _2848 = ((isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2822 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1031))) + ((_2828 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1870)) * cbPerFrame._m0[3u].x);
    float _2849 = ((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2824 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1031))) + ((_2830 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1870)) * cbPerFrame._m0[3u].x);
    uint _2850 = _285 + 6u;
    float _2858 = _953 / cbSceneParam._m0[86u].x;
    float _2859 = _954 / cbSceneParam._m0[86u].y;
    vec4 _2873 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2858, _2859, (log2((isnan(cbSceneParam._m0[77u].w) ? _876 : (isnan(_876) ? cbSceneParam._m0[77u].w : min(_876, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2875 = _2873.x;
    float _2876 = _2873.y;
    float _2877 = _2873.z;
    float _2878 = _2873.w;
    float _2971;
    float _2973;
    float _2975;
    float _2977;
    if (_876 > cbSceneParam._m0[78u].w)
    {
        float _2933 = isnan(_876) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _876 : min(cbSceneParam._m0[80u].w, _876));
        float _2934 = _2933 / _876;
        float _2945 = _2934 * _926;
        float _2946 = _927 * _2934;
        float _2947 = (-0.0) - _2946;
        float _2949 = _2934 * _928;
        float _2951 = (cbSceneParam._m0[77u].w * _2947) / _2933;
        float _2952 = _2951 + cbSceneParam._m0[79u].w;
        float _2953 = cbSceneParam._m0[79u].w - _2946;
        float _2959 = sqrt(((_2945 * _2945) + (_2946 * _2946)) + (_2949 * _2949));
        float _2962 = (1.0 - (cbSceneParam._m0[77u].w / _2933)) * _2959;
        float _2967 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2969 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3146;
        if (abs((_2947 - _2951) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3146 = ((((_2952 > 0.0) ? exp2(_2967 * _2952) : (2.0 - exp2(_2969 * _2952))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2962;
        }
        else
        {
            float _3090 = 1.0 / cbSceneParam._m0[80u].x;
            float _3091 = isnan(_2953) ? _2952 : (isnan(_2952) ? _2953 : max(_2952, _2953));
            float _3092 = isnan(_2953) ? _2952 : (isnan(_2952) ? _2953 : min(_2952, _2953));
            float _3101 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : min(_3091, 0.0));
            float _3102 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : min(_3092, 0.0));
            _3146 = ((abs(_2959 / _2947) * cbSceneParam._m0[80u].y) * ((((_3101 - _3102) * 2.0) - ((exp2(_2967 * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0)))) - exp2(_2967 * (isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0))))) * _3090)) - ((exp2(_2969 * _3101) - exp2(_2969 * _3102)) * _3090))) + (_2962 * cbSceneParam._m0[80u].z);
        }
        vec4 _3148 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2858, _2859, 1.0), 0.0);
        float _3157 = exp2((_3146 * (-1.44269502162933349609375)) * (1.0 - _3148.w));
        float _3158 = log2(_3157);
        float _3174 = log2(_2878);
        _2971 = (exp2(_3174 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].x)) * _3148.x) / cbSceneParam._m0[78u].x)) + _2875;
        _2973 = (exp2(_3174 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].y)) * _3148.y) / cbSceneParam._m0[78u].y)) + _2876;
        _2975 = (exp2(_3174 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].z)) * _3148.z) / cbSceneParam._m0[78u].z)) + _2877;
        _2977 = _3157 * _2878;
    }
    else
    {
        _2971 = _2875;
        _2973 = _2876;
        _2975 = _2877;
        _2977 = _2878;
    }
    bool _3184;
    vec4 _2987;
    vec4 _3009;
    float _3011;
    float _3015;
    float _3016;
    float _3017;
    float _3018;
    bool _3028;
    for (;;)
    {
        _2987 = cbMatDynParam._m0[0u];
        float _2989 = roundEven(_2987.y);
        bool _2990 = _2989 == 3.0;
        float _2991 = log2(_2977);
        float _2998 = exp2(_2991 * cbSceneParam._m0[78u].x) * _2847;
        float _2999 = exp2(_2991 * cbSceneParam._m0[78u].y) * _2848;
        float _3000 = exp2(_2991 * cbSceneParam._m0[78u].z) * _2849;
        float _3007 = _942 + (-0.5);
        _3009 = cbMtdParam._m0[1u];
        _3011 = _3009.y * _3007;
        float _3014 = (_2989 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3015 = _3014 * (_2990 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2971)));
        _3016 = _3014 * (_2990 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2973)));
        _3017 = _3014 * (_2990 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2975)));
        _3018 = _3007 * 0.999000012874603271484375;
        _3028 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3028)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3018) < 0.5)
            {
                _3184 = true;
                break;
            }
        }
        uint _3125 = _991 + uint(_2987.w);
        if ((cbInstanceData._m0[_3125].w < 1.0) && ((cbInstanceData._m0[_3125].w + _3018) < 0.5))
        {
            _3184 = true;
            break;
        }
        if ((_3011 + 1.0) < _3009.x)
        {
            _3184 = true;
            break;
        }
        _3184 = false;
        break;
    }
    float _3389;
    if (_3184)
    {
        discard_state = true;
        _3389 = 0.0;
    }
    else
    {
        _3389 = cbInstanceData._m0[_2850].w;
    }
    SV_Target.x = _3015;
    SV_Target.y = _3016;
    SV_Target.z = _3017;
    SV_Target.w = _3389;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2850].w;
    discard_exit();
}


