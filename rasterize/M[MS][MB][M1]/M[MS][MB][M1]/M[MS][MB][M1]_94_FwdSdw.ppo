#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1391;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4001 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4012 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4023 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4034 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) + _453;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    float _535 = ((_505.z - _526) * _434) + _526;
    float _538 = ((((_505.x - _524) * _434) + _524) * 2.0) + (-1.0);
    float _539 = ((((_505.y - _525) * _434) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _4045 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))));
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _588 = _586.x;
    float _589 = 1.0 - _588;
    float _595 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _598 = ((isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : min(_595, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _607 = (_598 - ((((((_588 - _589) * cbMtdParam._m0[24u].z) + _589) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _598))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4066 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _608 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _615 = (_608 * (cbMtdParam._m0[17u].x - _460)) + _460;
    float _616 = (_608 * (cbMtdParam._m0[17u].y - _461)) + _461;
    float _617 = (_608 * (cbMtdParam._m0[17u].z - _462)) + _462;
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _657 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_631 - _632) * cbMtdParam._m0[24u].w) + _632) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4077 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _666 = ((((cbMtdParam._m0[10u].x - _615) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _658) + _615;
    float _667 = ((((cbMtdParam._m0[10u].y - _616) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _658) + _616;
    float _668 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _617)) * _658) + _617;
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _696 = _694.x;
    float _714 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _696) * _434) + _696;
    float _718 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _714) * cbMtdParam._m0[19u].z) + _714;
    float _720 = _718 - (_718 * _608);
    float _722 = _720 - (_720 * _658);
    float _727 = (((_480.z - _535) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _535;
    float _731 = ((_561.z - _727) * cbMtdParam._m0[19u].w) + _727;
    vec4 _745 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _752 = (_745.x * 2.0) + (-1.0);
    float _753 = (_745.y * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _4088 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _762 = (_608 * (_745.z - _731)) + _731;
    float _765 = ((cbMtdParam._m0[23u].y - _762) * _658) + _762;
    vec4 _784 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _790 = (_784.x * 2.0) + (-1.0);
    float _791 = (_784.y * 2.0) + (-1.0);
    float _792 = dot(vec2(_790, _791), vec2(_790, _791));
    float _4099 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _806 = (_538 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_480.x * 2.0) + (-1.0)))) + (((_561.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _807 = (_539 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_480.y * 2.0) + (-1.0)))) + (((_561.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _819 = (((_752 - _806) + (cbMtdParam._m0[21u].x * _806)) * _608) + _806;
    float _820 = (((_753 - _807) + (cbMtdParam._m0[21u].x * _807)) * _608) + _807;
    float _821 = (_608 * (sqrt(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) - _545)) + _545;
    float _832 = (((_790 - _819) + (_819 * cbMtdParam._m0[22u].z)) * _658) + _819;
    float _833 = (((_791 - _820) + (_820 * cbMtdParam._m0[22u].z)) * _658) + _820;
    float _834 = ((sqrt(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) - _821) * _658) + _821;
    float _838 = cbMtdParam._m0[22u].x + _561.w;
    float _841 = fma(_834, _251 * NORMAL.x, fma(_833, _258 * TANGENT.x, (_244 * _236) * _832));
    float _844 = fma(_834, _251 * NORMAL.y, fma(_833, _258 * TANGENT.y, (_244 * _237) * _832));
    float _847 = fma(_834, _251 * NORMAL.z, fma(_833, _258 * TANGENT.z, (_244 * _238) * _832));
    float _851 = inversesqrt(dot(vec3(_841, _844, _847), vec3(_841, _844, _847)));
    float _852 = _851 * _841;
    float _853 = _851 * _844;
    float _854 = _851 * _847;
    float _4110 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _855 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4132 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4143 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4154 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4165 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _860 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _874 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _924 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _914);
    float _925 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _914);
    float _926 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _914);
    float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
    float _931 = _924 * _930;
    float _932 = _925 * _930;
    float _933 = _926 * _930;
    float _939 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _940 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _958 = fma(_854, cbSceneParam._m0[5u].z, fma(_853, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _852));
    float _961 = fma(_854, cbSceneParam._m0[6u].z, fma(_853, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _852));
    float _964 = fma(_854, cbSceneParam._m0[7u].z, fma(_853, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _852));
    uint _978 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _984 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * cbInstanceData._m0[_978].x;
    float _985 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * cbInstanceData._m0[_978].y;
    float _986 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * cbInstanceData._m0[_978].z;
    float _4176 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _987 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _989 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _990 = 1.0 - _860;
    float _991 = _987 * _990;
    float _992 = _988 * _990;
    float _993 = _989 * _990;
    float _998 = (_987 + (-0.039999999105930328369140625)) * _860;
    float _999 = (_988 + (-0.039999999105930328369140625)) * _860;
    float _1000 = (_989 + (-0.039999999105930328369140625)) * _860;
    float _1001 = _998 + 0.039999999105930328369140625;
    float _1003 = _999 + 0.039999999105930328369140625;
    float _1004 = _1000 + 0.039999999105930328369140625;
    vec4 _1013 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _939, cbSceneParam._m0[86u].y * _940));
    float _1017 = ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * TEXCOORD_5.w) * _1013.x;
    float _1018 = dot(vec3(_852, _853, _854), vec3(_931, _932, _933));
    float _1021 = _1018 * 2.0;
    float _1025 = (_1021 * _852) - _931;
    float _1026 = (_1021 * _853) - _932;
    float _1027 = (_1021 * _854) - _933;
    float _1031 = abs(dot(vec3(_931, _932, _933), vec3(_852, _853, _854)));
    float _4209 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1033 = sqrt(_855);
    float _1046 = exp2((_1033 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1033 * 3.0));
    float _1052 = (1.0 - _1046) * ((_1033 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1053 = _1046 * _1033;
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1390;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1115 = fma(_1089, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081));
        float _1119 = fma(_1089, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081));
        float _1123 = fma(_1089, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081));
        float _1148 = _1081 + _852;
        float _1149 = _1085 + _853;
        float _1150 = _1089 + _854;
        float _1160 = fma(_1150, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148)) - _1115;
        float _1161 = fma(_1150, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148)) - _1119;
        float _1162 = fma(_1150, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148)) - _1123;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1115 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1119 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[34u].z) + ((((((_1123 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1218 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1184.x + (-0.5));
        float _1220 = _1218 * (_1184.y + (-0.5));
        float _1221 = _1218 * (_1184.z + (-0.5));
        float _1228 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1191.x + (-0.5));
        float _1230 = _1228 * (_1191.y + (-0.5));
        float _1231 = _1228 * (_1191.z + (-0.5));
        float _1238 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1198.x + (-0.5));
        float _1240 = _1238 * (_1198.y + (-0.5));
        float _1241 = _1238 * (_1198.z + (-0.5));
        float _1248 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1205.x + (-0.5));
        float _1250 = _1248 * (_1205.y + (-0.5));
        float _1251 = _1248 * (_1205.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1272 = (dot(vec3(_852, _853, _854), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1282 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4257 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1284 + 1.0))) + _1289) * _1252;
        float _1299 = _1220 * 0.5;
        float _1300 = _1230 * 0.5;
        float _1301 = _1240 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_852, _853, _854), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4290 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1326 + 1.0))) + _1331) * _1253;
        float _1341 = _1221 * 0.5;
        float _1342 = _1231 * 0.5;
        float _1343 = _1241 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_852, _853, _854), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4323 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1368 + 1.0))) + _1373) * _1254;
        _1390 = _1221;
        _1392 = _1220;
        _1393 = _1219;
        _1394 = _1231;
        _1395 = _1230;
        _1396 = _1229;
        _1397 = _1241;
        _1398 = _1240;
        _1399 = _1239;
        _1400 = _1254;
        _1401 = _1253;
        _1402 = _1252;
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1391;
        _1392 = _1391;
        _1393 = _1391;
        _1394 = _1391;
        _1395 = _1391;
        _1396 = _1391;
        _1397 = _1391;
        _1398 = _1391;
        _1399 = _1391;
        _1400 = _1391;
        _1401 = _1391;
        _1402 = _1391;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1430 = fma(_1089, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1081));
        float _1434 = fma(_1089, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1081));
        float _1438 = fma(_1089, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1081));
        float _1461 = _1081 + _852;
        float _1462 = _1085 + _853;
        float _1463 = _1089 + _854;
        float _1473 = fma(_1463, cbModelParam._m0[30u].z, fma(_1462, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1461)) - _1430;
        float _1474 = fma(_1463, cbModelParam._m0[31u].z, fma(_1462, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1461)) - _1434;
        float _1475 = fma(_1463, cbModelParam._m0[32u].z, fma(_1462, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1461)) - _1438;
        float _1479 = inversesqrt(dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475)));
        float _1492 = ((_1479 * _1473) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1430 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1479 * _1474) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1434 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1479 * _1475) / cbModelParam._m0[35u].z) + ((((((_1438 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        float _1529 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1496.x + (-0.5));
        float _1531 = _1529 * (_1496.y + (-0.5));
        float _1532 = _1529 * (_1496.z + (-0.5));
        float _1539 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1503.x + (-0.5));
        float _1541 = _1539 * (_1503.y + (-0.5));
        float _1542 = _1539 * (_1503.z + (-0.5));
        float _1549 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1510.x + (-0.5));
        float _1551 = _1549 * (_1510.y + (-0.5));
        float _1552 = _1549 * (_1510.z + (-0.5));
        float _1559 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1517.x + (-0.5));
        float _1561 = _1559 * (_1517.y + (-0.5));
        float _1562 = _1559 * (_1517.z + (-0.5));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = _1530 * 0.5;
        float _1567 = _1540 * 0.5;
        float _1568 = _1550 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_852, _853, _854), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4386 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1593 + 1.0))) + _1598) * _1563;
        float _1608 = _1531 * 0.5;
        float _1609 = _1541 * 0.5;
        float _1610 = _1551 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_852, _853, _854), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4419 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1635 + 1.0))) + _1640) * _1564;
        float _1650 = _1532 * 0.5;
        float _1651 = _1542 * 0.5;
        float _1652 = _1552 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_852, _853, _854), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4452 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1677 + 1.0))) + _1682) * _1565;
        _1699 = _1532;
        _1700 = _1531;
        _1701 = _1530;
        _1702 = _1542;
        _1703 = _1541;
        _1704 = _1540;
        _1705 = _1552;
        _1706 = _1551;
        _1707 = _1550;
        _1708 = _1565;
        _1709 = _1564;
        _1710 = _1563;
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
    }
    else
    {
        _1699 = _1391;
        _1700 = _1391;
        _1701 = _1391;
        _1702 = _1391;
        _1703 = _1391;
        _1704 = _1391;
        _1705 = _1391;
        _1706 = _1391;
        _1707 = _1391;
        _1708 = _1391;
        _1709 = _1391;
        _1710 = _1391;
        _1711 = 0.0;
        _1712 = 0.0;
        _1713 = 0.0;
    }
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1403)) + _1403;
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1404)) + _1404;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1405)) + _1405;
    float _1746 = fma(_1725, cbSceneParam._m0[89u].z, fma(_1724, cbSceneParam._m0[89u].y, _1723 * cbSceneParam._m0[89u].x));
    float _1749 = fma(_1725, cbSceneParam._m0[90u].z, fma(_1724, cbSceneParam._m0[90u].y, _1723 * cbSceneParam._m0[90u].x));
    float _1752 = fma(_1725, cbSceneParam._m0[91u].z, fma(_1724, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1723));
    float _1767 = _1025 * 0.5;
    float _1768 = _1026 * 0.5;
    float _1769 = _1027 * 0.5;
    float _1770 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1773 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1776 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1810;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1783 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1390, _1394, _1397, _1400));
        float _1787 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1392, _1395, _1398, _1401));
        float _1791 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1798 = dot(vec4(cbModelParam._m0[39u]), vec4(_1767, _1768, _1769, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1821;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1812 = dot(vec4(cbModelParam._m0[40u]), vec4(_1767, _1768, _1769, 1.0));
        _1821 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1821 = 1.0;
    }
    float _1825 = (_1821 * cbModelParam._m0[1u].x) + (_1810 * (1.0 - cbModelParam._m0[1u].x));
    float _1835 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _855);
    float _1836 = isnan(_1835) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1835 : min(cbModelParam._m0[25u].z, _1835));
    float _1917;
    float _1919;
    float _1921;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1884 = fma(_1089, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081)) + cbModelParam._m0[13u].w;
        float _1888 = fma(_1089, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081)) + cbModelParam._m0[14u].w;
        float _1892 = fma(_1089, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081)) + cbModelParam._m0[15u].w;
        float _1895 = fma(_1027, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025));
        float _1898 = fma(_1027, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025));
        float _1901 = fma(_1027, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025));
        float _1929;
        if (_1895 > 0.0)
        {
            _1929 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1929 = frontier_phi_14_12_ladder;
        }
        float _2101;
        if (_1898 > 0.0)
        {
            _2101 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2101 = frontier_phi_23_19_ladder;
        }
        float _2396;
        if (_1901 > 0.0)
        {
            _2396 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2396 = frontier_phi_35_30_ladder;
        }
        float _2398 = isnan(_2101) ? _1929 : (isnan(_1929) ? _2101 : min(_1929, _2101));
        float _2399 = isnan(_2396) ? _2398 : (isnan(_2398) ? _2396 : min(_2398, _2396));
        float _2403 = (_2399 * _1895) + _1884;
        float _2404 = (_2399 * _1898) + _1888;
        float _2405 = (_2399 * _1901) + _1892;
        float _2406 = _2399 * 9.9999997473787516355514526367188e-05;
        float _2408 = (-1.0) - _2406;
        float _2410 = _2406 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2405 > _2410) || ((_2405 < _2408) || ((_2404 > _2410) || ((_2404 < _2408) || ((_2403 < _2408) || (_2403 > _2410))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2405, cbModelParam._m0[9u].z, fma(_2404, cbModelParam._m0[9u].y, _2403 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2405, cbModelParam._m0[10u].z, fma(_2404, cbModelParam._m0[10u].y, _2403 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2405, cbModelParam._m0[11u].z, fma(_2404, cbModelParam._m0[11u].y, _2403 * cbModelParam._m0[11u].x))), _1836);
            frontier_phi_13_35_ladder = _2550.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2550.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2550.x * cbModelParam._m0[1u].y;
        }
        _1917 = frontier_phi_13_35_ladder_2;
        _1919 = frontier_phi_13_35_ladder_1;
        _1921 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1025, _1026, _1027), _1836);
        _1917 = _1905.x * cbModelParam._m0[1u].y;
        _1919 = _1905.y * cbModelParam._m0[1u].y;
        _1921 = _1905.z * cbModelParam._m0[1u].y;
    }
    float _1925 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _855);
    float _1926 = isnan(_1925) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1925 : min(cbModelParam._m0[25u].w, _1925));
    float _2016;
    float _2018;
    float _2020;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1980 = fma(_1089, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081)) + cbModelParam._m0[21u].w;
        float _1984 = fma(_1089, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081)) + cbModelParam._m0[22u].w;
        float _1988 = fma(_1089, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081)) + cbModelParam._m0[23u].w;
        float _1991 = fma(_1027, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025));
        float _1994 = fma(_1027, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025));
        float _1997 = fma(_1027, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025));
        float _2106;
        if (_1991 > 0.0)
        {
            _2106 = abs((1.0 - _1980) / _1991);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1980 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2106 = frontier_phi_25_21_ladder;
        }
        float _2423;
        if (_1994 > 0.0)
        {
            _2423 = abs((1.0 - _1984) / _1994);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1984 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2423 = frontier_phi_37_32_ladder;
        }
        float _2761;
        if (_1997 > 0.0)
        {
            _2761 = abs((1.0 - _1988) / _1997);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1988 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2761 = frontier_phi_47_44_ladder;
        }
        float _2763 = isnan(_2423) ? _2106 : (isnan(_2106) ? _2423 : min(_2106, _2423));
        float _2764 = isnan(_2761) ? _2763 : (isnan(_2763) ? _2761 : min(_2763, _2761));
        float _2768 = (_2764 * _1991) + _1980;
        float _2769 = (_2764 * _1994) + _1984;
        float _2770 = (_2764 * _1997) + _1988;
        float _2771 = _2764 * 9.9999997473787516355514526367188e-05;
        float _2772 = (-1.0) - _2771;
        float _2774 = _2771 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2770 > _2774) || ((_2770 < _2772) || ((_2769 > _2774) || ((_2769 < _2772) || ((_2768 < _2772) || (_2768 > _2774))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2770, cbModelParam._m0[17u].z, fma(_2769, cbModelParam._m0[17u].y, _2768 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2770, cbModelParam._m0[18u].z, fma(_2769, cbModelParam._m0[18u].y, _2768 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2770, cbModelParam._m0[19u].z, fma(_2769, cbModelParam._m0[19u].y, _2768 * cbModelParam._m0[19u].x))), _1926);
            frontier_phi_22_47_ladder = _2892.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2892.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2892.x * cbModelParam._m0[1u].z;
        }
        _2016 = frontier_phi_22_47_ladder_2;
        _2018 = frontier_phi_22_47_ladder_1;
        _2020 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1025, _1026, _1027), _1926);
        _2016 = _2000.x * cbModelParam._m0[1u].z;
        _2018 = _2000.y * cbModelParam._m0[1u].z;
        _2020 = _2000.z * cbModelParam._m0[1u].z;
    }
    float _2033 = (((_1052 * _1001) + _1053) * _1017) * ((cbModelParam._m0[1u].w * (_2016 - _1917)) + _1917);
    float _2035 = (((_1052 * _1003) + _1053) * _1017) * ((cbModelParam._m0[1u].w * (_2018 - _1919)) + _1919);
    float _2037 = (((_1052 * _1004) + _1053) * _1017) * ((cbModelParam._m0[1u].w * (_2020 - _1921)) + _1921);
    float _2040 = fma(_2037, cbSceneParam._m0[89u].z, fma(_2035, cbSceneParam._m0[89u].y, _2033 * cbSceneParam._m0[89u].x));
    float _2043 = fma(_2037, cbSceneParam._m0[90u].z, fma(_2035, cbSceneParam._m0[90u].y, _2033 * cbSceneParam._m0[90u].x));
    float _2046 = fma(_2037, cbSceneParam._m0[91u].z, fma(_2035, cbSceneParam._m0[91u].y, _2033 * cbSceneParam._m0[91u].x));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2084 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2088 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2092 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2093 = _2080 / _2092;
    float _2094 = _2084 / _2092;
    float _2095 = _2088 / _2092;
    float _2242;
    float _2243;
    float _2244;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2122 = ((uint(_2095 > cbSceneParam._m0[59u].y) + uint(_2095 > cbSceneParam._m0[59u].x)) + uint(_2095 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2123 = _2122 + 43u;
        uint _2131 = _2122 + 44u;
        uint _2139 = _2122 + 45u;
        uint _2147 = _2122 + 46u;
        float _2158 = fma(_2092, cbSceneParam._m0[_2123].w, fma(_2088, cbSceneParam._m0[_2123].z, fma(_2084, cbSceneParam._m0[_2123].y, _2080 * cbSceneParam._m0[_2123].x)));
        float _2162 = fma(_2092, cbSceneParam._m0[_2131].w, fma(_2088, cbSceneParam._m0[_2131].z, fma(_2084, cbSceneParam._m0[_2131].y, _2080 * cbSceneParam._m0[_2131].x)));
        float _2170 = fma(_2092, cbSceneParam._m0[_2147].w, fma(_2088, cbSceneParam._m0[_2147].z, fma(_2084, cbSceneParam._m0[_2147].y, _2080 * cbSceneParam._m0[_2147].x)));
        float _2175 = cbSceneParam._m0[33u].z * _2170;
        float _2177 = cbSceneParam._m0[33u].w * _2170;
        float _2180 = fma(_2092, cbSceneParam._m0[_2139].w, fma(_2088, cbSceneParam._m0[_2139].z, fma(_2084, cbSceneParam._m0[_2139].y, _2080 * cbSceneParam._m0[_2139].x))) / _2170;
        float _2228 = (cbSceneParam._m0[33u].x - sqrt(((_2094 * _2094) + (_2093 * _2093)) + (_2095 * _2095))) * cbSceneParam._m0[33u].y;
        float _4578 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2235 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2175 + _2158) / _2170, (_2177 + _2162) / _2170), _2180), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2177 + _2158) / _2170, (_2162 - _2175) / _2170), _2180), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2158 - _2175) / _2170, (_2162 - _2177) / _2170), _2180), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2158 - _2177) / _2170, (_2175 + _2162) / _2170), _2180), 0.0)).x), vec4(0.25)));
        _2242 = 1.0 - (_2235 * cbSceneParam._m0[34u].x);
        _2243 = 1.0 - (_2235 * cbSceneParam._m0[34u].y);
        _2244 = 1.0 - (_2235 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2242 = 1.0;
        _2243 = 1.0;
        _2244 = 1.0;
    }
    float _2308;
    float _2310;
    float _2312;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2296 = fma(_2092, cbSceneParam._m0[63u].w, fma(_2088, cbSceneParam._m0[63u].z, fma(_2084, cbSceneParam._m0[63u].y, _2080 * cbSceneParam._m0[63u].x)));
        float _2297 = fma(_2092, cbSceneParam._m0[60u].w, fma(_2088, cbSceneParam._m0[60u].z, fma(_2084, cbSceneParam._m0[60u].y, _2080 * cbSceneParam._m0[60u].x))) / _2296;
        float _2298 = fma(_2092, cbSceneParam._m0[61u].w, fma(_2088, cbSceneParam._m0[61u].z, fma(_2084, cbSceneParam._m0[61u].y, _2080 * cbSceneParam._m0[61u].x))) / _2296;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2297 >= cbSceneParam._m0[64u].x) && (_2298 >= cbSceneParam._m0[64u].y)) && (_2297 <= cbSceneParam._m0[64u].z)) && (_2298 <= cbSceneParam._m0[64u].w))
        {
            float _2436 = fma(_2092, cbSceneParam._m0[62u].w, fma(_2088, cbSceneParam._m0[62u].z, fma(_2084, cbSceneParam._m0[62u].y, _2080 * cbSceneParam._m0[62u].x))) / _2296;
            float _2440 = isnan(cbSceneParam._m0[41u].w) ? _2436 : (isnan(_2436) ? cbSceneParam._m0[41u].w : max(_2436, cbSceneParam._m0[41u].w));
            float _2483 = (cbSceneParam._m0[33u].x - sqrt(((_2094 * _2094) + (_2093 * _2093)) + (_2095 * _2095))) * cbSceneParam._m0[33u].y;
            float _4594 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
            float _2490 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2297, cbSceneParam._m0[33u].w + _2298), _2440), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2297, _2298 - cbSceneParam._m0[33u].z), _2440), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2297 - cbSceneParam._m0[33u].z, _2298 - cbSceneParam._m0[33u].w), _2440), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2297 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2298), _2440), 0.0)).x), vec4(0.25)));
            float _2494 = 1.0 - (_2490 * cbSceneParam._m0[34u].x);
            float _2495 = 1.0 - (_2490 * cbSceneParam._m0[34u].y);
            float _2496 = 1.0 - (_2490 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2496) ? _2244 : (isnan(_2244) ? _2496 : min(_2244, _2496));
            frontier_phi_34_33_ladder_1 = isnan(_2495) ? _2243 : (isnan(_2243) ? _2495 : min(_2243, _2495));
            frontier_phi_34_33_ladder_2 = isnan(_2494) ? _2242 : (isnan(_2242) ? _2494 : min(_2242, _2494));
        }
        else
        {
            frontier_phi_34_33_ladder = _2244;
            frontier_phi_34_33_ladder_1 = _2243;
            frontier_phi_34_33_ladder_2 = _2242;
        }
        _2308 = frontier_phi_34_33_ladder_2;
        _2310 = frontier_phi_34_33_ladder_1;
        _2312 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2308 = _2242;
        _2310 = _2243;
        _2312 = _2244;
    }
    uvec4 _2317 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2319 = _2317.x * 14u;
    uint _2320 = _2319 + 13u;
    float _2327 = _1017 + (-1.0);
    float _2332 = (cbLight._m0[_2320].x * _2327) + 1.0;
    float _2333 = (cbLight._m0[_2320].y * _2327) + 1.0;
    float _2334 = (cbLight._m0[_2320].z * _2327) + 1.0;
    float _2335 = (cbLight._m0[_2320].w * _2327) + 1.0;
    uint _2336 = _2319 + 5u;
    float _2342 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
    uint _2346 = _2319 + 4u;
    float _2355 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
    uint _2359 = _2319 | 1u;
    float _2370 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_852, _853, _854));
    float _2373 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_852, _853, _854));
    float _4630 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _4641 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2378 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * 0.3183098733425140380859375;
    float _2380 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * 0.3183098733425140380859375;
    float _2387 = ((cbLight._m0[_2336].x * _2342) * _2380) + (((cbLight._m0[_2346].x * _2308) * _2355) * _2378);
    float _2388 = ((_2342 * cbLight._m0[_2336].y) * _2380) + (((cbLight._m0[_2346].y * _2310) * _2355) * _2378);
    float _2389 = ((_2342 * cbLight._m0[_2336].z) * _2380) + (((cbLight._m0[_2346].z * _2312) * _2355) * _2378);
    uvec4 _2393 = floatBitsToUint(cbLight._m0[_2319 + 12u]);
    bool _2395 = _2393.x == 0u;
    float _2497;
    float _2499;
    float _2501;
    if (_2395)
    {
        _2497 = _2387;
        _2499 = _2388;
        _2501 = _2389;
    }
    else
    {
        uint _2505 = _2319 + 6u;
        float _2521 = (dot(vec3(cbLight._m0[_2319 + 2u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2522 = _2521 * _2521;
        float _4652 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2523 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2524 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
        _2497 = (((cbLight._m0[_2505].x * 0.3183098733425140380859375) * _2523) * _2524) + _2387;
        _2499 = (((cbLight._m0[_2505].y * 0.3183098733425140380859375) * _2523) * _2524) + _2388;
        _2501 = (((cbLight._m0[_2505].z * 0.3183098733425140380859375) * _2523) * _2524) + _2389;
    }
    bool _2504 = _2393.y == 0u;
    float _2559;
    float _2561;
    float _2563;
    if (_2504)
    {
        _2559 = _2497;
        _2561 = _2499;
        _2563 = _2501;
    }
    else
    {
        uint _2732 = _2319 + 7u;
        float _2748 = (dot(vec3(cbLight._m0[_2319 + 3u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2749 = _2748 * _2748;
        float _4668 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2750 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2751 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2559 = (((cbLight._m0[_2732].x * 0.3183098733425140380859375) * _2750) * _2751) + _2497;
        _2561 = (((cbLight._m0[_2732].y * 0.3183098733425140380859375) * _2750) * _2751) + _2499;
        _2563 = (((cbLight._m0[_2732].z * 0.3183098733425140380859375) * _2750) * _2751) + _2501;
    }
    uint _2566 = _2319 + 8u;
    float _2579 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _855) * 0.949999988079071044921875);
    float _2580 = _2579 * _2579;
    float _2581 = cbLight._m0[_2319].x + _931;
    float _2582 = cbLight._m0[_2319].y + _932;
    float _2583 = cbLight._m0[_2319].z + _933;
    float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
    float _2588 = _2587 * _2581;
    float _2589 = _2587 * _2582;
    float _2590 = _2587 * _2583;
    float _2591 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2319].xyz));
    float _4684 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2594 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _4695 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _2595 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2596 = dot(vec3(_852, _853, _854), vec3(_2588, _2589, _2590));
    float _4706 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2599 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2600 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2588, _2589, _2590));
    float _4717 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2604 = _2580 * _2580;
    float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
    float _2616 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
    float _2617 = 0.959999978542327880859375 - _998;
    float _2619 = 0.959999978542327880859375 - _999;
    float _2620 = 0.959999978542327880859375 - _1000;
    float _2627 = 1.0 - _2580;
    float _2638 = (0.5 / (((_2595 * ((_2594 * _2627) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2595 * _2627) + _2580) * _2594))) * _2594;
    float _4728 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2640 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
    uint _2654 = _2319 + 9u;
    float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _855) * 0.949999988079071044921875);
    float _2666 = _2665 * _2665;
    float _2667 = cbLight._m0[_2359].x + _931;
    float _2668 = cbLight._m0[_2359].y + _932;
    float _2669 = cbLight._m0[_2359].z + _933;
    float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
    float _2674 = _2673 * _2667;
    float _2675 = _2673 * _2668;
    float _2676 = _2673 * _2669;
    float _2677 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2359].xyz));
    float _4739 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2681 = dot(vec3(_852, _853, _854), vec3(_2674, _2675, _2676));
    float _4750 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2685 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2674, _2675, _2676));
    float _4761 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2689 = _2666 * _2666;
    float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
    float _2700 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
    float _2707 = 1.0 - _2666;
    float _2717 = (0.5 / (((_2595 * ((_2680 * _2707) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2595 * _2707) + _2666) * _2680))) * _2680;
    float _4772 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2719 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
    float _2729 = (((((_2700 * _2617) + _1001) * cbLight._m0[_2654].x) * _2719) * _2342) + ((((cbLight._m0[_2566].x * _2308) * ((_2616 * _2617) + _1001)) * _2640) * _2355);
    float _2730 = (((((_2700 * _2619) + _1003) * cbLight._m0[_2654].y) * _2719) * _2342) + ((((cbLight._m0[_2566].y * _2310) * ((_2616 * _2619) + _1003)) * _2640) * _2355);
    float _2731 = (((((_2700 * _2620) + _1004) * cbLight._m0[_2654].z) * _2719) * _2342) + ((((cbLight._m0[_2566].z * _2312) * ((_2616 * _2620) + _1004)) * _2640) * _2355);
    float _2787;
    float _2789;
    float _2791;
    if (_2395)
    {
        _2787 = _2729;
        _2789 = _2730;
        _2791 = _2731;
    }
    else
    {
        uint _2793 = _2319 + 2u;
        uint _2797 = _2319 + 10u;
        float _2811 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2793].w)) * _855) * 0.949999988079071044921875);
        float _2812 = _2811 * _2811;
        float _2813 = cbLight._m0[_2793].x + _931;
        float _2814 = cbLight._m0[_2793].y + _932;
        float _2815 = cbLight._m0[_2793].z + _933;
        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
        float _2820 = _2819 * _2813;
        float _2821 = _2819 * _2814;
        float _2822 = _2819 * _2815;
        float _2823 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2793].xyz));
        float _4783 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2826 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2827 = dot(vec3(_852, _853, _854), vec3(_2820, _2821, _2822));
        float _4794 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2830 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2831 = dot(vec3(cbLight._m0[_2793].xyz), vec3(_2820, _2821, _2822));
        float _4805 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2835 = _2812 * _2812;
        float _2839 = ((_2830 * _2830) * (_2835 + (-1.0))) + 1.0;
        float _2846 = exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0);
        float _2853 = 1.0 - _2812;
        float _2863 = (0.5 / (((_2595 * ((_2826 * _2853) + _2812)) + 9.9999999392252902907785028219223e-09) + (((_2595 * _2853) + _2812) * _2826))) * _2826;
        float _4816 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2865 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2835 / ((_2839 * _2839) * 3.141590118408203125));
        float _2866 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
        _2787 = (((((_2846 * _2617) + _1001) * cbLight._m0[_2797].x) * _2865) * _2866) + _2729;
        _2789 = (((((_2846 * _2619) + _1003) * cbLight._m0[_2797].y) * _2865) * _2866) + _2730;
        _2791 = (((((_2846 * _2620) + _1004) * cbLight._m0[_2797].z) * _2865) * _2866) + _2731;
    }
    float _2897;
    float _2899;
    float _2901;
    if (_2504)
    {
        _2897 = _2787;
        _2899 = _2789;
        _2901 = _2791;
    }
    else
    {
        uint _2908 = _2319 + 3u;
        uint _2912 = _2319 + 11u;
        float _2926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2908].w)) * _855) * 0.949999988079071044921875);
        float _2927 = _2926 * _2926;
        float _2928 = cbLight._m0[_2908].x + _931;
        float _2929 = cbLight._m0[_2908].y + _932;
        float _2930 = cbLight._m0[_2908].z + _933;
        float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
        float _2935 = _2934 * _2928;
        float _2936 = _2934 * _2929;
        float _2937 = _2934 * _2930;
        float _2938 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2908].xyz));
        float _4832 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2941 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2942 = dot(vec3(_852, _853, _854), vec3(_2935, _2936, _2937));
        float _4843 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2945 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2946 = dot(vec3(cbLight._m0[_2908].xyz), vec3(_2935, _2936, _2937));
        float _4854 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2950 = _2927 * _2927;
        float _2954 = ((_2945 * _2945) * (_2950 + (-1.0))) + 1.0;
        float _2961 = exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0);
        float _2968 = 1.0 - _2927;
        float _2978 = (0.5 / (((_2595 * ((_2941 * _2968) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2595 * _2968) + _2927) * _2941))) * _2941;
        float _4865 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2980 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2950 / ((_2954 * _2954) * 3.141590118408203125));
        float _2981 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2897 = (((((_2961 * _2617) + _1001) * cbLight._m0[_2912].x) * _2980) * _2981) + _2787;
        _2899 = (((((_2961 * _2619) + _1003) * cbLight._m0[_2912].y) * _2980) * _2981) + _2789;
        _2901 = (((((_2961 * _2620) + _1004) * cbLight._m0[_2912].z) * _2980) * _2981) + _2791;
    }
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    if (_2317.y == 0u)
    {
        uvec4 _3002 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3003 = _3002.x;
        uint _3014 = uint((float(_3002.y) * floor(float(uint(cbSceneParam._m0[85u].y * _940) / _3003))) + floor(float(uint(cbSceneParam._m0[85u].x * _939) / _3003)));
        float _3024 = (log2(_2095 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3025 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
        uint _3028 = uint(isnan(14.0) ? _3025 : (isnan(_3025) ? 14.0 : min(_3025, 14.0)));
        uvec4 _3033 = texelFetch(g_lightClusterGridBuffer, int(((_3028 << 2u) + (_3014 << 6u)) >> 2u));
        uint _3034 = _3033.x;
        uint _3035 = _3002.z;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        if (((((1u << ((_3035 >> 4u) & 15u)) + 4294967295u) & _3034) == 0u) || ((_3035 & 240u) == 0u))
        {
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
            _3124 = 0.0;
        }
        else
        {
            float _3115;
            float _3117;
            float _3119;
            float _3121;
            float _3123;
            float _3125;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            uint _3265 = 0u;
            uint _3274;
            bool _3275;
            for (;;)
            {
                _3274 = texelFetch(g_lightClassification, int((((_3028 << 5u) + (_3014 << 9u)) + (_3265 << 2u)) >> 2u)).x;
                _3275 = _3274 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3275)
                {
                    frontier_phi_66_pred = _3264;
                    frontier_phi_66_pred_1 = _3263;
                    frontier_phi_66_pred_2 = _3262;
                    frontier_phi_66_pred_3 = _3261;
                    frontier_phi_66_pred_4 = _3260;
                    frontier_phi_66_pred_5 = _3259;
                }
                else
                {
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    uint _3389;
                    _3383 = _3259;
                    _3384 = _3260;
                    _3385 = _3261;
                    _3386 = _3262;
                    _3387 = _3263;
                    _3388 = _3264;
                    _3389 = _3274;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    for (;;)
                    {
                        uint _3393 = uint(findLSB(_3389)) + (_3265 << 5u);
                        uint _3390 = (_3389 + 4294967295u) & _3389;
                        uint _3395 = _3393 * 48u;
                        vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3395)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 3u)).x));
                        uint _3415 = (_3393 * 48u) + 4u;
                        vec4 _3428 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 3u)).x));
                        uint _3434 = (_3393 * 48u) + 8u;
                        vec3 _3445 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3434)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 2u)).x));
                        float _3449 = _3409.x - _2093;
                        float _3450 = _3409.y - _2094;
                        float _3451 = _3409.z - _2095;
                        float _3452 = dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451));
                        float _3455 = inversesqrt(_3452);
                        float _3456 = _3455 * _3449;
                        float _3457 = _3455 * _3450;
                        float _3458 = _3455 * _3451;
                        float _3459 = dot(vec3(_958, _961, _964), vec3(_3456, _3457, _3458));
                        float _3464 = 1.0 - (_3452 * _3409.w);
                        float _4891 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3465 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3466 = sqrt(_3452) * _3428.w;
                        float _3469 = 1.39999997615814208984375 / (_3466 + 1.39999997615814208984375);
                        float _3470 = _3469 * _3469;
                        float _3473 = ((1.0 - _3470) * _3459) + _3470;
                        float _3476 = _3466 * _3466;
                        float _3480 = ((isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0))) * _3465) / ((_3476 * 0.699999988079071044921875) + 1.0);
                        float _3484 = (-0.0) - _2093;
                        float _3485 = (-0.0) - _2094;
                        float _3486 = (-0.0) - _2095;
                        float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                        float _3491 = _3490 * _3484;
                        float _3492 = _3490 * _3485;
                        float _3493 = _3490 * _3486;
                        float _3500 = exp2(log2(1.0 / ((_3476 * 3.5) + 5.0)) * 0.25);
                        float _3501 = 1.0 - _1033;
                        float _3508 = sqrt(1.0 - ((1.0 - (_3501 * _3501)) * (1.0 - (_3500 * _3500))));
                        float _3509 = _3508 * _3508;
                        float _3510 = _3509 * _3509;
                        float _3511 = _3491 + _3456;
                        float _3512 = _3492 + _3457;
                        float _3513 = _3493 + _3458;
                        float _3517 = inversesqrt(dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513)));
                        float _3521 = dot(vec3(_958, _961, _964), vec3(_3491, _3492, _3493));
                        float _4907 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3524 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3525 = dot(vec3(_958, _961, _964), vec3(_3517 * _3511, _3517 * _3512, _3517 * _3513));
                        float _4918 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3528 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                        float _3532 = ((_3528 * _3528) * (_3510 + (-1.0))) + 1.0;
                        float _3533 = _3469 * _3509;
                        float _3534 = _3533 * _3533;
                        float _3537 = ((1.0 - _3534) * _3459) + _3534;
                        float _4929 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3538 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3539 = 1.0 - _3509;
                        float _3549 = (0.5 / (((_3538 * ((_3524 * _3539) + _3509)) + 9.9999999392252902907785028219223e-09) + (((_3538 * _3539) + _3509) * _3524))) * _3538;
                        float _4940 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3560 = (((_3510 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3532 * _3532) * ((_3476 * 2.1991131305694580078125) + 3.141590118408203125))) * _3465;
                        _3318 = (_3480 * _3428.x) + _3386;
                        _3319 = (_3480 * _3428.y) + _3387;
                        _3320 = (_3480 * _3428.z) + _3388;
                        _3315 = (_3560 * _3445.x) + _3383;
                        _3316 = (_3560 * _3445.y) + _3384;
                        _3317 = (_3560 * _3445.z) + _3385;
                        if (_3390 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3383 = _3315;
                            _3384 = _3316;
                            _3385 = _3317;
                            _3386 = _3318;
                            _3387 = _3319;
                            _3388 = _3320;
                            _3389 = _3390;
                        }
                    }
                    frontier_phi_66_pred = _3320;
                    frontier_phi_66_pred_1 = _3319;
                    frontier_phi_66_pred_2 = _3318;
                    frontier_phi_66_pred_3 = _3317;
                    frontier_phi_66_pred_4 = _3316;
                    frontier_phi_66_pred_5 = _3315;
                }
                _3125 = frontier_phi_66_pred;
                _3123 = frontier_phi_66_pred_1;
                _3121 = frontier_phi_66_pred_2;
                _3119 = frontier_phi_66_pred_3;
                _3117 = frontier_phi_66_pred_4;
                _3115 = frontier_phi_66_pred_5;
                uint _3266 = _3265 + 1u;
                if (_3266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3259 = _3115;
                    _3260 = _3117;
                    _3261 = _3119;
                    _3262 = _3121;
                    _3263 = _3123;
                    _3264 = _3125;
                    _3265 = _3266;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
            _3124 = _3125;
        }
        uvec4 _3128 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3129 = _3128.z;
        uint _3131 = (_3129 >> 8u) & 15u;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        if (((4294967295u << _3131) & _3034) == 0u)
        {
            _3227 = _3114;
            _3229 = _3116;
            _3231 = _3118;
            _3233 = _3120;
            _3235 = _3122;
            _3237 = _3124;
        }
        else
        {
            float _3252 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
            float _3253 = _3252 * _2093;
            float _3254 = _3252 * _2094;
            float _3255 = _3252 * _2095;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3131 < ((_3129 >> 12u) & 15u))
            {
                float _3228;
                float _3230;
                float _3232;
                float _3234;
                float _3236;
                float _3238;
                float _3366 = _3114;
                float _3367 = _3116;
                float _3368 = _3118;
                float _3369 = _3120;
                float _3370 = _3122;
                float _3371 = _3124;
                uint _3372 = _3131;
                uint _3381;
                bool _3382;
                for (;;)
                {
                    _3381 = texelFetch(g_lightClassification, int((((_3028 << 5u) + (_3014 << 9u)) + (_3372 << 2u)) >> 2u)).x;
                    _3382 = _3381 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3382)
                    {
                        frontier_phi_72_pred = _3371;
                        frontier_phi_72_pred_1 = _3370;
                        frontier_phi_72_pred_2 = _3369;
                        frontier_phi_72_pred_3 = _3368;
                        frontier_phi_72_pred_4 = _3367;
                        frontier_phi_72_pred_5 = _3366;
                    }
                    else
                    {
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3578 = _3366;
                        float _3579 = _3367;
                        float _3580 = _3368;
                        float _3581 = _3369;
                        float _3582 = _3370;
                        float _3583 = _3371;
                        uint _3584 = _3381;
                        uint _3585;
                        vec4 _3610;
                        float _3611;
                        vec4 _3626;
                        vec3 _3638;
                        vec4 _3653;
                        vec4 _3668;
                        float _3714;
                        bool _3715;
                        for (;;)
                        {
                            uint _3595 = ((_3372 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3584));
                            _3585 = (_3584 + 4294967295u) & _3584;
                            uint _3597 = _3595 * 40u;
                            _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            _3611 = _3610.w;
                            uint _3613 = (_3595 * 40u) + 4u;
                            _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3628 = (_3595 * 40u) + 8u;
                            _3638 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x));
                            uint _3640 = (_3595 * 40u) + 16u;
                            _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3655 = (_3595 * 40u) + 20u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3670 = (_3595 * 40u) + 24u;
                            vec4 _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            uint _3689 = (_3595 * 40u) + 28u;
                            vec4 _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            _3714 = fma(_2095, _3702.z, fma(_2094, _3702.y, _3702.x * _2093)) + _3702.w;
                            _3715 = !((fma(_2095, _3683.z, fma(_2094, _3683.y, _3683.x * _2093)) + _3683.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3715)
                            {
                                float _3742 = _3610.x - _2093;
                                float _3743 = _3610.y - _2094;
                                float _3744 = _3610.z - _2095;
                                float _3745 = dot(vec3(_3742, _3743, _3744), vec3(_3742, _3743, _3744));
                                float _3748 = inversesqrt(_3745);
                                float _3749 = _3748 * _3742;
                                float _3750 = _3748 * _3743;
                                float _3751 = _3748 * _3744;
                                float _3755 = 1.0 - (_3745 / (_3611 * _3611));
                                float _4951 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3756 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3760 = sqrt(_3745) * _3626.w;
                                float _3762 = 1.39999997615814208984375 / (_3760 + 1.39999997615814208984375);
                                float _3763 = _3762 * _3762;
                                float _3766 = ((1.0 - _3763) * dot(vec3(_3749, _3750, _3751), vec3(_958, _961, _964))) + _3763;
                                float _3769 = _3760 * _3760;
                                float _3773 = (fma(_2095, _3653.z, fma(_2094, _3653.y, _3653.x * _2093)) + _3653.w) / _3714;
                                float _3774 = (fma(_2095, _3668.z, fma(_2094, _3668.y, _3668.x * _2093)) + _3668.w) / _3714;
                                float _3778 = 1.0 - dot(vec2(_3773, _3774), vec2(_3773, _3774));
                                float _4967 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3779 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3780 = _3779 * (((isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0))) * _3756) / ((_3769 * 0.699999988079071044921875) + 1.0));
                                float _3792 = exp2(log2(1.0 / ((_3769 * 3.5) + 5.0)) * 0.25);
                                float _3793 = 1.0 - _1033;
                                float _3800 = sqrt(1.0 - ((1.0 - (_3793 * _3793)) * (1.0 - (_3792 * _3792))));
                                float _3801 = _3800 * _3800;
                                float _3802 = _3801 * _3801;
                                float _3803 = _3749 - _3253;
                                float _3804 = _3750 - _3254;
                                float _3805 = _3751 - _3255;
                                float _3809 = inversesqrt(dot(vec3(_3803, _3804, _3805), vec3(_3803, _3804, _3805)));
                                float _3813 = dot(vec3(_958, _961, _964), vec3((-0.0) - _3253, (-0.0) - _3254, (-0.0) - _3255));
                                float _4978 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3816 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3817 = dot(vec3(_958, _961, _964), vec3(_3809 * _3803, _3809 * _3804, _3809 * _3805));
                                float _4989 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3820 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3824 = ((_3820 * _3820) * (_3802 + (-1.0))) + 1.0;
                                float _3825 = _3762 * _3801;
                                float _3826 = _3825 * _3825;
                                float _3832 = ((1.0 - _3826) * dot(vec3(_958, _961, _964), vec3(_3749, _3750, _3751))) + _3826;
                                float _5000 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3833 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3834 = 1.0 - _3801;
                                float _3844 = (0.5 / (((_3833 * ((_3816 * _3834) + _3801)) + 9.9999999392252902907785028219223e-09) + (((_3833 * _3834) + _3801) * _3816))) * _3833;
                                float _5011 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3854 = (_3779 * _3756) * (((_3802 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3824 * _3824) * ((_3769 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3780 * _3626.y;
                                frontier_phi_78_pred_1 = _3780 * _3626.x;
                                frontier_phi_78_pred_2 = _3854 * _3638.z;
                                frontier_phi_78_pred_3 = _3854 * _3638.y;
                                frontier_phi_78_pred_4 = _3854 * _3638.x;
                                frontier_phi_78_pred_5 = _3780 * _3626.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3862 = frontier_phi_78_pred;
                            _3861 = frontier_phi_78_pred_1;
                            _3860 = frontier_phi_78_pred_2;
                            _3859 = frontier_phi_78_pred_3;
                            _3858 = frontier_phi_78_pred_4;
                            _3863 = frontier_phi_78_pred_5;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            _3565 = _3858 + _3578;
                            _3566 = _3859 + _3579;
                            _3567 = _3860 + _3580;
                            if (_3585 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3585;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3570;
                        frontier_phi_72_pred_1 = _3569;
                        frontier_phi_72_pred_2 = _3568;
                        frontier_phi_72_pred_3 = _3567;
                        frontier_phi_72_pred_4 = _3566;
                        frontier_phi_72_pred_5 = _3565;
                    }
                    _3238 = frontier_phi_72_pred;
                    _3236 = frontier_phi_72_pred_1;
                    _3234 = frontier_phi_72_pred_2;
                    _3232 = frontier_phi_72_pred_3;
                    _3230 = frontier_phi_72_pred_4;
                    _3228 = frontier_phi_72_pred_5;
                    uint _3373 = _3372 + 1u;
                    if (_3373 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3366 = _3228;
                        _3367 = _3230;
                        _3368 = _3232;
                        _3369 = _3234;
                        _3370 = _3236;
                        _3371 = _3238;
                        _3372 = _3373;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3238;
                frontier_phi_60_61_ladder_1 = _3236;
                frontier_phi_60_61_ladder_2 = _3232;
                frontier_phi_60_61_ladder_3 = _3230;
                frontier_phi_60_61_ladder_4 = _3228;
                frontier_phi_60_61_ladder_5 = _3234;
            }
            else
            {
                frontier_phi_60_61_ladder = _3124;
                frontier_phi_60_61_ladder_1 = _3122;
                frontier_phi_60_61_ladder_2 = _3118;
                frontier_phi_60_61_ladder_3 = _3116;
                frontier_phi_60_61_ladder_4 = _3114;
                frontier_phi_60_61_ladder_5 = _3120;
            }
            _3227 = frontier_phi_60_61_ladder_4;
            _3229 = frontier_phi_60_61_ladder_3;
            _3231 = frontier_phi_60_61_ladder_2;
            _3233 = frontier_phi_60_61_ladder_5;
            _3235 = frontier_phi_60_61_ladder_1;
            _3237 = frontier_phi_60_61_ladder;
        }
        float _3242 = isnan(1.0) ? _1017 : (isnan(_1017) ? 1.0 : min(_1017, 1.0));
        _3047 = (_3242 * _3233) + _2559;
        _3049 = (_3242 * _3235) + _2561;
        _3051 = (_3242 * _3237) + _2563;
        _3053 = ((_3227 * _1001) * _3242) + _2897;
        _3055 = ((_3229 * _1003) * _3242) + _2899;
        _3057 = ((_3231 * _1004) * _3242) + _2901;
    }
    else
    {
        _3047 = _2559;
        _3049 = _2561;
        _3051 = _2563;
        _3053 = _2897;
        _3055 = _2899;
        _3057 = _2901;
    }
    float _5027 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _5038 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _5049 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    uint _3077 = _283 + 6u;
    float _3085 = _939 / cbSceneParam._m0[86u].x;
    float _3086 = _940 / cbSceneParam._m0[86u].y;
    vec4 _3100 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3085, _3086, (log2((isnan(cbSceneParam._m0[77u].w) ? _874 : (isnan(_874) ? cbSceneParam._m0[77u].w : min(_874, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3102 = _3100.x;
    float _3103 = _3100.y;
    float _3104 = _3100.z;
    float _3105 = _3100.w;
    float _3177;
    float _3179;
    float _3181;
    float _3183;
    if (_874 > cbSceneParam._m0[78u].w)
    {
        float _3139 = isnan(_874) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _874 : min(cbSceneParam._m0[80u].w, _874));
        float _3140 = _3139 / _874;
        float _3151 = _3140 * _924;
        float _3152 = _925 * _3140;
        float _3153 = (-0.0) - _3152;
        float _3155 = _3140 * _926;
        float _3157 = (cbSceneParam._m0[77u].w * _3153) / _3139;
        float _3158 = _3157 + cbSceneParam._m0[79u].w;
        float _3159 = cbSceneParam._m0[79u].w - _3152;
        float _3165 = sqrt(((_3151 * _3151) + (_3152 * _3152)) + (_3155 * _3155));
        float _3168 = (1.0 - (cbSceneParam._m0[77u].w / _3139)) * _3165;
        float _3173 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3175 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3328;
        if (abs((_3153 - _3157) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3328 = ((((_3158 > 0.0) ? exp2(_3173 * _3158) : (2.0 - exp2(_3175 * _3158))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3168;
        }
        else
        {
            float _3288 = 1.0 / cbSceneParam._m0[80u].x;
            float _3289 = isnan(_3159) ? _3158 : (isnan(_3158) ? _3159 : max(_3158, _3159));
            float _3290 = isnan(_3159) ? _3158 : (isnan(_3158) ? _3159 : min(_3158, _3159));
            float _3299 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : min(_3289, 0.0));
            float _3300 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : min(_3290, 0.0));
            _3328 = ((abs(_3165 / _3153) * cbSceneParam._m0[80u].y) * ((((_3299 - _3300) * 2.0) - ((exp2(_3173 * (isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0)))) - exp2(_3173 * (isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))))) * _3288)) - ((exp2(_3175 * _3299) - exp2(_3175 * _3300)) * _3288))) + (_3168 * cbSceneParam._m0[80u].z);
        }
        vec4 _3330 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3085, _3086, 1.0), 0.0);
        float _3339 = exp2((_3328 * (-1.44269502162933349609375)) * (1.0 - _3330.w));
        float _3340 = log2(_3339);
        float _3356 = log2(_3105);
        _3177 = (exp2(_3356 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].x)) * _3330.x) / cbSceneParam._m0[78u].x)) + _3102;
        _3179 = (exp2(_3356 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].y)) * _3330.y) / cbSceneParam._m0[78u].y)) + _3103;
        _3181 = (exp2(_3356 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].z)) * _3330.z) / cbSceneParam._m0[78u].z)) + _3104;
        _3183 = _3339 * _3105;
    }
    else
    {
        _3177 = _3102;
        _3179 = _3103;
        _3181 = _3104;
        _3183 = _3105;
    }
    float _3195 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3196 = _3195 == 3.0;
    float _3197 = log2(_3183);
    float _3204 = exp2(_3197 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_3047 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1017))) + ((_3053 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1825)) * cbPerFrame._m0[3u].x));
    float _3205 = exp2(_3197 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_3049 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1017))) + ((_3055 + ((isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))) * _1825)) * cbPerFrame._m0[3u].x));
    float _3206 = exp2(_3197 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_3051 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1017))) + ((_3057 + ((isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))) * _1825)) * cbPerFrame._m0[3u].x));
    float _3215 = (_3195 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3215 * (_3196 ? _3204 : (_3204 + (cbSceneParam._m0[72u].w * _3177)));
    SV_Target.y = _3215 * (_3196 ? _3205 : (_3205 + (cbSceneParam._m0[72u].w * _3179)));
    SV_Target.z = _3215 * (_3196 ? _3206 : (_3206 + (cbSceneParam._m0[72u].w * _3181)));
    SV_Target.w = cbInstanceData._m0[_3077].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3077].w;
}


