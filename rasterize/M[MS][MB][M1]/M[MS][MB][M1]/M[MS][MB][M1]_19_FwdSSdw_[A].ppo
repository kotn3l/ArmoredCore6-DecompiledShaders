#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1241;
float _3647;
float _3648;
float _3649;
float _3650;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3659 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3670 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3681 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _332 = _327.x * cbMtdParam._m0[9u].x;
    float _333 = _327.y * cbMtdParam._m0[9u].y;
    float _334 = _327.z * cbMtdParam._m0[9u].z;
    float _338 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _332;
    float _341 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _333;
    float _344 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _334;
    float _351 = ((_332 - _338) * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) + _338;
    float _352 = ((_333 - _341) * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) + _341;
    float _353 = ((_334 - _344) * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) + _344;
    vec4 _371 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _397 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _401 = _397.z;
    float _405 = (_397.x * 2.0) + (-1.0);
    float _406 = (_397.y * 2.0) + (-1.0);
    float _407 = dot(vec2(_405, _406), vec2(_405, _406));
    float _3692 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _412 = sqrt(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))));
    float _417 = _405 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_371.x * 2.0) + (-1.0)));
    float _418 = _406 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_371.y * 2.0) + (-1.0)));
    vec4 _435 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _437 = _435.x;
    float _438 = 1.0 - _437;
    float _447 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _450 = ((isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : min(_447, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _459 = (_450 - ((((((_437 - _438) * cbMtdParam._m0[24u].z) + _438) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _450))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3713 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _467 = (_460 * (cbMtdParam._m0[17u].x - _351)) + _351;
    float _468 = (_460 * (cbMtdParam._m0[17u].y - _352)) + _352;
    float _469 = (_460 * (cbMtdParam._m0[17u].z - _353)) + _353;
    vec4 _482 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _484 = _482.x;
    float _485 = 1.0 - _484;
    float _512 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_484 - _485) * cbMtdParam._m0[24u].w) + _485) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3724 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _521 = ((((cbMtdParam._m0[10u].x - _467) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _513) + _467;
    float _522 = ((((cbMtdParam._m0[10u].y - _468) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _513) + _468;
    float _523 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _469)) * _513) + _469;
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _538 = _536.x;
    float _540 = _538 - (_538 * _460);
    float _542 = _540 - (_540 * _513);
    float _547 = (((_371.z - _401) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _401;
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _568 = (_561.x * 2.0) + (-1.0);
    float _569 = (_561.y * 2.0) + (-1.0);
    float _570 = dot(vec2(_568, _569), vec2(_568, _569));
    float _3735 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _578 = (_460 * (_561.z - _547)) + _547;
    float _581 = ((cbMtdParam._m0[23u].y - _578) * _513) + _578;
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _609 = (_603.x * 2.0) + (-1.0);
    float _610 = (_603.y * 2.0) + (-1.0);
    float _611 = dot(vec2(_609, _610), vec2(_609, _610));
    float _3746 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _628 = (((_568 - _417) + (cbMtdParam._m0[21u].x * _417)) * _460) + _417;
    float _629 = (((_569 - _418) + (cbMtdParam._m0[21u].x * _418)) * _460) + _418;
    float _630 = (_460 * (sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) - _412)) + _412;
    float _641 = (((_609 - _628) + (_628 * cbMtdParam._m0[22u].z)) * _513) + _628;
    float _642 = (((_610 - _629) + (_629 * cbMtdParam._m0[22u].z)) * _513) + _629;
    float _643 = ((sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) - _630) * _513) + _630;
    float _645 = cbMtdParam._m0[22u].x + _397.w;
    float _648 = fma(_643, _239 * NORMAL.x, fma(_642, _246 * TANGENT.x, (_232 * _224) * _641));
    float _651 = fma(_643, _239 * NORMAL.y, fma(_642, _246 * TANGENT.y, (_232 * _225) * _641));
    float _654 = fma(_643, _239 * NORMAL.z, fma(_642, _246 * TANGENT.z, (_232 * _226) * _641));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _3757 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _662 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3779 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3790 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3801 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3812 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _667 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _681 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _731 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _721);
    float _732 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _721);
    float _733 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _721);
    float _737 = inversesqrt(dot(vec3(_731, _732, _733), vec3(_731, _732, _733)));
    float _738 = _731 * _737;
    float _739 = _732 * _737;
    float _740 = _733 * _737;
    vec4 _745 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _747 = _745.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _922 = sqrt(((_731 * _731) + (_732 * _732)) + (_733 * _733));
        float _928 = (cbMatDynParam._m0[5u].x * _922) + cbMatDynParam._m0[5u].y;
        float _3823 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _933 = (cbMatDynParam._m0[5u].z * _922) + cbMatDynParam._m0[5u].w;
        float _3834 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) - _929)) + _929) < ((_747 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _759 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _760 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _780 = fma(_661, cbSceneParam._m0[5u].z, fma(_660, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _659));
    float _783 = fma(_661, cbSceneParam._m0[6u].z, fma(_660, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _659));
    float _786 = fma(_661, cbSceneParam._m0[7u].z, fma(_660, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _659));
    uint _799 = _271 + 9u;
    uint _800 = _799 + uint(cbMatDynParam._m0[0u].w);
    float _806 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_800].x;
    float _807 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_800].y;
    float _808 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_800].z;
    float _3845 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _812 = 1.0 - _667;
    float _813 = _809 * _812;
    float _814 = _810 * _812;
    float _815 = _811 * _812;
    float _820 = (_809 + (-0.039999999105930328369140625)) * _667;
    float _821 = (_810 + (-0.039999999105930328369140625)) * _667;
    float _822 = (_811 + (-0.039999999105930328369140625)) * _667;
    float _823 = _820 + 0.039999999105930328369140625;
    float _825 = _821 + 0.039999999105930328369140625;
    float _826 = _822 + 0.039999999105930328369140625;
    vec4 _835 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _759, cbSceneParam._m0[86u].y * _760));
    float _839 = ((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * TEXCOORD_5.w) * _835.x;
    float _840 = dot(vec3(_659, _660, _661), vec3(_738, _739, _740));
    float _843 = _840 * 2.0;
    float _847 = (_843 * _659) - _738;
    float _848 = (_843 * _660) - _739;
    float _849 = (_843 * _661) - _740;
    float _853 = abs(dot(vec3(_738, _739, _740), vec3(_659, _660, _661)));
    float _3878 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _855 = sqrt(_662);
    float _868 = exp2((_855 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_855 * 3.0));
    float _874 = (1.0 - _868) * ((_855 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _875 = _868 * _855;
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1240;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _965 = fma(_911, cbModelParam._m0[26u].z, fma(_907, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _903));
        float _969 = fma(_911, cbModelParam._m0[27u].z, fma(_907, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _903));
        float _973 = fma(_911, cbModelParam._m0[28u].z, fma(_907, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _903));
        float _998 = _903 + _659;
        float _999 = _907 + _660;
        float _1000 = _911 + _661;
        float _1010 = fma(_1000, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998)) - _965;
        float _1011 = fma(_1000, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998)) - _969;
        float _1012 = fma(_1000, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998)) - _973;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_965 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_969 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[34u].z) + ((((((_973 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1068 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1034.x + (-0.5));
        float _1070 = _1068 * (_1034.y + (-0.5));
        float _1071 = _1068 * (_1034.z + (-0.5));
        float _1078 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1041.x + (-0.5));
        float _1080 = _1078 * (_1041.y + (-0.5));
        float _1081 = _1078 * (_1041.z + (-0.5));
        float _1088 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1048.x + (-0.5));
        float _1090 = _1088 * (_1048.y + (-0.5));
        float _1091 = _1088 * (_1048.z + (-0.5));
        float _1098 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1055.x + (-0.5));
        float _1100 = _1098 * (_1055.y + (-0.5));
        float _1101 = _1098 * (_1055.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1122 = (dot(vec3(_659, _660, _661), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1132 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3926 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1134 + 1.0))) + _1139) * _1102;
        float _1149 = _1070 * 0.5;
        float _1150 = _1080 * 0.5;
        float _1151 = _1090 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_659, _660, _661), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3959 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1176 + 1.0))) + _1181) * _1103;
        float _1191 = _1071 * 0.5;
        float _1192 = _1081 * 0.5;
        float _1193 = _1091 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_659, _660, _661), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3992 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1218 + 1.0))) + _1223) * _1104;
        _1240 = _1071;
        _1242 = _1070;
        _1243 = _1069;
        _1244 = _1081;
        _1245 = _1080;
        _1246 = _1079;
        _1247 = _1091;
        _1248 = _1090;
        _1249 = _1089;
        _1250 = _1104;
        _1251 = _1103;
        _1252 = _1102;
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _1241;
        _1242 = _1241;
        _1243 = _1241;
        _1244 = _1241;
        _1245 = _1241;
        _1246 = _1241;
        _1247 = _1241;
        _1248 = _1241;
        _1249 = _1241;
        _1250 = _1241;
        _1251 = _1241;
        _1252 = _1241;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1283 = fma(_911, cbModelParam._m0[30u].z, fma(_907, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _903));
        float _1287 = fma(_911, cbModelParam._m0[31u].z, fma(_907, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _903));
        float _1291 = fma(_911, cbModelParam._m0[32u].z, fma(_907, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _903));
        float _1314 = _903 + _659;
        float _1315 = _907 + _660;
        float _1316 = _911 + _661;
        float _1326 = fma(_1316, cbModelParam._m0[30u].z, fma(_1315, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1314)) - _1283;
        float _1327 = fma(_1316, cbModelParam._m0[31u].z, fma(_1315, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1314)) - _1287;
        float _1328 = fma(_1316, cbModelParam._m0[32u].z, fma(_1315, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1314)) - _1291;
        float _1332 = inversesqrt(dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328)));
        float _1345 = ((_1332 * _1326) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1283 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1332 * _1327) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1287 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1332 * _1328) / cbModelParam._m0[35u].z) + ((((((_1291 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        float _1382 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1349.x + (-0.5));
        float _1384 = _1382 * (_1349.y + (-0.5));
        float _1385 = _1382 * (_1349.z + (-0.5));
        float _1392 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1356.x + (-0.5));
        float _1394 = _1392 * (_1356.y + (-0.5));
        float _1395 = _1392 * (_1356.z + (-0.5));
        float _1402 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1363.x + (-0.5));
        float _1404 = _1402 * (_1363.y + (-0.5));
        float _1405 = _1402 * (_1363.z + (-0.5));
        float _1412 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1370.x + (-0.5));
        float _1414 = _1412 * (_1370.y + (-0.5));
        float _1415 = _1412 * (_1370.z + (-0.5));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = _1383 * 0.5;
        float _1420 = _1393 * 0.5;
        float _1421 = _1403 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_659, _660, _661), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4055 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1446 + 1.0))) + _1451) * _1416;
        float _1461 = _1384 * 0.5;
        float _1462 = _1394 * 0.5;
        float _1463 = _1404 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_659, _660, _661), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4088 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1488 + 1.0))) + _1493) * _1417;
        float _1503 = _1385 * 0.5;
        float _1504 = _1395 * 0.5;
        float _1505 = _1405 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_659, _660, _661), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4121 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1530 + 1.0))) + _1535) * _1418;
        _1552 = _1385;
        _1553 = _1384;
        _1554 = _1383;
        _1555 = _1395;
        _1556 = _1394;
        _1557 = _1393;
        _1558 = _1405;
        _1559 = _1404;
        _1560 = _1403;
        _1561 = _1418;
        _1562 = _1417;
        _1563 = _1416;
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
    }
    else
    {
        _1552 = _1241;
        _1553 = _1241;
        _1554 = _1241;
        _1555 = _1241;
        _1556 = _1241;
        _1557 = _1241;
        _1558 = _1241;
        _1559 = _1241;
        _1560 = _1241;
        _1561 = _1241;
        _1562 = _1241;
        _1563 = _1241;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1253)) + _1253;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1254)) + _1254;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1255)) + _1255;
    float _1599 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1577, cbSceneParam._m0[89u].y, _1576 * cbSceneParam._m0[89u].x));
    float _1602 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1577, cbSceneParam._m0[90u].y, _1576 * cbSceneParam._m0[90u].x));
    float _1605 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1577, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1576));
    float _1620 = _847 * 0.5;
    float _1621 = _848 * 0.5;
    float _1622 = _849 * 0.5;
    float _1623 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1626 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1629 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1663;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1636 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1240, _1244, _1247, _1250));
        float _1640 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1644 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1651 = dot(vec4(cbModelParam._m0[39u]), vec4(_1620, _1621, _1622, 1.0));
        _1663 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1651) ? 0.0 : (isnan(0.0) ? _1651 : max(0.0, _1651))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1663 = 1.0;
    }
    float _1674;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1665 = dot(vec4(cbModelParam._m0[40u]), vec4(_1620, _1621, _1622, 1.0));
        _1674 = dot(vec3(isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1674 = 1.0;
    }
    float _1678 = (_1674 * cbModelParam._m0[1u].x) + (_1663 * (1.0 - cbModelParam._m0[1u].x));
    float _1688 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _662);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1688 : min(cbModelParam._m0[25u].z, _1688));
    float _1770;
    float _1772;
    float _1774;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1737 = fma(_911, cbModelParam._m0[13u].z, fma(_907, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903)) + cbModelParam._m0[13u].w;
        float _1741 = fma(_911, cbModelParam._m0[14u].z, fma(_907, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903)) + cbModelParam._m0[14u].w;
        float _1745 = fma(_911, cbModelParam._m0[15u].z, fma(_907, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903)) + cbModelParam._m0[15u].w;
        float _1748 = fma(_849, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _847));
        float _1751 = fma(_849, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _847));
        float _1754 = fma(_849, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _847));
        float _1782;
        if (_1748 > 0.0)
        {
            _1782 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1782 = frontier_phi_17_15_ladder;
        }
        float _2007;
        if (_1751 > 0.0)
        {
            _2007 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2007 = frontier_phi_26_22_ladder;
        }
        float _2264;
        if (_1754 > 0.0)
        {
            _2264 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2264 = frontier_phi_38_33_ladder;
        }
        float _2266 = isnan(_2007) ? _1782 : (isnan(_1782) ? _2007 : min(_1782, _2007));
        float _2267 = isnan(_2264) ? _2266 : (isnan(_2266) ? _2264 : min(_2266, _2264));
        float _2271 = (_2267 * _1748) + _1737;
        float _2272 = (_2267 * _1751) + _1741;
        float _2273 = (_2267 * _1754) + _1745;
        float _2274 = _2267 * 9.9999997473787516355514526367188e-05;
        float _2276 = (-1.0) - _2274;
        float _2278 = _2274 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2273 > _2278) || ((_2273 < _2276) || ((_2272 > _2278) || ((_2272 < _2276) || ((_2271 < _2276) || (_2271 > _2278))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2273, cbModelParam._m0[9u].z, fma(_2272, cbModelParam._m0[9u].y, _2271 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2273, cbModelParam._m0[10u].z, fma(_2272, cbModelParam._m0[10u].y, _2271 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2273, cbModelParam._m0[11u].z, fma(_2272, cbModelParam._m0[11u].y, _2271 * cbModelParam._m0[11u].x))), _1689);
            frontier_phi_16_38_ladder = _2401.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2401.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2401.x * cbModelParam._m0[1u].y;
        }
        _1770 = frontier_phi_16_38_ladder_2;
        _1772 = frontier_phi_16_38_ladder_1;
        _1774 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_847, _848, _849), _1689);
        _1770 = _1758.x * cbModelParam._m0[1u].y;
        _1772 = _1758.y * cbModelParam._m0[1u].y;
        _1774 = _1758.z * cbModelParam._m0[1u].y;
    }
    float _1778 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _662);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1778 : min(cbModelParam._m0[25u].w, _1778));
    float _1869;
    float _1871;
    float _1873;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1833 = fma(_911, cbModelParam._m0[21u].z, fma(_907, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903)) + cbModelParam._m0[21u].w;
        float _1837 = fma(_911, cbModelParam._m0[22u].z, fma(_907, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903)) + cbModelParam._m0[22u].w;
        float _1841 = fma(_911, cbModelParam._m0[23u].z, fma(_907, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903)) + cbModelParam._m0[23u].w;
        float _1844 = fma(_849, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _847));
        float _1847 = fma(_849, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _847));
        float _1850 = fma(_849, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _847));
        float _2012;
        if (_1844 > 0.0)
        {
            _2012 = abs((1.0 - _1833) / _1844);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1833 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2012 = frontier_phi_28_24_ladder;
        }
        float _2291;
        if (_1847 > 0.0)
        {
            _2291 = abs((1.0 - _1837) / _1847);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1837 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2291 = frontier_phi_40_35_ladder;
        }
        float _2504;
        if (_1850 > 0.0)
        {
            _2504 = abs((1.0 - _1841) / _1850);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1841 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2504 = frontier_phi_49_46_ladder;
        }
        float _2506 = isnan(_2291) ? _2012 : (isnan(_2012) ? _2291 : min(_2012, _2291));
        float _2507 = isnan(_2504) ? _2506 : (isnan(_2506) ? _2504 : min(_2506, _2504));
        float _2511 = (_2507 * _1844) + _1833;
        float _2512 = (_2507 * _1847) + _1837;
        float _2513 = (_2507 * _1850) + _1841;
        float _2514 = _2507 * 9.9999997473787516355514526367188e-05;
        float _2515 = (-1.0) - _2514;
        float _2517 = _2514 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2513 > _2517) || ((_2513 < _2515) || ((_2512 > _2517) || ((_2512 < _2515) || ((_2511 < _2515) || (_2511 > _2517))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2513, cbModelParam._m0[17u].z, fma(_2512, cbModelParam._m0[17u].y, _2511 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2513, cbModelParam._m0[18u].z, fma(_2512, cbModelParam._m0[18u].y, _2511 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2513, cbModelParam._m0[19u].z, fma(_2512, cbModelParam._m0[19u].y, _2511 * cbModelParam._m0[19u].x))), _1779);
            frontier_phi_25_49_ladder = _2712.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2712.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2712.x * cbModelParam._m0[1u].z;
        }
        _1869 = frontier_phi_25_49_ladder_2;
        _1871 = frontier_phi_25_49_ladder_1;
        _1873 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1853 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_847, _848, _849), _1779);
        _1869 = _1853.x * cbModelParam._m0[1u].z;
        _1871 = _1853.y * cbModelParam._m0[1u].z;
        _1873 = _1853.z * cbModelParam._m0[1u].z;
    }
    float _1886 = (((_874 * _823) + _875) * _839) * ((cbModelParam._m0[1u].w * (_1869 - _1770)) + _1770);
    float _1888 = (((_874 * _825) + _875) * _839) * ((cbModelParam._m0[1u].w * (_1871 - _1772)) + _1772);
    float _1890 = (((_874 * _826) + _875) * _839) * ((cbModelParam._m0[1u].w * (_1873 - _1774)) + _1774);
    float _1893 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1886 * cbSceneParam._m0[89u].x));
    float _1896 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1886 * cbSceneParam._m0[90u].x));
    float _1899 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, _1886 * cbSceneParam._m0[91u].x));
    vec4 _1907 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_759, _760));
    float _1909 = _1907.w;
    float _1921 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1909);
    float _1922 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1909);
    float _1923 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1909);
    uvec4 _1927 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _1929 = _1927.x * 14u;
    uint _1930 = _1929 + 13u;
    float _1937 = _839 + (-1.0);
    float _1942 = (cbLight._m0[_1930].x * _1937) + 1.0;
    float _1943 = (cbLight._m0[_1930].y * _1937) + 1.0;
    float _1944 = (cbLight._m0[_1930].z * _1937) + 1.0;
    float _1945 = (cbLight._m0[_1930].w * _1937) + 1.0;
    uint _1946 = _1929 + 5u;
    float _1952 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1956 = _1929 + 4u;
    float _1966 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1970 = _1929 | 1u;
    float _1981 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_659, _660, _661));
    float _1984 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_659, _660, _661));
    float _4257 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _4268 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1989 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.3183098733425140380859375;
    float _1991 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
    float _1998 = ((cbLight._m0[_1946].x * _1952) * _1991) + (((cbLight._m0[_1956].x * _1921) * _1966) * _1989);
    float _1999 = ((_1952 * cbLight._m0[_1946].y) * _1991) + (((cbLight._m0[_1956].y * _1922) * _1966) * _1989);
    float _2000 = ((_1952 * cbLight._m0[_1946].z) * _1991) + (((cbLight._m0[_1956].z * _1923) * _1966) * _1989);
    uvec4 _2004 = floatBitsToUint(cbLight._m0[_1929 + 12u]);
    bool _2006 = _2004.x == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_2006)
    {
        _2017 = _1998;
        _2019 = _1999;
        _2021 = _2000;
    }
    else
    {
        uint _2025 = _1929 + 6u;
        float _2041 = (dot(vec3(cbLight._m0[_1929 + 2u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2042 = _2041 * _2041;
        float _4279 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2043 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2044 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2017 = (((cbLight._m0[_2025].x * 0.3183098733425140380859375) * _2043) * _2044) + _1998;
        _2019 = (((cbLight._m0[_2025].y * 0.3183098733425140380859375) * _2043) * _2044) + _1999;
        _2021 = (((cbLight._m0[_2025].z * 0.3183098733425140380859375) * _2043) * _2044) + _2000;
    }
    bool _2024 = _2004.y == 0u;
    float _2062;
    float _2064;
    float _2066;
    if (_2024)
    {
        _2062 = _2017;
        _2064 = _2019;
        _2066 = _2021;
    }
    else
    {
        uint _2235 = _1929 + 7u;
        float _2251 = (dot(vec3(cbLight._m0[_1929 + 3u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2252 = _2251 * _2251;
        float _4295 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2253 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2254 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2062 = (((cbLight._m0[_2235].x * 0.3183098733425140380859375) * _2253) * _2254) + _2017;
        _2064 = (((cbLight._m0[_2235].y * 0.3183098733425140380859375) * _2253) * _2254) + _2019;
        _2066 = (((cbLight._m0[_2235].z * 0.3183098733425140380859375) * _2253) * _2254) + _2021;
    }
    uint _2069 = _1929 + 8u;
    float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _662) * 0.949999988079071044921875);
    float _2083 = _2082 * _2082;
    float _2084 = cbLight._m0[_1929].x + _738;
    float _2085 = cbLight._m0[_1929].y + _739;
    float _2086 = cbLight._m0[_1929].z + _740;
    float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
    float _2091 = _2090 * _2084;
    float _2092 = _2090 * _2085;
    float _2093 = _2090 * _2086;
    float _2094 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_1929].xyz));
    float _4311 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _2098 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2099 = dot(vec3(_659, _660, _661), vec3(_2091, _2092, _2093));
    float _4333 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2103 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2091, _2092, _2093));
    float _4344 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2107 = _2083 * _2083;
    float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
    float _2119 = exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0);
    float _2120 = 0.959999978542327880859375 - _820;
    float _2122 = 0.959999978542327880859375 - _821;
    float _2123 = 0.959999978542327880859375 - _822;
    float _2130 = 1.0 - _2083;
    float _2141 = (0.5 / (((_2098 * ((_2097 * _2130) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2130) + _2083) * _2097))) * _2097;
    float _4355 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2143 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
    uint _2157 = _1929 + 9u;
    float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _662) * 0.949999988079071044921875);
    float _2169 = _2168 * _2168;
    float _2170 = cbLight._m0[_1970].x + _738;
    float _2171 = cbLight._m0[_1970].y + _739;
    float _2172 = cbLight._m0[_1970].z + _740;
    float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
    float _2177 = _2176 * _2170;
    float _2178 = _2176 * _2171;
    float _2179 = _2176 * _2172;
    float _2180 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_1970].xyz));
    float _4366 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2184 = dot(vec3(_659, _660, _661), vec3(_2177, _2178, _2179));
    float _4377 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2188 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2177, _2178, _2179));
    float _4388 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2192 = _2169 * _2169;
    float _2196 = ((_2187 * _2187) * (_2192 + (-1.0))) + 1.0;
    float _2203 = exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0);
    float _2210 = 1.0 - _2169;
    float _2220 = (0.5 / (((_2098 * ((_2183 * _2210) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2210) + _2169) * _2183))) * _2183;
    float _4399 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2222 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2192 / ((_2196 * _2196) * 3.141590118408203125));
    float _2232 = (((((_2203 * _2120) + _823) * cbLight._m0[_2157].x) * _2222) * _1952) + ((((cbLight._m0[_2069].x * _1921) * ((_2119 * _2120) + _823)) * _2143) * _1966);
    float _2233 = (((((_2203 * _2122) + _825) * cbLight._m0[_2157].y) * _2222) * _1952) + ((((cbLight._m0[_2069].y * _1922) * ((_2119 * _2122) + _825)) * _2143) * _1966);
    float _2234 = (((((_2203 * _2123) + _826) * cbLight._m0[_2157].z) * _2222) * _1952) + ((((cbLight._m0[_2069].z * _1923) * ((_2119 * _2123) + _826)) * _2143) * _1966);
    float _2296;
    float _2298;
    float _2300;
    if (_2006)
    {
        _2296 = _2232;
        _2298 = _2233;
        _2300 = _2234;
    }
    else
    {
        uint _2302 = _1929 + 2u;
        uint _2306 = _1929 + 10u;
        float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _662) * 0.949999988079071044921875);
        float _2321 = _2320 * _2320;
        float _2322 = cbLight._m0[_2302].x + _738;
        float _2323 = cbLight._m0[_2302].y + _739;
        float _2324 = cbLight._m0[_2302].z + _740;
        float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
        float _2329 = _2328 * _2322;
        float _2330 = _2328 * _2323;
        float _2331 = _2328 * _2324;
        float _2332 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2302].xyz));
        float _4410 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2336 = dot(vec3(_659, _660, _661), vec3(_2329, _2330, _2331));
        float _4421 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2340 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2329, _2330, _2331));
        float _4432 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2344 = _2321 * _2321;
        float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
        float _2355 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
        float _2362 = 1.0 - _2321;
        float _2372 = (0.5 / (((_2098 * ((_2335 * _2362) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2362) + _2321) * _2335))) * _2335;
        float _4443 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2374 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
        float _2375 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2296 = (((((_2355 * _2120) + _823) * cbLight._m0[_2306].x) * _2374) * _2375) + _2232;
        _2298 = (((((_2355 * _2122) + _825) * cbLight._m0[_2306].y) * _2374) * _2375) + _2233;
        _2300 = (((((_2355 * _2123) + _826) * cbLight._m0[_2306].z) * _2374) * _2375) + _2234;
    }
    float _2410;
    float _2412;
    float _2414;
    if (_2024)
    {
        _2410 = _2296;
        _2412 = _2298;
        _2414 = _2300;
    }
    else
    {
        uint _2421 = _1929 + 3u;
        uint _2425 = _1929 + 11u;
        float _2439 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2421].w)) * _662) * 0.949999988079071044921875);
        float _2440 = _2439 * _2439;
        float _2441 = cbLight._m0[_2421].x + _738;
        float _2442 = cbLight._m0[_2421].y + _739;
        float _2443 = cbLight._m0[_2421].z + _740;
        float _2447 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
        float _2448 = _2447 * _2441;
        float _2449 = _2447 * _2442;
        float _2450 = _2447 * _2443;
        float _2451 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2421].xyz));
        float _4459 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2455 = dot(vec3(_659, _660, _661), vec3(_2448, _2449, _2450));
        float _4470 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2458 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2459 = dot(vec3(cbLight._m0[_2421].xyz), vec3(_2448, _2449, _2450));
        float _4481 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2463 = _2440 * _2440;
        float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
        float _2474 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
        float _2481 = 1.0 - _2440;
        float _2491 = (0.5 / (((_2098 * ((_2454 * _2481) + _2440)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2481) + _2440) * _2454))) * _2454;
        float _4492 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2493 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
        float _2494 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2410 = (((((_2474 * _2120) + _823) * cbLight._m0[_2425].x) * _2493) * _2494) + _2296;
        _2412 = (((((_2474 * _2122) + _825) * cbLight._m0[_2425].y) * _2493) * _2494) + _2298;
        _2414 = (((((_2474 * _2123) + _826) * cbLight._m0[_2425].z) * _2493) * _2494) + _2300;
    }
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    if (_1927.y == 0u)
    {
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2569;
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2569;
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2569;
        uvec4 _2584 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2585 = _2584.x;
        uint _2596 = uint((float(_2584.y) * floor(float(uint(cbSceneParam._m0[85u].y * _760) / _2585))) + floor(float(uint(cbSceneParam._m0[85u].x * _759) / _2585)));
        float _2606 = (log2(_2572 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2607 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        uint _2610 = uint(isnan(14.0) ? _2607 : (isnan(_2607) ? 14.0 : min(_2607, 14.0)));
        uvec4 _2615 = texelFetch(g_lightClusterGridBuffer, int(((_2610 << 2u) + (_2596 << 6u)) >> 2u));
        uint _2616 = _2615.x;
        uint _2617 = _2584.z;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        if (((((1u << ((_2617 >> 4u) & 15u)) + 4294967295u) & _2616) == 0u) || ((_2617 & 240u) == 0u))
        {
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
        }
        else
        {
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2726;
            float _2728;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            uint _2876 = 0u;
            uint _2885;
            bool _2886;
            for (;;)
            {
                _2885 = texelFetch(g_lightClassification, int((((_2610 << 5u) + (_2596 << 9u)) + (_2876 << 2u)) >> 2u)).x;
                _2886 = _2885 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2886)
                {
                    frontier_phi_66_pred = _2870;
                    frontier_phi_66_pred_1 = _2875;
                    frontier_phi_66_pred_2 = _2874;
                    frontier_phi_66_pred_3 = _2873;
                    frontier_phi_66_pred_4 = _2872;
                    frontier_phi_66_pred_5 = _2871;
                }
                else
                {
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    uint _3021;
                    _3015 = _2870;
                    _3016 = _2871;
                    _3017 = _2872;
                    _3018 = _2873;
                    _3019 = _2874;
                    _3020 = _2875;
                    _3021 = _2885;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    for (;;)
                    {
                        uint _3025 = uint(findLSB(_3021)) + (_2876 << 5u);
                        uint _3022 = (_3021 + 4294967295u) & _3021;
                        uint _3027 = _3025 * 48u;
                        vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 3u)).x));
                        uint _3047 = (_3025 * 48u) + 4u;
                        vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 3u)).x));
                        uint _3066 = (_3025 * 48u) + 8u;
                        vec3 _3077 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x));
                        float _3081 = _3041.x - _2570;
                        float _3082 = _3041.y - _2571;
                        float _3083 = _3041.z - _2572;
                        float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                        float _3087 = inversesqrt(_3084);
                        float _3088 = _3087 * _3081;
                        float _3089 = _3087 * _3082;
                        float _3090 = _3087 * _3083;
                        float _3091 = dot(vec3(_780, _783, _786), vec3(_3088, _3089, _3090));
                        float _3096 = 1.0 - (_3084 * _3041.w);
                        float _4518 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3097 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3098 = sqrt(_3084) * _3060.w;
                        float _3101 = 1.39999997615814208984375 / (_3098 + 1.39999997615814208984375);
                        float _3102 = _3101 * _3101;
                        float _3105 = ((1.0 - _3102) * _3091) + _3102;
                        float _3108 = _3098 * _3098;
                        float _3112 = ((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3097) / ((_3108 * 0.699999988079071044921875) + 1.0);
                        float _3116 = (-0.0) - _2570;
                        float _3117 = (-0.0) - _2571;
                        float _3118 = (-0.0) - _2572;
                        float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                        float _3123 = _3122 * _3116;
                        float _3124 = _3122 * _3117;
                        float _3125 = _3122 * _3118;
                        float _3133 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                        float _3134 = 1.0 - _855;
                        float _3141 = sqrt(1.0 - ((1.0 - (_3134 * _3134)) * (1.0 - (_3133 * _3133))));
                        float _3142 = _3141 * _3141;
                        float _3143 = _3142 * _3142;
                        float _3144 = _3123 + _3088;
                        float _3145 = _3124 + _3089;
                        float _3146 = _3125 + _3090;
                        float _3150 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
                        float _3154 = dot(vec3(_780, _783, _786), vec3(_3123, _3124, _3125));
                        float _4534 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3157 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3158 = dot(vec3(_780, _783, _786), vec3(_3150 * _3144, _3150 * _3145, _3150 * _3146));
                        float _4545 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3161 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3165 = ((_3161 * _3161) * (_3143 + (-1.0))) + 1.0;
                        float _3166 = _3101 * _3142;
                        float _3167 = _3166 * _3166;
                        float _3170 = ((1.0 - _3167) * _3091) + _3167;
                        float _4556 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3171 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3172 = 1.0 - _3142;
                        float _3182 = (0.5 / (((_3171 * ((_3157 * _3172) + _3142)) + 9.9999999392252902907785028219223e-09) + (((_3171 * _3172) + _3142) * _3157))) * _3171;
                        float _4567 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3193 = (((_3143 * 3.1415927410125732421875) * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) / ((_3165 * _3165) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125))) * _3097;
                        _2945 = (_3112 * _3060.x) + _3018;
                        _2946 = (_3112 * _3060.y) + _3019;
                        _2947 = (_3112 * _3060.z) + _3020;
                        _2942 = (_3193 * _3077.x) + _3015;
                        _2943 = (_3193 * _3077.y) + _3016;
                        _2944 = (_3193 * _3077.z) + _3017;
                        if (_3022 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3015 = _2942;
                            _3016 = _2943;
                            _3017 = _2944;
                            _3018 = _2945;
                            _3019 = _2946;
                            _3020 = _2947;
                            _3021 = _3022;
                        }
                    }
                    frontier_phi_66_pred = _2942;
                    frontier_phi_66_pred_1 = _2947;
                    frontier_phi_66_pred_2 = _2946;
                    frontier_phi_66_pred_3 = _2945;
                    frontier_phi_66_pred_4 = _2944;
                    frontier_phi_66_pred_5 = _2943;
                }
                _2718 = frontier_phi_66_pred;
                _2728 = frontier_phi_66_pred_1;
                _2726 = frontier_phi_66_pred_2;
                _2724 = frontier_phi_66_pred_3;
                _2722 = frontier_phi_66_pred_4;
                _2720 = frontier_phi_66_pred_5;
                uint _2877 = _2876 + 1u;
                if (_2877 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2870 = _2718;
                    _2871 = _2720;
                    _2872 = _2722;
                    _2873 = _2724;
                    _2874 = _2726;
                    _2875 = _2728;
                    _2876 = _2877;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
        }
        uvec4 _2731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2732 = _2731.z;
        uint _2734 = (_2732 >> 8u) & 15u;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        if (((4294967295u << _2734) & _2616) == 0u)
        {
            _2838 = _2717;
            _2840 = _2719;
            _2842 = _2721;
            _2844 = _2723;
            _2846 = _2725;
            _2848 = _2727;
        }
        else
        {
            float _2863 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
            float _2864 = _2863 * _2570;
            float _2865 = _2863 * _2571;
            float _2866 = _2863 * _2572;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2734 < ((_2732 >> 12u) & 15u))
            {
                float _2839;
                float _2841;
                float _2843;
                float _2845;
                float _2847;
                float _2849;
                float _2998 = _2717;
                float _2999 = _2719;
                float _3000 = _2721;
                float _3001 = _2723;
                float _3002 = _2725;
                float _3003 = _2727;
                uint _3004 = _2734;
                uint _3013;
                bool _3014;
                for (;;)
                {
                    _3013 = texelFetch(g_lightClassification, int((((_2610 << 5u) + (_2596 << 9u)) + (_3004 << 2u)) >> 2u)).x;
                    _3014 = _3013 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3014)
                    {
                        frontier_phi_77_pred = _3003;
                        frontier_phi_77_pred_1 = _3002;
                        frontier_phi_77_pred_2 = _3001;
                        frontier_phi_77_pred_3 = _3000;
                        frontier_phi_77_pred_4 = _2999;
                        frontier_phi_77_pred_5 = _2998;
                    }
                    else
                    {
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3220 = _2998;
                        float _3221 = _2999;
                        float _3222 = _3000;
                        float _3223 = _3001;
                        float _3224 = _3002;
                        float _3225 = _3003;
                        uint _3226 = _3013;
                        uint _3227;
                        vec4 _3252;
                        float _3253;
                        vec4 _3268;
                        vec3 _3280;
                        vec4 _3295;
                        vec4 _3310;
                        float _3356;
                        bool _3357;
                        for (;;)
                        {
                            uint _3237 = ((_3004 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3226));
                            _3227 = (_3226 + 4294967295u) & _3226;
                            uint _3239 = _3237 * 40u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            _3253 = _3252.w;
                            uint _3255 = (_3237 * 40u) + 4u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3270 = (_3237 * 40u) + 8u;
                            _3280 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x));
                            uint _3282 = (_3237 * 40u) + 16u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3237 * 40u) + 20u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3312 = (_3237 * 40u) + 24u;
                            vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3331 = (_3237 * 40u) + 28u;
                            vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            _3356 = fma(_2572, _3344.z, fma(_2571, _3344.y, _3344.x * _2570)) + _3344.w;
                            _3357 = !((fma(_2572, _3325.z, fma(_2571, _3325.y, _3325.x * _2570)) + _3325.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3357)
                            {
                                float _3384 = _3252.x - _2570;
                                float _3385 = _3252.y - _2571;
                                float _3386 = _3252.z - _2572;
                                float _3387 = dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386));
                                float _3390 = inversesqrt(_3387);
                                float _3391 = _3390 * _3384;
                                float _3392 = _3390 * _3385;
                                float _3393 = _3390 * _3386;
                                float _3397 = 1.0 - (_3387 / (_3253 * _3253));
                                float _4578 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3402 = sqrt(_3387) * _3268.w;
                                float _3404 = 1.39999997615814208984375 / (_3402 + 1.39999997615814208984375);
                                float _3405 = _3404 * _3404;
                                float _3408 = ((1.0 - _3405) * dot(vec3(_3391, _3392, _3393), vec3(_780, _783, _786))) + _3405;
                                float _3411 = _3402 * _3402;
                                float _3415 = (fma(_2572, _3295.z, fma(_2571, _3295.y, _3295.x * _2570)) + _3295.w) / _3356;
                                float _3416 = (fma(_2572, _3310.z, fma(_2571, _3310.y, _3310.x * _2570)) + _3310.w) / _3356;
                                float _3420 = 1.0 - dot(vec2(_3415, _3416), vec2(_3415, _3416));
                                float _4594 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3422 = _3421 * (((isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))) * _3398) / ((_3411 * 0.699999988079071044921875) + 1.0));
                                float _3434 = exp2(log2(1.0 / ((_3411 * 3.5) + 5.0)) * 0.25);
                                float _3435 = 1.0 - _855;
                                float _3442 = sqrt(1.0 - ((1.0 - (_3435 * _3435)) * (1.0 - (_3434 * _3434))));
                                float _3443 = _3442 * _3442;
                                float _3444 = _3443 * _3443;
                                float _3445 = _3391 - _2864;
                                float _3446 = _3392 - _2865;
                                float _3447 = _3393 - _2866;
                                float _3451 = inversesqrt(dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447)));
                                float _3455 = dot(vec3(_780, _783, _786), vec3((-0.0) - _2864, (-0.0) - _2865, (-0.0) - _2866));
                                float _4605 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3458 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3459 = dot(vec3(_780, _783, _786), vec3(_3451 * _3445, _3451 * _3446, _3451 * _3447));
                                float _4616 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3462 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3466 = ((_3462 * _3462) * (_3444 + (-1.0))) + 1.0;
                                float _3467 = _3404 * _3443;
                                float _3468 = _3467 * _3467;
                                float _3474 = ((1.0 - _3468) * dot(vec3(_780, _783, _786), vec3(_3391, _3392, _3393))) + _3468;
                                float _4627 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3476 = 1.0 - _3443;
                                float _3486 = (0.5 / (((_3475 * ((_3458 * _3476) + _3443)) + 9.9999999392252902907785028219223e-09) + (((_3475 * _3476) + _3443) * _3458))) * _3475;
                                float _4638 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3496 = (_3421 * _3398) * (((_3444 * 3.1415927410125732421875) * (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) / ((_3466 * _3466) * ((_3411 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3422 * _3268.y;
                                frontier_phi_83_pred_1 = _3422 * _3268.x;
                                frontier_phi_83_pred_2 = _3496 * _3280.z;
                                frontier_phi_83_pred_3 = _3496 * _3280.y;
                                frontier_phi_83_pred_4 = _3496 * _3280.x;
                                frontier_phi_83_pred_5 = _3422 * _3268.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3504 = frontier_phi_83_pred;
                            _3503 = frontier_phi_83_pred_1;
                            _3502 = frontier_phi_83_pred_2;
                            _3501 = frontier_phi_83_pred_3;
                            _3500 = frontier_phi_83_pred_4;
                            _3505 = frontier_phi_83_pred_5;
                            _3210 = _3503 + _3223;
                            _3211 = _3504 + _3224;
                            _3212 = _3505 + _3225;
                            _3207 = _3500 + _3220;
                            _3208 = _3501 + _3221;
                            _3209 = _3502 + _3222;
                            if (_3227 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3227;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3212;
                        frontier_phi_77_pred_1 = _3211;
                        frontier_phi_77_pred_2 = _3210;
                        frontier_phi_77_pred_3 = _3209;
                        frontier_phi_77_pred_4 = _3208;
                        frontier_phi_77_pred_5 = _3207;
                    }
                    _2849 = frontier_phi_77_pred;
                    _2847 = frontier_phi_77_pred_1;
                    _2845 = frontier_phi_77_pred_2;
                    _2843 = frontier_phi_77_pred_3;
                    _2841 = frontier_phi_77_pred_4;
                    _2839 = frontier_phi_77_pred_5;
                    uint _3005 = _3004 + 1u;
                    if (_3005 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2998 = _2839;
                        _2999 = _2841;
                        _3000 = _2843;
                        _3001 = _2845;
                        _3002 = _2847;
                        _3003 = _2849;
                        _3004 = _3005;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2843;
                frontier_phi_58_59_ladder_1 = _2849;
                frontier_phi_58_59_ladder_2 = _2847;
                frontier_phi_58_59_ladder_3 = _2845;
                frontier_phi_58_59_ladder_4 = _2841;
                frontier_phi_58_59_ladder_5 = _2839;
            }
            else
            {
                frontier_phi_58_59_ladder = _2721;
                frontier_phi_58_59_ladder_1 = _2727;
                frontier_phi_58_59_ladder_2 = _2725;
                frontier_phi_58_59_ladder_3 = _2723;
                frontier_phi_58_59_ladder_4 = _2719;
                frontier_phi_58_59_ladder_5 = _2717;
            }
            _2838 = frontier_phi_58_59_ladder_5;
            _2840 = frontier_phi_58_59_ladder_4;
            _2842 = frontier_phi_58_59_ladder;
            _2844 = frontier_phi_58_59_ladder_3;
            _2846 = frontier_phi_58_59_ladder_2;
            _2848 = frontier_phi_58_59_ladder_1;
        }
        float _2853 = isnan(1.0) ? _839 : (isnan(_839) ? 1.0 : min(_839, 1.0));
        _2629 = (_2853 * _2844) + _2062;
        _2631 = (_2853 * _2846) + _2064;
        _2633 = (_2853 * _2848) + _2066;
        _2635 = ((_2838 * _823) * _2853) + _2410;
        _2637 = ((_2840 * _825) * _2853) + _2412;
        _2639 = ((_2842 * _826) * _2853) + _2414;
    }
    else
    {
        _2629 = _2062;
        _2631 = _2064;
        _2633 = _2066;
        _2635 = _2410;
        _2637 = _2412;
        _2639 = _2414;
    }
    float _4654 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4665 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4676 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _2656 = ((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2629 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _839))) + ((_2635 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1678)) * cbPerFrame._m0[3u].x);
    float _2657 = ((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2631 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _839))) + ((_2637 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1678)) * cbPerFrame._m0[3u].x);
    float _2658 = ((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2633 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _839))) + ((_2639 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1678)) * cbPerFrame._m0[3u].x);
    uint _2659 = _271 + 6u;
    float _2667 = _759 / cbSceneParam._m0[86u].x;
    float _2668 = _760 / cbSceneParam._m0[86u].y;
    vec4 _2682 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2667, _2668, (log2((isnan(cbSceneParam._m0[77u].w) ? _681 : (isnan(_681) ? cbSceneParam._m0[77u].w : min(_681, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2684 = _2682.x;
    float _2685 = _2682.y;
    float _2686 = _2682.z;
    float _2687 = _2682.w;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_681 > cbSceneParam._m0[78u].w)
    {
        float _2742 = isnan(_681) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _681 : min(cbSceneParam._m0[80u].w, _681));
        float _2743 = _2742 / _681;
        float _2754 = _2743 * _731;
        float _2755 = _732 * _2743;
        float _2756 = (-0.0) - _2755;
        float _2758 = _2743 * _733;
        float _2760 = (cbSceneParam._m0[77u].w * _2756) / _2742;
        float _2761 = _2760 + cbSceneParam._m0[79u].w;
        float _2762 = cbSceneParam._m0[79u].w - _2755;
        float _2768 = sqrt(((_2754 * _2754) + (_2755 * _2755)) + (_2758 * _2758));
        float _2771 = (1.0 - (cbSceneParam._m0[77u].w / _2742)) * _2768;
        float _2776 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2778 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2955;
        if (abs((_2756 - _2760) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2955 = ((((_2761 > 0.0) ? exp2(_2776 * _2761) : (2.0 - exp2(_2778 * _2761))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2771;
        }
        else
        {
            float _2899 = 1.0 / cbSceneParam._m0[80u].x;
            float _2900 = isnan(_2762) ? _2761 : (isnan(_2761) ? _2762 : max(_2761, _2762));
            float _2901 = isnan(_2762) ? _2761 : (isnan(_2761) ? _2762 : min(_2761, _2762));
            float _2910 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : min(_2900, 0.0));
            float _2911 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : min(_2901, 0.0));
            _2955 = ((abs(_2768 / _2756) * cbSceneParam._m0[80u].y) * ((((_2910 - _2911) * 2.0) - ((exp2(_2776 * (isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0)))) - exp2(_2776 * (isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))))) * _2899)) - ((exp2(_2778 * _2910) - exp2(_2778 * _2911)) * _2899))) + (_2771 * cbSceneParam._m0[80u].z);
        }
        vec4 _2957 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2667, _2668, 1.0), 0.0);
        float _2966 = exp2((_2955 * (-1.44269502162933349609375)) * (1.0 - _2957.w));
        float _2967 = log2(_2966);
        float _2983 = log2(_2687);
        _2780 = (exp2(_2983 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].x)) * _2957.x) / cbSceneParam._m0[78u].x)) + _2684;
        _2782 = (exp2(_2983 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].y)) * _2957.y) / cbSceneParam._m0[78u].y)) + _2685;
        _2784 = (exp2(_2983 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].z)) * _2957.z) / cbSceneParam._m0[78u].z)) + _2686;
        _2786 = _2966 * _2687;
    }
    else
    {
        _2780 = _2684;
        _2782 = _2685;
        _2784 = _2686;
        _2786 = _2687;
    }
    bool _2993;
    vec4 _2796;
    vec4 _2818;
    float _2820;
    float _2824;
    float _2825;
    float _2826;
    float _2827;
    bool _2837;
    for (;;)
    {
        _2796 = cbMatDynParam._m0[0u];
        float _2798 = roundEven(_2796.y);
        bool _2799 = _2798 == 3.0;
        float _2800 = log2(_2786);
        float _2807 = exp2(_2800 * cbSceneParam._m0[78u].x) * _2656;
        float _2808 = exp2(_2800 * cbSceneParam._m0[78u].y) * _2657;
        float _2809 = exp2(_2800 * cbSceneParam._m0[78u].z) * _2658;
        float _2816 = _747 + (-0.5);
        _2818 = cbMtdParam._m0[1u];
        _2820 = _2818.y * _2816;
        float _2823 = (_2798 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2824 = _2823 * (_2799 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2780)));
        _2825 = _2823 * (_2799 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2782)));
        _2826 = _2823 * (_2799 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2784)));
        _2827 = _2816 * 0.999000012874603271484375;
        _2837 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2837)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _2827) < 0.5)
            {
                _2993 = true;
                break;
            }
        }
        uint _2934 = _799 + uint(_2796.w);
        if ((cbInstanceData._m0[_2934].w < 1.0) && ((cbInstanceData._m0[_2934].w + _2827) < 0.5))
        {
            _2993 = true;
            break;
        }
        if ((_2820 + 1.0) < _2818.x)
        {
            _2993 = true;
            break;
        }
        _2993 = false;
        break;
    }
    float _3198;
    if (_2993)
    {
        discard_state = true;
        _3198 = 0.0;
    }
    else
    {
        _3198 = cbInstanceData._m0[_2659].w;
    }
    SV_Target.x = _2824;
    SV_Target.y = _2825;
    SV_Target.z = _2826;
    SV_Target.w = _3198;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2659].w;
    discard_exit();
}


