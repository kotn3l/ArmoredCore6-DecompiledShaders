#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1296;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3646 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _459 = _455.z;
    float _468 = ((_438.z - _459) * _390) + _459;
    float _471 = ((((_438.x - _457) * _390) + _457) * 2.0) + (-1.0);
    float _473 = ((((_438.y - _458) * _390) + _458) * 2.0) + (-1.0);
    float _474 = dot(vec2(_471, _473), vec2(_471, _473));
    float _3657 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _510 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _512 = _510.x;
    float _513 = 1.0 - _512;
    float _519 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _522 = ((isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : min(_519, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _531 = (_522 - ((((((_512 - _513) * cbMtdParam._m0[24u].z) + _513) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _522))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3678 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _539 = (_532 * ((_418.x * cbMtdParam._m0[18u].x) - _397)) + _397;
    float _540 = (_532 * ((_418.y * cbMtdParam._m0[18u].y) - _398)) + _398;
    float _541 = (_532 * ((_418.z * cbMtdParam._m0[18u].z) - _399)) + _399;
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _555 = _553.x;
    float _556 = 1.0 - _555;
    float _583 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_555 - _556) * cbMtdParam._m0[24u].w) + _556) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3689 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _592 = ((((cbMtdParam._m0[10u].x - _539) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _584) + _539;
    float _593 = ((((cbMtdParam._m0[10u].y - _540) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _584) + _540;
    float _594 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _541)) * _584) + _541;
    vec4 _620 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _622 = _620.x;
    float _640 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _622) * _390) + _622;
    float _644 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _640) * cbMtdParam._m0[19u].z) + _640;
    float _646 = _644 - (_644 * _532);
    float _648 = _646 - (_646 * _584);
    vec4 _662 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _669 = (_662.x * 2.0) + (-1.0);
    float _670 = (_662.y * 2.0) + (-1.0);
    float _671 = dot(vec2(_669, _670), vec2(_669, _670));
    float _3700 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _679 = (_532 * (_662.z - _468)) + _468;
    float _682 = ((cbMtdParam._m0[23u].y - _679) * _584) + _679;
    vec4 _701 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _707 = (_701.x * 2.0) + (-1.0);
    float _708 = (_701.y * 2.0) + (-1.0);
    float _709 = dot(vec2(_707, _708), vec2(_707, _708));
    float _3711 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _726 = (((_669 - _471) + (cbMtdParam._m0[21u].x * _471)) * _532) + _471;
    float _727 = (((_670 - _473) + (cbMtdParam._m0[21u].x * _473)) * _532) + _473;
    float _728 = (_532 * (sqrt(1.0 - (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) - _479)) + _479;
    float _739 = (((_707 - _726) + (_726 * cbMtdParam._m0[22u].z)) * _584) + _726;
    float _740 = (((_708 - _727) + (_727 * cbMtdParam._m0[22u].z)) * _584) + _727;
    float _741 = ((sqrt(1.0 - (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) - _728) * _584) + _728;
    float _743 = cbMtdParam._m0[22u].x + _492.w;
    float _746 = fma(_741, _240 * NORMAL.x, fma(_740, _247 * TANGENT.x, (_233 * _225) * _739));
    float _749 = fma(_741, _240 * NORMAL.y, fma(_740, _247 * TANGENT.y, (_233 * _226) * _739));
    float _752 = fma(_741, _240 * NORMAL.z, fma(_740, _247 * TANGENT.z, (_233 * _227) * _739));
    float _756 = inversesqrt(dot(vec3(_746, _749, _752), vec3(_746, _749, _752)));
    float _757 = _756 * _746;
    float _758 = _756 * _749;
    float _759 = _756 * _752;
    float _3722 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _760 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _3744 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _3755 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3766 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3777 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _765 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _779 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _829 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _819);
    float _830 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _819);
    float _831 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _819);
    float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
    float _836 = _829 * _835;
    float _837 = _830 * _835;
    float _838 = _831 * _835;
    float _844 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _845 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _863 = fma(_759, cbSceneParam._m0[5u].z, fma(_758, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _757));
    float _866 = fma(_759, cbSceneParam._m0[6u].z, fma(_758, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _757));
    float _869 = fma(_759, cbSceneParam._m0[7u].z, fma(_758, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _757));
    uint _883 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _889 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) * cbInstanceData._m0[_883].x;
    float _890 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * cbInstanceData._m0[_883].y;
    float _891 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * cbInstanceData._m0[_883].z;
    float _3788 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _895 = 1.0 - _765;
    float _896 = _892 * _895;
    float _897 = _893 * _895;
    float _898 = _894 * _895;
    float _903 = (_892 + (-0.039999999105930328369140625)) * _765;
    float _904 = (_893 + (-0.039999999105930328369140625)) * _765;
    float _905 = (_894 + (-0.039999999105930328369140625)) * _765;
    float _906 = _903 + 0.039999999105930328369140625;
    float _908 = _904 + 0.039999999105930328369140625;
    float _909 = _905 + 0.039999999105930328369140625;
    vec4 _918 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _844, cbSceneParam._m0[86u].y * _845));
    float _922 = ((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * TEXCOORD_5.w) * _918.x;
    float _923 = dot(vec3(_757, _758, _759), vec3(_836, _837, _838));
    float _926 = _923 * 2.0;
    float _930 = (_926 * _757) - _836;
    float _931 = (_926 * _758) - _837;
    float _932 = (_926 * _759) - _838;
    float _936 = abs(dot(vec3(_836, _837, _838), vec3(_757, _758, _759)));
    float _3821 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _938 = sqrt(_760);
    float _951 = exp2((_938 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_938 * 3.0));
    float _957 = (1.0 - _951) * ((_938 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _958 = _951 * _938;
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1295;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1020 = fma(_994, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _986));
        float _1024 = fma(_994, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _986));
        float _1028 = fma(_994, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _986));
        float _1053 = _986 + _757;
        float _1054 = _990 + _758;
        float _1055 = _994 + _759;
        float _1065 = fma(_1055, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1053)) - _1020;
        float _1066 = fma(_1055, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1053)) - _1024;
        float _1067 = fma(_1055, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1053)) - _1028;
        float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
        float _1084 = ((_1071 * _1065) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1020 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1071 * _1066) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1024 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1071 * _1067) / cbModelParam._m0[34u].z) + ((((((_1028 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        float _1123 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1089.x + (-0.5));
        float _1125 = _1123 * (_1089.y + (-0.5));
        float _1126 = _1123 * (_1089.z + (-0.5));
        float _1133 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1096.x + (-0.5));
        float _1135 = _1133 * (_1096.y + (-0.5));
        float _1136 = _1133 * (_1096.z + (-0.5));
        float _1143 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1103.x + (-0.5));
        float _1145 = _1143 * (_1103.y + (-0.5));
        float _1146 = _1143 * (_1103.z + (-0.5));
        float _1153 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1110.x + (-0.5));
        float _1155 = _1153 * (_1110.y + (-0.5));
        float _1156 = _1153 * (_1110.z + (-0.5));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = _1124 * 0.5;
        float _1161 = _1134 * 0.5;
        float _1162 = _1144 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1177 = (dot(vec3(_757, _758, _759), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1187 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3869 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1189 + 1.0))) + _1194) * _1157;
        float _1204 = _1125 * 0.5;
        float _1205 = _1135 * 0.5;
        float _1206 = _1145 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_757, _758, _759), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3902 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1231 + 1.0))) + _1236) * _1158;
        float _1246 = _1126 * 0.5;
        float _1247 = _1136 * 0.5;
        float _1248 = _1146 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_757, _758, _759), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3935 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1273 + 1.0))) + _1278) * _1159;
        _1295 = _1126;
        _1297 = _1125;
        _1298 = _1124;
        _1299 = _1136;
        _1300 = _1135;
        _1301 = _1134;
        _1302 = _1146;
        _1303 = _1145;
        _1304 = _1144;
        _1305 = _1159;
        _1306 = _1158;
        _1307 = _1157;
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
    }
    else
    {
        _1295 = _1296;
        _1297 = _1296;
        _1298 = _1296;
        _1299 = _1296;
        _1300 = _1296;
        _1301 = _1296;
        _1302 = _1296;
        _1303 = _1296;
        _1304 = _1296;
        _1305 = _1296;
        _1306 = _1296;
        _1307 = _1296;
        _1308 = 0.0;
        _1309 = 0.0;
        _1310 = 0.0;
    }
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1335 = fma(_994, cbModelParam._m0[30u].z, fma(_990, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986));
        float _1339 = fma(_994, cbModelParam._m0[31u].z, fma(_990, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986));
        float _1343 = fma(_994, cbModelParam._m0[32u].z, fma(_990, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986));
        float _1366 = _986 + _757;
        float _1367 = _990 + _758;
        float _1368 = _994 + _759;
        float _1378 = fma(_1368, cbModelParam._m0[30u].z, fma(_1367, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1366)) - _1335;
        float _1379 = fma(_1368, cbModelParam._m0[31u].z, fma(_1367, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1366)) - _1339;
        float _1380 = fma(_1368, cbModelParam._m0[32u].z, fma(_1367, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1366)) - _1343;
        float _1384 = inversesqrt(dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380)));
        float _1397 = ((_1384 * _1378) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1335 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1384 * _1379) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1339 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1384 * _1380) / cbModelParam._m0[35u].z) + ((((((_1343 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        float _1434 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1401.x + (-0.5));
        float _1436 = _1434 * (_1401.y + (-0.5));
        float _1437 = _1434 * (_1401.z + (-0.5));
        float _1444 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1408.x + (-0.5));
        float _1446 = _1444 * (_1408.y + (-0.5));
        float _1447 = _1444 * (_1408.z + (-0.5));
        float _1454 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1415.x + (-0.5));
        float _1456 = _1454 * (_1415.y + (-0.5));
        float _1457 = _1454 * (_1415.z + (-0.5));
        float _1464 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1422.x + (-0.5));
        float _1466 = _1464 * (_1422.y + (-0.5));
        float _1467 = _1464 * (_1422.z + (-0.5));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = _1435 * 0.5;
        float _1472 = _1445 * 0.5;
        float _1473 = _1455 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_757, _758, _759), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _3998 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1498 + 1.0))) + _1503) * _1468;
        float _1513 = _1436 * 0.5;
        float _1514 = _1446 * 0.5;
        float _1515 = _1456 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_757, _758, _759), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4031 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1540 + 1.0))) + _1545) * _1469;
        float _1555 = _1437 * 0.5;
        float _1556 = _1447 * 0.5;
        float _1557 = _1457 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_757, _758, _759), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4064 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1582 + 1.0))) + _1587) * _1470;
        _1604 = _1437;
        _1605 = _1436;
        _1606 = _1435;
        _1607 = _1447;
        _1608 = _1446;
        _1609 = _1445;
        _1610 = _1457;
        _1611 = _1456;
        _1612 = _1455;
        _1613 = _1470;
        _1614 = _1469;
        _1615 = _1468;
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
    }
    else
    {
        _1604 = _1296;
        _1605 = _1296;
        _1606 = _1296;
        _1607 = _1296;
        _1608 = _1296;
        _1609 = _1296;
        _1610 = _1296;
        _1611 = _1296;
        _1612 = _1296;
        _1613 = _1296;
        _1614 = _1296;
        _1615 = _1296;
        _1616 = 0.0;
        _1617 = 0.0;
        _1618 = 0.0;
    }
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1308)) + _1308;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1309)) + _1309;
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1310)) + _1310;
    float _1651 = fma(_1630, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1628 * cbSceneParam._m0[89u].x));
    float _1654 = fma(_1630, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1628 * cbSceneParam._m0[90u].x));
    float _1657 = fma(_1630, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1628));
    float _1672 = _930 * 0.5;
    float _1673 = _931 * 0.5;
    float _1674 = _932 * 0.5;
    float _1675 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1678 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1681 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1715;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1688 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1295, _1299, _1302, _1305));
        float _1692 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1297, _1300, _1303, _1306));
        float _1696 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1703 = dot(vec4(cbModelParam._m0[39u]), vec4(_1672, _1673, _1674, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1703) ? 0.0 : (isnan(0.0) ? _1703 : max(0.0, _1703))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1726;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1717 = dot(vec4(cbModelParam._m0[40u]), vec4(_1672, _1673, _1674, 1.0));
        _1726 = dot(vec3(isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1717) ? 0.0 : (isnan(0.0) ? _1717 : max(0.0, _1717))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1726 = 1.0;
    }
    float _1730 = (_1726 * cbModelParam._m0[1u].x) + (_1715 * (1.0 - cbModelParam._m0[1u].x));
    float _1740 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _760);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1740 : min(cbModelParam._m0[25u].z, _1740));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1788 = fma(_994, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _986)) + cbModelParam._m0[13u].w;
        float _1792 = fma(_994, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _986)) + cbModelParam._m0[14u].w;
        float _1796 = fma(_994, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _986)) + cbModelParam._m0[15u].w;
        float _1799 = fma(_932, cbModelParam._m0[13u].z, fma(_931, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930));
        float _1802 = fma(_932, cbModelParam._m0[14u].z, fma(_931, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930));
        float _1805 = fma(_932, cbModelParam._m0[15u].z, fma(_931, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930));
        float _1833;
        if (_1799 > 0.0)
        {
            _1833 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1833 = frontier_phi_14_12_ladder;
        }
        float _2056;
        if (_1802 > 0.0)
        {
            _2056 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2056 = frontier_phi_23_19_ladder;
        }
        float _2313;
        if (_1805 > 0.0)
        {
            _2313 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2313 = frontier_phi_35_30_ladder;
        }
        float _2315 = isnan(_2056) ? _1833 : (isnan(_1833) ? _2056 : min(_1833, _2056));
        float _2316 = isnan(_2313) ? _2315 : (isnan(_2315) ? _2313 : min(_2315, _2313));
        float _2320 = (_2316 * _1799) + _1788;
        float _2321 = (_2316 * _1802) + _1792;
        float _2322 = (_2316 * _1805) + _1796;
        float _2323 = _2316 * 9.9999997473787516355514526367188e-05;
        float _2325 = (-1.0) - _2323;
        float _2327 = _2323 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2322 > _2327) || ((_2322 < _2325) || ((_2321 > _2327) || ((_2321 < _2325) || ((_2320 < _2325) || (_2320 > _2327))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2450 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2322, cbModelParam._m0[9u].z, fma(_2321, cbModelParam._m0[9u].y, _2320 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2322, cbModelParam._m0[10u].z, fma(_2321, cbModelParam._m0[10u].y, _2320 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2322, cbModelParam._m0[11u].z, fma(_2321, cbModelParam._m0[11u].y, _2320 * cbModelParam._m0[11u].x))), _1741);
            frontier_phi_13_35_ladder = _2450.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2450.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2450.x * cbModelParam._m0[1u].y;
        }
        _1821 = frontier_phi_13_35_ladder_2;
        _1823 = frontier_phi_13_35_ladder_1;
        _1825 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_930, _931, _932), _1741);
        _1821 = _1809.x * cbModelParam._m0[1u].y;
        _1823 = _1809.y * cbModelParam._m0[1u].y;
        _1825 = _1809.z * cbModelParam._m0[1u].y;
    }
    float _1829 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _760);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1829 : min(cbModelParam._m0[25u].w, _1829));
    float _1919;
    float _1921;
    float _1923;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1883 = fma(_994, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _986)) + cbModelParam._m0[21u].w;
        float _1887 = fma(_994, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _986)) + cbModelParam._m0[22u].w;
        float _1891 = fma(_994, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _986)) + cbModelParam._m0[23u].w;
        float _1894 = fma(_932, cbModelParam._m0[21u].z, fma(_931, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930));
        float _1897 = fma(_932, cbModelParam._m0[22u].z, fma(_931, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930));
        float _1900 = fma(_932, cbModelParam._m0[23u].z, fma(_931, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930));
        float _2061;
        if (_1894 > 0.0)
        {
            _2061 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2061 = frontier_phi_25_21_ladder;
        }
        float _2340;
        if (_1897 > 0.0)
        {
            _2340 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2340 = frontier_phi_37_32_ladder;
        }
        float _2553;
        if (_1900 > 0.0)
        {
            _2553 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2553 = frontier_phi_46_43_ladder;
        }
        float _2555 = isnan(_2340) ? _2061 : (isnan(_2061) ? _2340 : min(_2061, _2340));
        float _2556 = isnan(_2553) ? _2555 : (isnan(_2555) ? _2553 : min(_2555, _2553));
        float _2560 = (_2556 * _1894) + _1883;
        float _2561 = (_2556 * _1897) + _1887;
        float _2562 = (_2556 * _1900) + _1891;
        float _2563 = _2556 * 9.9999997473787516355514526367188e-05;
        float _2564 = (-1.0) - _2563;
        float _2566 = _2563 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2562 > _2566) || ((_2562 < _2564) || ((_2561 > _2566) || ((_2561 < _2564) || ((_2560 < _2564) || (_2560 > _2566))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2761 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2562, cbModelParam._m0[17u].z, fma(_2561, cbModelParam._m0[17u].y, _2560 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2562, cbModelParam._m0[18u].z, fma(_2561, cbModelParam._m0[18u].y, _2560 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2562, cbModelParam._m0[19u].z, fma(_2561, cbModelParam._m0[19u].y, _2560 * cbModelParam._m0[19u].x))), _1830);
            frontier_phi_22_46_ladder = _2761.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2761.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2761.x * cbModelParam._m0[1u].z;
        }
        _1919 = frontier_phi_22_46_ladder_2;
        _1921 = frontier_phi_22_46_ladder_1;
        _1923 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1903 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_930, _931, _932), _1830);
        _1919 = _1903.x * cbModelParam._m0[1u].z;
        _1921 = _1903.y * cbModelParam._m0[1u].z;
        _1923 = _1903.z * cbModelParam._m0[1u].z;
    }
    float _1936 = (((_957 * _906) + _958) * _922) * ((cbModelParam._m0[1u].w * (_1919 - _1821)) + _1821);
    float _1938 = (((_957 * _908) + _958) * _922) * ((cbModelParam._m0[1u].w * (_1921 - _1823)) + _1823);
    float _1940 = (((_957 * _909) + _958) * _922) * ((cbModelParam._m0[1u].w * (_1923 - _1825)) + _1825);
    float _1943 = fma(_1940, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1936 * cbSceneParam._m0[89u].x));
    float _1946 = fma(_1940, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1936 * cbSceneParam._m0[90u].x));
    float _1949 = fma(_1940, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, _1936 * cbSceneParam._m0[91u].x));
    vec4 _1957 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_844, _845));
    float _1959 = _1957.w;
    float _1971 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1959);
    float _1972 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1959);
    float _1973 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1959);
    uvec4 _1977 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _1979 = _1977.x * 14u;
    uint _1980 = _1979 + 13u;
    float _1987 = _922 + (-1.0);
    float _1992 = (cbLight._m0[_1980].x * _1987) + 1.0;
    float _1993 = (cbLight._m0[_1980].y * _1987) + 1.0;
    float _1994 = (cbLight._m0[_1980].z * _1987) + 1.0;
    float _1995 = (cbLight._m0[_1980].w * _1987) + 1.0;
    uint _1996 = _1979 + 5u;
    float _2002 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
    uint _2006 = _1979 + 4u;
    float _2015 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2019 = _1979 | 1u;
    float _2030 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_757, _758, _759));
    float _2033 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_757, _758, _759));
    float _4200 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _4211 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2038 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * 0.3183098733425140380859375;
    float _2040 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.3183098733425140380859375;
    float _2047 = ((cbLight._m0[_1996].x * _2002) * _2040) + (((cbLight._m0[_2006].x * _1971) * _2015) * _2038);
    float _2048 = ((_2002 * cbLight._m0[_1996].y) * _2040) + (((cbLight._m0[_2006].y * _1972) * _2015) * _2038);
    float _2049 = ((_2002 * cbLight._m0[_1996].z) * _2040) + (((cbLight._m0[_2006].z * _1973) * _2015) * _2038);
    uvec4 _2053 = floatBitsToUint(cbLight._m0[_1979 + 12u]);
    bool _2055 = _2053.x == 0u;
    float _2066;
    float _2068;
    float _2070;
    if (_2055)
    {
        _2066 = _2047;
        _2068 = _2048;
        _2070 = _2049;
    }
    else
    {
        uint _2074 = _1979 + 6u;
        float _2090 = (dot(vec3(cbLight._m0[_1979 + 2u].xyz), vec3(_757, _758, _759)) * 0.5) + 0.5;
        float _2091 = _2090 * _2090;
        float _4222 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2092 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2093 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2066 = (((cbLight._m0[_2074].x * 0.3183098733425140380859375) * _2092) * _2093) + _2047;
        _2068 = (((cbLight._m0[_2074].y * 0.3183098733425140380859375) * _2092) * _2093) + _2048;
        _2070 = (((cbLight._m0[_2074].z * 0.3183098733425140380859375) * _2092) * _2093) + _2049;
    }
    bool _2073 = _2053.y == 0u;
    float _2111;
    float _2113;
    float _2115;
    if (_2073)
    {
        _2111 = _2066;
        _2113 = _2068;
        _2115 = _2070;
    }
    else
    {
        uint _2284 = _1979 + 7u;
        float _2300 = (dot(vec3(cbLight._m0[_1979 + 3u].xyz), vec3(_757, _758, _759)) * 0.5) + 0.5;
        float _2301 = _2300 * _2300;
        float _4238 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2302 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2303 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2111 = (((cbLight._m0[_2284].x * 0.3183098733425140380859375) * _2302) * _2303) + _2066;
        _2113 = (((cbLight._m0[_2284].y * 0.3183098733425140380859375) * _2302) * _2303) + _2068;
        _2115 = (((cbLight._m0[_2284].z * 0.3183098733425140380859375) * _2302) * _2303) + _2070;
    }
    uint _2118 = _1979 + 8u;
    float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _760) * 0.949999988079071044921875);
    float _2132 = _2131 * _2131;
    float _2133 = cbLight._m0[_1979].x + _836;
    float _2134 = cbLight._m0[_1979].y + _837;
    float _2135 = cbLight._m0[_1979].z + _838;
    float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
    float _2140 = _2139 * _2133;
    float _2141 = _2139 * _2134;
    float _2142 = _2139 * _2135;
    float _2143 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_1979].xyz));
    float _4254 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _4265 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _2147 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2148 = dot(vec3(_757, _758, _759), vec3(_2140, _2141, _2142));
    float _4276 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2152 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2140, _2141, _2142));
    float _4287 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2156 = _2132 * _2132;
    float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
    float _2168 = exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0);
    float _2169 = 0.959999978542327880859375 - _903;
    float _2171 = 0.959999978542327880859375 - _904;
    float _2172 = 0.959999978542327880859375 - _905;
    float _2179 = 1.0 - _2132;
    float _2190 = (0.5 / (((_2147 * ((_2146 * _2179) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2179) + _2132) * _2146))) * _2146;
    float _4298 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2192 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
    uint _2206 = _1979 + 9u;
    float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _760) * 0.949999988079071044921875);
    float _2218 = _2217 * _2217;
    float _2219 = cbLight._m0[_2019].x + _836;
    float _2220 = cbLight._m0[_2019].y + _837;
    float _2221 = cbLight._m0[_2019].z + _838;
    float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
    float _2226 = _2225 * _2219;
    float _2227 = _2225 * _2220;
    float _2228 = _2225 * _2221;
    float _2229 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2019].xyz));
    float _4309 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2233 = dot(vec3(_757, _758, _759), vec3(_2226, _2227, _2228));
    float _4320 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2237 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2226, _2227, _2228));
    float _4331 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2241 = _2218 * _2218;
    float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
    float _2252 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
    float _2259 = 1.0 - _2218;
    float _2269 = (0.5 / (((_2147 * ((_2232 * _2259) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2259) + _2218) * _2232))) * _2232;
    float _4342 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2271 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
    float _2281 = (((((_2252 * _2169) + _906) * cbLight._m0[_2206].x) * _2271) * _2002) + ((((cbLight._m0[_2118].x * _1971) * ((_2168 * _2169) + _906)) * _2192) * _2015);
    float _2282 = (((((_2252 * _2171) + _908) * cbLight._m0[_2206].y) * _2271) * _2002) + ((((cbLight._m0[_2118].y * _1972) * ((_2168 * _2171) + _908)) * _2192) * _2015);
    float _2283 = (((((_2252 * _2172) + _909) * cbLight._m0[_2206].z) * _2271) * _2002) + ((((cbLight._m0[_2118].z * _1973) * ((_2168 * _2172) + _909)) * _2192) * _2015);
    float _2345;
    float _2347;
    float _2349;
    if (_2055)
    {
        _2345 = _2281;
        _2347 = _2282;
        _2349 = _2283;
    }
    else
    {
        uint _2351 = _1979 + 2u;
        uint _2355 = _1979 + 10u;
        float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _760) * 0.949999988079071044921875);
        float _2370 = _2369 * _2369;
        float _2371 = cbLight._m0[_2351].x + _836;
        float _2372 = cbLight._m0[_2351].y + _837;
        float _2373 = cbLight._m0[_2351].z + _838;
        float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
        float _2378 = _2377 * _2371;
        float _2379 = _2377 * _2372;
        float _2380 = _2377 * _2373;
        float _2381 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2351].xyz));
        float _4353 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2385 = dot(vec3(_757, _758, _759), vec3(_2378, _2379, _2380));
        float _4364 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2389 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2378, _2379, _2380));
        float _4375 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2393 = _2370 * _2370;
        float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
        float _2404 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
        float _2411 = 1.0 - _2370;
        float _2421 = (0.5 / (((_2147 * ((_2384 * _2411) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2411) + _2370) * _2384))) * _2384;
        float _4386 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2423 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
        float _2424 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2345 = (((((_2404 * _2169) + _906) * cbLight._m0[_2355].x) * _2423) * _2424) + _2281;
        _2347 = (((((_2404 * _2171) + _908) * cbLight._m0[_2355].y) * _2423) * _2424) + _2282;
        _2349 = (((((_2404 * _2172) + _909) * cbLight._m0[_2355].z) * _2423) * _2424) + _2283;
    }
    float _2459;
    float _2461;
    float _2463;
    if (_2073)
    {
        _2459 = _2345;
        _2461 = _2347;
        _2463 = _2349;
    }
    else
    {
        uint _2470 = _1979 + 3u;
        uint _2474 = _1979 + 11u;
        float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _760) * 0.949999988079071044921875);
        float _2489 = _2488 * _2488;
        float _2490 = cbLight._m0[_2470].x + _836;
        float _2491 = cbLight._m0[_2470].y + _837;
        float _2492 = cbLight._m0[_2470].z + _838;
        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
        float _2497 = _2496 * _2490;
        float _2498 = _2496 * _2491;
        float _2499 = _2496 * _2492;
        float _2500 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2470].xyz));
        float _4402 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2504 = dot(vec3(_757, _758, _759), vec3(_2497, _2498, _2499));
        float _4413 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2508 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2497, _2498, _2499));
        float _4424 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2512 = _2489 * _2489;
        float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
        float _2523 = exp2(log2(1.0 - (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * 5.0);
        float _2530 = 1.0 - _2489;
        float _2540 = (0.5 / (((_2147 * ((_2503 * _2530) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2530) + _2489) * _2503))) * _2503;
        float _4435 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2542 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
        float _2543 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2459 = (((((_2523 * _2169) + _906) * cbLight._m0[_2474].x) * _2542) * _2543) + _2345;
        _2461 = (((((_2523 * _2171) + _908) * cbLight._m0[_2474].y) * _2542) * _2543) + _2347;
        _2463 = (((((_2523 * _2172) + _909) * cbLight._m0[_2474].z) * _2542) * _2543) + _2349;
    }
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    if (_1977.y == 0u)
    {
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2618;
        float _2620 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2618;
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2618;
        uvec4 _2633 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2634 = _2633.x;
        uint _2645 = uint((float(_2633.y) * floor(float(uint(cbSceneParam._m0[85u].y * _845) / _2634))) + floor(float(uint(cbSceneParam._m0[85u].x * _844) / _2634)));
        float _2655 = (log2(_2621 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2656 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        uint _2659 = uint(isnan(14.0) ? _2656 : (isnan(_2656) ? 14.0 : min(_2656, 14.0)));
        uvec4 _2664 = texelFetch(g_lightClusterGridBuffer, int(((_2659 << 2u) + (_2645 << 6u)) >> 2u));
        uint _2665 = _2664.x;
        uint _2666 = _2633.z;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        if (((((1u << ((_2666 >> 4u) & 15u)) + 4294967295u) & _2665) == 0u) || ((_2666 & 240u) == 0u))
        {
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
        }
        else
        {
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            uint _2917 = 0u;
            uint _2926;
            bool _2927;
            for (;;)
            {
                _2926 = texelFetch(g_lightClassification, int((((_2659 << 5u) + (_2645 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                _2927 = _2926 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2927)
                {
                    frontier_phi_61_pred = _2911;
                    frontier_phi_61_pred_1 = _2916;
                    frontier_phi_61_pred_2 = _2915;
                    frontier_phi_61_pred_3 = _2914;
                    frontier_phi_61_pred_4 = _2913;
                    frontier_phi_61_pred_5 = _2912;
                }
                else
                {
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    uint _3041;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2914;
                    _3039 = _2915;
                    _3040 = _2916;
                    _3041 = _2926;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    for (;;)
                    {
                        uint _3045 = uint(findLSB(_3041)) + (_2917 << 5u);
                        uint _3042 = (_3041 + 4294967295u) & _3041;
                        uint _3047 = _3045 * 48u;
                        vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 3u)).x));
                        uint _3067 = (_3045 * 48u) + 4u;
                        vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 3u)).x));
                        uint _3086 = (_3045 * 48u) + 8u;
                        vec3 _3097 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x));
                        float _3101 = _3061.x - _2619;
                        float _3102 = _3061.y - _2620;
                        float _3103 = _3061.z - _2621;
                        float _3104 = dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103));
                        float _3107 = inversesqrt(_3104);
                        float _3108 = _3107 * _3101;
                        float _3109 = _3107 * _3102;
                        float _3110 = _3107 * _3103;
                        float _3111 = dot(vec3(_863, _866, _869), vec3(_3108, _3109, _3110));
                        float _3116 = 1.0 - (_3104 * _3061.w);
                        float _4461 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3118 = sqrt(_3104) * _3080.w;
                        float _3121 = 1.39999997615814208984375 / (_3118 + 1.39999997615814208984375);
                        float _3122 = _3121 * _3121;
                        float _3125 = ((1.0 - _3122) * _3111) + _3122;
                        float _3128 = _3118 * _3118;
                        float _3132 = ((isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))) * _3117) / ((_3128 * 0.699999988079071044921875) + 1.0);
                        float _3136 = (-0.0) - _2619;
                        float _3137 = (-0.0) - _2620;
                        float _3138 = (-0.0) - _2621;
                        float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                        float _3143 = _3142 * _3136;
                        float _3144 = _3142 * _3137;
                        float _3145 = _3142 * _3138;
                        float _3153 = exp2(log2(1.0 / ((_3128 * 3.5) + 5.0)) * 0.25);
                        float _3154 = 1.0 - _938;
                        float _3161 = sqrt(1.0 - ((1.0 - (_3154 * _3154)) * (1.0 - (_3153 * _3153))));
                        float _3162 = _3161 * _3161;
                        float _3163 = _3162 * _3162;
                        float _3164 = _3143 + _3108;
                        float _3165 = _3144 + _3109;
                        float _3166 = _3145 + _3110;
                        float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                        float _3174 = dot(vec3(_863, _866, _869), vec3(_3143, _3144, _3145));
                        float _4477 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3177 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3178 = dot(vec3(_863, _866, _869), vec3(_3170 * _3164, _3170 * _3165, _3170 * _3166));
                        float _4488 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3181 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3185 = ((_3181 * _3181) * (_3163 + (-1.0))) + 1.0;
                        float _3186 = _3121 * _3162;
                        float _3187 = _3186 * _3186;
                        float _3190 = ((1.0 - _3187) * _3111) + _3187;
                        float _4499 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3191 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3192 = 1.0 - _3162;
                        float _3202 = (0.5 / (((_3191 * ((_3177 * _3192) + _3162)) + 9.9999999392252902907785028219223e-09) + (((_3191 * _3192) + _3162) * _3177))) * _3191;
                        float _4510 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3213 = (((_3163 * 3.1415927410125732421875) * (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) / ((_3185 * _3185) * ((_3128 * 2.1991131305694580078125) + 3.141590118408203125))) * _3117;
                        _2970 = (_3132 * _3080.x) + _3038;
                        _2971 = (_3132 * _3080.y) + _3039;
                        _2972 = (_3132 * _3080.z) + _3040;
                        _2967 = (_3213 * _3097.x) + _3035;
                        _2968 = (_3213 * _3097.y) + _3036;
                        _2969 = (_3213 * _3097.z) + _3037;
                        if (_3042 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _2970;
                            _3039 = _2971;
                            _3040 = _2972;
                            _3041 = _3042;
                        }
                    }
                    frontier_phi_61_pred = _2967;
                    frontier_phi_61_pred_1 = _2972;
                    frontier_phi_61_pred_2 = _2971;
                    frontier_phi_61_pred_3 = _2970;
                    frontier_phi_61_pred_4 = _2969;
                    frontier_phi_61_pred_5 = _2968;
                }
                _2767 = frontier_phi_61_pred;
                _2777 = frontier_phi_61_pred_1;
                _2775 = frontier_phi_61_pred_2;
                _2773 = frontier_phi_61_pred_3;
                _2771 = frontier_phi_61_pred_4;
                _2769 = frontier_phi_61_pred_5;
                uint _2918 = _2917 + 1u;
                if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2911 = _2767;
                    _2912 = _2769;
                    _2913 = _2771;
                    _2914 = _2773;
                    _2915 = _2775;
                    _2916 = _2777;
                    _2917 = _2918;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
        }
        uvec4 _2780 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2781 = _2780.z;
        uint _2783 = (_2781 >> 8u) & 15u;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        if (((4294967295u << _2783) & _2665) == 0u)
        {
            _2879 = _2766;
            _2881 = _2768;
            _2883 = _2770;
            _2885 = _2772;
            _2887 = _2774;
            _2889 = _2776;
        }
        else
        {
            float _2904 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
            float _2905 = _2904 * _2619;
            float _2906 = _2904 * _2620;
            float _2907 = _2904 * _2621;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2783 < ((_2781 >> 12u) & 15u))
            {
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _2890;
                float _3018 = _2766;
                float _3019 = _2768;
                float _3020 = _2770;
                float _3021 = _2772;
                float _3022 = _2774;
                float _3023 = _2776;
                uint _3024 = _2783;
                uint _3033;
                bool _3034;
                for (;;)
                {
                    _3033 = texelFetch(g_lightClassification, int((((_2659 << 5u) + (_2645 << 9u)) + (_3024 << 2u)) >> 2u)).x;
                    _3034 = _3033 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3034)
                    {
                        frontier_phi_67_pred = _3021;
                        frontier_phi_67_pred_1 = _3022;
                        frontier_phi_67_pred_2 = _3023;
                        frontier_phi_67_pred_3 = _3020;
                        frontier_phi_67_pred_4 = _3019;
                        frontier_phi_67_pred_5 = _3018;
                    }
                    else
                    {
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3231 = _3018;
                        float _3232 = _3019;
                        float _3233 = _3020;
                        float _3234 = _3021;
                        float _3235 = _3022;
                        float _3236 = _3023;
                        uint _3237 = _3033;
                        uint _3238;
                        vec4 _3263;
                        float _3264;
                        vec4 _3279;
                        vec3 _3291;
                        vec4 _3306;
                        vec4 _3322;
                        float _3368;
                        bool _3369;
                        for (;;)
                        {
                            uint _3248 = ((_3024 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3237));
                            _3238 = (_3237 + 4294967295u) & _3237;
                            uint _3250 = _3248 * 40u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            _3264 = _3263.w;
                            uint _3266 = (_3248 * 40u) + 4u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3281 = (_3248 * 40u) + 8u;
                            _3291 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x));
                            uint _3293 = (_3248 * 40u) + 16u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3309 = (_3248 * 40u) + 20u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3248 * 40u) + 24u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3343 = (_3248 * 40u) + 28u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3368 = fma(_2621, _3356.z, fma(_2620, _3356.y, _3356.x * _2619)) + _3356.w;
                            _3369 = !((fma(_2621, _3337.z, fma(_2620, _3337.y, _3337.x * _2619)) + _3337.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3369)
                            {
                                float _3396 = _3263.x - _2619;
                                float _3397 = _3263.y - _2620;
                                float _3398 = _3263.z - _2621;
                                float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                                float _3402 = inversesqrt(_3399);
                                float _3403 = _3402 * _3396;
                                float _3404 = _3402 * _3397;
                                float _3405 = _3402 * _3398;
                                float _3409 = 1.0 - (_3399 / (_3264 * _3264));
                                float _4521 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3414 = sqrt(_3399) * _3279.w;
                                float _3416 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                                float _3417 = _3416 * _3416;
                                float _3420 = ((1.0 - _3417) * dot(vec3(_3403, _3404, _3405), vec3(_863, _866, _869))) + _3417;
                                float _3423 = _3414 * _3414;
                                float _3427 = (fma(_2621, _3306.z, fma(_2620, _3306.y, _3306.x * _2619)) + _3306.w) / _3368;
                                float _3428 = (fma(_2621, _3322.z, fma(_2620, _3322.y, _3322.x * _2619)) + _3322.w) / _3368;
                                float _3432 = 1.0 - dot(vec2(_3427, _3428), vec2(_3427, _3428));
                                float _4537 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3434 = _3433 * (((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3410) / ((_3423 * 0.699999988079071044921875) + 1.0));
                                float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _938;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3403 - _2905;
                                float _3458 = _3404 - _2906;
                                float _3459 = _3405 - _2907;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_863, _866, _869), vec3((-0.0) - _2905, (-0.0) - _2906, (-0.0) - _2907));
                                float _4548 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3471 = dot(vec3(_863, _866, _869), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4559 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3416 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_863, _866, _869), vec3(_3403, _3404, _3405))) + _3480;
                                float _4570 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4581 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3433 * _3410) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3508 * _3291.x;
                                frontier_phi_73_pred_1 = _3508 * _3291.y;
                                frontier_phi_73_pred_2 = _3434 * _3279.z;
                                frontier_phi_73_pred_3 = _3434 * _3279.y;
                                frontier_phi_73_pred_4 = _3434 * _3279.x;
                                frontier_phi_73_pred_5 = _3508 * _3291.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3512 = frontier_phi_73_pred;
                            _3513 = frontier_phi_73_pred_1;
                            _3517 = frontier_phi_73_pred_2;
                            _3516 = frontier_phi_73_pred_3;
                            _3515 = frontier_phi_73_pred_4;
                            _3514 = frontier_phi_73_pred_5;
                            _3221 = _3515 + _3234;
                            _3222 = _3516 + _3235;
                            _3223 = _3517 + _3236;
                            _3218 = _3512 + _3231;
                            _3219 = _3513 + _3232;
                            _3220 = _3514 + _3233;
                            if (_3238 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3238;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3221;
                        frontier_phi_67_pred_1 = _3222;
                        frontier_phi_67_pred_2 = _3223;
                        frontier_phi_67_pred_3 = _3220;
                        frontier_phi_67_pred_4 = _3219;
                        frontier_phi_67_pred_5 = _3218;
                    }
                    _2886 = frontier_phi_67_pred;
                    _2888 = frontier_phi_67_pred_1;
                    _2890 = frontier_phi_67_pred_2;
                    _2884 = frontier_phi_67_pred_3;
                    _2882 = frontier_phi_67_pred_4;
                    _2880 = frontier_phi_67_pred_5;
                    uint _3025 = _3024 + 1u;
                    if (_3025 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3018 = _2880;
                        _3019 = _2882;
                        _3020 = _2884;
                        _3021 = _2886;
                        _3022 = _2888;
                        _3023 = _2890;
                        _3024 = _3025;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2888;
                frontier_phi_55_56_ladder_1 = _2890;
                frontier_phi_55_56_ladder_2 = _2886;
                frontier_phi_55_56_ladder_3 = _2884;
                frontier_phi_55_56_ladder_4 = _2882;
                frontier_phi_55_56_ladder_5 = _2880;
            }
            else
            {
                frontier_phi_55_56_ladder = _2774;
                frontier_phi_55_56_ladder_1 = _2776;
                frontier_phi_55_56_ladder_2 = _2772;
                frontier_phi_55_56_ladder_3 = _2770;
                frontier_phi_55_56_ladder_4 = _2768;
                frontier_phi_55_56_ladder_5 = _2766;
            }
            _2879 = frontier_phi_55_56_ladder_5;
            _2881 = frontier_phi_55_56_ladder_4;
            _2883 = frontier_phi_55_56_ladder_3;
            _2885 = frontier_phi_55_56_ladder_2;
            _2887 = frontier_phi_55_56_ladder;
            _2889 = frontier_phi_55_56_ladder_1;
        }
        float _2894 = isnan(1.0) ? _922 : (isnan(_922) ? 1.0 : min(_922, 1.0));
        _2678 = (_2894 * _2885) + _2111;
        _2680 = (_2894 * _2887) + _2113;
        _2682 = (_2894 * _2889) + _2115;
        _2684 = ((_2879 * _906) * _2894) + _2459;
        _2686 = ((_2881 * _908) * _2894) + _2461;
        _2688 = ((_2883 * _909) * _2894) + _2463;
    }
    else
    {
        _2678 = _2111;
        _2680 = _2113;
        _2682 = _2115;
        _2684 = _2459;
        _2686 = _2461;
        _2688 = _2463;
    }
    float _4597 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4608 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _4619 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    uint _2708 = _253 + 6u;
    float _2716 = _844 / cbSceneParam._m0[86u].x;
    float _2717 = _845 / cbSceneParam._m0[86u].y;
    vec4 _2731 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2716, _2717, (log2((isnan(cbSceneParam._m0[77u].w) ? _779 : (isnan(_779) ? cbSceneParam._m0[77u].w : min(_779, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2733 = _2731.x;
    float _2734 = _2731.y;
    float _2735 = _2731.z;
    float _2736 = _2731.w;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_779 > cbSceneParam._m0[78u].w)
    {
        float _2791 = isnan(_779) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _779 : min(cbSceneParam._m0[80u].w, _779));
        float _2792 = _2791 / _779;
        float _2803 = _2792 * _829;
        float _2804 = _830 * _2792;
        float _2805 = (-0.0) - _2804;
        float _2807 = _2792 * _831;
        float _2809 = (cbSceneParam._m0[77u].w * _2805) / _2791;
        float _2810 = _2809 + cbSceneParam._m0[79u].w;
        float _2811 = cbSceneParam._m0[79u].w - _2804;
        float _2817 = sqrt(((_2803 * _2803) + (_2804 * _2804)) + (_2807 * _2807));
        float _2820 = (1.0 - (cbSceneParam._m0[77u].w / _2791)) * _2817;
        float _2825 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2827 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2980;
        if (abs((_2805 - _2809) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2980 = ((((_2810 > 0.0) ? exp2(_2825 * _2810) : (2.0 - exp2(_2827 * _2810))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2820;
        }
        else
        {
            float _2940 = 1.0 / cbSceneParam._m0[80u].x;
            float _2941 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : max(_2810, _2811));
            float _2942 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : min(_2810, _2811));
            float _2951 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : min(_2941, 0.0));
            float _2952 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : min(_2942, 0.0));
            _2980 = ((abs(_2817 / _2805) * cbSceneParam._m0[80u].y) * ((((_2951 - _2952) * 2.0) - ((exp2(_2825 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0)))) - exp2(_2825 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0))))) * _2940)) - ((exp2(_2827 * _2951) - exp2(_2827 * _2952)) * _2940))) + (_2820 * cbSceneParam._m0[80u].z);
        }
        vec4 _2982 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2716, _2717, 1.0), 0.0);
        float _2991 = exp2((_2980 * (-1.44269502162933349609375)) * (1.0 - _2982.w));
        float _2992 = log2(_2991);
        float _3008 = log2(_2736);
        _2829 = (exp2(_3008 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].x)) * _2982.x) / cbSceneParam._m0[78u].x)) + _2733;
        _2831 = (exp2(_3008 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].y)) * _2982.y) / cbSceneParam._m0[78u].y)) + _2734;
        _2833 = (exp2(_3008 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].z)) * _2982.z) / cbSceneParam._m0[78u].z)) + _2735;
        _2835 = _2991 * _2736;
    }
    else
    {
        _2829 = _2733;
        _2831 = _2734;
        _2833 = _2735;
        _2835 = _2736;
    }
    float _2847 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2848 = _2847 == 3.0;
    float _2849 = log2(_2835);
    float _2856 = exp2(_2849 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2678 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _922))) + ((_2684 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1730)) * cbPerFrame._m0[3u].x));
    float _2857 = exp2(_2849 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2680 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _922))) + ((_2686 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1730)) * cbPerFrame._m0[3u].x));
    float _2858 = exp2(_2849 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2682 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _922))) + ((_2688 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1730)) * cbPerFrame._m0[3u].x));
    float _2867 = (_2847 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2867 * (_2848 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2829)));
    SV_Target.y = _2867 * (_2848 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2831)));
    SV_Target.z = _2867 * (_2848 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2833)));
    SV_Target.w = cbInstanceData._m0[_2708].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2708].w;
}


