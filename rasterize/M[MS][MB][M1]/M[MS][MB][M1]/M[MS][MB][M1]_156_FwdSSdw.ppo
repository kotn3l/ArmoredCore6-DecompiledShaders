#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1271;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].y) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3620 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _389 = (_382 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _390 = (_382 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _391 = (_382 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _410 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _457 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _476 = _474.x;
    float _477 = _474.y;
    float _478 = _474.z;
    float _487 = ((_457.z - _478) * _382) + _478;
    float _490 = ((((_457.x - _476) * _382) + _476) * 2.0) + (-1.0);
    float _491 = ((((_457.y - _477) * _382) + _477) * 2.0) + (-1.0);
    float _492 = dot(vec2(_490, _491), vec2(_490, _491));
    float _3631 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _497 = sqrt(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _529 = (_490 + ((((_430.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_517.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _530 = (_491 + ((((_430.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_517.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _533 = fma(_497, _232, fma(_530, _239, _529 * _225));
    float _536 = fma(_497, _233, fma(_530, _240, _529 * _226));
    float _539 = fma(_497, _234, fma(_530, _241, _529 * _227));
    float _543 = inversesqrt(dot(vec3(_533, _536, _539), vec3(_533, _536, _539)));
    vec4 _570 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _572 = _570.x;
    float _573 = 1.0 - _572;
    float _577 = ((_572 - _573) * cbMtdParam._m0[24u].z) + _573;
    float _579 = (cbMtdParam._m0[19u].x + dot(vec4(_543 * _533, _543 * _536, _543 * _539, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_577 * cbMtdParam._m0[21u].z);
    float _3642 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _595 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_577 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3653 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _600 = ((_580 * ((_410.x * cbMtdParam._m0[18u].x) - _389)) * _596) + _389;
    float _601 = ((_580 * ((_410.y * cbMtdParam._m0[18u].y) - _390)) * _596) + _390;
    float _602 = ((_580 * ((_410.z * cbMtdParam._m0[18u].z) - _391)) * _596) + _391;
    vec4 _614 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _628 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _630 = _628.x;
    float _648 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _630) * _382) + _630;
    float _652 = ((_614.x - _648) * cbMtdParam._m0[19u].z) + _648;
    float _655 = _652 - ((_596 * _580) * _652);
    float _660 = (((_430.z - _487) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _487;
    float _664 = ((_517.z - _660) * cbMtdParam._m0[19u].w) + _660;
    vec4 _677 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _684 = (_677.x * 2.0) + (-1.0);
    float _685 = (_677.y * 2.0) + (-1.0);
    float _686 = dot(vec2(_684, _685), vec2(_684, _685));
    float _3664 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _695 = (((_677.z - _664) * _580) * _596) + _664;
    float _710 = (((cbMtdParam._m0[21u].x * _529) + ((_684 - _529) * _580)) * _596) + _529;
    float _711 = (((cbMtdParam._m0[21u].x * _530) + ((_685 - _530) * _580)) * _596) + _530;
    float _712 = (((sqrt(1.0 - (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) - _497) * _580) * _596) + _497;
    float _717 = cbMtdParam._m0[22u].x + _517.w;
    float _720 = fma(_712, _232, fma(_711, _239, _710 * _225));
    float _723 = fma(_712, _233, fma(_711, _240, _710 * _226));
    float _726 = fma(_712, _234, fma(_711, _241, _710 * _227));
    float _730 = inversesqrt(dot(vec3(_720, _723, _726), vec3(_720, _723, _726)));
    float _731 = _730 * _720;
    float _732 = _730 * _723;
    float _733 = _730 * _726;
    float _3675 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _734 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _3697 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3708 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3719 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3730 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _739 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _753 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _804 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _794);
    float _805 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _794);
    float _806 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _794);
    float _810 = inversesqrt(dot(vec3(_804, _805, _806), vec3(_804, _805, _806)));
    float _811 = _804 * _810;
    float _812 = _805 * _810;
    float _813 = _806 * _810;
    float _819 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _820 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _838 = fma(_733, cbSceneParam._m0[5u].z, fma(_732, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _731));
    float _841 = fma(_733, cbSceneParam._m0[6u].z, fma(_732, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _731));
    float _844 = fma(_733, cbSceneParam._m0[7u].z, fma(_732, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _731));
    uint _858 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _864 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) * cbInstanceData._m0[_858].x;
    float _865 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * cbInstanceData._m0[_858].y;
    float _866 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_858].z;
    float _3741 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _870 = 1.0 - _739;
    float _871 = _867 * _870;
    float _872 = _868 * _870;
    float _873 = _869 * _870;
    float _878 = (_867 + (-0.039999999105930328369140625)) * _739;
    float _879 = (_868 + (-0.039999999105930328369140625)) * _739;
    float _880 = (_869 + (-0.039999999105930328369140625)) * _739;
    float _881 = _878 + 0.039999999105930328369140625;
    float _883 = _879 + 0.039999999105930328369140625;
    float _884 = _880 + 0.039999999105930328369140625;
    vec4 _893 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _819, cbSceneParam._m0[86u].y * _820));
    float _897 = ((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * TEXCOORD_5.w) * _893.x;
    float _898 = dot(vec3(_731, _732, _733), vec3(_811, _812, _813));
    float _901 = _898 * 2.0;
    float _905 = (_901 * _731) - _811;
    float _906 = (_901 * _732) - _812;
    float _907 = (_901 * _733) - _813;
    float _911 = abs(dot(vec3(_811, _812, _813), vec3(_731, _732, _733)));
    float _3774 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _913 = sqrt(_734);
    float _926 = exp2((_913 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_913 * 3.0));
    float _932 = (1.0 - _926) * ((_913 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _933 = _926 * _913;
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1270;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _995 = fma(_969, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961));
        float _999 = fma(_969, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961));
        float _1003 = fma(_969, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961));
        float _1028 = _961 + _731;
        float _1029 = _965 + _732;
        float _1030 = _969 + _733;
        float _1040 = fma(_1030, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028)) - _995;
        float _1041 = fma(_1030, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028)) - _999;
        float _1042 = fma(_1030, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028)) - _1003;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_995 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_999 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[34u].z) + ((((((_1003 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1098 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1064.x + (-0.5));
        float _1100 = _1098 * (_1064.y + (-0.5));
        float _1101 = _1098 * (_1064.z + (-0.5));
        float _1108 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1071.x + (-0.5));
        float _1110 = _1108 * (_1071.y + (-0.5));
        float _1111 = _1108 * (_1071.z + (-0.5));
        float _1118 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1078.x + (-0.5));
        float _1120 = _1118 * (_1078.y + (-0.5));
        float _1121 = _1118 * (_1078.z + (-0.5));
        float _1128 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1085.x + (-0.5));
        float _1130 = _1128 * (_1085.y + (-0.5));
        float _1131 = _1128 * (_1085.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1152 = (dot(vec3(_731, _732, _733), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1162 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3822 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1164 + 1.0))) + _1169) * _1132;
        float _1179 = _1100 * 0.5;
        float _1180 = _1110 * 0.5;
        float _1181 = _1120 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_731, _732, _733), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3855 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1206 + 1.0))) + _1211) * _1133;
        float _1221 = _1101 * 0.5;
        float _1222 = _1111 * 0.5;
        float _1223 = _1121 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_731, _732, _733), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3888 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1248 + 1.0))) + _1253) * _1134;
        _1270 = _1101;
        _1272 = _1100;
        _1273 = _1099;
        _1274 = _1111;
        _1275 = _1110;
        _1276 = _1109;
        _1277 = _1121;
        _1278 = _1120;
        _1279 = _1119;
        _1280 = _1134;
        _1281 = _1133;
        _1282 = _1132;
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _1271;
        _1272 = _1271;
        _1273 = _1271;
        _1274 = _1271;
        _1275 = _1271;
        _1276 = _1271;
        _1277 = _1271;
        _1278 = _1271;
        _1279 = _1271;
        _1280 = _1271;
        _1281 = _1271;
        _1282 = _1271;
        _1283 = 0.0;
        _1284 = 0.0;
        _1285 = 0.0;
    }
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1310 = fma(_969, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961));
        float _1314 = fma(_969, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961));
        float _1318 = fma(_969, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961));
        float _1341 = _961 + _731;
        float _1342 = _965 + _732;
        float _1343 = _969 + _733;
        float _1353 = fma(_1343, cbModelParam._m0[30u].z, fma(_1342, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341)) - _1310;
        float _1354 = fma(_1343, cbModelParam._m0[31u].z, fma(_1342, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341)) - _1314;
        float _1355 = fma(_1343, cbModelParam._m0[32u].z, fma(_1342, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341)) - _1318;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1310 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1314 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[35u].z) + ((((((_1318 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1409 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1376.x + (-0.5));
        float _1411 = _1409 * (_1376.y + (-0.5));
        float _1412 = _1409 * (_1376.z + (-0.5));
        float _1419 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1383.x + (-0.5));
        float _1421 = _1419 * (_1383.y + (-0.5));
        float _1422 = _1419 * (_1383.z + (-0.5));
        float _1429 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1390.x + (-0.5));
        float _1431 = _1429 * (_1390.y + (-0.5));
        float _1432 = _1429 * (_1390.z + (-0.5));
        float _1439 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1397.x + (-0.5));
        float _1441 = _1439 * (_1397.y + (-0.5));
        float _1442 = _1439 * (_1397.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_731, _732, _733), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _3951 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1473 + 1.0))) + _1478) * _1443;
        float _1488 = _1411 * 0.5;
        float _1489 = _1421 * 0.5;
        float _1490 = _1431 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_731, _732, _733), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _3984 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1515 + 1.0))) + _1520) * _1444;
        float _1530 = _1412 * 0.5;
        float _1531 = _1422 * 0.5;
        float _1532 = _1432 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_731, _732, _733), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4017 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1557 + 1.0))) + _1562) * _1445;
        _1579 = _1412;
        _1580 = _1411;
        _1581 = _1410;
        _1582 = _1422;
        _1583 = _1421;
        _1584 = _1420;
        _1585 = _1432;
        _1586 = _1431;
        _1587 = _1430;
        _1588 = _1445;
        _1589 = _1444;
        _1590 = _1443;
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1271;
        _1580 = _1271;
        _1581 = _1271;
        _1582 = _1271;
        _1583 = _1271;
        _1584 = _1271;
        _1585 = _1271;
        _1586 = _1271;
        _1587 = _1271;
        _1588 = _1271;
        _1589 = _1271;
        _1590 = _1271;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1283)) + _1283;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1284)) + _1284;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1285)) + _1285;
    float _1626 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1603));
    float _1647 = _905 * 0.5;
    float _1648 = _906 * 0.5;
    float _1649 = _907 * 0.5;
    float _1650 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1653 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1656 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1690;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1663 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1270, _1274, _1277, _1280));
        float _1667 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1272, _1275, _1278, _1281));
        float _1671 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1678 = dot(vec4(cbModelParam._m0[39u]), vec4(_1647, _1648, _1649, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1701;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1692 = dot(vec4(cbModelParam._m0[40u]), vec4(_1647, _1648, _1649, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1705 = (_1701 * cbModelParam._m0[1u].x) + (_1690 * (1.0 - cbModelParam._m0[1u].x));
    float _1715 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _734);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1715 : min(cbModelParam._m0[25u].z, _1715));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1763 = fma(_969, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961)) + cbModelParam._m0[13u].w;
        float _1767 = fma(_969, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961)) + cbModelParam._m0[14u].w;
        float _1771 = fma(_969, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961)) + cbModelParam._m0[15u].w;
        float _1774 = fma(_907, cbModelParam._m0[13u].z, fma(_906, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905));
        float _1777 = fma(_907, cbModelParam._m0[14u].z, fma(_906, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905));
        float _1780 = fma(_907, cbModelParam._m0[15u].z, fma(_906, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905));
        float _1808;
        if (_1774 > 0.0)
        {
            _1808 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1808 = frontier_phi_14_12_ladder;
        }
        float _2031;
        if (_1777 > 0.0)
        {
            _2031 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2031 = frontier_phi_23_19_ladder;
        }
        float _2288;
        if (_1780 > 0.0)
        {
            _2288 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2288 = frontier_phi_35_30_ladder;
        }
        float _2290 = isnan(_2031) ? _1808 : (isnan(_1808) ? _2031 : min(_1808, _2031));
        float _2291 = isnan(_2288) ? _2290 : (isnan(_2290) ? _2288 : min(_2290, _2288));
        float _2295 = (_2291 * _1774) + _1763;
        float _2296 = (_2291 * _1777) + _1767;
        float _2297 = (_2291 * _1780) + _1771;
        float _2298 = _2291 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2298;
        float _2302 = _2298 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 > _2302) || ((_2296 < _2300) || ((_2295 < _2300) || (_2295 > _2302))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2297, cbModelParam._m0[9u].z, fma(_2296, cbModelParam._m0[9u].y, _2295 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2297, cbModelParam._m0[10u].z, fma(_2296, cbModelParam._m0[10u].y, _2295 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2297, cbModelParam._m0[11u].z, fma(_2296, cbModelParam._m0[11u].y, _2295 * cbModelParam._m0[11u].x))), _1716);
            frontier_phi_13_35_ladder = _2425.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2425.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2425.x * cbModelParam._m0[1u].y;
        }
        _1796 = frontier_phi_13_35_ladder_2;
        _1798 = frontier_phi_13_35_ladder_1;
        _1800 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_905, _906, _907), _1716);
        _1796 = _1784.x * cbModelParam._m0[1u].y;
        _1798 = _1784.y * cbModelParam._m0[1u].y;
        _1800 = _1784.z * cbModelParam._m0[1u].y;
    }
    float _1804 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _734);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1804 : min(cbModelParam._m0[25u].w, _1804));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1858 = fma(_969, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961)) + cbModelParam._m0[21u].w;
        float _1862 = fma(_969, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961)) + cbModelParam._m0[22u].w;
        float _1866 = fma(_969, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961)) + cbModelParam._m0[23u].w;
        float _1869 = fma(_907, cbModelParam._m0[21u].z, fma(_906, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905));
        float _1872 = fma(_907, cbModelParam._m0[22u].z, fma(_906, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905));
        float _1875 = fma(_907, cbModelParam._m0[23u].z, fma(_906, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905));
        float _2036;
        if (_1869 > 0.0)
        {
            _2036 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2036 = frontier_phi_25_21_ladder;
        }
        float _2315;
        if (_1872 > 0.0)
        {
            _2315 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2315 = frontier_phi_37_32_ladder;
        }
        float _2528;
        if (_1875 > 0.0)
        {
            _2528 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2528 = frontier_phi_46_43_ladder;
        }
        float _2530 = isnan(_2315) ? _2036 : (isnan(_2036) ? _2315 : min(_2036, _2315));
        float _2531 = isnan(_2528) ? _2530 : (isnan(_2530) ? _2528 : min(_2530, _2528));
        float _2535 = (_2531 * _1869) + _1858;
        float _2536 = (_2531 * _1872) + _1862;
        float _2537 = (_2531 * _1875) + _1866;
        float _2538 = _2531 * 9.9999997473787516355514526367188e-05;
        float _2539 = (-1.0) - _2538;
        float _2541 = _2538 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2537 > _2541) || ((_2537 < _2539) || ((_2536 > _2541) || ((_2536 < _2539) || ((_2535 < _2539) || (_2535 > _2541))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2537, cbModelParam._m0[17u].z, fma(_2536, cbModelParam._m0[17u].y, _2535 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2537, cbModelParam._m0[18u].z, fma(_2536, cbModelParam._m0[18u].y, _2535 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2537, cbModelParam._m0[19u].z, fma(_2536, cbModelParam._m0[19u].y, _2535 * cbModelParam._m0[19u].x))), _1805);
            frontier_phi_22_46_ladder = _2736.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2736.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2736.x * cbModelParam._m0[1u].z;
        }
        _1894 = frontier_phi_22_46_ladder_2;
        _1896 = frontier_phi_22_46_ladder_1;
        _1898 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_905, _906, _907), _1805);
        _1894 = _1878.x * cbModelParam._m0[1u].z;
        _1896 = _1878.y * cbModelParam._m0[1u].z;
        _1898 = _1878.z * cbModelParam._m0[1u].z;
    }
    float _1911 = (((_932 * _881) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1894 - _1796)) + _1796);
    float _1913 = (((_932 * _883) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1896 - _1798)) + _1798);
    float _1915 = (((_932 * _884) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1898 - _1800)) + _1800);
    float _1918 = fma(_1915, cbSceneParam._m0[89u].z, fma(_1913, cbSceneParam._m0[89u].y, _1911 * cbSceneParam._m0[89u].x));
    float _1921 = fma(_1915, cbSceneParam._m0[90u].z, fma(_1913, cbSceneParam._m0[90u].y, _1911 * cbSceneParam._m0[90u].x));
    float _1924 = fma(_1915, cbSceneParam._m0[91u].z, fma(_1913, cbSceneParam._m0[91u].y, _1911 * cbSceneParam._m0[91u].x));
    vec4 _1932 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_819, _820));
    float _1934 = _1932.w;
    float _1946 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1934);
    float _1947 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1934);
    float _1948 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1934);
    uvec4 _1952 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _1954 = _1952.x * 14u;
    uint _1955 = _1954 + 13u;
    float _1962 = _897 + (-1.0);
    float _1967 = (cbLight._m0[_1955].x * _1962) + 1.0;
    float _1968 = (cbLight._m0[_1955].y * _1962) + 1.0;
    float _1969 = (cbLight._m0[_1955].z * _1962) + 1.0;
    float _1970 = (cbLight._m0[_1955].w * _1962) + 1.0;
    uint _1971 = _1954 + 5u;
    float _1977 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1981 = _1954 + 4u;
    float _1990 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1994 = _1954 | 1u;
    float _2005 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_731, _732, _733));
    float _2008 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_731, _732, _733));
    float _4153 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _4164 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2013 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * 0.3183098733425140380859375;
    float _2015 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.3183098733425140380859375;
    float _2022 = ((cbLight._m0[_1971].x * _1977) * _2015) + (((cbLight._m0[_1981].x * _1946) * _1990) * _2013);
    float _2023 = ((_1977 * cbLight._m0[_1971].y) * _2015) + (((cbLight._m0[_1981].y * _1947) * _1990) * _2013);
    float _2024 = ((_1977 * cbLight._m0[_1971].z) * _2015) + (((cbLight._m0[_1981].z * _1948) * _1990) * _2013);
    uvec4 _2028 = floatBitsToUint(cbLight._m0[_1954 + 12u]);
    bool _2030 = _2028.x == 0u;
    float _2041;
    float _2043;
    float _2045;
    if (_2030)
    {
        _2041 = _2022;
        _2043 = _2023;
        _2045 = _2024;
    }
    else
    {
        uint _2049 = _1954 + 6u;
        float _2065 = (dot(vec3(cbLight._m0[_1954 + 2u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2066 = _2065 * _2065;
        float _4175 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2067 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2068 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2041 = (((cbLight._m0[_2049].x * 0.3183098733425140380859375) * _2067) * _2068) + _2022;
        _2043 = (((cbLight._m0[_2049].y * 0.3183098733425140380859375) * _2067) * _2068) + _2023;
        _2045 = (((cbLight._m0[_2049].z * 0.3183098733425140380859375) * _2067) * _2068) + _2024;
    }
    bool _2048 = _2028.y == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_2048)
    {
        _2086 = _2041;
        _2088 = _2043;
        _2090 = _2045;
    }
    else
    {
        uint _2259 = _1954 + 7u;
        float _2275 = (dot(vec3(cbLight._m0[_1954 + 3u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2276 = _2275 * _2275;
        float _4191 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2277 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2278 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2086 = (((cbLight._m0[_2259].x * 0.3183098733425140380859375) * _2277) * _2278) + _2041;
        _2088 = (((cbLight._m0[_2259].y * 0.3183098733425140380859375) * _2277) * _2278) + _2043;
        _2090 = (((cbLight._m0[_2259].z * 0.3183098733425140380859375) * _2277) * _2278) + _2045;
    }
    uint _2093 = _1954 + 8u;
    float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _734) * 0.949999988079071044921875);
    float _2107 = _2106 * _2106;
    float _2108 = cbLight._m0[_1954].x + _811;
    float _2109 = cbLight._m0[_1954].y + _812;
    float _2110 = cbLight._m0[_1954].z + _813;
    float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
    float _2115 = _2114 * _2108;
    float _2116 = _2114 * _2109;
    float _2117 = _2114 * _2110;
    float _2118 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_1954].xyz));
    float _4207 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _2122 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2123 = dot(vec3(_731, _732, _733), vec3(_2115, _2116, _2117));
    float _4229 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2115, _2116, _2117));
    float _4240 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2107 * _2107;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2143 = exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0);
    float _2144 = 0.959999978542327880859375 - _878;
    float _2146 = 0.959999978542327880859375 - _879;
    float _2147 = 0.959999978542327880859375 - _880;
    float _2154 = 1.0 - _2107;
    float _2165 = (0.5 / (((_2122 * ((_2121 * _2154) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2154) + _2107) * _2121))) * _2121;
    float _4251 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    uint _2181 = _1954 + 9u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _734) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_1994].x + _811;
    float _2195 = cbLight._m0[_1994].y + _812;
    float _2196 = cbLight._m0[_1994].z + _813;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_1994].xyz));
    float _4262 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2208 = dot(vec3(_731, _732, _733), vec3(_2201, _2202, _2203));
    float _4273 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2201, _2202, _2203));
    float _4284 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2193 * _2193;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2227 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
    float _2234 = 1.0 - _2193;
    float _2244 = (0.5 / (((_2122 * ((_2207 * _2234) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2234) + _2193) * _2207))) * _2207;
    float _4295 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    float _2256 = (((((_2227 * _2144) + _881) * cbLight._m0[_2181].x) * _2246) * _1977) + ((((cbLight._m0[_2093].x * _1946) * ((_2143 * _2144) + _881)) * _2167) * _1990);
    float _2257 = (((((_2227 * _2146) + _883) * cbLight._m0[_2181].y) * _2246) * _1977) + ((((cbLight._m0[_2093].y * _1947) * ((_2143 * _2146) + _883)) * _2167) * _1990);
    float _2258 = (((((_2227 * _2147) + _884) * cbLight._m0[_2181].z) * _2246) * _1977) + ((((cbLight._m0[_2093].z * _1948) * ((_2143 * _2147) + _884)) * _2167) * _1990);
    float _2320;
    float _2322;
    float _2324;
    if (_2030)
    {
        _2320 = _2256;
        _2322 = _2257;
        _2324 = _2258;
    }
    else
    {
        uint _2326 = _1954 + 2u;
        uint _2330 = _1954 + 10u;
        float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _734) * 0.949999988079071044921875);
        float _2345 = _2344 * _2344;
        float _2346 = cbLight._m0[_2326].x + _811;
        float _2347 = cbLight._m0[_2326].y + _812;
        float _2348 = cbLight._m0[_2326].z + _813;
        float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
        float _2353 = _2352 * _2346;
        float _2354 = _2352 * _2347;
        float _2355 = _2352 * _2348;
        float _2356 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2326].xyz));
        float _4306 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2360 = dot(vec3(_731, _732, _733), vec3(_2353, _2354, _2355));
        float _4317 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2364 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2353, _2354, _2355));
        float _4328 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2368 = _2345 * _2345;
        float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
        float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
        float _2386 = 1.0 - _2345;
        float _2396 = (0.5 / (((_2122 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2386) + _2345) * _2359))) * _2359;
        float _4339 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2398 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
        float _2399 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2320 = (((((_2379 * _2144) + _881) * cbLight._m0[_2330].x) * _2398) * _2399) + _2256;
        _2322 = (((((_2379 * _2146) + _883) * cbLight._m0[_2330].y) * _2398) * _2399) + _2257;
        _2324 = (((((_2379 * _2147) + _884) * cbLight._m0[_2330].z) * _2398) * _2399) + _2258;
    }
    float _2434;
    float _2436;
    float _2438;
    if (_2048)
    {
        _2434 = _2320;
        _2436 = _2322;
        _2438 = _2324;
    }
    else
    {
        uint _2445 = _1954 + 3u;
        uint _2449 = _1954 + 11u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _734) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _811;
        float _2466 = cbLight._m0[_2445].y + _812;
        float _2467 = cbLight._m0[_2445].z + _813;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2445].xyz));
        float _4355 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2479 = dot(vec3(_731, _732, _733), vec3(_2472, _2473, _2474));
        float _4366 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4377 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0);
        float _2505 = 1.0 - _2464;
        float _2515 = (0.5 / (((_2122 * ((_2478 * _2505) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2505) + _2464) * _2478))) * _2478;
        float _4388 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2517 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2518 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2434 = (((((_2498 * _2144) + _881) * cbLight._m0[_2449].x) * _2517) * _2518) + _2320;
        _2436 = (((((_2498 * _2146) + _883) * cbLight._m0[_2449].y) * _2517) * _2518) + _2322;
        _2438 = (((((_2498 * _2147) + _884) * cbLight._m0[_2449].z) * _2517) * _2518) + _2324;
    }
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    if (_1952.y == 0u)
    {
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2593;
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2593;
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2593;
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.x;
        uint _2620 = uint((float(_2608.y) * floor(float(uint(cbSceneParam._m0[85u].y * _820) / _2609))) + floor(float(uint(cbSceneParam._m0[85u].x * _819) / _2609)));
        float _2630 = (log2(_2596 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2631 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        uint _2634 = uint(isnan(14.0) ? _2631 : (isnan(_2631) ? 14.0 : min(_2631, 14.0)));
        uvec4 _2639 = texelFetch(g_lightClusterGridBuffer, int(((_2634 << 2u) + (_2620 << 6u)) >> 2u));
        uint _2640 = _2639.x;
        uint _2641 = _2608.z;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        if (((((1u << ((_2641 >> 4u) & 15u)) + 4294967295u) & _2640) == 0u) || ((_2641 & 240u) == 0u))
        {
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
        }
        else
        {
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            uint _2892 = 0u;
            uint _2901;
            bool _2902;
            for (;;)
            {
                _2901 = texelFetch(g_lightClassification, int((((_2634 << 5u) + (_2620 << 9u)) + (_2892 << 2u)) >> 2u)).x;
                _2902 = _2901 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2902)
                {
                    frontier_phi_61_pred = _2886;
                    frontier_phi_61_pred_1 = _2891;
                    frontier_phi_61_pred_2 = _2890;
                    frontier_phi_61_pred_3 = _2889;
                    frontier_phi_61_pred_4 = _2888;
                    frontier_phi_61_pred_5 = _2887;
                }
                else
                {
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    uint _3016;
                    _3010 = _2886;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2901;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    for (;;)
                    {
                        uint _3020 = uint(findLSB(_3016)) + (_2892 << 5u);
                        uint _3017 = (_3016 + 4294967295u) & _3016;
                        uint _3022 = _3020 * 48u;
                        vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 3u)).x));
                        uint _3042 = (_3020 * 48u) + 4u;
                        vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 3u)).x));
                        uint _3061 = (_3020 * 48u) + 8u;
                        vec3 _3072 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x));
                        float _3076 = _3036.x - _2594;
                        float _3077 = _3036.y - _2595;
                        float _3078 = _3036.z - _2596;
                        float _3079 = dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078));
                        float _3082 = inversesqrt(_3079);
                        float _3083 = _3082 * _3076;
                        float _3084 = _3082 * _3077;
                        float _3085 = _3082 * _3078;
                        float _3086 = dot(vec3(_838, _841, _844), vec3(_3083, _3084, _3085));
                        float _3091 = 1.0 - (_3079 * _3036.w);
                        float _4414 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3092 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3093 = sqrt(_3079) * _3055.w;
                        float _3096 = 1.39999997615814208984375 / (_3093 + 1.39999997615814208984375);
                        float _3097 = _3096 * _3096;
                        float _3100 = ((1.0 - _3097) * _3086) + _3097;
                        float _3103 = _3093 * _3093;
                        float _3107 = ((isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))) * _3092) / ((_3103 * 0.699999988079071044921875) + 1.0);
                        float _3111 = (-0.0) - _2594;
                        float _3112 = (-0.0) - _2595;
                        float _3113 = (-0.0) - _2596;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3118 = _3117 * _3111;
                        float _3119 = _3117 * _3112;
                        float _3120 = _3117 * _3113;
                        float _3128 = exp2(log2(1.0 / ((_3103 * 3.5) + 5.0)) * 0.25);
                        float _3129 = 1.0 - _913;
                        float _3136 = sqrt(1.0 - ((1.0 - (_3129 * _3129)) * (1.0 - (_3128 * _3128))));
                        float _3137 = _3136 * _3136;
                        float _3138 = _3137 * _3137;
                        float _3139 = _3118 + _3083;
                        float _3140 = _3119 + _3084;
                        float _3141 = _3120 + _3085;
                        float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                        float _3149 = dot(vec3(_838, _841, _844), vec3(_3118, _3119, _3120));
                        float _4430 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3152 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3153 = dot(vec3(_838, _841, _844), vec3(_3145 * _3139, _3145 * _3140, _3145 * _3141));
                        float _4441 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3156 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3160 = ((_3156 * _3156) * (_3138 + (-1.0))) + 1.0;
                        float _3161 = _3096 * _3137;
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3086) + _3162;
                        float _4452 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3166 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3167 = 1.0 - _3137;
                        float _3177 = (0.5 / (((_3166 * ((_3152 * _3167) + _3137)) + 9.9999999392252902907785028219223e-09) + (((_3166 * _3167) + _3137) * _3152))) * _3166;
                        float _4463 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3188 = (((_3138 * 3.1415927410125732421875) * (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) / ((_3160 * _3160) * ((_3103 * 2.1991131305694580078125) + 3.141590118408203125))) * _3092;
                        _2945 = (_3107 * _3055.x) + _3013;
                        _2946 = (_3107 * _3055.y) + _3014;
                        _2947 = (_3107 * _3055.z) + _3015;
                        _2942 = (_3188 * _3072.x) + _3010;
                        _2943 = (_3188 * _3072.y) + _3011;
                        _2944 = (_3188 * _3072.z) + _3012;
                        if (_3017 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3010 = _2942;
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _3017;
                        }
                    }
                    frontier_phi_61_pred = _2942;
                    frontier_phi_61_pred_1 = _2947;
                    frontier_phi_61_pred_2 = _2946;
                    frontier_phi_61_pred_3 = _2945;
                    frontier_phi_61_pred_4 = _2944;
                    frontier_phi_61_pred_5 = _2943;
                }
                _2742 = frontier_phi_61_pred;
                _2752 = frontier_phi_61_pred_1;
                _2750 = frontier_phi_61_pred_2;
                _2748 = frontier_phi_61_pred_3;
                _2746 = frontier_phi_61_pred_4;
                _2744 = frontier_phi_61_pred_5;
                uint _2893 = _2892 + 1u;
                if (_2893 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2886 = _2742;
                    _2887 = _2744;
                    _2888 = _2746;
                    _2889 = _2748;
                    _2890 = _2750;
                    _2891 = _2752;
                    _2892 = _2893;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
        }
        uvec4 _2755 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2756 = _2755.z;
        uint _2758 = (_2756 >> 8u) & 15u;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        if (((4294967295u << _2758) & _2640) == 0u)
        {
            _2854 = _2741;
            _2856 = _2743;
            _2858 = _2745;
            _2860 = _2747;
            _2862 = _2749;
            _2864 = _2751;
        }
        else
        {
            float _2879 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
            float _2880 = _2879 * _2594;
            float _2881 = _2879 * _2595;
            float _2882 = _2879 * _2596;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2758 < ((_2756 >> 12u) & 15u))
            {
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2993 = _2741;
                float _2994 = _2743;
                float _2995 = _2745;
                float _2996 = _2747;
                float _2997 = _2749;
                float _2998 = _2751;
                uint _2999 = _2758;
                uint _3008;
                bool _3009;
                for (;;)
                {
                    _3008 = texelFetch(g_lightClassification, int((((_2634 << 5u) + (_2620 << 9u)) + (_2999 << 2u)) >> 2u)).x;
                    _3009 = _3008 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3009)
                    {
                        frontier_phi_67_pred = _2996;
                        frontier_phi_67_pred_1 = _2997;
                        frontier_phi_67_pred_2 = _2998;
                        frontier_phi_67_pred_3 = _2995;
                        frontier_phi_67_pred_4 = _2994;
                        frontier_phi_67_pred_5 = _2993;
                    }
                    else
                    {
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3206 = _2993;
                        float _3207 = _2994;
                        float _3208 = _2995;
                        float _3209 = _2996;
                        float _3210 = _2997;
                        float _3211 = _2998;
                        uint _3212 = _3008;
                        uint _3213;
                        vec4 _3238;
                        float _3239;
                        vec4 _3254;
                        vec3 _3266;
                        vec4 _3281;
                        vec4 _3296;
                        float _3342;
                        bool _3343;
                        for (;;)
                        {
                            uint _3223 = ((_2999 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3212));
                            _3213 = (_3212 + 4294967295u) & _3212;
                            uint _3225 = _3223 * 40u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            _3239 = _3238.w;
                            uint _3241 = (_3223 * 40u) + 4u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3256 = (_3223 * 40u) + 8u;
                            _3266 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x));
                            uint _3268 = (_3223 * 40u) + 16u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3283 = (_3223 * 40u) + 20u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3298 = (_3223 * 40u) + 24u;
                            vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3317 = (_3223 * 40u) + 28u;
                            vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            _3342 = fma(_2596, _3330.z, fma(_2595, _3330.y, _3330.x * _2594)) + _3330.w;
                            _3343 = !((fma(_2596, _3311.z, fma(_2595, _3311.y, _3311.x * _2594)) + _3311.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3343)
                            {
                                float _3370 = _3238.x - _2594;
                                float _3371 = _3238.y - _2595;
                                float _3372 = _3238.z - _2596;
                                float _3373 = dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372));
                                float _3376 = inversesqrt(_3373);
                                float _3377 = _3376 * _3370;
                                float _3378 = _3376 * _3371;
                                float _3379 = _3376 * _3372;
                                float _3383 = 1.0 - (_3373 / (_3239 * _3239));
                                float _4474 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3388 = sqrt(_3373) * _3254.w;
                                float _3390 = 1.39999997615814208984375 / (_3388 + 1.39999997615814208984375);
                                float _3391 = _3390 * _3390;
                                float _3394 = ((1.0 - _3391) * dot(vec3(_3377, _3378, _3379), vec3(_838, _841, _844))) + _3391;
                                float _3397 = _3388 * _3388;
                                float _3401 = (fma(_2596, _3281.z, fma(_2595, _3281.y, _3281.x * _2594)) + _3281.w) / _3342;
                                float _3402 = (fma(_2596, _3296.z, fma(_2595, _3296.y, _3296.x * _2594)) + _3296.w) / _3342;
                                float _3406 = 1.0 - dot(vec2(_3401, _3402), vec2(_3401, _3402));
                                float _4490 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3408 = _3407 * (((isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0))) * _3384) / ((_3397 * 0.699999988079071044921875) + 1.0));
                                float _3420 = exp2(log2(1.0 / ((_3397 * 3.5) + 5.0)) * 0.25);
                                float _3421 = 1.0 - _913;
                                float _3428 = sqrt(1.0 - ((1.0 - (_3421 * _3421)) * (1.0 - (_3420 * _3420))));
                                float _3429 = _3428 * _3428;
                                float _3430 = _3429 * _3429;
                                float _3431 = _3377 - _2880;
                                float _3432 = _3378 - _2881;
                                float _3433 = _3379 - _2882;
                                float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                                float _3441 = dot(vec3(_838, _841, _844), vec3((-0.0) - _2880, (-0.0) - _2881, (-0.0) - _2882));
                                float _4501 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3444 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3445 = dot(vec3(_838, _841, _844), vec3(_3437 * _3431, _3437 * _3432, _3437 * _3433));
                                float _4512 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3448 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3452 = ((_3448 * _3448) * (_3430 + (-1.0))) + 1.0;
                                float _3453 = _3390 * _3429;
                                float _3454 = _3453 * _3453;
                                float _3460 = ((1.0 - _3454) * dot(vec3(_838, _841, _844), vec3(_3377, _3378, _3379))) + _3454;
                                float _4523 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3462 = 1.0 - _3429;
                                float _3472 = (0.5 / (((_3461 * ((_3444 * _3462) + _3429)) + 9.9999999392252902907785028219223e-09) + (((_3461 * _3462) + _3429) * _3444))) * _3461;
                                float _4534 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3482 = (_3407 * _3384) * (((_3430 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3452 * _3452) * ((_3397 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3482 * _3266.x;
                                frontier_phi_73_pred_1 = _3482 * _3266.y;
                                frontier_phi_73_pred_2 = _3408 * _3254.z;
                                frontier_phi_73_pred_3 = _3408 * _3254.y;
                                frontier_phi_73_pred_4 = _3408 * _3254.x;
                                frontier_phi_73_pred_5 = _3482 * _3266.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3486 = frontier_phi_73_pred;
                            _3487 = frontier_phi_73_pred_1;
                            _3491 = frontier_phi_73_pred_2;
                            _3490 = frontier_phi_73_pred_3;
                            _3489 = frontier_phi_73_pred_4;
                            _3488 = frontier_phi_73_pred_5;
                            _3196 = _3489 + _3209;
                            _3197 = _3490 + _3210;
                            _3198 = _3491 + _3211;
                            _3193 = _3486 + _3206;
                            _3194 = _3487 + _3207;
                            _3195 = _3488 + _3208;
                            if (_3213 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3213;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3196;
                        frontier_phi_67_pred_1 = _3197;
                        frontier_phi_67_pred_2 = _3198;
                        frontier_phi_67_pred_3 = _3195;
                        frontier_phi_67_pred_4 = _3194;
                        frontier_phi_67_pred_5 = _3193;
                    }
                    _2861 = frontier_phi_67_pred;
                    _2863 = frontier_phi_67_pred_1;
                    _2865 = frontier_phi_67_pred_2;
                    _2859 = frontier_phi_67_pred_3;
                    _2857 = frontier_phi_67_pred_4;
                    _2855 = frontier_phi_67_pred_5;
                    uint _3000 = _2999 + 1u;
                    if (_3000 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2993 = _2855;
                        _2994 = _2857;
                        _2995 = _2859;
                        _2996 = _2861;
                        _2997 = _2863;
                        _2998 = _2865;
                        _2999 = _3000;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2863;
                frontier_phi_55_56_ladder_1 = _2865;
                frontier_phi_55_56_ladder_2 = _2861;
                frontier_phi_55_56_ladder_3 = _2859;
                frontier_phi_55_56_ladder_4 = _2857;
                frontier_phi_55_56_ladder_5 = _2855;
            }
            else
            {
                frontier_phi_55_56_ladder = _2749;
                frontier_phi_55_56_ladder_1 = _2751;
                frontier_phi_55_56_ladder_2 = _2747;
                frontier_phi_55_56_ladder_3 = _2745;
                frontier_phi_55_56_ladder_4 = _2743;
                frontier_phi_55_56_ladder_5 = _2741;
            }
            _2854 = frontier_phi_55_56_ladder_5;
            _2856 = frontier_phi_55_56_ladder_4;
            _2858 = frontier_phi_55_56_ladder_3;
            _2860 = frontier_phi_55_56_ladder_2;
            _2862 = frontier_phi_55_56_ladder;
            _2864 = frontier_phi_55_56_ladder_1;
        }
        float _2869 = isnan(1.0) ? _897 : (isnan(_897) ? 1.0 : min(_897, 1.0));
        _2653 = (_2869 * _2860) + _2086;
        _2655 = (_2869 * _2862) + _2088;
        _2657 = (_2869 * _2864) + _2090;
        _2659 = ((_2854 * _881) * _2869) + _2434;
        _2661 = ((_2856 * _883) * _2869) + _2436;
        _2663 = ((_2858 * _884) * _2869) + _2438;
    }
    else
    {
        _2653 = _2086;
        _2655 = _2088;
        _2657 = _2090;
        _2659 = _2434;
        _2661 = _2436;
        _2663 = _2438;
    }
    float _4550 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4561 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4572 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    uint _2683 = _244 + 6u;
    float _2691 = _819 / cbSceneParam._m0[86u].x;
    float _2692 = _820 / cbSceneParam._m0[86u].y;
    vec4 _2706 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2691, _2692, (log2((isnan(cbSceneParam._m0[77u].w) ? _753 : (isnan(_753) ? cbSceneParam._m0[77u].w : min(_753, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2708 = _2706.x;
    float _2709 = _2706.y;
    float _2710 = _2706.z;
    float _2711 = _2706.w;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    if (_753 > cbSceneParam._m0[78u].w)
    {
        float _2766 = isnan(_753) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _753 : min(cbSceneParam._m0[80u].w, _753));
        float _2767 = _2766 / _753;
        float _2778 = _2767 * _804;
        float _2779 = _805 * _2767;
        float _2780 = (-0.0) - _2779;
        float _2782 = _2767 * _806;
        float _2784 = (cbSceneParam._m0[77u].w * _2780) / _2766;
        float _2785 = _2784 + cbSceneParam._m0[79u].w;
        float _2786 = cbSceneParam._m0[79u].w - _2779;
        float _2792 = sqrt(((_2778 * _2778) + (_2779 * _2779)) + (_2782 * _2782));
        float _2795 = (1.0 - (cbSceneParam._m0[77u].w / _2766)) * _2792;
        float _2800 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2802 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2955;
        if (abs((_2780 - _2784) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2955 = ((((_2785 > 0.0) ? exp2(_2800 * _2785) : (2.0 - exp2(_2802 * _2785))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2795;
        }
        else
        {
            float _2915 = 1.0 / cbSceneParam._m0[80u].x;
            float _2916 = isnan(_2786) ? _2785 : (isnan(_2785) ? _2786 : max(_2785, _2786));
            float _2917 = isnan(_2786) ? _2785 : (isnan(_2785) ? _2786 : min(_2785, _2786));
            float _2926 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : min(_2916, 0.0));
            float _2927 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : min(_2917, 0.0));
            _2955 = ((abs(_2792 / _2780) * cbSceneParam._m0[80u].y) * ((((_2926 - _2927) * 2.0) - ((exp2(_2800 * (isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0)))) - exp2(_2800 * (isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0))))) * _2915)) - ((exp2(_2802 * _2926) - exp2(_2802 * _2927)) * _2915))) + (_2795 * cbSceneParam._m0[80u].z);
        }
        vec4 _2957 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2691, _2692, 1.0), 0.0);
        float _2966 = exp2((_2955 * (-1.44269502162933349609375)) * (1.0 - _2957.w));
        float _2967 = log2(_2966);
        float _2983 = log2(_2711);
        _2804 = (exp2(_2983 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].x)) * _2957.x) / cbSceneParam._m0[78u].x)) + _2708;
        _2806 = (exp2(_2983 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].y)) * _2957.y) / cbSceneParam._m0[78u].y)) + _2709;
        _2808 = (exp2(_2983 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].z)) * _2957.z) / cbSceneParam._m0[78u].z)) + _2710;
        _2810 = _2966 * _2711;
    }
    else
    {
        _2804 = _2708;
        _2806 = _2709;
        _2808 = _2710;
        _2810 = _2711;
    }
    float _2822 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2823 = _2822 == 3.0;
    float _2824 = log2(_2810);
    float _2831 = exp2(_2824 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2653 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _897))) + ((_2659 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1705)) * cbPerFrame._m0[3u].x));
    float _2832 = exp2(_2824 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2655 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _897))) + ((_2661 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1705)) * cbPerFrame._m0[3u].x));
    float _2833 = exp2(_2824 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2657 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _897))) + ((_2663 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1705)) * cbPerFrame._m0[3u].x));
    float _2842 = (_2822 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2842 * (_2823 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2804)));
    SV_Target.y = _2842 * (_2823 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2806)));
    SV_Target.z = _2842 * (_2823 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2808)));
    SV_Target.w = cbInstanceData._m0[_2683].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2683].w;
}


