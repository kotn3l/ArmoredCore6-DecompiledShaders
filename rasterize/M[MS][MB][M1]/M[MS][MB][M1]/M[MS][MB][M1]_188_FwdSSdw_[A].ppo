#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1479;
float _3883;
float _3884;
float _3885;
float _3886;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _309.x * cbMtdParam._m0[11u].x;
    float _316 = _309.y * cbMtdParam._m0[11u].y;
    float _317 = _309.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _377 = _375.x;
    float _389 = dot(vec4(_377, _375.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _406 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_377 - _389) * cbMtdParam._m0[24u].y) + _389) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3895 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _414 = (_407 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _415 = (_407 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _416 = (_407 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _433 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _455 = _453.x;
    float _465 = dot(vec4(_455, _453.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _479 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_455 - _465) * cbMtdParam._m0[24u].y) + _465) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3906 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _487 = (_480 * ((_433.x * cbMtdParam._m0[13u].x) - _414)) + _414;
    float _488 = (_480 * ((_433.y * cbMtdParam._m0[13u].y) - _415)) + _415;
    float _489 = (_480 * ((_433.z * cbMtdParam._m0[13u].z) - _416)) + _416;
    vec4 _506 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _529 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _550 = _546.z;
    float _557 = ((_529.x - _548) * _407) + _548;
    float _558 = ((_529.y - _549) * _407) + _549;
    float _559 = ((_529.z - _550) * _407) + _550;
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _584 = ((_571.z - _559) * _480) + _559;
    float _587 = ((((_571.x - _557) * _480) + _557) * 2.0) + (-1.0);
    float _588 = ((((_571.y - _558) * _480) + _558) * 2.0) + (-1.0);
    float _589 = dot(vec2(_587, _588), vec2(_587, _588));
    float _3917 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _594 = sqrt(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))));
    vec4 _607 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _625 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _627 = _625.x;
    float _628 = 1.0 - _627;
    float _634 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _637 = ((isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : min(_634, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _646 = (_637 - ((((((_627 - _628) * cbMtdParam._m0[24u].z) + _628) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _637))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3938 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _647 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _654 = (_647 * (cbMtdParam._m0[17u].x - _487)) + _487;
    float _655 = (_647 * (cbMtdParam._m0[17u].y - _488)) + _488;
    float _656 = (_647 * (cbMtdParam._m0[17u].z - _489)) + _489;
    vec4 _668 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _670 = _668.x;
    float _671 = 1.0 - _670;
    float _698 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_670 - _671) * cbMtdParam._m0[24u].w) + _671) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3949 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _707 = ((((cbMtdParam._m0[10u].x - _654) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _699) + _654;
    float _708 = ((((cbMtdParam._m0[10u].y - _655) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _699) + _655;
    float _709 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _656)) * _699) + _656;
    vec4 _735 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _737 = _735.x;
    float _755 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _737) * _407) + _737;
    float _772 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _755) * _480) + _755;
    float _776 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _772) * cbMtdParam._m0[19u].z) + _772;
    float _778 = _776 - (_776 * _647);
    float _780 = _778 - (_778 * _699);
    float _785 = (((_506.z - _584) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _584;
    vec4 _799 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _806 = (_799.x * 2.0) + (-1.0);
    float _807 = (_799.y * 2.0) + (-1.0);
    float _808 = dot(vec2(_806, _807), vec2(_806, _807));
    float _3960 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _816 = (_647 * (_799.z - _785)) + _785;
    float _819 = ((cbMtdParam._m0[23u].y - _816) * _699) + _816;
    vec4 _838 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _844 = (_838.x * 2.0) + (-1.0);
    float _845 = (_838.y * 2.0) + (-1.0);
    float _846 = dot(vec2(_844, _845), vec2(_844, _845));
    float _3971 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _856 = _587 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_506.x * 2.0) + (-1.0)));
    float _857 = _588 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_506.y * 2.0) + (-1.0)));
    float _869 = (((_806 - _856) + (cbMtdParam._m0[21u].x * _856)) * _647) + _856;
    float _870 = (((_807 - _857) + (cbMtdParam._m0[21u].x * _857)) * _647) + _857;
    float _871 = (_647 * (sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) - _594)) + _594;
    float _882 = (((_844 - _869) + (_869 * cbMtdParam._m0[22u].z)) * _699) + _869;
    float _883 = (((_845 - _870) + (_870 * cbMtdParam._m0[22u].z)) * _699) + _870;
    float _884 = ((sqrt(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) - _871) * _699) + _871;
    float _886 = cbMtdParam._m0[22u].x + _607.w;
    float _889 = fma(_884, _256 * NORMAL.x, fma(_883, _263 * TANGENT.x, (_249 * _241) * _882));
    float _892 = fma(_884, _256 * NORMAL.y, fma(_883, _263 * TANGENT.y, (_249 * _242) * _882));
    float _895 = fma(_884, _256 * NORMAL.z, fma(_883, _263 * TANGENT.z, (_249 * _243) * _882));
    float _899 = inversesqrt(dot(vec3(_889, _892, _895), vec3(_889, _892, _895)));
    float _900 = _899 * _889;
    float _901 = _899 * _892;
    float _902 = _899 * _895;
    float _3982 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _903 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4004 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4015 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4026 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4037 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _908 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _922 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _972 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _962);
    float _973 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _962);
    float _974 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _962);
    float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
    float _979 = _972 * _978;
    float _980 = _973 * _978;
    float _981 = _974 * _978;
    vec4 _986 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _988 = _986.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1160 = sqrt(((_972 * _972) + (_973 * _973)) + (_974 * _974));
        float _1166 = (cbMatDynParam._m0[5u].x * _1160) + cbMatDynParam._m0[5u].y;
        float _4048 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1171 = (cbMatDynParam._m0[5u].z * _1160) + cbMatDynParam._m0[5u].w;
        float _4059 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) - _1167)) + _1167) < ((_988 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _999 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1000 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1018 = fma(_902, cbSceneParam._m0[5u].z, fma(_901, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _900));
    float _1021 = fma(_902, cbSceneParam._m0[6u].z, fma(_901, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _900));
    float _1024 = fma(_902, cbSceneParam._m0[7u].z, fma(_901, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _900));
    uint _1037 = _269 + 9u;
    uint _1038 = _1037 + uint(cbMatDynParam._m0[0u].w);
    float _1044 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_1038].x;
    float _1045 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_1038].y;
    float _1046 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_1038].z;
    float _4070 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1050 = 1.0 - _908;
    float _1051 = _1047 * _1050;
    float _1052 = _1048 * _1050;
    float _1053 = _1049 * _1050;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _908;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _908;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _908;
    float _1061 = _1058 + 0.039999999105930328369140625;
    float _1063 = _1059 + 0.039999999105930328369140625;
    float _1064 = _1060 + 0.039999999105930328369140625;
    vec4 _1073 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _999, cbSceneParam._m0[86u].y * _1000));
    float _1077 = ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * TEXCOORD_5.w) * _1073.x;
    float _1078 = dot(vec3(_900, _901, _902), vec3(_979, _980, _981));
    float _1081 = _1078 * 2.0;
    float _1085 = (_1081 * _900) - _979;
    float _1086 = (_1081 * _901) - _980;
    float _1087 = (_1081 * _902) - _981;
    float _1091 = abs(dot(vec3(_979, _980, _981), vec3(_900, _901, _902)));
    float _4103 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1093 = sqrt(_903);
    float _1106 = exp2((_1093 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1093 * 3.0));
    float _1112 = (1.0 - _1106) * ((_1093 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1113 = _1106 * _1093;
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1478;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1203 = fma(_1149, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141));
        float _1207 = fma(_1149, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141));
        float _1211 = fma(_1149, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141));
        float _1236 = _1141 + _900;
        float _1237 = _1145 + _901;
        float _1238 = _1149 + _902;
        float _1248 = fma(_1238, cbModelParam._m0[26u].z, fma(_1237, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1236)) - _1203;
        float _1249 = fma(_1238, cbModelParam._m0[27u].z, fma(_1237, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1236)) - _1207;
        float _1250 = fma(_1238, cbModelParam._m0[28u].z, fma(_1237, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1236)) - _1211;
        float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
        float _1267 = ((_1254 * _1248) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1203 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1254 * _1249) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1207 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1254 * _1250) / cbModelParam._m0[34u].z) + ((((((_1211 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        float _1306 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1272.x + (-0.5));
        float _1308 = _1306 * (_1272.y + (-0.5));
        float _1309 = _1306 * (_1272.z + (-0.5));
        float _1316 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1279.x + (-0.5));
        float _1318 = _1316 * (_1279.y + (-0.5));
        float _1319 = _1316 * (_1279.z + (-0.5));
        float _1326 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1286.x + (-0.5));
        float _1328 = _1326 * (_1286.y + (-0.5));
        float _1329 = _1326 * (_1286.z + (-0.5));
        float _1336 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1293.x + (-0.5));
        float _1338 = _1336 * (_1293.y + (-0.5));
        float _1339 = _1336 * (_1293.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1360 = (dot(vec3(_900, _901, _902), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1370 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4151 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1372 + 1.0))) + _1377) * _1340;
        float _1387 = _1308 * 0.5;
        float _1388 = _1318 * 0.5;
        float _1389 = _1328 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_900, _901, _902), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4184 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1414 + 1.0))) + _1419) * _1341;
        float _1429 = _1309 * 0.5;
        float _1430 = _1319 * 0.5;
        float _1431 = _1329 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_900, _901, _902), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4217 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1456 + 1.0))) + _1461) * _1342;
        _1478 = _1309;
        _1480 = _1308;
        _1481 = _1307;
        _1482 = _1319;
        _1483 = _1318;
        _1484 = _1317;
        _1485 = _1329;
        _1486 = _1328;
        _1487 = _1327;
        _1488 = _1342;
        _1489 = _1341;
        _1490 = _1340;
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
    }
    else
    {
        _1478 = _1479;
        _1480 = _1479;
        _1481 = _1479;
        _1482 = _1479;
        _1483 = _1479;
        _1484 = _1479;
        _1485 = _1479;
        _1486 = _1479;
        _1487 = _1479;
        _1488 = _1479;
        _1489 = _1479;
        _1490 = _1479;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1520 = fma(_1149, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141));
        float _1524 = fma(_1149, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141));
        float _1528 = fma(_1149, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141));
        float _1551 = _1141 + _900;
        float _1552 = _1145 + _901;
        float _1553 = _1149 + _902;
        float _1563 = fma(_1553, cbModelParam._m0[30u].z, fma(_1552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1551)) - _1520;
        float _1564 = fma(_1553, cbModelParam._m0[31u].z, fma(_1552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1551)) - _1524;
        float _1565 = fma(_1553, cbModelParam._m0[32u].z, fma(_1552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1551)) - _1528;
        float _1569 = inversesqrt(dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565)));
        float _1582 = ((_1569 * _1563) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1520 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1583 = ((_1569 * _1564) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1524 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1584 = ((_1569 * _1565) / cbModelParam._m0[35u].z) + ((((((_1528 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        float _1619 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1586.x + (-0.5));
        float _1621 = _1619 * (_1586.y + (-0.5));
        float _1622 = _1619 * (_1586.z + (-0.5));
        float _1629 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1593.x + (-0.5));
        float _1631 = _1629 * (_1593.y + (-0.5));
        float _1632 = _1629 * (_1593.z + (-0.5));
        float _1639 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1600.x + (-0.5));
        float _1641 = _1639 * (_1600.y + (-0.5));
        float _1642 = _1639 * (_1600.z + (-0.5));
        float _1649 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1607.x + (-0.5));
        float _1651 = _1649 * (_1607.y + (-0.5));
        float _1652 = _1649 * (_1607.z + (-0.5));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = _1620 * 0.5;
        float _1657 = _1630 * 0.5;
        float _1658 = _1640 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_900, _901, _902), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4280 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1683 + 1.0))) + _1688) * _1653;
        float _1698 = _1621 * 0.5;
        float _1699 = _1631 * 0.5;
        float _1700 = _1641 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_900, _901, _902), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4313 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1725 + 1.0))) + _1730) * _1654;
        float _1740 = _1622 * 0.5;
        float _1741 = _1632 * 0.5;
        float _1742 = _1642 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_900, _901, _902), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4346 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1767 + 1.0))) + _1772) * _1655;
        _1789 = _1622;
        _1790 = _1621;
        _1791 = _1620;
        _1792 = _1632;
        _1793 = _1631;
        _1794 = _1630;
        _1795 = _1642;
        _1796 = _1641;
        _1797 = _1640;
        _1798 = _1655;
        _1799 = _1654;
        _1800 = _1653;
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
    }
    else
    {
        _1789 = _1479;
        _1790 = _1479;
        _1791 = _1479;
        _1792 = _1479;
        _1793 = _1479;
        _1794 = _1479;
        _1795 = _1479;
        _1796 = _1479;
        _1797 = _1479;
        _1798 = _1479;
        _1799 = _1479;
        _1800 = _1479;
        _1801 = 0.0;
        _1802 = 0.0;
        _1803 = 0.0;
    }
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1491)) + _1491;
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1492)) + _1492;
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1493)) + _1493;
    float _1836 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1839 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1842 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1813));
    float _1857 = _1085 * 0.5;
    float _1858 = _1086 * 0.5;
    float _1859 = _1087 * 0.5;
    float _1860 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1863 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1866 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1900;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1873 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1478, _1482, _1485, _1488));
        float _1877 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1480, _1483, _1486, _1489));
        float _1881 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1481, _1484, _1487, _1490));
        float _1888 = dot(vec4(cbModelParam._m0[39u]), vec4(_1857, _1858, _1859, 1.0));
        _1900 = dot(vec3(isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1888) ? 0.0 : (isnan(0.0) ? _1888 : max(0.0, _1888))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1900 = 1.0;
    }
    float _1911;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1902 = dot(vec4(cbModelParam._m0[40u]), vec4(_1857, _1858, _1859, 1.0));
        _1911 = dot(vec3(isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1902) ? 0.0 : (isnan(0.0) ? _1902 : max(0.0, _1902))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1911 = 1.0;
    }
    float _1915 = (_1911 * cbModelParam._m0[1u].x) + (_1900 * (1.0 - cbModelParam._m0[1u].x));
    float _1925 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _903);
    float _1926 = isnan(_1925) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1925 : min(cbModelParam._m0[25u].z, _1925));
    float _2007;
    float _2009;
    float _2011;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1974 = fma(_1149, cbModelParam._m0[13u].z, fma(_1145, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1141)) + cbModelParam._m0[13u].w;
        float _1978 = fma(_1149, cbModelParam._m0[14u].z, fma(_1145, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1141)) + cbModelParam._m0[14u].w;
        float _1982 = fma(_1149, cbModelParam._m0[15u].z, fma(_1145, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1141)) + cbModelParam._m0[15u].w;
        float _1985 = fma(_1087, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085));
        float _1988 = fma(_1087, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085));
        float _1991 = fma(_1087, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085));
        float _2019;
        if (_1985 > 0.0)
        {
            _2019 = abs((1.0 - _1974) / _1985);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1974 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2019 = frontier_phi_17_15_ladder;
        }
        float _2243;
        if (_1988 > 0.0)
        {
            _2243 = abs((1.0 - _1978) / _1988);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1978 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2243 = frontier_phi_26_22_ladder;
        }
        float _2500;
        if (_1991 > 0.0)
        {
            _2500 = abs((1.0 - _1982) / _1991);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1982 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2500 = frontier_phi_38_33_ladder;
        }
        float _2502 = isnan(_2243) ? _2019 : (isnan(_2019) ? _2243 : min(_2019, _2243));
        float _2503 = isnan(_2500) ? _2502 : (isnan(_2502) ? _2500 : min(_2502, _2500));
        float _2507 = (_2503 * _1985) + _1974;
        float _2508 = (_2503 * _1988) + _1978;
        float _2509 = (_2503 * _1991) + _1982;
        float _2510 = _2503 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2510;
        float _2514 = _2510 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 > _2514) || ((_2508 < _2512) || ((_2507 < _2512) || (_2507 > _2514))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2509, cbModelParam._m0[9u].z, fma(_2508, cbModelParam._m0[9u].y, _2507 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2509, cbModelParam._m0[10u].z, fma(_2508, cbModelParam._m0[10u].y, _2507 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2509, cbModelParam._m0[11u].z, fma(_2508, cbModelParam._m0[11u].y, _2507 * cbModelParam._m0[11u].x))), _1926);
            frontier_phi_16_38_ladder = _2637.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2637.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2637.x * cbModelParam._m0[1u].y;
        }
        _2007 = frontier_phi_16_38_ladder_2;
        _2009 = frontier_phi_16_38_ladder_1;
        _2011 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1085, _1086, _1087), _1926);
        _2007 = _1995.x * cbModelParam._m0[1u].y;
        _2009 = _1995.y * cbModelParam._m0[1u].y;
        _2011 = _1995.z * cbModelParam._m0[1u].y;
    }
    float _2015 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _903);
    float _2016 = isnan(_2015) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2015 : min(cbModelParam._m0[25u].w, _2015));
    float _2106;
    float _2108;
    float _2110;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2070 = fma(_1149, cbModelParam._m0[21u].z, fma(_1145, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1141)) + cbModelParam._m0[21u].w;
        float _2074 = fma(_1149, cbModelParam._m0[22u].z, fma(_1145, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1141)) + cbModelParam._m0[22u].w;
        float _2078 = fma(_1149, cbModelParam._m0[23u].z, fma(_1145, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1141)) + cbModelParam._m0[23u].w;
        float _2081 = fma(_1087, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085));
        float _2084 = fma(_1087, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085));
        float _2087 = fma(_1087, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085));
        float _2248;
        if (_2081 > 0.0)
        {
            _2248 = abs((1.0 - _2070) / _2081);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2070 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2248 = frontier_phi_28_24_ladder;
        }
        float _2527;
        if (_2084 > 0.0)
        {
            _2527 = abs((1.0 - _2074) / _2084);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2074 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2527 = frontier_phi_40_35_ladder;
        }
        float _2740;
        if (_2087 > 0.0)
        {
            _2740 = abs((1.0 - _2078) / _2087);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2078 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2740 = frontier_phi_49_46_ladder;
        }
        float _2742 = isnan(_2527) ? _2248 : (isnan(_2248) ? _2527 : min(_2248, _2527));
        float _2743 = isnan(_2740) ? _2742 : (isnan(_2742) ? _2740 : min(_2742, _2740));
        float _2747 = (_2743 * _2081) + _2070;
        float _2748 = (_2743 * _2084) + _2074;
        float _2749 = (_2743 * _2087) + _2078;
        float _2750 = _2743 * 9.9999997473787516355514526367188e-05;
        float _2751 = (-1.0) - _2750;
        float _2753 = _2750 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2749 > _2753) || ((_2749 < _2751) || ((_2748 > _2753) || ((_2748 < _2751) || ((_2747 < _2751) || (_2747 > _2753))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2948 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2749, cbModelParam._m0[17u].z, fma(_2748, cbModelParam._m0[17u].y, _2747 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2749, cbModelParam._m0[18u].z, fma(_2748, cbModelParam._m0[18u].y, _2747 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2749, cbModelParam._m0[19u].z, fma(_2748, cbModelParam._m0[19u].y, _2747 * cbModelParam._m0[19u].x))), _2016);
            frontier_phi_25_49_ladder = _2948.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2948.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2948.x * cbModelParam._m0[1u].z;
        }
        _2106 = frontier_phi_25_49_ladder_2;
        _2108 = frontier_phi_25_49_ladder_1;
        _2110 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2090 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1085, _1086, _1087), _2016);
        _2106 = _2090.x * cbModelParam._m0[1u].z;
        _2108 = _2090.y * cbModelParam._m0[1u].z;
        _2110 = _2090.z * cbModelParam._m0[1u].z;
    }
    float _2123 = (((_1112 * _1061) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2106 - _2007)) + _2007);
    float _2125 = (((_1112 * _1063) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2108 - _2009)) + _2009);
    float _2127 = (((_1112 * _1064) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2110 - _2011)) + _2011);
    float _2130 = fma(_2127, cbSceneParam._m0[89u].z, fma(_2125, cbSceneParam._m0[89u].y, _2123 * cbSceneParam._m0[89u].x));
    float _2133 = fma(_2127, cbSceneParam._m0[90u].z, fma(_2125, cbSceneParam._m0[90u].y, _2123 * cbSceneParam._m0[90u].x));
    float _2136 = fma(_2127, cbSceneParam._m0[91u].z, fma(_2125, cbSceneParam._m0[91u].y, _2123 * cbSceneParam._m0[91u].x));
    vec4 _2144 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_999, _1000));
    float _2146 = _2144.w;
    float _2158 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2146);
    float _2159 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2146);
    float _2160 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2146);
    uvec4 _2164 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2166 = _2164.x * 14u;
    uint _2167 = _2166 + 13u;
    float _2174 = _1077 + (-1.0);
    float _2179 = (cbLight._m0[_2167].x * _2174) + 1.0;
    float _2180 = (cbLight._m0[_2167].y * _2174) + 1.0;
    float _2181 = (cbLight._m0[_2167].z * _2174) + 1.0;
    float _2182 = (cbLight._m0[_2167].w * _2174) + 1.0;
    uint _2183 = _2166 + 5u;
    float _2189 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
    uint _2193 = _2166 + 4u;
    float _2202 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2206 = _2166 | 1u;
    float _2217 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_900, _901, _902));
    float _2220 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_900, _901, _902));
    float _4482 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _4493 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2225 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.3183098733425140380859375;
    float _2227 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2234 = ((cbLight._m0[_2183].x * _2189) * _2227) + (((cbLight._m0[_2193].x * _2158) * _2202) * _2225);
    float _2235 = ((_2189 * cbLight._m0[_2183].y) * _2227) + (((cbLight._m0[_2193].y * _2159) * _2202) * _2225);
    float _2236 = ((_2189 * cbLight._m0[_2183].z) * _2227) + (((cbLight._m0[_2193].z * _2160) * _2202) * _2225);
    uvec4 _2240 = floatBitsToUint(cbLight._m0[_2166 + 12u]);
    bool _2242 = _2240.x == 0u;
    float _2253;
    float _2255;
    float _2257;
    if (_2242)
    {
        _2253 = _2234;
        _2255 = _2235;
        _2257 = _2236;
    }
    else
    {
        uint _2261 = _2166 + 6u;
        float _2277 = (dot(vec3(cbLight._m0[_2166 + 2u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2278 = _2277 * _2277;
        float _4504 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2279 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2280 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2253 = (((cbLight._m0[_2261].x * 0.3183098733425140380859375) * _2279) * _2280) + _2234;
        _2255 = (((cbLight._m0[_2261].y * 0.3183098733425140380859375) * _2279) * _2280) + _2235;
        _2257 = (((cbLight._m0[_2261].z * 0.3183098733425140380859375) * _2279) * _2280) + _2236;
    }
    bool _2260 = _2240.y == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2260)
    {
        _2298 = _2253;
        _2300 = _2255;
        _2302 = _2257;
    }
    else
    {
        uint _2471 = _2166 + 7u;
        float _2487 = (dot(vec3(cbLight._m0[_2166 + 3u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2488 = _2487 * _2487;
        float _4520 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2489 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2490 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2298 = (((cbLight._m0[_2471].x * 0.3183098733425140380859375) * _2489) * _2490) + _2253;
        _2300 = (((cbLight._m0[_2471].y * 0.3183098733425140380859375) * _2489) * _2490) + _2255;
        _2302 = (((cbLight._m0[_2471].z * 0.3183098733425140380859375) * _2489) * _2490) + _2257;
    }
    uint _2305 = _2166 + 8u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _903) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2166].x + _979;
    float _2321 = cbLight._m0[_2166].y + _980;
    float _2322 = cbLight._m0[_2166].z + _981;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2166].xyz));
    float _4536 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _4547 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2334 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2335 = dot(vec3(_900, _901, _902), vec3(_2327, _2328, _2329));
    float _4558 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2339 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2327, _2328, _2329));
    float _4569 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2343 = _2319 * _2319;
    float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
    float _2355 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
    float _2356 = 0.959999978542327880859375 - _1058;
    float _2358 = 0.959999978542327880859375 - _1059;
    float _2359 = 0.959999978542327880859375 - _1060;
    float _2366 = 1.0 - _2319;
    float _2377 = (0.5 / (((_2334 * ((_2333 * _2366) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2366) + _2319) * _2333))) * _2333;
    float _4580 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2379 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
    uint _2393 = _2166 + 9u;
    float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _903) * 0.949999988079071044921875);
    float _2405 = _2404 * _2404;
    float _2406 = cbLight._m0[_2206].x + _979;
    float _2407 = cbLight._m0[_2206].y + _980;
    float _2408 = cbLight._m0[_2206].z + _981;
    float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
    float _2413 = _2412 * _2406;
    float _2414 = _2412 * _2407;
    float _2415 = _2412 * _2408;
    float _2416 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2206].xyz));
    float _4591 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2419 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2420 = dot(vec3(_900, _901, _902), vec3(_2413, _2414, _2415));
    float _4602 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2423 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2424 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2413, _2414, _2415));
    float _4613 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2428 = _2405 * _2405;
    float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
    float _2439 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
    float _2446 = 1.0 - _2405;
    float _2456 = (0.5 / (((_2334 * ((_2419 * _2446) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2446) + _2405) * _2419))) * _2419;
    float _4624 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2458 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
    float _2468 = (((((_2439 * _2356) + _1061) * cbLight._m0[_2393].x) * _2458) * _2189) + ((((cbLight._m0[_2305].x * _2158) * ((_2355 * _2356) + _1061)) * _2379) * _2202);
    float _2469 = (((((_2439 * _2358) + _1063) * cbLight._m0[_2393].y) * _2458) * _2189) + ((((cbLight._m0[_2305].y * _2159) * ((_2355 * _2358) + _1063)) * _2379) * _2202);
    float _2470 = (((((_2439 * _2359) + _1064) * cbLight._m0[_2393].z) * _2458) * _2189) + ((((cbLight._m0[_2305].z * _2160) * ((_2355 * _2359) + _1064)) * _2379) * _2202);
    float _2532;
    float _2534;
    float _2536;
    if (_2242)
    {
        _2532 = _2468;
        _2534 = _2469;
        _2536 = _2470;
    }
    else
    {
        uint _2538 = _2166 + 2u;
        uint _2542 = _2166 + 10u;
        float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2538].w)) * _903) * 0.949999988079071044921875);
        float _2557 = _2556 * _2556;
        float _2558 = cbLight._m0[_2538].x + _979;
        float _2559 = cbLight._m0[_2538].y + _980;
        float _2560 = cbLight._m0[_2538].z + _981;
        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
        float _2565 = _2564 * _2558;
        float _2566 = _2564 * _2559;
        float _2567 = _2564 * _2560;
        float _2568 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2538].xyz));
        float _4635 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2572 = dot(vec3(_900, _901, _902), vec3(_2565, _2566, _2567));
        float _4646 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2576 = dot(vec3(cbLight._m0[_2538].xyz), vec3(_2565, _2566, _2567));
        float _4657 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2580 = _2557 * _2557;
        float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
        float _2591 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
        float _2598 = 1.0 - _2557;
        float _2608 = (0.5 / (((_2334 * ((_2571 * _2598) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2598) + _2557) * _2571))) * _2571;
        float _4668 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2610 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
        float _2611 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2532 = (((((_2591 * _2356) + _1061) * cbLight._m0[_2542].x) * _2610) * _2611) + _2468;
        _2534 = (((((_2591 * _2358) + _1063) * cbLight._m0[_2542].y) * _2610) * _2611) + _2469;
        _2536 = (((((_2591 * _2359) + _1064) * cbLight._m0[_2542].z) * _2610) * _2611) + _2470;
    }
    float _2646;
    float _2648;
    float _2650;
    if (_2260)
    {
        _2646 = _2532;
        _2648 = _2534;
        _2650 = _2536;
    }
    else
    {
        uint _2657 = _2166 + 3u;
        uint _2661 = _2166 + 11u;
        float _2675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2657].w)) * _903) * 0.949999988079071044921875);
        float _2676 = _2675 * _2675;
        float _2677 = cbLight._m0[_2657].x + _979;
        float _2678 = cbLight._m0[_2657].y + _980;
        float _2679 = cbLight._m0[_2657].z + _981;
        float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
        float _2684 = _2683 * _2677;
        float _2685 = _2683 * _2678;
        float _2686 = _2683 * _2679;
        float _2687 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2657].xyz));
        float _4684 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2690 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2691 = dot(vec3(_900, _901, _902), vec3(_2684, _2685, _2686));
        float _4695 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2695 = dot(vec3(cbLight._m0[_2657].xyz), vec3(_2684, _2685, _2686));
        float _4706 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2699 = _2676 * _2676;
        float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
        float _2710 = exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0);
        float _2717 = 1.0 - _2676;
        float _2727 = (0.5 / (((_2334 * ((_2690 * _2717) + _2676)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2717) + _2676) * _2690))) * _2690;
        float _4717 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2729 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
        float _2730 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2646 = (((((_2710 * _2356) + _1061) * cbLight._m0[_2661].x) * _2729) * _2730) + _2532;
        _2648 = (((((_2710 * _2358) + _1063) * cbLight._m0[_2661].y) * _2729) * _2730) + _2534;
        _2650 = (((((_2710 * _2359) + _1064) * cbLight._m0[_2661].z) * _2729) * _2730) + _2536;
    }
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    if (_2164.y == 0u)
    {
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2806 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2805;
        float _2807 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2805;
        float _2808 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2805;
        uvec4 _2820 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2821 = _2820.x;
        uint _2832 = uint((float(_2820.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1000) / _2821))) + floor(float(uint(cbSceneParam._m0[85u].x * _999) / _2821)));
        float _2842 = (log2(_2808 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2843 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        uint _2846 = uint(isnan(14.0) ? _2843 : (isnan(_2843) ? 14.0 : min(_2843, 14.0)));
        uvec4 _2851 = texelFetch(g_lightClusterGridBuffer, int(((_2846 << 2u) + (_2832 << 6u)) >> 2u));
        uint _2852 = _2851.x;
        uint _2853 = _2820.z;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((((1u << ((_2853 >> 4u) & 15u)) + 4294967295u) & _2852) == 0u) || ((_2853 & 240u) == 0u))
        {
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
        }
        else
        {
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            uint _3112 = 0u;
            uint _3121;
            bool _3122;
            for (;;)
            {
                _3121 = texelFetch(g_lightClassification, int((((_2846 << 5u) + (_2832 << 9u)) + (_3112 << 2u)) >> 2u)).x;
                _3122 = _3121 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3122)
                {
                    frontier_phi_66_pred = _3106;
                    frontier_phi_66_pred_1 = _3111;
                    frontier_phi_66_pred_2 = _3110;
                    frontier_phi_66_pred_3 = _3109;
                    frontier_phi_66_pred_4 = _3108;
                    frontier_phi_66_pred_5 = _3107;
                }
                else
                {
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    uint _3257;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3121;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    for (;;)
                    {
                        uint _3261 = uint(findLSB(_3257)) + (_3112 << 5u);
                        uint _3258 = (_3257 + 4294967295u) & _3257;
                        uint _3263 = _3261 * 48u;
                        vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 3u)).x));
                        uint _3283 = (_3261 * 48u) + 4u;
                        vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3283)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 3u)).x));
                        uint _3302 = (_3261 * 48u) + 8u;
                        vec3 _3313 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3302)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 2u)).x));
                        float _3317 = _3277.x - _2806;
                        float _3318 = _3277.y - _2807;
                        float _3319 = _3277.z - _2808;
                        float _3320 = dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319));
                        float _3323 = inversesqrt(_3320);
                        float _3324 = _3323 * _3317;
                        float _3325 = _3323 * _3318;
                        float _3326 = _3323 * _3319;
                        float _3327 = dot(vec3(_1018, _1021, _1024), vec3(_3324, _3325, _3326));
                        float _3332 = 1.0 - (_3320 * _3277.w);
                        float _4743 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3333 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3334 = sqrt(_3320) * _3296.w;
                        float _3337 = 1.39999997615814208984375 / (_3334 + 1.39999997615814208984375);
                        float _3338 = _3337 * _3337;
                        float _3341 = ((1.0 - _3338) * _3327) + _3338;
                        float _3344 = _3334 * _3334;
                        float _3348 = ((isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0))) * _3333) / ((_3344 * 0.699999988079071044921875) + 1.0);
                        float _3352 = (-0.0) - _2806;
                        float _3353 = (-0.0) - _2807;
                        float _3354 = (-0.0) - _2808;
                        float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                        float _3359 = _3358 * _3352;
                        float _3360 = _3358 * _3353;
                        float _3361 = _3358 * _3354;
                        float _3369 = exp2(log2(1.0 / ((_3344 * 3.5) + 5.0)) * 0.25);
                        float _3370 = 1.0 - _1093;
                        float _3377 = sqrt(1.0 - ((1.0 - (_3370 * _3370)) * (1.0 - (_3369 * _3369))));
                        float _3378 = _3377 * _3377;
                        float _3379 = _3378 * _3378;
                        float _3380 = _3359 + _3324;
                        float _3381 = _3360 + _3325;
                        float _3382 = _3361 + _3326;
                        float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                        float _3390 = dot(vec3(_1018, _1021, _1024), vec3(_3359, _3360, _3361));
                        float _4759 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3393 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3394 = dot(vec3(_1018, _1021, _1024), vec3(_3386 * _3380, _3386 * _3381, _3386 * _3382));
                        float _4770 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3397 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3401 = ((_3397 * _3397) * (_3379 + (-1.0))) + 1.0;
                        float _3402 = _3337 * _3378;
                        float _3403 = _3402 * _3402;
                        float _3406 = ((1.0 - _3403) * _3327) + _3403;
                        float _4781 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3407 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3408 = 1.0 - _3378;
                        float _3418 = (0.5 / (((_3407 * ((_3393 * _3408) + _3378)) + 9.9999999392252902907785028219223e-09) + (((_3407 * _3408) + _3378) * _3393))) * _3407;
                        float _4792 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3429 = (((_3379 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3401 * _3401) * ((_3344 * 2.1991131305694580078125) + 3.141590118408203125))) * _3333;
                        _3181 = (_3348 * _3296.x) + _3254;
                        _3182 = (_3348 * _3296.y) + _3255;
                        _3183 = (_3348 * _3296.z) + _3256;
                        _3178 = (_3429 * _3313.x) + _3251;
                        _3179 = (_3429 * _3313.y) + _3252;
                        _3180 = (_3429 * _3313.z) + _3253;
                        if (_3258 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3258;
                        }
                    }
                    frontier_phi_66_pred = _3178;
                    frontier_phi_66_pred_1 = _3183;
                    frontier_phi_66_pred_2 = _3182;
                    frontier_phi_66_pred_3 = _3181;
                    frontier_phi_66_pred_4 = _3180;
                    frontier_phi_66_pred_5 = _3179;
                }
                _2954 = frontier_phi_66_pred;
                _2964 = frontier_phi_66_pred_1;
                _2962 = frontier_phi_66_pred_2;
                _2960 = frontier_phi_66_pred_3;
                _2958 = frontier_phi_66_pred_4;
                _2956 = frontier_phi_66_pred_5;
                uint _3113 = _3112 + 1u;
                if (_3113 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3106 = _2954;
                    _3107 = _2956;
                    _3108 = _2958;
                    _3109 = _2960;
                    _3110 = _2962;
                    _3111 = _2964;
                    _3112 = _3113;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
        }
        uvec4 _2967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2968 = _2967.z;
        uint _2970 = (_2968 >> 8u) & 15u;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        if (((4294967295u << _2970) & _2852) == 0u)
        {
            _3074 = _2953;
            _3076 = _2955;
            _3078 = _2957;
            _3080 = _2959;
            _3082 = _2961;
            _3084 = _2963;
        }
        else
        {
            float _3099 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
            float _3100 = _3099 * _2806;
            float _3101 = _3099 * _2807;
            float _3102 = _3099 * _2808;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2970 < ((_2968 >> 12u) & 15u))
            {
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3234 = _2953;
                float _3235 = _2955;
                float _3236 = _2957;
                float _3237 = _2959;
                float _3238 = _2961;
                float _3239 = _2963;
                uint _3240 = _2970;
                uint _3249;
                bool _3250;
                for (;;)
                {
                    _3249 = texelFetch(g_lightClassification, int((((_2846 << 5u) + (_2832 << 9u)) + (_3240 << 2u)) >> 2u)).x;
                    _3250 = _3249 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3250)
                    {
                        frontier_phi_77_pred = _3239;
                        frontier_phi_77_pred_1 = _3238;
                        frontier_phi_77_pred_2 = _3237;
                        frontier_phi_77_pred_3 = _3236;
                        frontier_phi_77_pred_4 = _3235;
                        frontier_phi_77_pred_5 = _3234;
                    }
                    else
                    {
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3456 = _3234;
                        float _3457 = _3235;
                        float _3458 = _3236;
                        float _3459 = _3237;
                        float _3460 = _3238;
                        float _3461 = _3239;
                        uint _3462 = _3249;
                        uint _3463;
                        vec4 _3488;
                        float _3489;
                        vec4 _3504;
                        vec3 _3516;
                        vec4 _3531;
                        vec4 _3546;
                        float _3592;
                        bool _3593;
                        for (;;)
                        {
                            uint _3473 = ((_3240 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3462));
                            _3463 = (_3462 + 4294967295u) & _3462;
                            uint _3475 = _3473 * 40u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            _3489 = _3488.w;
                            uint _3491 = (_3473 * 40u) + 4u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3506 = (_3473 * 40u) + 8u;
                            _3516 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x));
                            uint _3518 = (_3473 * 40u) + 16u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3473 * 40u) + 20u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3548 = (_3473 * 40u) + 24u;
                            vec4 _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3567 = (_3473 * 40u) + 28u;
                            vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            _3592 = fma(_2808, _3580.z, fma(_2807, _3580.y, _3580.x * _2806)) + _3580.w;
                            _3593 = !((fma(_2808, _3561.z, fma(_2807, _3561.y, _3561.x * _2806)) + _3561.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3593)
                            {
                                float _3620 = _3488.x - _2806;
                                float _3621 = _3488.y - _2807;
                                float _3622 = _3488.z - _2808;
                                float _3623 = dot(vec3(_3620, _3621, _3622), vec3(_3620, _3621, _3622));
                                float _3626 = inversesqrt(_3623);
                                float _3627 = _3626 * _3620;
                                float _3628 = _3626 * _3621;
                                float _3629 = _3626 * _3622;
                                float _3633 = 1.0 - (_3623 / (_3489 * _3489));
                                float _4803 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3638 = sqrt(_3623) * _3504.w;
                                float _3640 = 1.39999997615814208984375 / (_3638 + 1.39999997615814208984375);
                                float _3641 = _3640 * _3640;
                                float _3644 = ((1.0 - _3641) * dot(vec3(_3627, _3628, _3629), vec3(_1018, _1021, _1024))) + _3641;
                                float _3647 = _3638 * _3638;
                                float _3651 = (fma(_2808, _3531.z, fma(_2807, _3531.y, _3531.x * _2806)) + _3531.w) / _3592;
                                float _3652 = (fma(_2808, _3546.z, fma(_2807, _3546.y, _3546.x * _2806)) + _3546.w) / _3592;
                                float _3656 = 1.0 - dot(vec2(_3651, _3652), vec2(_3651, _3652));
                                float _4819 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3658 = _3657 * (((isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0))) * _3634) / ((_3647 * 0.699999988079071044921875) + 1.0));
                                float _3670 = exp2(log2(1.0 / ((_3647 * 3.5) + 5.0)) * 0.25);
                                float _3671 = 1.0 - _1093;
                                float _3678 = sqrt(1.0 - ((1.0 - (_3671 * _3671)) * (1.0 - (_3670 * _3670))));
                                float _3679 = _3678 * _3678;
                                float _3680 = _3679 * _3679;
                                float _3681 = _3627 - _3100;
                                float _3682 = _3628 - _3101;
                                float _3683 = _3629 - _3102;
                                float _3687 = inversesqrt(dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683)));
                                float _3691 = dot(vec3(_1018, _1021, _1024), vec3((-0.0) - _3100, (-0.0) - _3101, (-0.0) - _3102));
                                float _4830 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3694 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3695 = dot(vec3(_1018, _1021, _1024), vec3(_3687 * _3681, _3687 * _3682, _3687 * _3683));
                                float _4841 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3698 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3702 = ((_3698 * _3698) * (_3680 + (-1.0))) + 1.0;
                                float _3703 = _3640 * _3679;
                                float _3704 = _3703 * _3703;
                                float _3710 = ((1.0 - _3704) * dot(vec3(_1018, _1021, _1024), vec3(_3627, _3628, _3629))) + _3704;
                                float _4852 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3712 = 1.0 - _3679;
                                float _3722 = (0.5 / (((_3711 * ((_3694 * _3712) + _3679)) + 9.9999999392252902907785028219223e-09) + (((_3711 * _3712) + _3679) * _3694))) * _3711;
                                float _4863 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3732 = (_3657 * _3634) * (((_3680 * 3.1415927410125732421875) * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) / ((_3702 * _3702) * ((_3647 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3658 * _3504.y;
                                frontier_phi_83_pred_1 = _3658 * _3504.x;
                                frontier_phi_83_pred_2 = _3732 * _3516.z;
                                frontier_phi_83_pred_3 = _3732 * _3516.y;
                                frontier_phi_83_pred_4 = _3732 * _3516.x;
                                frontier_phi_83_pred_5 = _3658 * _3504.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3740 = frontier_phi_83_pred;
                            _3739 = frontier_phi_83_pred_1;
                            _3738 = frontier_phi_83_pred_2;
                            _3737 = frontier_phi_83_pred_3;
                            _3736 = frontier_phi_83_pred_4;
                            _3741 = frontier_phi_83_pred_5;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            if (_3463 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3463;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3448;
                        frontier_phi_77_pred_1 = _3447;
                        frontier_phi_77_pred_2 = _3446;
                        frontier_phi_77_pred_3 = _3445;
                        frontier_phi_77_pred_4 = _3444;
                        frontier_phi_77_pred_5 = _3443;
                    }
                    _3085 = frontier_phi_77_pred;
                    _3083 = frontier_phi_77_pred_1;
                    _3081 = frontier_phi_77_pred_2;
                    _3079 = frontier_phi_77_pred_3;
                    _3077 = frontier_phi_77_pred_4;
                    _3075 = frontier_phi_77_pred_5;
                    uint _3241 = _3240 + 1u;
                    if (_3241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3234 = _3075;
                        _3235 = _3077;
                        _3236 = _3079;
                        _3237 = _3081;
                        _3238 = _3083;
                        _3239 = _3085;
                        _3240 = _3241;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3079;
                frontier_phi_58_59_ladder_1 = _3085;
                frontier_phi_58_59_ladder_2 = _3083;
                frontier_phi_58_59_ladder_3 = _3081;
                frontier_phi_58_59_ladder_4 = _3077;
                frontier_phi_58_59_ladder_5 = _3075;
            }
            else
            {
                frontier_phi_58_59_ladder = _2957;
                frontier_phi_58_59_ladder_1 = _2963;
                frontier_phi_58_59_ladder_2 = _2961;
                frontier_phi_58_59_ladder_3 = _2959;
                frontier_phi_58_59_ladder_4 = _2955;
                frontier_phi_58_59_ladder_5 = _2953;
            }
            _3074 = frontier_phi_58_59_ladder_5;
            _3076 = frontier_phi_58_59_ladder_4;
            _3078 = frontier_phi_58_59_ladder;
            _3080 = frontier_phi_58_59_ladder_3;
            _3082 = frontier_phi_58_59_ladder_2;
            _3084 = frontier_phi_58_59_ladder_1;
        }
        float _3089 = isnan(1.0) ? _1077 : (isnan(_1077) ? 1.0 : min(_1077, 1.0));
        _2865 = (_3089 * _3080) + _2298;
        _2867 = (_3089 * _3082) + _2300;
        _2869 = (_3089 * _3084) + _2302;
        _2871 = ((_3074 * _1061) * _3089) + _2646;
        _2873 = ((_3076 * _1063) * _3089) + _2648;
        _2875 = ((_3078 * _1064) * _3089) + _2650;
    }
    else
    {
        _2865 = _2298;
        _2867 = _2300;
        _2869 = _2302;
        _2871 = _2646;
        _2873 = _2648;
        _2875 = _2650;
    }
    float _4879 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _4890 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4901 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _2892 = ((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2865 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1077))) + ((_2871 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1915)) * cbPerFrame._m0[3u].x);
    float _2893 = ((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2867 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1077))) + ((_2873 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1915)) * cbPerFrame._m0[3u].x);
    float _2894 = ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2869 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1077))) + ((_2875 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1915)) * cbPerFrame._m0[3u].x);
    uint _2895 = _269 + 6u;
    float _2903 = _999 / cbSceneParam._m0[86u].x;
    float _2904 = _1000 / cbSceneParam._m0[86u].y;
    vec4 _2918 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2903, _2904, (log2((isnan(cbSceneParam._m0[77u].w) ? _922 : (isnan(_922) ? cbSceneParam._m0[77u].w : min(_922, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2920 = _2918.x;
    float _2921 = _2918.y;
    float _2922 = _2918.z;
    float _2923 = _2918.w;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    if (_922 > cbSceneParam._m0[78u].w)
    {
        float _2978 = isnan(_922) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _922 : min(cbSceneParam._m0[80u].w, _922));
        float _2979 = _2978 / _922;
        float _2990 = _2979 * _972;
        float _2991 = _973 * _2979;
        float _2992 = (-0.0) - _2991;
        float _2994 = _2979 * _974;
        float _2996 = (cbSceneParam._m0[77u].w * _2992) / _2978;
        float _2997 = _2996 + cbSceneParam._m0[79u].w;
        float _2998 = cbSceneParam._m0[79u].w - _2991;
        float _3004 = sqrt(((_2990 * _2990) + (_2991 * _2991)) + (_2994 * _2994));
        float _3007 = (1.0 - (cbSceneParam._m0[77u].w / _2978)) * _3004;
        float _3012 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3014 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3191;
        if (abs((_2992 - _2996) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3191 = ((((_2997 > 0.0) ? exp2(_3012 * _2997) : (2.0 - exp2(_3014 * _2997))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3007;
        }
        else
        {
            float _3135 = 1.0 / cbSceneParam._m0[80u].x;
            float _3136 = isnan(_2998) ? _2997 : (isnan(_2997) ? _2998 : max(_2997, _2998));
            float _3137 = isnan(_2998) ? _2997 : (isnan(_2997) ? _2998 : min(_2997, _2998));
            float _3146 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : min(_3136, 0.0));
            float _3147 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : min(_3137, 0.0));
            _3191 = ((abs(_3004 / _2992) * cbSceneParam._m0[80u].y) * ((((_3146 - _3147) * 2.0) - ((exp2(_3012 * (isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0)))) - exp2(_3012 * (isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0))))) * _3135)) - ((exp2(_3014 * _3146) - exp2(_3014 * _3147)) * _3135))) + (_3007 * cbSceneParam._m0[80u].z);
        }
        vec4 _3193 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2903, _2904, 1.0), 0.0);
        float _3202 = exp2((_3191 * (-1.44269502162933349609375)) * (1.0 - _3193.w));
        float _3203 = log2(_3202);
        float _3219 = log2(_2923);
        _3016 = (exp2(_3219 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].x)) * _3193.x) / cbSceneParam._m0[78u].x)) + _2920;
        _3018 = (exp2(_3219 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].y)) * _3193.y) / cbSceneParam._m0[78u].y)) + _2921;
        _3020 = (exp2(_3219 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].z)) * _3193.z) / cbSceneParam._m0[78u].z)) + _2922;
        _3022 = _3202 * _2923;
    }
    else
    {
        _3016 = _2920;
        _3018 = _2921;
        _3020 = _2922;
        _3022 = _2923;
    }
    bool _3229;
    vec4 _3032;
    vec4 _3054;
    float _3056;
    float _3060;
    float _3061;
    float _3062;
    float _3063;
    bool _3073;
    for (;;)
    {
        _3032 = cbMatDynParam._m0[0u];
        float _3034 = roundEven(_3032.y);
        bool _3035 = _3034 == 3.0;
        float _3036 = log2(_3022);
        float _3043 = exp2(_3036 * cbSceneParam._m0[78u].x) * _2892;
        float _3044 = exp2(_3036 * cbSceneParam._m0[78u].y) * _2893;
        float _3045 = exp2(_3036 * cbSceneParam._m0[78u].z) * _2894;
        float _3052 = _988 + (-0.5);
        _3054 = cbMtdParam._m0[1u];
        _3056 = _3054.y * _3052;
        float _3059 = (_3034 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3060 = _3059 * (_3035 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3016)));
        _3061 = _3059 * (_3035 ? _3044 : (_3044 + (cbSceneParam._m0[72u].w * _3018)));
        _3062 = _3059 * (_3035 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3020)));
        _3063 = _3052 * 0.999000012874603271484375;
        _3073 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3073)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _3063) < 0.5)
            {
                _3229 = true;
                break;
            }
        }
        uint _3170 = _1037 + uint(_3032.w);
        if ((cbInstanceData._m0[_3170].w < 1.0) && ((cbInstanceData._m0[_3170].w + _3063) < 0.5))
        {
            _3229 = true;
            break;
        }
        if ((_3056 + 1.0) < _3054.x)
        {
            _3229 = true;
            break;
        }
        _3229 = false;
        break;
    }
    float _3434;
    if (_3229)
    {
        discard_state = true;
        _3434 = 0.0;
    }
    else
    {
        _3434 = cbInstanceData._m0[_2895].w;
    }
    SV_Target.x = _3060;
    SV_Target.y = _3061;
    SV_Target.z = _3062;
    SV_Target.w = _3434;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2895].w;
    discard_exit();
}


