#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1228;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3838 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3849 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3860 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _286) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _287) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = _323.x * cbMtdParam._m0[9u].x;
    float _329 = _323.y * cbMtdParam._m0[9u].y;
    float _330 = _323.z * cbMtdParam._m0[9u].z;
    float _334 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _300.x) * _328;
    float _337 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _300.y) * _329;
    float _340 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _300.z) * _330;
    float _347 = ((_328 - _334) * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) + _334;
    float _348 = ((_329 - _337) * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) + _337;
    float _349 = ((_330 - _340) * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) + _340;
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _397 = _393.z;
    float _401 = (_393.x * 2.0) + (-1.0);
    float _402 = (_393.y * 2.0) + (-1.0);
    float _403 = dot(vec2(_401, _402), vec2(_401, _402));
    float _3871 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _408 = sqrt(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))));
    float _413 = _401 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_367.x * 2.0) + (-1.0)));
    float _414 = _402 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_367.y * 2.0) + (-1.0)));
    float _417 = fma(_408, _236, fma(_414, _243, _413 * _229));
    float _420 = fma(_408, _237, fma(_414, _244, _413 * _230));
    float _423 = fma(_408, _238, fma(_414, _245, _413 * _231));
    float _427 = inversesqrt(dot(vec3(_417, _420, _423), vec3(_417, _420, _423)));
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _465 = _463.x;
    float _466 = 1.0 - _465;
    float _475 = (cbMtdParam._m0[19u].x + dot(vec4(_427 * _417, _427 * _420, _427 * _423, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_465 - _466) * cbMtdParam._m0[24u].z) + _466) * cbMtdParam._m0[21u].z);
    float _3882 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _478 = (-0.0) - cbMtdParam._m0[24u].x;
    float _480 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _480 : (isnan(_480) ? 1.0 : min(_480, 1.0));
    float _488 = _476 - ((_476 * TEXCOORD_8.x) * _481);
    float _489 = _476 - ((_476 * TEXCOORD_8.y) * _481);
    float _490 = _476 - ((_476 * TEXCOORD_8.z) * _481);
    float _497 = (_488 * (cbMtdParam._m0[17u].x - _347)) + _347;
    float _498 = (_489 * (cbMtdParam._m0[17u].y - _348)) + _348;
    float _499 = (_490 * (cbMtdParam._m0[17u].z - _349)) + _349;
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _513 = _511.x;
    float _514 = 1.0 - _513;
    float _542 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_513 - _514) * cbMtdParam._m0[24u].w) + _514) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3903 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _551 = ((((cbMtdParam._m0[10u].x - _497) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _543) + _497;
    float _552 = ((((cbMtdParam._m0[10u].y - _498) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _543) + _498;
    float _553 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _499)) * _543) + _499;
    vec4 _566 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _568 = _566.x;
    float _570 = _568 - (_568 * _488);
    float _572 = _570 - (_570 * _543);
    float _577 = (((_367.z - _397) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _397;
    vec4 _591 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _598 = (_591.x * 2.0) + (-1.0);
    float _599 = (_591.y * 2.0) + (-1.0);
    float _600 = dot(vec2(_598, _599), vec2(_598, _599));
    float _3914 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _608 = ((_591.z - _577) * _488) + _577;
    float _611 = ((cbMtdParam._m0[23u].y - _608) * _543) + _608;
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _636 = (_630.x * 2.0) + (-1.0);
    float _637 = (_630.y * 2.0) + (-1.0);
    float _638 = dot(vec2(_636, _637), vec2(_636, _637));
    float _3925 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _653 = ((sqrt(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) - _408) * _490) + _408;
    float _656 = (((_598 - _413) * _488) + _413) + (cbMtdParam._m0[21u].x * _413);
    float _657 = (((_599 - _414) * _489) + _414) + (cbMtdParam._m0[21u].x * _414);
    float _668 = (((_636 - _656) + (_656 * cbMtdParam._m0[22u].z)) * _543) + _656;
    float _669 = (((_637 - _657) + (_657 * cbMtdParam._m0[22u].z)) * _543) + _657;
    float _670 = (_543 * (sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) - _653)) + _653;
    float _672 = cbMtdParam._m0[22u].x + _393.w;
    float _675 = fma(_670, _236, fma(_669, _243, _668 * _229));
    float _678 = fma(_670, _237, fma(_669, _244, _668 * _230));
    float _681 = fma(_670, _238, fma(_669, _245, _668 * _231));
    float _685 = inversesqrt(dot(vec3(_675, _678, _681), vec3(_675, _678, _681)));
    float _686 = _685 * _675;
    float _687 = _685 * _678;
    float _688 = _685 * _681;
    float _3936 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _689 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3958 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _3969 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3980 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _3991 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _694 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _708 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _758 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _748);
    float _759 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _748);
    float _760 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _748);
    float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
    float _765 = _758 * _764;
    float _766 = _759 * _764;
    float _767 = _760 * _764;
    float _773 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _774 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _795 = fma(_688, cbSceneParam._m0[5u].z, fma(_687, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _686));
    float _798 = fma(_688, cbSceneParam._m0[6u].z, fma(_687, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _686));
    float _801 = fma(_688, cbSceneParam._m0[7u].z, fma(_687, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _686));
    uint _815 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _821 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * cbInstanceData._m0[_815].x;
    float _822 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * cbInstanceData._m0[_815].y;
    float _823 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_815].z;
    float _4002 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _4024 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _827 = 1.0 - _694;
    float _828 = _824 * _827;
    float _829 = _825 * _827;
    float _830 = _826 * _827;
    float _835 = (_824 + (-0.039999999105930328369140625)) * _694;
    float _836 = (_825 + (-0.039999999105930328369140625)) * _694;
    float _837 = (_826 + (-0.039999999105930328369140625)) * _694;
    float _838 = _835 + 0.039999999105930328369140625;
    float _840 = _836 + 0.039999999105930328369140625;
    float _841 = _837 + 0.039999999105930328369140625;
    vec4 _850 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _773, cbSceneParam._m0[86u].y * _774));
    float _854 = ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * TEXCOORD_5.w) * _850.x;
    float _855 = dot(vec3(_686, _687, _688), vec3(_765, _766, _767));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _686) - _765;
    float _863 = (_858 * _687) - _766;
    float _864 = (_858 * _688) - _767;
    float _868 = abs(dot(vec3(_765, _766, _767), vec3(_686, _687, _688)));
    float _4035 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = sqrt(_689);
    float _883 = exp2((_870 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _889 = (1.0 - _883) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _890 = _883 * _870;
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1227;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _952 = fma(_926, cbModelParam._m0[26u].z, fma(_922, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _918));
        float _956 = fma(_926, cbModelParam._m0[27u].z, fma(_922, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _918));
        float _960 = fma(_926, cbModelParam._m0[28u].z, fma(_922, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _918));
        float _985 = _918 + _686;
        float _986 = _922 + _687;
        float _987 = _926 + _688;
        float _997 = fma(_987, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _985)) - _952;
        float _998 = fma(_987, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _985)) - _956;
        float _999 = fma(_987, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _985)) - _960;
        float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
        float _1016 = ((_1003 * _997) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_952 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1003 * _998) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_956 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1003 * _999) / cbModelParam._m0[34u].z) + ((((((_960 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        float _1055 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1021.x + (-0.5));
        float _1057 = _1055 * (_1021.y + (-0.5));
        float _1058 = _1055 * (_1021.z + (-0.5));
        float _1065 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1028.x + (-0.5));
        float _1067 = _1065 * (_1028.y + (-0.5));
        float _1068 = _1065 * (_1028.z + (-0.5));
        float _1075 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1035.x + (-0.5));
        float _1077 = _1075 * (_1035.y + (-0.5));
        float _1078 = _1075 * (_1035.z + (-0.5));
        float _1085 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1042.x + (-0.5));
        float _1087 = _1085 * (_1042.y + (-0.5));
        float _1088 = _1085 * (_1042.z + (-0.5));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = _1056 * 0.5;
        float _1093 = _1066 * 0.5;
        float _1094 = _1076 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1109 = (dot(vec3(_686, _687, _688), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1119 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _4083 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1121 + 1.0))) + _1126) * _1089;
        float _1136 = _1057 * 0.5;
        float _1137 = _1067 * 0.5;
        float _1138 = _1077 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_686, _687, _688), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _4116 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1163 + 1.0))) + _1168) * _1090;
        float _1178 = _1058 * 0.5;
        float _1179 = _1068 * 0.5;
        float _1180 = _1078 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_686, _687, _688), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _4149 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1205 + 1.0))) + _1210) * _1091;
        _1227 = _1058;
        _1229 = _1057;
        _1230 = _1056;
        _1231 = _1068;
        _1232 = _1067;
        _1233 = _1066;
        _1234 = _1078;
        _1235 = _1077;
        _1236 = _1076;
        _1237 = _1091;
        _1238 = _1090;
        _1239 = _1089;
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
    }
    else
    {
        _1227 = _1228;
        _1229 = _1228;
        _1230 = _1228;
        _1231 = _1228;
        _1232 = _1228;
        _1233 = _1228;
        _1234 = _1228;
        _1235 = _1228;
        _1236 = _1228;
        _1237 = _1228;
        _1238 = _1228;
        _1239 = _1228;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1267 = fma(_926, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918));
        float _1271 = fma(_926, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918));
        float _1275 = fma(_926, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918));
        float _1298 = _918 + _686;
        float _1299 = _922 + _687;
        float _1300 = _926 + _688;
        float _1310 = fma(_1300, cbModelParam._m0[30u].z, fma(_1299, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1298)) - _1267;
        float _1311 = fma(_1300, cbModelParam._m0[31u].z, fma(_1299, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1298)) - _1271;
        float _1312 = fma(_1300, cbModelParam._m0[32u].z, fma(_1299, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1298)) - _1275;
        float _1316 = inversesqrt(dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312)));
        float _1329 = ((_1316 * _1310) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1267 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1316 * _1311) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1271 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1331 = ((_1316 * _1312) / cbModelParam._m0[35u].z) + ((((((_1275 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        float _1366 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1333.x + (-0.5));
        float _1368 = _1366 * (_1333.y + (-0.5));
        float _1369 = _1366 * (_1333.z + (-0.5));
        float _1376 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1340.x + (-0.5));
        float _1378 = _1376 * (_1340.y + (-0.5));
        float _1379 = _1376 * (_1340.z + (-0.5));
        float _1386 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1347.x + (-0.5));
        float _1388 = _1386 * (_1347.y + (-0.5));
        float _1389 = _1386 * (_1347.z + (-0.5));
        float _1396 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1354.x + (-0.5));
        float _1398 = _1396 * (_1354.y + (-0.5));
        float _1399 = _1396 * (_1354.z + (-0.5));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = _1367 * 0.5;
        float _1404 = _1377 * 0.5;
        float _1405 = _1387 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_686, _687, _688), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _4212 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1430 + 1.0))) + _1435) * _1400;
        float _1445 = _1368 * 0.5;
        float _1446 = _1378 * 0.5;
        float _1447 = _1388 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_686, _687, _688), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4245 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1472 + 1.0))) + _1477) * _1401;
        float _1487 = _1369 * 0.5;
        float _1488 = _1379 * 0.5;
        float _1489 = _1389 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_686, _687, _688), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4278 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1514 + 1.0))) + _1519) * _1402;
        _1536 = _1369;
        _1537 = _1368;
        _1538 = _1367;
        _1539 = _1379;
        _1540 = _1378;
        _1541 = _1377;
        _1542 = _1389;
        _1543 = _1388;
        _1544 = _1387;
        _1545 = _1402;
        _1546 = _1401;
        _1547 = _1400;
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
    }
    else
    {
        _1536 = _1228;
        _1537 = _1228;
        _1538 = _1228;
        _1539 = _1228;
        _1540 = _1228;
        _1541 = _1228;
        _1542 = _1228;
        _1543 = _1228;
        _1544 = _1228;
        _1545 = _1228;
        _1546 = _1228;
        _1547 = _1228;
        _1548 = 0.0;
        _1549 = 0.0;
        _1550 = 0.0;
    }
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1240)) + _1240;
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1241)) + _1241;
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1242)) + _1242;
    float _1583 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1561, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1561, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1561, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1560));
    float _1604 = _862 * 0.5;
    float _1605 = _863 * 0.5;
    float _1606 = _864 * 0.5;
    float _1607 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1610 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1613 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1647;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1620 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1227, _1231, _1234, _1237));
        float _1624 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1628 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1230, _1233, _1236, _1239));
        float _1635 = dot(vec4(cbModelParam._m0[39u]), vec4(_1604, _1605, _1606, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1635) ? 0.0 : (isnan(0.0) ? _1635 : max(0.0, _1635))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1658;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1649 = dot(vec4(cbModelParam._m0[40u]), vec4(_1604, _1605, _1606, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1662 = (_1658 * cbModelParam._m0[1u].x) + (_1647 * (1.0 - cbModelParam._m0[1u].x));
    float _1672 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _689);
    float _1673 = isnan(_1672) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1672 : min(cbModelParam._m0[25u].z, _1672));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1721 = fma(_926, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918)) + cbModelParam._m0[13u].w;
        float _1725 = fma(_926, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918)) + cbModelParam._m0[14u].w;
        float _1729 = fma(_926, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918)) + cbModelParam._m0[15u].w;
        float _1732 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1735 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1738 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1766;
        if (_1732 > 0.0)
        {
            _1766 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1766 = frontier_phi_14_12_ladder;
        }
        float _1938;
        if (_1735 > 0.0)
        {
            _1938 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1938 = frontier_phi_23_19_ladder;
        }
        float _2234;
        if (_1738 > 0.0)
        {
            _2234 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2234 = frontier_phi_35_30_ladder;
        }
        float _2236 = isnan(_1938) ? _1766 : (isnan(_1766) ? _1938 : min(_1766, _1938));
        float _2237 = isnan(_2234) ? _2236 : (isnan(_2236) ? _2234 : min(_2236, _2234));
        float _2241 = (_2237 * _1732) + _1721;
        float _2242 = (_2237 * _1735) + _1725;
        float _2243 = (_2237 * _1738) + _1729;
        float _2244 = _2237 * 9.9999997473787516355514526367188e-05;
        float _2246 = (-1.0) - _2244;
        float _2248 = _2244 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2243 > _2248) || ((_2243 < _2246) || ((_2242 > _2248) || ((_2242 < _2246) || ((_2241 < _2246) || (_2241 > _2248))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2388 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2243, cbModelParam._m0[9u].z, fma(_2242, cbModelParam._m0[9u].y, _2241 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2243, cbModelParam._m0[10u].z, fma(_2242, cbModelParam._m0[10u].y, _2241 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2243, cbModelParam._m0[11u].z, fma(_2242, cbModelParam._m0[11u].y, _2241 * cbModelParam._m0[11u].x))), _1673);
            frontier_phi_13_35_ladder = _2388.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2388.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2388.x * cbModelParam._m0[1u].y;
        }
        _1754 = frontier_phi_13_35_ladder_2;
        _1756 = frontier_phi_13_35_ladder_1;
        _1758 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1673);
        _1754 = _1742.x * cbModelParam._m0[1u].y;
        _1756 = _1742.y * cbModelParam._m0[1u].y;
        _1758 = _1742.z * cbModelParam._m0[1u].y;
    }
    float _1762 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _689);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1762 : min(cbModelParam._m0[25u].w, _1762));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1817 = fma(_926, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918)) + cbModelParam._m0[21u].w;
        float _1821 = fma(_926, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918)) + cbModelParam._m0[22u].w;
        float _1825 = fma(_926, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918)) + cbModelParam._m0[23u].w;
        float _1828 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1831 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1834 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _1943;
        if (_1828 > 0.0)
        {
            _1943 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1943 = frontier_phi_25_21_ladder;
        }
        float _2261;
        if (_1831 > 0.0)
        {
            _2261 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2261 = frontier_phi_37_32_ladder;
        }
        float _2599;
        if (_1834 > 0.0)
        {
            _2599 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2599 = frontier_phi_47_44_ladder;
        }
        float _2601 = isnan(_2261) ? _1943 : (isnan(_1943) ? _2261 : min(_1943, _2261));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _1828) + _1817;
        float _2607 = (_2602 * _1831) + _1821;
        float _2608 = (_2602 * _1834) + _1825;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2610 = (-1.0) - _2609;
        float _2612 = _2609 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2608 > _2612) || ((_2608 < _2610) || ((_2607 > _2612) || ((_2607 < _2610) || ((_2606 < _2610) || (_2606 > _2612))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2608, cbModelParam._m0[17u].z, fma(_2607, cbModelParam._m0[17u].y, _2606 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2608, cbModelParam._m0[18u].z, fma(_2607, cbModelParam._m0[18u].y, _2606 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2608, cbModelParam._m0[19u].z, fma(_2607, cbModelParam._m0[19u].y, _2606 * cbModelParam._m0[19u].x))), _1763);
            frontier_phi_22_47_ladder = _2730.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2730.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2730.x * cbModelParam._m0[1u].z;
        }
        _1853 = frontier_phi_22_47_ladder_2;
        _1855 = frontier_phi_22_47_ladder_1;
        _1857 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1763);
        _1853 = _1837.x * cbModelParam._m0[1u].z;
        _1855 = _1837.y * cbModelParam._m0[1u].z;
        _1857 = _1837.z * cbModelParam._m0[1u].z;
    }
    float _1870 = (((_889 * _838) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1853 - _1754)) + _1754);
    float _1872 = (((_889 * _840) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1855 - _1756)) + _1756);
    float _1874 = (((_889 * _841) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1857 - _1758)) + _1758);
    float _1877 = fma(_1874, cbSceneParam._m0[89u].z, fma(_1872, cbSceneParam._m0[89u].y, _1870 * cbSceneParam._m0[89u].x));
    float _1880 = fma(_1874, cbSceneParam._m0[90u].z, fma(_1872, cbSceneParam._m0[90u].y, _1870 * cbSceneParam._m0[90u].x));
    float _1883 = fma(_1874, cbSceneParam._m0[91u].z, fma(_1872, cbSceneParam._m0[91u].y, _1870 * cbSceneParam._m0[91u].x));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1925 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1929 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1930 = _1917 / _1929;
    float _1931 = _1921 / _1929;
    float _1932 = _1925 / _1929;
    float _2079;
    float _2080;
    float _2081;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1959 = ((uint(_1932 > cbSceneParam._m0[59u].y) + uint(_1932 > cbSceneParam._m0[59u].x)) + uint(_1932 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1960 = _1959 + 43u;
        uint _1968 = _1959 + 44u;
        uint _1976 = _1959 + 45u;
        uint _1984 = _1959 + 46u;
        float _1995 = fma(_1929, cbSceneParam._m0[_1960].w, fma(_1925, cbSceneParam._m0[_1960].z, fma(_1921, cbSceneParam._m0[_1960].y, _1917 * cbSceneParam._m0[_1960].x)));
        float _1999 = fma(_1929, cbSceneParam._m0[_1968].w, fma(_1925, cbSceneParam._m0[_1968].z, fma(_1921, cbSceneParam._m0[_1968].y, _1917 * cbSceneParam._m0[_1968].x)));
        float _2007 = fma(_1929, cbSceneParam._m0[_1984].w, fma(_1925, cbSceneParam._m0[_1984].z, fma(_1921, cbSceneParam._m0[_1984].y, _1917 * cbSceneParam._m0[_1984].x)));
        float _2012 = cbSceneParam._m0[33u].z * _2007;
        float _2014 = cbSceneParam._m0[33u].w * _2007;
        float _2017 = fma(_1929, cbSceneParam._m0[_1976].w, fma(_1925, cbSceneParam._m0[_1976].z, fma(_1921, cbSceneParam._m0[_1976].y, _1917 * cbSceneParam._m0[_1976].x))) / _2007;
        float _2065 = (cbSceneParam._m0[33u].x - sqrt(((_1931 * _1931) + (_1930 * _1930)) + (_1932 * _1932))) * cbSceneParam._m0[33u].y;
        float _4404 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2072 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 + _1995) / _2007, (_2014 + _1999) / _2007), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2014 + _1995) / _2007, (_1999 - _2012) / _2007), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1995 - _2012) / _2007, (_1999 - _2014) / _2007), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1995 - _2014) / _2007, (_2012 + _1999) / _2007), _2017), 0.0)).x), vec4(0.25)));
        _2079 = 1.0 - (_2072 * cbSceneParam._m0[34u].x);
        _2080 = 1.0 - (_2072 * cbSceneParam._m0[34u].y);
        _2081 = 1.0 - (_2072 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2079 = 1.0;
        _2080 = 1.0;
        _2081 = 1.0;
    }
    float _2145;
    float _2147;
    float _2149;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2133 = fma(_1929, cbSceneParam._m0[63u].w, fma(_1925, cbSceneParam._m0[63u].z, fma(_1921, cbSceneParam._m0[63u].y, _1917 * cbSceneParam._m0[63u].x)));
        float _2134 = fma(_1929, cbSceneParam._m0[60u].w, fma(_1925, cbSceneParam._m0[60u].z, fma(_1921, cbSceneParam._m0[60u].y, _1917 * cbSceneParam._m0[60u].x))) / _2133;
        float _2135 = fma(_1929, cbSceneParam._m0[61u].w, fma(_1925, cbSceneParam._m0[61u].z, fma(_1921, cbSceneParam._m0[61u].y, _1917 * cbSceneParam._m0[61u].x))) / _2133;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2134 >= cbSceneParam._m0[64u].x) && (_2135 >= cbSceneParam._m0[64u].y)) && (_2134 <= cbSceneParam._m0[64u].z)) && (_2135 <= cbSceneParam._m0[64u].w))
        {
            float _2274 = fma(_1929, cbSceneParam._m0[62u].w, fma(_1925, cbSceneParam._m0[62u].z, fma(_1921, cbSceneParam._m0[62u].y, _1917 * cbSceneParam._m0[62u].x))) / _2133;
            float _2278 = isnan(cbSceneParam._m0[41u].w) ? _2274 : (isnan(_2274) ? cbSceneParam._m0[41u].w : max(_2274, cbSceneParam._m0[41u].w));
            float _2321 = (cbSceneParam._m0[33u].x - sqrt(((_1931 * _1931) + (_1930 * _1930)) + (_1932 * _1932))) * cbSceneParam._m0[33u].y;
            float _4420 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
            float _2328 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2134, cbSceneParam._m0[33u].w + _2135), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2134, _2135 - cbSceneParam._m0[33u].z), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2134 - cbSceneParam._m0[33u].z, _2135 - cbSceneParam._m0[33u].w), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2134 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2135), _2278), 0.0)).x), vec4(0.25)));
            float _2332 = 1.0 - (_2328 * cbSceneParam._m0[34u].x);
            float _2333 = 1.0 - (_2328 * cbSceneParam._m0[34u].y);
            float _2334 = 1.0 - (_2328 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2334) ? _2081 : (isnan(_2081) ? _2334 : min(_2081, _2334));
            frontier_phi_34_33_ladder_1 = isnan(_2333) ? _2080 : (isnan(_2080) ? _2333 : min(_2080, _2333));
            frontier_phi_34_33_ladder_2 = isnan(_2332) ? _2079 : (isnan(_2079) ? _2332 : min(_2079, _2332));
        }
        else
        {
            frontier_phi_34_33_ladder = _2081;
            frontier_phi_34_33_ladder_1 = _2080;
            frontier_phi_34_33_ladder_2 = _2079;
        }
        _2145 = frontier_phi_34_33_ladder_2;
        _2147 = frontier_phi_34_33_ladder_1;
        _2149 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2145 = _2079;
        _2147 = _2080;
        _2149 = _2081;
    }
    uvec4 _2154 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2156 = _2154.x * 14u;
    uint _2157 = _2156 + 13u;
    float _2164 = _854 + (-1.0);
    float _2169 = (cbLight._m0[_2157].x * _2164) + 1.0;
    float _2170 = (cbLight._m0[_2157].y * _2164) + 1.0;
    float _2171 = (cbLight._m0[_2157].z * _2164) + 1.0;
    float _2172 = (cbLight._m0[_2157].w * _2164) + 1.0;
    uint _2173 = _2156 + 5u;
    float _2179 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
    uint _2183 = _2156 + 4u;
    float _2193 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
    uint _2197 = _2156 | 1u;
    float _2208 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_686, _687, _688));
    float _2211 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_686, _687, _688));
    float _4456 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _4467 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2216 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * 0.3183098733425140380859375;
    float _2218 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * 0.3183098733425140380859375;
    float _2225 = ((cbLight._m0[_2173].x * _2179) * _2218) + (((cbLight._m0[_2183].x * _2145) * _2193) * _2216);
    float _2226 = ((_2179 * cbLight._m0[_2173].y) * _2218) + (((cbLight._m0[_2183].y * _2147) * _2193) * _2216);
    float _2227 = ((_2179 * cbLight._m0[_2173].z) * _2218) + (((cbLight._m0[_2183].z * _2149) * _2193) * _2216);
    uvec4 _2231 = floatBitsToUint(cbLight._m0[_2156 + 12u]);
    bool _2233 = _2231.x == 0u;
    float _2335;
    float _2337;
    float _2339;
    if (_2233)
    {
        _2335 = _2225;
        _2337 = _2226;
        _2339 = _2227;
    }
    else
    {
        uint _2343 = _2156 + 6u;
        float _2359 = (dot(vec3(cbLight._m0[_2156 + 2u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2360 = _2359 * _2359;
        float _4478 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2361 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2362 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2335 = (((cbLight._m0[_2343].x * 0.3183098733425140380859375) * _2361) * _2362) + _2225;
        _2337 = (((cbLight._m0[_2343].y * 0.3183098733425140380859375) * _2361) * _2362) + _2226;
        _2339 = (((cbLight._m0[_2343].z * 0.3183098733425140380859375) * _2361) * _2362) + _2227;
    }
    bool _2342 = _2231.y == 0u;
    float _2397;
    float _2399;
    float _2401;
    if (_2342)
    {
        _2397 = _2335;
        _2399 = _2337;
        _2401 = _2339;
    }
    else
    {
        uint _2570 = _2156 + 7u;
        float _2586 = (dot(vec3(cbLight._m0[_2156 + 3u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4494 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2589 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2397 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2335;
        _2399 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2337;
        _2401 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2339;
    }
    uint _2404 = _2156 + 8u;
    float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _689) * 0.949999988079071044921875);
    float _2418 = _2417 * _2417;
    float _2419 = cbLight._m0[_2156].x + _765;
    float _2420 = cbLight._m0[_2156].y + _766;
    float _2421 = cbLight._m0[_2156].z + _767;
    float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
    float _2426 = _2425 * _2419;
    float _2427 = _2425 * _2420;
    float _2428 = _2425 * _2421;
    float _2429 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2156].xyz));
    float _4510 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _4521 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2433 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2434 = dot(vec3(_686, _687, _688), vec3(_2426, _2427, _2428));
    float _4532 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2426, _2427, _2428));
    float _4543 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2418 * _2418;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2454 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
    float _2455 = 0.959999978542327880859375 - _835;
    float _2457 = 0.959999978542327880859375 - _836;
    float _2458 = 0.959999978542327880859375 - _837;
    float _2465 = 1.0 - _2418;
    float _2476 = (0.5 / (((_2433 * ((_2432 * _2465) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2465) + _2418) * _2432))) * _2432;
    float _4554 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2478 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    uint _2492 = _2156 + 9u;
    float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _689) * 0.949999988079071044921875);
    float _2504 = _2503 * _2503;
    float _2505 = cbLight._m0[_2197].x + _765;
    float _2506 = cbLight._m0[_2197].y + _766;
    float _2507 = cbLight._m0[_2197].z + _767;
    float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
    float _2512 = _2511 * _2505;
    float _2513 = _2511 * _2506;
    float _2514 = _2511 * _2507;
    float _2515 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2197].xyz));
    float _4565 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2519 = dot(vec3(_686, _687, _688), vec3(_2512, _2513, _2514));
    float _4576 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2523 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2512, _2513, _2514));
    float _4587 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2527 = _2504 * _2504;
    float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
    float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
    float _2545 = 1.0 - _2504;
    float _2555 = (0.5 / (((_2433 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2545) + _2504) * _2518))) * _2518;
    float _4598 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
    float _2567 = (((((_2538 * _2455) + _838) * cbLight._m0[_2492].x) * _2557) * _2179) + ((((cbLight._m0[_2404].x * _2145) * ((_2454 * _2455) + _838)) * _2478) * _2193);
    float _2568 = (((((_2538 * _2457) + _840) * cbLight._m0[_2492].y) * _2557) * _2179) + ((((cbLight._m0[_2404].y * _2147) * ((_2454 * _2457) + _840)) * _2478) * _2193);
    float _2569 = (((((_2538 * _2458) + _841) * cbLight._m0[_2492].z) * _2557) * _2179) + ((((cbLight._m0[_2404].z * _2149) * ((_2454 * _2458) + _841)) * _2478) * _2193);
    float _2625;
    float _2627;
    float _2629;
    if (_2233)
    {
        _2625 = _2567;
        _2627 = _2568;
        _2629 = _2569;
    }
    else
    {
        uint _2631 = _2156 + 2u;
        uint _2635 = _2156 + 10u;
        float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2631].w)) * _689) * 0.949999988079071044921875);
        float _2650 = _2649 * _2649;
        float _2651 = cbLight._m0[_2631].x + _765;
        float _2652 = cbLight._m0[_2631].y + _766;
        float _2653 = cbLight._m0[_2631].z + _767;
        float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
        float _2658 = _2657 * _2651;
        float _2659 = _2657 * _2652;
        float _2660 = _2657 * _2653;
        float _2661 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2631].xyz));
        float _4609 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2664 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2665 = dot(vec3(_686, _687, _688), vec3(_2658, _2659, _2660));
        float _4620 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2669 = dot(vec3(cbLight._m0[_2631].xyz), vec3(_2658, _2659, _2660));
        float _4631 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2673 = _2650 * _2650;
        float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
        float _2684 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
        float _2691 = 1.0 - _2650;
        float _2701 = (0.5 / (((_2433 * ((_2664 * _2691) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2691) + _2650) * _2664))) * _2664;
        float _4642 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2703 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
        float _2704 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2625 = (((((_2684 * _2455) + _838) * cbLight._m0[_2635].x) * _2703) * _2704) + _2567;
        _2627 = (((((_2684 * _2457) + _840) * cbLight._m0[_2635].y) * _2703) * _2704) + _2568;
        _2629 = (((((_2684 * _2458) + _841) * cbLight._m0[_2635].z) * _2703) * _2704) + _2569;
    }
    float _2735;
    float _2737;
    float _2739;
    if (_2342)
    {
        _2735 = _2625;
        _2737 = _2627;
        _2739 = _2629;
    }
    else
    {
        uint _2746 = _2156 + 3u;
        uint _2750 = _2156 + 11u;
        float _2764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2746].w)) * _689) * 0.949999988079071044921875);
        float _2765 = _2764 * _2764;
        float _2766 = cbLight._m0[_2746].x + _765;
        float _2767 = cbLight._m0[_2746].y + _766;
        float _2768 = cbLight._m0[_2746].z + _767;
        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
        float _2773 = _2772 * _2766;
        float _2774 = _2772 * _2767;
        float _2775 = _2772 * _2768;
        float _2776 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2746].xyz));
        float _4658 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2780 = dot(vec3(_686, _687, _688), vec3(_2773, _2774, _2775));
        float _4669 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2783 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2784 = dot(vec3(cbLight._m0[_2746].xyz), vec3(_2773, _2774, _2775));
        float _4680 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2788 = _2765 * _2765;
        float _2792 = ((_2783 * _2783) * (_2788 + (-1.0))) + 1.0;
        float _2799 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
        float _2806 = 1.0 - _2765;
        float _2816 = (0.5 / (((_2433 * ((_2779 * _2806) + _2765)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2806) + _2765) * _2779))) * _2779;
        float _4691 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2818 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2788 / ((_2792 * _2792) * 3.141590118408203125));
        float _2819 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2735 = (((((_2799 * _2455) + _838) * cbLight._m0[_2750].x) * _2818) * _2819) + _2625;
        _2737 = (((((_2799 * _2457) + _840) * cbLight._m0[_2750].y) * _2818) * _2819) + _2627;
        _2739 = (((((_2799 * _2458) + _841) * cbLight._m0[_2750].z) * _2818) * _2819) + _2629;
    }
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    if (_2154.y == 0u)
    {
        uvec4 _2840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2841 = _2840.x;
        uint _2852 = uint((float(_2840.y) * floor(float(uint(cbSceneParam._m0[85u].y * _774) / _2841))) + floor(float(uint(cbSceneParam._m0[85u].x * _773) / _2841)));
        float _2862 = (log2(_1932 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2863 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        uint _2866 = uint(isnan(14.0) ? _2863 : (isnan(_2863) ? 14.0 : min(_2863, 14.0)));
        uvec4 _2871 = texelFetch(g_lightClusterGridBuffer, int(((_2866 << 2u) + (_2852 << 6u)) >> 2u));
        uint _2872 = _2871.x;
        uint _2873 = _2840.z;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        if (((((1u << ((_2873 >> 4u) & 15u)) + 4294967295u) & _2872) == 0u) || ((_2873 & 240u) == 0u))
        {
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
        }
        else
        {
            float _2953;
            float _2955;
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            uint _3102 = 0u;
            uint _3111;
            bool _3112;
            for (;;)
            {
                _3111 = texelFetch(g_lightClassification, int((((_2866 << 5u) + (_2852 << 9u)) + (_3102 << 2u)) >> 2u)).x;
                _3112 = _3111 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3112)
                {
                    frontier_phi_66_pred = _3101;
                    frontier_phi_66_pred_1 = _3100;
                    frontier_phi_66_pred_2 = _3099;
                    frontier_phi_66_pred_3 = _3098;
                    frontier_phi_66_pred_4 = _3097;
                    frontier_phi_66_pred_5 = _3096;
                }
                else
                {
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    uint _3226;
                    _3220 = _3096;
                    _3221 = _3097;
                    _3222 = _3098;
                    _3223 = _3099;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3111;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    for (;;)
                    {
                        uint _3230 = uint(findLSB(_3226)) + (_3102 << 5u);
                        uint _3227 = (_3226 + 4294967295u) & _3226;
                        uint _3232 = _3230 * 48u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3252 = (_3230 * 48u) + 4u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 3u)).x));
                        uint _3271 = (_3230 * 48u) + 8u;
                        vec3 _3282 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x));
                        float _3286 = _3246.x - _1930;
                        float _3287 = _3246.y - _1931;
                        float _3288 = _3246.z - _1932;
                        float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                        float _3292 = inversesqrt(_3289);
                        float _3293 = _3292 * _3286;
                        float _3294 = _3292 * _3287;
                        float _3295 = _3292 * _3288;
                        float _3296 = dot(vec3(_795, _798, _801), vec3(_3293, _3294, _3295));
                        float _3301 = 1.0 - (_3289 * _3246.w);
                        float _4717 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3303 = sqrt(_3289) * _3265.w;
                        float _3306 = 1.39999997615814208984375 / (_3303 + 1.39999997615814208984375);
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3296) + _3307;
                        float _3313 = _3303 * _3303;
                        float _3317 = ((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3302) / ((_3313 * 0.699999988079071044921875) + 1.0);
                        float _3321 = (-0.0) - _1930;
                        float _3322 = (-0.0) - _1931;
                        float _3323 = (-0.0) - _1932;
                        float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                        float _3328 = _3327 * _3321;
                        float _3329 = _3327 * _3322;
                        float _3330 = _3327 * _3323;
                        float _3337 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                        float _3338 = 1.0 - _870;
                        float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                        float _3346 = _3345 * _3345;
                        float _3347 = _3346 * _3346;
                        float _3348 = _3328 + _3293;
                        float _3349 = _3329 + _3294;
                        float _3350 = _3330 + _3295;
                        float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                        float _3358 = dot(vec3(_795, _798, _801), vec3(_3328, _3329, _3330));
                        float _4733 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3361 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3362 = dot(vec3(_795, _798, _801), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                        float _4744 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                        float _3370 = _3306 * _3346;
                        float _3371 = _3370 * _3370;
                        float _3374 = ((1.0 - _3371) * _3296) + _3371;
                        float _4755 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3375 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3376 = 1.0 - _3346;
                        float _3386 = (0.5 / (((_3375 * ((_3361 * _3376) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3346) * _3361))) * _3375;
                        float _4766 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3397 = (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) / ((_3369 * _3369) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125))) * _3302;
                        _3155 = (_3317 * _3265.x) + _3223;
                        _3156 = (_3317 * _3265.y) + _3224;
                        _3157 = (_3317 * _3265.z) + _3225;
                        _3152 = (_3397 * _3282.x) + _3220;
                        _3153 = (_3397 * _3282.y) + _3221;
                        _3154 = (_3397 * _3282.z) + _3222;
                        if (_3227 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3220 = _3152;
                            _3221 = _3153;
                            _3222 = _3154;
                            _3223 = _3155;
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3227;
                        }
                    }
                    frontier_phi_66_pred = _3157;
                    frontier_phi_66_pred_1 = _3156;
                    frontier_phi_66_pred_2 = _3155;
                    frontier_phi_66_pred_3 = _3154;
                    frontier_phi_66_pred_4 = _3153;
                    frontier_phi_66_pred_5 = _3152;
                }
                _2963 = frontier_phi_66_pred;
                _2961 = frontier_phi_66_pred_1;
                _2959 = frontier_phi_66_pred_2;
                _2957 = frontier_phi_66_pred_3;
                _2955 = frontier_phi_66_pred_4;
                _2953 = frontier_phi_66_pred_5;
                uint _3103 = _3102 + 1u;
                if (_3103 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3096 = _2953;
                    _3097 = _2955;
                    _3098 = _2957;
                    _3099 = _2959;
                    _3100 = _2961;
                    _3101 = _2963;
                    _3102 = _3103;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
        }
        uvec4 _2966 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2967 = _2966.z;
        uint _2969 = (_2967 >> 8u) & 15u;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        if (((4294967295u << _2969) & _2872) == 0u)
        {
            _3064 = _2952;
            _3066 = _2954;
            _3068 = _2956;
            _3070 = _2958;
            _3072 = _2960;
            _3074 = _2962;
        }
        else
        {
            float _3089 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
            float _3090 = _3089 * _1930;
            float _3091 = _3089 * _1931;
            float _3092 = _3089 * _1932;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2969 < ((_2967 >> 12u) & 15u))
            {
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3203 = _2952;
                float _3204 = _2954;
                float _3205 = _2956;
                float _3206 = _2958;
                float _3207 = _2960;
                float _3208 = _2962;
                uint _3209 = _2969;
                uint _3218;
                bool _3219;
                for (;;)
                {
                    _3218 = texelFetch(g_lightClassification, int((((_2866 << 5u) + (_2852 << 9u)) + (_3209 << 2u)) >> 2u)).x;
                    _3219 = _3218 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3219)
                    {
                        frontier_phi_72_pred = _3208;
                        frontier_phi_72_pred_1 = _3207;
                        frontier_phi_72_pred_2 = _3206;
                        frontier_phi_72_pred_3 = _3205;
                        frontier_phi_72_pred_4 = _3204;
                        frontier_phi_72_pred_5 = _3203;
                    }
                    else
                    {
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3415 = _3203;
                        float _3416 = _3204;
                        float _3417 = _3205;
                        float _3418 = _3206;
                        float _3419 = _3207;
                        float _3420 = _3208;
                        uint _3421 = _3218;
                        uint _3422;
                        vec4 _3447;
                        float _3448;
                        vec4 _3463;
                        vec3 _3475;
                        vec4 _3490;
                        vec4 _3505;
                        float _3551;
                        bool _3552;
                        for (;;)
                        {
                            uint _3432 = ((_3209 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3421));
                            _3422 = (_3421 + 4294967295u) & _3421;
                            uint _3434 = _3432 * 40u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            _3448 = _3447.w;
                            uint _3450 = (_3432 * 40u) + 4u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3432 * 40u) + 8u;
                            _3475 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x));
                            uint _3477 = (_3432 * 40u) + 16u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3492 = (_3432 * 40u) + 20u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3432 * 40u) + 24u;
                            vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3526 = (_3432 * 40u) + 28u;
                            vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            _3551 = fma(_1932, _3539.z, fma(_1931, _3539.y, _3539.x * _1930)) + _3539.w;
                            _3552 = !((fma(_1932, _3520.z, fma(_1931, _3520.y, _3520.x * _1930)) + _3520.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3552)
                            {
                                float _3579 = _3447.x - _1930;
                                float _3580 = _3447.y - _1931;
                                float _3581 = _3447.z - _1932;
                                float _3582 = dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581));
                                float _3585 = inversesqrt(_3582);
                                float _3586 = _3585 * _3579;
                                float _3587 = _3585 * _3580;
                                float _3588 = _3585 * _3581;
                                float _3592 = 1.0 - (_3582 / (_3448 * _3448));
                                float _4777 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3597 = sqrt(_3582) * _3463.w;
                                float _3599 = 1.39999997615814208984375 / (_3597 + 1.39999997615814208984375);
                                float _3600 = _3599 * _3599;
                                float _3603 = ((1.0 - _3600) * dot(vec3(_3586, _3587, _3588), vec3(_795, _798, _801))) + _3600;
                                float _3606 = _3597 * _3597;
                                float _3610 = (fma(_1932, _3490.z, fma(_1931, _3490.y, _3490.x * _1930)) + _3490.w) / _3551;
                                float _3611 = (fma(_1932, _3505.z, fma(_1931, _3505.y, _3505.x * _1930)) + _3505.w) / _3551;
                                float _3615 = 1.0 - dot(vec2(_3610, _3611), vec2(_3610, _3611));
                                float _4793 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3617 = _3616 * (((isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0))) * _3593) / ((_3606 * 0.699999988079071044921875) + 1.0));
                                float _3629 = exp2(log2(1.0 / ((_3606 * 3.5) + 5.0)) * 0.25);
                                float _3630 = 1.0 - _870;
                                float _3637 = sqrt(1.0 - ((1.0 - (_3630 * _3630)) * (1.0 - (_3629 * _3629))));
                                float _3638 = _3637 * _3637;
                                float _3639 = _3638 * _3638;
                                float _3640 = _3586 - _3090;
                                float _3641 = _3587 - _3091;
                                float _3642 = _3588 - _3092;
                                float _3646 = inversesqrt(dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642)));
                                float _3650 = dot(vec3(_795, _798, _801), vec3((-0.0) - _3090, (-0.0) - _3091, (-0.0) - _3092));
                                float _4804 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3653 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3654 = dot(vec3(_795, _798, _801), vec3(_3646 * _3640, _3646 * _3641, _3646 * _3642));
                                float _4815 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3657 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3661 = ((_3657 * _3657) * (_3639 + (-1.0))) + 1.0;
                                float _3662 = _3599 * _3638;
                                float _3663 = _3662 * _3662;
                                float _3669 = ((1.0 - _3663) * dot(vec3(_795, _798, _801), vec3(_3586, _3587, _3588))) + _3663;
                                float _4826 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3671 = 1.0 - _3638;
                                float _3681 = (0.5 / (((_3670 * ((_3653 * _3671) + _3638)) + 9.9999999392252902907785028219223e-09) + (((_3670 * _3671) + _3638) * _3653))) * _3670;
                                float _4837 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3691 = (_3616 * _3593) * (((_3639 * 3.1415927410125732421875) * (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) / ((_3661 * _3661) * ((_3606 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3617 * _3463.y;
                                frontier_phi_78_pred_1 = _3617 * _3463.x;
                                frontier_phi_78_pred_2 = _3691 * _3475.z;
                                frontier_phi_78_pred_3 = _3691 * _3475.y;
                                frontier_phi_78_pred_4 = _3691 * _3475.x;
                                frontier_phi_78_pred_5 = _3617 * _3463.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3699 = frontier_phi_78_pred;
                            _3698 = frontier_phi_78_pred_1;
                            _3697 = frontier_phi_78_pred_2;
                            _3696 = frontier_phi_78_pred_3;
                            _3695 = frontier_phi_78_pred_4;
                            _3700 = frontier_phi_78_pred_5;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            _3407 = _3700 + _3420;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3404 = _3697 + _3417;
                            if (_3422 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3422;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3407;
                        frontier_phi_72_pred_1 = _3406;
                        frontier_phi_72_pred_2 = _3405;
                        frontier_phi_72_pred_3 = _3404;
                        frontier_phi_72_pred_4 = _3403;
                        frontier_phi_72_pred_5 = _3402;
                    }
                    _3075 = frontier_phi_72_pred;
                    _3073 = frontier_phi_72_pred_1;
                    _3071 = frontier_phi_72_pred_2;
                    _3069 = frontier_phi_72_pred_3;
                    _3067 = frontier_phi_72_pred_4;
                    _3065 = frontier_phi_72_pred_5;
                    uint _3210 = _3209 + 1u;
                    if (_3210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3203 = _3065;
                        _3204 = _3067;
                        _3205 = _3069;
                        _3206 = _3071;
                        _3207 = _3073;
                        _3208 = _3075;
                        _3209 = _3210;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3075;
                frontier_phi_60_61_ladder_1 = _3073;
                frontier_phi_60_61_ladder_2 = _3069;
                frontier_phi_60_61_ladder_3 = _3067;
                frontier_phi_60_61_ladder_4 = _3065;
                frontier_phi_60_61_ladder_5 = _3071;
            }
            else
            {
                frontier_phi_60_61_ladder = _2962;
                frontier_phi_60_61_ladder_1 = _2960;
                frontier_phi_60_61_ladder_2 = _2956;
                frontier_phi_60_61_ladder_3 = _2954;
                frontier_phi_60_61_ladder_4 = _2952;
                frontier_phi_60_61_ladder_5 = _2958;
            }
            _3064 = frontier_phi_60_61_ladder_4;
            _3066 = frontier_phi_60_61_ladder_3;
            _3068 = frontier_phi_60_61_ladder_2;
            _3070 = frontier_phi_60_61_ladder_5;
            _3072 = frontier_phi_60_61_ladder_1;
            _3074 = frontier_phi_60_61_ladder;
        }
        float _3079 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2885 = (_3079 * _3070) + _2397;
        _2887 = (_3079 * _3072) + _2399;
        _2889 = (_3079 * _3074) + _2401;
        _2891 = ((_3064 * _838) * _3079) + _2735;
        _2893 = ((_3066 * _840) * _3079) + _2737;
        _2895 = ((_3068 * _841) * _3079) + _2739;
    }
    else
    {
        _2885 = _2397;
        _2887 = _2399;
        _2889 = _2401;
        _2891 = _2735;
        _2893 = _2737;
        _2895 = _2739;
    }
    float _4853 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4864 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4875 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    uint _2915 = _267 + 6u;
    float _2923 = _773 / cbSceneParam._m0[86u].x;
    float _2924 = _774 / cbSceneParam._m0[86u].y;
    vec4 _2938 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2923, _2924, (log2((isnan(cbSceneParam._m0[77u].w) ? _708 : (isnan(_708) ? cbSceneParam._m0[77u].w : min(_708, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2940 = _2938.x;
    float _2941 = _2938.y;
    float _2942 = _2938.z;
    float _2943 = _2938.w;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    if (_708 > cbSceneParam._m0[78u].w)
    {
        float _2977 = isnan(_708) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _708 : min(cbSceneParam._m0[80u].w, _708));
        float _2978 = _2977 / _708;
        float _2989 = _2978 * _758;
        float _2990 = _759 * _2978;
        float _2991 = (-0.0) - _2990;
        float _2992 = _2978 * _760;
        float _2994 = (cbSceneParam._m0[77u].w * _2991) / _2977;
        float _2995 = _2994 + cbSceneParam._m0[79u].w;
        float _2996 = cbSceneParam._m0[79u].w - _2990;
        float _3002 = sqrt(((_2989 * _2989) + (_2990 * _2990)) + (_2992 * _2992));
        float _3005 = (1.0 - (cbSceneParam._m0[77u].w / _2977)) * _3002;
        float _3010 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3012 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3165;
        if (abs((_2991 - _2994) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3165 = ((((_2995 > 0.0) ? exp2(_3010 * _2995) : (2.0 - exp2(_3012 * _2995))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3005;
        }
        else
        {
            float _3125 = 1.0 / cbSceneParam._m0[80u].x;
            float _3126 = isnan(_2996) ? _2995 : (isnan(_2995) ? _2996 : max(_2995, _2996));
            float _3127 = isnan(_2996) ? _2995 : (isnan(_2995) ? _2996 : min(_2995, _2996));
            float _3136 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : min(_3126, 0.0));
            float _3137 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : min(_3127, 0.0));
            _3165 = ((abs(_3002 / _2991) * cbSceneParam._m0[80u].y) * ((((_3136 - _3137) * 2.0) - ((exp2(_3010 * (isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0)))) - exp2(_3010 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))))) * _3125)) - ((exp2(_3012 * _3136) - exp2(_3012 * _3137)) * _3125))) + (_3005 * cbSceneParam._m0[80u].z);
        }
        vec4 _3167 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2923, _2924, 1.0), 0.0);
        float _3176 = exp2((_3165 * (-1.44269502162933349609375)) * (1.0 - _3167.w));
        float _3177 = log2(_3176);
        float _3193 = log2(_2943);
        _3014 = (exp2(_3193 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].x)) * _3167.x) / cbSceneParam._m0[78u].x)) + _2940;
        _3016 = (exp2(_3193 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].y)) * _3167.y) / cbSceneParam._m0[78u].y)) + _2941;
        _3018 = (exp2(_3193 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].z)) * _3167.z) / cbSceneParam._m0[78u].z)) + _2942;
        _3020 = _3176 * _2943;
    }
    else
    {
        _3014 = _2940;
        _3016 = _2941;
        _3018 = _2942;
        _3020 = _2943;
    }
    float _3032 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3033 = _3032 == 3.0;
    float _3034 = log2(_3020);
    float _3041 = exp2(_3034 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2885 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _854))) + ((_2891 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1662)) * cbPerFrame._m0[3u].x));
    float _3042 = exp2(_3034 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2887 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _854))) + ((_2893 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1662)) * cbPerFrame._m0[3u].x));
    float _3043 = exp2(_3034 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2889 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _854))) + ((_2895 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1662)) * cbPerFrame._m0[3u].x));
    float _3052 = (_3032 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3052 * (_3033 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3014)));
    SV_Target.y = _3052 * (_3033 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3016)));
    SV_Target.z = _3052 * (_3033 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3018)));
    SV_Target.w = cbInstanceData._m0[_2915].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2915].w;
}


