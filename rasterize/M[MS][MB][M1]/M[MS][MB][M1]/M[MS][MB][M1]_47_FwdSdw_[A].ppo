#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1165;
float _3828;
float _3829;
float _3830;
float _3831;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3840 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3851 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3862 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _321 = _316.x * cbMtdParam._m0[9u].x;
    float _322 = _316.y * cbMtdParam._m0[9u].y;
    float _323 = _316.z * cbMtdParam._m0[9u].z;
    float _327 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _321;
    float _330 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _322;
    float _333 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _323;
    float _340 = ((_321 - _327) * (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) + _327;
    float _341 = ((_322 - _330) * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) + _330;
    float _342 = ((_323 - _333) * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) + _333;
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _279) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _280) + cbTextureTilingScale._m0[14u].w));
    vec4 _381 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _411 = _407.z;
    float _415 = (_407.x * 2.0) + (-1.0);
    float _416 = (_407.y * 2.0) + (-1.0);
    float _417 = dot(vec2(_415, _416), vec2(_415, _416));
    float _3873 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _422 = sqrt(1.0 - (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))));
    float _427 = _415 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_381.x * 2.0) + (-1.0)));
    float _428 = _416 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_381.y * 2.0) + (-1.0)));
    float _431 = fma(_422, _227, fma(_428, _234, _427 * _220));
    float _434 = fma(_422, _228, fma(_428, _235, _427 * _221));
    float _437 = fma(_422, _229, fma(_428, _236, _427 * _222));
    float _441 = inversesqrt(dot(vec3(_431, _434, _437), vec3(_431, _434, _437)));
    vec4 _477 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _279) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _280) + cbTextureTilingScale._m0[11u].w));
    float _479 = _477.x;
    float _480 = 1.0 - _479;
    float _489 = (cbMtdParam._m0[19u].x + dot(vec4(_441 * _431, _441 * _434, _441 * _437, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_479 - _480) * cbMtdParam._m0[24u].z) + _480) * cbMtdParam._m0[21u].z);
    float _3884 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _497 = (_490 * ((_361.x * cbMtdParam._m0[18u].x) - _340)) + _340;
    float _498 = (_490 * ((_361.y * cbMtdParam._m0[18u].y) - _341)) + _341;
    float _499 = (_490 * ((_361.z * cbMtdParam._m0[18u].z) - _342)) + _342;
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _514 = _512.x;
    float _516 = _514 - (_514 * _490);
    float _521 = (((_381.z - _411) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _411;
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _279) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _280) + cbTextureTilingScale._m0[15u].w));
    float _541 = (_534.x * 2.0) + (-1.0);
    float _542 = (_534.y * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3895 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _551 = ((_534.z - _521) * _490) + _521;
    float _561 = ((sqrt(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) - _422) * _490) + _422;
    float _564 = (((_541 - _427) * _490) + _427) + (cbMtdParam._m0[21u].x * _427);
    float _565 = (((_542 - _428) * _490) + _428) + (cbMtdParam._m0[21u].x * _428);
    float _567 = cbMtdParam._m0[22u].x + _407.w;
    float _570 = fma(_561, _227, fma(_565, _234, _564 * _220));
    float _573 = fma(_561, _228, fma(_565, _235, _564 * _221));
    float _576 = fma(_561, _229, fma(_565, _236, _564 * _222));
    float _580 = inversesqrt(dot(vec3(_570, _573, _576), vec3(_570, _573, _576)));
    float _581 = _580 * _570;
    float _582 = _580 * _573;
    float _583 = _580 * _576;
    float _3906 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _584 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3928 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3939 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3950 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3961 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _589 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _603 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _654 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _644);
    float _655 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _644);
    float _656 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _644);
    float _660 = inversesqrt(dot(vec3(_654, _655, _656), vec3(_654, _655, _656)));
    float _661 = _654 * _660;
    float _662 = _655 * _660;
    float _663 = _656 * _660;
    vec4 _668 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _670 = _668.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _845 = sqrt(((_654 * _654) + (_655 * _655)) + (_656 * _656));
        float _851 = (cbMatDynParam._m0[5u].x * _845) + cbMatDynParam._m0[5u].y;
        float _3972 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _856 = (cbMatDynParam._m0[5u].z * _845) + cbMatDynParam._m0[5u].w;
        float _3983 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) - _852)) + _852) < ((_670 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _682 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _683 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _703 = fma(_583, cbSceneParam._m0[5u].z, fma(_582, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _581));
    float _706 = fma(_583, cbSceneParam._m0[6u].z, fma(_582, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _581));
    float _709 = fma(_583, cbSceneParam._m0[7u].z, fma(_582, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _581));
    uint _722 = _260 + 9u;
    uint _723 = _722 + uint(cbMatDynParam._m0[0u].w);
    float _729 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * cbInstanceData._m0[_723].x;
    float _730 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * cbInstanceData._m0[_723].y;
    float _731 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * cbInstanceData._m0[_723].z;
    float _3994 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _4005 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _735 = 1.0 - _589;
    float _736 = _732 * _735;
    float _737 = _733 * _735;
    float _738 = _734 * _735;
    float _743 = (_732 + (-0.039999999105930328369140625)) * _589;
    float _744 = (_733 + (-0.039999999105930328369140625)) * _589;
    float _745 = (_734 + (-0.039999999105930328369140625)) * _589;
    float _746 = _743 + 0.039999999105930328369140625;
    float _748 = _744 + 0.039999999105930328369140625;
    float _749 = _745 + 0.039999999105930328369140625;
    vec4 _758 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _682, cbSceneParam._m0[86u].y * _683));
    float _762 = ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * TEXCOORD_5.w) * _758.x;
    float _763 = dot(vec3(_581, _582, _583), vec3(_661, _662, _663));
    float _766 = _763 * 2.0;
    float _770 = (_766 * _581) - _661;
    float _771 = (_766 * _582) - _662;
    float _772 = (_766 * _583) - _663;
    float _776 = abs(dot(vec3(_661, _662, _663), vec3(_581, _582, _583)));
    float _4027 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _778 = sqrt(_584);
    float _791 = exp2((_778 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_778 * 3.0));
    float _797 = (1.0 - _791) * ((_778 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _798 = _791 * _778;
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1164;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _889 = fma(_834, cbModelParam._m0[26u].z, fma(_830, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826));
        float _893 = fma(_834, cbModelParam._m0[27u].z, fma(_830, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826));
        float _897 = fma(_834, cbModelParam._m0[28u].z, fma(_830, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826));
        float _922 = _826 + _581;
        float _923 = _830 + _582;
        float _924 = _834 + _583;
        float _934 = fma(_924, cbModelParam._m0[26u].z, fma(_923, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _922)) - _889;
        float _935 = fma(_924, cbModelParam._m0[27u].z, fma(_923, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _922)) - _893;
        float _936 = fma(_924, cbModelParam._m0[28u].z, fma(_923, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _922)) - _897;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_889 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_893 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[34u].z) + ((((((_897 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _992 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_958.x + (-0.5));
        float _994 = _992 * (_958.y + (-0.5));
        float _995 = _992 * (_958.z + (-0.5));
        float _1002 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_965.x + (-0.5));
        float _1004 = _1002 * (_965.y + (-0.5));
        float _1005 = _1002 * (_965.z + (-0.5));
        float _1012 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_972.x + (-0.5));
        float _1014 = _1012 * (_972.y + (-0.5));
        float _1015 = _1012 * (_972.z + (-0.5));
        float _1022 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_979.x + (-0.5));
        float _1024 = _1022 * (_979.y + (-0.5));
        float _1025 = _1022 * (_979.z + (-0.5));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = _993 * 0.5;
        float _1030 = _1003 * 0.5;
        float _1031 = _1013 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1046 = (dot(vec3(_581, _582, _583), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1056 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _4075 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1058 + 1.0))) + _1063) * _1026;
        float _1073 = _994 * 0.5;
        float _1074 = _1004 * 0.5;
        float _1075 = _1014 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_581, _582, _583), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _4108 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1100 + 1.0))) + _1105) * _1027;
        float _1115 = _995 * 0.5;
        float _1116 = _1005 * 0.5;
        float _1117 = _1015 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_581, _582, _583), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _4141 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1142 + 1.0))) + _1147) * _1028;
        _1164 = _995;
        _1166 = _994;
        _1167 = _993;
        _1168 = _1005;
        _1169 = _1004;
        _1170 = _1003;
        _1171 = _1015;
        _1172 = _1014;
        _1173 = _1013;
        _1174 = _1028;
        _1175 = _1027;
        _1176 = _1026;
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _1165;
        _1166 = _1165;
        _1167 = _1165;
        _1168 = _1165;
        _1169 = _1165;
        _1170 = _1165;
        _1171 = _1165;
        _1172 = _1165;
        _1173 = _1165;
        _1174 = _1165;
        _1175 = _1165;
        _1176 = _1165;
        _1177 = 0.0;
        _1178 = 0.0;
        _1179 = 0.0;
    }
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1207 = fma(_834, cbModelParam._m0[30u].z, fma(_830, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _826));
        float _1211 = fma(_834, cbModelParam._m0[31u].z, fma(_830, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _826));
        float _1215 = fma(_834, cbModelParam._m0[32u].z, fma(_830, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _826));
        float _1238 = _826 + _581;
        float _1239 = _830 + _582;
        float _1240 = _834 + _583;
        float _1250 = fma(_1240, cbModelParam._m0[30u].z, fma(_1239, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1238)) - _1207;
        float _1251 = fma(_1240, cbModelParam._m0[31u].z, fma(_1239, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1238)) - _1211;
        float _1252 = fma(_1240, cbModelParam._m0[32u].z, fma(_1239, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1238)) - _1215;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1207 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1211 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[35u].z) + ((((((_1215 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1306 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1273.x + (-0.5));
        float _1308 = _1306 * (_1273.y + (-0.5));
        float _1309 = _1306 * (_1273.z + (-0.5));
        float _1316 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1280.x + (-0.5));
        float _1318 = _1316 * (_1280.y + (-0.5));
        float _1319 = _1316 * (_1280.z + (-0.5));
        float _1326 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1287.x + (-0.5));
        float _1328 = _1326 * (_1287.y + (-0.5));
        float _1329 = _1326 * (_1287.z + (-0.5));
        float _1336 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1294.x + (-0.5));
        float _1338 = _1336 * (_1294.y + (-0.5));
        float _1339 = _1336 * (_1294.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_581, _582, _583), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4204 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1370 + 1.0))) + _1375) * _1340;
        float _1385 = _1308 * 0.5;
        float _1386 = _1318 * 0.5;
        float _1387 = _1328 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_581, _582, _583), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4237 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1412 + 1.0))) + _1417) * _1341;
        float _1427 = _1309 * 0.5;
        float _1428 = _1319 * 0.5;
        float _1429 = _1329 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_581, _582, _583), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4270 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1454 + 1.0))) + _1459) * _1342;
        _1476 = _1309;
        _1477 = _1308;
        _1478 = _1307;
        _1479 = _1319;
        _1480 = _1318;
        _1481 = _1317;
        _1482 = _1329;
        _1483 = _1328;
        _1484 = _1327;
        _1485 = _1342;
        _1486 = _1341;
        _1487 = _1340;
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
    }
    else
    {
        _1476 = _1165;
        _1477 = _1165;
        _1478 = _1165;
        _1479 = _1165;
        _1480 = _1165;
        _1481 = _1165;
        _1482 = _1165;
        _1483 = _1165;
        _1484 = _1165;
        _1485 = _1165;
        _1486 = _1165;
        _1487 = _1165;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1177)) + _1177;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1178)) + _1178;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1179)) + _1179;
    float _1523 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1500));
    float _1544 = _770 * 0.5;
    float _1545 = _771 * 0.5;
    float _1546 = _772 * 0.5;
    float _1547 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1550 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1553 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1587;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1560 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1164, _1168, _1171, _1174));
        float _1564 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1166, _1169, _1172, _1175));
        float _1568 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1575 = dot(vec4(cbModelParam._m0[39u]), vec4(_1544, _1545, _1546, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1598;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1589 = dot(vec4(cbModelParam._m0[40u]), vec4(_1544, _1545, _1546, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1602 = (_1598 * cbModelParam._m0[1u].x) + (_1587 * (1.0 - cbModelParam._m0[1u].x));
    float _1612 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _584);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1612 : min(cbModelParam._m0[25u].z, _1612));
    float _1693;
    float _1695;
    float _1697;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1660 = fma(_834, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _826)) + cbModelParam._m0[13u].w;
        float _1664 = fma(_834, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _826)) + cbModelParam._m0[14u].w;
        float _1668 = fma(_834, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _826)) + cbModelParam._m0[15u].w;
        float _1671 = fma(_772, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770));
        float _1674 = fma(_772, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770));
        float _1677 = fma(_772, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770));
        float _1705;
        if (_1671 > 0.0)
        {
            _1705 = abs((1.0 - _1660) / _1671);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1660 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1705 = frontier_phi_17_15_ladder;
        }
        float _1876;
        if (_1674 > 0.0)
        {
            _1876 = abs((1.0 - _1664) / _1674);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1664 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1876 = frontier_phi_26_22_ladder;
        }
        float _2172;
        if (_1677 > 0.0)
        {
            _2172 = abs((1.0 - _1668) / _1677);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1668 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2172 = frontier_phi_38_33_ladder;
        }
        float _2174 = isnan(_1876) ? _1705 : (isnan(_1705) ? _1876 : min(_1705, _1876));
        float _2175 = isnan(_2172) ? _2174 : (isnan(_2174) ? _2172 : min(_2174, _2172));
        float _2179 = (_2175 * _1671) + _1660;
        float _2180 = (_2175 * _1674) + _1664;
        float _2181 = (_2175 * _1677) + _1668;
        float _2182 = _2175 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2182;
        float _2186 = _2182 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 > _2186) || ((_2180 < _2184) || ((_2179 < _2184) || (_2179 > _2186))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2326 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2181, cbModelParam._m0[9u].z, fma(_2180, cbModelParam._m0[9u].y, _2179 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2181, cbModelParam._m0[10u].z, fma(_2180, cbModelParam._m0[10u].y, _2179 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2181, cbModelParam._m0[11u].z, fma(_2180, cbModelParam._m0[11u].y, _2179 * cbModelParam._m0[11u].x))), _1613);
            frontier_phi_16_38_ladder = _2326.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2326.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2326.x * cbModelParam._m0[1u].y;
        }
        _1693 = frontier_phi_16_38_ladder_2;
        _1695 = frontier_phi_16_38_ladder_1;
        _1697 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_770, _771, _772), _1613);
        _1693 = _1681.x * cbModelParam._m0[1u].y;
        _1695 = _1681.y * cbModelParam._m0[1u].y;
        _1697 = _1681.z * cbModelParam._m0[1u].y;
    }
    float _1701 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _584);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1701 : min(cbModelParam._m0[25u].w, _1701));
    float _1791;
    float _1793;
    float _1795;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1755 = fma(_834, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _826)) + cbModelParam._m0[21u].w;
        float _1759 = fma(_834, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _826)) + cbModelParam._m0[22u].w;
        float _1763 = fma(_834, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _826)) + cbModelParam._m0[23u].w;
        float _1766 = fma(_772, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770));
        float _1769 = fma(_772, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770));
        float _1772 = fma(_772, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770));
        float _1881;
        if (_1766 > 0.0)
        {
            _1881 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1881 = frontier_phi_28_24_ladder;
        }
        float _2199;
        if (_1769 > 0.0)
        {
            _2199 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2199 = frontier_phi_40_35_ladder;
        }
        float _2537;
        if (_1772 > 0.0)
        {
            _2537 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2537 = frontier_phi_50_47_ladder;
        }
        float _2539 = isnan(_2199) ? _1881 : (isnan(_1881) ? _2199 : min(_1881, _2199));
        float _2540 = isnan(_2537) ? _2539 : (isnan(_2539) ? _2537 : min(_2539, _2537));
        float _2544 = (_2540 * _1766) + _1755;
        float _2545 = (_2540 * _1769) + _1759;
        float _2546 = (_2540 * _1772) + _1763;
        float _2547 = _2540 * 9.9999997473787516355514526367188e-05;
        float _2548 = (-1.0) - _2547;
        float _2550 = _2547 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2546 > _2550) || ((_2546 < _2548) || ((_2545 > _2550) || ((_2545 < _2548) || ((_2544 < _2548) || (_2544 > _2550))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2546, cbModelParam._m0[17u].z, fma(_2545, cbModelParam._m0[17u].y, _2544 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2546, cbModelParam._m0[18u].z, fma(_2545, cbModelParam._m0[18u].y, _2544 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2546, cbModelParam._m0[19u].z, fma(_2545, cbModelParam._m0[19u].y, _2544 * cbModelParam._m0[19u].x))), _1702);
            frontier_phi_25_50_ladder = _2668.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2668.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2668.x * cbModelParam._m0[1u].z;
        }
        _1791 = frontier_phi_25_50_ladder_2;
        _1793 = frontier_phi_25_50_ladder_1;
        _1795 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1775 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_770, _771, _772), _1702);
        _1791 = _1775.x * cbModelParam._m0[1u].z;
        _1793 = _1775.y * cbModelParam._m0[1u].z;
        _1795 = _1775.z * cbModelParam._m0[1u].z;
    }
    float _1808 = (((_797 * _746) + _798) * _762) * ((cbModelParam._m0[1u].w * (_1791 - _1693)) + _1693);
    float _1810 = (((_797 * _748) + _798) * _762) * ((cbModelParam._m0[1u].w * (_1793 - _1695)) + _1695);
    float _1812 = (((_797 * _749) + _798) * _762) * ((cbModelParam._m0[1u].w * (_1795 - _1697)) + _1697);
    float _1815 = fma(_1812, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1808 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1812, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1808 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1812, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, _1808 * cbSceneParam._m0[91u].x));
    float _1855 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1868 = _1855 / _1867;
    float _1869 = _1859 / _1867;
    float _1870 = _1863 / _1867;
    float _2017;
    float _2018;
    float _2019;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1897 = ((uint(_1870 > cbSceneParam._m0[59u].y) + uint(_1870 > cbSceneParam._m0[59u].x)) + uint(_1870 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1898 = _1897 + 43u;
        uint _1906 = _1897 + 44u;
        uint _1914 = _1897 + 45u;
        uint _1922 = _1897 + 46u;
        float _1933 = fma(_1867, cbSceneParam._m0[_1898].w, fma(_1863, cbSceneParam._m0[_1898].z, fma(_1859, cbSceneParam._m0[_1898].y, _1855 * cbSceneParam._m0[_1898].x)));
        float _1937 = fma(_1867, cbSceneParam._m0[_1906].w, fma(_1863, cbSceneParam._m0[_1906].z, fma(_1859, cbSceneParam._m0[_1906].y, _1855 * cbSceneParam._m0[_1906].x)));
        float _1945 = fma(_1867, cbSceneParam._m0[_1922].w, fma(_1863, cbSceneParam._m0[_1922].z, fma(_1859, cbSceneParam._m0[_1922].y, _1855 * cbSceneParam._m0[_1922].x)));
        float _1950 = cbSceneParam._m0[33u].z * _1945;
        float _1952 = cbSceneParam._m0[33u].w * _1945;
        float _1955 = fma(_1867, cbSceneParam._m0[_1914].w, fma(_1863, cbSceneParam._m0[_1914].z, fma(_1859, cbSceneParam._m0[_1914].y, _1855 * cbSceneParam._m0[_1914].x))) / _1945;
        float _2003 = (cbSceneParam._m0[33u].x - sqrt(((_1869 * _1869) + (_1868 * _1868)) + (_1870 * _1870))) * cbSceneParam._m0[33u].y;
        float _4396 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2010 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1950 + _1933) / _1945, (_1952 + _1937) / _1945), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1952 + _1933) / _1945, (_1937 - _1950) / _1945), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1933 - _1950) / _1945, (_1937 - _1952) / _1945), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1933 - _1952) / _1945, (_1950 + _1937) / _1945), _1955), 0.0)).x), vec4(0.25)));
        _2017 = 1.0 - (_2010 * cbSceneParam._m0[34u].x);
        _2018 = 1.0 - (_2010 * cbSceneParam._m0[34u].y);
        _2019 = 1.0 - (_2010 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2017 = 1.0;
        _2018 = 1.0;
        _2019 = 1.0;
    }
    float _2083;
    float _2085;
    float _2087;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2071 = fma(_1867, cbSceneParam._m0[63u].w, fma(_1863, cbSceneParam._m0[63u].z, fma(_1859, cbSceneParam._m0[63u].y, _1855 * cbSceneParam._m0[63u].x)));
        float _2072 = fma(_1867, cbSceneParam._m0[60u].w, fma(_1863, cbSceneParam._m0[60u].z, fma(_1859, cbSceneParam._m0[60u].y, _1855 * cbSceneParam._m0[60u].x))) / _2071;
        float _2073 = fma(_1867, cbSceneParam._m0[61u].w, fma(_1863, cbSceneParam._m0[61u].z, fma(_1859, cbSceneParam._m0[61u].y, _1855 * cbSceneParam._m0[61u].x))) / _2071;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2072 >= cbSceneParam._m0[64u].x) && (_2073 >= cbSceneParam._m0[64u].y)) && (_2072 <= cbSceneParam._m0[64u].z)) && (_2073 <= cbSceneParam._m0[64u].w))
        {
            float _2212 = fma(_1867, cbSceneParam._m0[62u].w, fma(_1863, cbSceneParam._m0[62u].z, fma(_1859, cbSceneParam._m0[62u].y, _1855 * cbSceneParam._m0[62u].x))) / _2071;
            float _2216 = isnan(cbSceneParam._m0[41u].w) ? _2212 : (isnan(_2212) ? cbSceneParam._m0[41u].w : max(_2212, cbSceneParam._m0[41u].w));
            float _2259 = (cbSceneParam._m0[33u].x - sqrt(((_1869 * _1869) + (_1868 * _1868)) + (_1870 * _1870))) * cbSceneParam._m0[33u].y;
            float _4412 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
            float _2266 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2072, cbSceneParam._m0[33u].w + _2073), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2072, _2073 - cbSceneParam._m0[33u].z), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2072 - cbSceneParam._m0[33u].z, _2073 - cbSceneParam._m0[33u].w), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2072 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2073), _2216), 0.0)).x), vec4(0.25)));
            float _2270 = 1.0 - (_2266 * cbSceneParam._m0[34u].x);
            float _2271 = 1.0 - (_2266 * cbSceneParam._m0[34u].y);
            float _2272 = 1.0 - (_2266 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2272) ? _2019 : (isnan(_2019) ? _2272 : min(_2019, _2272));
            frontier_phi_37_36_ladder_1 = isnan(_2271) ? _2018 : (isnan(_2018) ? _2271 : min(_2018, _2271));
            frontier_phi_37_36_ladder_2 = isnan(_2270) ? _2017 : (isnan(_2017) ? _2270 : min(_2017, _2270));
        }
        else
        {
            frontier_phi_37_36_ladder = _2019;
            frontier_phi_37_36_ladder_1 = _2018;
            frontier_phi_37_36_ladder_2 = _2017;
        }
        _2083 = frontier_phi_37_36_ladder_2;
        _2085 = frontier_phi_37_36_ladder_1;
        _2087 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2083 = _2017;
        _2085 = _2018;
        _2087 = _2019;
    }
    uvec4 _2092 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _2094 = _2092.x * 14u;
    uint _2095 = _2094 + 13u;
    float _2102 = _762 + (-1.0);
    float _2107 = (cbLight._m0[_2095].x * _2102) + 1.0;
    float _2108 = (cbLight._m0[_2095].y * _2102) + 1.0;
    float _2109 = (cbLight._m0[_2095].z * _2102) + 1.0;
    float _2110 = (cbLight._m0[_2095].w * _2102) + 1.0;
    uint _2111 = _2094 + 5u;
    float _2117 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
    uint _2121 = _2094 + 4u;
    float _2131 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
    uint _2135 = _2094 | 1u;
    float _2146 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_581, _582, _583));
    float _2149 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_581, _582, _583));
    float _4448 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _4459 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2154 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * 0.3183098733425140380859375;
    float _2156 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * 0.3183098733425140380859375;
    float _2163 = ((cbLight._m0[_2111].x * _2117) * _2156) + (((cbLight._m0[_2121].x * _2083) * _2131) * _2154);
    float _2164 = ((_2117 * cbLight._m0[_2111].y) * _2156) + (((cbLight._m0[_2121].y * _2085) * _2131) * _2154);
    float _2165 = ((_2117 * cbLight._m0[_2111].z) * _2156) + (((cbLight._m0[_2121].z * _2087) * _2131) * _2154);
    uvec4 _2169 = floatBitsToUint(cbLight._m0[_2094 + 12u]);
    bool _2171 = _2169.x == 0u;
    float _2273;
    float _2275;
    float _2277;
    if (_2171)
    {
        _2273 = _2163;
        _2275 = _2164;
        _2277 = _2165;
    }
    else
    {
        uint _2281 = _2094 + 6u;
        float _2297 = (dot(vec3(cbLight._m0[_2094 + 2u].xyz), vec3(_581, _582, _583)) * 0.5) + 0.5;
        float _2298 = _2297 * _2297;
        float _4470 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2299 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2300 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2273 = (((cbLight._m0[_2281].x * 0.3183098733425140380859375) * _2299) * _2300) + _2163;
        _2275 = (((cbLight._m0[_2281].y * 0.3183098733425140380859375) * _2299) * _2300) + _2164;
        _2277 = (((cbLight._m0[_2281].z * 0.3183098733425140380859375) * _2299) * _2300) + _2165;
    }
    bool _2280 = _2169.y == 0u;
    float _2335;
    float _2337;
    float _2339;
    if (_2280)
    {
        _2335 = _2273;
        _2337 = _2275;
        _2339 = _2277;
    }
    else
    {
        uint _2508 = _2094 + 7u;
        float _2524 = (dot(vec3(cbLight._m0[_2094 + 3u].xyz), vec3(_581, _582, _583)) * 0.5) + 0.5;
        float _2525 = _2524 * _2524;
        float _4486 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2526 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2527 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2335 = (((cbLight._m0[_2508].x * 0.3183098733425140380859375) * _2526) * _2527) + _2273;
        _2337 = (((cbLight._m0[_2508].y * 0.3183098733425140380859375) * _2526) * _2527) + _2275;
        _2339 = (((cbLight._m0[_2508].z * 0.3183098733425140380859375) * _2526) * _2527) + _2277;
    }
    uint _2342 = _2094 + 8u;
    float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _584) * 0.949999988079071044921875);
    float _2356 = _2355 * _2355;
    float _2357 = cbLight._m0[_2094].x + _661;
    float _2358 = cbLight._m0[_2094].y + _662;
    float _2359 = cbLight._m0[_2094].z + _663;
    float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
    float _2364 = _2363 * _2357;
    float _2365 = _2363 * _2358;
    float _2366 = _2363 * _2359;
    float _2367 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2094].xyz));
    float _4502 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _4513 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _2371 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2372 = dot(vec3(_581, _582, _583), vec3(_2364, _2365, _2366));
    float _4524 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _2376 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2364, _2365, _2366));
    float _4535 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2380 = _2356 * _2356;
    float _2384 = ((_2375 * _2375) * (_2380 + (-1.0))) + 1.0;
    float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0);
    float _2393 = 0.959999978542327880859375 - _743;
    float _2395 = 0.959999978542327880859375 - _744;
    float _2396 = 0.959999978542327880859375 - _745;
    float _2403 = 1.0 - _2356;
    float _2414 = (0.5 / (((_2371 * ((_2370 * _2403) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2403) + _2356) * _2370))) * _2370;
    float _4546 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2416 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2380 / ((_2384 * _2384) * 3.141590118408203125));
    uint _2430 = _2094 + 9u;
    float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _584) * 0.949999988079071044921875);
    float _2442 = _2441 * _2441;
    float _2443 = cbLight._m0[_2135].x + _661;
    float _2444 = cbLight._m0[_2135].y + _662;
    float _2445 = cbLight._m0[_2135].z + _663;
    float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
    float _2450 = _2449 * _2443;
    float _2451 = _2449 * _2444;
    float _2452 = _2449 * _2445;
    float _2453 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2135].xyz));
    float _4557 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2456 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2457 = dot(vec3(_581, _582, _583), vec3(_2450, _2451, _2452));
    float _4568 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2461 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2450, _2451, _2452));
    float _4579 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2465 = _2442 * _2442;
    float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
    float _2476 = exp2(log2(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * 5.0);
    float _2483 = 1.0 - _2442;
    float _2493 = (0.5 / (((_2371 * ((_2456 * _2483) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2483) + _2442) * _2456))) * _2456;
    float _4590 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2495 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
    float _2505 = (((((_2476 * _2393) + _746) * cbLight._m0[_2430].x) * _2495) * _2117) + ((((cbLight._m0[_2342].x * _2083) * ((_2392 * _2393) + _746)) * _2416) * _2131);
    float _2506 = (((((_2476 * _2395) + _748) * cbLight._m0[_2430].y) * _2495) * _2117) + ((((cbLight._m0[_2342].y * _2085) * ((_2392 * _2395) + _748)) * _2416) * _2131);
    float _2507 = (((((_2476 * _2396) + _749) * cbLight._m0[_2430].z) * _2495) * _2117) + ((((cbLight._m0[_2342].z * _2087) * ((_2392 * _2396) + _749)) * _2416) * _2131);
    float _2563;
    float _2565;
    float _2567;
    if (_2171)
    {
        _2563 = _2505;
        _2565 = _2506;
        _2567 = _2507;
    }
    else
    {
        uint _2569 = _2094 + 2u;
        uint _2573 = _2094 + 10u;
        float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2569].w)) * _584) * 0.949999988079071044921875);
        float _2588 = _2587 * _2587;
        float _2589 = cbLight._m0[_2569].x + _661;
        float _2590 = cbLight._m0[_2569].y + _662;
        float _2591 = cbLight._m0[_2569].z + _663;
        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
        float _2596 = _2595 * _2589;
        float _2597 = _2595 * _2590;
        float _2598 = _2595 * _2591;
        float _2599 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2569].xyz));
        float _4601 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2603 = dot(vec3(_581, _582, _583), vec3(_2596, _2597, _2598));
        float _4612 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2607 = dot(vec3(cbLight._m0[_2569].xyz), vec3(_2596, _2597, _2598));
        float _4623 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _2588 * _2588;
        float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
        float _2622 = exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0);
        float _2629 = 1.0 - _2588;
        float _2639 = (0.5 / (((_2371 * ((_2602 * _2629) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2629) + _2588) * _2602))) * _2602;
        float _4634 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2563 = (((((_2622 * _2393) + _746) * cbLight._m0[_2573].x) * _2641) * _2642) + _2505;
        _2565 = (((((_2622 * _2395) + _748) * cbLight._m0[_2573].y) * _2641) * _2642) + _2506;
        _2567 = (((((_2622 * _2396) + _749) * cbLight._m0[_2573].z) * _2641) * _2642) + _2507;
    }
    float _2673;
    float _2675;
    float _2677;
    if (_2280)
    {
        _2673 = _2563;
        _2675 = _2565;
        _2677 = _2567;
    }
    else
    {
        uint _2684 = _2094 + 3u;
        uint _2688 = _2094 + 11u;
        float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2684].w)) * _584) * 0.949999988079071044921875);
        float _2703 = _2702 * _2702;
        float _2704 = cbLight._m0[_2684].x + _661;
        float _2705 = cbLight._m0[_2684].y + _662;
        float _2706 = cbLight._m0[_2684].z + _663;
        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
        float _2711 = _2710 * _2704;
        float _2712 = _2710 * _2705;
        float _2713 = _2710 * _2706;
        float _2714 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2684].xyz));
        float _4650 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2718 = dot(vec3(_581, _582, _583), vec3(_2711, _2712, _2713));
        float _4661 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2722 = dot(vec3(cbLight._m0[_2684].xyz), vec3(_2711, _2712, _2713));
        float _4672 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2726 = _2703 * _2703;
        float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
        float _2737 = exp2(log2(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) * 5.0);
        float _2744 = 1.0 - _2703;
        float _2754 = (0.5 / (((_2371 * ((_2717 * _2744) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2744) + _2703) * _2717))) * _2717;
        float _4683 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2673 = (((((_2737 * _2393) + _746) * cbLight._m0[_2688].x) * _2756) * _2757) + _2563;
        _2675 = (((((_2737 * _2395) + _748) * cbLight._m0[_2688].y) * _2756) * _2757) + _2565;
        _2677 = (((((_2737 * _2396) + _749) * cbLight._m0[_2688].z) * _2756) * _2757) + _2567;
    }
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_2092.y == 0u)
    {
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.x;
        uint _2790 = uint((float(_2778.y) * floor(float(uint(cbSceneParam._m0[85u].y * _683) / _2779))) + floor(float(uint(cbSceneParam._m0[85u].x * _682) / _2779)));
        float _2800 = (log2(_1870 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2801 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        uint _2804 = uint(isnan(14.0) ? _2801 : (isnan(_2801) ? 14.0 : min(_2801, 14.0)));
        uvec4 _2809 = texelFetch(g_lightClusterGridBuffer, int(((_2804 << 2u) + (_2790 << 6u)) >> 2u));
        uint _2810 = _2809.x;
        uint _2811 = _2778.z;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        if (((((1u << ((_2811 >> 4u) & 15u)) + 4294967295u) & _2810) == 0u) || ((_2811 & 240u) == 0u))
        {
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
        }
        else
        {
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            uint _3049 = 0u;
            uint _3058;
            bool _3059;
            for (;;)
            {
                _3058 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3049 << 2u)) >> 2u)).x;
                _3059 = _3058 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3059)
                {
                    frontier_phi_71_pred = _3048;
                    frontier_phi_71_pred_1 = _3047;
                    frontier_phi_71_pred_2 = _3046;
                    frontier_phi_71_pred_3 = _3045;
                    frontier_phi_71_pred_4 = _3044;
                    frontier_phi_71_pred_5 = _3043;
                }
                else
                {
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    uint _3194;
                    _3188 = _3043;
                    _3189 = _3044;
                    _3190 = _3045;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3048;
                    _3194 = _3058;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    for (;;)
                    {
                        uint _3198 = uint(findLSB(_3194)) + (_3049 << 5u);
                        uint _3195 = (_3194 + 4294967295u) & _3194;
                        uint _3200 = _3198 * 48u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 3u)).x));
                        uint _3220 = (_3198 * 48u) + 4u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 3u)).x));
                        uint _3239 = (_3198 * 48u) + 8u;
                        vec3 _3250 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x));
                        float _3254 = _3214.x - _1868;
                        float _3255 = _3214.y - _1869;
                        float _3256 = _3214.z - _1870;
                        float _3257 = dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256));
                        float _3260 = inversesqrt(_3257);
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3264 = dot(vec3(_703, _706, _709), vec3(_3261, _3262, _3263));
                        float _3269 = 1.0 - (_3257 * _3214.w);
                        float _4709 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3270 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3271 = sqrt(_3257) * _3233.w;
                        float _3274 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                        float _3275 = _3274 * _3274;
                        float _3278 = ((1.0 - _3275) * _3264) + _3275;
                        float _3281 = _3271 * _3271;
                        float _3285 = ((isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))) * _3270) / ((_3281 * 0.699999988079071044921875) + 1.0);
                        float _3289 = (-0.0) - _1868;
                        float _3290 = (-0.0) - _1869;
                        float _3291 = (-0.0) - _1870;
                        float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3305 = exp2(log2(1.0 / ((_3281 * 3.5) + 5.0)) * 0.25);
                        float _3306 = 1.0 - _778;
                        float _3313 = sqrt(1.0 - ((1.0 - (_3306 * _3306)) * (1.0 - (_3305 * _3305))));
                        float _3314 = _3313 * _3313;
                        float _3315 = _3314 * _3314;
                        float _3316 = _3296 + _3261;
                        float _3317 = _3297 + _3262;
                        float _3318 = _3298 + _3263;
                        float _3322 = inversesqrt(dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318)));
                        float _3326 = dot(vec3(_703, _706, _709), vec3(_3296, _3297, _3298));
                        float _4725 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3330 = dot(vec3(_703, _706, _709), vec3(_3322 * _3316, _3322 * _3317, _3322 * _3318));
                        float _4736 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3333 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3337 = ((_3333 * _3333) * (_3315 + (-1.0))) + 1.0;
                        float _3338 = _3274 * _3314;
                        float _3339 = _3338 * _3338;
                        float _3342 = ((1.0 - _3339) * _3264) + _3339;
                        float _4747 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3343 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                        float _3344 = 1.0 - _3314;
                        float _3354 = (0.5 / (((_3343 * ((_3329 * _3344) + _3314)) + 9.9999999392252902907785028219223e-09) + (((_3343 * _3344) + _3314) * _3329))) * _3343;
                        float _4758 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3365 = (((_3315 * 3.1415927410125732421875) * (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) / ((_3337 * _3337) * ((_3281 * 2.1991131305694580078125) + 3.141590118408203125))) * _3270;
                        _3118 = (_3285 * _3233.x) + _3191;
                        _3119 = (_3285 * _3233.y) + _3192;
                        _3120 = (_3285 * _3233.z) + _3193;
                        _3115 = (_3365 * _3250.x) + _3188;
                        _3116 = (_3365 * _3250.y) + _3189;
                        _3117 = (_3365 * _3250.z) + _3190;
                        if (_3195 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3188 = _3115;
                            _3189 = _3116;
                            _3190 = _3117;
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3120;
                            _3194 = _3195;
                        }
                    }
                    frontier_phi_71_pred = _3120;
                    frontier_phi_71_pred_1 = _3119;
                    frontier_phi_71_pred_2 = _3118;
                    frontier_phi_71_pred_3 = _3117;
                    frontier_phi_71_pred_4 = _3116;
                    frontier_phi_71_pred_5 = _3115;
                }
                _2901 = frontier_phi_71_pred;
                _2899 = frontier_phi_71_pred_1;
                _2897 = frontier_phi_71_pred_2;
                _2895 = frontier_phi_71_pred_3;
                _2893 = frontier_phi_71_pred_4;
                _2891 = frontier_phi_71_pred_5;
                uint _3050 = _3049 + 1u;
                if (_3050 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3043 = _2891;
                    _3044 = _2893;
                    _3045 = _2895;
                    _3046 = _2897;
                    _3047 = _2899;
                    _3048 = _2901;
                    _3049 = _3050;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
        }
        uvec4 _2904 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2905 = _2904.z;
        uint _2907 = (_2905 >> 8u) & 15u;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        if (((4294967295u << _2907) & _2810) == 0u)
        {
            _3011 = _2890;
            _3013 = _2892;
            _3015 = _2894;
            _3017 = _2896;
            _3019 = _2898;
            _3021 = _2900;
        }
        else
        {
            float _3036 = inversesqrt(dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870)));
            float _3037 = _3036 * _1868;
            float _3038 = _3036 * _1869;
            float _3039 = _3036 * _1870;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2907 < ((_2905 >> 12u) & 15u))
            {
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3171 = _2890;
                float _3172 = _2892;
                float _3173 = _2894;
                float _3174 = _2896;
                float _3175 = _2898;
                float _3176 = _2900;
                uint _3177 = _2907;
                uint _3186;
                bool _3187;
                for (;;)
                {
                    _3186 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3177 << 2u)) >> 2u)).x;
                    _3187 = _3186 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3187)
                    {
                        frontier_phi_82_pred = _3176;
                        frontier_phi_82_pred_1 = _3175;
                        frontier_phi_82_pred_2 = _3174;
                        frontier_phi_82_pred_3 = _3173;
                        frontier_phi_82_pred_4 = _3172;
                        frontier_phi_82_pred_5 = _3171;
                    }
                    else
                    {
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3392 = _3171;
                        float _3393 = _3172;
                        float _3394 = _3173;
                        float _3395 = _3174;
                        float _3396 = _3175;
                        float _3397 = _3176;
                        uint _3398 = _3186;
                        uint _3399;
                        vec4 _3424;
                        float _3425;
                        vec4 _3440;
                        vec3 _3452;
                        vec4 _3467;
                        vec4 _3482;
                        float _3528;
                        bool _3529;
                        for (;;)
                        {
                            uint _3409 = ((_3177 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3398));
                            _3399 = (_3398 + 4294967295u) & _3398;
                            uint _3411 = _3409 * 40u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            _3425 = _3424.w;
                            uint _3427 = (_3409 * 40u) + 4u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3409 * 40u) + 8u;
                            _3452 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x));
                            uint _3454 = (_3409 * 40u) + 16u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3409 * 40u) + 20u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3409 * 40u) + 24u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3503 = (_3409 * 40u) + 28u;
                            vec4 _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            _3528 = fma(_1870, _3516.z, fma(_1869, _3516.y, _3516.x * _1868)) + _3516.w;
                            _3529 = !((fma(_1870, _3497.z, fma(_1869, _3497.y, _3497.x * _1868)) + _3497.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3529)
                            {
                                float _3556 = _3424.x - _1868;
                                float _3557 = _3424.y - _1869;
                                float _3558 = _3424.z - _1870;
                                float _3559 = dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558));
                                float _3562 = inversesqrt(_3559);
                                float _3563 = _3562 * _3556;
                                float _3564 = _3562 * _3557;
                                float _3565 = _3562 * _3558;
                                float _3569 = 1.0 - (_3559 / (_3425 * _3425));
                                float _4769 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3574 = sqrt(_3559) * _3440.w;
                                float _3576 = 1.39999997615814208984375 / (_3574 + 1.39999997615814208984375);
                                float _3577 = _3576 * _3576;
                                float _3580 = ((1.0 - _3577) * dot(vec3(_3563, _3564, _3565), vec3(_703, _706, _709))) + _3577;
                                float _3583 = _3574 * _3574;
                                float _3587 = (fma(_1870, _3467.z, fma(_1869, _3467.y, _3467.x * _1868)) + _3467.w) / _3528;
                                float _3588 = (fma(_1870, _3482.z, fma(_1869, _3482.y, _3482.x * _1868)) + _3482.w) / _3528;
                                float _3592 = 1.0 - dot(vec2(_3587, _3588), vec2(_3587, _3588));
                                float _4785 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3594 = _3593 * (((isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0))) * _3570) / ((_3583 * 0.699999988079071044921875) + 1.0));
                                float _3606 = exp2(log2(1.0 / ((_3583 * 3.5) + 5.0)) * 0.25);
                                float _3607 = 1.0 - _778;
                                float _3614 = sqrt(1.0 - ((1.0 - (_3607 * _3607)) * (1.0 - (_3606 * _3606))));
                                float _3615 = _3614 * _3614;
                                float _3616 = _3615 * _3615;
                                float _3617 = _3563 - _3037;
                                float _3618 = _3564 - _3038;
                                float _3619 = _3565 - _3039;
                                float _3623 = inversesqrt(dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619)));
                                float _3627 = dot(vec3(_703, _706, _709), vec3((-0.0) - _3037, (-0.0) - _3038, (-0.0) - _3039));
                                float _4796 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3631 = dot(vec3(_703, _706, _709), vec3(_3623 * _3617, _3623 * _3618, _3623 * _3619));
                                float _4807 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3634 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3638 = ((_3634 * _3634) * (_3616 + (-1.0))) + 1.0;
                                float _3639 = _3576 * _3615;
                                float _3640 = _3639 * _3639;
                                float _3646 = ((1.0 - _3640) * dot(vec3(_703, _706, _709), vec3(_3563, _3564, _3565))) + _3640;
                                float _4818 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3648 = 1.0 - _3615;
                                float _3658 = (0.5 / (((_3647 * ((_3630 * _3648) + _3615)) + 9.9999999392252902907785028219223e-09) + (((_3647 * _3648) + _3615) * _3630))) * _3647;
                                float _4829 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3668 = (_3593 * _3570) * (((_3616 * 3.1415927410125732421875) * (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) / ((_3638 * _3638) * ((_3583 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3594 * _3440.z;
                                frontier_phi_88_pred_1 = _3594 * _3440.y;
                                frontier_phi_88_pred_2 = _3594 * _3440.x;
                                frontier_phi_88_pred_3 = _3668 * _3452.z;
                                frontier_phi_88_pred_4 = _3668 * _3452.y;
                                frontier_phi_88_pred_5 = _3668 * _3452.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3677 = frontier_phi_88_pred;
                            _3676 = frontier_phi_88_pred_1;
                            _3675 = frontier_phi_88_pred_2;
                            _3674 = frontier_phi_88_pred_3;
                            _3673 = frontier_phi_88_pred_4;
                            _3672 = frontier_phi_88_pred_5;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            _3381 = _3674 + _3394;
                            if (_3399 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3399;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3384;
                        frontier_phi_82_pred_1 = _3383;
                        frontier_phi_82_pred_2 = _3382;
                        frontier_phi_82_pred_3 = _3381;
                        frontier_phi_82_pred_4 = _3380;
                        frontier_phi_82_pred_5 = _3379;
                    }
                    _3022 = frontier_phi_82_pred;
                    _3020 = frontier_phi_82_pred_1;
                    _3018 = frontier_phi_82_pred_2;
                    _3016 = frontier_phi_82_pred_3;
                    _3014 = frontier_phi_82_pred_4;
                    _3012 = frontier_phi_82_pred_5;
                    uint _3178 = _3177 + 1u;
                    if (_3178 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3171 = _3012;
                        _3172 = _3014;
                        _3173 = _3016;
                        _3174 = _3018;
                        _3175 = _3020;
                        _3176 = _3022;
                        _3177 = _3178;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3018;
                frontier_phi_63_64_ladder_1 = _3022;
                frontier_phi_63_64_ladder_2 = _3020;
                frontier_phi_63_64_ladder_3 = _3016;
                frontier_phi_63_64_ladder_4 = _3014;
                frontier_phi_63_64_ladder_5 = _3012;
            }
            else
            {
                frontier_phi_63_64_ladder = _2896;
                frontier_phi_63_64_ladder_1 = _2900;
                frontier_phi_63_64_ladder_2 = _2898;
                frontier_phi_63_64_ladder_3 = _2894;
                frontier_phi_63_64_ladder_4 = _2892;
                frontier_phi_63_64_ladder_5 = _2890;
            }
            _3011 = frontier_phi_63_64_ladder_5;
            _3013 = frontier_phi_63_64_ladder_4;
            _3015 = frontier_phi_63_64_ladder_3;
            _3017 = frontier_phi_63_64_ladder;
            _3019 = frontier_phi_63_64_ladder_2;
            _3021 = frontier_phi_63_64_ladder_1;
        }
        float _3026 = isnan(1.0) ? _762 : (isnan(_762) ? 1.0 : min(_762, 1.0));
        _2823 = (_3026 * _3017) + _2335;
        _2825 = (_3026 * _3019) + _2337;
        _2827 = (_3026 * _3021) + _2339;
        _2829 = ((_3011 * _746) * _3026) + _2673;
        _2831 = ((_3013 * _748) * _3026) + _2675;
        _2833 = ((_3015 * _749) * _3026) + _2677;
    }
    else
    {
        _2823 = _2335;
        _2825 = _2337;
        _2827 = _2339;
        _2829 = _2673;
        _2831 = _2675;
        _2833 = _2677;
    }
    float _4845 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4856 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4867 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _2850 = ((isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2823 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _762))) + ((_2829 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1602)) * cbPerFrame._m0[3u].x);
    float _2851 = ((isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2825 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _762))) + ((_2831 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1602)) * cbPerFrame._m0[3u].x);
    float _2852 = ((isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2827 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _762))) + ((_2833 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1602)) * cbPerFrame._m0[3u].x);
    uint _2853 = _260 + 6u;
    float _2861 = _682 / cbSceneParam._m0[86u].x;
    float _2862 = _683 / cbSceneParam._m0[86u].y;
    vec4 _2876 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, (log2((isnan(cbSceneParam._m0[77u].w) ? _603 : (isnan(_603) ? cbSceneParam._m0[77u].w : min(_603, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2878 = _2876.x;
    float _2879 = _2876.y;
    float _2880 = _2876.z;
    float _2881 = _2876.w;
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    if (_603 > cbSceneParam._m0[78u].w)
    {
        float _2915 = isnan(_603) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _603 : min(cbSceneParam._m0[80u].w, _603));
        float _2916 = _2915 / _603;
        float _2927 = _2916 * _654;
        float _2928 = _655 * _2916;
        float _2929 = (-0.0) - _2928;
        float _2931 = _2916 * _656;
        float _2933 = (cbSceneParam._m0[77u].w * _2929) / _2915;
        float _2934 = _2933 + cbSceneParam._m0[79u].w;
        float _2935 = cbSceneParam._m0[79u].w - _2928;
        float _2941 = sqrt(((_2927 * _2927) + (_2928 * _2928)) + (_2931 * _2931));
        float _2944 = (1.0 - (cbSceneParam._m0[77u].w / _2915)) * _2941;
        float _2949 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2951 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3128;
        if (abs((_2929 - _2933) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3128 = ((((_2934 > 0.0) ? exp2(_2949 * _2934) : (2.0 - exp2(_2951 * _2934))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2944;
        }
        else
        {
            float _3072 = 1.0 / cbSceneParam._m0[80u].x;
            float _3073 = isnan(_2935) ? _2934 : (isnan(_2934) ? _2935 : max(_2934, _2935));
            float _3074 = isnan(_2935) ? _2934 : (isnan(_2934) ? _2935 : min(_2934, _2935));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            float _3084 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : min(_3074, 0.0));
            _3128 = ((abs(_2941 / _2929) * cbSceneParam._m0[80u].y) * ((((_3083 - _3084) * 2.0) - ((exp2(_2949 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0)))) - exp2(_2949 * (isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))))) * _3072)) - ((exp2(_2951 * _3083) - exp2(_2951 * _3084)) * _3072))) + (_2944 * cbSceneParam._m0[80u].z);
        }
        vec4 _3130 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, 1.0), 0.0);
        float _3139 = exp2((_3128 * (-1.44269502162933349609375)) * (1.0 - _3130.w));
        float _3140 = log2(_3139);
        float _3156 = log2(_2881);
        _2953 = (exp2(_3156 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].x)) * _3130.x) / cbSceneParam._m0[78u].x)) + _2878;
        _2955 = (exp2(_3156 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].y)) * _3130.y) / cbSceneParam._m0[78u].y)) + _2879;
        _2957 = (exp2(_3156 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].z)) * _3130.z) / cbSceneParam._m0[78u].z)) + _2880;
        _2959 = _3139 * _2881;
    }
    else
    {
        _2953 = _2878;
        _2955 = _2879;
        _2957 = _2880;
        _2959 = _2881;
    }
    bool _3166;
    vec4 _2969;
    vec4 _2991;
    float _2993;
    float _2997;
    float _2998;
    float _2999;
    float _3000;
    bool _3010;
    for (;;)
    {
        _2969 = cbMatDynParam._m0[0u];
        float _2971 = roundEven(_2969.y);
        bool _2972 = _2971 == 3.0;
        float _2973 = log2(_2959);
        float _2980 = exp2(_2973 * cbSceneParam._m0[78u].x) * _2850;
        float _2981 = exp2(_2973 * cbSceneParam._m0[78u].y) * _2851;
        float _2982 = exp2(_2973 * cbSceneParam._m0[78u].z) * _2852;
        float _2989 = _670 + (-0.5);
        _2991 = cbMtdParam._m0[1u];
        _2993 = _2991.y * _2989;
        float _2996 = (_2971 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2997 = _2996 * (_2972 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2953)));
        _2998 = _2996 * (_2972 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2955)));
        _2999 = _2996 * (_2972 ? _2982 : (_2982 + (cbSceneParam._m0[72u].w * _2957)));
        _3000 = _2989 * 0.999000012874603271484375;
        _3010 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3010)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _3000) < 0.5)
            {
                _3166 = true;
                break;
            }
        }
        uint _3107 = _722 + uint(_2969.w);
        if ((cbInstanceData._m0[_3107].w < 1.0) && ((cbInstanceData._m0[_3107].w + _3000) < 0.5))
        {
            _3166 = true;
            break;
        }
        if ((_2993 + 1.0) < _2991.x)
        {
            _3166 = true;
            break;
        }
        _3166 = false;
        break;
    }
    float _3370;
    if (_3166)
    {
        discard_state = true;
        _3370 = 0.0;
    }
    else
    {
        _3370 = cbInstanceData._m0[_2853].w;
    }
    SV_Target.x = _2997;
    SV_Target.y = _2998;
    SV_Target.z = _2999;
    SV_Target.w = _3370;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2853].w;
    discard_exit();
}


