#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1172;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _338 = _334.z;
    float _342 = (_334.x * 2.0) + (-1.0);
    float _343 = (_334.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_342, _343), vec2(_342, _343));
    float _3783 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))));
    float _355 = _342 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_308.x * 2.0) + (-1.0)));
    float _356 = _343 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_308.y * 2.0) + (-1.0)));
    float _359 = fma(_350, _231, fma(_356, _238, _355 * _224));
    float _362 = fma(_350, _232, fma(_356, _239, _355 * _225));
    float _365 = fma(_350, _233, fma(_356, _240, _355 * _226));
    float _369 = inversesqrt(dot(vec3(_359, _362, _365), vec3(_359, _362, _365)));
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _407 = _405.x;
    float _408 = 1.0 - _407;
    float _417 = (cbMtdParam._m0[19u].x + dot(vec4(_369 * _359, _369 * _362, _369 * _365, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_407 - _408) * cbMtdParam._m0[24u].z) + _408) * cbMtdParam._m0[21u].z);
    float _3794 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _420 = (-0.0) - cbMtdParam._m0[24u].x;
    float _422 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _422 : (isnan(_422) ? 1.0 : min(_422, 1.0));
    float _430 = _418 - ((_418 * TEXCOORD_8.x) * _423);
    float _431 = _418 - ((_418 * TEXCOORD_8.y) * _423);
    float _432 = _418 - ((_418 * TEXCOORD_8.z) * _423);
    float _439 = (_430 * (cbMtdParam._m0[17u].x - _288)) + _288;
    float _440 = (_431 * (cbMtdParam._m0[17u].y - _289)) + _289;
    float _441 = (_432 * (cbMtdParam._m0[17u].z - _290)) + _290;
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _455 = _453.x;
    float _456 = 1.0 - _455;
    float _486 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_455 - _456) * cbMtdParam._m0[24u].w) + _456) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3815 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _487 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _495 = ((((cbMtdParam._m0[10u].x - _439) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _487) + _439;
    float _496 = ((((cbMtdParam._m0[10u].y - _440) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _487) + _440;
    float _497 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _441)) * _487) + _441;
    vec4 _510 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _512 = _510.x;
    float _514 = _512 - (_512 * _430);
    float _516 = _514 - (_514 * _487);
    float _521 = (((_308.z - _338) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _338;
    vec4 _535 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _542 = (_535.x * 2.0) + (-1.0);
    float _543 = (_535.y * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _3826 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _552 = ((_535.z - _521) * _430) + _521;
    float _555 = ((cbMtdParam._m0[23u].y - _552) * _487) + _552;
    vec4 _574 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _580 = (_574.x * 2.0) + (-1.0);
    float _581 = (_574.y * 2.0) + (-1.0);
    float _582 = dot(vec2(_580, _581), vec2(_580, _581));
    float _3837 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _597 = ((sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) - _350) * _432) + _350;
    float _600 = (((_542 - _355) * _430) + _355) + (cbMtdParam._m0[21u].x * _355);
    float _601 = (((_543 - _356) * _431) + _356) + (cbMtdParam._m0[21u].x * _356);
    float _612 = (((_580 - _600) + (_600 * cbMtdParam._m0[22u].z)) * _487) + _600;
    float _613 = (((_581 - _601) + (_601 * cbMtdParam._m0[22u].z)) * _487) + _601;
    float _614 = (_487 * (sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) - _597)) + _597;
    float _616 = cbMtdParam._m0[22u].x + _334.w;
    float _619 = fma(_614, _231, fma(_613, _238, _612 * _224));
    float _622 = fma(_614, _232, fma(_613, _239, _612 * _225));
    float _625 = fma(_614, _233, fma(_613, _240, _612 * _226));
    float _629 = inversesqrt(dot(vec3(_619, _622, _625), vec3(_619, _622, _625)));
    float _630 = _629 * _619;
    float _631 = _629 * _622;
    float _632 = _629 * _625;
    float _3848 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _633 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3870 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3881 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3892 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3903 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _638 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _652 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _702 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _692);
    float _703 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _692);
    float _704 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _692);
    float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
    float _709 = _702 * _708;
    float _710 = _703 * _708;
    float _711 = _704 * _708;
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _739 = fma(_632, cbSceneParam._m0[5u].z, fma(_631, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _630));
    float _742 = fma(_632, cbSceneParam._m0[6u].z, fma(_631, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _630));
    float _745 = fma(_632, cbSceneParam._m0[7u].z, fma(_631, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _630));
    uint _759 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _765 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_759].x;
    float _766 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_759].y;
    float _767 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_759].z;
    float _3914 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _771 = 1.0 - _638;
    float _772 = _768 * _771;
    float _773 = _769 * _771;
    float _774 = _770 * _771;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _638;
    float _780 = (_769 + (-0.039999999105930328369140625)) * _638;
    float _781 = (_770 + (-0.039999999105930328369140625)) * _638;
    float _782 = _779 + 0.039999999105930328369140625;
    float _784 = _780 + 0.039999999105930328369140625;
    float _785 = _781 + 0.039999999105930328369140625;
    vec4 _794 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _798 = ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * TEXCOORD_5.w) * _794.x;
    float _799 = dot(vec3(_630, _631, _632), vec3(_709, _710, _711));
    float _802 = _799 * 2.0;
    float _806 = (_802 * _630) - _709;
    float _807 = (_802 * _631) - _710;
    float _808 = (_802 * _632) - _711;
    float _812 = abs(dot(vec3(_709, _710, _711), vec3(_630, _631, _632)));
    float _3947 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _814 = sqrt(_633);
    float _827 = exp2((_814 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_814 * 3.0));
    float _833 = (1.0 - _827) * ((_814 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _834 = _827 * _814;
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1171;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _896 = fma(_870, cbModelParam._m0[26u].z, fma(_866, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _862));
        float _900 = fma(_870, cbModelParam._m0[27u].z, fma(_866, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _862));
        float _904 = fma(_870, cbModelParam._m0[28u].z, fma(_866, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _862));
        float _929 = _862 + _630;
        float _930 = _866 + _631;
        float _931 = _870 + _632;
        float _941 = fma(_931, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929)) - _896;
        float _942 = fma(_931, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929)) - _900;
        float _943 = fma(_931, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929)) - _904;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_896 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_900 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[34u].z) + ((((((_904 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _999 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_965.x + (-0.5));
        float _1001 = _999 * (_965.y + (-0.5));
        float _1002 = _999 * (_965.z + (-0.5));
        float _1009 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_972.x + (-0.5));
        float _1011 = _1009 * (_972.y + (-0.5));
        float _1012 = _1009 * (_972.z + (-0.5));
        float _1019 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_979.x + (-0.5));
        float _1021 = _1019 * (_979.y + (-0.5));
        float _1022 = _1019 * (_979.z + (-0.5));
        float _1029 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_986.x + (-0.5));
        float _1031 = _1029 * (_986.y + (-0.5));
        float _1032 = _1029 * (_986.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1053 = (dot(vec3(_630, _631, _632), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1063 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3995 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1065 + 1.0))) + _1070) * _1033;
        float _1080 = _1001 * 0.5;
        float _1081 = _1011 * 0.5;
        float _1082 = _1021 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_630, _631, _632), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _4028 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1107 + 1.0))) + _1112) * _1034;
        float _1122 = _1002 * 0.5;
        float _1123 = _1012 * 0.5;
        float _1124 = _1022 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_630, _631, _632), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _4061 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1149 + 1.0))) + _1154) * _1035;
        _1171 = _1002;
        _1173 = _1001;
        _1174 = _1000;
        _1175 = _1012;
        _1176 = _1011;
        _1177 = _1010;
        _1178 = _1022;
        _1179 = _1021;
        _1180 = _1020;
        _1181 = _1035;
        _1182 = _1034;
        _1183 = _1033;
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _1172;
        _1173 = _1172;
        _1174 = _1172;
        _1175 = _1172;
        _1176 = _1172;
        _1177 = _1172;
        _1178 = _1172;
        _1179 = _1172;
        _1180 = _1172;
        _1181 = _1172;
        _1182 = _1172;
        _1183 = _1172;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1211 = fma(_870, cbModelParam._m0[30u].z, fma(_866, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _862));
        float _1215 = fma(_870, cbModelParam._m0[31u].z, fma(_866, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _862));
        float _1219 = fma(_870, cbModelParam._m0[32u].z, fma(_866, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _862));
        float _1242 = _862 + _630;
        float _1243 = _866 + _631;
        float _1244 = _870 + _632;
        float _1254 = fma(_1244, cbModelParam._m0[30u].z, fma(_1243, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1242)) - _1211;
        float _1255 = fma(_1244, cbModelParam._m0[31u].z, fma(_1243, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1242)) - _1215;
        float _1256 = fma(_1244, cbModelParam._m0[32u].z, fma(_1243, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1242)) - _1219;
        float _1260 = inversesqrt(dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256)));
        float _1273 = ((_1260 * _1254) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1211 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1260 * _1255) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1215 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1260 * _1256) / cbModelParam._m0[35u].z) + ((((((_1219 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        float _1310 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1277.x + (-0.5));
        float _1312 = _1310 * (_1277.y + (-0.5));
        float _1313 = _1310 * (_1277.z + (-0.5));
        float _1320 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1284.x + (-0.5));
        float _1322 = _1320 * (_1284.y + (-0.5));
        float _1323 = _1320 * (_1284.z + (-0.5));
        float _1330 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1291.x + (-0.5));
        float _1332 = _1330 * (_1291.y + (-0.5));
        float _1333 = _1330 * (_1291.z + (-0.5));
        float _1340 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1298.x + (-0.5));
        float _1342 = _1340 * (_1298.y + (-0.5));
        float _1343 = _1340 * (_1298.z + (-0.5));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = _1311 * 0.5;
        float _1348 = _1321 * 0.5;
        float _1349 = _1331 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_630, _631, _632), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4124 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1374 + 1.0))) + _1379) * _1344;
        float _1389 = _1312 * 0.5;
        float _1390 = _1322 * 0.5;
        float _1391 = _1332 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_630, _631, _632), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4157 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1416 + 1.0))) + _1421) * _1345;
        float _1431 = _1313 * 0.5;
        float _1432 = _1323 * 0.5;
        float _1433 = _1333 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_630, _631, _632), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4190 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1458 + 1.0))) + _1463) * _1346;
        _1480 = _1313;
        _1481 = _1312;
        _1482 = _1311;
        _1483 = _1323;
        _1484 = _1322;
        _1485 = _1321;
        _1486 = _1333;
        _1487 = _1332;
        _1488 = _1331;
        _1489 = _1346;
        _1490 = _1345;
        _1491 = _1344;
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
    }
    else
    {
        _1480 = _1172;
        _1481 = _1172;
        _1482 = _1172;
        _1483 = _1172;
        _1484 = _1172;
        _1485 = _1172;
        _1486 = _1172;
        _1487 = _1172;
        _1488 = _1172;
        _1489 = _1172;
        _1490 = _1172;
        _1491 = _1172;
        _1492 = 0.0;
        _1493 = 0.0;
        _1494 = 0.0;
    }
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1184)) + _1184;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1185)) + _1185;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1186)) + _1186;
    float _1527 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1530 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1533 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1504));
    float _1548 = _806 * 0.5;
    float _1549 = _807 * 0.5;
    float _1550 = _808 * 0.5;
    float _1551 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1554 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1557 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1591;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1564 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1171, _1175, _1178, _1181));
        float _1568 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1572 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1579 = dot(vec4(cbModelParam._m0[39u]), vec4(_1548, _1549, _1550, 1.0));
        _1591 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1579) ? 0.0 : (isnan(0.0) ? _1579 : max(0.0, _1579))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1591 = 1.0;
    }
    float _1602;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1593 = dot(vec4(cbModelParam._m0[40u]), vec4(_1548, _1549, _1550, 1.0));
        _1602 = dot(vec3(isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1602 = 1.0;
    }
    float _1606 = (_1602 * cbModelParam._m0[1u].x) + (_1591 * (1.0 - cbModelParam._m0[1u].x));
    float _1616 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _633);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1616 : min(cbModelParam._m0[25u].z, _1616));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_870, cbModelParam._m0[13u].z, fma(_866, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_870, cbModelParam._m0[14u].z, fma(_866, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_870, cbModelParam._m0[15u].z, fma(_866, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_808, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _806));
        float _1679 = fma(_808, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _806));
        float _1682 = fma(_808, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _806));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1710 = frontier_phi_14_12_ladder;
        }
        float _1882;
        if (_1679 > 0.0)
        {
            _1882 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1882 = frontier_phi_23_19_ladder;
        }
        float _2178;
        if (_1682 > 0.0)
        {
            _2178 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2178 = frontier_phi_35_30_ladder;
        }
        float _2180 = isnan(_1882) ? _1710 : (isnan(_1710) ? _1882 : min(_1710, _1882));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1676) + _1665;
        float _2186 = (_2181 * _1679) + _1669;
        float _2187 = (_2181 * _1682) + _1673;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2190 = (-1.0) - _2188;
        float _2192 = _2188 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2187 > _2192) || ((_2187 < _2190) || ((_2186 > _2192) || ((_2186 < _2190) || ((_2185 < _2190) || (_2185 > _2192))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2332 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2187, cbModelParam._m0[9u].z, fma(_2186, cbModelParam._m0[9u].y, _2185 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2187, cbModelParam._m0[10u].z, fma(_2186, cbModelParam._m0[10u].y, _2185 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2187, cbModelParam._m0[11u].z, fma(_2186, cbModelParam._m0[11u].y, _2185 * cbModelParam._m0[11u].x))), _1617);
            frontier_phi_13_35_ladder = _2332.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2332.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2332.x * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_13_35_ladder_2;
        _1700 = frontier_phi_13_35_ladder_1;
        _1702 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_806, _807, _808), _1617);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _633);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1761 = fma(_870, cbModelParam._m0[21u].z, fma(_866, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862)) + cbModelParam._m0[21u].w;
        float _1765 = fma(_870, cbModelParam._m0[22u].z, fma(_866, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862)) + cbModelParam._m0[22u].w;
        float _1769 = fma(_870, cbModelParam._m0[23u].z, fma(_866, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862)) + cbModelParam._m0[23u].w;
        float _1772 = fma(_808, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _806));
        float _1775 = fma(_808, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _806));
        float _1778 = fma(_808, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _806));
        float _1887;
        if (_1772 > 0.0)
        {
            _1887 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1887 = frontier_phi_25_21_ladder;
        }
        float _2205;
        if (_1775 > 0.0)
        {
            _2205 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2205 = frontier_phi_37_32_ladder;
        }
        float _2543;
        if (_1778 > 0.0)
        {
            _2543 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2543 = frontier_phi_47_44_ladder;
        }
        float _2545 = isnan(_2205) ? _1887 : (isnan(_1887) ? _2205 : min(_1887, _2205));
        float _2546 = isnan(_2543) ? _2545 : (isnan(_2545) ? _2543 : min(_2545, _2543));
        float _2550 = (_2546 * _1772) + _1761;
        float _2551 = (_2546 * _1775) + _1765;
        float _2552 = (_2546 * _1778) + _1769;
        float _2553 = _2546 * 9.9999997473787516355514526367188e-05;
        float _2554 = (-1.0) - _2553;
        float _2556 = _2553 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2552 > _2556) || ((_2552 < _2554) || ((_2551 > _2556) || ((_2551 < _2554) || ((_2550 < _2554) || (_2550 > _2556))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2552, cbModelParam._m0[17u].z, fma(_2551, cbModelParam._m0[17u].y, _2550 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2552, cbModelParam._m0[18u].z, fma(_2551, cbModelParam._m0[18u].y, _2550 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2552, cbModelParam._m0[19u].z, fma(_2551, cbModelParam._m0[19u].y, _2550 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_22_47_ladder = _2674.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2674.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2674.x * cbModelParam._m0[1u].z;
        }
        _1797 = frontier_phi_22_47_ladder_2;
        _1799 = frontier_phi_22_47_ladder_1;
        _1801 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_806, _807, _808), _1707);
        _1797 = _1781.x * cbModelParam._m0[1u].z;
        _1799 = _1781.y * cbModelParam._m0[1u].z;
        _1801 = _1781.z * cbModelParam._m0[1u].z;
    }
    float _1814 = (((_833 * _782) + _834) * _798) * ((cbModelParam._m0[1u].w * (_1797 - _1698)) + _1698);
    float _1816 = (((_833 * _784) + _834) * _798) * ((cbModelParam._m0[1u].w * (_1799 - _1700)) + _1700);
    float _1818 = (((_833 * _785) + _834) * _798) * ((cbModelParam._m0[1u].w * (_1801 - _1702)) + _1702);
    float _1821 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, _1814 * cbSceneParam._m0[91u].x));
    float _1861 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1865 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1869 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1873 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1874 = _1861 / _1873;
    float _1875 = _1865 / _1873;
    float _1876 = _1869 / _1873;
    float _2023;
    float _2024;
    float _2025;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1903 = ((uint(_1876 > cbSceneParam._m0[59u].y) + uint(_1876 > cbSceneParam._m0[59u].x)) + uint(_1876 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1904 = _1903 + 43u;
        uint _1912 = _1903 + 44u;
        uint _1920 = _1903 + 45u;
        uint _1928 = _1903 + 46u;
        float _1939 = fma(_1873, cbSceneParam._m0[_1904].w, fma(_1869, cbSceneParam._m0[_1904].z, fma(_1865, cbSceneParam._m0[_1904].y, _1861 * cbSceneParam._m0[_1904].x)));
        float _1943 = fma(_1873, cbSceneParam._m0[_1912].w, fma(_1869, cbSceneParam._m0[_1912].z, fma(_1865, cbSceneParam._m0[_1912].y, _1861 * cbSceneParam._m0[_1912].x)));
        float _1951 = fma(_1873, cbSceneParam._m0[_1928].w, fma(_1869, cbSceneParam._m0[_1928].z, fma(_1865, cbSceneParam._m0[_1928].y, _1861 * cbSceneParam._m0[_1928].x)));
        float _1956 = cbSceneParam._m0[33u].z * _1951;
        float _1958 = cbSceneParam._m0[33u].w * _1951;
        float _1961 = fma(_1873, cbSceneParam._m0[_1920].w, fma(_1869, cbSceneParam._m0[_1920].z, fma(_1865, cbSceneParam._m0[_1920].y, _1861 * cbSceneParam._m0[_1920].x))) / _1951;
        float _2009 = (cbSceneParam._m0[33u].x - sqrt(((_1875 * _1875) + (_1874 * _1874)) + (_1876 * _1876))) * cbSceneParam._m0[33u].y;
        float _4316 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2016 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1956 + _1939) / _1951, (_1958 + _1943) / _1951), _1961), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1958 + _1939) / _1951, (_1943 - _1956) / _1951), _1961), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1939 - _1956) / _1951, (_1943 - _1958) / _1951), _1961), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1939 - _1958) / _1951, (_1956 + _1943) / _1951), _1961), 0.0)).x), vec4(0.25)));
        _2023 = 1.0 - (_2016 * cbSceneParam._m0[34u].x);
        _2024 = 1.0 - (_2016 * cbSceneParam._m0[34u].y);
        _2025 = 1.0 - (_2016 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2023 = 1.0;
        _2024 = 1.0;
        _2025 = 1.0;
    }
    float _2089;
    float _2091;
    float _2093;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2077 = fma(_1873, cbSceneParam._m0[63u].w, fma(_1869, cbSceneParam._m0[63u].z, fma(_1865, cbSceneParam._m0[63u].y, _1861 * cbSceneParam._m0[63u].x)));
        float _2078 = fma(_1873, cbSceneParam._m0[60u].w, fma(_1869, cbSceneParam._m0[60u].z, fma(_1865, cbSceneParam._m0[60u].y, _1861 * cbSceneParam._m0[60u].x))) / _2077;
        float _2079 = fma(_1873, cbSceneParam._m0[61u].w, fma(_1869, cbSceneParam._m0[61u].z, fma(_1865, cbSceneParam._m0[61u].y, _1861 * cbSceneParam._m0[61u].x))) / _2077;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2078 >= cbSceneParam._m0[64u].x) && (_2079 >= cbSceneParam._m0[64u].y)) && (_2078 <= cbSceneParam._m0[64u].z)) && (_2079 <= cbSceneParam._m0[64u].w))
        {
            float _2218 = fma(_1873, cbSceneParam._m0[62u].w, fma(_1869, cbSceneParam._m0[62u].z, fma(_1865, cbSceneParam._m0[62u].y, _1861 * cbSceneParam._m0[62u].x))) / _2077;
            float _2222 = isnan(cbSceneParam._m0[41u].w) ? _2218 : (isnan(_2218) ? cbSceneParam._m0[41u].w : max(_2218, cbSceneParam._m0[41u].w));
            float _2265 = (cbSceneParam._m0[33u].x - sqrt(((_1875 * _1875) + (_1874 * _1874)) + (_1876 * _1876))) * cbSceneParam._m0[33u].y;
            float _4332 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
            float _2272 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2078, cbSceneParam._m0[33u].w + _2079), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2078, _2079 - cbSceneParam._m0[33u].z), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2078 - cbSceneParam._m0[33u].z, _2079 - cbSceneParam._m0[33u].w), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2078 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2079), _2222), 0.0)).x), vec4(0.25)));
            float _2276 = 1.0 - (_2272 * cbSceneParam._m0[34u].x);
            float _2277 = 1.0 - (_2272 * cbSceneParam._m0[34u].y);
            float _2278 = 1.0 - (_2272 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2278) ? _2025 : (isnan(_2025) ? _2278 : min(_2025, _2278));
            frontier_phi_34_33_ladder_1 = isnan(_2277) ? _2024 : (isnan(_2024) ? _2277 : min(_2024, _2277));
            frontier_phi_34_33_ladder_2 = isnan(_2276) ? _2023 : (isnan(_2023) ? _2276 : min(_2023, _2276));
        }
        else
        {
            frontier_phi_34_33_ladder = _2025;
            frontier_phi_34_33_ladder_1 = _2024;
            frontier_phi_34_33_ladder_2 = _2023;
        }
        _2089 = frontier_phi_34_33_ladder_2;
        _2091 = frontier_phi_34_33_ladder_1;
        _2093 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2089 = _2023;
        _2091 = _2024;
        _2093 = _2025;
    }
    uvec4 _2098 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _2100 = _2098.x * 14u;
    uint _2101 = _2100 + 13u;
    float _2108 = _798 + (-1.0);
    float _2113 = (cbLight._m0[_2101].x * _2108) + 1.0;
    float _2114 = (cbLight._m0[_2101].y * _2108) + 1.0;
    float _2115 = (cbLight._m0[_2101].z * _2108) + 1.0;
    float _2116 = (cbLight._m0[_2101].w * _2108) + 1.0;
    uint _2117 = _2100 + 5u;
    float _2123 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
    uint _2127 = _2100 + 4u;
    float _2137 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
    uint _2141 = _2100 | 1u;
    float _2152 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_630, _631, _632));
    float _2155 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_630, _631, _632));
    float _4368 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _4379 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2160 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.3183098733425140380859375;
    float _2162 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * 0.3183098733425140380859375;
    float _2169 = ((cbLight._m0[_2117].x * _2123) * _2162) + (((cbLight._m0[_2127].x * _2089) * _2137) * _2160);
    float _2170 = ((_2123 * cbLight._m0[_2117].y) * _2162) + (((cbLight._m0[_2127].y * _2091) * _2137) * _2160);
    float _2171 = ((_2123 * cbLight._m0[_2117].z) * _2162) + (((cbLight._m0[_2127].z * _2093) * _2137) * _2160);
    uvec4 _2175 = floatBitsToUint(cbLight._m0[_2100 + 12u]);
    bool _2177 = _2175.x == 0u;
    float _2279;
    float _2281;
    float _2283;
    if (_2177)
    {
        _2279 = _2169;
        _2281 = _2170;
        _2283 = _2171;
    }
    else
    {
        uint _2287 = _2100 + 6u;
        float _2303 = (dot(vec3(cbLight._m0[_2100 + 2u].xyz), vec3(_630, _631, _632)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4390 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2306 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2279 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2169;
        _2281 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2170;
        _2283 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2171;
    }
    bool _2286 = _2175.y == 0u;
    float _2341;
    float _2343;
    float _2345;
    if (_2286)
    {
        _2341 = _2279;
        _2343 = _2281;
        _2345 = _2283;
    }
    else
    {
        uint _2514 = _2100 + 7u;
        float _2530 = (dot(vec3(cbLight._m0[_2100 + 3u].xyz), vec3(_630, _631, _632)) * 0.5) + 0.5;
        float _2531 = _2530 * _2530;
        float _4406 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2532 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2533 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
        _2341 = (((cbLight._m0[_2514].x * 0.3183098733425140380859375) * _2532) * _2533) + _2279;
        _2343 = (((cbLight._m0[_2514].y * 0.3183098733425140380859375) * _2532) * _2533) + _2281;
        _2345 = (((cbLight._m0[_2514].z * 0.3183098733425140380859375) * _2532) * _2533) + _2283;
    }
    uint _2348 = _2100 + 8u;
    float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _633) * 0.949999988079071044921875);
    float _2362 = _2361 * _2361;
    float _2363 = cbLight._m0[_2100].x + _709;
    float _2364 = cbLight._m0[_2100].y + _710;
    float _2365 = cbLight._m0[_2100].z + _711;
    float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
    float _2370 = _2369 * _2363;
    float _2371 = _2369 * _2364;
    float _2372 = _2369 * _2365;
    float _2373 = dot(vec3(_630, _631, _632), vec3(cbLight._m0[_2100].xyz));
    float _4422 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _4433 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _2377 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2378 = dot(vec3(_630, _631, _632), vec3(_2370, _2371, _2372));
    float _4444 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2382 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2370, _2371, _2372));
    float _4455 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2386 = _2362 * _2362;
    float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
    float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
    float _2399 = 0.959999978542327880859375 - _779;
    float _2401 = 0.959999978542327880859375 - _780;
    float _2402 = 0.959999978542327880859375 - _781;
    float _2409 = 1.0 - _2362;
    float _2420 = (0.5 / (((_2377 * ((_2376 * _2409) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2409) + _2362) * _2376))) * _2376;
    float _4466 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2422 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
    uint _2436 = _2100 + 9u;
    float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _633) * 0.949999988079071044921875);
    float _2448 = _2447 * _2447;
    float _2449 = cbLight._m0[_2141].x + _709;
    float _2450 = cbLight._m0[_2141].y + _710;
    float _2451 = cbLight._m0[_2141].z + _711;
    float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
    float _2456 = _2455 * _2449;
    float _2457 = _2455 * _2450;
    float _2458 = _2455 * _2451;
    float _2459 = dot(vec3(_630, _631, _632), vec3(cbLight._m0[_2141].xyz));
    float _4477 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2463 = dot(vec3(_630, _631, _632), vec3(_2456, _2457, _2458));
    float _4488 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2466 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2467 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2456, _2457, _2458));
    float _4499 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2471 = _2448 * _2448;
    float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
    float _2482 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
    float _2489 = 1.0 - _2448;
    float _2499 = (0.5 / (((_2377 * ((_2462 * _2489) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2489) + _2448) * _2462))) * _2462;
    float _4510 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2501 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
    float _2511 = (((((_2482 * _2399) + _782) * cbLight._m0[_2436].x) * _2501) * _2123) + ((((cbLight._m0[_2348].x * _2089) * ((_2398 * _2399) + _782)) * _2422) * _2137);
    float _2512 = (((((_2482 * _2401) + _784) * cbLight._m0[_2436].y) * _2501) * _2123) + ((((cbLight._m0[_2348].y * _2091) * ((_2398 * _2401) + _784)) * _2422) * _2137);
    float _2513 = (((((_2482 * _2402) + _785) * cbLight._m0[_2436].z) * _2501) * _2123) + ((((cbLight._m0[_2348].z * _2093) * ((_2398 * _2402) + _785)) * _2422) * _2137);
    float _2569;
    float _2571;
    float _2573;
    if (_2177)
    {
        _2569 = _2511;
        _2571 = _2512;
        _2573 = _2513;
    }
    else
    {
        uint _2575 = _2100 + 2u;
        uint _2579 = _2100 + 10u;
        float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2575].w)) * _633) * 0.949999988079071044921875);
        float _2594 = _2593 * _2593;
        float _2595 = cbLight._m0[_2575].x + _709;
        float _2596 = cbLight._m0[_2575].y + _710;
        float _2597 = cbLight._m0[_2575].z + _711;
        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
        float _2602 = _2601 * _2595;
        float _2603 = _2601 * _2596;
        float _2604 = _2601 * _2597;
        float _2605 = dot(vec3(_630, _631, _632), vec3(cbLight._m0[_2575].xyz));
        float _4521 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2609 = dot(vec3(_630, _631, _632), vec3(_2602, _2603, _2604));
        float _4532 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2613 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_2602, _2603, _2604));
        float _4543 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2617 = _2594 * _2594;
        float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
        float _2628 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
        float _2635 = 1.0 - _2594;
        float _2645 = (0.5 / (((_2377 * ((_2608 * _2635) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2635) + _2594) * _2608))) * _2608;
        float _4554 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2569 = (((((_2628 * _2399) + _782) * cbLight._m0[_2579].x) * _2647) * _2648) + _2511;
        _2571 = (((((_2628 * _2401) + _784) * cbLight._m0[_2579].y) * _2647) * _2648) + _2512;
        _2573 = (((((_2628 * _2402) + _785) * cbLight._m0[_2579].z) * _2647) * _2648) + _2513;
    }
    float _2679;
    float _2681;
    float _2683;
    if (_2286)
    {
        _2679 = _2569;
        _2681 = _2571;
        _2683 = _2573;
    }
    else
    {
        uint _2690 = _2100 + 3u;
        uint _2694 = _2100 + 11u;
        float _2708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2690].w)) * _633) * 0.949999988079071044921875);
        float _2709 = _2708 * _2708;
        float _2710 = cbLight._m0[_2690].x + _709;
        float _2711 = cbLight._m0[_2690].y + _710;
        float _2712 = cbLight._m0[_2690].z + _711;
        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
        float _2717 = _2716 * _2710;
        float _2718 = _2716 * _2711;
        float _2719 = _2716 * _2712;
        float _2720 = dot(vec3(_630, _631, _632), vec3(cbLight._m0[_2690].xyz));
        float _4570 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2724 = dot(vec3(_630, _631, _632), vec3(_2717, _2718, _2719));
        float _4581 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2728 = dot(vec3(cbLight._m0[_2690].xyz), vec3(_2717, _2718, _2719));
        float _4592 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2732 = _2709 * _2709;
        float _2736 = ((_2727 * _2727) * (_2732 + (-1.0))) + 1.0;
        float _2743 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
        float _2750 = 1.0 - _2709;
        float _2760 = (0.5 / (((_2377 * ((_2723 * _2750) + _2709)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2750) + _2709) * _2723))) * _2723;
        float _4603 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2762 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2732 / ((_2736 * _2736) * 3.141590118408203125));
        float _2763 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
        _2679 = (((((_2743 * _2399) + _782) * cbLight._m0[_2694].x) * _2762) * _2763) + _2569;
        _2681 = (((((_2743 * _2401) + _784) * cbLight._m0[_2694].y) * _2762) * _2763) + _2571;
        _2683 = (((((_2743 * _2402) + _785) * cbLight._m0[_2694].z) * _2762) * _2763) + _2573;
    }
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_2098.y == 0u)
    {
        uvec4 _2784 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2785 = _2784.x;
        uint _2796 = uint((float(_2784.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2785))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2785)));
        float _2806 = (log2(_1876 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2807 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        uint _2810 = uint(isnan(14.0) ? _2807 : (isnan(_2807) ? 14.0 : min(_2807, 14.0)));
        uvec4 _2815 = texelFetch(g_lightClusterGridBuffer, int(((_2810 << 2u) + (_2796 << 6u)) >> 2u));
        uint _2816 = _2815.x;
        uint _2817 = _2784.z;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((((1u << ((_2817 >> 4u) & 15u)) + 4294967295u) & _2816) == 0u) || ((_2817 & 240u) == 0u))
        {
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
        }
        else
        {
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            uint _3046 = 0u;
            uint _3055;
            bool _3056;
            for (;;)
            {
                _3055 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3046 << 2u)) >> 2u)).x;
                _3056 = _3055 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3056)
                {
                    frontier_phi_66_pred = _3045;
                    frontier_phi_66_pred_1 = _3044;
                    frontier_phi_66_pred_2 = _3043;
                    frontier_phi_66_pred_3 = _3042;
                    frontier_phi_66_pred_4 = _3041;
                    frontier_phi_66_pred_5 = _3040;
                }
                else
                {
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    uint _3170;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3055;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    for (;;)
                    {
                        uint _3174 = uint(findLSB(_3170)) + (_3046 << 5u);
                        uint _3171 = (_3170 + 4294967295u) & _3170;
                        uint _3176 = _3174 * 48u;
                        vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3196 = (_3174 * 48u) + 4u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 3u)).x));
                        uint _3215 = (_3174 * 48u) + 8u;
                        vec3 _3226 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x));
                        float _3230 = _3190.x - _1874;
                        float _3231 = _3190.y - _1875;
                        float _3232 = _3190.z - _1876;
                        float _3233 = dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232));
                        float _3236 = inversesqrt(_3233);
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3240 = dot(vec3(_739, _742, _745), vec3(_3237, _3238, _3239));
                        float _3245 = 1.0 - (_3233 * _3190.w);
                        float _4629 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3246 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3247 = sqrt(_3233) * _3209.w;
                        float _3250 = 1.39999997615814208984375 / (_3247 + 1.39999997615814208984375);
                        float _3251 = _3250 * _3250;
                        float _3254 = ((1.0 - _3251) * _3240) + _3251;
                        float _3257 = _3247 * _3247;
                        float _3261 = ((isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0))) * _3246) / ((_3257 * 0.699999988079071044921875) + 1.0);
                        float _3265 = (-0.0) - _1874;
                        float _3266 = (-0.0) - _1875;
                        float _3267 = (-0.0) - _1876;
                        float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                        float _3272 = _3271 * _3265;
                        float _3273 = _3271 * _3266;
                        float _3274 = _3271 * _3267;
                        float _3281 = exp2(log2(1.0 / ((_3257 * 3.5) + 5.0)) * 0.25);
                        float _3282 = 1.0 - _814;
                        float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                        float _3290 = _3289 * _3289;
                        float _3291 = _3290 * _3290;
                        float _3292 = _3272 + _3237;
                        float _3293 = _3273 + _3238;
                        float _3294 = _3274 + _3239;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3302 = dot(vec3(_739, _742, _745), vec3(_3272, _3273, _3274));
                        float _4645 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3306 = dot(vec3(_739, _742, _745), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                        float _4656 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3309 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                        float _3314 = _3250 * _3290;
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3240) + _3315;
                        float _4667 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3319 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3320 = 1.0 - _3290;
                        float _3330 = (0.5 / (((_3319 * ((_3305 * _3320) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3290) * _3305))) * _3319;
                        float _4678 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3341 = (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) / ((_3313 * _3313) * ((_3257 * 2.1991131305694580078125) + 3.141590118408203125))) * _3246;
                        _3099 = (_3261 * _3209.x) + _3167;
                        _3100 = (_3261 * _3209.y) + _3168;
                        _3101 = (_3261 * _3209.z) + _3169;
                        _3096 = (_3341 * _3226.x) + _3164;
                        _3097 = (_3341 * _3226.y) + _3165;
                        _3098 = (_3341 * _3226.z) + _3166;
                        if (_3171 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3171;
                        }
                    }
                    frontier_phi_66_pred = _3101;
                    frontier_phi_66_pred_1 = _3100;
                    frontier_phi_66_pred_2 = _3099;
                    frontier_phi_66_pred_3 = _3098;
                    frontier_phi_66_pred_4 = _3097;
                    frontier_phi_66_pred_5 = _3096;
                }
                _2907 = frontier_phi_66_pred;
                _2905 = frontier_phi_66_pred_1;
                _2903 = frontier_phi_66_pred_2;
                _2901 = frontier_phi_66_pred_3;
                _2899 = frontier_phi_66_pred_4;
                _2897 = frontier_phi_66_pred_5;
                uint _3047 = _3046 + 1u;
                if (_3047 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3040 = _2897;
                    _3041 = _2899;
                    _3042 = _2901;
                    _3043 = _2903;
                    _3044 = _2905;
                    _3045 = _2907;
                    _3046 = _3047;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
        }
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.z;
        uint _2913 = (_2911 >> 8u) & 15u;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        if (((4294967295u << _2913) & _2816) == 0u)
        {
            _3008 = _2896;
            _3010 = _2898;
            _3012 = _2900;
            _3014 = _2902;
            _3016 = _2904;
            _3018 = _2906;
        }
        else
        {
            float _3033 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
            float _3034 = _3033 * _1874;
            float _3035 = _3033 * _1875;
            float _3036 = _3033 * _1876;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2913 < ((_2911 >> 12u) & 15u))
            {
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3147 = _2896;
                float _3148 = _2898;
                float _3149 = _2900;
                float _3150 = _2902;
                float _3151 = _2904;
                float _3152 = _2906;
                uint _3153 = _2913;
                uint _3162;
                bool _3163;
                for (;;)
                {
                    _3162 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3153 << 2u)) >> 2u)).x;
                    _3163 = _3162 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3163)
                    {
                        frontier_phi_72_pred = _3152;
                        frontier_phi_72_pred_1 = _3151;
                        frontier_phi_72_pred_2 = _3150;
                        frontier_phi_72_pred_3 = _3149;
                        frontier_phi_72_pred_4 = _3148;
                        frontier_phi_72_pred_5 = _3147;
                    }
                    else
                    {
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3359 = _3147;
                        float _3360 = _3148;
                        float _3361 = _3149;
                        float _3362 = _3150;
                        float _3363 = _3151;
                        float _3364 = _3152;
                        uint _3365 = _3162;
                        uint _3366;
                        vec4 _3391;
                        float _3392;
                        vec4 _3407;
                        vec3 _3419;
                        vec4 _3435;
                        vec4 _3450;
                        float _3496;
                        bool _3497;
                        for (;;)
                        {
                            uint _3376 = ((_3153 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3365));
                            _3366 = (_3365 + 4294967295u) & _3365;
                            uint _3378 = _3376 * 40u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            _3392 = _3391.w;
                            uint _3394 = (_3376 * 40u) + 4u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3376 * 40u) + 8u;
                            _3419 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x));
                            uint _3422 = (_3376 * 40u) + 16u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3376 * 40u) + 20u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3376 * 40u) + 24u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3471 = (_3376 * 40u) + 28u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            _3496 = fma(_1876, _3484.z, fma(_1875, _3484.y, _3484.x * _1874)) + _3484.w;
                            _3497 = !((fma(_1876, _3465.z, fma(_1875, _3465.y, _3465.x * _1874)) + _3465.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3497)
                            {
                                float _3524 = _3391.x - _1874;
                                float _3525 = _3391.y - _1875;
                                float _3526 = _3391.z - _1876;
                                float _3527 = dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526));
                                float _3530 = inversesqrt(_3527);
                                float _3531 = _3530 * _3524;
                                float _3532 = _3530 * _3525;
                                float _3533 = _3530 * _3526;
                                float _3537 = 1.0 - (_3527 / (_3392 * _3392));
                                float _4689 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3542 = sqrt(_3527) * _3407.w;
                                float _3544 = 1.39999997615814208984375 / (_3542 + 1.39999997615814208984375);
                                float _3545 = _3544 * _3544;
                                float _3548 = ((1.0 - _3545) * dot(vec3(_3531, _3532, _3533), vec3(_739, _742, _745))) + _3545;
                                float _3551 = _3542 * _3542;
                                float _3555 = (fma(_1876, _3435.z, fma(_1875, _3435.y, _3435.x * _1874)) + _3435.w) / _3496;
                                float _3556 = (fma(_1876, _3450.z, fma(_1875, _3450.y, _3450.x * _1874)) + _3450.w) / _3496;
                                float _3560 = 1.0 - dot(vec2(_3555, _3556), vec2(_3555, _3556));
                                float _4705 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3562 = _3561 * (((isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0))) * _3538) / ((_3551 * 0.699999988079071044921875) + 1.0));
                                float _3574 = exp2(log2(1.0 / ((_3551 * 3.5) + 5.0)) * 0.25);
                                float _3575 = 1.0 - _814;
                                float _3582 = sqrt(1.0 - ((1.0 - (_3575 * _3575)) * (1.0 - (_3574 * _3574))));
                                float _3583 = _3582 * _3582;
                                float _3584 = _3583 * _3583;
                                float _3585 = _3531 - _3034;
                                float _3586 = _3532 - _3035;
                                float _3587 = _3533 - _3036;
                                float _3591 = inversesqrt(dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587)));
                                float _3595 = dot(vec3(_739, _742, _745), vec3((-0.0) - _3034, (-0.0) - _3035, (-0.0) - _3036));
                                float _4716 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3598 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3599 = dot(vec3(_739, _742, _745), vec3(_3591 * _3585, _3591 * _3586, _3591 * _3587));
                                float _4727 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3602 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3606 = ((_3602 * _3602) * (_3584 + (-1.0))) + 1.0;
                                float _3607 = _3544 * _3583;
                                float _3608 = _3607 * _3607;
                                float _3614 = ((1.0 - _3608) * dot(vec3(_739, _742, _745), vec3(_3531, _3532, _3533))) + _3608;
                                float _4738 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3616 = 1.0 - _3583;
                                float _3626 = (0.5 / (((_3615 * ((_3598 * _3616) + _3583)) + 9.9999999392252902907785028219223e-09) + (((_3615 * _3616) + _3583) * _3598))) * _3615;
                                float _4749 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3636 = (_3561 * _3538) * (((_3584 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3606 * _3606) * ((_3551 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3562 * _3407.y;
                                frontier_phi_78_pred_1 = _3562 * _3407.x;
                                frontier_phi_78_pred_2 = _3636 * _3419.z;
                                frontier_phi_78_pred_3 = _3636 * _3419.y;
                                frontier_phi_78_pred_4 = _3636 * _3419.x;
                                frontier_phi_78_pred_5 = _3562 * _3407.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3644 = frontier_phi_78_pred;
                            _3643 = frontier_phi_78_pred_1;
                            _3642 = frontier_phi_78_pred_2;
                            _3641 = frontier_phi_78_pred_3;
                            _3640 = frontier_phi_78_pred_4;
                            _3645 = frontier_phi_78_pred_5;
                            _3349 = _3643 + _3362;
                            _3350 = _3644 + _3363;
                            _3351 = _3645 + _3364;
                            _3346 = _3640 + _3359;
                            _3347 = _3641 + _3360;
                            _3348 = _3642 + _3361;
                            if (_3366 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3366;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3351;
                        frontier_phi_72_pred_1 = _3350;
                        frontier_phi_72_pred_2 = _3349;
                        frontier_phi_72_pred_3 = _3348;
                        frontier_phi_72_pred_4 = _3347;
                        frontier_phi_72_pred_5 = _3346;
                    }
                    _3019 = frontier_phi_72_pred;
                    _3017 = frontier_phi_72_pred_1;
                    _3015 = frontier_phi_72_pred_2;
                    _3013 = frontier_phi_72_pred_3;
                    _3011 = frontier_phi_72_pred_4;
                    _3009 = frontier_phi_72_pred_5;
                    uint _3154 = _3153 + 1u;
                    if (_3154 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3147 = _3009;
                        _3148 = _3011;
                        _3149 = _3013;
                        _3150 = _3015;
                        _3151 = _3017;
                        _3152 = _3019;
                        _3153 = _3154;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3019;
                frontier_phi_60_61_ladder_1 = _3017;
                frontier_phi_60_61_ladder_2 = _3013;
                frontier_phi_60_61_ladder_3 = _3011;
                frontier_phi_60_61_ladder_4 = _3009;
                frontier_phi_60_61_ladder_5 = _3015;
            }
            else
            {
                frontier_phi_60_61_ladder = _2906;
                frontier_phi_60_61_ladder_1 = _2904;
                frontier_phi_60_61_ladder_2 = _2900;
                frontier_phi_60_61_ladder_3 = _2898;
                frontier_phi_60_61_ladder_4 = _2896;
                frontier_phi_60_61_ladder_5 = _2902;
            }
            _3008 = frontier_phi_60_61_ladder_4;
            _3010 = frontier_phi_60_61_ladder_3;
            _3012 = frontier_phi_60_61_ladder_2;
            _3014 = frontier_phi_60_61_ladder_5;
            _3016 = frontier_phi_60_61_ladder_1;
            _3018 = frontier_phi_60_61_ladder;
        }
        float _3023 = isnan(1.0) ? _798 : (isnan(_798) ? 1.0 : min(_798, 1.0));
        _2829 = (_3023 * _3014) + _2341;
        _2831 = (_3023 * _3016) + _2343;
        _2833 = (_3023 * _3018) + _2345;
        _2835 = ((_3008 * _782) * _3023) + _2679;
        _2837 = ((_3010 * _784) * _3023) + _2681;
        _2839 = ((_3012 * _785) * _3023) + _2683;
    }
    else
    {
        _2829 = _2341;
        _2831 = _2343;
        _2833 = _2345;
        _2835 = _2679;
        _2837 = _2681;
        _2839 = _2683;
    }
    float _4765 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4787 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    uint _2859 = _243 + 6u;
    float _2867 = _717 / cbSceneParam._m0[86u].x;
    float _2868 = _718 / cbSceneParam._m0[86u].y;
    vec4 _2882 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, (log2((isnan(cbSceneParam._m0[77u].w) ? _652 : (isnan(_652) ? cbSceneParam._m0[77u].w : min(_652, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2884 = _2882.x;
    float _2885 = _2882.y;
    float _2886 = _2882.z;
    float _2887 = _2882.w;
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    if (_652 > cbSceneParam._m0[78u].w)
    {
        float _2921 = isnan(_652) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _652 : min(cbSceneParam._m0[80u].w, _652));
        float _2922 = _2921 / _652;
        float _2933 = _2922 * _702;
        float _2934 = _703 * _2922;
        float _2935 = (-0.0) - _2934;
        float _2936 = _2922 * _704;
        float _2938 = (cbSceneParam._m0[77u].w * _2935) / _2921;
        float _2939 = _2938 + cbSceneParam._m0[79u].w;
        float _2940 = cbSceneParam._m0[79u].w - _2934;
        float _2946 = sqrt(((_2933 * _2933) + (_2934 * _2934)) + (_2936 * _2936));
        float _2949 = (1.0 - (cbSceneParam._m0[77u].w / _2921)) * _2946;
        float _2954 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2956 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3109;
        if (abs((_2935 - _2938) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3109 = ((((_2939 > 0.0) ? exp2(_2954 * _2939) : (2.0 - exp2(_2956 * _2939))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2949;
        }
        else
        {
            float _3069 = 1.0 / cbSceneParam._m0[80u].x;
            float _3070 = isnan(_2940) ? _2939 : (isnan(_2939) ? _2940 : max(_2939, _2940));
            float _3071 = isnan(_2940) ? _2939 : (isnan(_2939) ? _2940 : min(_2939, _2940));
            float _3080 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : min(_3070, 0.0));
            float _3081 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : min(_3071, 0.0));
            _3109 = ((abs(_2946 / _2935) * cbSceneParam._m0[80u].y) * ((((_3080 - _3081) * 2.0) - ((exp2(_2954 * (isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0)))) - exp2(_2954 * (isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))))) * _3069)) - ((exp2(_2956 * _3080) - exp2(_2956 * _3081)) * _3069))) + (_2949 * cbSceneParam._m0[80u].z);
        }
        vec4 _3111 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, 1.0), 0.0);
        float _3120 = exp2((_3109 * (-1.44269502162933349609375)) * (1.0 - _3111.w));
        float _3121 = log2(_3120);
        float _3137 = log2(_2887);
        _2958 = (exp2(_3137 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].x)) * _3111.x) / cbSceneParam._m0[78u].x)) + _2884;
        _2960 = (exp2(_3137 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].y)) * _3111.y) / cbSceneParam._m0[78u].y)) + _2885;
        _2962 = (exp2(_3137 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].z)) * _3111.z) / cbSceneParam._m0[78u].z)) + _2886;
        _2964 = _3120 * _2887;
    }
    else
    {
        _2958 = _2884;
        _2960 = _2885;
        _2962 = _2886;
        _2964 = _2887;
    }
    float _2976 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2977 = _2976 == 3.0;
    float _2978 = log2(_2964);
    float _2985 = exp2(_2978 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2829 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _798))) + ((_2835 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1606)) * cbPerFrame._m0[3u].x));
    float _2986 = exp2(_2978 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2831 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _798))) + ((_2837 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1606)) * cbPerFrame._m0[3u].x));
    float _2987 = exp2(_2978 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2833 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _798))) + ((_2839 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1606)) * cbPerFrame._m0[3u].x));
    float _2996 = (_2976 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2996 * (_2977 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2958)));
    SV_Target.y = _2996 * (_2977 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2960)));
    SV_Target.z = _2996 * (_2977 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2962)));
    SV_Target.w = cbInstanceData._m0[_2859].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2859].w;
}


