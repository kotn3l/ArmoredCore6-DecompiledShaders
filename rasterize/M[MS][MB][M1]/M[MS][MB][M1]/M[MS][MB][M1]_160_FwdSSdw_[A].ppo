#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1429;
float _3831;
float _3832;
float _3833;
float _3834;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _370 = _368.x;
    float _382 = dot(vec4(_370, _368.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _399 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_370 - _382) * cbMtdParam._m0[24u].y) + _382) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3843 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _407 = (_400 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _408 = (_400 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _409 = (_400 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _475 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _494 = _492.x;
    float _495 = _492.y;
    float _496 = _492.z;
    float _505 = ((_475.z - _496) * _400) + _496;
    float _508 = ((((_475.x - _494) * _400) + _494) * 2.0) + (-1.0);
    float _509 = ((((_475.y - _495) * _400) + _495) * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _3854 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _515 = sqrt(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))));
    float _518 = _508 + ((((_448.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _519 = _509 + ((((_448.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _522 = fma(_515, _251, fma(_519, _258, _518 * _244));
    float _525 = fma(_515, _252, fma(_519, _259, _518 * _245));
    float _528 = fma(_515, _253, fma(_519, _260, _518 * _246));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _574 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _576 = _574.x;
    float _577 = 1.0 - _576;
    float _581 = ((_576 - _577) * cbMtdParam._m0[24u].z) + _577;
    float _583 = (cbMtdParam._m0[19u].x + dot(vec4(_532 * _522, _532 * _525, _532 * _528, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_581 * cbMtdParam._m0[21u].z);
    float _3865 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _586 = (-0.0) - cbMtdParam._m0[24u].x;
    float _588 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _588 : (isnan(_588) ? 1.0 : min(_588, 1.0));
    float _596 = _584 - ((_584 * TEXCOORD_8.x) * _589);
    float _597 = _584 - ((_584 * TEXCOORD_8.y) * _589);
    float _598 = _584 - ((_584 * TEXCOORD_8.z) * _589);
    float _605 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _609 = ((isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : min(_605, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _617 = (_609 - (((_581 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _609))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3896 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _622 = ((_596 * ((_428.x * cbMtdParam._m0[18u].x) - _407)) * _618) + _407;
    float _623 = ((_597 * ((_428.y * cbMtdParam._m0[18u].y) - _408)) * _618) + _408;
    float _624 = ((_598 * ((_428.z * cbMtdParam._m0[18u].z) - _409)) * _618) + _409;
    vec4 _636 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _638 = _636.x;
    float _639 = 1.0 - _638;
    float _666 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_638 - _639) * cbMtdParam._m0[24u].w) + _639) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3907 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _675 = ((((cbMtdParam._m0[10u].x - _622) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _667) + _622;
    float _676 = ((((cbMtdParam._m0[10u].y - _623) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _667) + _623;
    float _677 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _624)) * _667) + _624;
    vec4 _703 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _705 = _703.x;
    float _723 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _705) * _400) + _705;
    float _727 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _723) * cbMtdParam._m0[19u].z) + _723;
    float _730 = _727 - ((_618 * _596) * _727);
    float _732 = _730 - (_730 * _667);
    float _737 = (((_448.z - _505) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _505;
    vec4 _751 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _758 = (_751.x * 2.0) + (-1.0);
    float _759 = (_751.y * 2.0) + (-1.0);
    float _760 = dot(vec2(_758, _759), vec2(_758, _759));
    float _3918 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _769 = (((_751.z - _737) * _596) * _618) + _737;
    float _772 = ((cbMtdParam._m0[23u].y - _769) * _667) + _769;
    vec4 _791 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _797 = (_791.x * 2.0) + (-1.0);
    float _798 = (_791.y * 2.0) + (-1.0);
    float _799 = dot(vec2(_797, _798), vec2(_797, _798));
    float _3929 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _819 = (((cbMtdParam._m0[21u].x * _518) + ((_758 - _518) * _596)) * _618) + _518;
    float _820 = (((cbMtdParam._m0[21u].x * _519) + ((_759 - _519) * _597)) * _618) + _519;
    float _821 = (((sqrt(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) - _515) * _598) * _618) + _515;
    float _832 = (((_797 - _819) + (_819 * cbMtdParam._m0[22u].z)) * _667) + _819;
    float _833 = (((_798 - _820) + (_820 * cbMtdParam._m0[22u].z)) * _667) + _820;
    float _834 = ((sqrt(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) - _821) * _667) + _821;
    float _836 = cbMtdParam._m0[22u].x + _548.w;
    float _839 = fma(_834, _251, fma(_833, _258, _832 * _244));
    float _842 = fma(_834, _252, fma(_833, _259, _832 * _245));
    float _845 = fma(_834, _253, fma(_833, _260, _832 * _246));
    float _849 = inversesqrt(dot(vec3(_839, _842, _845), vec3(_839, _842, _845)));
    float _850 = _849 * _839;
    float _851 = _849 * _842;
    float _852 = _849 * _845;
    float _3940 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _853 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _3962 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3973 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3984 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3995 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _858 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _872 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _922 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _912);
    float _923 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _912);
    float _924 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _912);
    float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
    float _929 = _922 * _928;
    float _930 = _923 * _928;
    float _931 = _924 * _928;
    vec4 _936 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _938 = _936.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1110 = sqrt(((_922 * _922) + (_923 * _923)) + (_924 * _924));
        float _1116 = (cbMatDynParam._m0[5u].x * _1110) + cbMatDynParam._m0[5u].y;
        float _4006 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1121 = (cbMatDynParam._m0[5u].z * _1110) + cbMatDynParam._m0[5u].w;
        float _4017 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) - _1117)) + _1117) < ((_938 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _949 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _950 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _968 = fma(_852, cbSceneParam._m0[5u].z, fma(_851, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _850));
    float _971 = fma(_852, cbSceneParam._m0[6u].z, fma(_851, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _850));
    float _974 = fma(_852, cbSceneParam._m0[7u].z, fma(_851, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _850));
    uint _987 = _263 + 9u;
    uint _988 = _987 + uint(cbMatDynParam._m0[0u].w);
    float _994 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * cbInstanceData._m0[_988].x;
    float _995 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * cbInstanceData._m0[_988].y;
    float _996 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * cbInstanceData._m0[_988].z;
    float _4028 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _1000 = 1.0 - _858;
    float _1001 = _997 * _1000;
    float _1002 = _998 * _1000;
    float _1003 = _999 * _1000;
    float _1008 = (_997 + (-0.039999999105930328369140625)) * _858;
    float _1009 = (_998 + (-0.039999999105930328369140625)) * _858;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _858;
    float _1011 = _1008 + 0.039999999105930328369140625;
    float _1013 = _1009 + 0.039999999105930328369140625;
    float _1014 = _1010 + 0.039999999105930328369140625;
    vec4 _1023 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _949, cbSceneParam._m0[86u].y * _950));
    float _1027 = ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * TEXCOORD_5.w) * _1023.x;
    float _1028 = dot(vec3(_850, _851, _852), vec3(_929, _930, _931));
    float _1031 = _1028 * 2.0;
    float _1035 = (_1031 * _850) - _929;
    float _1036 = (_1031 * _851) - _930;
    float _1037 = (_1031 * _852) - _931;
    float _1041 = abs(dot(vec3(_929, _930, _931), vec3(_850, _851, _852)));
    float _4061 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1043 = sqrt(_853);
    float _1056 = exp2((_1043 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1043 * 3.0));
    float _1062 = (1.0 - _1056) * ((_1043 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1063 = _1056 * _1043;
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1428;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1153 = fma(_1099, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091));
        float _1157 = fma(_1099, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091));
        float _1161 = fma(_1099, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091));
        float _1186 = _1091 + _850;
        float _1187 = _1095 + _851;
        float _1188 = _1099 + _852;
        float _1198 = fma(_1188, cbModelParam._m0[26u].z, fma(_1187, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186)) - _1153;
        float _1199 = fma(_1188, cbModelParam._m0[27u].z, fma(_1187, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186)) - _1157;
        float _1200 = fma(_1188, cbModelParam._m0[28u].z, fma(_1187, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186)) - _1161;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1153 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1157 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[34u].z) + ((((((_1161 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1256 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1222.x + (-0.5));
        float _1258 = _1256 * (_1222.y + (-0.5));
        float _1259 = _1256 * (_1222.z + (-0.5));
        float _1266 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1229.x + (-0.5));
        float _1268 = _1266 * (_1229.y + (-0.5));
        float _1269 = _1266 * (_1229.z + (-0.5));
        float _1276 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1236.x + (-0.5));
        float _1278 = _1276 * (_1236.y + (-0.5));
        float _1279 = _1276 * (_1236.z + (-0.5));
        float _1286 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1243.x + (-0.5));
        float _1288 = _1286 * (_1243.y + (-0.5));
        float _1289 = _1286 * (_1243.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1310 = (dot(vec3(_850, _851, _852), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1320 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4109 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1322 + 1.0))) + _1327) * _1290;
        float _1337 = _1258 * 0.5;
        float _1338 = _1268 * 0.5;
        float _1339 = _1278 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_850, _851, _852), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4142 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1364 + 1.0))) + _1369) * _1291;
        float _1379 = _1259 * 0.5;
        float _1380 = _1269 * 0.5;
        float _1381 = _1279 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_850, _851, _852), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4175 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1406 + 1.0))) + _1411) * _1292;
        _1428 = _1259;
        _1430 = _1258;
        _1431 = _1257;
        _1432 = _1269;
        _1433 = _1268;
        _1434 = _1267;
        _1435 = _1279;
        _1436 = _1278;
        _1437 = _1277;
        _1438 = _1292;
        _1439 = _1291;
        _1440 = _1290;
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
    }
    else
    {
        _1428 = _1429;
        _1430 = _1429;
        _1431 = _1429;
        _1432 = _1429;
        _1433 = _1429;
        _1434 = _1429;
        _1435 = _1429;
        _1436 = _1429;
        _1437 = _1429;
        _1438 = _1429;
        _1439 = _1429;
        _1440 = _1429;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1471 = fma(_1099, cbModelParam._m0[30u].z, fma(_1095, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1091));
        float _1475 = fma(_1099, cbModelParam._m0[31u].z, fma(_1095, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1091));
        float _1479 = fma(_1099, cbModelParam._m0[32u].z, fma(_1095, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1091));
        float _1502 = _1091 + _850;
        float _1503 = _1095 + _851;
        float _1504 = _1099 + _852;
        float _1514 = fma(_1504, cbModelParam._m0[30u].z, fma(_1503, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1502)) - _1471;
        float _1515 = fma(_1504, cbModelParam._m0[31u].z, fma(_1503, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1502)) - _1475;
        float _1516 = fma(_1504, cbModelParam._m0[32u].z, fma(_1503, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1502)) - _1479;
        float _1520 = inversesqrt(dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516)));
        float _1533 = ((_1520 * _1514) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1471 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1520 * _1515) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1475 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1520 * _1516) / cbModelParam._m0[35u].z) + ((((((_1479 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        float _1570 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1537.x + (-0.5));
        float _1572 = _1570 * (_1537.y + (-0.5));
        float _1573 = _1570 * (_1537.z + (-0.5));
        float _1580 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1544.x + (-0.5));
        float _1582 = _1580 * (_1544.y + (-0.5));
        float _1583 = _1580 * (_1544.z + (-0.5));
        float _1590 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1551.x + (-0.5));
        float _1592 = _1590 * (_1551.y + (-0.5));
        float _1593 = _1590 * (_1551.z + (-0.5));
        float _1600 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1558.x + (-0.5));
        float _1602 = _1600 * (_1558.y + (-0.5));
        float _1603 = _1600 * (_1558.z + (-0.5));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = _1571 * 0.5;
        float _1608 = _1581 * 0.5;
        float _1609 = _1591 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_850, _851, _852), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4238 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1634 + 1.0))) + _1639) * _1604;
        float _1649 = _1572 * 0.5;
        float _1650 = _1582 * 0.5;
        float _1651 = _1592 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_850, _851, _852), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4271 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1676 + 1.0))) + _1681) * _1605;
        float _1691 = _1573 * 0.5;
        float _1692 = _1583 * 0.5;
        float _1693 = _1593 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_850, _851, _852), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4304 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1718 + 1.0))) + _1723) * _1606;
        _1740 = _1573;
        _1741 = _1572;
        _1742 = _1571;
        _1743 = _1583;
        _1744 = _1582;
        _1745 = _1581;
        _1746 = _1593;
        _1747 = _1592;
        _1748 = _1591;
        _1749 = _1606;
        _1750 = _1605;
        _1751 = _1604;
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
    }
    else
    {
        _1740 = _1429;
        _1741 = _1429;
        _1742 = _1429;
        _1743 = _1429;
        _1744 = _1429;
        _1745 = _1429;
        _1746 = _1429;
        _1747 = _1429;
        _1748 = _1429;
        _1749 = _1429;
        _1750 = _1429;
        _1751 = _1429;
        _1752 = 0.0;
        _1753 = 0.0;
        _1754 = 0.0;
    }
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1441)) + _1441;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1442)) + _1442;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1443)) + _1443;
    float _1787 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1764 * cbSceneParam._m0[89u].x));
    float _1790 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1764 * cbSceneParam._m0[90u].x));
    float _1793 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1764));
    float _1808 = _1035 * 0.5;
    float _1809 = _1036 * 0.5;
    float _1810 = _1037 * 0.5;
    float _1811 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1814 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1817 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1851;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1824 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1428, _1432, _1435, _1438));
        float _1828 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1430, _1433, _1436, _1439));
        float _1832 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1431, _1434, _1437, _1440));
        float _1839 = dot(vec4(cbModelParam._m0[39u]), vec4(_1808, _1809, _1810, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1839) ? 0.0 : (isnan(0.0) ? _1839 : max(0.0, _1839))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1862;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1853 = dot(vec4(cbModelParam._m0[40u]), vec4(_1808, _1809, _1810, 1.0));
        _1862 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1853) ? 0.0 : (isnan(0.0) ? _1853 : max(0.0, _1853))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1862 = 1.0;
    }
    float _1866 = (_1862 * cbModelParam._m0[1u].x) + (_1851 * (1.0 - cbModelParam._m0[1u].x));
    float _1876 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _853);
    float _1877 = isnan(_1876) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1876 : min(cbModelParam._m0[25u].z, _1876));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1924 = fma(_1099, cbModelParam._m0[13u].z, fma(_1095, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1091)) + cbModelParam._m0[13u].w;
        float _1928 = fma(_1099, cbModelParam._m0[14u].z, fma(_1095, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1091)) + cbModelParam._m0[14u].w;
        float _1932 = fma(_1099, cbModelParam._m0[15u].z, fma(_1095, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1091)) + cbModelParam._m0[15u].w;
        float _1935 = fma(_1037, cbModelParam._m0[13u].z, fma(_1036, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1035));
        float _1938 = fma(_1037, cbModelParam._m0[14u].z, fma(_1036, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1035));
        float _1941 = fma(_1037, cbModelParam._m0[15u].z, fma(_1036, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1035));
        float _1969;
        if (_1935 > 0.0)
        {
            _1969 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1969 = frontier_phi_17_15_ladder;
        }
        float _2192;
        if (_1938 > 0.0)
        {
            _2192 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2192 = frontier_phi_26_22_ladder;
        }
        float _2449;
        if (_1941 > 0.0)
        {
            _2449 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2449 = frontier_phi_38_33_ladder;
        }
        float _2451 = isnan(_2192) ? _1969 : (isnan(_1969) ? _2192 : min(_1969, _2192));
        float _2452 = isnan(_2449) ? _2451 : (isnan(_2451) ? _2449 : min(_2451, _2449));
        float _2456 = (_2452 * _1935) + _1924;
        float _2457 = (_2452 * _1938) + _1928;
        float _2458 = (_2452 * _1941) + _1932;
        float _2459 = _2452 * 9.9999997473787516355514526367188e-05;
        float _2461 = (-1.0) - _2459;
        float _2463 = _2459 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2458 > _2463) || ((_2458 < _2461) || ((_2457 > _2463) || ((_2457 < _2461) || ((_2456 < _2461) || (_2456 > _2463))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2586 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2458, cbModelParam._m0[9u].z, fma(_2457, cbModelParam._m0[9u].y, _2456 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2458, cbModelParam._m0[10u].z, fma(_2457, cbModelParam._m0[10u].y, _2456 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2458, cbModelParam._m0[11u].z, fma(_2457, cbModelParam._m0[11u].y, _2456 * cbModelParam._m0[11u].x))), _1877);
            frontier_phi_16_38_ladder = _2586.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2586.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2586.x * cbModelParam._m0[1u].y;
        }
        _1957 = frontier_phi_16_38_ladder_2;
        _1959 = frontier_phi_16_38_ladder_1;
        _1961 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1035, _1036, _1037), _1877);
        _1957 = _1945.x * cbModelParam._m0[1u].y;
        _1959 = _1945.y * cbModelParam._m0[1u].y;
        _1961 = _1945.z * cbModelParam._m0[1u].y;
    }
    float _1965 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _853);
    float _1966 = isnan(_1965) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1965 : min(cbModelParam._m0[25u].w, _1965));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2019 = fma(_1099, cbModelParam._m0[21u].z, fma(_1095, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1091)) + cbModelParam._m0[21u].w;
        float _2023 = fma(_1099, cbModelParam._m0[22u].z, fma(_1095, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1091)) + cbModelParam._m0[22u].w;
        float _2027 = fma(_1099, cbModelParam._m0[23u].z, fma(_1095, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1091)) + cbModelParam._m0[23u].w;
        float _2030 = fma(_1037, cbModelParam._m0[21u].z, fma(_1036, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1035));
        float _2033 = fma(_1037, cbModelParam._m0[22u].z, fma(_1036, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1035));
        float _2036 = fma(_1037, cbModelParam._m0[23u].z, fma(_1036, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1035));
        float _2197;
        if (_2030 > 0.0)
        {
            _2197 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2197 = frontier_phi_28_24_ladder;
        }
        float _2476;
        if (_2033 > 0.0)
        {
            _2476 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2476 = frontier_phi_40_35_ladder;
        }
        float _2689;
        if (_2036 > 0.0)
        {
            _2689 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2689 = frontier_phi_49_46_ladder;
        }
        float _2691 = isnan(_2476) ? _2197 : (isnan(_2197) ? _2476 : min(_2197, _2476));
        float _2692 = isnan(_2689) ? _2691 : (isnan(_2691) ? _2689 : min(_2691, _2689));
        float _2696 = (_2692 * _2030) + _2019;
        float _2697 = (_2692 * _2033) + _2023;
        float _2698 = (_2692 * _2036) + _2027;
        float _2699 = _2692 * 9.9999997473787516355514526367188e-05;
        float _2700 = (-1.0) - _2699;
        float _2702 = _2699 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2698 > _2702) || ((_2698 < _2700) || ((_2697 > _2702) || ((_2697 < _2700) || ((_2696 < _2700) || (_2696 > _2702))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2698, cbModelParam._m0[17u].z, fma(_2697, cbModelParam._m0[17u].y, _2696 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2698, cbModelParam._m0[18u].z, fma(_2697, cbModelParam._m0[18u].y, _2696 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2698, cbModelParam._m0[19u].z, fma(_2697, cbModelParam._m0[19u].y, _2696 * cbModelParam._m0[19u].x))), _1966);
            frontier_phi_25_49_ladder = _2897.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2897.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2897.x * cbModelParam._m0[1u].z;
        }
        _2055 = frontier_phi_25_49_ladder_2;
        _2057 = frontier_phi_25_49_ladder_1;
        _2059 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2039 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1035, _1036, _1037), _1966);
        _2055 = _2039.x * cbModelParam._m0[1u].z;
        _2057 = _2039.y * cbModelParam._m0[1u].z;
        _2059 = _2039.z * cbModelParam._m0[1u].z;
    }
    float _2072 = (((_1062 * _1011) + _1063) * _1027) * ((cbModelParam._m0[1u].w * (_2055 - _1957)) + _1957);
    float _2074 = (((_1062 * _1013) + _1063) * _1027) * ((cbModelParam._m0[1u].w * (_2057 - _1959)) + _1959);
    float _2076 = (((_1062 * _1014) + _1063) * _1027) * ((cbModelParam._m0[1u].w * (_2059 - _1961)) + _1961);
    float _2079 = fma(_2076, cbSceneParam._m0[89u].z, fma(_2074, cbSceneParam._m0[89u].y, _2072 * cbSceneParam._m0[89u].x));
    float _2082 = fma(_2076, cbSceneParam._m0[90u].z, fma(_2074, cbSceneParam._m0[90u].y, _2072 * cbSceneParam._m0[90u].x));
    float _2085 = fma(_2076, cbSceneParam._m0[91u].z, fma(_2074, cbSceneParam._m0[91u].y, _2072 * cbSceneParam._m0[91u].x));
    vec4 _2093 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_949, _950));
    float _2095 = _2093.w;
    float _2107 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2095);
    float _2108 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2095);
    float _2109 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2095);
    uvec4 _2113 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2115 = _2113.x * 14u;
    uint _2116 = _2115 + 13u;
    float _2123 = _1027 + (-1.0);
    float _2128 = (cbLight._m0[_2116].x * _2123) + 1.0;
    float _2129 = (cbLight._m0[_2116].y * _2123) + 1.0;
    float _2130 = (cbLight._m0[_2116].z * _2123) + 1.0;
    float _2131 = (cbLight._m0[_2116].w * _2123) + 1.0;
    uint _2132 = _2115 + 5u;
    float _2138 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
    uint _2142 = _2115 + 4u;
    float _2151 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    uint _2155 = _2115 | 1u;
    float _2166 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_850, _851, _852));
    float _2169 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_850, _851, _852));
    float _4440 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _4451 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2174 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * 0.3183098733425140380859375;
    float _2176 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * 0.3183098733425140380859375;
    float _2183 = ((cbLight._m0[_2132].x * _2138) * _2176) + (((cbLight._m0[_2142].x * _2107) * _2151) * _2174);
    float _2184 = ((_2138 * cbLight._m0[_2132].y) * _2176) + (((cbLight._m0[_2142].y * _2108) * _2151) * _2174);
    float _2185 = ((_2138 * cbLight._m0[_2132].z) * _2176) + (((cbLight._m0[_2142].z * _2109) * _2151) * _2174);
    uvec4 _2189 = floatBitsToUint(cbLight._m0[_2115 + 12u]);
    bool _2191 = _2189.x == 0u;
    float _2202;
    float _2204;
    float _2206;
    if (_2191)
    {
        _2202 = _2183;
        _2204 = _2184;
        _2206 = _2185;
    }
    else
    {
        uint _2210 = _2115 + 6u;
        float _2226 = (dot(vec3(cbLight._m0[_2115 + 2u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2227 = _2226 * _2226;
        float _4462 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2228 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2229 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2202 = (((cbLight._m0[_2210].x * 0.3183098733425140380859375) * _2228) * _2229) + _2183;
        _2204 = (((cbLight._m0[_2210].y * 0.3183098733425140380859375) * _2228) * _2229) + _2184;
        _2206 = (((cbLight._m0[_2210].z * 0.3183098733425140380859375) * _2228) * _2229) + _2185;
    }
    bool _2209 = _2189.y == 0u;
    float _2247;
    float _2249;
    float _2251;
    if (_2209)
    {
        _2247 = _2202;
        _2249 = _2204;
        _2251 = _2206;
    }
    else
    {
        uint _2420 = _2115 + 7u;
        float _2436 = (dot(vec3(cbLight._m0[_2115 + 3u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2437 = _2436 * _2436;
        float _4478 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2438 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2439 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2247 = (((cbLight._m0[_2420].x * 0.3183098733425140380859375) * _2438) * _2439) + _2202;
        _2249 = (((cbLight._m0[_2420].y * 0.3183098733425140380859375) * _2438) * _2439) + _2204;
        _2251 = (((cbLight._m0[_2420].z * 0.3183098733425140380859375) * _2438) * _2439) + _2206;
    }
    uint _2254 = _2115 + 8u;
    float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _853) * 0.949999988079071044921875);
    float _2268 = _2267 * _2267;
    float _2269 = cbLight._m0[_2115].x + _929;
    float _2270 = cbLight._m0[_2115].y + _930;
    float _2271 = cbLight._m0[_2115].z + _931;
    float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
    float _2276 = _2275 * _2269;
    float _2277 = _2275 * _2270;
    float _2278 = _2275 * _2271;
    float _2279 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2115].xyz));
    float _4494 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _4505 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _2283 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2284 = dot(vec3(_850, _851, _852), vec3(_2276, _2277, _2278));
    float _4516 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2276, _2277, _2278));
    float _4527 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2268 * _2268;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
    float _2305 = 0.959999978542327880859375 - _1008;
    float _2307 = 0.959999978542327880859375 - _1009;
    float _2308 = 0.959999978542327880859375 - _1010;
    float _2315 = 1.0 - _2268;
    float _2326 = (0.5 / (((_2283 * ((_2282 * _2315) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2315) + _2268) * _2282))) * _2282;
    float _4538 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2328 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    uint _2342 = _2115 + 9u;
    float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _853) * 0.949999988079071044921875);
    float _2354 = _2353 * _2353;
    float _2355 = cbLight._m0[_2155].x + _929;
    float _2356 = cbLight._m0[_2155].y + _930;
    float _2357 = cbLight._m0[_2155].z + _931;
    float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
    float _2362 = _2361 * _2355;
    float _2363 = _2361 * _2356;
    float _2364 = _2361 * _2357;
    float _2365 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2155].xyz));
    float _4549 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2369 = dot(vec3(_850, _851, _852), vec3(_2362, _2363, _2364));
    float _4560 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2373 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2362, _2363, _2364));
    float _4571 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2377 = _2354 * _2354;
    float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
    float _2388 = exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0);
    float _2395 = 1.0 - _2354;
    float _2405 = (0.5 / (((_2283 * ((_2368 * _2395) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2395) + _2354) * _2368))) * _2368;
    float _4582 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2407 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
    float _2417 = (((((_2388 * _2305) + _1011) * cbLight._m0[_2342].x) * _2407) * _2138) + ((((cbLight._m0[_2254].x * _2107) * ((_2304 * _2305) + _1011)) * _2328) * _2151);
    float _2418 = (((((_2388 * _2307) + _1013) * cbLight._m0[_2342].y) * _2407) * _2138) + ((((cbLight._m0[_2254].y * _2108) * ((_2304 * _2307) + _1013)) * _2328) * _2151);
    float _2419 = (((((_2388 * _2308) + _1014) * cbLight._m0[_2342].z) * _2407) * _2138) + ((((cbLight._m0[_2254].z * _2109) * ((_2304 * _2308) + _1014)) * _2328) * _2151);
    float _2481;
    float _2483;
    float _2485;
    if (_2191)
    {
        _2481 = _2417;
        _2483 = _2418;
        _2485 = _2419;
    }
    else
    {
        uint _2487 = _2115 + 2u;
        uint _2491 = _2115 + 10u;
        float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2487].w)) * _853) * 0.949999988079071044921875);
        float _2506 = _2505 * _2505;
        float _2507 = cbLight._m0[_2487].x + _929;
        float _2508 = cbLight._m0[_2487].y + _930;
        float _2509 = cbLight._m0[_2487].z + _931;
        float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
        float _2514 = _2513 * _2507;
        float _2515 = _2513 * _2508;
        float _2516 = _2513 * _2509;
        float _2517 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2487].xyz));
        float _4593 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2521 = dot(vec3(_850, _851, _852), vec3(_2514, _2515, _2516));
        float _4604 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2525 = dot(vec3(cbLight._m0[_2487].xyz), vec3(_2514, _2515, _2516));
        float _4615 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2529 = _2506 * _2506;
        float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
        float _2540 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
        float _2547 = 1.0 - _2506;
        float _2557 = (0.5 / (((_2283 * ((_2520 * _2547) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2547) + _2506) * _2520))) * _2520;
        float _4626 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2559 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
        float _2560 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2481 = (((((_2540 * _2305) + _1011) * cbLight._m0[_2491].x) * _2559) * _2560) + _2417;
        _2483 = (((((_2540 * _2307) + _1013) * cbLight._m0[_2491].y) * _2559) * _2560) + _2418;
        _2485 = (((((_2540 * _2308) + _1014) * cbLight._m0[_2491].z) * _2559) * _2560) + _2419;
    }
    float _2595;
    float _2597;
    float _2599;
    if (_2209)
    {
        _2595 = _2481;
        _2597 = _2483;
        _2599 = _2485;
    }
    else
    {
        uint _2606 = _2115 + 3u;
        uint _2610 = _2115 + 11u;
        float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2606].w)) * _853) * 0.949999988079071044921875);
        float _2625 = _2624 * _2624;
        float _2626 = cbLight._m0[_2606].x + _929;
        float _2627 = cbLight._m0[_2606].y + _930;
        float _2628 = cbLight._m0[_2606].z + _931;
        float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
        float _2633 = _2632 * _2626;
        float _2634 = _2632 * _2627;
        float _2635 = _2632 * _2628;
        float _2636 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2606].xyz));
        float _4642 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2640 = dot(vec3(_850, _851, _852), vec3(_2633, _2634, _2635));
        float _4653 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2644 = dot(vec3(cbLight._m0[_2606].xyz), vec3(_2633, _2634, _2635));
        float _4664 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2648 = _2625 * _2625;
        float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
        float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0);
        float _2666 = 1.0 - _2625;
        float _2676 = (0.5 / (((_2283 * ((_2639 * _2666) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2666) + _2625) * _2639))) * _2639;
        float _4675 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2678 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
        float _2679 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2595 = (((((_2659 * _2305) + _1011) * cbLight._m0[_2610].x) * _2678) * _2679) + _2481;
        _2597 = (((((_2659 * _2307) + _1013) * cbLight._m0[_2610].y) * _2678) * _2679) + _2483;
        _2599 = (((((_2659 * _2308) + _1014) * cbLight._m0[_2610].z) * _2678) * _2679) + _2485;
    }
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    if (_2113.y == 0u)
    {
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2754;
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2754;
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2754;
        uvec4 _2769 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2770 = _2769.x;
        uint _2781 = uint((float(_2769.y) * floor(float(uint(cbSceneParam._m0[85u].y * _950) / _2770))) + floor(float(uint(cbSceneParam._m0[85u].x * _949) / _2770)));
        float _2791 = (log2(_2757 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2792 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        uint _2795 = uint(isnan(14.0) ? _2792 : (isnan(_2792) ? 14.0 : min(_2792, 14.0)));
        uvec4 _2800 = texelFetch(g_lightClusterGridBuffer, int(((_2795 << 2u) + (_2781 << 6u)) >> 2u));
        uint _2801 = _2800.x;
        uint _2802 = _2769.z;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        if (((((1u << ((_2802 >> 4u) & 15u)) + 4294967295u) & _2801) == 0u) || ((_2802 & 240u) == 0u))
        {
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
        }
        else
        {
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            uint _3060 = 0u;
            uint _3069;
            bool _3070;
            for (;;)
            {
                _3069 = texelFetch(g_lightClassification, int((((_2795 << 5u) + (_2781 << 9u)) + (_3060 << 2u)) >> 2u)).x;
                _3070 = _3069 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3070)
                {
                    frontier_phi_66_pred = _3054;
                    frontier_phi_66_pred_1 = _3059;
                    frontier_phi_66_pred_2 = _3058;
                    frontier_phi_66_pred_3 = _3057;
                    frontier_phi_66_pred_4 = _3056;
                    frontier_phi_66_pred_5 = _3055;
                }
                else
                {
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    uint _3205;
                    _3199 = _3054;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3069;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    for (;;)
                    {
                        uint _3209 = uint(findLSB(_3205)) + (_3060 << 5u);
                        uint _3206 = (_3205 + 4294967295u) & _3205;
                        uint _3211 = _3209 * 48u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 3u)).x));
                        uint _3231 = (_3209 * 48u) + 4u;
                        vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 3u)).x));
                        uint _3250 = (_3209 * 48u) + 8u;
                        vec3 _3261 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3250)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 2u)).x));
                        float _3265 = _3225.x - _2755;
                        float _3266 = _3225.y - _2756;
                        float _3267 = _3225.z - _2757;
                        float _3268 = dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267));
                        float _3271 = inversesqrt(_3268);
                        float _3272 = _3271 * _3265;
                        float _3273 = _3271 * _3266;
                        float _3274 = _3271 * _3267;
                        float _3275 = dot(vec3(_968, _971, _974), vec3(_3272, _3273, _3274));
                        float _3280 = 1.0 - (_3268 * _3225.w);
                        float _4701 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3282 = sqrt(_3268) * _3244.w;
                        float _3285 = 1.39999997615814208984375 / (_3282 + 1.39999997615814208984375);
                        float _3286 = _3285 * _3285;
                        float _3289 = ((1.0 - _3286) * _3275) + _3286;
                        float _3292 = _3282 * _3282;
                        float _3296 = ((isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))) * _3281) / ((_3292 * 0.699999988079071044921875) + 1.0);
                        float _3300 = (-0.0) - _2755;
                        float _3301 = (-0.0) - _2756;
                        float _3302 = (-0.0) - _2757;
                        float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                        float _3307 = _3306 * _3300;
                        float _3308 = _3306 * _3301;
                        float _3309 = _3306 * _3302;
                        float _3317 = exp2(log2(1.0 / ((_3292 * 3.5) + 5.0)) * 0.25);
                        float _3318 = 1.0 - _1043;
                        float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                        float _3326 = _3325 * _3325;
                        float _3327 = _3326 * _3326;
                        float _3328 = _3307 + _3272;
                        float _3329 = _3308 + _3273;
                        float _3330 = _3309 + _3274;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3338 = dot(vec3(_968, _971, _974), vec3(_3307, _3308, _3309));
                        float _4717 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3342 = dot(vec3(_968, _971, _974), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                        float _4728 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                        float _3350 = _3285 * _3326;
                        float _3351 = _3350 * _3350;
                        float _3354 = ((1.0 - _3351) * _3275) + _3351;
                        float _4739 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3356 = 1.0 - _3326;
                        float _3366 = (0.5 / (((_3355 * ((_3341 * _3356) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3355 * _3356) + _3326) * _3341))) * _3355;
                        float _4750 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3377 = (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3349 * _3349) * ((_3292 * 2.1991131305694580078125) + 3.141590118408203125))) * _3281;
                        _3129 = (_3296 * _3244.x) + _3202;
                        _3130 = (_3296 * _3244.y) + _3203;
                        _3131 = (_3296 * _3244.z) + _3204;
                        _3126 = (_3377 * _3261.x) + _3199;
                        _3127 = (_3377 * _3261.y) + _3200;
                        _3128 = (_3377 * _3261.z) + _3201;
                        if (_3206 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3199 = _3126;
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3206;
                        }
                    }
                    frontier_phi_66_pred = _3126;
                    frontier_phi_66_pred_1 = _3131;
                    frontier_phi_66_pred_2 = _3130;
                    frontier_phi_66_pred_3 = _3129;
                    frontier_phi_66_pred_4 = _3128;
                    frontier_phi_66_pred_5 = _3127;
                }
                _2903 = frontier_phi_66_pred;
                _2913 = frontier_phi_66_pred_1;
                _2911 = frontier_phi_66_pred_2;
                _2909 = frontier_phi_66_pred_3;
                _2907 = frontier_phi_66_pred_4;
                _2905 = frontier_phi_66_pred_5;
                uint _3061 = _3060 + 1u;
                if (_3061 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3054 = _2903;
                    _3055 = _2905;
                    _3056 = _2907;
                    _3057 = _2909;
                    _3058 = _2911;
                    _3059 = _2913;
                    _3060 = _3061;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
        }
        uvec4 _2916 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2917 = _2916.z;
        uint _2919 = (_2917 >> 8u) & 15u;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((4294967295u << _2919) & _2801) == 0u)
        {
            _3022 = _2902;
            _3024 = _2904;
            _3026 = _2906;
            _3028 = _2908;
            _3030 = _2910;
            _3032 = _2912;
        }
        else
        {
            float _3047 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
            float _3048 = _3047 * _2755;
            float _3049 = _3047 * _2756;
            float _3050 = _3047 * _2757;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2919 < ((_2917 >> 12u) & 15u))
            {
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3182 = _2902;
                float _3183 = _2904;
                float _3184 = _2906;
                float _3185 = _2908;
                float _3186 = _2910;
                float _3187 = _2912;
                uint _3188 = _2919;
                uint _3197;
                bool _3198;
                for (;;)
                {
                    _3197 = texelFetch(g_lightClassification, int((((_2795 << 5u) + (_2781 << 9u)) + (_3188 << 2u)) >> 2u)).x;
                    _3198 = _3197 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3198)
                    {
                        frontier_phi_77_pred = _3187;
                        frontier_phi_77_pred_1 = _3186;
                        frontier_phi_77_pred_2 = _3185;
                        frontier_phi_77_pred_3 = _3184;
                        frontier_phi_77_pred_4 = _3183;
                        frontier_phi_77_pred_5 = _3182;
                    }
                    else
                    {
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3404 = _3182;
                        float _3405 = _3183;
                        float _3406 = _3184;
                        float _3407 = _3185;
                        float _3408 = _3186;
                        float _3409 = _3187;
                        uint _3410 = _3197;
                        uint _3411;
                        vec4 _3436;
                        float _3437;
                        vec4 _3452;
                        vec3 _3464;
                        vec4 _3479;
                        vec4 _3494;
                        float _3540;
                        bool _3541;
                        for (;;)
                        {
                            uint _3421 = ((_3188 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3410));
                            _3411 = (_3410 + 4294967295u) & _3410;
                            uint _3423 = _3421 * 40u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            _3437 = _3436.w;
                            uint _3439 = (_3421 * 40u) + 4u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3421 * 40u) + 8u;
                            _3464 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x));
                            uint _3466 = (_3421 * 40u) + 16u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3481 = (_3421 * 40u) + 20u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3421 * 40u) + 24u;
                            vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3515 = (_3421 * 40u) + 28u;
                            vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            _3540 = fma(_2757, _3528.z, fma(_2756, _3528.y, _3528.x * _2755)) + _3528.w;
                            _3541 = !((fma(_2757, _3509.z, fma(_2756, _3509.y, _3509.x * _2755)) + _3509.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3541)
                            {
                                float _3568 = _3436.x - _2755;
                                float _3569 = _3436.y - _2756;
                                float _3570 = _3436.z - _2757;
                                float _3571 = dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570));
                                float _3574 = inversesqrt(_3571);
                                float _3575 = _3574 * _3568;
                                float _3576 = _3574 * _3569;
                                float _3577 = _3574 * _3570;
                                float _3581 = 1.0 - (_3571 / (_3437 * _3437));
                                float _4761 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3586 = sqrt(_3571) * _3452.w;
                                float _3588 = 1.39999997615814208984375 / (_3586 + 1.39999997615814208984375);
                                float _3589 = _3588 * _3588;
                                float _3592 = ((1.0 - _3589) * dot(vec3(_3575, _3576, _3577), vec3(_968, _971, _974))) + _3589;
                                float _3595 = _3586 * _3586;
                                float _3599 = (fma(_2757, _3479.z, fma(_2756, _3479.y, _3479.x * _2755)) + _3479.w) / _3540;
                                float _3600 = (fma(_2757, _3494.z, fma(_2756, _3494.y, _3494.x * _2755)) + _3494.w) / _3540;
                                float _3604 = 1.0 - dot(vec2(_3599, _3600), vec2(_3599, _3600));
                                float _4777 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3606 = _3605 * (((isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0))) * _3582) / ((_3595 * 0.699999988079071044921875) + 1.0));
                                float _3618 = exp2(log2(1.0 / ((_3595 * 3.5) + 5.0)) * 0.25);
                                float _3619 = 1.0 - _1043;
                                float _3626 = sqrt(1.0 - ((1.0 - (_3619 * _3619)) * (1.0 - (_3618 * _3618))));
                                float _3627 = _3626 * _3626;
                                float _3628 = _3627 * _3627;
                                float _3629 = _3575 - _3048;
                                float _3630 = _3576 - _3049;
                                float _3631 = _3577 - _3050;
                                float _3635 = inversesqrt(dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631)));
                                float _3639 = dot(vec3(_968, _971, _974), vec3((-0.0) - _3048, (-0.0) - _3049, (-0.0) - _3050));
                                float _4788 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3642 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3643 = dot(vec3(_968, _971, _974), vec3(_3635 * _3629, _3635 * _3630, _3635 * _3631));
                                float _4799 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3646 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3650 = ((_3646 * _3646) * (_3628 + (-1.0))) + 1.0;
                                float _3651 = _3588 * _3627;
                                float _3652 = _3651 * _3651;
                                float _3658 = ((1.0 - _3652) * dot(vec3(_968, _971, _974), vec3(_3575, _3576, _3577))) + _3652;
                                float _4810 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3660 = 1.0 - _3627;
                                float _3670 = (0.5 / (((_3659 * ((_3642 * _3660) + _3627)) + 9.9999999392252902907785028219223e-09) + (((_3659 * _3660) + _3627) * _3642))) * _3659;
                                float _4821 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3680 = (_3605 * _3582) * (((_3628 * 3.1415927410125732421875) * (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0)))) / ((_3650 * _3650) * ((_3595 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3606 * _3452.y;
                                frontier_phi_83_pred_1 = _3606 * _3452.x;
                                frontier_phi_83_pred_2 = _3680 * _3464.z;
                                frontier_phi_83_pred_3 = _3680 * _3464.y;
                                frontier_phi_83_pred_4 = _3680 * _3464.x;
                                frontier_phi_83_pred_5 = _3606 * _3452.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3688 = frontier_phi_83_pred;
                            _3687 = frontier_phi_83_pred_1;
                            _3686 = frontier_phi_83_pred_2;
                            _3685 = frontier_phi_83_pred_3;
                            _3684 = frontier_phi_83_pred_4;
                            _3689 = frontier_phi_83_pred_5;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            _3391 = _3684 + _3404;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            if (_3411 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3411;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3396;
                        frontier_phi_77_pred_1 = _3395;
                        frontier_phi_77_pred_2 = _3394;
                        frontier_phi_77_pred_3 = _3393;
                        frontier_phi_77_pred_4 = _3392;
                        frontier_phi_77_pred_5 = _3391;
                    }
                    _3033 = frontier_phi_77_pred;
                    _3031 = frontier_phi_77_pred_1;
                    _3029 = frontier_phi_77_pred_2;
                    _3027 = frontier_phi_77_pred_3;
                    _3025 = frontier_phi_77_pred_4;
                    _3023 = frontier_phi_77_pred_5;
                    uint _3189 = _3188 + 1u;
                    if (_3189 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3182 = _3023;
                        _3183 = _3025;
                        _3184 = _3027;
                        _3185 = _3029;
                        _3186 = _3031;
                        _3187 = _3033;
                        _3188 = _3189;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3027;
                frontier_phi_58_59_ladder_1 = _3033;
                frontier_phi_58_59_ladder_2 = _3031;
                frontier_phi_58_59_ladder_3 = _3029;
                frontier_phi_58_59_ladder_4 = _3025;
                frontier_phi_58_59_ladder_5 = _3023;
            }
            else
            {
                frontier_phi_58_59_ladder = _2906;
                frontier_phi_58_59_ladder_1 = _2912;
                frontier_phi_58_59_ladder_2 = _2910;
                frontier_phi_58_59_ladder_3 = _2908;
                frontier_phi_58_59_ladder_4 = _2904;
                frontier_phi_58_59_ladder_5 = _2902;
            }
            _3022 = frontier_phi_58_59_ladder_5;
            _3024 = frontier_phi_58_59_ladder_4;
            _3026 = frontier_phi_58_59_ladder;
            _3028 = frontier_phi_58_59_ladder_3;
            _3030 = frontier_phi_58_59_ladder_2;
            _3032 = frontier_phi_58_59_ladder_1;
        }
        float _3037 = isnan(1.0) ? _1027 : (isnan(_1027) ? 1.0 : min(_1027, 1.0));
        _2814 = (_3037 * _3028) + _2247;
        _2816 = (_3037 * _3030) + _2249;
        _2818 = (_3037 * _3032) + _2251;
        _2820 = ((_3022 * _1011) * _3037) + _2595;
        _2822 = ((_3024 * _1013) * _3037) + _2597;
        _2824 = ((_3026 * _1014) * _3037) + _2599;
    }
    else
    {
        _2814 = _2247;
        _2816 = _2249;
        _2818 = _2251;
        _2820 = _2595;
        _2822 = _2597;
        _2824 = _2599;
    }
    float _4837 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4848 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _4859 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _2841 = ((isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2814 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1027))) + ((_2820 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1866)) * cbPerFrame._m0[3u].x);
    float _2842 = ((isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2816 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1027))) + ((_2822 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1866)) * cbPerFrame._m0[3u].x);
    float _2843 = ((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2818 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1027))) + ((_2824 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1866)) * cbPerFrame._m0[3u].x);
    uint _2844 = _263 + 6u;
    float _2852 = _949 / cbSceneParam._m0[86u].x;
    float _2853 = _950 / cbSceneParam._m0[86u].y;
    vec4 _2867 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2852, _2853, (log2((isnan(cbSceneParam._m0[77u].w) ? _872 : (isnan(_872) ? cbSceneParam._m0[77u].w : min(_872, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2869 = _2867.x;
    float _2870 = _2867.y;
    float _2871 = _2867.z;
    float _2872 = _2867.w;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    if (_872 > cbSceneParam._m0[78u].w)
    {
        float _2927 = isnan(_872) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _872 : min(cbSceneParam._m0[80u].w, _872));
        float _2928 = _2927 / _872;
        float _2939 = _2928 * _922;
        float _2940 = _923 * _2928;
        float _2941 = (-0.0) - _2940;
        float _2942 = _2928 * _924;
        float _2944 = (cbSceneParam._m0[77u].w * _2941) / _2927;
        float _2945 = _2944 + cbSceneParam._m0[79u].w;
        float _2946 = cbSceneParam._m0[79u].w - _2940;
        float _2952 = sqrt(((_2939 * _2939) + (_2940 * _2940)) + (_2942 * _2942));
        float _2955 = (1.0 - (cbSceneParam._m0[77u].w / _2927)) * _2952;
        float _2960 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2962 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3139;
        if (abs((_2941 - _2944) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3139 = ((((_2945 > 0.0) ? exp2(_2960 * _2945) : (2.0 - exp2(_2962 * _2945))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2955;
        }
        else
        {
            float _3083 = 1.0 / cbSceneParam._m0[80u].x;
            float _3084 = isnan(_2946) ? _2945 : (isnan(_2945) ? _2946 : max(_2945, _2946));
            float _3085 = isnan(_2946) ? _2945 : (isnan(_2945) ? _2946 : min(_2945, _2946));
            float _3094 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : min(_3084, 0.0));
            float _3095 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : min(_3085, 0.0));
            _3139 = ((abs(_2952 / _2941) * cbSceneParam._m0[80u].y) * ((((_3094 - _3095) * 2.0) - ((exp2(_2960 * (isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0)))) - exp2(_2960 * (isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))))) * _3083)) - ((exp2(_2962 * _3094) - exp2(_2962 * _3095)) * _3083))) + (_2955 * cbSceneParam._m0[80u].z);
        }
        vec4 _3141 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2852, _2853, 1.0), 0.0);
        float _3150 = exp2((_3139 * (-1.44269502162933349609375)) * (1.0 - _3141.w));
        float _3151 = log2(_3150);
        float _3167 = log2(_2872);
        _2964 = (exp2(_3167 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].x)) * _3141.x) / cbSceneParam._m0[78u].x)) + _2869;
        _2966 = (exp2(_3167 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].y)) * _3141.y) / cbSceneParam._m0[78u].y)) + _2870;
        _2968 = (exp2(_3167 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].z)) * _3141.z) / cbSceneParam._m0[78u].z)) + _2871;
        _2970 = _3150 * _2872;
    }
    else
    {
        _2964 = _2869;
        _2966 = _2870;
        _2968 = _2871;
        _2970 = _2872;
    }
    bool _3177;
    vec4 _2980;
    vec4 _3002;
    float _3004;
    float _3008;
    float _3009;
    float _3010;
    float _3011;
    bool _3021;
    for (;;)
    {
        _2980 = cbMatDynParam._m0[0u];
        float _2982 = roundEven(_2980.y);
        bool _2983 = _2982 == 3.0;
        float _2984 = log2(_2970);
        float _2991 = exp2(_2984 * cbSceneParam._m0[78u].x) * _2841;
        float _2992 = exp2(_2984 * cbSceneParam._m0[78u].y) * _2842;
        float _2993 = exp2(_2984 * cbSceneParam._m0[78u].z) * _2843;
        float _3000 = _938 + (-0.5);
        _3002 = cbMtdParam._m0[1u];
        _3004 = _3002.y * _3000;
        float _3007 = (_2982 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3008 = _3007 * (_2983 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2964)));
        _3009 = _3007 * (_2983 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2966)));
        _3010 = _3007 * (_2983 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2968)));
        _3011 = _3000 * 0.999000012874603271484375;
        _3021 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3021)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3011) < 0.5)
            {
                _3177 = true;
                break;
            }
        }
        uint _3118 = _987 + uint(_2980.w);
        if ((cbInstanceData._m0[_3118].w < 1.0) && ((cbInstanceData._m0[_3118].w + _3011) < 0.5))
        {
            _3177 = true;
            break;
        }
        if ((_3004 + 1.0) < _3002.x)
        {
            _3177 = true;
            break;
        }
        _3177 = false;
        break;
    }
    float _3382;
    if (_3177)
    {
        discard_state = true;
        _3382 = 0.0;
    }
    else
    {
        _3382 = cbInstanceData._m0[_2844].w;
    }
    SV_Target.x = _3008;
    SV_Target.y = _3009;
    SV_Target.z = _3010;
    SV_Target.w = _3382;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2844].w;
    discard_exit();
}


