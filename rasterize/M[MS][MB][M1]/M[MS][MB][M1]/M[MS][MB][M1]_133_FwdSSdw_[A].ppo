#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1358;
float _3762;
float _3763;
float _3764;
float _3765;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3774 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _442 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _461 = _459.x;
    float _462 = _459.y;
    float _463 = _459.z;
    float _472 = ((_442.z - _463) * _394) + _463;
    float _475 = ((((_442.x - _461) * _394) + _461) * 2.0) + (-1.0);
    float _477 = ((((_442.y - _462) * _394) + _462) * 2.0) + (-1.0);
    float _478 = dot(vec2(_475, _477), vec2(_475, _477));
    float _3785 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _483 = sqrt(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))));
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _526 = _524.x;
    float _527 = 1.0 - _526;
    float _533 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _536 = ((isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : min(_533, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _545 = (_536 - ((((((_526 - _527) * cbMtdParam._m0[24u].z) + _527) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _536))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3806 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _553 = (_546 * ((_422.x * cbMtdParam._m0[18u].x) - _401)) + _401;
    float _554 = (_546 * ((_422.y * cbMtdParam._m0[18u].y) - _402)) + _402;
    float _555 = (_546 * ((_422.z * cbMtdParam._m0[18u].z) - _403)) + _403;
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _569 = _567.x;
    float _570 = 1.0 - _569;
    float _597 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_569 - _570) * cbMtdParam._m0[24u].w) + _570) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3817 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _606 = ((((cbMtdParam._m0[10u].x - _553) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _598) + _553;
    float _607 = ((((cbMtdParam._m0[10u].y - _554) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _598) + _554;
    float _608 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _555)) * _598) + _555;
    vec4 _620 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _636 = _634.x;
    float _654 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _636) * _394) + _636;
    float _658 = ((_620.x - _654) * cbMtdParam._m0[19u].z) + _654;
    float _660 = _658 - (_658 * _546);
    float _662 = _660 - (_660 * _598);
    float _666 = (cbMtdParam._m0[19u].w * (_499.z - _472)) + _472;
    vec4 _680 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _687 = (_680.x * 2.0) + (-1.0);
    float _688 = (_680.y * 2.0) + (-1.0);
    float _689 = dot(vec2(_687, _688), vec2(_687, _688));
    float _3828 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _697 = (_546 * (_680.z - _666)) + _666;
    float _700 = ((cbMtdParam._m0[23u].y - _697) * _598) + _697;
    vec4 _719 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _725 = (_719.x * 2.0) + (-1.0);
    float _726 = (_719.y * 2.0) + (-1.0);
    float _727 = dot(vec2(_725, _726), vec2(_725, _726));
    float _3839 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _735 = (((_499.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _475;
    float _736 = (((_499.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _477;
    float _748 = (((_687 - _735) + (cbMtdParam._m0[21u].x * _735)) * _546) + _735;
    float _749 = (((_688 - _736) + (cbMtdParam._m0[21u].x * _736)) * _546) + _736;
    float _750 = (_546 * (sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) - _483)) + _483;
    float _761 = (((_725 - _748) + (_748 * cbMtdParam._m0[22u].z)) * _598) + _748;
    float _762 = (((_726 - _749) + (_749 * cbMtdParam._m0[22u].z)) * _598) + _749;
    float _763 = ((sqrt(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) - _750) * _598) + _750;
    float _765 = cbMtdParam._m0[22u].x + _499.w;
    float _768 = fma(_763, _244 * NORMAL.x, fma(_762, _251 * TANGENT.x, (_237 * _229) * _761));
    float _771 = fma(_763, _244 * NORMAL.y, fma(_762, _251 * TANGENT.y, (_237 * _230) * _761));
    float _774 = fma(_763, _244 * NORMAL.z, fma(_762, _251 * TANGENT.z, (_237 * _231) * _761));
    float _778 = inversesqrt(dot(vec3(_768, _771, _774), vec3(_768, _771, _774)));
    float _779 = _778 * _768;
    float _780 = _778 * _771;
    float _781 = _778 * _774;
    float _3850 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _782 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _3872 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3883 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3894 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3905 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _787 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _801 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _851 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _841);
    float _852 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _841);
    float _853 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _841);
    float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
    float _858 = _851 * _857;
    float _859 = _852 * _857;
    float _860 = _853 * _857;
    vec4 _865 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _867 = _865.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1039 = sqrt(((_851 * _851) + (_852 * _852)) + (_853 * _853));
        float _1045 = (cbMatDynParam._m0[5u].x * _1039) + cbMatDynParam._m0[5u].y;
        float _3916 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1050 = (cbMatDynParam._m0[5u].z * _1039) + cbMatDynParam._m0[5u].w;
        float _3927 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) - _1046)) + _1046) < ((_867 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _878 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _879 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _897 = fma(_781, cbSceneParam._m0[5u].z, fma(_780, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _779));
    float _900 = fma(_781, cbSceneParam._m0[6u].z, fma(_780, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _779));
    float _903 = fma(_781, cbSceneParam._m0[7u].z, fma(_780, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _779));
    uint _916 = _257 + 9u;
    uint _917 = _916 + uint(cbMatDynParam._m0[0u].w);
    float _923 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_917].x;
    float _924 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_917].y;
    float _925 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_917].z;
    float _3938 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _929 = 1.0 - _787;
    float _930 = _926 * _929;
    float _931 = _927 * _929;
    float _932 = _928 * _929;
    float _937 = (_926 + (-0.039999999105930328369140625)) * _787;
    float _938 = (_927 + (-0.039999999105930328369140625)) * _787;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _787;
    float _940 = _937 + 0.039999999105930328369140625;
    float _942 = _938 + 0.039999999105930328369140625;
    float _943 = _939 + 0.039999999105930328369140625;
    vec4 _952 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _878, cbSceneParam._m0[86u].y * _879));
    float _956 = ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * TEXCOORD_5.w) * _952.x;
    float _957 = dot(vec3(_779, _780, _781), vec3(_858, _859, _860));
    float _960 = _957 * 2.0;
    float _964 = (_960 * _779) - _858;
    float _965 = (_960 * _780) - _859;
    float _966 = (_960 * _781) - _860;
    float _970 = abs(dot(vec3(_858, _859, _860), vec3(_779, _780, _781)));
    float _3971 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _972 = sqrt(_782);
    float _985 = exp2((_972 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_972 * 3.0));
    float _991 = (1.0 - _985) * ((_972 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _992 = _985 * _972;
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1357;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1082 = fma(_1028, cbModelParam._m0[26u].z, fma(_1024, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020));
        float _1086 = fma(_1028, cbModelParam._m0[27u].z, fma(_1024, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020));
        float _1090 = fma(_1028, cbModelParam._m0[28u].z, fma(_1024, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020));
        float _1115 = _1020 + _779;
        float _1116 = _1024 + _780;
        float _1117 = _1028 + _781;
        float _1127 = fma(_1117, cbModelParam._m0[26u].z, fma(_1116, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1115)) - _1082;
        float _1128 = fma(_1117, cbModelParam._m0[27u].z, fma(_1116, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1115)) - _1086;
        float _1129 = fma(_1117, cbModelParam._m0[28u].z, fma(_1116, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1115)) - _1090;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1146 = ((_1133 * _1127) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1082 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1133 * _1128) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1086 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1133 * _1129) / cbModelParam._m0[34u].z) + ((((((_1090 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        float _1185 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1151.x + (-0.5));
        float _1187 = _1185 * (_1151.y + (-0.5));
        float _1188 = _1185 * (_1151.z + (-0.5));
        float _1195 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1158.x + (-0.5));
        float _1197 = _1195 * (_1158.y + (-0.5));
        float _1198 = _1195 * (_1158.z + (-0.5));
        float _1205 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1165.x + (-0.5));
        float _1207 = _1205 * (_1165.y + (-0.5));
        float _1208 = _1205 * (_1165.z + (-0.5));
        float _1215 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1172.x + (-0.5));
        float _1217 = _1215 * (_1172.y + (-0.5));
        float _1218 = _1215 * (_1172.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1239 = (dot(vec3(_779, _780, _781), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1249 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _4019 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1251 + 1.0))) + _1256) * _1219;
        float _1266 = _1187 * 0.5;
        float _1267 = _1197 * 0.5;
        float _1268 = _1207 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_779, _780, _781), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4052 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1293 + 1.0))) + _1298) * _1220;
        float _1308 = _1188 * 0.5;
        float _1309 = _1198 * 0.5;
        float _1310 = _1208 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_779, _780, _781), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4085 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1335 + 1.0))) + _1340) * _1221;
        _1357 = _1188;
        _1359 = _1187;
        _1360 = _1186;
        _1361 = _1198;
        _1362 = _1197;
        _1363 = _1196;
        _1364 = _1208;
        _1365 = _1207;
        _1366 = _1206;
        _1367 = _1221;
        _1368 = _1220;
        _1369 = _1219;
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    }
    else
    {
        _1357 = _1358;
        _1359 = _1358;
        _1360 = _1358;
        _1361 = _1358;
        _1362 = _1358;
        _1363 = _1358;
        _1364 = _1358;
        _1365 = _1358;
        _1366 = _1358;
        _1367 = _1358;
        _1368 = _1358;
        _1369 = _1358;
        _1370 = 0.0;
        _1371 = 0.0;
        _1372 = 0.0;
    }
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1400 = fma(_1028, cbModelParam._m0[30u].z, fma(_1024, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1020));
        float _1404 = fma(_1028, cbModelParam._m0[31u].z, fma(_1024, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1020));
        float _1408 = fma(_1028, cbModelParam._m0[32u].z, fma(_1024, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1020));
        float _1431 = _1020 + _779;
        float _1432 = _1024 + _780;
        float _1433 = _1028 + _781;
        float _1443 = fma(_1433, cbModelParam._m0[30u].z, fma(_1432, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1431)) - _1400;
        float _1444 = fma(_1433, cbModelParam._m0[31u].z, fma(_1432, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1431)) - _1404;
        float _1445 = fma(_1433, cbModelParam._m0[32u].z, fma(_1432, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1431)) - _1408;
        float _1449 = inversesqrt(dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445)));
        float _1462 = ((_1449 * _1443) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1400 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1449 * _1444) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1404 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1449 * _1445) / cbModelParam._m0[35u].z) + ((((((_1408 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        float _1499 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1466.x + (-0.5));
        float _1501 = _1499 * (_1466.y + (-0.5));
        float _1502 = _1499 * (_1466.z + (-0.5));
        float _1509 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1473.x + (-0.5));
        float _1511 = _1509 * (_1473.y + (-0.5));
        float _1512 = _1509 * (_1473.z + (-0.5));
        float _1519 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1480.x + (-0.5));
        float _1521 = _1519 * (_1480.y + (-0.5));
        float _1522 = _1519 * (_1480.z + (-0.5));
        float _1529 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1487.x + (-0.5));
        float _1531 = _1529 * (_1487.y + (-0.5));
        float _1532 = _1529 * (_1487.z + (-0.5));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = _1500 * 0.5;
        float _1537 = _1510 * 0.5;
        float _1538 = _1520 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_779, _780, _781), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4148 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1563 + 1.0))) + _1568) * _1533;
        float _1578 = _1501 * 0.5;
        float _1579 = _1511 * 0.5;
        float _1580 = _1521 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_779, _780, _781), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4181 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1605 + 1.0))) + _1610) * _1534;
        float _1620 = _1502 * 0.5;
        float _1621 = _1512 * 0.5;
        float _1622 = _1522 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_779, _780, _781), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4214 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1647 + 1.0))) + _1652) * _1535;
        _1669 = _1502;
        _1670 = _1501;
        _1671 = _1500;
        _1672 = _1512;
        _1673 = _1511;
        _1674 = _1510;
        _1675 = _1522;
        _1676 = _1521;
        _1677 = _1520;
        _1678 = _1535;
        _1679 = _1534;
        _1680 = _1533;
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
    }
    else
    {
        _1669 = _1358;
        _1670 = _1358;
        _1671 = _1358;
        _1672 = _1358;
        _1673 = _1358;
        _1674 = _1358;
        _1675 = _1358;
        _1676 = _1358;
        _1677 = _1358;
        _1678 = _1358;
        _1679 = _1358;
        _1680 = _1358;
        _1681 = 0.0;
        _1682 = 0.0;
        _1683 = 0.0;
    }
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1370)) + _1370;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1371)) + _1371;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1372)) + _1372;
    float _1716 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1693));
    float _1737 = _964 * 0.5;
    float _1738 = _965 * 0.5;
    float _1739 = _966 * 0.5;
    float _1740 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1743 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1746 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1780;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1753 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1357, _1361, _1364, _1367));
        float _1757 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1761 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1768 = dot(vec4(cbModelParam._m0[39u]), vec4(_1737, _1738, _1739, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1768) ? 0.0 : (isnan(0.0) ? _1768 : max(0.0, _1768))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1791;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1782 = dot(vec4(cbModelParam._m0[40u]), vec4(_1737, _1738, _1739, 1.0));
        _1791 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1791 = 1.0;
    }
    float _1795 = (_1791 * cbModelParam._m0[1u].x) + (_1780 * (1.0 - cbModelParam._m0[1u].x));
    float _1805 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _782);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1805 : min(cbModelParam._m0[25u].z, _1805));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1853 = fma(_1028, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020)) + cbModelParam._m0[13u].w;
        float _1857 = fma(_1028, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020)) + cbModelParam._m0[14u].w;
        float _1861 = fma(_1028, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020)) + cbModelParam._m0[15u].w;
        float _1864 = fma(_966, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964));
        float _1867 = fma(_966, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964));
        float _1870 = fma(_966, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964));
        float _1898;
        if (_1864 > 0.0)
        {
            _1898 = abs((1.0 - _1853) / _1864);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1853 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1898 = frontier_phi_17_15_ladder;
        }
        float _2121;
        if (_1867 > 0.0)
        {
            _2121 = abs((1.0 - _1857) / _1867);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1857 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2121 = frontier_phi_26_22_ladder;
        }
        float _2378;
        if (_1870 > 0.0)
        {
            _2378 = abs((1.0 - _1861) / _1870);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1861 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2378 = frontier_phi_38_33_ladder;
        }
        float _2380 = isnan(_2121) ? _1898 : (isnan(_1898) ? _2121 : min(_1898, _2121));
        float _2381 = isnan(_2378) ? _2380 : (isnan(_2380) ? _2378 : min(_2380, _2378));
        float _2385 = (_2381 * _1864) + _1853;
        float _2386 = (_2381 * _1867) + _1857;
        float _2387 = (_2381 * _1870) + _1861;
        float _2388 = _2381 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2388;
        float _2392 = _2388 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 > _2392) || ((_2386 < _2390) || ((_2385 < _2390) || (_2385 > _2392))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2387, cbModelParam._m0[9u].z, fma(_2386, cbModelParam._m0[9u].y, _2385 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2387, cbModelParam._m0[10u].z, fma(_2386, cbModelParam._m0[10u].y, _2385 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2387, cbModelParam._m0[11u].z, fma(_2386, cbModelParam._m0[11u].y, _2385 * cbModelParam._m0[11u].x))), _1806);
            frontier_phi_16_38_ladder = _2515.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2515.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2515.x * cbModelParam._m0[1u].y;
        }
        _1886 = frontier_phi_16_38_ladder_2;
        _1888 = frontier_phi_16_38_ladder_1;
        _1890 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_964, _965, _966), _1806);
        _1886 = _1874.x * cbModelParam._m0[1u].y;
        _1888 = _1874.y * cbModelParam._m0[1u].y;
        _1890 = _1874.z * cbModelParam._m0[1u].y;
    }
    float _1894 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _782);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1894 : min(cbModelParam._m0[25u].w, _1894));
    float _1984;
    float _1986;
    float _1988;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1948 = fma(_1028, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020)) + cbModelParam._m0[21u].w;
        float _1952 = fma(_1028, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020)) + cbModelParam._m0[22u].w;
        float _1956 = fma(_1028, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020)) + cbModelParam._m0[23u].w;
        float _1959 = fma(_966, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964));
        float _1962 = fma(_966, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964));
        float _1965 = fma(_966, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964));
        float _2126;
        if (_1959 > 0.0)
        {
            _2126 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2126 = frontier_phi_28_24_ladder;
        }
        float _2405;
        if (_1962 > 0.0)
        {
            _2405 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2405 = frontier_phi_40_35_ladder;
        }
        float _2618;
        if (_1965 > 0.0)
        {
            _2618 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2618 = frontier_phi_49_46_ladder;
        }
        float _2620 = isnan(_2405) ? _2126 : (isnan(_2126) ? _2405 : min(_2126, _2405));
        float _2621 = isnan(_2618) ? _2620 : (isnan(_2620) ? _2618 : min(_2620, _2618));
        float _2625 = (_2621 * _1959) + _1948;
        float _2626 = (_2621 * _1962) + _1952;
        float _2627 = (_2621 * _1965) + _1956;
        float _2628 = _2621 * 9.9999997473787516355514526367188e-05;
        float _2629 = (-1.0) - _2628;
        float _2631 = _2628 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2627 > _2631) || ((_2627 < _2629) || ((_2626 > _2631) || ((_2626 < _2629) || ((_2625 < _2629) || (_2625 > _2631))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2826 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2627, cbModelParam._m0[17u].z, fma(_2626, cbModelParam._m0[17u].y, _2625 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2627, cbModelParam._m0[18u].z, fma(_2626, cbModelParam._m0[18u].y, _2625 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2627, cbModelParam._m0[19u].z, fma(_2626, cbModelParam._m0[19u].y, _2625 * cbModelParam._m0[19u].x))), _1895);
            frontier_phi_25_49_ladder = _2826.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2826.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2826.x * cbModelParam._m0[1u].z;
        }
        _1984 = frontier_phi_25_49_ladder_2;
        _1986 = frontier_phi_25_49_ladder_1;
        _1988 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_964, _965, _966), _1895);
        _1984 = _1968.x * cbModelParam._m0[1u].z;
        _1986 = _1968.y * cbModelParam._m0[1u].z;
        _1988 = _1968.z * cbModelParam._m0[1u].z;
    }
    float _2001 = (((_991 * _940) + _992) * _956) * ((cbModelParam._m0[1u].w * (_1984 - _1886)) + _1886);
    float _2003 = (((_991 * _942) + _992) * _956) * ((cbModelParam._m0[1u].w * (_1986 - _1888)) + _1888);
    float _2005 = (((_991 * _943) + _992) * _956) * ((cbModelParam._m0[1u].w * (_1988 - _1890)) + _1890);
    float _2008 = fma(_2005, cbSceneParam._m0[89u].z, fma(_2003, cbSceneParam._m0[89u].y, _2001 * cbSceneParam._m0[89u].x));
    float _2011 = fma(_2005, cbSceneParam._m0[90u].z, fma(_2003, cbSceneParam._m0[90u].y, _2001 * cbSceneParam._m0[90u].x));
    float _2014 = fma(_2005, cbSceneParam._m0[91u].z, fma(_2003, cbSceneParam._m0[91u].y, _2001 * cbSceneParam._m0[91u].x));
    vec4 _2022 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_878, _879));
    float _2024 = _2022.w;
    float _2036 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2024);
    float _2037 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2024);
    float _2038 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2024);
    uvec4 _2042 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2044 = _2042.x * 14u;
    uint _2045 = _2044 + 13u;
    float _2052 = _956 + (-1.0);
    float _2057 = (cbLight._m0[_2045].x * _2052) + 1.0;
    float _2058 = (cbLight._m0[_2045].y * _2052) + 1.0;
    float _2059 = (cbLight._m0[_2045].z * _2052) + 1.0;
    float _2060 = (cbLight._m0[_2045].w * _2052) + 1.0;
    uint _2061 = _2044 + 5u;
    float _2067 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2071 = _2044 + 4u;
    float _2080 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2084 = _2044 | 1u;
    float _2095 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_779, _780, _781));
    float _2098 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_779, _780, _781));
    float _4350 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _4361 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2103 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2105 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2112 = ((cbLight._m0[_2061].x * _2067) * _2105) + (((cbLight._m0[_2071].x * _2036) * _2080) * _2103);
    float _2113 = ((_2067 * cbLight._m0[_2061].y) * _2105) + (((cbLight._m0[_2071].y * _2037) * _2080) * _2103);
    float _2114 = ((_2067 * cbLight._m0[_2061].z) * _2105) + (((cbLight._m0[_2071].z * _2038) * _2080) * _2103);
    uvec4 _2118 = floatBitsToUint(cbLight._m0[_2044 + 12u]);
    bool _2120 = _2118.x == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2120)
    {
        _2131 = _2112;
        _2133 = _2113;
        _2135 = _2114;
    }
    else
    {
        uint _2139 = _2044 + 6u;
        float _2155 = (dot(vec3(cbLight._m0[_2044 + 2u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2156 = _2155 * _2155;
        float _4372 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2157 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2158 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2131 = (((cbLight._m0[_2139].x * 0.3183098733425140380859375) * _2157) * _2158) + _2112;
        _2133 = (((cbLight._m0[_2139].y * 0.3183098733425140380859375) * _2157) * _2158) + _2113;
        _2135 = (((cbLight._m0[_2139].z * 0.3183098733425140380859375) * _2157) * _2158) + _2114;
    }
    bool _2138 = _2118.y == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2138)
    {
        _2176 = _2131;
        _2178 = _2133;
        _2180 = _2135;
    }
    else
    {
        uint _2349 = _2044 + 7u;
        float _2365 = (dot(vec3(cbLight._m0[_2044 + 3u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2366 = _2365 * _2365;
        float _4388 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2367 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2368 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2176 = (((cbLight._m0[_2349].x * 0.3183098733425140380859375) * _2367) * _2368) + _2131;
        _2178 = (((cbLight._m0[_2349].y * 0.3183098733425140380859375) * _2367) * _2368) + _2133;
        _2180 = (((cbLight._m0[_2349].z * 0.3183098733425140380859375) * _2367) * _2368) + _2135;
    }
    uint _2183 = _2044 + 8u;
    float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _782) * 0.949999988079071044921875);
    float _2197 = _2196 * _2196;
    float _2198 = cbLight._m0[_2044].x + _858;
    float _2199 = cbLight._m0[_2044].y + _859;
    float _2200 = cbLight._m0[_2044].z + _860;
    float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
    float _2205 = _2204 * _2198;
    float _2206 = _2204 * _2199;
    float _2207 = _2204 * _2200;
    float _2208 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2044].xyz));
    float _4404 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _4415 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _2212 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2213 = dot(vec3(_779, _780, _781), vec3(_2205, _2206, _2207));
    float _4426 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2205, _2206, _2207));
    float _4437 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2197 * _2197;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2233 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
    float _2234 = 0.959999978542327880859375 - _937;
    float _2236 = 0.959999978542327880859375 - _938;
    float _2237 = 0.959999978542327880859375 - _939;
    float _2244 = 1.0 - _2197;
    float _2255 = (0.5 / (((_2212 * ((_2211 * _2244) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2244) + _2197) * _2211))) * _2211;
    float _4448 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2257 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    uint _2271 = _2044 + 9u;
    float _2282 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _782) * 0.949999988079071044921875);
    float _2283 = _2282 * _2282;
    float _2284 = cbLight._m0[_2084].x + _858;
    float _2285 = cbLight._m0[_2084].y + _859;
    float _2286 = cbLight._m0[_2084].z + _860;
    float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
    float _2291 = _2290 * _2284;
    float _2292 = _2290 * _2285;
    float _2293 = _2290 * _2286;
    float _2294 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2084].xyz));
    float _4459 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2298 = dot(vec3(_779, _780, _781), vec3(_2291, _2292, _2293));
    float _4470 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2302 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2291, _2292, _2293));
    float _4481 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2306 = _2283 * _2283;
    float _2310 = ((_2301 * _2301) * (_2306 + (-1.0))) + 1.0;
    float _2317 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2324 = 1.0 - _2283;
    float _2334 = (0.5 / (((_2212 * ((_2297 * _2324) + _2283)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2324) + _2283) * _2297))) * _2297;
    float _4492 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2336 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2306 / ((_2310 * _2310) * 3.141590118408203125));
    float _2346 = (((((_2317 * _2234) + _940) * cbLight._m0[_2271].x) * _2336) * _2067) + ((((cbLight._m0[_2183].x * _2036) * ((_2233 * _2234) + _940)) * _2257) * _2080);
    float _2347 = (((((_2317 * _2236) + _942) * cbLight._m0[_2271].y) * _2336) * _2067) + ((((cbLight._m0[_2183].y * _2037) * ((_2233 * _2236) + _942)) * _2257) * _2080);
    float _2348 = (((((_2317 * _2237) + _943) * cbLight._m0[_2271].z) * _2336) * _2067) + ((((cbLight._m0[_2183].z * _2038) * ((_2233 * _2237) + _943)) * _2257) * _2080);
    float _2410;
    float _2412;
    float _2414;
    if (_2120)
    {
        _2410 = _2346;
        _2412 = _2347;
        _2414 = _2348;
    }
    else
    {
        uint _2416 = _2044 + 2u;
        uint _2420 = _2044 + 10u;
        float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _782) * 0.949999988079071044921875);
        float _2435 = _2434 * _2434;
        float _2436 = cbLight._m0[_2416].x + _858;
        float _2437 = cbLight._m0[_2416].y + _859;
        float _2438 = cbLight._m0[_2416].z + _860;
        float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
        float _2443 = _2442 * _2436;
        float _2444 = _2442 * _2437;
        float _2445 = _2442 * _2438;
        float _2446 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2416].xyz));
        float _4503 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2450 = dot(vec3(_779, _780, _781), vec3(_2443, _2444, _2445));
        float _4514 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2454 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2443, _2444, _2445));
        float _4525 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2458 = _2435 * _2435;
        float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
        float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
        float _2476 = 1.0 - _2435;
        float _2486 = (0.5 / (((_2212 * ((_2449 * _2476) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2476) + _2435) * _2449))) * _2449;
        float _4536 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2488 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
        float _2489 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2410 = (((((_2469 * _2234) + _940) * cbLight._m0[_2420].x) * _2488) * _2489) + _2346;
        _2412 = (((((_2469 * _2236) + _942) * cbLight._m0[_2420].y) * _2488) * _2489) + _2347;
        _2414 = (((((_2469 * _2237) + _943) * cbLight._m0[_2420].z) * _2488) * _2489) + _2348;
    }
    float _2524;
    float _2526;
    float _2528;
    if (_2138)
    {
        _2524 = _2410;
        _2526 = _2412;
        _2528 = _2414;
    }
    else
    {
        uint _2535 = _2044 + 3u;
        uint _2539 = _2044 + 11u;
        float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2535].w)) * _782) * 0.949999988079071044921875);
        float _2554 = _2553 * _2553;
        float _2555 = cbLight._m0[_2535].x + _858;
        float _2556 = cbLight._m0[_2535].y + _859;
        float _2557 = cbLight._m0[_2535].z + _860;
        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
        float _2562 = _2561 * _2555;
        float _2563 = _2561 * _2556;
        float _2564 = _2561 * _2557;
        float _2565 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2535].xyz));
        float _4552 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2569 = dot(vec3(_779, _780, _781), vec3(_2562, _2563, _2564));
        float _4563 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2573 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_2562, _2563, _2564));
        float _4574 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2577 = _2554 * _2554;
        float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
        float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
        float _2595 = 1.0 - _2554;
        float _2605 = (0.5 / (((_2212 * ((_2568 * _2595) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2595) + _2554) * _2568))) * _2568;
        float _4585 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2607 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
        float _2608 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2524 = (((((_2588 * _2234) + _940) * cbLight._m0[_2539].x) * _2607) * _2608) + _2410;
        _2526 = (((((_2588 * _2236) + _942) * cbLight._m0[_2539].y) * _2607) * _2608) + _2412;
        _2528 = (((((_2588 * _2237) + _943) * cbLight._m0[_2539].z) * _2607) * _2608) + _2414;
    }
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    if (_2042.y == 0u)
    {
        float _2683 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2684 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2683;
        float _2685 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2683;
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2683;
        uvec4 _2698 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2699 = _2698.x;
        uint _2710 = uint((float(_2698.y) * floor(float(uint(cbSceneParam._m0[85u].y * _879) / _2699))) + floor(float(uint(cbSceneParam._m0[85u].x * _878) / _2699)));
        float _2720 = (log2(_2686 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2721 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        uint _2724 = uint(isnan(14.0) ? _2721 : (isnan(_2721) ? 14.0 : min(_2721, 14.0)));
        uvec4 _2729 = texelFetch(g_lightClusterGridBuffer, int(((_2724 << 2u) + (_2710 << 6u)) >> 2u));
        uint _2730 = _2729.x;
        uint _2731 = _2698.z;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        if (((((1u << ((_2731 >> 4u) & 15u)) + 4294967295u) & _2730) == 0u) || ((_2731 & 240u) == 0u))
        {
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
            _2841 = 0.0;
        }
        else
        {
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2840;
            float _2842;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            uint _2990 = 0u;
            uint _2999;
            bool _3000;
            for (;;)
            {
                _2999 = texelFetch(g_lightClassification, int((((_2724 << 5u) + (_2710 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                _3000 = _2999 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3000)
                {
                    frontier_phi_66_pred = _2984;
                    frontier_phi_66_pred_1 = _2989;
                    frontier_phi_66_pred_2 = _2988;
                    frontier_phi_66_pred_3 = _2987;
                    frontier_phi_66_pred_4 = _2986;
                    frontier_phi_66_pred_5 = _2985;
                }
                else
                {
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    uint _3135;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2999;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    for (;;)
                    {
                        uint _3139 = uint(findLSB(_3135)) + (_2990 << 5u);
                        uint _3136 = (_3135 + 4294967295u) & _3135;
                        uint _3141 = _3139 * 48u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 3u)).x));
                        uint _3161 = (_3139 * 48u) + 4u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3180 = (_3139 * 48u) + 8u;
                        vec3 _3191 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x));
                        float _3195 = _3155.x - _2684;
                        float _3196 = _3155.y - _2685;
                        float _3197 = _3155.z - _2686;
                        float _3198 = dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197));
                        float _3201 = inversesqrt(_3198);
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3205 = dot(vec3(_897, _900, _903), vec3(_3202, _3203, _3204));
                        float _3210 = 1.0 - (_3198 * _3155.w);
                        float _4611 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3212 = sqrt(_3198) * _3174.w;
                        float _3215 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                        float _3216 = _3215 * _3215;
                        float _3219 = ((1.0 - _3216) * _3205) + _3216;
                        float _3222 = _3212 * _3212;
                        float _3226 = ((isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))) * _3211) / ((_3222 * 0.699999988079071044921875) + 1.0);
                        float _3230 = (-0.0) - _2684;
                        float _3231 = (-0.0) - _2685;
                        float _3232 = (-0.0) - _2686;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3247 = exp2(log2(1.0 / ((_3222 * 3.5) + 5.0)) * 0.25);
                        float _3248 = 1.0 - _972;
                        float _3255 = sqrt(1.0 - ((1.0 - (_3248 * _3248)) * (1.0 - (_3247 * _3247))));
                        float _3256 = _3255 * _3255;
                        float _3257 = _3256 * _3256;
                        float _3258 = _3237 + _3202;
                        float _3259 = _3238 + _3203;
                        float _3260 = _3239 + _3204;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3268 = dot(vec3(_897, _900, _903), vec3(_3237, _3238, _3239));
                        float _4627 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3271 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3272 = dot(vec3(_897, _900, _903), vec3(_3264 * _3258, _3264 * _3259, _3264 * _3260));
                        float _4638 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3275 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3279 = ((_3275 * _3275) * (_3257 + (-1.0))) + 1.0;
                        float _3280 = _3215 * _3256;
                        float _3281 = _3280 * _3280;
                        float _3284 = ((1.0 - _3281) * _3205) + _3281;
                        float _4649 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3285 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3286 = 1.0 - _3256;
                        float _3296 = (0.5 / (((_3285 * ((_3271 * _3286) + _3256)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3256) * _3271))) * _3285;
                        float _4660 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3307 = (((_3257 * 3.1415927410125732421875) * (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) / ((_3279 * _3279) * ((_3222 * 2.1991131305694580078125) + 3.141590118408203125))) * _3211;
                        _3059 = (_3226 * _3174.x) + _3132;
                        _3060 = (_3226 * _3174.y) + _3133;
                        _3061 = (_3226 * _3174.z) + _3134;
                        _3056 = (_3307 * _3191.x) + _3129;
                        _3057 = (_3307 * _3191.y) + _3130;
                        _3058 = (_3307 * _3191.z) + _3131;
                        if (_3136 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3136;
                        }
                    }
                    frontier_phi_66_pred = _3056;
                    frontier_phi_66_pred_1 = _3061;
                    frontier_phi_66_pred_2 = _3060;
                    frontier_phi_66_pred_3 = _3059;
                    frontier_phi_66_pred_4 = _3058;
                    frontier_phi_66_pred_5 = _3057;
                }
                _2832 = frontier_phi_66_pred;
                _2842 = frontier_phi_66_pred_1;
                _2840 = frontier_phi_66_pred_2;
                _2838 = frontier_phi_66_pred_3;
                _2836 = frontier_phi_66_pred_4;
                _2834 = frontier_phi_66_pred_5;
                uint _2991 = _2990 + 1u;
                if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2984 = _2832;
                    _2985 = _2834;
                    _2986 = _2836;
                    _2987 = _2838;
                    _2988 = _2840;
                    _2989 = _2842;
                    _2990 = _2991;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
            _2841 = _2842;
        }
        uvec4 _2845 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2846 = _2845.z;
        uint _2848 = (_2846 >> 8u) & 15u;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        if (((4294967295u << _2848) & _2730) == 0u)
        {
            _2952 = _2831;
            _2954 = _2833;
            _2956 = _2835;
            _2958 = _2837;
            _2960 = _2839;
            _2962 = _2841;
        }
        else
        {
            float _2977 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
            float _2978 = _2977 * _2684;
            float _2979 = _2977 * _2685;
            float _2980 = _2977 * _2686;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2848 < ((_2846 >> 12u) & 15u))
            {
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _3112 = _2831;
                float _3113 = _2833;
                float _3114 = _2835;
                float _3115 = _2837;
                float _3116 = _2839;
                float _3117 = _2841;
                uint _3118 = _2848;
                uint _3127;
                bool _3128;
                for (;;)
                {
                    _3127 = texelFetch(g_lightClassification, int((((_2724 << 5u) + (_2710 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                    _3128 = _3127 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3128)
                    {
                        frontier_phi_77_pred = _3117;
                        frontier_phi_77_pred_1 = _3116;
                        frontier_phi_77_pred_2 = _3115;
                        frontier_phi_77_pred_3 = _3114;
                        frontier_phi_77_pred_4 = _3113;
                        frontier_phi_77_pred_5 = _3112;
                    }
                    else
                    {
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3334 = _3112;
                        float _3335 = _3113;
                        float _3336 = _3114;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        float _3339 = _3117;
                        uint _3340 = _3127;
                        uint _3341;
                        vec4 _3366;
                        float _3367;
                        vec4 _3382;
                        vec3 _3394;
                        vec4 _3409;
                        vec4 _3425;
                        float _3471;
                        bool _3472;
                        for (;;)
                        {
                            uint _3351 = ((_3118 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3340));
                            _3341 = (_3340 + 4294967295u) & _3340;
                            uint _3353 = _3351 * 40u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            _3367 = _3366.w;
                            uint _3369 = (_3351 * 40u) + 4u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3351 * 40u) + 8u;
                            _3394 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x));
                            uint _3396 = (_3351 * 40u) + 16u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3412 = (_3351 * 40u) + 20u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3351 * 40u) + 24u;
                            vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3446 = (_3351 * 40u) + 28u;
                            vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3471 = fma(_2686, _3459.z, fma(_2685, _3459.y, _3459.x * _2684)) + _3459.w;
                            _3472 = !((fma(_2686, _3440.z, fma(_2685, _3440.y, _3440.x * _2684)) + _3440.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3472)
                            {
                                float _3499 = _3366.x - _2684;
                                float _3500 = _3366.y - _2685;
                                float _3501 = _3366.z - _2686;
                                float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                                float _3505 = inversesqrt(_3502);
                                float _3506 = _3505 * _3499;
                                float _3507 = _3505 * _3500;
                                float _3508 = _3505 * _3501;
                                float _3512 = 1.0 - (_3502 / (_3367 * _3367));
                                float _4671 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3517 = sqrt(_3502) * _3382.w;
                                float _3519 = 1.39999997615814208984375 / (_3517 + 1.39999997615814208984375);
                                float _3520 = _3519 * _3519;
                                float _3523 = ((1.0 - _3520) * dot(vec3(_3506, _3507, _3508), vec3(_897, _900, _903))) + _3520;
                                float _3526 = _3517 * _3517;
                                float _3530 = (fma(_2686, _3409.z, fma(_2685, _3409.y, _3409.x * _2684)) + _3409.w) / _3471;
                                float _3531 = (fma(_2686, _3425.z, fma(_2685, _3425.y, _3425.x * _2684)) + _3425.w) / _3471;
                                float _3535 = 1.0 - dot(vec2(_3530, _3531), vec2(_3530, _3531));
                                float _4687 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3537 = _3536 * (((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3513) / ((_3526 * 0.699999988079071044921875) + 1.0));
                                float _3549 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                                float _3550 = 1.0 - _972;
                                float _3557 = sqrt(1.0 - ((1.0 - (_3550 * _3550)) * (1.0 - (_3549 * _3549))));
                                float _3558 = _3557 * _3557;
                                float _3559 = _3558 * _3558;
                                float _3560 = _3506 - _2978;
                                float _3561 = _3507 - _2979;
                                float _3562 = _3508 - _2980;
                                float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                                float _3570 = dot(vec3(_897, _900, _903), vec3((-0.0) - _2978, (-0.0) - _2979, (-0.0) - _2980));
                                float _4698 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3574 = dot(vec3(_897, _900, _903), vec3(_3566 * _3560, _3566 * _3561, _3566 * _3562));
                                float _4709 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3581 = ((_3577 * _3577) * (_3559 + (-1.0))) + 1.0;
                                float _3582 = _3519 * _3558;
                                float _3583 = _3582 * _3582;
                                float _3589 = ((1.0 - _3583) * dot(vec3(_897, _900, _903), vec3(_3506, _3507, _3508))) + _3583;
                                float _4720 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3591 = 1.0 - _3558;
                                float _3601 = (0.5 / (((_3590 * ((_3573 * _3591) + _3558)) + 9.9999999392252902907785028219223e-09) + (((_3590 * _3591) + _3558) * _3573))) * _3590;
                                float _4731 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3611 = (_3536 * _3513) * (((_3559 * 3.1415927410125732421875) * (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) / ((_3581 * _3581) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3537 * _3382.y;
                                frontier_phi_83_pred_1 = _3537 * _3382.x;
                                frontier_phi_83_pred_2 = _3611 * _3394.z;
                                frontier_phi_83_pred_3 = _3611 * _3394.y;
                                frontier_phi_83_pred_4 = _3611 * _3394.x;
                                frontier_phi_83_pred_5 = _3537 * _3382.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3619 = frontier_phi_83_pred;
                            _3618 = frontier_phi_83_pred_1;
                            _3617 = frontier_phi_83_pred_2;
                            _3616 = frontier_phi_83_pred_3;
                            _3615 = frontier_phi_83_pred_4;
                            _3620 = frontier_phi_83_pred_5;
                            _3324 = _3618 + _3337;
                            _3325 = _3619 + _3338;
                            _3326 = _3620 + _3339;
                            _3321 = _3615 + _3334;
                            _3322 = _3616 + _3335;
                            _3323 = _3617 + _3336;
                            if (_3341 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3341;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3326;
                        frontier_phi_77_pred_1 = _3325;
                        frontier_phi_77_pred_2 = _3324;
                        frontier_phi_77_pred_3 = _3323;
                        frontier_phi_77_pred_4 = _3322;
                        frontier_phi_77_pred_5 = _3321;
                    }
                    _2963 = frontier_phi_77_pred;
                    _2961 = frontier_phi_77_pred_1;
                    _2959 = frontier_phi_77_pred_2;
                    _2957 = frontier_phi_77_pred_3;
                    _2955 = frontier_phi_77_pred_4;
                    _2953 = frontier_phi_77_pred_5;
                    uint _3119 = _3118 + 1u;
                    if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3112 = _2953;
                        _3113 = _2955;
                        _3114 = _2957;
                        _3115 = _2959;
                        _3116 = _2961;
                        _3117 = _2963;
                        _3118 = _3119;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2957;
                frontier_phi_58_59_ladder_1 = _2963;
                frontier_phi_58_59_ladder_2 = _2961;
                frontier_phi_58_59_ladder_3 = _2959;
                frontier_phi_58_59_ladder_4 = _2955;
                frontier_phi_58_59_ladder_5 = _2953;
            }
            else
            {
                frontier_phi_58_59_ladder = _2835;
                frontier_phi_58_59_ladder_1 = _2841;
                frontier_phi_58_59_ladder_2 = _2839;
                frontier_phi_58_59_ladder_3 = _2837;
                frontier_phi_58_59_ladder_4 = _2833;
                frontier_phi_58_59_ladder_5 = _2831;
            }
            _2952 = frontier_phi_58_59_ladder_5;
            _2954 = frontier_phi_58_59_ladder_4;
            _2956 = frontier_phi_58_59_ladder;
            _2958 = frontier_phi_58_59_ladder_3;
            _2960 = frontier_phi_58_59_ladder_2;
            _2962 = frontier_phi_58_59_ladder_1;
        }
        float _2967 = isnan(1.0) ? _956 : (isnan(_956) ? 1.0 : min(_956, 1.0));
        _2743 = (_2967 * _2958) + _2176;
        _2745 = (_2967 * _2960) + _2178;
        _2747 = (_2967 * _2962) + _2180;
        _2749 = ((_2952 * _940) * _2967) + _2524;
        _2751 = ((_2954 * _942) * _2967) + _2526;
        _2753 = ((_2956 * _943) * _2967) + _2528;
    }
    else
    {
        _2743 = _2176;
        _2745 = _2178;
        _2747 = _2180;
        _2749 = _2524;
        _2751 = _2526;
        _2753 = _2528;
    }
    float _4747 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _4758 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4769 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _2770 = ((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2743 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _956))) + ((_2749 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1795)) * cbPerFrame._m0[3u].x);
    float _2771 = ((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2745 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _956))) + ((_2751 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1795)) * cbPerFrame._m0[3u].x);
    float _2772 = ((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2747 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _956))) + ((_2753 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1795)) * cbPerFrame._m0[3u].x);
    uint _2773 = _257 + 6u;
    float _2781 = _878 / cbSceneParam._m0[86u].x;
    float _2782 = _879 / cbSceneParam._m0[86u].y;
    vec4 _2796 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2781, _2782, (log2((isnan(cbSceneParam._m0[77u].w) ? _801 : (isnan(_801) ? cbSceneParam._m0[77u].w : min(_801, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2798 = _2796.x;
    float _2799 = _2796.y;
    float _2800 = _2796.z;
    float _2801 = _2796.w;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    if (_801 > cbSceneParam._m0[78u].w)
    {
        float _2856 = isnan(_801) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _801 : min(cbSceneParam._m0[80u].w, _801));
        float _2857 = _2856 / _801;
        float _2868 = _2857 * _851;
        float _2869 = _852 * _2857;
        float _2870 = (-0.0) - _2869;
        float _2872 = _2857 * _853;
        float _2874 = (cbSceneParam._m0[77u].w * _2870) / _2856;
        float _2875 = _2874 + cbSceneParam._m0[79u].w;
        float _2876 = cbSceneParam._m0[79u].w - _2869;
        float _2882 = sqrt(((_2868 * _2868) + (_2869 * _2869)) + (_2872 * _2872));
        float _2885 = (1.0 - (cbSceneParam._m0[77u].w / _2856)) * _2882;
        float _2890 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2892 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3069;
        if (abs((_2870 - _2874) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3069 = ((((_2875 > 0.0) ? exp2(_2890 * _2875) : (2.0 - exp2(_2892 * _2875))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2885;
        }
        else
        {
            float _3013 = 1.0 / cbSceneParam._m0[80u].x;
            float _3014 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : max(_2875, _2876));
            float _3015 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : min(_2875, _2876));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            _3069 = ((abs(_2882 / _2870) * cbSceneParam._m0[80u].y) * ((((_3024 - _3025) * 2.0) - ((exp2(_2890 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0)))) - exp2(_2890 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))))) * _3013)) - ((exp2(_2892 * _3024) - exp2(_2892 * _3025)) * _3013))) + (_2885 * cbSceneParam._m0[80u].z);
        }
        vec4 _3071 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2781, _2782, 1.0), 0.0);
        float _3080 = exp2((_3069 * (-1.44269502162933349609375)) * (1.0 - _3071.w));
        float _3081 = log2(_3080);
        float _3097 = log2(_2801);
        _2894 = (exp2(_3097 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].x)) * _3071.x) / cbSceneParam._m0[78u].x)) + _2798;
        _2896 = (exp2(_3097 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].y)) * _3071.y) / cbSceneParam._m0[78u].y)) + _2799;
        _2898 = (exp2(_3097 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].z)) * _3071.z) / cbSceneParam._m0[78u].z)) + _2800;
        _2900 = _3080 * _2801;
    }
    else
    {
        _2894 = _2798;
        _2896 = _2799;
        _2898 = _2800;
        _2900 = _2801;
    }
    bool _3107;
    vec4 _2910;
    vec4 _2932;
    float _2934;
    float _2938;
    float _2939;
    float _2940;
    float _2941;
    bool _2951;
    for (;;)
    {
        _2910 = cbMatDynParam._m0[0u];
        float _2912 = roundEven(_2910.y);
        bool _2913 = _2912 == 3.0;
        float _2914 = log2(_2900);
        float _2921 = exp2(_2914 * cbSceneParam._m0[78u].x) * _2770;
        float _2922 = exp2(_2914 * cbSceneParam._m0[78u].y) * _2771;
        float _2923 = exp2(_2914 * cbSceneParam._m0[78u].z) * _2772;
        float _2930 = _867 + (-0.5);
        _2932 = cbMtdParam._m0[1u];
        _2934 = _2932.y * _2930;
        float _2937 = (_2912 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2938 = _2937 * (_2913 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2894)));
        _2939 = _2937 * (_2913 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2896)));
        _2940 = _2937 * (_2913 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2898)));
        _2941 = _2930 * 0.999000012874603271484375;
        _2951 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2951)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2941) < 0.5)
            {
                _3107 = true;
                break;
            }
        }
        uint _3048 = _916 + uint(_2910.w);
        if ((cbInstanceData._m0[_3048].w < 1.0) && ((cbInstanceData._m0[_3048].w + _2941) < 0.5))
        {
            _3107 = true;
            break;
        }
        if ((_2934 + 1.0) < _2932.x)
        {
            _3107 = true;
            break;
        }
        _3107 = false;
        break;
    }
    float _3312;
    if (_3107)
    {
        discard_state = true;
        _3312 = 0.0;
    }
    else
    {
        _3312 = cbInstanceData._m0[_2773].w;
    }
    SV_Target.x = _2938;
    SV_Target.y = _2939;
    SV_Target.z = _2940;
    SV_Target.w = _3312;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2773].w;
    discard_exit();
}


