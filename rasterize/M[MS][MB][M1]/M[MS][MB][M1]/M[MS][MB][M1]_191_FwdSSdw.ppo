#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1451;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _373 = _371.x;
    float _385 = dot(vec4(_373, _371.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _402 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_373 - _385) * cbMtdParam._m0[24u].y) + _385) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3801 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _410 = (_403 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _411 = (_403 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _412 = (_403 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _429 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _451 = _449.x;
    float _461 = dot(vec4(_451, _449.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _475 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_451 - _461) * cbMtdParam._m0[24u].y) + _461) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3812 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _483 = (_476 * ((_429.x * cbMtdParam._m0[13u].x) - _410)) + _410;
    float _484 = (_476 * ((_429.y * cbMtdParam._m0[13u].y) - _411)) + _411;
    float _485 = (_476 * ((_429.z * cbMtdParam._m0[13u].z) - _412)) + _412;
    vec4 _502 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _525 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _544 = _542.x;
    float _545 = _542.y;
    float _546 = _542.z;
    float _553 = ((_525.x - _544) * _403) + _544;
    float _554 = ((_525.y - _545) * _403) + _545;
    float _555 = ((_525.z - _546) * _403) + _546;
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _580 = ((_567.z - _555) * _476) + _555;
    float _583 = ((((_567.x - _553) * _476) + _553) * 2.0) + (-1.0);
    float _584 = ((((_567.y - _554) * _476) + _554) * 2.0) + (-1.0);
    float _585 = dot(vec2(_583, _584), vec2(_583, _584));
    float _3823 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _590 = sqrt(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))));
    vec4 _604 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _638 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _641 = ((isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : min(_638, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _650 = (_641 - ((((((_631 - _632) * cbMtdParam._m0[24u].z) + _632) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _641))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3844 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _658 = (_651 * (cbMtdParam._m0[17u].x - _483)) + _483;
    float _659 = (_651 * (cbMtdParam._m0[17u].y - _484)) + _484;
    float _660 = (_651 * (cbMtdParam._m0[17u].z - _485)) + _485;
    vec4 _672 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _674 = _672.x;
    float _675 = 1.0 - _674;
    float _702 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_674 - _675) * cbMtdParam._m0[24u].w) + _675) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3855 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _711 = ((((cbMtdParam._m0[10u].x - _658) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _703) + _658;
    float _712 = ((((cbMtdParam._m0[10u].y - _659) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _703) + _659;
    float _713 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _660)) * _703) + _660;
    vec4 _739 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _741 = _739.x;
    float _759 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _741) * _403) + _741;
    float _776 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _759) * _476) + _759;
    float _780 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _776) * cbMtdParam._m0[19u].z) + _776;
    float _782 = _780 - (_780 * _651);
    float _784 = _782 - (_782 * _703);
    float _789 = (((_502.z - _580) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _580;
    float _793 = ((_604.z - _789) * cbMtdParam._m0[19u].w) + _789;
    vec4 _807 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _814 = (_807.x * 2.0) + (-1.0);
    float _815 = (_807.y * 2.0) + (-1.0);
    float _816 = dot(vec2(_814, _815), vec2(_814, _815));
    float _3866 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _824 = (_651 * (_807.z - _793)) + _793;
    float _827 = ((cbMtdParam._m0[23u].y - _824) * _703) + _824;
    vec4 _846 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _852 = (_846.x * 2.0) + (-1.0);
    float _853 = (_846.y * 2.0) + (-1.0);
    float _854 = dot(vec2(_852, _853), vec2(_852, _853));
    float _3877 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _868 = (_583 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_502.x * 2.0) + (-1.0)))) + (((_604.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _869 = (_584 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_502.y * 2.0) + (-1.0)))) + (((_604.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _881 = (((_814 - _868) + (cbMtdParam._m0[21u].x * _868)) * _651) + _868;
    float _882 = (((_815 - _869) + (cbMtdParam._m0[21u].x * _869)) * _651) + _869;
    float _883 = (_651 * (sqrt(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) - _590)) + _590;
    float _894 = (((_852 - _881) + (_881 * cbMtdParam._m0[22u].z)) * _703) + _881;
    float _895 = (((_853 - _882) + (_882 * cbMtdParam._m0[22u].z)) * _703) + _882;
    float _896 = ((sqrt(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) - _883) * _703) + _883;
    float _898 = cbMtdParam._m0[22u].x + _604.w;
    float _901 = fma(_896, _252 * NORMAL.x, fma(_895, _259 * TANGENT.x, (_245 * _237) * _894));
    float _904 = fma(_896, _252 * NORMAL.y, fma(_895, _259 * TANGENT.y, (_245 * _238) * _894));
    float _907 = fma(_896, _252 * NORMAL.z, fma(_895, _259 * TANGENT.z, (_245 * _239) * _894));
    float _911 = inversesqrt(dot(vec3(_901, _904, _907), vec3(_901, _904, _907)));
    float _912 = _911 * _901;
    float _913 = _911 * _904;
    float _914 = _911 * _907;
    float _3888 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _915 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _3910 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3921 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _3932 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _3943 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _920 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _934 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _984 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _974);
    float _985 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _974);
    float _986 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _974);
    float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
    float _991 = _984 * _990;
    float _992 = _985 * _990;
    float _993 = _986 * _990;
    float _999 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1000 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1018 = fma(_914, cbSceneParam._m0[5u].z, fma(_913, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _912));
    float _1021 = fma(_914, cbSceneParam._m0[6u].z, fma(_913, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _912));
    float _1024 = fma(_914, cbSceneParam._m0[7u].z, fma(_913, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _912));
    uint _1038 = (_265 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1044 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_1038].x;
    float _1045 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_1038].y;
    float _1046 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * cbInstanceData._m0[_1038].z;
    float _3954 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1050 = 1.0 - _920;
    float _1051 = _1047 * _1050;
    float _1052 = _1048 * _1050;
    float _1053 = _1049 * _1050;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _920;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _920;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _920;
    float _1061 = _1058 + 0.039999999105930328369140625;
    float _1063 = _1059 + 0.039999999105930328369140625;
    float _1064 = _1060 + 0.039999999105930328369140625;
    vec4 _1073 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _999, cbSceneParam._m0[86u].y * _1000));
    float _1077 = ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * TEXCOORD_5.w) * _1073.x;
    float _1078 = dot(vec3(_912, _913, _914), vec3(_991, _992, _993));
    float _1081 = _1078 * 2.0;
    float _1085 = (_1081 * _912) - _991;
    float _1086 = (_1081 * _913) - _992;
    float _1087 = (_1081 * _914) - _993;
    float _1091 = abs(dot(vec3(_991, _992, _993), vec3(_912, _913, _914)));
    float _3987 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1093 = sqrt(_915);
    float _1106 = exp2((_1093 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1093 * 3.0));
    float _1112 = (1.0 - _1106) * ((_1093 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1113 = _1106 * _1093;
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1450;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1175 = fma(_1149, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141));
        float _1179 = fma(_1149, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141));
        float _1183 = fma(_1149, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141));
        float _1208 = _1141 + _912;
        float _1209 = _1145 + _913;
        float _1210 = _1149 + _914;
        float _1220 = fma(_1210, cbModelParam._m0[26u].z, fma(_1209, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1208)) - _1175;
        float _1221 = fma(_1210, cbModelParam._m0[27u].z, fma(_1209, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1208)) - _1179;
        float _1222 = fma(_1210, cbModelParam._m0[28u].z, fma(_1209, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1208)) - _1183;
        float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
        float _1239 = ((_1226 * _1220) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1175 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1226 * _1221) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1179 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1226 * _1222) / cbModelParam._m0[34u].z) + ((((((_1183 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1278 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1244.x + (-0.5));
        float _1280 = _1278 * (_1244.y + (-0.5));
        float _1281 = _1278 * (_1244.z + (-0.5));
        float _1288 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1251.x + (-0.5));
        float _1290 = _1288 * (_1251.y + (-0.5));
        float _1291 = _1288 * (_1251.z + (-0.5));
        float _1298 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1258.x + (-0.5));
        float _1300 = _1298 * (_1258.y + (-0.5));
        float _1301 = _1298 * (_1258.z + (-0.5));
        float _1308 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1265.x + (-0.5));
        float _1310 = _1308 * (_1265.y + (-0.5));
        float _1311 = _1308 * (_1265.z + (-0.5));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = _1279 * 0.5;
        float _1316 = _1289 * 0.5;
        float _1317 = _1299 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1332 = (dot(vec3(_912, _913, _914), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1342 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4035 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1344 + 1.0))) + _1349) * _1312;
        float _1359 = _1280 * 0.5;
        float _1360 = _1290 * 0.5;
        float _1361 = _1300 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_912, _913, _914), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4068 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1386 + 1.0))) + _1391) * _1313;
        float _1401 = _1281 * 0.5;
        float _1402 = _1291 * 0.5;
        float _1403 = _1301 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_912, _913, _914), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4101 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1428 + 1.0))) + _1433) * _1314;
        _1450 = _1281;
        _1452 = _1280;
        _1453 = _1279;
        _1454 = _1291;
        _1455 = _1290;
        _1456 = _1289;
        _1457 = _1301;
        _1458 = _1300;
        _1459 = _1299;
        _1460 = _1314;
        _1461 = _1313;
        _1462 = _1312;
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
    }
    else
    {
        _1450 = _1451;
        _1452 = _1451;
        _1453 = _1451;
        _1454 = _1451;
        _1455 = _1451;
        _1456 = _1451;
        _1457 = _1451;
        _1458 = _1451;
        _1459 = _1451;
        _1460 = _1451;
        _1461 = _1451;
        _1462 = _1451;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1489 = fma(_1149, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141));
        float _1493 = fma(_1149, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141));
        float _1497 = fma(_1149, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141));
        float _1520 = _1141 + _912;
        float _1521 = _1145 + _913;
        float _1522 = _1149 + _914;
        float _1532 = fma(_1522, cbModelParam._m0[30u].z, fma(_1521, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1520)) - _1489;
        float _1533 = fma(_1522, cbModelParam._m0[31u].z, fma(_1521, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1520)) - _1493;
        float _1534 = fma(_1522, cbModelParam._m0[32u].z, fma(_1521, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1520)) - _1497;
        float _1538 = inversesqrt(dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534)));
        float _1551 = ((_1538 * _1532) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1489 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1552 = ((_1538 * _1533) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1493 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1538 * _1534) / cbModelParam._m0[35u].z) + ((((((_1497 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        float _1588 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1555.x + (-0.5));
        float _1590 = _1588 * (_1555.y + (-0.5));
        float _1591 = _1588 * (_1555.z + (-0.5));
        float _1598 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1562.x + (-0.5));
        float _1600 = _1598 * (_1562.y + (-0.5));
        float _1601 = _1598 * (_1562.z + (-0.5));
        float _1608 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1569.x + (-0.5));
        float _1610 = _1608 * (_1569.y + (-0.5));
        float _1611 = _1608 * (_1569.z + (-0.5));
        float _1618 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1576.x + (-0.5));
        float _1620 = _1618 * (_1576.y + (-0.5));
        float _1621 = _1618 * (_1576.z + (-0.5));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = _1589 * 0.5;
        float _1626 = _1599 * 0.5;
        float _1627 = _1609 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_912, _913, _914), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4164 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1652 + 1.0))) + _1657) * _1622;
        float _1667 = _1590 * 0.5;
        float _1668 = _1600 * 0.5;
        float _1669 = _1610 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_912, _913, _914), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4197 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1694 + 1.0))) + _1699) * _1623;
        float _1709 = _1591 * 0.5;
        float _1710 = _1601 * 0.5;
        float _1711 = _1611 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1725 = (dot(vec3(_912, _913, _914), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4230 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1736 + 1.0))) + _1741) * _1624;
        _1758 = _1591;
        _1759 = _1590;
        _1760 = _1589;
        _1761 = _1601;
        _1762 = _1600;
        _1763 = _1599;
        _1764 = _1611;
        _1765 = _1610;
        _1766 = _1609;
        _1767 = _1624;
        _1768 = _1623;
        _1769 = _1622;
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
    }
    else
    {
        _1758 = _1451;
        _1759 = _1451;
        _1760 = _1451;
        _1761 = _1451;
        _1762 = _1451;
        _1763 = _1451;
        _1764 = _1451;
        _1765 = _1451;
        _1766 = _1451;
        _1767 = _1451;
        _1768 = _1451;
        _1769 = _1451;
        _1770 = 0.0;
        _1771 = 0.0;
        _1772 = 0.0;
    }
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1463)) + _1463;
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1464)) + _1464;
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1465)) + _1465;
    float _1805 = fma(_1784, cbSceneParam._m0[89u].z, fma(_1783, cbSceneParam._m0[89u].y, _1782 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1784, cbSceneParam._m0[90u].z, fma(_1783, cbSceneParam._m0[90u].y, _1782 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1784, cbSceneParam._m0[91u].z, fma(_1783, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1782));
    float _1826 = _1085 * 0.5;
    float _1827 = _1086 * 0.5;
    float _1828 = _1087 * 0.5;
    float _1829 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1832 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1835 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1869;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1842 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1450, _1454, _1457, _1460));
        float _1846 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1452, _1455, _1458, _1461));
        float _1850 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1453, _1456, _1459, _1462));
        float _1857 = dot(vec4(cbModelParam._m0[39u]), vec4(_1826, _1827, _1828, 1.0));
        _1869 = dot(vec3(isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1857) ? 0.0 : (isnan(0.0) ? _1857 : max(0.0, _1857))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1869 = 1.0;
    }
    float _1880;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1871 = dot(vec4(cbModelParam._m0[40u]), vec4(_1826, _1827, _1828, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1871) ? 0.0 : (isnan(0.0) ? _1871 : max(0.0, _1871))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1884 = (_1880 * cbModelParam._m0[1u].x) + (_1869 * (1.0 - cbModelParam._m0[1u].x));
    float _1894 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _915);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1894 : min(cbModelParam._m0[25u].z, _1894));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1943 = fma(_1149, cbModelParam._m0[13u].z, fma(_1145, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1141)) + cbModelParam._m0[13u].w;
        float _1947 = fma(_1149, cbModelParam._m0[14u].z, fma(_1145, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1141)) + cbModelParam._m0[14u].w;
        float _1951 = fma(_1149, cbModelParam._m0[15u].z, fma(_1145, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1141)) + cbModelParam._m0[15u].w;
        float _1954 = fma(_1087, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085));
        float _1957 = fma(_1087, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085));
        float _1960 = fma(_1087, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085));
        float _1988;
        if (_1954 > 0.0)
        {
            _1988 = abs((1.0 - _1943) / _1954);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1943 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1988 = frontier_phi_14_12_ladder;
        }
        float _2212;
        if (_1957 > 0.0)
        {
            _2212 = abs((1.0 - _1947) / _1957);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1947 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2212 = frontier_phi_23_19_ladder;
        }
        float _2469;
        if (_1960 > 0.0)
        {
            _2469 = abs((1.0 - _1951) / _1960);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1951 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2469 = frontier_phi_35_30_ladder;
        }
        float _2471 = isnan(_2212) ? _1988 : (isnan(_1988) ? _2212 : min(_1988, _2212));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1954) + _1943;
        float _2477 = (_2472 * _1957) + _1947;
        float _2478 = (_2472 * _1960) + _1951;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2479;
        float _2483 = _2479 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 > _2483) || ((_2477 < _2481) || ((_2476 < _2481) || (_2476 > _2483))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2606 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2478, cbModelParam._m0[9u].z, fma(_2477, cbModelParam._m0[9u].y, _2476 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2478, cbModelParam._m0[10u].z, fma(_2477, cbModelParam._m0[10u].y, _2476 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2478, cbModelParam._m0[11u].z, fma(_2477, cbModelParam._m0[11u].y, _2476 * cbModelParam._m0[11u].x))), _1895);
            frontier_phi_13_35_ladder = _2606.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2606.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2606.x * cbModelParam._m0[1u].y;
        }
        _1976 = frontier_phi_13_35_ladder_2;
        _1978 = frontier_phi_13_35_ladder_1;
        _1980 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1085, _1086, _1087), _1895);
        _1976 = _1964.x * cbModelParam._m0[1u].y;
        _1978 = _1964.y * cbModelParam._m0[1u].y;
        _1980 = _1964.z * cbModelParam._m0[1u].y;
    }
    float _1984 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _915);
    float _1985 = isnan(_1984) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1984 : min(cbModelParam._m0[25u].w, _1984));
    float _2075;
    float _2077;
    float _2079;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2039 = fma(_1149, cbModelParam._m0[21u].z, fma(_1145, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1141)) + cbModelParam._m0[21u].w;
        float _2043 = fma(_1149, cbModelParam._m0[22u].z, fma(_1145, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1141)) + cbModelParam._m0[22u].w;
        float _2047 = fma(_1149, cbModelParam._m0[23u].z, fma(_1145, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1141)) + cbModelParam._m0[23u].w;
        float _2050 = fma(_1087, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085));
        float _2053 = fma(_1087, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085));
        float _2056 = fma(_1087, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085));
        float _2217;
        if (_2050 > 0.0)
        {
            _2217 = abs((1.0 - _2039) / _2050);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2039 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2217 = frontier_phi_25_21_ladder;
        }
        float _2496;
        if (_2053 > 0.0)
        {
            _2496 = abs((1.0 - _2043) / _2053);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2043 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2496 = frontier_phi_37_32_ladder;
        }
        float _2709;
        if (_2056 > 0.0)
        {
            _2709 = abs((1.0 - _2047) / _2056);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2047 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2709 = frontier_phi_46_43_ladder;
        }
        float _2711 = isnan(_2496) ? _2217 : (isnan(_2217) ? _2496 : min(_2217, _2496));
        float _2712 = isnan(_2709) ? _2711 : (isnan(_2711) ? _2709 : min(_2711, _2709));
        float _2716 = (_2712 * _2050) + _2039;
        float _2717 = (_2712 * _2053) + _2043;
        float _2718 = (_2712 * _2056) + _2047;
        float _2719 = _2712 * 9.9999997473787516355514526367188e-05;
        float _2720 = (-1.0) - _2719;
        float _2722 = _2719 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2718 > _2722) || ((_2718 < _2720) || ((_2717 > _2722) || ((_2717 < _2720) || ((_2716 < _2720) || (_2716 > _2722))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2718, cbModelParam._m0[17u].z, fma(_2717, cbModelParam._m0[17u].y, _2716 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2718, cbModelParam._m0[18u].z, fma(_2717, cbModelParam._m0[18u].y, _2716 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2718, cbModelParam._m0[19u].z, fma(_2717, cbModelParam._m0[19u].y, _2716 * cbModelParam._m0[19u].x))), _1985);
            frontier_phi_22_46_ladder = _2917.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2917.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2917.x * cbModelParam._m0[1u].z;
        }
        _2075 = frontier_phi_22_46_ladder_2;
        _2077 = frontier_phi_22_46_ladder_1;
        _2079 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2059 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1085, _1086, _1087), _1985);
        _2075 = _2059.x * cbModelParam._m0[1u].z;
        _2077 = _2059.y * cbModelParam._m0[1u].z;
        _2079 = _2059.z * cbModelParam._m0[1u].z;
    }
    float _2092 = (((_1112 * _1061) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2075 - _1976)) + _1976);
    float _2094 = (((_1112 * _1063) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2077 - _1978)) + _1978);
    float _2096 = (((_1112 * _1064) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2079 - _1980)) + _1980);
    float _2099 = fma(_2096, cbSceneParam._m0[89u].z, fma(_2094, cbSceneParam._m0[89u].y, _2092 * cbSceneParam._m0[89u].x));
    float _2102 = fma(_2096, cbSceneParam._m0[90u].z, fma(_2094, cbSceneParam._m0[90u].y, _2092 * cbSceneParam._m0[90u].x));
    float _2105 = fma(_2096, cbSceneParam._m0[91u].z, fma(_2094, cbSceneParam._m0[91u].y, _2092 * cbSceneParam._m0[91u].x));
    vec4 _2113 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_999, _1000));
    float _2115 = _2113.w;
    float _2127 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2115);
    float _2128 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2115);
    float _2129 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2115);
    uvec4 _2133 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2135 = _2133.x * 14u;
    uint _2136 = _2135 + 13u;
    float _2143 = _1077 + (-1.0);
    float _2148 = (cbLight._m0[_2136].x * _2143) + 1.0;
    float _2149 = (cbLight._m0[_2136].y * _2143) + 1.0;
    float _2150 = (cbLight._m0[_2136].z * _2143) + 1.0;
    float _2151 = (cbLight._m0[_2136].w * _2143) + 1.0;
    uint _2152 = _2135 + 5u;
    float _2158 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
    uint _2162 = _2135 + 4u;
    float _2171 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
    uint _2175 = _2135 | 1u;
    float _2186 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_912, _913, _914));
    float _2189 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_912, _913, _914));
    float _4366 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _4377 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2194 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.3183098733425140380859375;
    float _2196 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.3183098733425140380859375;
    float _2203 = ((cbLight._m0[_2152].x * _2158) * _2196) + (((cbLight._m0[_2162].x * _2127) * _2171) * _2194);
    float _2204 = ((_2158 * cbLight._m0[_2152].y) * _2196) + (((cbLight._m0[_2162].y * _2128) * _2171) * _2194);
    float _2205 = ((_2158 * cbLight._m0[_2152].z) * _2196) + (((cbLight._m0[_2162].z * _2129) * _2171) * _2194);
    uvec4 _2209 = floatBitsToUint(cbLight._m0[_2135 + 12u]);
    bool _2211 = _2209.x == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2211)
    {
        _2222 = _2203;
        _2224 = _2204;
        _2226 = _2205;
    }
    else
    {
        uint _2230 = _2135 + 6u;
        float _2246 = (dot(vec3(cbLight._m0[_2135 + 2u].xyz), vec3(_912, _913, _914)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4388 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2249 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2222 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _2203;
        _2224 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _2204;
        _2226 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _2205;
    }
    bool _2229 = _2209.y == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2229)
    {
        _2267 = _2222;
        _2269 = _2224;
        _2271 = _2226;
    }
    else
    {
        uint _2440 = _2135 + 7u;
        float _2456 = (dot(vec3(cbLight._m0[_2135 + 3u].xyz), vec3(_912, _913, _914)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4404 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2459 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2267 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2222;
        _2269 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2224;
        _2271 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2226;
    }
    uint _2274 = _2135 + 8u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _915) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_2135].x + _991;
    float _2290 = cbLight._m0[_2135].y + _992;
    float _2291 = cbLight._m0[_2135].z + _993;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_912, _913, _914), vec3(cbLight._m0[_2135].xyz));
    float _4420 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _4431 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2303 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2304 = dot(vec3(_912, _913, _914), vec3(_2296, _2297, _2298));
    float _4442 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2296, _2297, _2298));
    float _4453 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2288 * _2288;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0);
    float _2325 = 0.959999978542327880859375 - _1058;
    float _2327 = 0.959999978542327880859375 - _1059;
    float _2328 = 0.959999978542327880859375 - _1060;
    float _2335 = 1.0 - _2288;
    float _2346 = (0.5 / (((_2303 * ((_2302 * _2335) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2335) + _2288) * _2302))) * _2302;
    float _4464 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2348 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    uint _2362 = _2135 + 9u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _915) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2175].x + _991;
    float _2376 = cbLight._m0[_2175].y + _992;
    float _2377 = cbLight._m0[_2175].z + _993;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_912, _913, _914), vec3(cbLight._m0[_2175].xyz));
    float _4475 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2389 = dot(vec3(_912, _913, _914), vec3(_2382, _2383, _2384));
    float _4486 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2393 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2382, _2383, _2384));
    float _4497 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2397 = _2374 * _2374;
    float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
    float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0);
    float _2415 = 1.0 - _2374;
    float _2425 = (0.5 / (((_2303 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2415) + _2374) * _2388))) * _2388;
    float _4508 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
    float _2437 = (((((_2408 * _2325) + _1061) * cbLight._m0[_2362].x) * _2427) * _2158) + ((((cbLight._m0[_2274].x * _2127) * ((_2324 * _2325) + _1061)) * _2348) * _2171);
    float _2438 = (((((_2408 * _2327) + _1063) * cbLight._m0[_2362].y) * _2427) * _2158) + ((((cbLight._m0[_2274].y * _2128) * ((_2324 * _2327) + _1063)) * _2348) * _2171);
    float _2439 = (((((_2408 * _2328) + _1064) * cbLight._m0[_2362].z) * _2427) * _2158) + ((((cbLight._m0[_2274].z * _2129) * ((_2324 * _2328) + _1064)) * _2348) * _2171);
    float _2501;
    float _2503;
    float _2505;
    if (_2211)
    {
        _2501 = _2437;
        _2503 = _2438;
        _2505 = _2439;
    }
    else
    {
        uint _2507 = _2135 + 2u;
        uint _2511 = _2135 + 10u;
        float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _915) * 0.949999988079071044921875);
        float _2526 = _2525 * _2525;
        float _2527 = cbLight._m0[_2507].x + _991;
        float _2528 = cbLight._m0[_2507].y + _992;
        float _2529 = cbLight._m0[_2507].z + _993;
        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
        float _2534 = _2533 * _2527;
        float _2535 = _2533 * _2528;
        float _2536 = _2533 * _2529;
        float _2537 = dot(vec3(_912, _913, _914), vec3(cbLight._m0[_2507].xyz));
        float _4519 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2541 = dot(vec3(_912, _913, _914), vec3(_2534, _2535, _2536));
        float _4530 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2545 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2534, _2535, _2536));
        float _4541 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _2526 * _2526;
        float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
        float _2560 = exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0);
        float _2567 = 1.0 - _2526;
        float _2577 = (0.5 / (((_2303 * ((_2540 * _2567) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2567) + _2526) * _2540))) * _2540;
        float _4552 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2579 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
        float _2580 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2501 = (((((_2560 * _2325) + _1061) * cbLight._m0[_2511].x) * _2579) * _2580) + _2437;
        _2503 = (((((_2560 * _2327) + _1063) * cbLight._m0[_2511].y) * _2579) * _2580) + _2438;
        _2505 = (((((_2560 * _2328) + _1064) * cbLight._m0[_2511].z) * _2579) * _2580) + _2439;
    }
    float _2615;
    float _2617;
    float _2619;
    if (_2229)
    {
        _2615 = _2501;
        _2617 = _2503;
        _2619 = _2505;
    }
    else
    {
        uint _2626 = _2135 + 3u;
        uint _2630 = _2135 + 11u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _915) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _991;
        float _2647 = cbLight._m0[_2626].y + _992;
        float _2648 = cbLight._m0[_2626].z + _993;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_912, _913, _914), vec3(cbLight._m0[_2626].xyz));
        float _4568 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2660 = dot(vec3(_912, _913, _914), vec3(_2653, _2654, _2655));
        float _4579 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4590 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
        float _2686 = 1.0 - _2645;
        float _2696 = (0.5 / (((_2303 * ((_2659 * _2686) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2686) + _2645) * _2659))) * _2659;
        float _4601 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2615 = (((((_2679 * _2325) + _1061) * cbLight._m0[_2630].x) * _2698) * _2699) + _2501;
        _2617 = (((((_2679 * _2327) + _1063) * cbLight._m0[_2630].y) * _2698) * _2699) + _2503;
        _2619 = (((((_2679 * _2328) + _1064) * cbLight._m0[_2630].z) * _2698) * _2699) + _2505;
    }
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_2133.y == 0u)
    {
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2775 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2774;
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2774;
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2774;
        uvec4 _2789 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2790 = _2789.x;
        uint _2801 = uint((float(_2789.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1000) / _2790))) + floor(float(uint(cbSceneParam._m0[85u].x * _999) / _2790)));
        float _2811 = (log2(_2777 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2812 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        uint _2815 = uint(isnan(14.0) ? _2812 : (isnan(_2812) ? 14.0 : min(_2812, 14.0)));
        uvec4 _2820 = texelFetch(g_lightClusterGridBuffer, int(((_2815 << 2u) + (_2801 << 6u)) >> 2u));
        uint _2821 = _2820.x;
        uint _2822 = _2789.z;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((((1u << ((_2822 >> 4u) & 15u)) + 4294967295u) & _2821) == 0u) || ((_2822 & 240u) == 0u))
        {
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
        }
        else
        {
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            uint _3073 = 0u;
            uint _3082;
            bool _3083;
            for (;;)
            {
                _3082 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3073 << 2u)) >> 2u)).x;
                _3083 = _3082 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3083)
                {
                    frontier_phi_61_pred = _3067;
                    frontier_phi_61_pred_1 = _3072;
                    frontier_phi_61_pred_2 = _3071;
                    frontier_phi_61_pred_3 = _3070;
                    frontier_phi_61_pred_4 = _3069;
                    frontier_phi_61_pred_5 = _3068;
                }
                else
                {
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    uint _3197;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3070;
                    _3195 = _3071;
                    _3196 = _3072;
                    _3197 = _3082;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    for (;;)
                    {
                        uint _3201 = uint(findLSB(_3197)) + (_3073 << 5u);
                        uint _3198 = (_3197 + 4294967295u) & _3197;
                        uint _3203 = _3201 * 48u;
                        vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 3u)).x));
                        uint _3223 = (_3201 * 48u) + 4u;
                        vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 3u)).x));
                        uint _3242 = (_3201 * 48u) + 8u;
                        vec3 _3253 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x));
                        float _3257 = _3217.x - _2775;
                        float _3258 = _3217.y - _2776;
                        float _3259 = _3217.z - _2777;
                        float _3260 = dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259));
                        float _3263 = inversesqrt(_3260);
                        float _3264 = _3263 * _3257;
                        float _3265 = _3263 * _3258;
                        float _3266 = _3263 * _3259;
                        float _3267 = dot(vec3(_1018, _1021, _1024), vec3(_3264, _3265, _3266));
                        float _3272 = 1.0 - (_3260 * _3217.w);
                        float _4627 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3273 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3274 = sqrt(_3260) * _3236.w;
                        float _3277 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                        float _3278 = _3277 * _3277;
                        float _3281 = ((1.0 - _3278) * _3267) + _3278;
                        float _3284 = _3274 * _3274;
                        float _3288 = ((isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))) * _3273) / ((_3284 * 0.699999988079071044921875) + 1.0);
                        float _3292 = (-0.0) - _2775;
                        float _3293 = (-0.0) - _2776;
                        float _3294 = (-0.0) - _2777;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3309 = exp2(log2(1.0 / ((_3284 * 3.5) + 5.0)) * 0.25);
                        float _3310 = 1.0 - _1093;
                        float _3317 = sqrt(1.0 - ((1.0 - (_3310 * _3310)) * (1.0 - (_3309 * _3309))));
                        float _3318 = _3317 * _3317;
                        float _3319 = _3318 * _3318;
                        float _3320 = _3299 + _3264;
                        float _3321 = _3300 + _3265;
                        float _3322 = _3301 + _3266;
                        float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                        float _3330 = dot(vec3(_1018, _1021, _1024), vec3(_3299, _3300, _3301));
                        float _4643 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3333 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3334 = dot(vec3(_1018, _1021, _1024), vec3(_3326 * _3320, _3326 * _3321, _3326 * _3322));
                        float _4654 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3337 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3341 = ((_3337 * _3337) * (_3319 + (-1.0))) + 1.0;
                        float _3342 = _3277 * _3318;
                        float _3343 = _3342 * _3342;
                        float _3346 = ((1.0 - _3343) * _3267) + _3343;
                        float _4665 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3347 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3348 = 1.0 - _3318;
                        float _3358 = (0.5 / (((_3347 * ((_3333 * _3348) + _3318)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3318) * _3333))) * _3347;
                        float _4676 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3369 = (((_3319 * 3.1415927410125732421875) * (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) / ((_3341 * _3341) * ((_3284 * 2.1991131305694580078125) + 3.141590118408203125))) * _3273;
                        _3126 = (_3288 * _3236.x) + _3194;
                        _3127 = (_3288 * _3236.y) + _3195;
                        _3128 = (_3288 * _3236.z) + _3196;
                        _3123 = (_3369 * _3253.x) + _3191;
                        _3124 = (_3369 * _3253.y) + _3192;
                        _3125 = (_3369 * _3253.z) + _3193;
                        if (_3198 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3126;
                            _3195 = _3127;
                            _3196 = _3128;
                            _3197 = _3198;
                        }
                    }
                    frontier_phi_61_pred = _3123;
                    frontier_phi_61_pred_1 = _3128;
                    frontier_phi_61_pred_2 = _3127;
                    frontier_phi_61_pred_3 = _3126;
                    frontier_phi_61_pred_4 = _3125;
                    frontier_phi_61_pred_5 = _3124;
                }
                _2923 = frontier_phi_61_pred;
                _2933 = frontier_phi_61_pred_1;
                _2931 = frontier_phi_61_pred_2;
                _2929 = frontier_phi_61_pred_3;
                _2927 = frontier_phi_61_pred_4;
                _2925 = frontier_phi_61_pred_5;
                uint _3074 = _3073 + 1u;
                if (_3074 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3067 = _2923;
                    _3068 = _2925;
                    _3069 = _2927;
                    _3070 = _2929;
                    _3071 = _2931;
                    _3072 = _2933;
                    _3073 = _3074;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
        }
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.z;
        uint _2939 = (_2937 >> 8u) & 15u;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        if (((4294967295u << _2939) & _2821) == 0u)
        {
            _3035 = _2922;
            _3037 = _2924;
            _3039 = _2926;
            _3041 = _2928;
            _3043 = _2930;
            _3045 = _2932;
        }
        else
        {
            float _3060 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
            float _3061 = _3060 * _2775;
            float _3062 = _3060 * _2776;
            float _3063 = _3060 * _2777;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2939 < ((_2937 >> 12u) & 15u))
            {
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3174 = _2922;
                float _3175 = _2924;
                float _3176 = _2926;
                float _3177 = _2928;
                float _3178 = _2930;
                float _3179 = _2932;
                uint _3180 = _2939;
                uint _3189;
                bool _3190;
                for (;;)
                {
                    _3189 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3180 << 2u)) >> 2u)).x;
                    _3190 = _3189 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3190)
                    {
                        frontier_phi_67_pred = _3177;
                        frontier_phi_67_pred_1 = _3178;
                        frontier_phi_67_pred_2 = _3179;
                        frontier_phi_67_pred_3 = _3176;
                        frontier_phi_67_pred_4 = _3175;
                        frontier_phi_67_pred_5 = _3174;
                    }
                    else
                    {
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3387 = _3174;
                        float _3388 = _3175;
                        float _3389 = _3176;
                        float _3390 = _3177;
                        float _3391 = _3178;
                        float _3392 = _3179;
                        uint _3393 = _3189;
                        uint _3394;
                        vec4 _3419;
                        float _3420;
                        vec4 _3435;
                        vec3 _3447;
                        vec4 _3462;
                        vec4 _3477;
                        float _3523;
                        bool _3524;
                        for (;;)
                        {
                            uint _3404 = ((_3180 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3393));
                            _3394 = (_3393 + 4294967295u) & _3393;
                            uint _3406 = _3404 * 40u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            _3420 = _3419.w;
                            uint _3422 = (_3404 * 40u) + 4u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3404 * 40u) + 8u;
                            _3447 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x));
                            uint _3449 = (_3404 * 40u) + 16u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3464 = (_3404 * 40u) + 20u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3404 * 40u) + 24u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3498 = (_3404 * 40u) + 28u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            _3523 = fma(_2777, _3511.z, fma(_2776, _3511.y, _3511.x * _2775)) + _3511.w;
                            _3524 = !((fma(_2777, _3492.z, fma(_2776, _3492.y, _3492.x * _2775)) + _3492.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3524)
                            {
                                float _3551 = _3419.x - _2775;
                                float _3552 = _3419.y - _2776;
                                float _3553 = _3419.z - _2777;
                                float _3554 = dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553));
                                float _3557 = inversesqrt(_3554);
                                float _3558 = _3557 * _3551;
                                float _3559 = _3557 * _3552;
                                float _3560 = _3557 * _3553;
                                float _3564 = 1.0 - (_3554 / (_3420 * _3420));
                                float _4687 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3569 = sqrt(_3554) * _3435.w;
                                float _3571 = 1.39999997615814208984375 / (_3569 + 1.39999997615814208984375);
                                float _3572 = _3571 * _3571;
                                float _3575 = ((1.0 - _3572) * dot(vec3(_3558, _3559, _3560), vec3(_1018, _1021, _1024))) + _3572;
                                float _3578 = _3569 * _3569;
                                float _3582 = (fma(_2777, _3462.z, fma(_2776, _3462.y, _3462.x * _2775)) + _3462.w) / _3523;
                                float _3583 = (fma(_2777, _3477.z, fma(_2776, _3477.y, _3477.x * _2775)) + _3477.w) / _3523;
                                float _3587 = 1.0 - dot(vec2(_3582, _3583), vec2(_3582, _3583));
                                float _4703 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3589 = _3588 * (((isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0))) * _3565) / ((_3578 * 0.699999988079071044921875) + 1.0));
                                float _3601 = exp2(log2(1.0 / ((_3578 * 3.5) + 5.0)) * 0.25);
                                float _3602 = 1.0 - _1093;
                                float _3609 = sqrt(1.0 - ((1.0 - (_3602 * _3602)) * (1.0 - (_3601 * _3601))));
                                float _3610 = _3609 * _3609;
                                float _3611 = _3610 * _3610;
                                float _3612 = _3558 - _3061;
                                float _3613 = _3559 - _3062;
                                float _3614 = _3560 - _3063;
                                float _3618 = inversesqrt(dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614)));
                                float _3622 = dot(vec3(_1018, _1021, _1024), vec3((-0.0) - _3061, (-0.0) - _3062, (-0.0) - _3063));
                                float _4714 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3626 = dot(vec3(_1018, _1021, _1024), vec3(_3618 * _3612, _3618 * _3613, _3618 * _3614));
                                float _4725 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3633 = ((_3629 * _3629) * (_3611 + (-1.0))) + 1.0;
                                float _3634 = _3571 * _3610;
                                float _3635 = _3634 * _3634;
                                float _3641 = ((1.0 - _3635) * dot(vec3(_1018, _1021, _1024), vec3(_3558, _3559, _3560))) + _3635;
                                float _4736 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3643 = 1.0 - _3610;
                                float _3653 = (0.5 / (((_3642 * ((_3625 * _3643) + _3610)) + 9.9999999392252902907785028219223e-09) + (((_3642 * _3643) + _3610) * _3625))) * _3642;
                                float _4747 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3663 = (_3588 * _3565) * (((_3611 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3633 * _3633) * ((_3578 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3663 * _3447.x;
                                frontier_phi_73_pred_1 = _3663 * _3447.y;
                                frontier_phi_73_pred_2 = _3589 * _3435.z;
                                frontier_phi_73_pred_3 = _3589 * _3435.y;
                                frontier_phi_73_pred_4 = _3589 * _3435.x;
                                frontier_phi_73_pred_5 = _3663 * _3447.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3667 = frontier_phi_73_pred;
                            _3668 = frontier_phi_73_pred_1;
                            _3672 = frontier_phi_73_pred_2;
                            _3671 = frontier_phi_73_pred_3;
                            _3670 = frontier_phi_73_pred_4;
                            _3669 = frontier_phi_73_pred_5;
                            _3377 = _3670 + _3390;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            if (_3394 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3394;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3377;
                        frontier_phi_67_pred_1 = _3378;
                        frontier_phi_67_pred_2 = _3379;
                        frontier_phi_67_pred_3 = _3376;
                        frontier_phi_67_pred_4 = _3375;
                        frontier_phi_67_pred_5 = _3374;
                    }
                    _3042 = frontier_phi_67_pred;
                    _3044 = frontier_phi_67_pred_1;
                    _3046 = frontier_phi_67_pred_2;
                    _3040 = frontier_phi_67_pred_3;
                    _3038 = frontier_phi_67_pred_4;
                    _3036 = frontier_phi_67_pred_5;
                    uint _3181 = _3180 + 1u;
                    if (_3181 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3174 = _3036;
                        _3175 = _3038;
                        _3176 = _3040;
                        _3177 = _3042;
                        _3178 = _3044;
                        _3179 = _3046;
                        _3180 = _3181;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3044;
                frontier_phi_55_56_ladder_1 = _3046;
                frontier_phi_55_56_ladder_2 = _3042;
                frontier_phi_55_56_ladder_3 = _3040;
                frontier_phi_55_56_ladder_4 = _3038;
                frontier_phi_55_56_ladder_5 = _3036;
            }
            else
            {
                frontier_phi_55_56_ladder = _2930;
                frontier_phi_55_56_ladder_1 = _2932;
                frontier_phi_55_56_ladder_2 = _2928;
                frontier_phi_55_56_ladder_3 = _2926;
                frontier_phi_55_56_ladder_4 = _2924;
                frontier_phi_55_56_ladder_5 = _2922;
            }
            _3035 = frontier_phi_55_56_ladder_5;
            _3037 = frontier_phi_55_56_ladder_4;
            _3039 = frontier_phi_55_56_ladder_3;
            _3041 = frontier_phi_55_56_ladder_2;
            _3043 = frontier_phi_55_56_ladder;
            _3045 = frontier_phi_55_56_ladder_1;
        }
        float _3050 = isnan(1.0) ? _1077 : (isnan(_1077) ? 1.0 : min(_1077, 1.0));
        _2834 = (_3050 * _3041) + _2267;
        _2836 = (_3050 * _3043) + _2269;
        _2838 = (_3050 * _3045) + _2271;
        _2840 = ((_3035 * _1061) * _3050) + _2615;
        _2842 = ((_3037 * _1063) * _3050) + _2617;
        _2844 = ((_3039 * _1064) * _3050) + _2619;
    }
    else
    {
        _2834 = _2267;
        _2836 = _2269;
        _2838 = _2271;
        _2840 = _2615;
        _2842 = _2617;
        _2844 = _2619;
    }
    float _4763 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _4774 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4785 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    uint _2864 = _265 + 6u;
    float _2872 = _999 / cbSceneParam._m0[86u].x;
    float _2873 = _1000 / cbSceneParam._m0[86u].y;
    vec4 _2887 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, (log2((isnan(cbSceneParam._m0[77u].w) ? _934 : (isnan(_934) ? cbSceneParam._m0[77u].w : min(_934, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2889 = _2887.x;
    float _2890 = _2887.y;
    float _2891 = _2887.z;
    float _2892 = _2887.w;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_934 > cbSceneParam._m0[78u].w)
    {
        float _2947 = isnan(_934) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _934 : min(cbSceneParam._m0[80u].w, _934));
        float _2948 = _2947 / _934;
        float _2959 = _2948 * _984;
        float _2960 = _985 * _2948;
        float _2961 = (-0.0) - _2960;
        float _2963 = _2948 * _986;
        float _2965 = (cbSceneParam._m0[77u].w * _2961) / _2947;
        float _2966 = _2965 + cbSceneParam._m0[79u].w;
        float _2967 = cbSceneParam._m0[79u].w - _2960;
        float _2973 = sqrt(((_2959 * _2959) + (_2960 * _2960)) + (_2963 * _2963));
        float _2976 = (1.0 - (cbSceneParam._m0[77u].w / _2947)) * _2973;
        float _2981 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2983 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3136;
        if (abs((_2961 - _2965) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3136 = ((((_2966 > 0.0) ? exp2(_2981 * _2966) : (2.0 - exp2(_2983 * _2966))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2976;
        }
        else
        {
            float _3096 = 1.0 / cbSceneParam._m0[80u].x;
            float _3097 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : max(_2966, _2967));
            float _3098 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : min(_2966, _2967));
            float _3107 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : min(_3097, 0.0));
            float _3108 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : min(_3098, 0.0));
            _3136 = ((abs(_2973 / _2961) * cbSceneParam._m0[80u].y) * ((((_3107 - _3108) * 2.0) - ((exp2(_2981 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0)))) - exp2(_2981 * (isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))))) * _3096)) - ((exp2(_2983 * _3107) - exp2(_2983 * _3108)) * _3096))) + (_2976 * cbSceneParam._m0[80u].z);
        }
        vec4 _3138 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, 1.0), 0.0);
        float _3147 = exp2((_3136 * (-1.44269502162933349609375)) * (1.0 - _3138.w));
        float _3148 = log2(_3147);
        float _3164 = log2(_2892);
        _2985 = (exp2(_3164 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].x)) * _3138.x) / cbSceneParam._m0[78u].x)) + _2889;
        _2987 = (exp2(_3164 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].y)) * _3138.y) / cbSceneParam._m0[78u].y)) + _2890;
        _2989 = (exp2(_3164 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].z)) * _3138.z) / cbSceneParam._m0[78u].z)) + _2891;
        _2991 = _3147 * _2892;
    }
    else
    {
        _2985 = _2889;
        _2987 = _2890;
        _2989 = _2891;
        _2991 = _2892;
    }
    float _3003 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3004 = _3003 == 3.0;
    float _3005 = log2(_2991);
    float _3012 = exp2(_3005 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2834 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1077))) + ((_2840 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1884)) * cbPerFrame._m0[3u].x));
    float _3013 = exp2(_3005 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2836 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1077))) + ((_2842 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1884)) * cbPerFrame._m0[3u].x));
    float _3014 = exp2(_3005 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2838 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1077))) + ((_2844 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1884)) * cbPerFrame._m0[3u].x));
    float _3023 = (_3003 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3023 * (_3004 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2985)));
    SV_Target.y = _3023 * (_3004 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2987)));
    SV_Target.z = _3023 * (_3004 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2989)));
    SV_Target.w = cbInstanceData._m0[_2864].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2864].w;
}


