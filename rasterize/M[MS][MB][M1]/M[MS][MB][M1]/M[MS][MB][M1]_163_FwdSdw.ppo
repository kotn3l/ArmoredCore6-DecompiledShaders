#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1405;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _368 = _366.x;
    float _380 = dot(vec4(_368, _366.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _397 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_368 - _380) * cbMtdParam._m0[24u].y) + _380) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4012 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _405 = (_398 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _406 = (_398 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _407 = (_398 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _492 = _490.x;
    float _493 = _490.y;
    float _494 = _490.z;
    float _503 = ((_473.z - _494) * _398) + _494;
    float _506 = ((((_473.x - _492) * _398) + _492) * 2.0) + (-1.0);
    float _507 = ((((_473.y - _493) * _398) + _493) * 2.0) + (-1.0);
    float _508 = dot(vec2(_506, _507), vec2(_506, _507));
    float _4023 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _513 = sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))));
    vec4 _533 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _545 = (_506 + ((((_446.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_533.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _546 = (_507 + ((((_446.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_533.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _549 = fma(_513, _249, fma(_546, _256, _545 * _242));
    float _552 = fma(_513, _250, fma(_546, _257, _545 * _243));
    float _555 = fma(_513, _251, fma(_546, _258, _545 * _244));
    float _559 = inversesqrt(dot(vec3(_549, _552, _555), vec3(_549, _552, _555)));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _588 = _586.x;
    float _589 = 1.0 - _588;
    float _593 = ((_588 - _589) * cbMtdParam._m0[24u].z) + _589;
    float _595 = (cbMtdParam._m0[19u].x + dot(vec4(_559 * _549, _559 * _552, _559 * _555, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_593 * cbMtdParam._m0[21u].z);
    float _4034 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _598 = (-0.0) - cbMtdParam._m0[24u].x;
    float _600 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _600 : (isnan(_600) ? 1.0 : min(_600, 1.0));
    float _608 = _596 - ((_596 * TEXCOORD_8.x) * _601);
    float _609 = _596 - ((_596 * TEXCOORD_8.y) * _601);
    float _610 = _596 - ((_596 * TEXCOORD_8.z) * _601);
    float _617 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _621 = ((isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : min(_617, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _629 = (_621 - (((_593 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _621))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4065 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _634 = ((_608 * ((_426.x * cbMtdParam._m0[18u].x) - _405)) * _630) + _405;
    float _635 = ((_609 * ((_426.y * cbMtdParam._m0[18u].y) - _406)) * _630) + _406;
    float _636 = ((_610 * ((_426.z * cbMtdParam._m0[18u].z) - _407)) * _630) + _407;
    vec4 _648 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _650 = _648.x;
    float _651 = 1.0 - _650;
    float _678 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_650 - _651) * cbMtdParam._m0[24u].w) + _651) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4076 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _687 = ((((cbMtdParam._m0[10u].x - _634) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _679) + _634;
    float _688 = ((((cbMtdParam._m0[10u].y - _635) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _679) + _635;
    float _689 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _636)) * _679) + _636;
    vec4 _715 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _717 = _715.x;
    float _735 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _717) * _398) + _717;
    float _739 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _735) * cbMtdParam._m0[19u].z) + _735;
    float _742 = _739 - ((_630 * _608) * _739);
    float _744 = _742 - (_742 * _679);
    float _749 = (((_446.z - _503) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _503;
    float _753 = ((_533.z - _749) * cbMtdParam._m0[19u].w) + _749;
    vec4 _767 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _774 = (_767.x * 2.0) + (-1.0);
    float _775 = (_767.y * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _4087 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _785 = (((_767.z - _753) * _608) * _630) + _753;
    float _788 = ((cbMtdParam._m0[23u].y - _785) * _679) + _785;
    vec4 _807 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _813 = (_807.x * 2.0) + (-1.0);
    float _814 = (_807.y * 2.0) + (-1.0);
    float _815 = dot(vec2(_813, _814), vec2(_813, _814));
    float _4098 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _835 = (((cbMtdParam._m0[21u].x * _545) + ((_774 - _545) * _608)) * _630) + _545;
    float _836 = (((cbMtdParam._m0[21u].x * _546) + ((_775 - _546) * _609)) * _630) + _546;
    float _837 = (((sqrt(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) - _513) * _610) * _630) + _513;
    float _848 = (((_813 - _835) + (_835 * cbMtdParam._m0[22u].z)) * _679) + _835;
    float _849 = (((_814 - _836) + (_836 * cbMtdParam._m0[22u].z)) * _679) + _836;
    float _850 = ((sqrt(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) - _837) * _679) + _837;
    float _852 = cbMtdParam._m0[22u].x + _533.w;
    float _855 = fma(_850, _249, fma(_849, _256, _848 * _242));
    float _858 = fma(_850, _250, fma(_849, _257, _848 * _243));
    float _861 = fma(_850, _251, fma(_849, _258, _848 * _244));
    float _865 = inversesqrt(dot(vec3(_855, _858, _861), vec3(_855, _858, _861)));
    float _866 = _865 * _855;
    float _867 = _865 * _858;
    float _868 = _865 * _861;
    float _4109 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _869 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4131 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4142 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4153 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4164 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _874 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _888 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _938 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _928);
    float _939 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _928);
    float _940 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _928);
    float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
    float _945 = _938 * _944;
    float _946 = _939 * _944;
    float _947 = _940 * _944;
    float _953 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _954 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _972 = fma(_868, cbSceneParam._m0[5u].z, fma(_867, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _866));
    float _975 = fma(_868, cbSceneParam._m0[6u].z, fma(_867, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _866));
    float _978 = fma(_868, cbSceneParam._m0[7u].z, fma(_867, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _866));
    uint _992 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _998 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * cbInstanceData._m0[_992].x;
    float _999 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * cbInstanceData._m0[_992].y;
    float _1000 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * cbInstanceData._m0[_992].z;
    float _4175 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _4186 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _1004 = 1.0 - _874;
    float _1005 = _1001 * _1004;
    float _1006 = _1002 * _1004;
    float _1007 = _1003 * _1004;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _874;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _874;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _874;
    float _1015 = _1012 + 0.039999999105930328369140625;
    float _1017 = _1013 + 0.039999999105930328369140625;
    float _1018 = _1014 + 0.039999999105930328369140625;
    vec4 _1027 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _953, cbSceneParam._m0[86u].y * _954));
    float _1031 = ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * TEXCOORD_5.w) * _1027.x;
    float _1032 = dot(vec3(_866, _867, _868), vec3(_945, _946, _947));
    float _1035 = _1032 * 2.0;
    float _1039 = (_1035 * _866) - _945;
    float _1040 = (_1035 * _867) - _946;
    float _1041 = (_1035 * _868) - _947;
    float _1045 = abs(dot(vec3(_945, _946, _947), vec3(_866, _867, _868)));
    float _4208 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1047 = sqrt(_869);
    float _1060 = exp2((_1047 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1047 * 3.0));
    float _1066 = (1.0 - _1060) * ((_1047 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1067 = _1060 * _1047;
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1404;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1129 = fma(_1103, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1095));
        float _1133 = fma(_1103, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1095));
        float _1137 = fma(_1103, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1095));
        float _1162 = _1095 + _866;
        float _1163 = _1099 + _867;
        float _1164 = _1103 + _868;
        float _1174 = fma(_1164, cbModelParam._m0[26u].z, fma(_1163, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1162)) - _1129;
        float _1175 = fma(_1164, cbModelParam._m0[27u].z, fma(_1163, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1162)) - _1133;
        float _1176 = fma(_1164, cbModelParam._m0[28u].z, fma(_1163, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1162)) - _1137;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1193 = ((_1180 * _1174) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1129 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1175) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1133 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1180 * _1176) / cbModelParam._m0[34u].z) + ((((((_1137 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        float _1232 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1198.x + (-0.5));
        float _1234 = _1232 * (_1198.y + (-0.5));
        float _1235 = _1232 * (_1198.z + (-0.5));
        float _1242 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1205.x + (-0.5));
        float _1244 = _1242 * (_1205.y + (-0.5));
        float _1245 = _1242 * (_1205.z + (-0.5));
        float _1252 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1212.x + (-0.5));
        float _1254 = _1252 * (_1212.y + (-0.5));
        float _1255 = _1252 * (_1212.z + (-0.5));
        float _1262 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1219.x + (-0.5));
        float _1264 = _1262 * (_1219.y + (-0.5));
        float _1265 = _1262 * (_1219.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1286 = (dot(vec3(_866, _867, _868), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1296 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4256 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1298 + 1.0))) + _1303) * _1266;
        float _1313 = _1234 * 0.5;
        float _1314 = _1244 * 0.5;
        float _1315 = _1254 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_866, _867, _868), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4289 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1340 + 1.0))) + _1345) * _1267;
        float _1355 = _1235 * 0.5;
        float _1356 = _1245 * 0.5;
        float _1357 = _1255 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_866, _867, _868), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4322 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1382 + 1.0))) + _1387) * _1268;
        _1404 = _1235;
        _1406 = _1234;
        _1407 = _1233;
        _1408 = _1245;
        _1409 = _1244;
        _1410 = _1243;
        _1411 = _1255;
        _1412 = _1254;
        _1413 = _1253;
        _1414 = _1268;
        _1415 = _1267;
        _1416 = _1266;
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
    }
    else
    {
        _1404 = _1405;
        _1406 = _1405;
        _1407 = _1405;
        _1408 = _1405;
        _1409 = _1405;
        _1410 = _1405;
        _1411 = _1405;
        _1412 = _1405;
        _1413 = _1405;
        _1414 = _1405;
        _1415 = _1405;
        _1416 = _1405;
        _1417 = 0.0;
        _1418 = 0.0;
        _1419 = 0.0;
    }
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1444 = fma(_1103, cbModelParam._m0[30u].z, fma(_1099, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1095));
        float _1448 = fma(_1103, cbModelParam._m0[31u].z, fma(_1099, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1095));
        float _1452 = fma(_1103, cbModelParam._m0[32u].z, fma(_1099, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1095));
        float _1475 = _1095 + _866;
        float _1476 = _1099 + _867;
        float _1477 = _1103 + _868;
        float _1487 = fma(_1477, cbModelParam._m0[30u].z, fma(_1476, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1475)) - _1444;
        float _1488 = fma(_1477, cbModelParam._m0[31u].z, fma(_1476, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1475)) - _1448;
        float _1489 = fma(_1477, cbModelParam._m0[32u].z, fma(_1476, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1475)) - _1452;
        float _1493 = inversesqrt(dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489)));
        float _1506 = ((_1493 * _1487) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1444 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1493 * _1488) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1448 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1493 * _1489) / cbModelParam._m0[35u].z) + ((((((_1452 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        float _1543 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1510.x + (-0.5));
        float _1545 = _1543 * (_1510.y + (-0.5));
        float _1546 = _1543 * (_1510.z + (-0.5));
        float _1553 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1517.x + (-0.5));
        float _1555 = _1553 * (_1517.y + (-0.5));
        float _1556 = _1553 * (_1517.z + (-0.5));
        float _1563 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1524.x + (-0.5));
        float _1565 = _1563 * (_1524.y + (-0.5));
        float _1566 = _1563 * (_1524.z + (-0.5));
        float _1573 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1531.x + (-0.5));
        float _1575 = _1573 * (_1531.y + (-0.5));
        float _1576 = _1573 * (_1531.z + (-0.5));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = _1544 * 0.5;
        float _1581 = _1554 * 0.5;
        float _1582 = _1564 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_866, _867, _868), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4385 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1607 + 1.0))) + _1612) * _1577;
        float _1622 = _1545 * 0.5;
        float _1623 = _1555 * 0.5;
        float _1624 = _1565 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_866, _867, _868), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4418 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1649 + 1.0))) + _1654) * _1578;
        float _1664 = _1546 * 0.5;
        float _1665 = _1556 * 0.5;
        float _1666 = _1566 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_866, _867, _868), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4451 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1691 + 1.0))) + _1696) * _1579;
        _1713 = _1546;
        _1714 = _1545;
        _1715 = _1544;
        _1716 = _1556;
        _1717 = _1555;
        _1718 = _1554;
        _1719 = _1566;
        _1720 = _1565;
        _1721 = _1564;
        _1722 = _1579;
        _1723 = _1578;
        _1724 = _1577;
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
    }
    else
    {
        _1713 = _1405;
        _1714 = _1405;
        _1715 = _1405;
        _1716 = _1405;
        _1717 = _1405;
        _1718 = _1405;
        _1719 = _1405;
        _1720 = _1405;
        _1721 = _1405;
        _1722 = _1405;
        _1723 = _1405;
        _1724 = _1405;
        _1725 = 0.0;
        _1726 = 0.0;
        _1727 = 0.0;
    }
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1417)) + _1417;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1418)) + _1418;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1419)) + _1419;
    float _1760 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1737));
    float _1781 = _1039 * 0.5;
    float _1782 = _1040 * 0.5;
    float _1783 = _1041 * 0.5;
    float _1784 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1787 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1790 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1824;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1797 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1404, _1408, _1411, _1414));
        float _1801 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1406, _1409, _1412, _1415));
        float _1805 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1812 = dot(vec4(cbModelParam._m0[39u]), vec4(_1781, _1782, _1783, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1835;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1826 = dot(vec4(cbModelParam._m0[40u]), vec4(_1781, _1782, _1783, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1839 = (_1835 * cbModelParam._m0[1u].x) + (_1824 * (1.0 - cbModelParam._m0[1u].x));
    float _1849 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _869);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1849 : min(cbModelParam._m0[25u].z, _1849));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1897 = fma(_1103, cbModelParam._m0[13u].z, fma(_1099, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1095)) + cbModelParam._m0[13u].w;
        float _1901 = fma(_1103, cbModelParam._m0[14u].z, fma(_1099, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1095)) + cbModelParam._m0[14u].w;
        float _1905 = fma(_1103, cbModelParam._m0[15u].z, fma(_1099, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1095)) + cbModelParam._m0[15u].w;
        float _1908 = fma(_1041, cbModelParam._m0[13u].z, fma(_1040, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039));
        float _1911 = fma(_1041, cbModelParam._m0[14u].z, fma(_1040, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039));
        float _1914 = fma(_1041, cbModelParam._m0[15u].z, fma(_1040, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039));
        float _1942;
        if (_1908 > 0.0)
        {
            _1942 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1942 = frontier_phi_14_12_ladder;
        }
        float _2113;
        if (_1911 > 0.0)
        {
            _2113 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2113 = frontier_phi_23_19_ladder;
        }
        float _2408;
        if (_1914 > 0.0)
        {
            _2408 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2408 = frontier_phi_35_30_ladder;
        }
        float _2410 = isnan(_2113) ? _1942 : (isnan(_1942) ? _2113 : min(_1942, _2113));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1908) + _1897;
        float _2416 = (_2411 * _1911) + _1901;
        float _2417 = (_2411 * _1914) + _1905;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2418;
        float _2422 = _2418 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 > _2422) || ((_2416 < _2420) || ((_2415 < _2420) || (_2415 > _2422))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2417, cbModelParam._m0[9u].z, fma(_2416, cbModelParam._m0[9u].y, _2415 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2417, cbModelParam._m0[10u].z, fma(_2416, cbModelParam._m0[10u].y, _2415 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2417, cbModelParam._m0[11u].z, fma(_2416, cbModelParam._m0[11u].y, _2415 * cbModelParam._m0[11u].x))), _1850);
            frontier_phi_13_35_ladder = _2562.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2562.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2562.x * cbModelParam._m0[1u].y;
        }
        _1930 = frontier_phi_13_35_ladder_2;
        _1932 = frontier_phi_13_35_ladder_1;
        _1934 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1039, _1040, _1041), _1850);
        _1930 = _1918.x * cbModelParam._m0[1u].y;
        _1932 = _1918.y * cbModelParam._m0[1u].y;
        _1934 = _1918.z * cbModelParam._m0[1u].y;
    }
    float _1938 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _869);
    float _1939 = isnan(_1938) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1938 : min(cbModelParam._m0[25u].w, _1938));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1992 = fma(_1103, cbModelParam._m0[21u].z, fma(_1099, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1095)) + cbModelParam._m0[21u].w;
        float _1996 = fma(_1103, cbModelParam._m0[22u].z, fma(_1099, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1095)) + cbModelParam._m0[22u].w;
        float _2000 = fma(_1103, cbModelParam._m0[23u].z, fma(_1099, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1095)) + cbModelParam._m0[23u].w;
        float _2003 = fma(_1041, cbModelParam._m0[21u].z, fma(_1040, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039));
        float _2006 = fma(_1041, cbModelParam._m0[22u].z, fma(_1040, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039));
        float _2009 = fma(_1041, cbModelParam._m0[23u].z, fma(_1040, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039));
        float _2118;
        if (_2003 > 0.0)
        {
            _2118 = abs((1.0 - _1992) / _2003);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1992 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2118 = frontier_phi_25_21_ladder;
        }
        float _2435;
        if (_2006 > 0.0)
        {
            _2435 = abs((1.0 - _1996) / _2006);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1996 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2435 = frontier_phi_37_32_ladder;
        }
        float _2773;
        if (_2009 > 0.0)
        {
            _2773 = abs((1.0 - _2000) / _2009);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2000 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2773 = frontier_phi_47_44_ladder;
        }
        float _2775 = isnan(_2435) ? _2118 : (isnan(_2118) ? _2435 : min(_2118, _2435));
        float _2776 = isnan(_2773) ? _2775 : (isnan(_2775) ? _2773 : min(_2775, _2773));
        float _2780 = (_2776 * _2003) + _1992;
        float _2781 = (_2776 * _2006) + _1996;
        float _2782 = (_2776 * _2009) + _2000;
        float _2783 = _2776 * 9.9999997473787516355514526367188e-05;
        float _2784 = (-1.0) - _2783;
        float _2786 = _2783 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2782 > _2786) || ((_2782 < _2784) || ((_2781 > _2786) || ((_2781 < _2784) || ((_2780 < _2784) || (_2780 > _2786))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2782, cbModelParam._m0[17u].z, fma(_2781, cbModelParam._m0[17u].y, _2780 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2782, cbModelParam._m0[18u].z, fma(_2781, cbModelParam._m0[18u].y, _2780 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2782, cbModelParam._m0[19u].z, fma(_2781, cbModelParam._m0[19u].y, _2780 * cbModelParam._m0[19u].x))), _1939);
            frontier_phi_22_47_ladder = _2904.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2904.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2904.x * cbModelParam._m0[1u].z;
        }
        _2028 = frontier_phi_22_47_ladder_2;
        _2030 = frontier_phi_22_47_ladder_1;
        _2032 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2012 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1039, _1040, _1041), _1939);
        _2028 = _2012.x * cbModelParam._m0[1u].z;
        _2030 = _2012.y * cbModelParam._m0[1u].z;
        _2032 = _2012.z * cbModelParam._m0[1u].z;
    }
    float _2045 = (((_1066 * _1015) + _1067) * _1031) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2047 = (((_1066 * _1017) + _1067) * _1031) * ((cbModelParam._m0[1u].w * (_2030 - _1932)) + _1932);
    float _2049 = (((_1066 * _1018) + _1067) * _1031) * ((cbModelParam._m0[1u].w * (_2032 - _1934)) + _1934);
    float _2052 = fma(_2049, cbSceneParam._m0[89u].z, fma(_2047, cbSceneParam._m0[89u].y, _2045 * cbSceneParam._m0[89u].x));
    float _2055 = fma(_2049, cbSceneParam._m0[90u].z, fma(_2047, cbSceneParam._m0[90u].y, _2045 * cbSceneParam._m0[90u].x));
    float _2058 = fma(_2049, cbSceneParam._m0[91u].z, fma(_2047, cbSceneParam._m0[91u].y, _2045 * cbSceneParam._m0[91u].x));
    float _2092 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2096 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2100 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2104 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2105 = _2092 / _2104;
    float _2106 = _2096 / _2104;
    float _2107 = _2100 / _2104;
    float _2254;
    float _2255;
    float _2256;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2134 = ((uint(_2107 > cbSceneParam._m0[59u].y) + uint(_2107 > cbSceneParam._m0[59u].x)) + uint(_2107 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2135 = _2134 + 43u;
        uint _2143 = _2134 + 44u;
        uint _2151 = _2134 + 45u;
        uint _2159 = _2134 + 46u;
        float _2170 = fma(_2104, cbSceneParam._m0[_2135].w, fma(_2100, cbSceneParam._m0[_2135].z, fma(_2096, cbSceneParam._m0[_2135].y, _2092 * cbSceneParam._m0[_2135].x)));
        float _2174 = fma(_2104, cbSceneParam._m0[_2143].w, fma(_2100, cbSceneParam._m0[_2143].z, fma(_2096, cbSceneParam._m0[_2143].y, _2092 * cbSceneParam._m0[_2143].x)));
        float _2182 = fma(_2104, cbSceneParam._m0[_2159].w, fma(_2100, cbSceneParam._m0[_2159].z, fma(_2096, cbSceneParam._m0[_2159].y, _2092 * cbSceneParam._m0[_2159].x)));
        float _2187 = cbSceneParam._m0[33u].z * _2182;
        float _2189 = cbSceneParam._m0[33u].w * _2182;
        float _2192 = fma(_2104, cbSceneParam._m0[_2151].w, fma(_2100, cbSceneParam._m0[_2151].z, fma(_2096, cbSceneParam._m0[_2151].y, _2092 * cbSceneParam._m0[_2151].x))) / _2182;
        float _2240 = (cbSceneParam._m0[33u].x - sqrt(((_2106 * _2106) + (_2105 * _2105)) + (_2107 * _2107))) * cbSceneParam._m0[33u].y;
        float _4577 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2247 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2187 + _2170) / _2182, (_2189 + _2174) / _2182), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2189 + _2170) / _2182, (_2174 - _2187) / _2182), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 - _2187) / _2182, (_2174 - _2189) / _2182), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 - _2189) / _2182, (_2187 + _2174) / _2182), _2192), 0.0)).x), vec4(0.25)));
        _2254 = 1.0 - (_2247 * cbSceneParam._m0[34u].x);
        _2255 = 1.0 - (_2247 * cbSceneParam._m0[34u].y);
        _2256 = 1.0 - (_2247 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2254 = 1.0;
        _2255 = 1.0;
        _2256 = 1.0;
    }
    float _2320;
    float _2322;
    float _2324;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2308 = fma(_2104, cbSceneParam._m0[63u].w, fma(_2100, cbSceneParam._m0[63u].z, fma(_2096, cbSceneParam._m0[63u].y, _2092 * cbSceneParam._m0[63u].x)));
        float _2309 = fma(_2104, cbSceneParam._m0[60u].w, fma(_2100, cbSceneParam._m0[60u].z, fma(_2096, cbSceneParam._m0[60u].y, _2092 * cbSceneParam._m0[60u].x))) / _2308;
        float _2310 = fma(_2104, cbSceneParam._m0[61u].w, fma(_2100, cbSceneParam._m0[61u].z, fma(_2096, cbSceneParam._m0[61u].y, _2092 * cbSceneParam._m0[61u].x))) / _2308;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2309 >= cbSceneParam._m0[64u].x) && (_2310 >= cbSceneParam._m0[64u].y)) && (_2309 <= cbSceneParam._m0[64u].z)) && (_2310 <= cbSceneParam._m0[64u].w))
        {
            float _2448 = fma(_2104, cbSceneParam._m0[62u].w, fma(_2100, cbSceneParam._m0[62u].z, fma(_2096, cbSceneParam._m0[62u].y, _2092 * cbSceneParam._m0[62u].x))) / _2308;
            float _2452 = isnan(cbSceneParam._m0[41u].w) ? _2448 : (isnan(_2448) ? cbSceneParam._m0[41u].w : max(_2448, cbSceneParam._m0[41u].w));
            float _2495 = (cbSceneParam._m0[33u].x - sqrt(((_2106 * _2106) + (_2105 * _2105)) + (_2107 * _2107))) * cbSceneParam._m0[33u].y;
            float _4593 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
            float _2502 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2309, cbSceneParam._m0[33u].w + _2310), _2452), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2309, _2310 - cbSceneParam._m0[33u].z), _2452), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2309 - cbSceneParam._m0[33u].z, _2310 - cbSceneParam._m0[33u].w), _2452), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2309 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2310), _2452), 0.0)).x), vec4(0.25)));
            float _2506 = 1.0 - (_2502 * cbSceneParam._m0[34u].x);
            float _2507 = 1.0 - (_2502 * cbSceneParam._m0[34u].y);
            float _2508 = 1.0 - (_2502 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2508) ? _2256 : (isnan(_2256) ? _2508 : min(_2256, _2508));
            frontier_phi_34_33_ladder_1 = isnan(_2507) ? _2255 : (isnan(_2255) ? _2507 : min(_2255, _2507));
            frontier_phi_34_33_ladder_2 = isnan(_2506) ? _2254 : (isnan(_2254) ? _2506 : min(_2254, _2506));
        }
        else
        {
            frontier_phi_34_33_ladder = _2256;
            frontier_phi_34_33_ladder_1 = _2255;
            frontier_phi_34_33_ladder_2 = _2254;
        }
        _2320 = frontier_phi_34_33_ladder_2;
        _2322 = frontier_phi_34_33_ladder_1;
        _2324 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2320 = _2254;
        _2322 = _2255;
        _2324 = _2256;
    }
    uvec4 _2329 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2331 = _2329.x * 14u;
    uint _2332 = _2331 + 13u;
    float _2339 = _1031 + (-1.0);
    float _2344 = (cbLight._m0[_2332].x * _2339) + 1.0;
    float _2345 = (cbLight._m0[_2332].y * _2339) + 1.0;
    float _2346 = (cbLight._m0[_2332].z * _2339) + 1.0;
    float _2347 = (cbLight._m0[_2332].w * _2339) + 1.0;
    uint _2348 = _2331 + 5u;
    float _2354 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
    uint _2358 = _2331 + 4u;
    float _2367 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
    uint _2371 = _2331 | 1u;
    float _2382 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_866, _867, _868));
    float _2385 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_866, _867, _868));
    float _4629 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _4640 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2390 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * 0.3183098733425140380859375;
    float _2392 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * 0.3183098733425140380859375;
    float _2399 = ((cbLight._m0[_2348].x * _2354) * _2392) + (((cbLight._m0[_2358].x * _2320) * _2367) * _2390);
    float _2400 = ((_2354 * cbLight._m0[_2348].y) * _2392) + (((cbLight._m0[_2358].y * _2322) * _2367) * _2390);
    float _2401 = ((_2354 * cbLight._m0[_2348].z) * _2392) + (((cbLight._m0[_2358].z * _2324) * _2367) * _2390);
    uvec4 _2405 = floatBitsToUint(cbLight._m0[_2331 + 12u]);
    bool _2407 = _2405.x == 0u;
    float _2509;
    float _2511;
    float _2513;
    if (_2407)
    {
        _2509 = _2399;
        _2511 = _2400;
        _2513 = _2401;
    }
    else
    {
        uint _2517 = _2331 + 6u;
        float _2533 = (dot(vec3(cbLight._m0[_2331 + 2u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2534 = _2533 * _2533;
        float _4651 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2535 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2536 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2509 = (((cbLight._m0[_2517].x * 0.3183098733425140380859375) * _2535) * _2536) + _2399;
        _2511 = (((cbLight._m0[_2517].y * 0.3183098733425140380859375) * _2535) * _2536) + _2400;
        _2513 = (((cbLight._m0[_2517].z * 0.3183098733425140380859375) * _2535) * _2536) + _2401;
    }
    bool _2516 = _2405.y == 0u;
    float _2571;
    float _2573;
    float _2575;
    if (_2516)
    {
        _2571 = _2509;
        _2573 = _2511;
        _2575 = _2513;
    }
    else
    {
        uint _2744 = _2331 + 7u;
        float _2760 = (dot(vec3(cbLight._m0[_2331 + 3u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2761 = _2760 * _2760;
        float _4667 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2762 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2763 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
        _2571 = (((cbLight._m0[_2744].x * 0.3183098733425140380859375) * _2762) * _2763) + _2509;
        _2573 = (((cbLight._m0[_2744].y * 0.3183098733425140380859375) * _2762) * _2763) + _2511;
        _2575 = (((cbLight._m0[_2744].z * 0.3183098733425140380859375) * _2762) * _2763) + _2513;
    }
    uint _2578 = _2331 + 8u;
    float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _869) * 0.949999988079071044921875);
    float _2592 = _2591 * _2591;
    float _2593 = cbLight._m0[_2331].x + _945;
    float _2594 = cbLight._m0[_2331].y + _946;
    float _2595 = cbLight._m0[_2331].z + _947;
    float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
    float _2600 = _2599 * _2593;
    float _2601 = _2599 * _2594;
    float _2602 = _2599 * _2595;
    float _2603 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2331].xyz));
    float _4683 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
    float _4694 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _2607 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
    float _2608 = dot(vec3(_866, _867, _868), vec3(_2600, _2601, _2602));
    float _4705 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2611 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2612 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2600, _2601, _2602));
    float _4716 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2616 = _2592 * _2592;
    float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
    float _2628 = exp2(log2(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) * 5.0);
    float _2629 = 0.959999978542327880859375 - _1012;
    float _2631 = 0.959999978542327880859375 - _1013;
    float _2632 = 0.959999978542327880859375 - _1014;
    float _2639 = 1.0 - _2592;
    float _2650 = (0.5 / (((_2607 * ((_2606 * _2639) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2607 * _2639) + _2592) * _2606))) * _2606;
    float _4727 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2652 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
    uint _2666 = _2331 + 9u;
    float _2677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _869) * 0.949999988079071044921875);
    float _2678 = _2677 * _2677;
    float _2679 = cbLight._m0[_2371].x + _945;
    float _2680 = cbLight._m0[_2371].y + _946;
    float _2681 = cbLight._m0[_2371].z + _947;
    float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
    float _2686 = _2685 * _2679;
    float _2687 = _2685 * _2680;
    float _2688 = _2685 * _2681;
    float _2689 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2371].xyz));
    float _4738 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2692 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
    float _2693 = dot(vec3(_866, _867, _868), vec3(_2686, _2687, _2688));
    float _4749 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2696 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    float _2697 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2686, _2687, _2688));
    float _4760 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2701 = _2678 * _2678;
    float _2705 = ((_2696 * _2696) * (_2701 + (-1.0))) + 1.0;
    float _2712 = exp2(log2(1.0 - (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) * 5.0);
    float _2719 = 1.0 - _2678;
    float _2729 = (0.5 / (((_2607 * ((_2692 * _2719) + _2678)) + 9.9999999392252902907785028219223e-09) + (((_2607 * _2719) + _2678) * _2692))) * _2692;
    float _4771 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2731 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2701 / ((_2705 * _2705) * 3.141590118408203125));
    float _2741 = (((((_2712 * _2629) + _1015) * cbLight._m0[_2666].x) * _2731) * _2354) + ((((cbLight._m0[_2578].x * _2320) * ((_2628 * _2629) + _1015)) * _2652) * _2367);
    float _2742 = (((((_2712 * _2631) + _1017) * cbLight._m0[_2666].y) * _2731) * _2354) + ((((cbLight._m0[_2578].y * _2322) * ((_2628 * _2631) + _1017)) * _2652) * _2367);
    float _2743 = (((((_2712 * _2632) + _1018) * cbLight._m0[_2666].z) * _2731) * _2354) + ((((cbLight._m0[_2578].z * _2324) * ((_2628 * _2632) + _1018)) * _2652) * _2367);
    float _2799;
    float _2801;
    float _2803;
    if (_2407)
    {
        _2799 = _2741;
        _2801 = _2742;
        _2803 = _2743;
    }
    else
    {
        uint _2805 = _2331 + 2u;
        uint _2809 = _2331 + 10u;
        float _2823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2805].w)) * _869) * 0.949999988079071044921875);
        float _2824 = _2823 * _2823;
        float _2825 = cbLight._m0[_2805].x + _945;
        float _2826 = cbLight._m0[_2805].y + _946;
        float _2827 = cbLight._m0[_2805].z + _947;
        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
        float _2832 = _2831 * _2825;
        float _2833 = _2831 * _2826;
        float _2834 = _2831 * _2827;
        float _2835 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2805].xyz));
        float _4782 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2838 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _2839 = dot(vec3(_866, _867, _868), vec3(_2832, _2833, _2834));
        float _4793 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _2843 = dot(vec3(cbLight._m0[_2805].xyz), vec3(_2832, _2833, _2834));
        float _4804 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2847 = _2824 * _2824;
        float _2851 = ((_2842 * _2842) * (_2847 + (-1.0))) + 1.0;
        float _2858 = exp2(log2(1.0 - (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) * 5.0);
        float _2865 = 1.0 - _2824;
        float _2875 = (0.5 / (((_2607 * ((_2838 * _2865) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2607 * _2865) + _2824) * _2838))) * _2838;
        float _4815 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2877 = (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2847 / ((_2851 * _2851) * 3.141590118408203125));
        float _2878 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2799 = (((((_2858 * _2629) + _1015) * cbLight._m0[_2809].x) * _2877) * _2878) + _2741;
        _2801 = (((((_2858 * _2631) + _1017) * cbLight._m0[_2809].y) * _2877) * _2878) + _2742;
        _2803 = (((((_2858 * _2632) + _1018) * cbLight._m0[_2809].z) * _2877) * _2878) + _2743;
    }
    float _2909;
    float _2911;
    float _2913;
    if (_2516)
    {
        _2909 = _2799;
        _2911 = _2801;
        _2913 = _2803;
    }
    else
    {
        uint _2920 = _2331 + 3u;
        uint _2924 = _2331 + 11u;
        float _2938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2920].w)) * _869) * 0.949999988079071044921875);
        float _2939 = _2938 * _2938;
        float _2940 = cbLight._m0[_2920].x + _945;
        float _2941 = cbLight._m0[_2920].y + _946;
        float _2942 = cbLight._m0[_2920].z + _947;
        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
        float _2947 = _2946 * _2940;
        float _2948 = _2946 * _2941;
        float _2949 = _2946 * _2942;
        float _2950 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2920].xyz));
        float _4831 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2953 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2954 = dot(vec3(_866, _867, _868), vec3(_2947, _2948, _2949));
        float _4842 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2957 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
        float _2958 = dot(vec3(cbLight._m0[_2920].xyz), vec3(_2947, _2948, _2949));
        float _4853 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2962 = _2939 * _2939;
        float _2966 = ((_2957 * _2957) * (_2962 + (-1.0))) + 1.0;
        float _2973 = exp2(log2(1.0 - (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) * 5.0);
        float _2980 = 1.0 - _2939;
        float _2990 = (0.5 / (((_2607 * ((_2953 * _2980) + _2939)) + 9.9999999392252902907785028219223e-09) + (((_2607 * _2980) + _2939) * _2953))) * _2953;
        float _4864 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        float _2992 = (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2962 / ((_2966 * _2966) * 3.141590118408203125));
        float _2993 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
        _2909 = (((((_2973 * _2629) + _1015) * cbLight._m0[_2924].x) * _2992) * _2993) + _2799;
        _2911 = (((((_2973 * _2631) + _1017) * cbLight._m0[_2924].y) * _2992) * _2993) + _2801;
        _2913 = (((((_2973 * _2632) + _1018) * cbLight._m0[_2924].z) * _2992) * _2993) + _2803;
    }
    float _3059;
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    float _3069;
    if (_2329.y == 0u)
    {
        uvec4 _3014 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3015 = _3014.x;
        uint _3026 = uint((float(_3014.y) * floor(float(uint(cbSceneParam._m0[85u].y * _954) / _3015))) + floor(float(uint(cbSceneParam._m0[85u].x * _953) / _3015)));
        float _3036 = (log2(_2107 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3037 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        uint _3040 = uint(isnan(14.0) ? _3037 : (isnan(_3037) ? 14.0 : min(_3037, 14.0)));
        uvec4 _3045 = texelFetch(g_lightClusterGridBuffer, int(((_3040 << 2u) + (_3026 << 6u)) >> 2u));
        uint _3046 = _3045.x;
        uint _3047 = _3014.z;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        if (((((1u << ((_3047 >> 4u) & 15u)) + 4294967295u) & _3046) == 0u) || ((_3047 & 240u) == 0u))
        {
            _3126 = 0.0;
            _3128 = 0.0;
            _3130 = 0.0;
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
        }
        else
        {
            float _3127;
            float _3129;
            float _3131;
            float _3133;
            float _3135;
            float _3137;
            float _3270 = 0.0;
            float _3271 = 0.0;
            float _3272 = 0.0;
            float _3273 = 0.0;
            float _3274 = 0.0;
            float _3275 = 0.0;
            uint _3276 = 0u;
            uint _3285;
            bool _3286;
            for (;;)
            {
                _3285 = texelFetch(g_lightClassification, int((((_3040 << 5u) + (_3026 << 9u)) + (_3276 << 2u)) >> 2u)).x;
                _3286 = _3285 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3286)
                {
                    frontier_phi_66_pred = _3275;
                    frontier_phi_66_pred_1 = _3274;
                    frontier_phi_66_pred_2 = _3273;
                    frontier_phi_66_pred_3 = _3272;
                    frontier_phi_66_pred_4 = _3271;
                    frontier_phi_66_pred_5 = _3270;
                }
                else
                {
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    uint _3400;
                    _3394 = _3270;
                    _3395 = _3271;
                    _3396 = _3272;
                    _3397 = _3273;
                    _3398 = _3274;
                    _3399 = _3275;
                    _3400 = _3285;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    for (;;)
                    {
                        uint _3404 = uint(findLSB(_3400)) + (_3276 << 5u);
                        uint _3401 = (_3400 + 4294967295u) & _3400;
                        uint _3406 = _3404 * 48u;
                        vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3406)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 3u)).x));
                        uint _3426 = (_3404 * 48u) + 4u;
                        vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3426)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 3u)).x));
                        uint _3445 = (_3404 * 48u) + 8u;
                        vec3 _3456 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3445)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 2u)).x));
                        float _3460 = _3420.x - _2105;
                        float _3461 = _3420.y - _2106;
                        float _3462 = _3420.z - _2107;
                        float _3463 = dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462));
                        float _3466 = inversesqrt(_3463);
                        float _3467 = _3466 * _3460;
                        float _3468 = _3466 * _3461;
                        float _3469 = _3466 * _3462;
                        float _3470 = dot(vec3(_972, _975, _978), vec3(_3467, _3468, _3469));
                        float _3475 = 1.0 - (_3463 * _3420.w);
                        float _4890 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3476 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                        float _3477 = sqrt(_3463) * _3439.w;
                        float _3480 = 1.39999997615814208984375 / (_3477 + 1.39999997615814208984375);
                        float _3481 = _3480 * _3480;
                        float _3484 = ((1.0 - _3481) * _3470) + _3481;
                        float _3487 = _3477 * _3477;
                        float _3491 = ((isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0))) * _3476) / ((_3487 * 0.699999988079071044921875) + 1.0);
                        float _3495 = (-0.0) - _2105;
                        float _3496 = (-0.0) - _2106;
                        float _3497 = (-0.0) - _2107;
                        float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                        float _3502 = _3501 * _3495;
                        float _3503 = _3501 * _3496;
                        float _3504 = _3501 * _3497;
                        float _3511 = exp2(log2(1.0 / ((_3487 * 3.5) + 5.0)) * 0.25);
                        float _3512 = 1.0 - _1047;
                        float _3519 = sqrt(1.0 - ((1.0 - (_3512 * _3512)) * (1.0 - (_3511 * _3511))));
                        float _3520 = _3519 * _3519;
                        float _3521 = _3520 * _3520;
                        float _3522 = _3502 + _3467;
                        float _3523 = _3503 + _3468;
                        float _3524 = _3504 + _3469;
                        float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                        float _3532 = dot(vec3(_972, _975, _978), vec3(_3502, _3503, _3504));
                        float _4906 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3535 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                        float _3536 = dot(vec3(_972, _975, _978), vec3(_3528 * _3522, _3528 * _3523, _3528 * _3524));
                        float _4917 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3539 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3543 = ((_3539 * _3539) * (_3521 + (-1.0))) + 1.0;
                        float _3544 = _3480 * _3520;
                        float _3545 = _3544 * _3544;
                        float _3548 = ((1.0 - _3545) * _3470) + _3545;
                        float _4928 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3549 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3550 = 1.0 - _3520;
                        float _3560 = (0.5 / (((_3549 * ((_3535 * _3550) + _3520)) + 9.9999999392252902907785028219223e-09) + (((_3549 * _3550) + _3520) * _3535))) * _3549;
                        float _4939 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3571 = (((_3521 * 3.1415927410125732421875) * (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0)))) / ((_3543 * _3543) * ((_3487 * 2.1991131305694580078125) + 3.141590118408203125))) * _3476;
                        _3329 = (_3491 * _3439.x) + _3397;
                        _3330 = (_3491 * _3439.y) + _3398;
                        _3331 = (_3491 * _3439.z) + _3399;
                        _3326 = (_3571 * _3456.x) + _3394;
                        _3327 = (_3571 * _3456.y) + _3395;
                        _3328 = (_3571 * _3456.z) + _3396;
                        if (_3401 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3394 = _3326;
                            _3395 = _3327;
                            _3396 = _3328;
                            _3397 = _3329;
                            _3398 = _3330;
                            _3399 = _3331;
                            _3400 = _3401;
                        }
                    }
                    frontier_phi_66_pred = _3331;
                    frontier_phi_66_pred_1 = _3330;
                    frontier_phi_66_pred_2 = _3329;
                    frontier_phi_66_pred_3 = _3328;
                    frontier_phi_66_pred_4 = _3327;
                    frontier_phi_66_pred_5 = _3326;
                }
                _3137 = frontier_phi_66_pred;
                _3135 = frontier_phi_66_pred_1;
                _3133 = frontier_phi_66_pred_2;
                _3131 = frontier_phi_66_pred_3;
                _3129 = frontier_phi_66_pred_4;
                _3127 = frontier_phi_66_pred_5;
                uint _3277 = _3276 + 1u;
                if (_3277 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3270 = _3127;
                    _3271 = _3129;
                    _3272 = _3131;
                    _3273 = _3133;
                    _3274 = _3135;
                    _3275 = _3137;
                    _3276 = _3277;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3126 = _3127;
            _3128 = _3129;
            _3130 = _3131;
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
        }
        uvec4 _3140 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3141 = _3140.z;
        uint _3143 = (_3141 >> 8u) & 15u;
        float _3238;
        float _3240;
        float _3242;
        float _3244;
        float _3246;
        float _3248;
        if (((4294967295u << _3143) & _3046) == 0u)
        {
            _3238 = _3126;
            _3240 = _3128;
            _3242 = _3130;
            _3244 = _3132;
            _3246 = _3134;
            _3248 = _3136;
        }
        else
        {
            float _3263 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
            float _3264 = _3263 * _2105;
            float _3265 = _3263 * _2106;
            float _3266 = _3263 * _2107;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3143 < ((_3141 >> 12u) & 15u))
            {
                float _3239;
                float _3241;
                float _3243;
                float _3245;
                float _3247;
                float _3249;
                float _3377 = _3126;
                float _3378 = _3128;
                float _3379 = _3130;
                float _3380 = _3132;
                float _3381 = _3134;
                float _3382 = _3136;
                uint _3383 = _3143;
                uint _3392;
                bool _3393;
                for (;;)
                {
                    _3392 = texelFetch(g_lightClassification, int((((_3040 << 5u) + (_3026 << 9u)) + (_3383 << 2u)) >> 2u)).x;
                    _3393 = _3392 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3393)
                    {
                        frontier_phi_72_pred = _3382;
                        frontier_phi_72_pred_1 = _3381;
                        frontier_phi_72_pred_2 = _3380;
                        frontier_phi_72_pred_3 = _3379;
                        frontier_phi_72_pred_4 = _3378;
                        frontier_phi_72_pred_5 = _3377;
                    }
                    else
                    {
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3589 = _3377;
                        float _3590 = _3378;
                        float _3591 = _3379;
                        float _3592 = _3380;
                        float _3593 = _3381;
                        float _3594 = _3382;
                        uint _3595 = _3392;
                        uint _3596;
                        vec4 _3621;
                        float _3622;
                        vec4 _3637;
                        vec3 _3649;
                        vec4 _3664;
                        vec4 _3679;
                        float _3725;
                        bool _3726;
                        for (;;)
                        {
                            uint _3606 = ((_3383 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3595));
                            _3596 = (_3595 + 4294967295u) & _3595;
                            uint _3608 = _3606 * 40u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            _3622 = _3621.w;
                            uint _3624 = (_3606 * 40u) + 4u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            uint _3639 = (_3606 * 40u) + 8u;
                            _3649 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x));
                            uint _3651 = (_3606 * 40u) + 16u;
                            _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            uint _3666 = (_3606 * 40u) + 20u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3681 = (_3606 * 40u) + 24u;
                            vec4 _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3700 = (_3606 * 40u) + 28u;
                            vec4 _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            _3725 = fma(_2107, _3713.z, fma(_2106, _3713.y, _3713.x * _2105)) + _3713.w;
                            _3726 = !((fma(_2107, _3694.z, fma(_2106, _3694.y, _3694.x * _2105)) + _3694.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3726)
                            {
                                float _3753 = _3621.x - _2105;
                                float _3754 = _3621.y - _2106;
                                float _3755 = _3621.z - _2107;
                                float _3756 = dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755));
                                float _3759 = inversesqrt(_3756);
                                float _3760 = _3759 * _3753;
                                float _3761 = _3759 * _3754;
                                float _3762 = _3759 * _3755;
                                float _3766 = 1.0 - (_3756 / (_3622 * _3622));
                                float _4950 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3767 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                                float _3771 = sqrt(_3756) * _3637.w;
                                float _3773 = 1.39999997615814208984375 / (_3771 + 1.39999997615814208984375);
                                float _3774 = _3773 * _3773;
                                float _3777 = ((1.0 - _3774) * dot(vec3(_3760, _3761, _3762), vec3(_972, _975, _978))) + _3774;
                                float _3780 = _3771 * _3771;
                                float _3784 = (fma(_2107, _3664.z, fma(_2106, _3664.y, _3664.x * _2105)) + _3664.w) / _3725;
                                float _3785 = (fma(_2107, _3679.z, fma(_2106, _3679.y, _3679.x * _2105)) + _3679.w) / _3725;
                                float _3789 = 1.0 - dot(vec2(_3784, _3785), vec2(_3784, _3785));
                                float _4966 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3790 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3791 = _3790 * (((isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0))) * _3767) / ((_3780 * 0.699999988079071044921875) + 1.0));
                                float _3803 = exp2(log2(1.0 / ((_3780 * 3.5) + 5.0)) * 0.25);
                                float _3804 = 1.0 - _1047;
                                float _3811 = sqrt(1.0 - ((1.0 - (_3804 * _3804)) * (1.0 - (_3803 * _3803))));
                                float _3812 = _3811 * _3811;
                                float _3813 = _3812 * _3812;
                                float _3814 = _3760 - _3264;
                                float _3815 = _3761 - _3265;
                                float _3816 = _3762 - _3266;
                                float _3820 = inversesqrt(dot(vec3(_3814, _3815, _3816), vec3(_3814, _3815, _3816)));
                                float _3824 = dot(vec3(_972, _975, _978), vec3((-0.0) - _3264, (-0.0) - _3265, (-0.0) - _3266));
                                float _4977 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3827 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3828 = dot(vec3(_972, _975, _978), vec3(_3820 * _3814, _3820 * _3815, _3820 * _3816));
                                float _4988 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3831 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3835 = ((_3831 * _3831) * (_3813 + (-1.0))) + 1.0;
                                float _3836 = _3773 * _3812;
                                float _3837 = _3836 * _3836;
                                float _3843 = ((1.0 - _3837) * dot(vec3(_972, _975, _978), vec3(_3760, _3761, _3762))) + _3837;
                                float _4999 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3844 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3845 = 1.0 - _3812;
                                float _3855 = (0.5 / (((_3844 * ((_3827 * _3845) + _3812)) + 9.9999999392252902907785028219223e-09) + (((_3844 * _3845) + _3812) * _3827))) * _3844;
                                float _5010 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3865 = (_3790 * _3767) * (((_3813 * 3.1415927410125732421875) * (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0)))) / ((_3835 * _3835) * ((_3780 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3791 * _3637.y;
                                frontier_phi_78_pred_1 = _3791 * _3637.x;
                                frontier_phi_78_pred_2 = _3865 * _3649.z;
                                frontier_phi_78_pred_3 = _3865 * _3649.y;
                                frontier_phi_78_pred_4 = _3865 * _3649.x;
                                frontier_phi_78_pred_5 = _3791 * _3637.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3873 = frontier_phi_78_pred;
                            _3872 = frontier_phi_78_pred_1;
                            _3871 = frontier_phi_78_pred_2;
                            _3870 = frontier_phi_78_pred_3;
                            _3869 = frontier_phi_78_pred_4;
                            _3874 = frontier_phi_78_pred_5;
                            _3579 = _3872 + _3592;
                            _3580 = _3873 + _3593;
                            _3581 = _3874 + _3594;
                            _3576 = _3869 + _3589;
                            _3577 = _3870 + _3590;
                            _3578 = _3871 + _3591;
                            if (_3596 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3596;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3581;
                        frontier_phi_72_pred_1 = _3580;
                        frontier_phi_72_pred_2 = _3579;
                        frontier_phi_72_pred_3 = _3578;
                        frontier_phi_72_pred_4 = _3577;
                        frontier_phi_72_pred_5 = _3576;
                    }
                    _3249 = frontier_phi_72_pred;
                    _3247 = frontier_phi_72_pred_1;
                    _3245 = frontier_phi_72_pred_2;
                    _3243 = frontier_phi_72_pred_3;
                    _3241 = frontier_phi_72_pred_4;
                    _3239 = frontier_phi_72_pred_5;
                    uint _3384 = _3383 + 1u;
                    if (_3384 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3377 = _3239;
                        _3378 = _3241;
                        _3379 = _3243;
                        _3380 = _3245;
                        _3381 = _3247;
                        _3382 = _3249;
                        _3383 = _3384;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3249;
                frontier_phi_60_61_ladder_1 = _3247;
                frontier_phi_60_61_ladder_2 = _3243;
                frontier_phi_60_61_ladder_3 = _3241;
                frontier_phi_60_61_ladder_4 = _3239;
                frontier_phi_60_61_ladder_5 = _3245;
            }
            else
            {
                frontier_phi_60_61_ladder = _3136;
                frontier_phi_60_61_ladder_1 = _3134;
                frontier_phi_60_61_ladder_2 = _3130;
                frontier_phi_60_61_ladder_3 = _3128;
                frontier_phi_60_61_ladder_4 = _3126;
                frontier_phi_60_61_ladder_5 = _3132;
            }
            _3238 = frontier_phi_60_61_ladder_4;
            _3240 = frontier_phi_60_61_ladder_3;
            _3242 = frontier_phi_60_61_ladder_2;
            _3244 = frontier_phi_60_61_ladder_5;
            _3246 = frontier_phi_60_61_ladder_1;
            _3248 = frontier_phi_60_61_ladder;
        }
        float _3253 = isnan(1.0) ? _1031 : (isnan(_1031) ? 1.0 : min(_1031, 1.0));
        _3059 = (_3253 * _3244) + _2571;
        _3061 = (_3253 * _3246) + _2573;
        _3063 = (_3253 * _3248) + _2575;
        _3065 = ((_3238 * _1015) * _3253) + _2909;
        _3067 = ((_3240 * _1017) * _3253) + _2911;
        _3069 = ((_3242 * _1018) * _3253) + _2913;
    }
    else
    {
        _3059 = _2571;
        _3061 = _2573;
        _3063 = _2575;
        _3065 = _2909;
        _3067 = _2911;
        _3069 = _2913;
    }
    float _5026 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _5037 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _5048 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    uint _3089 = _261 + 6u;
    float _3097 = _953 / cbSceneParam._m0[86u].x;
    float _3098 = _954 / cbSceneParam._m0[86u].y;
    vec4 _3112 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3097, _3098, (log2((isnan(cbSceneParam._m0[77u].w) ? _888 : (isnan(_888) ? cbSceneParam._m0[77u].w : min(_888, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3114 = _3112.x;
    float _3115 = _3112.y;
    float _3116 = _3112.z;
    float _3117 = _3112.w;
    float _3188;
    float _3190;
    float _3192;
    float _3194;
    if (_888 > cbSceneParam._m0[78u].w)
    {
        float _3151 = isnan(_888) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _888 : min(cbSceneParam._m0[80u].w, _888));
        float _3152 = _3151 / _888;
        float _3163 = _3152 * _938;
        float _3164 = _939 * _3152;
        float _3165 = (-0.0) - _3164;
        float _3166 = _3152 * _940;
        float _3168 = (cbSceneParam._m0[77u].w * _3165) / _3151;
        float _3169 = _3168 + cbSceneParam._m0[79u].w;
        float _3170 = cbSceneParam._m0[79u].w - _3164;
        float _3176 = sqrt(((_3163 * _3163) + (_3164 * _3164)) + (_3166 * _3166));
        float _3179 = (1.0 - (cbSceneParam._m0[77u].w / _3151)) * _3176;
        float _3184 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3186 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3339;
        if (abs((_3165 - _3168) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3339 = ((((_3169 > 0.0) ? exp2(_3184 * _3169) : (2.0 - exp2(_3186 * _3169))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3179;
        }
        else
        {
            float _3299 = 1.0 / cbSceneParam._m0[80u].x;
            float _3300 = isnan(_3170) ? _3169 : (isnan(_3169) ? _3170 : max(_3169, _3170));
            float _3301 = isnan(_3170) ? _3169 : (isnan(_3169) ? _3170 : min(_3169, _3170));
            float _3310 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : min(_3300, 0.0));
            float _3311 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : min(_3301, 0.0));
            _3339 = ((abs(_3176 / _3165) * cbSceneParam._m0[80u].y) * ((((_3310 - _3311) * 2.0) - ((exp2(_3184 * (isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0)))) - exp2(_3184 * (isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0))))) * _3299)) - ((exp2(_3186 * _3310) - exp2(_3186 * _3311)) * _3299))) + (_3179 * cbSceneParam._m0[80u].z);
        }
        vec4 _3341 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3097, _3098, 1.0), 0.0);
        float _3350 = exp2((_3339 * (-1.44269502162933349609375)) * (1.0 - _3341.w));
        float _3351 = log2(_3350);
        float _3367 = log2(_3117);
        _3188 = (exp2(_3367 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3351 * cbSceneParam._m0[78u].x)) * _3341.x) / cbSceneParam._m0[78u].x)) + _3114;
        _3190 = (exp2(_3367 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3351 * cbSceneParam._m0[78u].y)) * _3341.y) / cbSceneParam._m0[78u].y)) + _3115;
        _3192 = (exp2(_3367 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3351 * cbSceneParam._m0[78u].z)) * _3341.z) / cbSceneParam._m0[78u].z)) + _3116;
        _3194 = _3350 * _3117;
    }
    else
    {
        _3188 = _3114;
        _3190 = _3115;
        _3192 = _3116;
        _3194 = _3117;
    }
    float _3206 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3207 = _3206 == 3.0;
    float _3208 = log2(_3194);
    float _3215 = exp2(_3208 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * (_3059 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1031))) + ((_3065 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1839)) * cbPerFrame._m0[3u].x));
    float _3216 = exp2(_3208 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0))) * (_3061 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1031))) + ((_3067 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1839)) * cbPerFrame._m0[3u].x));
    float _3217 = exp2(_3208 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_3063 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1031))) + ((_3069 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1839)) * cbPerFrame._m0[3u].x));
    float _3226 = (_3206 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3226 * (_3207 ? _3215 : (_3215 + (cbSceneParam._m0[72u].w * _3188)));
    SV_Target.y = _3226 * (_3207 ? _3216 : (_3216 + (cbSceneParam._m0[72u].w * _3190)));
    SV_Target.z = _3226 * (_3207 ? _3217 : (_3217 + (cbSceneParam._m0[72u].w * _3192)));
    SV_Target.w = cbInstanceData._m0[_3089].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3089].w;
}


