#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1440;
float _3842;
float _3843;
float _3844;
float _3845;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3854 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3865 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3876 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3887 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _441 = (_434 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _442 = (_434 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _443 = (_434 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _460 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _482 = _480.x;
    float _492 = dot(vec4(_482, _480.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _506 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_482 - _492) * cbMtdParam._m0[24u].y) + _492) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3898 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _514 = (_507 * ((_460.x * cbMtdParam._m0[13u].x) - _441)) + _441;
    float _515 = (_507 * ((_460.y * cbMtdParam._m0[13u].y) - _442)) + _442;
    float _516 = (_507 * ((_460.z * cbMtdParam._m0[13u].z) - _443)) + _443;
    float _520 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _514;
    float _523 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _515;
    float _526 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _516;
    float _533 = ((_514 - _520) * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) + _520;
    float _534 = ((_515 - _523) * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) + _523;
    float _535 = ((_516 - _526) * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) + _526;
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _301) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _302) + cbTextureTilingScale._m0[14u].w));
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _596 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _613 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _615 = _613.x;
    float _616 = _613.y;
    float _617 = _613.z;
    float _624 = ((_596.x - _615) * _434) + _615;
    float _625 = ((_596.y - _616) * _434) + _616;
    float _626 = ((_596.z - _617) * _434) + _617;
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _651 = ((_638.z - _626) * _507) + _626;
    float _654 = ((((_638.x - _624) * _507) + _624) * 2.0) + (-1.0);
    float _655 = ((((_638.y - _625) * _507) + _625) * 2.0) + (-1.0);
    float _656 = dot(vec2(_654, _655), vec2(_654, _655));
    float _3909 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _661 = sqrt(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))));
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _692 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _694 = _692.x;
    float _695 = 1.0 - _694;
    float _708 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_694 - _695) * cbMtdParam._m0[24u].z) + _695) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3920 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _709 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _716 = (_709 * ((_554.x * cbMtdParam._m0[18u].x) - _533)) + _533;
    float _717 = (_709 * ((_554.y * cbMtdParam._m0[18u].y) - _534)) + _534;
    float _718 = (_709 * ((_554.z * cbMtdParam._m0[18u].z) - _535)) + _535;
    vec4 _730 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _744 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _746 = _744.x;
    float _764 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _746) * _434) + _746;
    float _781 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _764) * _507) + _764;
    float _785 = ((_730.x - _781) * cbMtdParam._m0[19u].z) + _781;
    float _787 = _785 - (_785 * _709);
    float _792 = (((_573.z - _651) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _651;
    vec4 _805 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _812 = (_805.x * 2.0) + (-1.0);
    float _813 = (_805.y * 2.0) + (-1.0);
    float _814 = dot(vec2(_812, _813), vec2(_812, _813));
    float _3931 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _822 = (_709 * (_805.z - _792)) + _792;
    float _827 = _654 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_573.x * 2.0) + (-1.0)));
    float _828 = _655 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_573.y * 2.0) + (-1.0)));
    float _840 = (((_812 - _827) + (cbMtdParam._m0[21u].x * _827)) * _709) + _827;
    float _841 = (((_813 - _828) + (cbMtdParam._m0[21u].x * _828)) * _709) + _828;
    float _842 = (_709 * (sqrt(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) - _661)) + _661;
    float _846 = cbMtdParam._m0[22u].x + _674.w;
    float _849 = fma(_842, _248 * NORMAL.x, fma(_841, _255 * TANGENT.x, (_241 * _233) * _840));
    float _852 = fma(_842, _248 * NORMAL.y, fma(_841, _255 * TANGENT.y, (_241 * _234) * _840));
    float _855 = fma(_842, _248 * NORMAL.z, fma(_841, _255 * TANGENT.z, (_241 * _235) * _840));
    float _859 = inversesqrt(dot(vec3(_849, _852, _855), vec3(_849, _852, _855)));
    float _860 = _859 * _849;
    float _861 = _859 * _852;
    float _862 = _859 * _855;
    float _3942 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _863 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _3964 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _3975 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _3986 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _3997 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _868 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _882 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _933 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _923);
    float _934 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _923);
    float _935 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _923);
    float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
    float _940 = _933 * _939;
    float _941 = _934 * _939;
    float _942 = _935 * _939;
    vec4 _947 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _949 = _947.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1121 = sqrt(((_933 * _933) + (_934 * _934)) + (_935 * _935));
        float _1127 = (cbMatDynParam._m0[5u].x * _1121) + cbMatDynParam._m0[5u].y;
        float _4008 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1132 = (cbMatDynParam._m0[5u].z * _1121) + cbMatDynParam._m0[5u].w;
        float _4019 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) - _1128)) + _1128) < ((_949 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _960 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _961 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _979 = fma(_862, cbSceneParam._m0[5u].z, fma(_861, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _860));
    float _982 = fma(_862, cbSceneParam._m0[6u].z, fma(_861, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _860));
    float _985 = fma(_862, cbSceneParam._m0[7u].z, fma(_861, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _860));
    uint _998 = _282 + 9u;
    uint _999 = _998 + uint(cbMatDynParam._m0[0u].w);
    float _1005 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * cbInstanceData._m0[_999].x;
    float _1006 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * cbInstanceData._m0[_999].y;
    float _1007 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * cbInstanceData._m0[_999].z;
    float _4030 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _1011 = 1.0 - _868;
    float _1012 = _1008 * _1011;
    float _1013 = _1009 * _1011;
    float _1014 = _1010 * _1011;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _868;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _868;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _868;
    float _1022 = _1019 + 0.039999999105930328369140625;
    float _1024 = _1020 + 0.039999999105930328369140625;
    float _1025 = _1021 + 0.039999999105930328369140625;
    vec4 _1034 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _960, cbSceneParam._m0[86u].y * _961));
    float _1038 = ((isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * TEXCOORD_5.w) * _1034.x;
    float _1039 = dot(vec3(_860, _861, _862), vec3(_940, _941, _942));
    float _1042 = _1039 * 2.0;
    float _1046 = (_1042 * _860) - _940;
    float _1047 = (_1042 * _861) - _941;
    float _1048 = (_1042 * _862) - _942;
    float _1052 = abs(dot(vec3(_940, _941, _942), vec3(_860, _861, _862)));
    float _4063 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1054 = sqrt(_863);
    float _1067 = exp2((_1054 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1054 * 3.0));
    float _1073 = (1.0 - _1067) * ((_1054 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1074 = _1067 * _1054;
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1110 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1439;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1164 = fma(_1110, cbModelParam._m0[26u].z, fma(_1106, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1102));
        float _1168 = fma(_1110, cbModelParam._m0[27u].z, fma(_1106, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1102));
        float _1172 = fma(_1110, cbModelParam._m0[28u].z, fma(_1106, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1102));
        float _1197 = _1102 + _860;
        float _1198 = _1106 + _861;
        float _1199 = _1110 + _862;
        float _1209 = fma(_1199, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1197)) - _1164;
        float _1210 = fma(_1199, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1197)) - _1168;
        float _1211 = fma(_1199, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1197)) - _1172;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1164 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1168 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[34u].z) + ((((((_1172 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1267 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1233.x + (-0.5));
        float _1269 = _1267 * (_1233.y + (-0.5));
        float _1270 = _1267 * (_1233.z + (-0.5));
        float _1277 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1240.x + (-0.5));
        float _1279 = _1277 * (_1240.y + (-0.5));
        float _1280 = _1277 * (_1240.z + (-0.5));
        float _1287 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1247.x + (-0.5));
        float _1289 = _1287 * (_1247.y + (-0.5));
        float _1290 = _1287 * (_1247.z + (-0.5));
        float _1297 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1254.x + (-0.5));
        float _1299 = _1297 * (_1254.y + (-0.5));
        float _1300 = _1297 * (_1254.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1321 = (dot(vec3(_860, _861, _862), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1331 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4111 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1333 + 1.0))) + _1338) * _1301;
        float _1348 = _1269 * 0.5;
        float _1349 = _1279 * 0.5;
        float _1350 = _1289 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_860, _861, _862), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4144 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1375 + 1.0))) + _1380) * _1302;
        float _1390 = _1270 * 0.5;
        float _1391 = _1280 * 0.5;
        float _1392 = _1290 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_860, _861, _862), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4177 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1417 + 1.0))) + _1422) * _1303;
        _1439 = _1270;
        _1441 = _1269;
        _1442 = _1268;
        _1443 = _1280;
        _1444 = _1279;
        _1445 = _1278;
        _1446 = _1290;
        _1447 = _1289;
        _1448 = _1288;
        _1449 = _1303;
        _1450 = _1302;
        _1451 = _1301;
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1440;
        _1441 = _1440;
        _1442 = _1440;
        _1443 = _1440;
        _1444 = _1440;
        _1445 = _1440;
        _1446 = _1440;
        _1447 = _1440;
        _1448 = _1440;
        _1449 = _1440;
        _1450 = _1440;
        _1451 = _1440;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1481 = fma(_1110, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1102));
        float _1485 = fma(_1110, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1102));
        float _1489 = fma(_1110, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1102));
        float _1512 = _1102 + _860;
        float _1513 = _1106 + _861;
        float _1514 = _1110 + _862;
        float _1524 = fma(_1514, cbModelParam._m0[30u].z, fma(_1513, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1512)) - _1481;
        float _1525 = fma(_1514, cbModelParam._m0[31u].z, fma(_1513, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1512)) - _1485;
        float _1526 = fma(_1514, cbModelParam._m0[32u].z, fma(_1513, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1512)) - _1489;
        float _1530 = inversesqrt(dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526)));
        float _1543 = ((_1530 * _1524) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1481 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1544 = ((_1530 * _1525) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1485 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1545 = ((_1530 * _1526) / cbModelParam._m0[35u].z) + ((((((_1489 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        float _1580 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1547.x + (-0.5));
        float _1582 = _1580 * (_1547.y + (-0.5));
        float _1583 = _1580 * (_1547.z + (-0.5));
        float _1590 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1554.x + (-0.5));
        float _1592 = _1590 * (_1554.y + (-0.5));
        float _1593 = _1590 * (_1554.z + (-0.5));
        float _1600 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1561.x + (-0.5));
        float _1602 = _1600 * (_1561.y + (-0.5));
        float _1603 = _1600 * (_1561.z + (-0.5));
        float _1610 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1568.x + (-0.5));
        float _1612 = _1610 * (_1568.y + (-0.5));
        float _1613 = _1610 * (_1568.z + (-0.5));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = _1581 * 0.5;
        float _1618 = _1591 * 0.5;
        float _1619 = _1601 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_860, _861, _862), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4240 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1644 + 1.0))) + _1649) * _1614;
        float _1659 = _1582 * 0.5;
        float _1660 = _1592 * 0.5;
        float _1661 = _1602 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_860, _861, _862), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4273 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1686 + 1.0))) + _1691) * _1615;
        float _1701 = _1583 * 0.5;
        float _1702 = _1593 * 0.5;
        float _1703 = _1603 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_860, _861, _862), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4306 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1728 + 1.0))) + _1733) * _1616;
        _1750 = _1583;
        _1751 = _1582;
        _1752 = _1581;
        _1753 = _1593;
        _1754 = _1592;
        _1755 = _1591;
        _1756 = _1603;
        _1757 = _1602;
        _1758 = _1601;
        _1759 = _1616;
        _1760 = _1615;
        _1761 = _1614;
        _1762 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
    }
    else
    {
        _1750 = _1440;
        _1751 = _1440;
        _1752 = _1440;
        _1753 = _1440;
        _1754 = _1440;
        _1755 = _1440;
        _1756 = _1440;
        _1757 = _1440;
        _1758 = _1440;
        _1759 = _1440;
        _1760 = _1440;
        _1761 = _1440;
        _1762 = 0.0;
        _1763 = 0.0;
        _1764 = 0.0;
    }
    float _1774 = (cbModelParam._m0[1u].x * (_1762 - _1452)) + _1452;
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1453)) + _1453;
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1454)) + _1454;
    float _1797 = fma(_1776, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1774 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1776, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1774 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1776, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1774));
    float _1818 = _1046 * 0.5;
    float _1819 = _1047 * 0.5;
    float _1820 = _1048 * 0.5;
    float _1821 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1824 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1827 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1750, _1753, _1756, _1759));
    float _1861;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1834 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1439, _1443, _1446, _1449));
        float _1838 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1441, _1444, _1447, _1450));
        float _1842 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1442, _1445, _1448, _1451));
        float _1849 = dot(vec4(cbModelParam._m0[39u]), vec4(_1818, _1819, _1820, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1849) ? 0.0 : (isnan(0.0) ? _1849 : max(0.0, _1849))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1872;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1863 = dot(vec4(cbModelParam._m0[40u]), vec4(_1818, _1819, _1820, 1.0));
        _1872 = dot(vec3(isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1863) ? 0.0 : (isnan(0.0) ? _1863 : max(0.0, _1863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1872 = 1.0;
    }
    float _1876 = (_1872 * cbModelParam._m0[1u].x) + (_1861 * (1.0 - cbModelParam._m0[1u].x));
    float _1886 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _863);
    float _1887 = isnan(_1886) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1886 : min(cbModelParam._m0[25u].z, _1886));
    float _1967;
    float _1969;
    float _1971;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1934 = fma(_1110, cbModelParam._m0[13u].z, fma(_1106, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1102)) + cbModelParam._m0[13u].w;
        float _1938 = fma(_1110, cbModelParam._m0[14u].z, fma(_1106, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1102)) + cbModelParam._m0[14u].w;
        float _1942 = fma(_1110, cbModelParam._m0[15u].z, fma(_1106, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1102)) + cbModelParam._m0[15u].w;
        float _1945 = fma(_1048, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046));
        float _1948 = fma(_1048, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046));
        float _1951 = fma(_1048, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046));
        float _1979;
        if (_1945 > 0.0)
        {
            _1979 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1979 = frontier_phi_17_15_ladder;
        }
        float _2202;
        if (_1948 > 0.0)
        {
            _2202 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2202 = frontier_phi_26_22_ladder;
        }
        float _2459;
        if (_1951 > 0.0)
        {
            _2459 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2459 = frontier_phi_38_33_ladder;
        }
        float _2461 = isnan(_2202) ? _1979 : (isnan(_1979) ? _2202 : min(_1979, _2202));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1945) + _1934;
        float _2467 = (_2462 * _1948) + _1938;
        float _2468 = (_2462 * _1951) + _1942;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2469;
        float _2473 = _2469 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 > _2473) || ((_2467 < _2471) || ((_2466 < _2471) || (_2466 > _2473))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2596 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2468, cbModelParam._m0[9u].z, fma(_2467, cbModelParam._m0[9u].y, _2466 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2468, cbModelParam._m0[10u].z, fma(_2467, cbModelParam._m0[10u].y, _2466 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2468, cbModelParam._m0[11u].z, fma(_2467, cbModelParam._m0[11u].y, _2466 * cbModelParam._m0[11u].x))), _1887);
            frontier_phi_16_38_ladder = _2596.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2596.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2596.x * cbModelParam._m0[1u].y;
        }
        _1967 = frontier_phi_16_38_ladder_2;
        _1969 = frontier_phi_16_38_ladder_1;
        _1971 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1955 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1046, _1047, _1048), _1887);
        _1967 = _1955.x * cbModelParam._m0[1u].y;
        _1969 = _1955.y * cbModelParam._m0[1u].y;
        _1971 = _1955.z * cbModelParam._m0[1u].y;
    }
    float _1975 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _863);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1975 : min(cbModelParam._m0[25u].w, _1975));
    float _2065;
    float _2067;
    float _2069;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2029 = fma(_1110, cbModelParam._m0[21u].z, fma(_1106, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1102)) + cbModelParam._m0[21u].w;
        float _2033 = fma(_1110, cbModelParam._m0[22u].z, fma(_1106, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1102)) + cbModelParam._m0[22u].w;
        float _2037 = fma(_1110, cbModelParam._m0[23u].z, fma(_1106, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1102)) + cbModelParam._m0[23u].w;
        float _2040 = fma(_1048, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046));
        float _2043 = fma(_1048, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046));
        float _2046 = fma(_1048, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046));
        float _2207;
        if (_2040 > 0.0)
        {
            _2207 = abs((1.0 - _2029) / _2040);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2029 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2207 = frontier_phi_28_24_ladder;
        }
        float _2486;
        if (_2043 > 0.0)
        {
            _2486 = abs((1.0 - _2033) / _2043);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2033 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2486 = frontier_phi_40_35_ladder;
        }
        float _2699;
        if (_2046 > 0.0)
        {
            _2699 = abs((1.0 - _2037) / _2046);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2037 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2699 = frontier_phi_49_46_ladder;
        }
        float _2701 = isnan(_2486) ? _2207 : (isnan(_2207) ? _2486 : min(_2207, _2486));
        float _2702 = isnan(_2699) ? _2701 : (isnan(_2701) ? _2699 : min(_2701, _2699));
        float _2706 = (_2702 * _2040) + _2029;
        float _2707 = (_2702 * _2043) + _2033;
        float _2708 = (_2702 * _2046) + _2037;
        float _2709 = _2702 * 9.9999997473787516355514526367188e-05;
        float _2710 = (-1.0) - _2709;
        float _2712 = _2709 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2708 > _2712) || ((_2708 < _2710) || ((_2707 > _2712) || ((_2707 < _2710) || ((_2706 < _2710) || (_2706 > _2712))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2708, cbModelParam._m0[17u].z, fma(_2707, cbModelParam._m0[17u].y, _2706 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2708, cbModelParam._m0[18u].z, fma(_2707, cbModelParam._m0[18u].y, _2706 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2708, cbModelParam._m0[19u].z, fma(_2707, cbModelParam._m0[19u].y, _2706 * cbModelParam._m0[19u].x))), _1976);
            frontier_phi_25_49_ladder = _2907.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2907.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2907.x * cbModelParam._m0[1u].z;
        }
        _2065 = frontier_phi_25_49_ladder_2;
        _2067 = frontier_phi_25_49_ladder_1;
        _2069 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2049 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1046, _1047, _1048), _1976);
        _2065 = _2049.x * cbModelParam._m0[1u].z;
        _2067 = _2049.y * cbModelParam._m0[1u].z;
        _2069 = _2049.z * cbModelParam._m0[1u].z;
    }
    float _2082 = (((_1073 * _1022) + _1074) * _1038) * ((cbModelParam._m0[1u].w * (_2065 - _1967)) + _1967);
    float _2084 = (((_1073 * _1024) + _1074) * _1038) * ((cbModelParam._m0[1u].w * (_2067 - _1969)) + _1969);
    float _2086 = (((_1073 * _1025) + _1074) * _1038) * ((cbModelParam._m0[1u].w * (_2069 - _1971)) + _1971);
    float _2089 = fma(_2086, cbSceneParam._m0[89u].z, fma(_2084, cbSceneParam._m0[89u].y, _2082 * cbSceneParam._m0[89u].x));
    float _2092 = fma(_2086, cbSceneParam._m0[90u].z, fma(_2084, cbSceneParam._m0[90u].y, _2082 * cbSceneParam._m0[90u].x));
    float _2095 = fma(_2086, cbSceneParam._m0[91u].z, fma(_2084, cbSceneParam._m0[91u].y, _2082 * cbSceneParam._m0[91u].x));
    vec4 _2103 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_960, _961));
    float _2105 = _2103.w;
    float _2117 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2105);
    float _2118 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2105);
    float _2119 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2105);
    uvec4 _2123 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2125 = _2123.x * 14u;
    uint _2126 = _2125 + 13u;
    float _2133 = _1038 + (-1.0);
    float _2138 = (cbLight._m0[_2126].x * _2133) + 1.0;
    float _2139 = (cbLight._m0[_2126].y * _2133) + 1.0;
    float _2140 = (cbLight._m0[_2126].z * _2133) + 1.0;
    float _2141 = (cbLight._m0[_2126].w * _2133) + 1.0;
    uint _2142 = _2125 + 5u;
    float _2148 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2152 = _2125 + 4u;
    float _2161 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
    uint _2165 = _2125 | 1u;
    float _2176 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_860, _861, _862));
    float _2179 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_860, _861, _862));
    float _4442 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _4453 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2184 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * 0.3183098733425140380859375;
    float _2186 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2193 = ((cbLight._m0[_2142].x * _2148) * _2186) + (((cbLight._m0[_2152].x * _2117) * _2161) * _2184);
    float _2194 = ((_2148 * cbLight._m0[_2142].y) * _2186) + (((cbLight._m0[_2152].y * _2118) * _2161) * _2184);
    float _2195 = ((_2148 * cbLight._m0[_2142].z) * _2186) + (((cbLight._m0[_2152].z * _2119) * _2161) * _2184);
    uvec4 _2199 = floatBitsToUint(cbLight._m0[_2125 + 12u]);
    bool _2201 = _2199.x == 0u;
    float _2212;
    float _2214;
    float _2216;
    if (_2201)
    {
        _2212 = _2193;
        _2214 = _2194;
        _2216 = _2195;
    }
    else
    {
        uint _2220 = _2125 + 6u;
        float _2236 = (dot(vec3(cbLight._m0[_2125 + 2u].xyz), vec3(_860, _861, _862)) * 0.5) + 0.5;
        float _2237 = _2236 * _2236;
        float _4464 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2238 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2239 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2212 = (((cbLight._m0[_2220].x * 0.3183098733425140380859375) * _2238) * _2239) + _2193;
        _2214 = (((cbLight._m0[_2220].y * 0.3183098733425140380859375) * _2238) * _2239) + _2194;
        _2216 = (((cbLight._m0[_2220].z * 0.3183098733425140380859375) * _2238) * _2239) + _2195;
    }
    bool _2219 = _2199.y == 0u;
    float _2257;
    float _2259;
    float _2261;
    if (_2219)
    {
        _2257 = _2212;
        _2259 = _2214;
        _2261 = _2216;
    }
    else
    {
        uint _2430 = _2125 + 7u;
        float _2446 = (dot(vec3(cbLight._m0[_2125 + 3u].xyz), vec3(_860, _861, _862)) * 0.5) + 0.5;
        float _2447 = _2446 * _2446;
        float _4480 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2448 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2449 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2257 = (((cbLight._m0[_2430].x * 0.3183098733425140380859375) * _2448) * _2449) + _2212;
        _2259 = (((cbLight._m0[_2430].y * 0.3183098733425140380859375) * _2448) * _2449) + _2214;
        _2261 = (((cbLight._m0[_2430].z * 0.3183098733425140380859375) * _2448) * _2449) + _2216;
    }
    uint _2264 = _2125 + 8u;
    float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _863) * 0.949999988079071044921875);
    float _2278 = _2277 * _2277;
    float _2279 = cbLight._m0[_2125].x + _940;
    float _2280 = cbLight._m0[_2125].y + _941;
    float _2281 = cbLight._m0[_2125].z + _942;
    float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
    float _2286 = _2285 * _2279;
    float _2287 = _2285 * _2280;
    float _2288 = _2285 * _2281;
    float _2289 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2125].xyz));
    float _4496 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _4507 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _2293 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2294 = dot(vec3(_860, _861, _862), vec3(_2286, _2287, _2288));
    float _4518 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2298 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2286, _2287, _2288));
    float _4529 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2302 = _2278 * _2278;
    float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
    float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0);
    float _2315 = 0.959999978542327880859375 - _1019;
    float _2317 = 0.959999978542327880859375 - _1020;
    float _2318 = 0.959999978542327880859375 - _1021;
    float _2325 = 1.0 - _2278;
    float _2336 = (0.5 / (((_2293 * ((_2292 * _2325) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2325) + _2278) * _2292))) * _2292;
    float _4540 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2338 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
    uint _2352 = _2125 + 9u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _863) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2165].x + _940;
    float _2366 = cbLight._m0[_2165].y + _941;
    float _2367 = cbLight._m0[_2165].z + _942;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2165].xyz));
    float _4551 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _2379 = dot(vec3(_860, _861, _862), vec3(_2372, _2373, _2374));
    float _4562 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2383 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2372, _2373, _2374));
    float _4573 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2387 = _2364 * _2364;
    float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
    float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
    float _2405 = 1.0 - _2364;
    float _2415 = (0.5 / (((_2293 * ((_2378 * _2405) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2405) + _2364) * _2378))) * _2378;
    float _4584 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2417 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
    float _2427 = (((((_2398 * _2315) + _1022) * cbLight._m0[_2352].x) * _2417) * _2148) + ((((cbLight._m0[_2264].x * _2117) * ((_2314 * _2315) + _1022)) * _2338) * _2161);
    float _2428 = (((((_2398 * _2317) + _1024) * cbLight._m0[_2352].y) * _2417) * _2148) + ((((cbLight._m0[_2264].y * _2118) * ((_2314 * _2317) + _1024)) * _2338) * _2161);
    float _2429 = (((((_2398 * _2318) + _1025) * cbLight._m0[_2352].z) * _2417) * _2148) + ((((cbLight._m0[_2264].z * _2119) * ((_2314 * _2318) + _1025)) * _2338) * _2161);
    float _2491;
    float _2493;
    float _2495;
    if (_2201)
    {
        _2491 = _2427;
        _2493 = _2428;
        _2495 = _2429;
    }
    else
    {
        uint _2497 = _2125 + 2u;
        uint _2501 = _2125 + 10u;
        float _2515 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2497].w)) * _863) * 0.949999988079071044921875);
        float _2516 = _2515 * _2515;
        float _2517 = cbLight._m0[_2497].x + _940;
        float _2518 = cbLight._m0[_2497].y + _941;
        float _2519 = cbLight._m0[_2497].z + _942;
        float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
        float _2524 = _2523 * _2517;
        float _2525 = _2523 * _2518;
        float _2526 = _2523 * _2519;
        float _2527 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2497].xyz));
        float _4595 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2531 = dot(vec3(_860, _861, _862), vec3(_2524, _2525, _2526));
        float _4606 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2535 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_2524, _2525, _2526));
        float _4617 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2539 = _2516 * _2516;
        float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
        float _2550 = exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0);
        float _2557 = 1.0 - _2516;
        float _2567 = (0.5 / (((_2293 * ((_2530 * _2557) + _2516)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2557) + _2516) * _2530))) * _2530;
        float _4628 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2569 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
        float _2570 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2491 = (((((_2550 * _2315) + _1022) * cbLight._m0[_2501].x) * _2569) * _2570) + _2427;
        _2493 = (((((_2550 * _2317) + _1024) * cbLight._m0[_2501].y) * _2569) * _2570) + _2428;
        _2495 = (((((_2550 * _2318) + _1025) * cbLight._m0[_2501].z) * _2569) * _2570) + _2429;
    }
    float _2605;
    float _2607;
    float _2609;
    if (_2219)
    {
        _2605 = _2491;
        _2607 = _2493;
        _2609 = _2495;
    }
    else
    {
        uint _2616 = _2125 + 3u;
        uint _2620 = _2125 + 11u;
        float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2616].w)) * _863) * 0.949999988079071044921875);
        float _2635 = _2634 * _2634;
        float _2636 = cbLight._m0[_2616].x + _940;
        float _2637 = cbLight._m0[_2616].y + _941;
        float _2638 = cbLight._m0[_2616].z + _942;
        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
        float _2643 = _2642 * _2636;
        float _2644 = _2642 * _2637;
        float _2645 = _2642 * _2638;
        float _2646 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2616].xyz));
        float _4644 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2650 = dot(vec3(_860, _861, _862), vec3(_2643, _2644, _2645));
        float _4655 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2654 = dot(vec3(cbLight._m0[_2616].xyz), vec3(_2643, _2644, _2645));
        float _4666 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2658 = _2635 * _2635;
        float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
        float _2669 = exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0);
        float _2676 = 1.0 - _2635;
        float _2686 = (0.5 / (((_2293 * ((_2649 * _2676) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2676) + _2635) * _2649))) * _2649;
        float _4677 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2688 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
        float _2689 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2605 = (((((_2669 * _2315) + _1022) * cbLight._m0[_2620].x) * _2688) * _2689) + _2491;
        _2607 = (((((_2669 * _2317) + _1024) * cbLight._m0[_2620].y) * _2688) * _2689) + _2493;
        _2609 = (((((_2669 * _2318) + _1025) * cbLight._m0[_2620].z) * _2688) * _2689) + _2495;
    }
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    if (_2123.y == 0u)
    {
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2764;
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2764;
        float _2767 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2764;
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.x;
        uint _2791 = uint((float(_2779.y) * floor(float(uint(cbSceneParam._m0[85u].y * _961) / _2780))) + floor(float(uint(cbSceneParam._m0[85u].x * _960) / _2780)));
        float _2801 = (log2(_2767 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2802 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        uint _2805 = uint(isnan(14.0) ? _2802 : (isnan(_2802) ? 14.0 : min(_2802, 14.0)));
        uvec4 _2810 = texelFetch(g_lightClusterGridBuffer, int(((_2805 << 2u) + (_2791 << 6u)) >> 2u));
        uint _2811 = _2810.x;
        uint _2812 = _2779.z;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((((1u << ((_2812 >> 4u) & 15u)) + 4294967295u) & _2811) == 0u) || ((_2812 & 240u) == 0u))
        {
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
        }
        else
        {
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            uint _3071 = 0u;
            uint _3080;
            bool _3081;
            for (;;)
            {
                _3080 = texelFetch(g_lightClassification, int((((_2805 << 5u) + (_2791 << 9u)) + (_3071 << 2u)) >> 2u)).x;
                _3081 = _3080 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3081)
                {
                    frontier_phi_66_pred = _3065;
                    frontier_phi_66_pred_1 = _3070;
                    frontier_phi_66_pred_2 = _3069;
                    frontier_phi_66_pred_3 = _3068;
                    frontier_phi_66_pred_4 = _3067;
                    frontier_phi_66_pred_5 = _3066;
                }
                else
                {
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    uint _3216;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3080;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    for (;;)
                    {
                        uint _3220 = uint(findLSB(_3216)) + (_3071 << 5u);
                        uint _3217 = (_3216 + 4294967295u) & _3216;
                        uint _3222 = _3220 * 48u;
                        vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 3u)).x));
                        uint _3242 = (_3220 * 48u) + 4u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 3u)).x));
                        uint _3261 = (_3220 * 48u) + 8u;
                        vec3 _3272 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x));
                        float _3276 = _3236.x - _2765;
                        float _3277 = _3236.y - _2766;
                        float _3278 = _3236.z - _2767;
                        float _3279 = dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278));
                        float _3282 = inversesqrt(_3279);
                        float _3283 = _3282 * _3276;
                        float _3284 = _3282 * _3277;
                        float _3285 = _3282 * _3278;
                        float _3286 = dot(vec3(_979, _982, _985), vec3(_3283, _3284, _3285));
                        float _3291 = 1.0 - (_3279 * _3236.w);
                        float _4703 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3292 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                        float _3293 = sqrt(_3279) * _3255.w;
                        float _3296 = 1.39999997615814208984375 / (_3293 + 1.39999997615814208984375);
                        float _3297 = _3296 * _3296;
                        float _3300 = ((1.0 - _3297) * _3286) + _3297;
                        float _3303 = _3293 * _3293;
                        float _3307 = ((isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0))) * _3292) / ((_3303 * 0.699999988079071044921875) + 1.0);
                        float _3311 = (-0.0) - _2765;
                        float _3312 = (-0.0) - _2766;
                        float _3313 = (-0.0) - _2767;
                        float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                        float _3318 = _3317 * _3311;
                        float _3319 = _3317 * _3312;
                        float _3320 = _3317 * _3313;
                        float _3328 = exp2(log2(1.0 / ((_3303 * 3.5) + 5.0)) * 0.25);
                        float _3329 = 1.0 - _1054;
                        float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                        float _3337 = _3336 * _3336;
                        float _3338 = _3337 * _3337;
                        float _3339 = _3318 + _3283;
                        float _3340 = _3319 + _3284;
                        float _3341 = _3320 + _3285;
                        float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                        float _3349 = dot(vec3(_979, _982, _985), vec3(_3318, _3319, _3320));
                        float _4719 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3353 = dot(vec3(_979, _982, _985), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                        float _4730 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3356 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                        float _3361 = _3296 * _3337;
                        float _3362 = _3361 * _3361;
                        float _3365 = ((1.0 - _3362) * _3286) + _3362;
                        float _4741 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3366 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3367 = 1.0 - _3337;
                        float _3377 = (0.5 / (((_3366 * ((_3352 * _3367) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3366 * _3367) + _3337) * _3352))) * _3366;
                        float _4752 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3388 = (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) / ((_3360 * _3360) * ((_3303 * 2.1991131305694580078125) + 3.141590118408203125))) * _3292;
                        _3140 = (_3307 * _3255.x) + _3213;
                        _3141 = (_3307 * _3255.y) + _3214;
                        _3142 = (_3307 * _3255.z) + _3215;
                        _3137 = (_3388 * _3272.x) + _3210;
                        _3138 = (_3388 * _3272.y) + _3211;
                        _3139 = (_3388 * _3272.z) + _3212;
                        if (_3217 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3217;
                        }
                    }
                    frontier_phi_66_pred = _3137;
                    frontier_phi_66_pred_1 = _3142;
                    frontier_phi_66_pred_2 = _3141;
                    frontier_phi_66_pred_3 = _3140;
                    frontier_phi_66_pred_4 = _3139;
                    frontier_phi_66_pred_5 = _3138;
                }
                _2913 = frontier_phi_66_pred;
                _2923 = frontier_phi_66_pred_1;
                _2921 = frontier_phi_66_pred_2;
                _2919 = frontier_phi_66_pred_3;
                _2917 = frontier_phi_66_pred_4;
                _2915 = frontier_phi_66_pred_5;
                uint _3072 = _3071 + 1u;
                if (_3072 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3065 = _2913;
                    _3066 = _2915;
                    _3067 = _2917;
                    _3068 = _2919;
                    _3069 = _2921;
                    _3070 = _2923;
                    _3071 = _3072;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
        }
        uvec4 _2926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2927 = _2926.z;
        uint _2929 = (_2927 >> 8u) & 15u;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        if (((4294967295u << _2929) & _2811) == 0u)
        {
            _3033 = _2912;
            _3035 = _2914;
            _3037 = _2916;
            _3039 = _2918;
            _3041 = _2920;
            _3043 = _2922;
        }
        else
        {
            float _3058 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
            float _3059 = _3058 * _2765;
            float _3060 = _3058 * _2766;
            float _3061 = _3058 * _2767;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2929 < ((_2927 >> 12u) & 15u))
            {
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3193 = _2912;
                float _3194 = _2914;
                float _3195 = _2916;
                float _3196 = _2918;
                float _3197 = _2920;
                float _3198 = _2922;
                uint _3199 = _2929;
                uint _3208;
                bool _3209;
                for (;;)
                {
                    _3208 = texelFetch(g_lightClassification, int((((_2805 << 5u) + (_2791 << 9u)) + (_3199 << 2u)) >> 2u)).x;
                    _3209 = _3208 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3209)
                    {
                        frontier_phi_77_pred = _3198;
                        frontier_phi_77_pred_1 = _3197;
                        frontier_phi_77_pred_2 = _3196;
                        frontier_phi_77_pred_3 = _3195;
                        frontier_phi_77_pred_4 = _3194;
                        frontier_phi_77_pred_5 = _3193;
                    }
                    else
                    {
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3415 = _3193;
                        float _3416 = _3194;
                        float _3417 = _3195;
                        float _3418 = _3196;
                        float _3419 = _3197;
                        float _3420 = _3198;
                        uint _3421 = _3208;
                        uint _3422;
                        vec4 _3447;
                        float _3448;
                        vec4 _3463;
                        vec3 _3475;
                        vec4 _3490;
                        vec4 _3505;
                        float _3551;
                        bool _3552;
                        for (;;)
                        {
                            uint _3432 = ((_3199 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3421));
                            _3422 = (_3421 + 4294967295u) & _3421;
                            uint _3434 = _3432 * 40u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            _3448 = _3447.w;
                            uint _3450 = (_3432 * 40u) + 4u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3432 * 40u) + 8u;
                            _3475 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x));
                            uint _3477 = (_3432 * 40u) + 16u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3492 = (_3432 * 40u) + 20u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3432 * 40u) + 24u;
                            vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3526 = (_3432 * 40u) + 28u;
                            vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            _3551 = fma(_2767, _3539.z, fma(_2766, _3539.y, _3539.x * _2765)) + _3539.w;
                            _3552 = !((fma(_2767, _3520.z, fma(_2766, _3520.y, _3520.x * _2765)) + _3520.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3552)
                            {
                                float _3579 = _3447.x - _2765;
                                float _3580 = _3447.y - _2766;
                                float _3581 = _3447.z - _2767;
                                float _3582 = dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581));
                                float _3585 = inversesqrt(_3582);
                                float _3586 = _3585 * _3579;
                                float _3587 = _3585 * _3580;
                                float _3588 = _3585 * _3581;
                                float _3592 = 1.0 - (_3582 / (_3448 * _3448));
                                float _4763 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                                float _3597 = sqrt(_3582) * _3463.w;
                                float _3599 = 1.39999997615814208984375 / (_3597 + 1.39999997615814208984375);
                                float _3600 = _3599 * _3599;
                                float _3603 = ((1.0 - _3600) * dot(vec3(_3586, _3587, _3588), vec3(_979, _982, _985))) + _3600;
                                float _3606 = _3597 * _3597;
                                float _3610 = (fma(_2767, _3490.z, fma(_2766, _3490.y, _3490.x * _2765)) + _3490.w) / _3551;
                                float _3611 = (fma(_2767, _3505.z, fma(_2766, _3505.y, _3505.x * _2765)) + _3505.w) / _3551;
                                float _3615 = 1.0 - dot(vec2(_3610, _3611), vec2(_3610, _3611));
                                float _4779 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3617 = _3616 * (((isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0))) * _3593) / ((_3606 * 0.699999988079071044921875) + 1.0));
                                float _3629 = exp2(log2(1.0 / ((_3606 * 3.5) + 5.0)) * 0.25);
                                float _3630 = 1.0 - _1054;
                                float _3637 = sqrt(1.0 - ((1.0 - (_3630 * _3630)) * (1.0 - (_3629 * _3629))));
                                float _3638 = _3637 * _3637;
                                float _3639 = _3638 * _3638;
                                float _3640 = _3586 - _3059;
                                float _3641 = _3587 - _3060;
                                float _3642 = _3588 - _3061;
                                float _3646 = inversesqrt(dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642)));
                                float _3650 = dot(vec3(_979, _982, _985), vec3((-0.0) - _3059, (-0.0) - _3060, (-0.0) - _3061));
                                float _4790 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3653 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3654 = dot(vec3(_979, _982, _985), vec3(_3646 * _3640, _3646 * _3641, _3646 * _3642));
                                float _4801 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3657 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3661 = ((_3657 * _3657) * (_3639 + (-1.0))) + 1.0;
                                float _3662 = _3599 * _3638;
                                float _3663 = _3662 * _3662;
                                float _3669 = ((1.0 - _3663) * dot(vec3(_979, _982, _985), vec3(_3586, _3587, _3588))) + _3663;
                                float _4812 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3671 = 1.0 - _3638;
                                float _3681 = (0.5 / (((_3670 * ((_3653 * _3671) + _3638)) + 9.9999999392252902907785028219223e-09) + (((_3670 * _3671) + _3638) * _3653))) * _3670;
                                float _4823 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3691 = (_3616 * _3593) * (((_3639 * 3.1415927410125732421875) * (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) / ((_3661 * _3661) * ((_3606 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3617 * _3463.y;
                                frontier_phi_83_pred_1 = _3617 * _3463.x;
                                frontier_phi_83_pred_2 = _3691 * _3475.z;
                                frontier_phi_83_pred_3 = _3691 * _3475.y;
                                frontier_phi_83_pred_4 = _3691 * _3475.x;
                                frontier_phi_83_pred_5 = _3617 * _3463.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3699 = frontier_phi_83_pred;
                            _3698 = frontier_phi_83_pred_1;
                            _3697 = frontier_phi_83_pred_2;
                            _3696 = frontier_phi_83_pred_3;
                            _3695 = frontier_phi_83_pred_4;
                            _3700 = frontier_phi_83_pred_5;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            _3407 = _3700 + _3420;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3404 = _3697 + _3417;
                            if (_3422 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3422;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3407;
                        frontier_phi_77_pred_1 = _3406;
                        frontier_phi_77_pred_2 = _3405;
                        frontier_phi_77_pred_3 = _3404;
                        frontier_phi_77_pred_4 = _3403;
                        frontier_phi_77_pred_5 = _3402;
                    }
                    _3044 = frontier_phi_77_pred;
                    _3042 = frontier_phi_77_pred_1;
                    _3040 = frontier_phi_77_pred_2;
                    _3038 = frontier_phi_77_pred_3;
                    _3036 = frontier_phi_77_pred_4;
                    _3034 = frontier_phi_77_pred_5;
                    uint _3200 = _3199 + 1u;
                    if (_3200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3193 = _3034;
                        _3194 = _3036;
                        _3195 = _3038;
                        _3196 = _3040;
                        _3197 = _3042;
                        _3198 = _3044;
                        _3199 = _3200;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3038;
                frontier_phi_58_59_ladder_1 = _3044;
                frontier_phi_58_59_ladder_2 = _3042;
                frontier_phi_58_59_ladder_3 = _3040;
                frontier_phi_58_59_ladder_4 = _3036;
                frontier_phi_58_59_ladder_5 = _3034;
            }
            else
            {
                frontier_phi_58_59_ladder = _2916;
                frontier_phi_58_59_ladder_1 = _2922;
                frontier_phi_58_59_ladder_2 = _2920;
                frontier_phi_58_59_ladder_3 = _2918;
                frontier_phi_58_59_ladder_4 = _2914;
                frontier_phi_58_59_ladder_5 = _2912;
            }
            _3033 = frontier_phi_58_59_ladder_5;
            _3035 = frontier_phi_58_59_ladder_4;
            _3037 = frontier_phi_58_59_ladder;
            _3039 = frontier_phi_58_59_ladder_3;
            _3041 = frontier_phi_58_59_ladder_2;
            _3043 = frontier_phi_58_59_ladder_1;
        }
        float _3048 = isnan(1.0) ? _1038 : (isnan(_1038) ? 1.0 : min(_1038, 1.0));
        _2824 = (_3048 * _3039) + _2257;
        _2826 = (_3048 * _3041) + _2259;
        _2828 = (_3048 * _3043) + _2261;
        _2830 = ((_3033 * _1022) * _3048) + _2605;
        _2832 = ((_3035 * _1024) * _3048) + _2607;
        _2834 = ((_3037 * _1025) * _3048) + _2609;
    }
    else
    {
        _2824 = _2257;
        _2826 = _2259;
        _2828 = _2261;
        _2830 = _2605;
        _2832 = _2607;
        _2834 = _2609;
    }
    float _4839 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4850 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _4861 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _2851 = ((isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2824 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1038))) + ((_2830 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1876)) * cbPerFrame._m0[3u].x);
    float _2852 = ((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2826 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1038))) + ((_2832 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1876)) * cbPerFrame._m0[3u].x);
    float _2853 = ((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2828 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1038))) + ((_2834 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1876)) * cbPerFrame._m0[3u].x);
    uint _2854 = _282 + 6u;
    float _2862 = _960 / cbSceneParam._m0[86u].x;
    float _2863 = _961 / cbSceneParam._m0[86u].y;
    vec4 _2877 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2862, _2863, (log2((isnan(cbSceneParam._m0[77u].w) ? _882 : (isnan(_882) ? cbSceneParam._m0[77u].w : min(_882, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2879 = _2877.x;
    float _2880 = _2877.y;
    float _2881 = _2877.z;
    float _2882 = _2877.w;
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    if (_882 > cbSceneParam._m0[78u].w)
    {
        float _2937 = isnan(_882) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _882 : min(cbSceneParam._m0[80u].w, _882));
        float _2938 = _2937 / _882;
        float _2949 = _2938 * _933;
        float _2950 = _934 * _2938;
        float _2951 = (-0.0) - _2950;
        float _2953 = _2938 * _935;
        float _2955 = (cbSceneParam._m0[77u].w * _2951) / _2937;
        float _2956 = _2955 + cbSceneParam._m0[79u].w;
        float _2957 = cbSceneParam._m0[79u].w - _2950;
        float _2963 = sqrt(((_2949 * _2949) + (_2950 * _2950)) + (_2953 * _2953));
        float _2966 = (1.0 - (cbSceneParam._m0[77u].w / _2937)) * _2963;
        float _2971 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2973 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3150;
        if (abs((_2951 - _2955) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3150 = ((((_2956 > 0.0) ? exp2(_2971 * _2956) : (2.0 - exp2(_2973 * _2956))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2966;
        }
        else
        {
            float _3094 = 1.0 / cbSceneParam._m0[80u].x;
            float _3095 = isnan(_2957) ? _2956 : (isnan(_2956) ? _2957 : max(_2956, _2957));
            float _3096 = isnan(_2957) ? _2956 : (isnan(_2956) ? _2957 : min(_2956, _2957));
            float _3105 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : min(_3095, 0.0));
            float _3106 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : min(_3096, 0.0));
            _3150 = ((abs(_2963 / _2951) * cbSceneParam._m0[80u].y) * ((((_3105 - _3106) * 2.0) - ((exp2(_2971 * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0)))) - exp2(_2971 * (isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0))))) * _3094)) - ((exp2(_2973 * _3105) - exp2(_2973 * _3106)) * _3094))) + (_2966 * cbSceneParam._m0[80u].z);
        }
        vec4 _3152 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2862, _2863, 1.0), 0.0);
        float _3161 = exp2((_3150 * (-1.44269502162933349609375)) * (1.0 - _3152.w));
        float _3162 = log2(_3161);
        float _3178 = log2(_2882);
        _2975 = (exp2(_3178 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].x)) * _3152.x) / cbSceneParam._m0[78u].x)) + _2879;
        _2977 = (exp2(_3178 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].y)) * _3152.y) / cbSceneParam._m0[78u].y)) + _2880;
        _2979 = (exp2(_3178 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].z)) * _3152.z) / cbSceneParam._m0[78u].z)) + _2881;
        _2981 = _3161 * _2882;
    }
    else
    {
        _2975 = _2879;
        _2977 = _2880;
        _2979 = _2881;
        _2981 = _2882;
    }
    bool _3188;
    vec4 _2991;
    vec4 _3013;
    float _3015;
    float _3019;
    float _3020;
    float _3021;
    float _3022;
    bool _3032;
    for (;;)
    {
        _2991 = cbMatDynParam._m0[0u];
        float _2993 = roundEven(_2991.y);
        bool _2994 = _2993 == 3.0;
        float _2995 = log2(_2981);
        float _3002 = exp2(_2995 * cbSceneParam._m0[78u].x) * _2851;
        float _3003 = exp2(_2995 * cbSceneParam._m0[78u].y) * _2852;
        float _3004 = exp2(_2995 * cbSceneParam._m0[78u].z) * _2853;
        float _3011 = _949 + (-0.5);
        _3013 = cbMtdParam._m0[1u];
        _3015 = _3013.y * _3011;
        float _3018 = (_2993 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3019 = _3018 * (_2994 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2975)));
        _3020 = _3018 * (_2994 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2977)));
        _3021 = _3018 * (_2994 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2979)));
        _3022 = _3011 * 0.999000012874603271484375;
        _3032 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3032)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3022) < 0.5)
            {
                _3188 = true;
                break;
            }
        }
        uint _3129 = _998 + uint(_2991.w);
        if ((cbInstanceData._m0[_3129].w < 1.0) && ((cbInstanceData._m0[_3129].w + _3022) < 0.5))
        {
            _3188 = true;
            break;
        }
        if ((_3015 + 1.0) < _3013.x)
        {
            _3188 = true;
            break;
        }
        _3188 = false;
        break;
    }
    float _3393;
    if (_3188)
    {
        discard_state = true;
        _3393 = 0.0;
    }
    else
    {
        _3393 = cbInstanceData._m0[_2854].w;
    }
    SV_Target.x = _3019;
    SV_Target.y = _3020;
    SV_Target.z = _3021;
    SV_Target.w = _3393;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2854].w;
    discard_exit();
}


