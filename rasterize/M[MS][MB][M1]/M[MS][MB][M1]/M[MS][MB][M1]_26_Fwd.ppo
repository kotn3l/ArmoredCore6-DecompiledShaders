#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1168;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _334 = _330.z;
    float _338 = (_330.x * 2.0) + (-1.0);
    float _339 = (_330.y * 2.0) + (-1.0);
    float _340 = dot(vec2(_338, _339), vec2(_338, _339));
    float _3496 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _346 = sqrt(1.0 - (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))));
    float _351 = _338 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_304.x * 2.0) + (-1.0)));
    float _352 = _339 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_304.y * 2.0) + (-1.0)));
    float _355 = fma(_346, _227, fma(_352, _234, _351 * _220));
    float _358 = fma(_346, _228, fma(_352, _235, _351 * _221));
    float _361 = fma(_346, _229, fma(_352, _236, _351 * _222));
    float _365 = inversesqrt(dot(vec3(_355, _358, _361), vec3(_355, _358, _361)));
    vec4 _401 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _403 = _401.x;
    float _404 = 1.0 - _403;
    float _413 = (cbMtdParam._m0[19u].x + dot(vec4(_365 * _355, _365 * _358, _365 * _361, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_403 - _404) * cbMtdParam._m0[24u].z) + _404) * cbMtdParam._m0[21u].z);
    float _3507 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _416 = (-0.0) - cbMtdParam._m0[24u].x;
    float _418 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _418 : (isnan(_418) ? 1.0 : min(_418, 1.0));
    float _426 = _414 - ((_414 * TEXCOORD_8.x) * _419);
    float _427 = _414 - ((_414 * TEXCOORD_8.y) * _419);
    float _428 = _414 - ((_414 * TEXCOORD_8.z) * _419);
    float _435 = (_426 * (cbMtdParam._m0[17u].x - _284)) + _284;
    float _436 = (_427 * (cbMtdParam._m0[17u].y - _285)) + _285;
    float _437 = (_428 * (cbMtdParam._m0[17u].z - _286)) + _286;
    vec4 _449 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _451 = _449.x;
    float _452 = 1.0 - _451;
    float _482 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_451 - _452) * cbMtdParam._m0[24u].w) + _452) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3528 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _491 = ((((cbMtdParam._m0[10u].x - _435) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _483) + _435;
    float _492 = ((((cbMtdParam._m0[10u].y - _436) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _483) + _436;
    float _493 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _437)) * _483) + _437;
    vec4 _506 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _508 = _506.x;
    float _510 = _508 - (_508 * _426);
    float _512 = _510 - (_510 * _483);
    float _517 = (((_304.z - _334) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _334;
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _538 = (_531.x * 2.0) + (-1.0);
    float _539 = (_531.y * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3539 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _548 = ((_531.z - _517) * _426) + _517;
    float _551 = ((cbMtdParam._m0[23u].y - _548) * _483) + _548;
    vec4 _570 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _576 = (_570.x * 2.0) + (-1.0);
    float _577 = (_570.y * 2.0) + (-1.0);
    float _578 = dot(vec2(_576, _577), vec2(_576, _577));
    float _3550 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _593 = ((sqrt(1.0 - (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) - _346) * _428) + _346;
    float _596 = (((_538 - _351) * _426) + _351) + (cbMtdParam._m0[21u].x * _351);
    float _597 = (((_539 - _352) * _427) + _352) + (cbMtdParam._m0[21u].x * _352);
    float _608 = (((_576 - _596) + (_596 * cbMtdParam._m0[22u].z)) * _483) + _596;
    float _609 = (((_577 - _597) + (_597 * cbMtdParam._m0[22u].z)) * _483) + _597;
    float _610 = (_483 * (sqrt(1.0 - (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) - _593)) + _593;
    float _612 = cbMtdParam._m0[22u].x + _330.w;
    float _615 = fma(_610, _227, fma(_609, _234, _608 * _220));
    float _618 = fma(_610, _228, fma(_609, _235, _608 * _221));
    float _621 = fma(_610, _229, fma(_609, _236, _608 * _222));
    float _625 = inversesqrt(dot(vec3(_615, _618, _621), vec3(_615, _618, _621)));
    float _626 = _625 * _615;
    float _627 = _625 * _618;
    float _628 = _625 * _621;
    float _3561 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _629 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3583 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3594 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3605 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3616 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _634 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _698 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _688);
    float _699 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _688);
    float _700 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _688);
    float _704 = inversesqrt(dot(vec3(_698, _699, _700), vec3(_698, _699, _700)));
    float _705 = _698 * _704;
    float _706 = _699 * _704;
    float _707 = _700 * _704;
    float _713 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _714 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _735 = fma(_628, cbSceneParam._m0[5u].z, fma(_627, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _626));
    float _738 = fma(_628, cbSceneParam._m0[6u].z, fma(_627, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _626));
    float _741 = fma(_628, cbSceneParam._m0[7u].z, fma(_627, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _626));
    uint _755 = (_239 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _761 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_755].x;
    float _762 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * cbInstanceData._m0[_755].y;
    float _763 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_755].z;
    float _3627 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _3638 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _3649 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _767 = 1.0 - _634;
    float _768 = _764 * _767;
    float _769 = _765 * _767;
    float _770 = _766 * _767;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _634;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _634;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _634;
    float _778 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    vec4 _790 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _713, cbSceneParam._m0[86u].y * _714));
    float _794 = ((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * TEXCOORD_5.w) * _790.x;
    float _795 = dot(vec3(_626, _627, _628), vec3(_705, _706, _707));
    float _798 = _795 * 2.0;
    float _802 = (_798 * _626) - _705;
    float _803 = (_798 * _627) - _706;
    float _804 = (_798 * _628) - _707;
    float _808 = abs(dot(vec3(_705, _706, _707), vec3(_626, _627, _628)));
    float _3660 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _810 = sqrt(_629);
    float _823 = exp2((_810 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_810 * 3.0));
    float _829 = (1.0 - _823) * ((_810 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _830 = _823 * _810;
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1167;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _892 = fma(_866, cbModelParam._m0[26u].z, fma(_862, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _858));
        float _896 = fma(_866, cbModelParam._m0[27u].z, fma(_862, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _858));
        float _900 = fma(_866, cbModelParam._m0[28u].z, fma(_862, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _858));
        float _925 = _858 + _626;
        float _926 = _862 + _627;
        float _927 = _866 + _628;
        float _937 = fma(_927, cbModelParam._m0[26u].z, fma(_926, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _925)) - _892;
        float _938 = fma(_927, cbModelParam._m0[27u].z, fma(_926, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _925)) - _896;
        float _939 = fma(_927, cbModelParam._m0[28u].z, fma(_926, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _925)) - _900;
        float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
        float _956 = ((_943 * _937) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_892 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_943 * _938) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_896 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_943 * _939) / cbModelParam._m0[34u].z) + ((((((_900 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        float _995 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_961.x + (-0.5));
        float _997 = _995 * (_961.y + (-0.5));
        float _998 = _995 * (_961.z + (-0.5));
        float _1005 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_968.x + (-0.5));
        float _1007 = _1005 * (_968.y + (-0.5));
        float _1008 = _1005 * (_968.z + (-0.5));
        float _1015 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_975.x + (-0.5));
        float _1017 = _1015 * (_975.y + (-0.5));
        float _1018 = _1015 * (_975.z + (-0.5));
        float _1025 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_982.x + (-0.5));
        float _1027 = _1025 * (_982.y + (-0.5));
        float _1028 = _1025 * (_982.z + (-0.5));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = _996 * 0.5;
        float _1033 = _1006 * 0.5;
        float _1034 = _1016 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1049 = (dot(vec3(_626, _627, _628), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1059 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3708 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1061 + 1.0))) + _1066) * _1029;
        float _1076 = _997 * 0.5;
        float _1077 = _1007 * 0.5;
        float _1078 = _1017 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_626, _627, _628), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3741 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1103 + 1.0))) + _1108) * _1030;
        float _1118 = _998 * 0.5;
        float _1119 = _1008 * 0.5;
        float _1120 = _1018 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_626, _627, _628), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3774 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1145 + 1.0))) + _1150) * _1031;
        _1167 = _998;
        _1169 = _997;
        _1170 = _996;
        _1171 = _1008;
        _1172 = _1007;
        _1173 = _1006;
        _1174 = _1018;
        _1175 = _1017;
        _1176 = _1016;
        _1177 = _1031;
        _1178 = _1030;
        _1179 = _1029;
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
    }
    else
    {
        _1167 = _1168;
        _1169 = _1168;
        _1170 = _1168;
        _1171 = _1168;
        _1172 = _1168;
        _1173 = _1168;
        _1174 = _1168;
        _1175 = _1168;
        _1176 = _1168;
        _1177 = _1168;
        _1178 = _1168;
        _1179 = _1168;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1207 = fma(_866, cbModelParam._m0[30u].z, fma(_862, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _858));
        float _1211 = fma(_866, cbModelParam._m0[31u].z, fma(_862, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _858));
        float _1215 = fma(_866, cbModelParam._m0[32u].z, fma(_862, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _858));
        float _1238 = _858 + _626;
        float _1239 = _862 + _627;
        float _1240 = _866 + _628;
        float _1250 = fma(_1240, cbModelParam._m0[30u].z, fma(_1239, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1238)) - _1207;
        float _1251 = fma(_1240, cbModelParam._m0[31u].z, fma(_1239, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1238)) - _1211;
        float _1252 = fma(_1240, cbModelParam._m0[32u].z, fma(_1239, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1238)) - _1215;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1207 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1211 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[35u].z) + ((((((_1215 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1306 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1273.x + (-0.5));
        float _1308 = _1306 * (_1273.y + (-0.5));
        float _1309 = _1306 * (_1273.z + (-0.5));
        float _1316 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1280.x + (-0.5));
        float _1318 = _1316 * (_1280.y + (-0.5));
        float _1319 = _1316 * (_1280.z + (-0.5));
        float _1326 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1287.x + (-0.5));
        float _1328 = _1326 * (_1287.y + (-0.5));
        float _1329 = _1326 * (_1287.z + (-0.5));
        float _1336 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1294.x + (-0.5));
        float _1338 = _1336 * (_1294.y + (-0.5));
        float _1339 = _1336 * (_1294.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_626, _627, _628), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3837 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1370 + 1.0))) + _1375) * _1340;
        float _1385 = _1308 * 0.5;
        float _1386 = _1318 * 0.5;
        float _1387 = _1328 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_626, _627, _628), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3870 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1412 + 1.0))) + _1417) * _1341;
        float _1427 = _1309 * 0.5;
        float _1428 = _1319 * 0.5;
        float _1429 = _1329 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_626, _627, _628), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3903 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1454 + 1.0))) + _1459) * _1342;
        _1476 = _1309;
        _1477 = _1308;
        _1478 = _1307;
        _1479 = _1319;
        _1480 = _1318;
        _1481 = _1317;
        _1482 = _1329;
        _1483 = _1328;
        _1484 = _1327;
        _1485 = _1342;
        _1486 = _1341;
        _1487 = _1340;
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
    }
    else
    {
        _1476 = _1168;
        _1477 = _1168;
        _1478 = _1168;
        _1479 = _1168;
        _1480 = _1168;
        _1481 = _1168;
        _1482 = _1168;
        _1483 = _1168;
        _1484 = _1168;
        _1485 = _1168;
        _1486 = _1168;
        _1487 = _1168;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1180)) + _1180;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1181)) + _1181;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1182)) + _1182;
    float _1523 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1500));
    float _1544 = _802 * 0.5;
    float _1545 = _803 * 0.5;
    float _1546 = _804 * 0.5;
    float _1547 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1550 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1553 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1587;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1560 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1167, _1171, _1174, _1177));
        float _1564 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1568 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1575 = dot(vec4(cbModelParam._m0[39u]), vec4(_1544, _1545, _1546, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1598;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1589 = dot(vec4(cbModelParam._m0[40u]), vec4(_1544, _1545, _1546, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1602 = (_1598 * cbModelParam._m0[1u].x) + (_1587 * (1.0 - cbModelParam._m0[1u].x));
    float _1612 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _629);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1612 : min(cbModelParam._m0[25u].z, _1612));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1661 = fma(_866, cbModelParam._m0[13u].z, fma(_862, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _858)) + cbModelParam._m0[13u].w;
        float _1665 = fma(_866, cbModelParam._m0[14u].z, fma(_862, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _858)) + cbModelParam._m0[14u].w;
        float _1669 = fma(_866, cbModelParam._m0[15u].z, fma(_862, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _858)) + cbModelParam._m0[15u].w;
        float _1672 = fma(_804, cbModelParam._m0[13u].z, fma(_803, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _802));
        float _1675 = fma(_804, cbModelParam._m0[14u].z, fma(_803, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _802));
        float _1678 = fma(_804, cbModelParam._m0[15u].z, fma(_803, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _802));
        float _1706;
        if (_1672 > 0.0)
        {
            _1706 = abs((1.0 - _1661) / _1672);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1661 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1706 = frontier_phi_14_12_ladder;
        }
        float _1910;
        if (_1675 > 0.0)
        {
            _1910 = abs((1.0 - _1665) / _1675);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1665 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1910 = frontier_phi_23_19_ladder;
        }
        float _2164;
        if (_1678 > 0.0)
        {
            _2164 = abs((1.0 - _1669) / _1678);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1669 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2164 = frontier_phi_35_30_ladder;
        }
        float _2166 = isnan(_1910) ? _1706 : (isnan(_1706) ? _1910 : min(_1706, _1910));
        float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
        float _2171 = (_2167 * _1672) + _1661;
        float _2172 = (_2167 * _1675) + _1665;
        float _2173 = (_2167 * _1678) + _1669;
        float _2174 = _2167 * 9.9999997473787516355514526367188e-05;
        float _2176 = (-1.0) - _2174;
        float _2178 = _2174 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2173 > _2178) || ((_2173 < _2176) || ((_2172 > _2178) || ((_2172 < _2176) || ((_2171 < _2176) || (_2171 > _2178))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2301 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2173, cbModelParam._m0[9u].z, fma(_2172, cbModelParam._m0[9u].y, _2171 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2173, cbModelParam._m0[10u].z, fma(_2172, cbModelParam._m0[10u].y, _2171 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2173, cbModelParam._m0[11u].z, fma(_2172, cbModelParam._m0[11u].y, _2171 * cbModelParam._m0[11u].x))), _1613);
            frontier_phi_13_35_ladder = _2301.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2301.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2301.x * cbModelParam._m0[1u].y;
        }
        _1694 = frontier_phi_13_35_ladder_2;
        _1696 = frontier_phi_13_35_ladder_1;
        _1698 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1682 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_802, _803, _804), _1613);
        _1694 = _1682.x * cbModelParam._m0[1u].y;
        _1696 = _1682.y * cbModelParam._m0[1u].y;
        _1698 = _1682.z * cbModelParam._m0[1u].y;
    }
    float _1702 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _629);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1702 : min(cbModelParam._m0[25u].w, _1702));
    float _1793;
    float _1795;
    float _1797;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1757 = fma(_866, cbModelParam._m0[21u].z, fma(_862, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _858)) + cbModelParam._m0[21u].w;
        float _1761 = fma(_866, cbModelParam._m0[22u].z, fma(_862, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _858)) + cbModelParam._m0[22u].w;
        float _1765 = fma(_866, cbModelParam._m0[23u].z, fma(_862, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _858)) + cbModelParam._m0[23u].w;
        float _1768 = fma(_804, cbModelParam._m0[21u].z, fma(_803, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _802));
        float _1771 = fma(_804, cbModelParam._m0[22u].z, fma(_803, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _802));
        float _1774 = fma(_804, cbModelParam._m0[23u].z, fma(_803, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _802));
        float _1915;
        if (_1768 > 0.0)
        {
            _1915 = abs((1.0 - _1757) / _1768);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1757 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1915 = frontier_phi_25_21_ladder;
        }
        float _2191;
        if (_1771 > 0.0)
        {
            _2191 = abs((1.0 - _1761) / _1771);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1761 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2191 = frontier_phi_37_32_ladder;
        }
        float _2404;
        if (_1774 > 0.0)
        {
            _2404 = abs((1.0 - _1765) / _1774);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1765 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2404 = frontier_phi_46_43_ladder;
        }
        float _2406 = isnan(_2191) ? _1915 : (isnan(_1915) ? _2191 : min(_1915, _2191));
        float _2407 = isnan(_2404) ? _2406 : (isnan(_2406) ? _2404 : min(_2406, _2404));
        float _2411 = (_2407 * _1768) + _1757;
        float _2412 = (_2407 * _1771) + _1761;
        float _2413 = (_2407 * _1774) + _1765;
        float _2414 = _2407 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2414;
        float _2417 = _2414 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2413 > _2417) || ((_2413 < _2415) || ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 < _2415) || (_2411 > _2417))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2413, cbModelParam._m0[17u].z, fma(_2412, cbModelParam._m0[17u].y, _2411 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2413, cbModelParam._m0[18u].z, fma(_2412, cbModelParam._m0[18u].y, _2411 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2413, cbModelParam._m0[19u].z, fma(_2412, cbModelParam._m0[19u].y, _2411 * cbModelParam._m0[19u].x))), _1703);
            frontier_phi_22_46_ladder = _2612.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2612.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2612.x * cbModelParam._m0[1u].z;
        }
        _1793 = frontier_phi_22_46_ladder_2;
        _1795 = frontier_phi_22_46_ladder_1;
        _1797 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1777 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_802, _803, _804), _1703);
        _1793 = _1777.x * cbModelParam._m0[1u].z;
        _1795 = _1777.y * cbModelParam._m0[1u].z;
        _1797 = _1777.z * cbModelParam._m0[1u].z;
    }
    float _1810 = (((_829 * _778) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1793 - _1694)) + _1694);
    float _1812 = (((_829 * _780) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1795 - _1696)) + _1696);
    float _1814 = (((_829 * _781) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1797 - _1698)) + _1698);
    float _1817 = fma(_1814, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1810 * cbSceneParam._m0[89u].x));
    float _1820 = fma(_1814, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1810 * cbSceneParam._m0[90u].x));
    float _1823 = fma(_1814, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, _1810 * cbSceneParam._m0[91u].x));
    uvec4 _1833 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1835 = _1833.x * 14u;
    uint _1836 = _1835 + 13u;
    float _1843 = _794 + (-1.0);
    float _1848 = (cbLight._m0[_1836].x * _1843) + 1.0;
    float _1849 = (cbLight._m0[_1836].y * _1843) + 1.0;
    float _1850 = (cbLight._m0[_1836].z * _1843) + 1.0;
    float _1851 = (cbLight._m0[_1836].w * _1843) + 1.0;
    uint _1852 = _1835 + 5u;
    float _1858 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1862 = _1835 + 4u;
    float _1869 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1873 = _1835 | 1u;
    float _1884 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_626, _627, _628));
    float _1887 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_626, _627, _628));
    float _4039 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _4050 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1892 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * 0.3183098733425140380859375;
    float _1894 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * 0.3183098733425140380859375;
    float _1901 = ((cbLight._m0[_1852].x * _1858) * _1894) + ((cbLight._m0[_1862].x * _1869) * _1892);
    float _1902 = ((_1858 * cbLight._m0[_1852].y) * _1894) + ((_1869 * cbLight._m0[_1862].y) * _1892);
    float _1903 = ((_1858 * cbLight._m0[_1852].z) * _1894) + ((_1869 * cbLight._m0[_1862].z) * _1892);
    uvec4 _1907 = floatBitsToUint(cbLight._m0[_1835 + 12u]);
    bool _1909 = _1907.x == 0u;
    float _1920;
    float _1922;
    float _1924;
    if (_1909)
    {
        _1920 = _1901;
        _1922 = _1902;
        _1924 = _1903;
    }
    else
    {
        uint _1928 = _1835 + 6u;
        float _1944 = (dot(vec3(cbLight._m0[_1835 + 2u].xyz), vec3(_626, _627, _628)) * 0.5) + 0.5;
        float _1945 = _1944 * _1944;
        float _4061 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1947 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _1920 = (((cbLight._m0[_1928].x * 0.3183098733425140380859375) * _1946) * _1947) + _1901;
        _1922 = (((cbLight._m0[_1928].y * 0.3183098733425140380859375) * _1946) * _1947) + _1902;
        _1924 = (((cbLight._m0[_1928].z * 0.3183098733425140380859375) * _1946) * _1947) + _1903;
    }
    bool _1927 = _1907.y == 0u;
    float _1965;
    float _1967;
    float _1969;
    if (_1927)
    {
        _1965 = _1920;
        _1967 = _1922;
        _1969 = _1924;
    }
    else
    {
        uint _2135 = _1835 + 7u;
        float _2151 = (dot(vec3(cbLight._m0[_1835 + 3u].xyz), vec3(_626, _627, _628)) * 0.5) + 0.5;
        float _2152 = _2151 * _2151;
        float _4077 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2153 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2154 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _1965 = (((cbLight._m0[_2135].x * 0.3183098733425140380859375) * _2153) * _2154) + _1920;
        _1967 = (((cbLight._m0[_2135].y * 0.3183098733425140380859375) * _2153) * _2154) + _1922;
        _1969 = (((cbLight._m0[_2135].z * 0.3183098733425140380859375) * _2153) * _2154) + _1924;
    }
    uint _1972 = _1835 + 8u;
    float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1835].w)) * _629) * 0.949999988079071044921875);
    float _1986 = _1985 * _1985;
    float _1987 = cbLight._m0[_1835].x + _705;
    float _1988 = cbLight._m0[_1835].y + _706;
    float _1989 = cbLight._m0[_1835].z + _707;
    float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
    float _1994 = _1993 * _1987;
    float _1995 = _1993 * _1988;
    float _1996 = _1993 * _1989;
    float _1997 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_1835].xyz));
    float _4093 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _2001 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _2002 = dot(vec3(_626, _627, _628), vec3(_1994, _1995, _1996));
    float _4115 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2006 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_1994, _1995, _1996));
    float _4126 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2010 = _1986 * _1986;
    float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
    float _2022 = exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0);
    float _2023 = 0.959999978542327880859375 - _775;
    float _2025 = 0.959999978542327880859375 - _776;
    float _2026 = 0.959999978542327880859375 - _777;
    float _2033 = 1.0 - _1986;
    float _2044 = (0.5 / (((_2001 * ((_2000 * _2033) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2033) + _1986) * _2000))) * _2000;
    float _4137 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2046 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
    uint _2057 = _1835 + 9u;
    float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1873].w)) * _629) * 0.949999988079071044921875);
    float _2069 = _2068 * _2068;
    float _2070 = cbLight._m0[_1873].x + _705;
    float _2071 = cbLight._m0[_1873].y + _706;
    float _2072 = cbLight._m0[_1873].z + _707;
    float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
    float _2077 = _2076 * _2070;
    float _2078 = _2076 * _2071;
    float _2079 = _2076 * _2072;
    float _2080 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_1873].xyz));
    float _4148 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _2084 = dot(vec3(_626, _627, _628), vec3(_2077, _2078, _2079));
    float _4159 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_2077, _2078, _2079));
    float _4170 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = _2069 * _2069;
    float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
    float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0);
    float _2110 = 1.0 - _2069;
    float _2120 = (0.5 / (((_2001 * ((_2083 * _2110) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2110) + _2069) * _2083))) * _2083;
    float _4181 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
    float _2132 = (((((_2103 * _2023) + _778) * cbLight._m0[_2057].x) * _2122) * _1858) + (((((_2022 * _2023) + _778) * cbLight._m0[_1972].x) * _2046) * _1869);
    float _2133 = (((((_2103 * _2025) + _780) * cbLight._m0[_2057].y) * _2122) * _1858) + (((((_2022 * _2025) + _780) * cbLight._m0[_1972].y) * _2046) * _1869);
    float _2134 = (((((_2103 * _2026) + _781) * cbLight._m0[_2057].z) * _2122) * _1858) + (((((_2022 * _2026) + _781) * cbLight._m0[_1972].z) * _2046) * _1869);
    float _2196;
    float _2198;
    float _2200;
    if (_1909)
    {
        _2196 = _2132;
        _2198 = _2133;
        _2200 = _2134;
    }
    else
    {
        uint _2202 = _1835 + 2u;
        uint _2206 = _1835 + 10u;
        float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _629) * 0.949999988079071044921875);
        float _2221 = _2220 * _2220;
        float _2222 = cbLight._m0[_2202].x + _705;
        float _2223 = cbLight._m0[_2202].y + _706;
        float _2224 = cbLight._m0[_2202].z + _707;
        float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
        float _2229 = _2228 * _2222;
        float _2230 = _2228 * _2223;
        float _2231 = _2228 * _2224;
        float _2232 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_2202].xyz));
        float _4192 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2236 = dot(vec3(_626, _627, _628), vec3(_2229, _2230, _2231));
        float _4203 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2240 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2229, _2230, _2231));
        float _4214 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2244 = _2221 * _2221;
        float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
        float _2255 = exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0);
        float _2262 = 1.0 - _2221;
        float _2272 = (0.5 / (((_2001 * ((_2235 * _2262) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2262) + _2221) * _2235))) * _2235;
        float _4225 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2274 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
        float _2275 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2196 = (((((_2255 * _2023) + _778) * cbLight._m0[_2206].x) * _2274) * _2275) + _2132;
        _2198 = (((((_2255 * _2025) + _780) * cbLight._m0[_2206].y) * _2274) * _2275) + _2133;
        _2200 = (((((_2255 * _2026) + _781) * cbLight._m0[_2206].z) * _2274) * _2275) + _2134;
    }
    float _2310;
    float _2312;
    float _2314;
    if (_1927)
    {
        _2310 = _2196;
        _2312 = _2198;
        _2314 = _2200;
    }
    else
    {
        uint _2321 = _1835 + 3u;
        uint _2325 = _1835 + 11u;
        float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _629) * 0.949999988079071044921875);
        float _2340 = _2339 * _2339;
        float _2341 = cbLight._m0[_2321].x + _705;
        float _2342 = cbLight._m0[_2321].y + _706;
        float _2343 = cbLight._m0[_2321].z + _707;
        float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
        float _2348 = _2347 * _2341;
        float _2349 = _2347 * _2342;
        float _2350 = _2347 * _2343;
        float _2351 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_2321].xyz));
        float _4241 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2355 = dot(vec3(_626, _627, _628), vec3(_2348, _2349, _2350));
        float _4252 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2359 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2348, _2349, _2350));
        float _4263 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2363 = _2340 * _2340;
        float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
        float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0);
        float _2381 = 1.0 - _2340;
        float _2391 = (0.5 / (((_2001 * ((_2354 * _2381) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2381) + _2340) * _2354))) * _2354;
        float _4274 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2393 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
        float _2394 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2310 = (((((_2374 * _2023) + _778) * cbLight._m0[_2325].x) * _2393) * _2394) + _2196;
        _2312 = (((((_2374 * _2025) + _780) * cbLight._m0[_2325].y) * _2393) * _2394) + _2198;
        _2314 = (((((_2374 * _2026) + _781) * cbLight._m0[_2325].z) * _2393) * _2394) + _2200;
    }
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    if (_1833.y == 0u)
    {
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2469;
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2469;
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2469;
        uvec4 _2484 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2485 = _2484.x;
        uint _2496 = uint((float(_2484.y) * floor(float(uint(cbSceneParam._m0[85u].y * _714) / _2485))) + floor(float(uint(cbSceneParam._m0[85u].x * _713) / _2485)));
        float _2506 = (log2(_2472 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2507 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        uint _2510 = uint(isnan(14.0) ? _2507 : (isnan(_2507) ? 14.0 : min(_2507, 14.0)));
        uvec4 _2515 = texelFetch(g_lightClusterGridBuffer, int(((_2510 << 2u) + (_2496 << 6u)) >> 2u));
        uint _2516 = _2515.x;
        uint _2517 = _2484.z;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        if (((((1u << ((_2517 >> 4u) & 15u)) + 4294967295u) & _2516) == 0u) || ((_2517 & 240u) == 0u))
        {
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
        }
        else
        {
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            uint _2767 = 0u;
            uint _2776;
            bool _2777;
            for (;;)
            {
                _2776 = texelFetch(g_lightClassification, int((((_2510 << 5u) + (_2496 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                _2777 = _2776 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2777)
                {
                    frontier_phi_61_pred = _2761;
                    frontier_phi_61_pred_1 = _2766;
                    frontier_phi_61_pred_2 = _2765;
                    frontier_phi_61_pred_3 = _2764;
                    frontier_phi_61_pred_4 = _2763;
                    frontier_phi_61_pred_5 = _2762;
                }
                else
                {
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    uint _2891;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2776;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    for (;;)
                    {
                        uint _2895 = uint(findLSB(_2891)) + (_2767 << 5u);
                        uint _2892 = (_2891 + 4294967295u) & _2891;
                        uint _2897 = _2895 * 48u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2917 = (_2895 * 48u) + 4u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 3u)).x));
                        uint _2936 = (_2895 * 48u) + 8u;
                        vec3 _2947 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x));
                        float _2951 = _2911.x - _2470;
                        float _2952 = _2911.y - _2471;
                        float _2953 = _2911.z - _2472;
                        float _2954 = dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953));
                        float _2957 = inversesqrt(_2954);
                        float _2958 = _2957 * _2951;
                        float _2959 = _2957 * _2952;
                        float _2960 = _2957 * _2953;
                        float _2961 = dot(vec3(_735, _738, _741), vec3(_2958, _2959, _2960));
                        float _2966 = 1.0 - (_2954 * _2911.w);
                        float _4300 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2967 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _2968 = sqrt(_2954) * _2930.w;
                        float _2971 = 1.39999997615814208984375 / (_2968 + 1.39999997615814208984375);
                        float _2972 = _2971 * _2971;
                        float _2975 = ((1.0 - _2972) * _2961) + _2972;
                        float _2978 = _2968 * _2968;
                        float _2982 = ((isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))) * _2967) / ((_2978 * 0.699999988079071044921875) + 1.0);
                        float _2986 = (-0.0) - _2470;
                        float _2987 = (-0.0) - _2471;
                        float _2988 = (-0.0) - _2472;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2993 = _2992 * _2986;
                        float _2994 = _2992 * _2987;
                        float _2995 = _2992 * _2988;
                        float _3003 = exp2(log2(1.0 / ((_2978 * 3.5) + 5.0)) * 0.25);
                        float _3004 = 1.0 - _810;
                        float _3011 = sqrt(1.0 - ((1.0 - (_3004 * _3004)) * (1.0 - (_3003 * _3003))));
                        float _3012 = _3011 * _3011;
                        float _3013 = _3012 * _3012;
                        float _3014 = _2993 + _2958;
                        float _3015 = _2994 + _2959;
                        float _3016 = _2995 + _2960;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3024 = dot(vec3(_735, _738, _741), vec3(_2993, _2994, _2995));
                        float _4316 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3027 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _3028 = dot(vec3(_735, _738, _741), vec3(_3020 * _3014, _3020 * _3015, _3020 * _3016));
                        float _4327 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3031 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _3035 = ((_3031 * _3031) * (_3013 + (-1.0))) + 1.0;
                        float _3036 = _2971 * _3012;
                        float _3037 = _3036 * _3036;
                        float _3040 = ((1.0 - _3037) * _2961) + _3037;
                        float _4338 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3041 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3042 = 1.0 - _3012;
                        float _3052 = (0.5 / (((_3041 * ((_3027 * _3042) + _3012)) + 9.9999999392252902907785028219223e-09) + (((_3041 * _3042) + _3012) * _3027))) * _3041;
                        float _4349 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3063 = (((_3013 * 3.1415927410125732421875) * (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) / ((_3035 * _3035) * ((_2978 * 2.1991131305694580078125) + 3.141590118408203125))) * _2967;
                        _2820 = (_2982 * _2930.x) + _2888;
                        _2821 = (_2982 * _2930.y) + _2889;
                        _2822 = (_2982 * _2930.z) + _2890;
                        _2817 = (_3063 * _2947.x) + _2885;
                        _2818 = (_3063 * _2947.y) + _2886;
                        _2819 = (_3063 * _2947.z) + _2887;
                        if (_2892 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2892;
                        }
                    }
                    frontier_phi_61_pred = _2817;
                    frontier_phi_61_pred_1 = _2822;
                    frontier_phi_61_pred_2 = _2821;
                    frontier_phi_61_pred_3 = _2820;
                    frontier_phi_61_pred_4 = _2819;
                    frontier_phi_61_pred_5 = _2818;
                }
                _2618 = frontier_phi_61_pred;
                _2628 = frontier_phi_61_pred_1;
                _2626 = frontier_phi_61_pred_2;
                _2624 = frontier_phi_61_pred_3;
                _2622 = frontier_phi_61_pred_4;
                _2620 = frontier_phi_61_pred_5;
                uint _2768 = _2767 + 1u;
                if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2761 = _2618;
                    _2762 = _2620;
                    _2763 = _2622;
                    _2764 = _2624;
                    _2765 = _2626;
                    _2766 = _2628;
                    _2767 = _2768;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
        }
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.z;
        uint _2634 = (_2632 >> 8u) & 15u;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        if (((4294967295u << _2634) & _2516) == 0u)
        {
            _2729 = _2617;
            _2731 = _2619;
            _2733 = _2621;
            _2735 = _2623;
            _2737 = _2625;
            _2739 = _2627;
        }
        else
        {
            float _2754 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
            float _2755 = _2754 * _2470;
            float _2756 = _2754 * _2471;
            float _2757 = _2754 * _2472;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2634 < ((_2632 >> 12u) & 15u))
            {
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2868 = _2617;
                float _2869 = _2619;
                float _2870 = _2621;
                float _2871 = _2623;
                float _2872 = _2625;
                float _2873 = _2627;
                uint _2874 = _2634;
                uint _2883;
                bool _2884;
                for (;;)
                {
                    _2883 = texelFetch(g_lightClassification, int((((_2510 << 5u) + (_2496 << 9u)) + (_2874 << 2u)) >> 2u)).x;
                    _2884 = _2883 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2884)
                    {
                        frontier_phi_67_pred = _2871;
                        frontier_phi_67_pred_1 = _2872;
                        frontier_phi_67_pred_2 = _2873;
                        frontier_phi_67_pred_3 = _2870;
                        frontier_phi_67_pred_4 = _2869;
                        frontier_phi_67_pred_5 = _2868;
                    }
                    else
                    {
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3081 = _2868;
                        float _3082 = _2869;
                        float _3083 = _2870;
                        float _3084 = _2871;
                        float _3085 = _2872;
                        float _3086 = _2873;
                        uint _3087 = _2883;
                        uint _3088;
                        vec4 _3113;
                        float _3114;
                        vec4 _3129;
                        vec3 _3141;
                        vec4 _3157;
                        vec4 _3172;
                        float _3218;
                        bool _3219;
                        for (;;)
                        {
                            uint _3098 = ((_2874 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3087));
                            _3088 = (_3087 + 4294967295u) & _3087;
                            uint _3100 = _3098 * 40u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            _3114 = _3113.w;
                            uint _3116 = (_3098 * 40u) + 4u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3098 * 40u) + 8u;
                            _3141 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x));
                            uint _3144 = (_3098 * 40u) + 16u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3159 = (_3098 * 40u) + 20u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3174 = (_3098 * 40u) + 24u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3193 = (_3098 * 40u) + 28u;
                            vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            _3218 = fma(_2472, _3206.z, fma(_2471, _3206.y, _3206.x * _2470)) + _3206.w;
                            _3219 = !((fma(_2472, _3187.z, fma(_2471, _3187.y, _3187.x * _2470)) + _3187.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3219)
                            {
                                float _3246 = _3113.x - _2470;
                                float _3247 = _3113.y - _2471;
                                float _3248 = _3113.z - _2472;
                                float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                                float _3252 = inversesqrt(_3249);
                                float _3253 = _3252 * _3246;
                                float _3254 = _3252 * _3247;
                                float _3255 = _3252 * _3248;
                                float _3259 = 1.0 - (_3249 / (_3114 * _3114));
                                float _4360 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3260 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3264 = sqrt(_3249) * _3129.w;
                                float _3266 = 1.39999997615814208984375 / (_3264 + 1.39999997615814208984375);
                                float _3267 = _3266 * _3266;
                                float _3270 = ((1.0 - _3267) * dot(vec3(_3253, _3254, _3255), vec3(_735, _738, _741))) + _3267;
                                float _3273 = _3264 * _3264;
                                float _3277 = (fma(_2472, _3157.z, fma(_2471, _3157.y, _3157.x * _2470)) + _3157.w) / _3218;
                                float _3278 = (fma(_2472, _3172.z, fma(_2471, _3172.y, _3172.x * _2470)) + _3172.w) / _3218;
                                float _3282 = 1.0 - dot(vec2(_3277, _3278), vec2(_3277, _3278));
                                float _4376 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3284 = _3283 * (((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3260) / ((_3273 * 0.699999988079071044921875) + 1.0));
                                float _3296 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                                float _3297 = 1.0 - _810;
                                float _3304 = sqrt(1.0 - ((1.0 - (_3297 * _3297)) * (1.0 - (_3296 * _3296))));
                                float _3305 = _3304 * _3304;
                                float _3306 = _3305 * _3305;
                                float _3307 = _3253 - _2755;
                                float _3308 = _3254 - _2756;
                                float _3309 = _3255 - _2757;
                                float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                                float _3317 = dot(vec3(_735, _738, _741), vec3((-0.0) - _2755, (-0.0) - _2756, (-0.0) - _2757));
                                float _4387 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3320 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3321 = dot(vec3(_735, _738, _741), vec3(_3313 * _3307, _3313 * _3308, _3313 * _3309));
                                float _4398 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3324 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3328 = ((_3324 * _3324) * (_3306 + (-1.0))) + 1.0;
                                float _3329 = _3266 * _3305;
                                float _3330 = _3329 * _3329;
                                float _3336 = ((1.0 - _3330) * dot(vec3(_735, _738, _741), vec3(_3253, _3254, _3255))) + _3330;
                                float _4409 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3338 = 1.0 - _3305;
                                float _3348 = (0.5 / (((_3337 * ((_3320 * _3338) + _3305)) + 9.9999999392252902907785028219223e-09) + (((_3337 * _3338) + _3305) * _3320))) * _3337;
                                float _4420 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3358 = (_3283 * _3260) * (((_3306 * 3.1415927410125732421875) * (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) / ((_3328 * _3328) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3358 * _3141.x;
                                frontier_phi_73_pred_1 = _3358 * _3141.y;
                                frontier_phi_73_pred_2 = _3284 * _3129.z;
                                frontier_phi_73_pred_3 = _3284 * _3129.y;
                                frontier_phi_73_pred_4 = _3284 * _3129.x;
                                frontier_phi_73_pred_5 = _3358 * _3141.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3362 = frontier_phi_73_pred;
                            _3363 = frontier_phi_73_pred_1;
                            _3367 = frontier_phi_73_pred_2;
                            _3366 = frontier_phi_73_pred_3;
                            _3365 = frontier_phi_73_pred_4;
                            _3364 = frontier_phi_73_pred_5;
                            _3071 = _3365 + _3084;
                            _3072 = _3366 + _3085;
                            _3073 = _3367 + _3086;
                            _3068 = _3362 + _3081;
                            _3069 = _3363 + _3082;
                            _3070 = _3364 + _3083;
                            if (_3088 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3088;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3071;
                        frontier_phi_67_pred_1 = _3072;
                        frontier_phi_67_pred_2 = _3073;
                        frontier_phi_67_pred_3 = _3070;
                        frontier_phi_67_pred_4 = _3069;
                        frontier_phi_67_pred_5 = _3068;
                    }
                    _2736 = frontier_phi_67_pred;
                    _2738 = frontier_phi_67_pred_1;
                    _2740 = frontier_phi_67_pred_2;
                    _2734 = frontier_phi_67_pred_3;
                    _2732 = frontier_phi_67_pred_4;
                    _2730 = frontier_phi_67_pred_5;
                    uint _2875 = _2874 + 1u;
                    if (_2875 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2868 = _2730;
                        _2869 = _2732;
                        _2870 = _2734;
                        _2871 = _2736;
                        _2872 = _2738;
                        _2873 = _2740;
                        _2874 = _2875;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2738;
                frontier_phi_55_56_ladder_1 = _2740;
                frontier_phi_55_56_ladder_2 = _2736;
                frontier_phi_55_56_ladder_3 = _2734;
                frontier_phi_55_56_ladder_4 = _2732;
                frontier_phi_55_56_ladder_5 = _2730;
            }
            else
            {
                frontier_phi_55_56_ladder = _2625;
                frontier_phi_55_56_ladder_1 = _2627;
                frontier_phi_55_56_ladder_2 = _2623;
                frontier_phi_55_56_ladder_3 = _2621;
                frontier_phi_55_56_ladder_4 = _2619;
                frontier_phi_55_56_ladder_5 = _2617;
            }
            _2729 = frontier_phi_55_56_ladder_5;
            _2731 = frontier_phi_55_56_ladder_4;
            _2733 = frontier_phi_55_56_ladder_3;
            _2735 = frontier_phi_55_56_ladder_2;
            _2737 = frontier_phi_55_56_ladder;
            _2739 = frontier_phi_55_56_ladder_1;
        }
        float _2744 = isnan(1.0) ? _794 : (isnan(_794) ? 1.0 : min(_794, 1.0));
        _2529 = (_2744 * _2735) + _1965;
        _2531 = (_2744 * _2737) + _1967;
        _2533 = (_2744 * _2739) + _1969;
        _2535 = ((_2729 * _778) * _2744) + _2310;
        _2537 = ((_2731 * _780) * _2744) + _2312;
        _2539 = ((_2733 * _781) * _2744) + _2314;
    }
    else
    {
        _2529 = _1965;
        _2531 = _1967;
        _2533 = _1969;
        _2535 = _2310;
        _2537 = _2312;
        _2539 = _2314;
    }
    float _4436 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4447 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4458 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    uint _2559 = _239 + 6u;
    float _2567 = _713 / cbSceneParam._m0[86u].x;
    float _2568 = _714 / cbSceneParam._m0[86u].y;
    vec4 _2582 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2567, _2568, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2584 = _2582.x;
    float _2585 = _2582.y;
    float _2586 = _2582.z;
    float _2587 = _2582.w;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _2642 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _2643 = _2642 / _648;
        float _2654 = _2643 * _698;
        float _2655 = _699 * _2643;
        float _2656 = (-0.0) - _2655;
        float _2657 = _2643 * _700;
        float _2659 = (cbSceneParam._m0[77u].w * _2656) / _2642;
        float _2660 = _2659 + cbSceneParam._m0[79u].w;
        float _2661 = cbSceneParam._m0[79u].w - _2655;
        float _2667 = sqrt(((_2654 * _2654) + (_2655 * _2655)) + (_2657 * _2657));
        float _2670 = (1.0 - (cbSceneParam._m0[77u].w / _2642)) * _2667;
        float _2675 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2677 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2830;
        if (abs((_2656 - _2659) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2830 = ((((_2660 > 0.0) ? exp2(_2675 * _2660) : (2.0 - exp2(_2677 * _2660))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2670;
        }
        else
        {
            float _2790 = 1.0 / cbSceneParam._m0[80u].x;
            float _2791 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : max(_2660, _2661));
            float _2792 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : min(_2660, _2661));
            float _2801 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : min(_2791, 0.0));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            _2830 = ((abs(_2667 / _2656) * cbSceneParam._m0[80u].y) * ((((_2801 - _2802) * 2.0) - ((exp2(_2675 * (isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0)))) - exp2(_2675 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))))) * _2790)) - ((exp2(_2677 * _2801) - exp2(_2677 * _2802)) * _2790))) + (_2670 * cbSceneParam._m0[80u].z);
        }
        vec4 _2832 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2567, _2568, 1.0), 0.0);
        float _2841 = exp2((_2830 * (-1.44269502162933349609375)) * (1.0 - _2832.w));
        float _2842 = log2(_2841);
        float _2858 = log2(_2587);
        _2679 = (exp2(_2858 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].x)) * _2832.x) / cbSceneParam._m0[78u].x)) + _2584;
        _2681 = (exp2(_2858 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].y)) * _2832.y) / cbSceneParam._m0[78u].y)) + _2585;
        _2683 = (exp2(_2858 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].z)) * _2832.z) / cbSceneParam._m0[78u].z)) + _2586;
        _2685 = _2841 * _2587;
    }
    else
    {
        _2679 = _2584;
        _2681 = _2585;
        _2683 = _2586;
        _2685 = _2587;
    }
    float _2697 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2698 = _2697 == 3.0;
    float _2699 = log2(_2685);
    float _2706 = exp2(_2699 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2529 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _794))) + ((_2535 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1602)) * cbPerFrame._m0[3u].x));
    float _2707 = exp2(_2699 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2531 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _794))) + ((_2537 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1602)) * cbPerFrame._m0[3u].x));
    float _2708 = exp2(_2699 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2533 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _794))) + ((_2539 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1602)) * cbPerFrame._m0[3u].x));
    float _2717 = (_2697 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2717 * (_2698 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2679)));
    SV_Target.y = _2717 * (_2698 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2681)));
    SV_Target.z = _2717 * (_2698 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2683)));
    SV_Target.w = cbInstanceData._m0[_2559].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2559].w;
}


