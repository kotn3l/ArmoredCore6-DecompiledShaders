#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1094;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3448 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3459 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3470 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _280) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _281) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _322 = _317.x * cbMtdParam._m0[9u].x;
    float _323 = _317.y * cbMtdParam._m0[9u].y;
    float _324 = _317.z * cbMtdParam._m0[9u].z;
    float _328 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _294.x) * _322;
    float _331 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _294.y) * _323;
    float _334 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _294.z) * _324;
    float _341 = ((_322 - _328) * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) + _328;
    float _342 = ((_323 - _331) * (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) + _331;
    float _343 = ((_324 - _334) * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) + _334;
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _382 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _386 = _382.z;
    float _390 = (_382.x * 2.0) + (-1.0);
    float _391 = (_382.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3481 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _397 = sqrt(1.0 - (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))));
    float _402 = _390 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_356.x * 2.0) + (-1.0)));
    float _403 = _391 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_356.y * 2.0) + (-1.0)));
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _418 = _416.x;
    float _419 = 1.0 - _418;
    float _450 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_418 - _419) * cbMtdParam._m0[24u].w) + _419) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3492 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _459 = ((((cbMtdParam._m0[10u].x - _341) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _451) + _341;
    float _460 = ((((cbMtdParam._m0[10u].y - _342) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _451) + _342;
    float _461 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _343)) * _451) + _343;
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _476 = _474.x;
    float _478 = _476 - (_476 * _451);
    float _483 = (((_356.z - _386) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _386;
    float _487 = ((cbMtdParam._m0[23u].y - _483) * _451) + _483;
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _515 = (_509.x * 2.0) + (-1.0);
    float _516 = (_509.y * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _3503 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _533 = (_451 * (((cbMtdParam._m0[22u].z * _402) - _402) + _515)) + _402;
    float _534 = (_451 * (((cbMtdParam._m0[22u].z * _403) - _403) + _516)) + _403;
    float _535 = (_451 * (sqrt(1.0 - (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) - _397)) + _397;
    float _537 = cbMtdParam._m0[22u].x + _382.w;
    float _540 = fma(_535, _229 * NORMAL.x, fma(_534, _236 * TANGENT.x, (_222 * _214) * _533));
    float _543 = fma(_535, _229 * NORMAL.y, fma(_534, _236 * TANGENT.y, (_222 * _215) * _533));
    float _546 = fma(_535, _229 * NORMAL.z, fma(_534, _236 * TANGENT.z, (_222 * _216) * _533));
    float _550 = inversesqrt(dot(vec3(_540, _543, _546), vec3(_540, _543, _546)));
    float _551 = _550 * _540;
    float _552 = _550 * _543;
    float _553 = _550 * _546;
    float _3514 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _554 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3536 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3547 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3558 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3569 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _559 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _573 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _624 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _614);
    float _625 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _614);
    float _626 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _614);
    float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
    float _631 = _624 * _630;
    float _632 = _625 * _630;
    float _633 = _626 * _630;
    float _639 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _640 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _661 = fma(_553, cbSceneParam._m0[5u].z, fma(_552, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _551));
    float _664 = fma(_553, cbSceneParam._m0[6u].z, fma(_552, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _551));
    float _667 = fma(_553, cbSceneParam._m0[7u].z, fma(_552, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _551));
    uint _681 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _687 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) * cbInstanceData._m0[_681].x;
    float _688 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * cbInstanceData._m0[_681].y;
    float _689 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_681].z;
    float _3580 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _693 = 1.0 - _559;
    float _694 = _690 * _693;
    float _695 = _691 * _693;
    float _696 = _692 * _693;
    float _701 = (_690 + (-0.039999999105930328369140625)) * _559;
    float _702 = (_691 + (-0.039999999105930328369140625)) * _559;
    float _703 = (_692 + (-0.039999999105930328369140625)) * _559;
    float _704 = _701 + 0.039999999105930328369140625;
    float _706 = _702 + 0.039999999105930328369140625;
    float _707 = _703 + 0.039999999105930328369140625;
    vec4 _716 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _639, cbSceneParam._m0[86u].y * _640));
    float _720 = ((isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * TEXCOORD_5.w) * _716.x;
    float _721 = dot(vec3(_551, _552, _553), vec3(_631, _632, _633));
    float _724 = _721 * 2.0;
    float _728 = (_724 * _551) - _631;
    float _729 = (_724 * _552) - _632;
    float _730 = (_724 * _553) - _633;
    float _734 = abs(dot(vec3(_631, _632, _633), vec3(_551, _552, _553)));
    float _3613 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _736 = sqrt(_554);
    float _749 = exp2((_736 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_736 * 3.0));
    float _755 = (1.0 - _749) * ((_736 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _756 = _749 * _736;
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1093;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _818 = fma(_792, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784));
        float _822 = fma(_792, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784));
        float _826 = fma(_792, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784));
        float _851 = _784 + _551;
        float _852 = _788 + _552;
        float _853 = _792 + _553;
        float _863 = fma(_853, cbModelParam._m0[26u].z, fma(_852, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851)) - _818;
        float _864 = fma(_853, cbModelParam._m0[27u].z, fma(_852, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851)) - _822;
        float _865 = fma(_853, cbModelParam._m0[28u].z, fma(_852, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851)) - _826;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_818 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_822 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[34u].z) + ((((((_826 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _921 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_887.x + (-0.5));
        float _923 = _921 * (_887.y + (-0.5));
        float _924 = _921 * (_887.z + (-0.5));
        float _931 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_894.x + (-0.5));
        float _933 = _931 * (_894.y + (-0.5));
        float _934 = _931 * (_894.z + (-0.5));
        float _941 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_901.x + (-0.5));
        float _943 = _941 * (_901.y + (-0.5));
        float _944 = _941 * (_901.z + (-0.5));
        float _951 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_908.x + (-0.5));
        float _953 = _951 * (_908.y + (-0.5));
        float _954 = _951 * (_908.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _975 = (dot(vec3(_551, _552, _553), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _985 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3661 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_987 + 1.0))) + _992) * _955;
        float _1002 = _923 * 0.5;
        float _1003 = _933 * 0.5;
        float _1004 = _943 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_551, _552, _553), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3694 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1029 + 1.0))) + _1034) * _956;
        float _1044 = _924 * 0.5;
        float _1045 = _934 * 0.5;
        float _1046 = _944 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_551, _552, _553), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3727 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1071 + 1.0))) + _1076) * _957;
        _1093 = _924;
        _1095 = _923;
        _1096 = _922;
        _1097 = _934;
        _1098 = _933;
        _1099 = _932;
        _1100 = _944;
        _1101 = _943;
        _1102 = _942;
        _1103 = _957;
        _1104 = _956;
        _1105 = _955;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _1094;
        _1095 = _1094;
        _1096 = _1094;
        _1097 = _1094;
        _1098 = _1094;
        _1099 = _1094;
        _1100 = _1094;
        _1101 = _1094;
        _1102 = _1094;
        _1103 = _1094;
        _1104 = _1094;
        _1105 = _1094;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1133 = fma(_792, cbModelParam._m0[30u].z, fma(_788, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _784));
        float _1137 = fma(_792, cbModelParam._m0[31u].z, fma(_788, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _784));
        float _1141 = fma(_792, cbModelParam._m0[32u].z, fma(_788, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _784));
        float _1164 = _784 + _551;
        float _1165 = _788 + _552;
        float _1166 = _792 + _553;
        float _1176 = fma(_1166, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164)) - _1133;
        float _1177 = fma(_1166, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164)) - _1137;
        float _1178 = fma(_1166, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164)) - _1141;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1133 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1137 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[35u].z) + ((((((_1141 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1232 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1199.x + (-0.5));
        float _1234 = _1232 * (_1199.y + (-0.5));
        float _1235 = _1232 * (_1199.z + (-0.5));
        float _1242 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1206.x + (-0.5));
        float _1244 = _1242 * (_1206.y + (-0.5));
        float _1245 = _1242 * (_1206.z + (-0.5));
        float _1252 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1213.x + (-0.5));
        float _1254 = _1252 * (_1213.y + (-0.5));
        float _1255 = _1252 * (_1213.z + (-0.5));
        float _1262 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1220.x + (-0.5));
        float _1264 = _1262 * (_1220.y + (-0.5));
        float _1265 = _1262 * (_1220.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_551, _552, _553), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3790 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1296 + 1.0))) + _1301) * _1266;
        float _1311 = _1234 * 0.5;
        float _1312 = _1244 * 0.5;
        float _1313 = _1254 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_551, _552, _553), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3823 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1338 + 1.0))) + _1343) * _1267;
        float _1353 = _1235 * 0.5;
        float _1354 = _1245 * 0.5;
        float _1355 = _1255 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_551, _552, _553), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3856 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1380 + 1.0))) + _1385) * _1268;
        _1402 = _1235;
        _1403 = _1234;
        _1404 = _1233;
        _1405 = _1245;
        _1406 = _1244;
        _1407 = _1243;
        _1408 = _1255;
        _1409 = _1254;
        _1410 = _1253;
        _1411 = _1268;
        _1412 = _1267;
        _1413 = _1266;
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1094;
        _1403 = _1094;
        _1404 = _1094;
        _1405 = _1094;
        _1406 = _1094;
        _1407 = _1094;
        _1408 = _1094;
        _1409 = _1094;
        _1410 = _1094;
        _1411 = _1094;
        _1412 = _1094;
        _1413 = _1094;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1106)) + _1106;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1107)) + _1107;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1108)) + _1108;
    float _1449 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1426));
    float _1470 = _728 * 0.5;
    float _1471 = _729 * 0.5;
    float _1472 = _730 * 0.5;
    float _1473 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1476 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1479 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1513;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1486 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1093, _1097, _1100, _1103));
        float _1490 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1494 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1501 = dot(vec4(cbModelParam._m0[39u]), vec4(_1470, _1471, _1472, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1524;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1515 = dot(vec4(cbModelParam._m0[40u]), vec4(_1470, _1471, _1472, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1528 = (_1524 * cbModelParam._m0[1u].x) + (_1513 * (1.0 - cbModelParam._m0[1u].x));
    float _1538 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _554);
    float _1539 = isnan(_1538) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1538 : min(cbModelParam._m0[25u].z, _1538));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_792, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_792, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_792, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_730, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728));
        float _1602 = fma(_730, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728));
        float _1605 = fma(_730, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1633 = frontier_phi_14_12_ladder;
        }
        float _1859;
        if (_1602 > 0.0)
        {
            _1859 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1859 = frontier_phi_23_19_ladder;
        }
        float _2116;
        if (_1605 > 0.0)
        {
            _2116 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2116 = frontier_phi_35_30_ladder;
        }
        float _2118 = isnan(_1859) ? _1633 : (isnan(_1633) ? _1859 : min(_1633, _1859));
        float _2119 = isnan(_2116) ? _2118 : (isnan(_2118) ? _2116 : min(_2118, _2116));
        float _2123 = (_2119 * _1599) + _1588;
        float _2124 = (_2119 * _1602) + _1592;
        float _2125 = (_2119 * _1605) + _1596;
        float _2126 = _2119 * 9.9999997473787516355514526367188e-05;
        float _2128 = (-1.0) - _2126;
        float _2130 = _2126 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2125 > _2130) || ((_2125 < _2128) || ((_2124 > _2130) || ((_2124 < _2128) || ((_2123 < _2128) || (_2123 > _2130))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2253 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2125, cbModelParam._m0[9u].z, fma(_2124, cbModelParam._m0[9u].y, _2123 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2125, cbModelParam._m0[10u].z, fma(_2124, cbModelParam._m0[10u].y, _2123 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2125, cbModelParam._m0[11u].z, fma(_2124, cbModelParam._m0[11u].y, _2123 * cbModelParam._m0[11u].x))), _1539);
            frontier_phi_13_35_ladder = _2253.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2253.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2253.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_13_35_ladder_2;
        _1623 = frontier_phi_13_35_ladder_1;
        _1625 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_728, _729, _730), _1539);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _554);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1685 = fma(_792, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784)) + cbModelParam._m0[21u].w;
        float _1689 = fma(_792, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784)) + cbModelParam._m0[22u].w;
        float _1693 = fma(_792, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784)) + cbModelParam._m0[23u].w;
        float _1696 = fma(_730, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728));
        float _1699 = fma(_730, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728));
        float _1702 = fma(_730, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728));
        float _1864;
        if (_1696 > 0.0)
        {
            _1864 = abs((1.0 - _1685) / _1696);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1685 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1864 = frontier_phi_25_21_ladder;
        }
        float _2143;
        if (_1699 > 0.0)
        {
            _2143 = abs((1.0 - _1689) / _1699);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1689 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2143 = frontier_phi_37_32_ladder;
        }
        float _2356;
        if (_1702 > 0.0)
        {
            _2356 = abs((1.0 - _1693) / _1702);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1693 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2356 = frontier_phi_46_43_ladder;
        }
        float _2358 = isnan(_2143) ? _1864 : (isnan(_1864) ? _2143 : min(_1864, _2143));
        float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
        float _2363 = (_2359 * _1696) + _1685;
        float _2364 = (_2359 * _1699) + _1689;
        float _2365 = (_2359 * _1702) + _1693;
        float _2366 = _2359 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2366;
        float _2369 = _2366 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2365 > _2369) || ((_2365 < _2367) || ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 < _2367) || (_2363 > _2369))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2365, cbModelParam._m0[17u].z, fma(_2364, cbModelParam._m0[17u].y, _2363 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2365, cbModelParam._m0[18u].z, fma(_2364, cbModelParam._m0[18u].y, _2363 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2365, cbModelParam._m0[19u].z, fma(_2364, cbModelParam._m0[19u].y, _2363 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_22_46_ladder = _2564.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2564.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2564.x * cbModelParam._m0[1u].z;
        }
        _1721 = frontier_phi_22_46_ladder_2;
        _1723 = frontier_phi_22_46_ladder_1;
        _1725 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_728, _729, _730), _1630);
        _1721 = _1705.x * cbModelParam._m0[1u].z;
        _1723 = _1705.y * cbModelParam._m0[1u].z;
        _1725 = _1705.z * cbModelParam._m0[1u].z;
    }
    float _1738 = (((_755 * _704) + _756) * _720) * ((cbModelParam._m0[1u].w * (_1721 - _1621)) + _1621);
    float _1740 = (((_755 * _706) + _756) * _720) * ((cbModelParam._m0[1u].w * (_1723 - _1623)) + _1623);
    float _1742 = (((_755 * _707) + _756) * _720) * ((cbModelParam._m0[1u].w * (_1725 - _1625)) + _1625);
    float _1745 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1740, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1740, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1740, cbSceneParam._m0[91u].y, _1738 * cbSceneParam._m0[91u].x));
    vec4 _1759 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_639, _640));
    float _1761 = _1759.w;
    float _1773 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1761);
    float _1774 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1761);
    float _1775 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1761);
    uvec4 _1779 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _1781 = _1779.x * 14u;
    uint _1782 = _1781 + 13u;
    float _1789 = _720 + (-1.0);
    float _1794 = (cbLight._m0[_1782].x * _1789) + 1.0;
    float _1795 = (cbLight._m0[_1782].y * _1789) + 1.0;
    float _1796 = (cbLight._m0[_1782].z * _1789) + 1.0;
    float _1797 = (cbLight._m0[_1782].w * _1789) + 1.0;
    uint _1798 = _1781 + 5u;
    float _1804 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1808 = _1781 + 4u;
    float _1818 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
    uint _1822 = _1781 | 1u;
    float _1833 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_551, _552, _553));
    float _1836 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_551, _552, _553));
    float _3992 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _4003 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1841 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.3183098733425140380859375;
    float _1843 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1850 = ((cbLight._m0[_1798].x * _1804) * _1843) + (((cbLight._m0[_1808].x * _1773) * _1818) * _1841);
    float _1851 = ((_1804 * cbLight._m0[_1798].y) * _1843) + (((cbLight._m0[_1808].y * _1774) * _1818) * _1841);
    float _1852 = ((_1804 * cbLight._m0[_1798].z) * _1843) + (((cbLight._m0[_1808].z * _1775) * _1818) * _1841);
    uvec4 _1856 = floatBitsToUint(cbLight._m0[_1781 + 12u]);
    bool _1858 = _1856.x == 0u;
    float _1869;
    float _1871;
    float _1873;
    if (_1858)
    {
        _1869 = _1850;
        _1871 = _1851;
        _1873 = _1852;
    }
    else
    {
        uint _1877 = _1781 + 6u;
        float _1893 = (dot(vec3(cbLight._m0[_1781 + 2u].xyz), vec3(_551, _552, _553)) * 0.5) + 0.5;
        float _1894 = _1893 * _1893;
        float _4014 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1896 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _1869 = (((cbLight._m0[_1877].x * 0.3183098733425140380859375) * _1895) * _1896) + _1850;
        _1871 = (((cbLight._m0[_1877].y * 0.3183098733425140380859375) * _1895) * _1896) + _1851;
        _1873 = (((cbLight._m0[_1877].z * 0.3183098733425140380859375) * _1895) * _1896) + _1852;
    }
    bool _1876 = _1856.y == 0u;
    float _1914;
    float _1916;
    float _1918;
    if (_1876)
    {
        _1914 = _1869;
        _1916 = _1871;
        _1918 = _1873;
    }
    else
    {
        uint _2087 = _1781 + 7u;
        float _2103 = (dot(vec3(cbLight._m0[_1781 + 3u].xyz), vec3(_551, _552, _553)) * 0.5) + 0.5;
        float _2104 = _2103 * _2103;
        float _4030 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2105 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2106 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _1914 = (((cbLight._m0[_2087].x * 0.3183098733425140380859375) * _2105) * _2106) + _1869;
        _1916 = (((cbLight._m0[_2087].y * 0.3183098733425140380859375) * _2105) * _2106) + _1871;
        _1918 = (((cbLight._m0[_2087].z * 0.3183098733425140380859375) * _2105) * _2106) + _1873;
    }
    uint _1921 = _1781 + 8u;
    float _1934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _554) * 0.949999988079071044921875);
    float _1935 = _1934 * _1934;
    float _1936 = cbLight._m0[_1781].x + _631;
    float _1937 = cbLight._m0[_1781].y + _632;
    float _1938 = cbLight._m0[_1781].z + _633;
    float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
    float _1943 = _1942 * _1936;
    float _1944 = _1942 * _1937;
    float _1945 = _1942 * _1938;
    float _1946 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1781].xyz));
    float _4046 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _1950 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _1951 = dot(vec3(_551, _552, _553), vec3(_1943, _1944, _1945));
    float _4068 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1955 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1943, _1944, _1945));
    float _4079 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1959 = _1935 * _1935;
    float _1963 = ((_1954 * _1954) * (_1959 + (-1.0))) + 1.0;
    float _1971 = exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0);
    float _1972 = 0.959999978542327880859375 - _701;
    float _1974 = 0.959999978542327880859375 - _702;
    float _1975 = 0.959999978542327880859375 - _703;
    float _1982 = 1.0 - _1935;
    float _1993 = (0.5 / (((_1950 * ((_1949 * _1982) + _1935)) + 9.9999999392252902907785028219223e-09) + (((_1950 * _1982) + _1935) * _1949))) * _1949;
    float _4090 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1995 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1959 / ((_1963 * _1963) * 3.141590118408203125));
    uint _2009 = _1781 + 9u;
    float _2020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1822].w)) * _554) * 0.949999988079071044921875);
    float _2021 = _2020 * _2020;
    float _2022 = cbLight._m0[_1822].x + _631;
    float _2023 = cbLight._m0[_1822].y + _632;
    float _2024 = cbLight._m0[_1822].z + _633;
    float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
    float _2029 = _2028 * _2022;
    float _2030 = _2028 * _2023;
    float _2031 = _2028 * _2024;
    float _2032 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1822].xyz));
    float _4101 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _2036 = dot(vec3(_551, _552, _553), vec3(_2029, _2030, _2031));
    float _4112 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2040 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_2029, _2030, _2031));
    float _4123 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2044 = _2021 * _2021;
    float _2048 = ((_2039 * _2039) * (_2044 + (-1.0))) + 1.0;
    float _2055 = exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0);
    float _2062 = 1.0 - _2021;
    float _2072 = (0.5 / (((_1950 * ((_2035 * _2062) + _2021)) + 9.9999999392252902907785028219223e-09) + (((_1950 * _2062) + _2021) * _2035))) * _2035;
    float _4134 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2074 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2044 / ((_2048 * _2048) * 3.141590118408203125));
    float _2084 = (((((_2055 * _1972) + _704) * cbLight._m0[_2009].x) * _2074) * _1804) + ((((cbLight._m0[_1921].x * _1773) * ((_1971 * _1972) + _704)) * _1995) * _1818);
    float _2085 = (((((_2055 * _1974) + _706) * cbLight._m0[_2009].y) * _2074) * _1804) + ((((cbLight._m0[_1921].y * _1774) * ((_1971 * _1974) + _706)) * _1995) * _1818);
    float _2086 = (((((_2055 * _1975) + _707) * cbLight._m0[_2009].z) * _2074) * _1804) + ((((cbLight._m0[_1921].z * _1775) * ((_1971 * _1975) + _707)) * _1995) * _1818);
    float _2148;
    float _2150;
    float _2152;
    if (_1858)
    {
        _2148 = _2084;
        _2150 = _2085;
        _2152 = _2086;
    }
    else
    {
        uint _2154 = _1781 + 2u;
        uint _2158 = _1781 + 10u;
        float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _554) * 0.949999988079071044921875);
        float _2173 = _2172 * _2172;
        float _2174 = cbLight._m0[_2154].x + _631;
        float _2175 = cbLight._m0[_2154].y + _632;
        float _2176 = cbLight._m0[_2154].z + _633;
        float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
        float _2181 = _2180 * _2174;
        float _2182 = _2180 * _2175;
        float _2183 = _2180 * _2176;
        float _2184 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_2154].xyz));
        float _4145 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2187 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2188 = dot(vec3(_551, _552, _553), vec3(_2181, _2182, _2183));
        float _4156 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2192 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2181, _2182, _2183));
        float _4167 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2196 = _2173 * _2173;
        float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
        float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * 5.0);
        float _2214 = 1.0 - _2173;
        float _2224 = (0.5 / (((_1950 * ((_2187 * _2214) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_1950 * _2214) + _2173) * _2187))) * _2187;
        float _4178 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2226 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
        float _2227 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _2148 = (((((_2207 * _1972) + _704) * cbLight._m0[_2158].x) * _2226) * _2227) + _2084;
        _2150 = (((((_2207 * _1974) + _706) * cbLight._m0[_2158].y) * _2226) * _2227) + _2085;
        _2152 = (((((_2207 * _1975) + _707) * cbLight._m0[_2158].z) * _2226) * _2227) + _2086;
    }
    float _2262;
    float _2264;
    float _2266;
    if (_1876)
    {
        _2262 = _2148;
        _2264 = _2150;
        _2266 = _2152;
    }
    else
    {
        uint _2273 = _1781 + 3u;
        uint _2277 = _1781 + 11u;
        float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _554) * 0.949999988079071044921875);
        float _2292 = _2291 * _2291;
        float _2293 = cbLight._m0[_2273].x + _631;
        float _2294 = cbLight._m0[_2273].y + _632;
        float _2295 = cbLight._m0[_2273].z + _633;
        float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
        float _2300 = _2299 * _2293;
        float _2301 = _2299 * _2294;
        float _2302 = _2299 * _2295;
        float _2303 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_2273].xyz));
        float _4194 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2307 = dot(vec3(_551, _552, _553), vec3(_2300, _2301, _2302));
        float _4205 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2311 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2300, _2301, _2302));
        float _4216 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2315 = _2292 * _2292;
        float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
        float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0);
        float _2333 = 1.0 - _2292;
        float _2343 = (0.5 / (((_1950 * ((_2306 * _2333) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_1950 * _2333) + _2292) * _2306))) * _2306;
        float _4227 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2345 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
        float _2346 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2262 = (((((_2326 * _1972) + _704) * cbLight._m0[_2277].x) * _2345) * _2346) + _2148;
        _2264 = (((((_2326 * _1974) + _706) * cbLight._m0[_2277].y) * _2345) * _2346) + _2150;
        _2266 = (((((_2326 * _1975) + _707) * cbLight._m0[_2277].z) * _2345) * _2346) + _2152;
    }
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    if (_1779.y == 0u)
    {
        float _2421 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2421;
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2421;
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2421;
        uvec4 _2436 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2437 = _2436.x;
        uint _2448 = uint((float(_2436.y) * floor(float(uint(cbSceneParam._m0[85u].y * _640) / _2437))) + floor(float(uint(cbSceneParam._m0[85u].x * _639) / _2437)));
        float _2458 = (log2(_2424 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2459 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        uint _2462 = uint(isnan(14.0) ? _2459 : (isnan(_2459) ? 14.0 : min(_2459, 14.0)));
        uvec4 _2467 = texelFetch(g_lightClusterGridBuffer, int(((_2462 << 2u) + (_2448 << 6u)) >> 2u));
        uint _2468 = _2467.x;
        uint _2469 = _2436.z;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        if (((((1u << ((_2469 >> 4u) & 15u)) + 4294967295u) & _2468) == 0u) || ((_2469 & 240u) == 0u))
        {
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
        }
        else
        {
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            uint _2720 = 0u;
            uint _2729;
            bool _2730;
            for (;;)
            {
                _2729 = texelFetch(g_lightClassification, int((((_2462 << 5u) + (_2448 << 9u)) + (_2720 << 2u)) >> 2u)).x;
                _2730 = _2729 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2730)
                {
                    frontier_phi_61_pred = _2714;
                    frontier_phi_61_pred_1 = _2719;
                    frontier_phi_61_pred_2 = _2718;
                    frontier_phi_61_pred_3 = _2717;
                    frontier_phi_61_pred_4 = _2716;
                    frontier_phi_61_pred_5 = _2715;
                }
                else
                {
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    uint _2844;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2729;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    for (;;)
                    {
                        uint _2848 = uint(findLSB(_2844)) + (_2720 << 5u);
                        uint _2845 = (_2844 + 4294967295u) & _2844;
                        uint _2850 = _2848 * 48u;
                        vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 3u)).x));
                        uint _2870 = (_2848 * 48u) + 4u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2889 = (_2848 * 48u) + 8u;
                        vec3 _2900 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x));
                        float _2904 = _2864.x - _2422;
                        float _2905 = _2864.y - _2423;
                        float _2906 = _2864.z - _2424;
                        float _2907 = dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906));
                        float _2910 = inversesqrt(_2907);
                        float _2911 = _2910 * _2904;
                        float _2912 = _2910 * _2905;
                        float _2913 = _2910 * _2906;
                        float _2914 = dot(vec3(_661, _664, _667), vec3(_2911, _2912, _2913));
                        float _2919 = 1.0 - (_2907 * _2864.w);
                        float _4253 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2920 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2921 = sqrt(_2907) * _2883.w;
                        float _2924 = 1.39999997615814208984375 / (_2921 + 1.39999997615814208984375);
                        float _2925 = _2924 * _2924;
                        float _2928 = ((1.0 - _2925) * _2914) + _2925;
                        float _2931 = _2921 * _2921;
                        float _2935 = ((isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0))) * _2920) / ((_2931 * 0.699999988079071044921875) + 1.0);
                        float _2939 = (-0.0) - _2422;
                        float _2940 = (-0.0) - _2423;
                        float _2941 = (-0.0) - _2424;
                        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
                        float _2946 = _2945 * _2939;
                        float _2947 = _2945 * _2940;
                        float _2948 = _2945 * _2941;
                        float _2956 = exp2(log2(1.0 / ((_2931 * 3.5) + 5.0)) * 0.25);
                        float _2957 = 1.0 - _736;
                        float _2964 = sqrt(1.0 - ((1.0 - (_2957 * _2957)) * (1.0 - (_2956 * _2956))));
                        float _2965 = _2964 * _2964;
                        float _2966 = _2965 * _2965;
                        float _2967 = _2946 + _2911;
                        float _2968 = _2947 + _2912;
                        float _2969 = _2948 + _2913;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2977 = dot(vec3(_661, _664, _667), vec3(_2946, _2947, _2948));
                        float _4269 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _2981 = dot(vec3(_661, _664, _667), vec3(_2973 * _2967, _2973 * _2968, _2973 * _2969));
                        float _4280 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2984 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _2988 = ((_2984 * _2984) * (_2966 + (-1.0))) + 1.0;
                        float _2989 = _2924 * _2965;
                        float _2990 = _2989 * _2989;
                        float _2993 = ((1.0 - _2990) * _2914) + _2990;
                        float _4291 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2994 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _2995 = 1.0 - _2965;
                        float _3005 = (0.5 / (((_2994 * ((_2980 * _2995) + _2965)) + 9.9999999392252902907785028219223e-09) + (((_2994 * _2995) + _2965) * _2980))) * _2994;
                        float _4302 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3016 = (((_2966 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_2988 * _2988) * ((_2931 * 2.1991131305694580078125) + 3.141590118408203125))) * _2920;
                        _2773 = (_2935 * _2883.x) + _2841;
                        _2774 = (_2935 * _2883.y) + _2842;
                        _2775 = (_2935 * _2883.z) + _2843;
                        _2770 = (_3016 * _2900.x) + _2838;
                        _2771 = (_3016 * _2900.y) + _2839;
                        _2772 = (_3016 * _2900.z) + _2840;
                        if (_2845 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2845;
                        }
                    }
                    frontier_phi_61_pred = _2770;
                    frontier_phi_61_pred_1 = _2775;
                    frontier_phi_61_pred_2 = _2774;
                    frontier_phi_61_pred_3 = _2773;
                    frontier_phi_61_pred_4 = _2772;
                    frontier_phi_61_pred_5 = _2771;
                }
                _2570 = frontier_phi_61_pred;
                _2580 = frontier_phi_61_pred_1;
                _2578 = frontier_phi_61_pred_2;
                _2576 = frontier_phi_61_pred_3;
                _2574 = frontier_phi_61_pred_4;
                _2572 = frontier_phi_61_pred_5;
                uint _2721 = _2720 + 1u;
                if (_2721 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2714 = _2570;
                    _2715 = _2572;
                    _2716 = _2574;
                    _2717 = _2576;
                    _2718 = _2578;
                    _2719 = _2580;
                    _2720 = _2721;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
        }
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.z;
        uint _2586 = (_2584 >> 8u) & 15u;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        if (((4294967295u << _2586) & _2468) == 0u)
        {
            _2682 = _2569;
            _2684 = _2571;
            _2686 = _2573;
            _2688 = _2575;
            _2690 = _2577;
            _2692 = _2579;
        }
        else
        {
            float _2707 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
            float _2708 = _2707 * _2422;
            float _2709 = _2707 * _2423;
            float _2710 = _2707 * _2424;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2586 < ((_2584 >> 12u) & 15u))
            {
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2821 = _2569;
                float _2822 = _2571;
                float _2823 = _2573;
                float _2824 = _2575;
                float _2825 = _2577;
                float _2826 = _2579;
                uint _2827 = _2586;
                uint _2836;
                bool _2837;
                for (;;)
                {
                    _2836 = texelFetch(g_lightClassification, int((((_2462 << 5u) + (_2448 << 9u)) + (_2827 << 2u)) >> 2u)).x;
                    _2837 = _2836 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2837)
                    {
                        frontier_phi_67_pred = _2824;
                        frontier_phi_67_pred_1 = _2825;
                        frontier_phi_67_pred_2 = _2826;
                        frontier_phi_67_pred_3 = _2823;
                        frontier_phi_67_pred_4 = _2822;
                        frontier_phi_67_pred_5 = _2821;
                    }
                    else
                    {
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3034 = _2821;
                        float _3035 = _2822;
                        float _3036 = _2823;
                        float _3037 = _2824;
                        float _3038 = _2825;
                        float _3039 = _2826;
                        uint _3040 = _2836;
                        uint _3041;
                        vec4 _3066;
                        float _3067;
                        vec4 _3082;
                        vec3 _3094;
                        vec4 _3109;
                        vec4 _3124;
                        float _3170;
                        bool _3171;
                        for (;;)
                        {
                            uint _3051 = ((_2827 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3040));
                            _3041 = (_3040 + 4294967295u) & _3040;
                            uint _3053 = _3051 * 40u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            _3067 = _3066.w;
                            uint _3069 = (_3051 * 40u) + 4u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3084 = (_3051 * 40u) + 8u;
                            _3094 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x));
                            uint _3096 = (_3051 * 40u) + 16u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3051 * 40u) + 20u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3126 = (_3051 * 40u) + 24u;
                            vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3145 = (_3051 * 40u) + 28u;
                            vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            _3170 = fma(_2424, _3158.z, fma(_2423, _3158.y, _3158.x * _2422)) + _3158.w;
                            _3171 = !((fma(_2424, _3139.z, fma(_2423, _3139.y, _3139.x * _2422)) + _3139.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3171)
                            {
                                float _3198 = _3066.x - _2422;
                                float _3199 = _3066.y - _2423;
                                float _3200 = _3066.z - _2424;
                                float _3201 = dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200));
                                float _3204 = inversesqrt(_3201);
                                float _3205 = _3204 * _3198;
                                float _3206 = _3204 * _3199;
                                float _3207 = _3204 * _3200;
                                float _3211 = 1.0 - (_3201 / (_3067 * _3067));
                                float _4313 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3212 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3216 = sqrt(_3201) * _3082.w;
                                float _3218 = 1.39999997615814208984375 / (_3216 + 1.39999997615814208984375);
                                float _3219 = _3218 * _3218;
                                float _3222 = ((1.0 - _3219) * dot(vec3(_3205, _3206, _3207), vec3(_661, _664, _667))) + _3219;
                                float _3225 = _3216 * _3216;
                                float _3229 = (fma(_2424, _3109.z, fma(_2423, _3109.y, _3109.x * _2422)) + _3109.w) / _3170;
                                float _3230 = (fma(_2424, _3124.z, fma(_2423, _3124.y, _3124.x * _2422)) + _3124.w) / _3170;
                                float _3234 = 1.0 - dot(vec2(_3229, _3230), vec2(_3229, _3230));
                                float _4329 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3236 = _3235 * (((isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))) * _3212) / ((_3225 * 0.699999988079071044921875) + 1.0));
                                float _3248 = exp2(log2(1.0 / ((_3225 * 3.5) + 5.0)) * 0.25);
                                float _3249 = 1.0 - _736;
                                float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                                float _3257 = _3256 * _3256;
                                float _3258 = _3257 * _3257;
                                float _3259 = _3205 - _2708;
                                float _3260 = _3206 - _2709;
                                float _3261 = _3207 - _2710;
                                float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                                float _3269 = dot(vec3(_661, _664, _667), vec3((-0.0) - _2708, (-0.0) - _2709, (-0.0) - _2710));
                                float _4340 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3273 = dot(vec3(_661, _664, _667), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                                float _4351 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3276 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                                float _3281 = _3218 * _3257;
                                float _3282 = _3281 * _3281;
                                float _3288 = ((1.0 - _3282) * dot(vec3(_661, _664, _667), vec3(_3205, _3206, _3207))) + _3282;
                                float _4362 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3290 = 1.0 - _3257;
                                float _3300 = (0.5 / (((_3289 * ((_3272 * _3290) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3289 * _3290) + _3257) * _3272))) * _3289;
                                float _4373 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3310 = (_3235 * _3212) * (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) / ((_3280 * _3280) * ((_3225 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3310 * _3094.x;
                                frontier_phi_73_pred_1 = _3310 * _3094.y;
                                frontier_phi_73_pred_2 = _3236 * _3082.z;
                                frontier_phi_73_pred_3 = _3236 * _3082.y;
                                frontier_phi_73_pred_4 = _3236 * _3082.x;
                                frontier_phi_73_pred_5 = _3310 * _3094.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3314 = frontier_phi_73_pred;
                            _3315 = frontier_phi_73_pred_1;
                            _3319 = frontier_phi_73_pred_2;
                            _3318 = frontier_phi_73_pred_3;
                            _3317 = frontier_phi_73_pred_4;
                            _3316 = frontier_phi_73_pred_5;
                            _3024 = _3317 + _3037;
                            _3025 = _3318 + _3038;
                            _3026 = _3319 + _3039;
                            _3021 = _3314 + _3034;
                            _3022 = _3315 + _3035;
                            _3023 = _3316 + _3036;
                            if (_3041 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3041;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3024;
                        frontier_phi_67_pred_1 = _3025;
                        frontier_phi_67_pred_2 = _3026;
                        frontier_phi_67_pred_3 = _3023;
                        frontier_phi_67_pred_4 = _3022;
                        frontier_phi_67_pred_5 = _3021;
                    }
                    _2689 = frontier_phi_67_pred;
                    _2691 = frontier_phi_67_pred_1;
                    _2693 = frontier_phi_67_pred_2;
                    _2687 = frontier_phi_67_pred_3;
                    _2685 = frontier_phi_67_pred_4;
                    _2683 = frontier_phi_67_pred_5;
                    uint _2828 = _2827 + 1u;
                    if (_2828 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2821 = _2683;
                        _2822 = _2685;
                        _2823 = _2687;
                        _2824 = _2689;
                        _2825 = _2691;
                        _2826 = _2693;
                        _2827 = _2828;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2691;
                frontier_phi_55_56_ladder_1 = _2693;
                frontier_phi_55_56_ladder_2 = _2689;
                frontier_phi_55_56_ladder_3 = _2687;
                frontier_phi_55_56_ladder_4 = _2685;
                frontier_phi_55_56_ladder_5 = _2683;
            }
            else
            {
                frontier_phi_55_56_ladder = _2577;
                frontier_phi_55_56_ladder_1 = _2579;
                frontier_phi_55_56_ladder_2 = _2575;
                frontier_phi_55_56_ladder_3 = _2573;
                frontier_phi_55_56_ladder_4 = _2571;
                frontier_phi_55_56_ladder_5 = _2569;
            }
            _2682 = frontier_phi_55_56_ladder_5;
            _2684 = frontier_phi_55_56_ladder_4;
            _2686 = frontier_phi_55_56_ladder_3;
            _2688 = frontier_phi_55_56_ladder_2;
            _2690 = frontier_phi_55_56_ladder;
            _2692 = frontier_phi_55_56_ladder_1;
        }
        float _2697 = isnan(1.0) ? _720 : (isnan(_720) ? 1.0 : min(_720, 1.0));
        _2481 = (_2697 * _2688) + _1914;
        _2483 = (_2697 * _2690) + _1916;
        _2485 = (_2697 * _2692) + _1918;
        _2487 = ((_2682 * _704) * _2697) + _2262;
        _2489 = ((_2684 * _706) * _2697) + _2264;
        _2491 = ((_2686 * _707) * _2697) + _2266;
    }
    else
    {
        _2481 = _1914;
        _2483 = _1916;
        _2485 = _1918;
        _2487 = _2262;
        _2489 = _2264;
        _2491 = _2266;
    }
    float _4389 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _4400 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4411 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    uint _2511 = _261 + 6u;
    float _2519 = _639 / cbSceneParam._m0[86u].x;
    float _2520 = _640 / cbSceneParam._m0[86u].y;
    vec4 _2534 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2519, _2520, (log2((isnan(cbSceneParam._m0[77u].w) ? _573 : (isnan(_573) ? cbSceneParam._m0[77u].w : min(_573, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2536 = _2534.x;
    float _2537 = _2534.y;
    float _2538 = _2534.z;
    float _2539 = _2534.w;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    if (_573 > cbSceneParam._m0[78u].w)
    {
        float _2594 = isnan(_573) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _573 : min(cbSceneParam._m0[80u].w, _573));
        float _2595 = _2594 / _573;
        float _2606 = _2595 * _624;
        float _2607 = _625 * _2595;
        float _2608 = (-0.0) - _2607;
        float _2610 = _2595 * _626;
        float _2612 = (cbSceneParam._m0[77u].w * _2608) / _2594;
        float _2613 = _2612 + cbSceneParam._m0[79u].w;
        float _2614 = cbSceneParam._m0[79u].w - _2607;
        float _2620 = sqrt(((_2606 * _2606) + (_2607 * _2607)) + (_2610 * _2610));
        float _2623 = (1.0 - (cbSceneParam._m0[77u].w / _2594)) * _2620;
        float _2628 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2630 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2783;
        if (abs((_2608 - _2612) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2783 = ((((_2613 > 0.0) ? exp2(_2628 * _2613) : (2.0 - exp2(_2630 * _2613))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2623;
        }
        else
        {
            float _2743 = 1.0 / cbSceneParam._m0[80u].x;
            float _2744 = isnan(_2614) ? _2613 : (isnan(_2613) ? _2614 : max(_2613, _2614));
            float _2745 = isnan(_2614) ? _2613 : (isnan(_2613) ? _2614 : min(_2613, _2614));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            float _2755 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : min(_2745, 0.0));
            _2783 = ((abs(_2620 / _2608) * cbSceneParam._m0[80u].y) * ((((_2754 - _2755) * 2.0) - ((exp2(_2628 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0)))) - exp2(_2628 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0))))) * _2743)) - ((exp2(_2630 * _2754) - exp2(_2630 * _2755)) * _2743))) + (_2623 * cbSceneParam._m0[80u].z);
        }
        vec4 _2785 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2519, _2520, 1.0), 0.0);
        float _2794 = exp2((_2783 * (-1.44269502162933349609375)) * (1.0 - _2785.w));
        float _2795 = log2(_2794);
        float _2811 = log2(_2539);
        _2632 = (exp2(_2811 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].x)) * _2785.x) / cbSceneParam._m0[78u].x)) + _2536;
        _2634 = (exp2(_2811 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].y)) * _2785.y) / cbSceneParam._m0[78u].y)) + _2537;
        _2636 = (exp2(_2811 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].z)) * _2785.z) / cbSceneParam._m0[78u].z)) + _2538;
        _2638 = _2794 * _2539;
    }
    else
    {
        _2632 = _2536;
        _2634 = _2537;
        _2636 = _2538;
        _2638 = _2539;
    }
    float _2650 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2651 = _2650 == 3.0;
    float _2652 = log2(_2638);
    float _2659 = exp2(_2652 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2481 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _720))) + ((_2487 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1528)) * cbPerFrame._m0[3u].x));
    float _2660 = exp2(_2652 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2483 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _720))) + ((_2489 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1528)) * cbPerFrame._m0[3u].x));
    float _2661 = exp2(_2652 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2485 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _720))) + ((_2491 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1528)) * cbPerFrame._m0[3u].x));
    float _2670 = (_2650 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2670 * (_2651 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2632)));
    SV_Target.y = _2670 * (_2651 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2634)));
    SV_Target.z = _2670 * (_2651 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2636)));
    SV_Target.w = cbInstanceData._m0[_2511].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2511].w;
}


