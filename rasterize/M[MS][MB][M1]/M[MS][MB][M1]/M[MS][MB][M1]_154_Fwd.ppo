#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1228;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _356 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _356) * cbMtdParam._m0[24u].y) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3554 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _381 = (_374 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _382 = (_374 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _383 = (_374 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    float _452 = ((_422.z - _443) * _374) + _443;
    float _455 = ((((_422.x - _441) * _374) + _441) * 2.0) + (-1.0);
    float _457 = ((((_422.y - _442) * _374) + _442) * 2.0) + (-1.0);
    float _458 = dot(vec2(_455, _457), vec2(_455, _457));
    float _3565 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _463 = sqrt(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))));
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _491 = (((_479.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _455;
    float _492 = (((_479.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _457;
    float _495 = fma(_463, _224, fma(_492, _231, _491 * _217));
    float _498 = fma(_463, _225, fma(_492, _232, _491 * _218));
    float _501 = fma(_463, _226, fma(_492, _233, _491 * _219));
    float _505 = inversesqrt(dot(vec3(_495, _498, _501), vec3(_495, _498, _501)));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _534 = _532.x;
    float _535 = 1.0 - _534;
    float _539 = ((_534 - _535) * cbMtdParam._m0[24u].z) + _535;
    float _541 = (cbMtdParam._m0[19u].x + dot(vec4(_505 * _495, _505 * _498, _505 * _501, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_539 * cbMtdParam._m0[21u].z);
    float _3576 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _557 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_539 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3587 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _562 = ((_542 * ((_402.x * cbMtdParam._m0[18u].x) - _381)) * _558) + _381;
    float _563 = ((_542 * ((_402.y * cbMtdParam._m0[18u].y) - _382)) * _558) + _382;
    float _564 = ((_542 * ((_402.z * cbMtdParam._m0[18u].z) - _383)) * _558) + _383;
    vec4 _576 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _590 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _592 = _590.x;
    float _610 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _592) * _374) + _592;
    float _614 = ((_576.x - _610) * cbMtdParam._m0[19u].z) + _610;
    float _617 = _614 - ((_558 * _542) * _614);
    float _621 = (cbMtdParam._m0[19u].w * (_479.z - _452)) + _452;
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _641 = (_634.x * 2.0) + (-1.0);
    float _642 = (_634.y * 2.0) + (-1.0);
    float _643 = dot(vec2(_641, _642), vec2(_641, _642));
    float _3598 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _652 = (((_634.z - _621) * _542) * _558) + _621;
    float _667 = (((cbMtdParam._m0[21u].x * _491) + ((_641 - _491) * _542)) * _558) + _491;
    float _668 = (((cbMtdParam._m0[21u].x * _492) + ((_642 - _492) * _542)) * _558) + _492;
    float _669 = (((sqrt(1.0 - (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) - _463) * _542) * _558) + _463;
    float _674 = cbMtdParam._m0[22u].x + _479.w;
    float _677 = fma(_669, _224, fma(_668, _231, _667 * _217));
    float _680 = fma(_669, _225, fma(_668, _232, _667 * _218));
    float _683 = fma(_669, _226, fma(_668, _233, _667 * _219));
    float _687 = inversesqrt(dot(vec3(_677, _680, _683), vec3(_677, _680, _683)));
    float _688 = _687 * _677;
    float _689 = _687 * _680;
    float _690 = _687 * _683;
    float _3609 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _691 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3631 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3642 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3653 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3664 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _696 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _710 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _761 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _751);
    float _762 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _751);
    float _763 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _751);
    float _767 = inversesqrt(dot(vec3(_761, _762, _763), vec3(_761, _762, _763)));
    float _768 = _761 * _767;
    float _769 = _762 * _767;
    float _770 = _763 * _767;
    float _776 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _777 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _795 = fma(_690, cbSceneParam._m0[5u].z, fma(_689, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _688));
    float _798 = fma(_690, cbSceneParam._m0[6u].z, fma(_689, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _688));
    float _801 = fma(_690, cbSceneParam._m0[7u].z, fma(_689, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _688));
    uint _815 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _821 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_815].x;
    float _822 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * cbInstanceData._m0[_815].y;
    float _823 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) * cbInstanceData._m0[_815].z;
    float _3675 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _827 = 1.0 - _696;
    float _828 = _824 * _827;
    float _829 = _825 * _827;
    float _830 = _826 * _827;
    float _835 = (_824 + (-0.039999999105930328369140625)) * _696;
    float _836 = (_825 + (-0.039999999105930328369140625)) * _696;
    float _837 = (_826 + (-0.039999999105930328369140625)) * _696;
    float _838 = _835 + 0.039999999105930328369140625;
    float _840 = _836 + 0.039999999105930328369140625;
    float _841 = _837 + 0.039999999105930328369140625;
    vec4 _850 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _776, cbSceneParam._m0[86u].y * _777));
    float _854 = ((isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * TEXCOORD_5.w) * _850.x;
    float _855 = dot(vec3(_688, _689, _690), vec3(_768, _769, _770));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _688) - _768;
    float _863 = (_858 * _689) - _769;
    float _864 = (_858 * _690) - _770;
    float _868 = abs(dot(vec3(_768, _769, _770), vec3(_688, _689, _690)));
    float _3708 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = sqrt(_691);
    float _883 = exp2((_870 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _889 = (1.0 - _883) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _890 = _883 * _870;
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1227;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _952 = fma(_926, cbModelParam._m0[26u].z, fma(_922, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _918));
        float _956 = fma(_926, cbModelParam._m0[27u].z, fma(_922, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _918));
        float _960 = fma(_926, cbModelParam._m0[28u].z, fma(_922, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _918));
        float _985 = _918 + _688;
        float _986 = _922 + _689;
        float _987 = _926 + _690;
        float _997 = fma(_987, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _985)) - _952;
        float _998 = fma(_987, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _985)) - _956;
        float _999 = fma(_987, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _985)) - _960;
        float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
        float _1016 = ((_1003 * _997) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_952 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1003 * _998) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_956 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1003 * _999) / cbModelParam._m0[34u].z) + ((((((_960 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        float _1055 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1021.x + (-0.5));
        float _1057 = _1055 * (_1021.y + (-0.5));
        float _1058 = _1055 * (_1021.z + (-0.5));
        float _1065 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1028.x + (-0.5));
        float _1067 = _1065 * (_1028.y + (-0.5));
        float _1068 = _1065 * (_1028.z + (-0.5));
        float _1075 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1035.x + (-0.5));
        float _1077 = _1075 * (_1035.y + (-0.5));
        float _1078 = _1075 * (_1035.z + (-0.5));
        float _1085 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1042.x + (-0.5));
        float _1087 = _1085 * (_1042.y + (-0.5));
        float _1088 = _1085 * (_1042.z + (-0.5));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = _1056 * 0.5;
        float _1093 = _1066 * 0.5;
        float _1094 = _1076 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1109 = (dot(vec3(_688, _689, _690), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1119 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3756 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1121 + 1.0))) + _1126) * _1089;
        float _1136 = _1057 * 0.5;
        float _1137 = _1067 * 0.5;
        float _1138 = _1077 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_688, _689, _690), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3789 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1163 + 1.0))) + _1168) * _1090;
        float _1178 = _1058 * 0.5;
        float _1179 = _1068 * 0.5;
        float _1180 = _1078 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_688, _689, _690), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3822 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1205 + 1.0))) + _1210) * _1091;
        _1227 = _1058;
        _1229 = _1057;
        _1230 = _1056;
        _1231 = _1068;
        _1232 = _1067;
        _1233 = _1066;
        _1234 = _1078;
        _1235 = _1077;
        _1236 = _1076;
        _1237 = _1091;
        _1238 = _1090;
        _1239 = _1089;
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
    }
    else
    {
        _1227 = _1228;
        _1229 = _1228;
        _1230 = _1228;
        _1231 = _1228;
        _1232 = _1228;
        _1233 = _1228;
        _1234 = _1228;
        _1235 = _1228;
        _1236 = _1228;
        _1237 = _1228;
        _1238 = _1228;
        _1239 = _1228;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1267 = fma(_926, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918));
        float _1271 = fma(_926, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918));
        float _1275 = fma(_926, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918));
        float _1298 = _918 + _688;
        float _1299 = _922 + _689;
        float _1300 = _926 + _690;
        float _1310 = fma(_1300, cbModelParam._m0[30u].z, fma(_1299, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1298)) - _1267;
        float _1311 = fma(_1300, cbModelParam._m0[31u].z, fma(_1299, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1298)) - _1271;
        float _1312 = fma(_1300, cbModelParam._m0[32u].z, fma(_1299, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1298)) - _1275;
        float _1316 = inversesqrt(dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312)));
        float _1329 = ((_1316 * _1310) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1267 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1316 * _1311) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1271 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1331 = ((_1316 * _1312) / cbModelParam._m0[35u].z) + ((((((_1275 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        float _1366 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1333.x + (-0.5));
        float _1368 = _1366 * (_1333.y + (-0.5));
        float _1369 = _1366 * (_1333.z + (-0.5));
        float _1376 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1340.x + (-0.5));
        float _1378 = _1376 * (_1340.y + (-0.5));
        float _1379 = _1376 * (_1340.z + (-0.5));
        float _1386 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1347.x + (-0.5));
        float _1388 = _1386 * (_1347.y + (-0.5));
        float _1389 = _1386 * (_1347.z + (-0.5));
        float _1396 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1354.x + (-0.5));
        float _1398 = _1396 * (_1354.y + (-0.5));
        float _1399 = _1396 * (_1354.z + (-0.5));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = _1367 * 0.5;
        float _1404 = _1377 * 0.5;
        float _1405 = _1387 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_688, _689, _690), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3885 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1430 + 1.0))) + _1435) * _1400;
        float _1445 = _1368 * 0.5;
        float _1446 = _1378 * 0.5;
        float _1447 = _1388 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_688, _689, _690), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _3918 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1472 + 1.0))) + _1477) * _1401;
        float _1487 = _1369 * 0.5;
        float _1488 = _1379 * 0.5;
        float _1489 = _1389 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_688, _689, _690), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _3951 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1514 + 1.0))) + _1519) * _1402;
        _1536 = _1369;
        _1537 = _1368;
        _1538 = _1367;
        _1539 = _1379;
        _1540 = _1378;
        _1541 = _1377;
        _1542 = _1389;
        _1543 = _1388;
        _1544 = _1387;
        _1545 = _1402;
        _1546 = _1401;
        _1547 = _1400;
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
    }
    else
    {
        _1536 = _1228;
        _1537 = _1228;
        _1538 = _1228;
        _1539 = _1228;
        _1540 = _1228;
        _1541 = _1228;
        _1542 = _1228;
        _1543 = _1228;
        _1544 = _1228;
        _1545 = _1228;
        _1546 = _1228;
        _1547 = _1228;
        _1548 = 0.0;
        _1549 = 0.0;
        _1550 = 0.0;
    }
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1240)) + _1240;
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1241)) + _1241;
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1242)) + _1242;
    float _1583 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1561, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1561, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1561, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1560));
    float _1604 = _862 * 0.5;
    float _1605 = _863 * 0.5;
    float _1606 = _864 * 0.5;
    float _1607 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1610 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1613 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1647;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1620 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1227, _1231, _1234, _1237));
        float _1624 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1628 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1230, _1233, _1236, _1239));
        float _1635 = dot(vec4(cbModelParam._m0[39u]), vec4(_1604, _1605, _1606, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1635) ? 0.0 : (isnan(0.0) ? _1635 : max(0.0, _1635))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1658;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1649 = dot(vec4(cbModelParam._m0[40u]), vec4(_1604, _1605, _1606, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1662 = (_1658 * cbModelParam._m0[1u].x) + (_1647 * (1.0 - cbModelParam._m0[1u].x));
    float _1672 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _691);
    float _1673 = isnan(_1672) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1672 : min(cbModelParam._m0[25u].z, _1672));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1720 = fma(_926, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918)) + cbModelParam._m0[13u].w;
        float _1724 = fma(_926, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918)) + cbModelParam._m0[14u].w;
        float _1728 = fma(_926, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918)) + cbModelParam._m0[15u].w;
        float _1731 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1734 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1737 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1765;
        if (_1731 > 0.0)
        {
            _1765 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1765 = frontier_phi_14_12_ladder;
        }
        float _1967;
        if (_1734 > 0.0)
        {
            _1967 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1967 = frontier_phi_23_19_ladder;
        }
        float _2221;
        if (_1737 > 0.0)
        {
            _2221 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2221 = frontier_phi_35_30_ladder;
        }
        float _2223 = isnan(_1967) ? _1765 : (isnan(_1765) ? _1967 : min(_1765, _1967));
        float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
        float _2228 = (_2224 * _1731) + _1720;
        float _2229 = (_2224 * _1734) + _1724;
        float _2230 = (_2224 * _1737) + _1728;
        float _2231 = _2224 * 9.9999997473787516355514526367188e-05;
        float _2233 = (-1.0) - _2231;
        float _2235 = _2231 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2230 > _2235) || ((_2230 < _2233) || ((_2229 > _2235) || ((_2229 < _2233) || ((_2228 < _2233) || (_2228 > _2235))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2230, cbModelParam._m0[9u].z, fma(_2229, cbModelParam._m0[9u].y, _2228 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2230, cbModelParam._m0[10u].z, fma(_2229, cbModelParam._m0[10u].y, _2228 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2230, cbModelParam._m0[11u].z, fma(_2229, cbModelParam._m0[11u].y, _2228 * cbModelParam._m0[11u].x))), _1673);
            frontier_phi_13_35_ladder = _2358.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2358.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2358.x * cbModelParam._m0[1u].y;
        }
        _1753 = frontier_phi_13_35_ladder_2;
        _1755 = frontier_phi_13_35_ladder_1;
        _1757 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1673);
        _1753 = _1741.x * cbModelParam._m0[1u].y;
        _1755 = _1741.y * cbModelParam._m0[1u].y;
        _1757 = _1741.z * cbModelParam._m0[1u].y;
    }
    float _1761 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _691);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1761 : min(cbModelParam._m0[25u].w, _1761));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1815 = fma(_926, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918)) + cbModelParam._m0[21u].w;
        float _1819 = fma(_926, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918)) + cbModelParam._m0[22u].w;
        float _1823 = fma(_926, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918)) + cbModelParam._m0[23u].w;
        float _1826 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1829 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1832 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _1972;
        if (_1826 > 0.0)
        {
            _1972 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1972 = frontier_phi_25_21_ladder;
        }
        float _2248;
        if (_1829 > 0.0)
        {
            _2248 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2248 = frontier_phi_37_32_ladder;
        }
        float _2461;
        if (_1832 > 0.0)
        {
            _2461 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2461 = frontier_phi_46_43_ladder;
        }
        float _2463 = isnan(_2248) ? _1972 : (isnan(_1972) ? _2248 : min(_1972, _2248));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1826) + _1815;
        float _2469 = (_2464 * _1829) + _1819;
        float _2470 = (_2464 * _1832) + _1823;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2472 = (-1.0) - _2471;
        float _2474 = _2471 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2470 > _2474) || ((_2470 < _2472) || ((_2469 > _2474) || ((_2469 < _2472) || ((_2468 < _2472) || (_2468 > _2474))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2669 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2470, cbModelParam._m0[17u].z, fma(_2469, cbModelParam._m0[17u].y, _2468 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2470, cbModelParam._m0[18u].z, fma(_2469, cbModelParam._m0[18u].y, _2468 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2470, cbModelParam._m0[19u].z, fma(_2469, cbModelParam._m0[19u].y, _2468 * cbModelParam._m0[19u].x))), _1762);
            frontier_phi_22_46_ladder = _2669.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2669.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2669.x * cbModelParam._m0[1u].z;
        }
        _1851 = frontier_phi_22_46_ladder_2;
        _1853 = frontier_phi_22_46_ladder_1;
        _1855 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1762);
        _1851 = _1835.x * cbModelParam._m0[1u].z;
        _1853 = _1835.y * cbModelParam._m0[1u].z;
        _1855 = _1835.z * cbModelParam._m0[1u].z;
    }
    float _1868 = (((_889 * _838) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1851 - _1753)) + _1753);
    float _1870 = (((_889 * _840) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1853 - _1755)) + _1755);
    float _1872 = (((_889 * _841) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1855 - _1757)) + _1757);
    float _1875 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1870, cbSceneParam._m0[89u].y, _1868 * cbSceneParam._m0[89u].x));
    float _1878 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1870, cbSceneParam._m0[90u].y, _1868 * cbSceneParam._m0[90u].x));
    float _1881 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1870, cbSceneParam._m0[91u].y, _1868 * cbSceneParam._m0[91u].x));
    uvec4 _1891 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1893 = _1891.x * 14u;
    uint _1894 = _1893 + 13u;
    float _1901 = _854 + (-1.0);
    float _1906 = (cbLight._m0[_1894].x * _1901) + 1.0;
    float _1907 = (cbLight._m0[_1894].y * _1901) + 1.0;
    float _1908 = (cbLight._m0[_1894].z * _1901) + 1.0;
    float _1909 = (cbLight._m0[_1894].w * _1901) + 1.0;
    uint _1910 = _1893 + 5u;
    float _1916 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1920 = _1893 + 4u;
    float _1926 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1930 = _1893 | 1u;
    float _1941 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_688, _689, _690));
    float _1944 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_688, _689, _690));
    float _4087 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _4098 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1949 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1951 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.3183098733425140380859375;
    float _1958 = ((cbLight._m0[_1910].x * _1916) * _1951) + ((cbLight._m0[_1920].x * _1926) * _1949);
    float _1959 = ((_1916 * cbLight._m0[_1910].y) * _1951) + ((_1926 * cbLight._m0[_1920].y) * _1949);
    float _1960 = ((_1916 * cbLight._m0[_1910].z) * _1951) + ((_1926 * cbLight._m0[_1920].z) * _1949);
    uvec4 _1964 = floatBitsToUint(cbLight._m0[_1893 + 12u]);
    bool _1966 = _1964.x == 0u;
    float _1977;
    float _1979;
    float _1981;
    if (_1966)
    {
        _1977 = _1958;
        _1979 = _1959;
        _1981 = _1960;
    }
    else
    {
        uint _1985 = _1893 + 6u;
        float _2001 = (dot(vec3(cbLight._m0[_1893 + 2u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2002 = _2001 * _2001;
        float _4109 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2003 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2004 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _1977 = (((cbLight._m0[_1985].x * 0.3183098733425140380859375) * _2003) * _2004) + _1958;
        _1979 = (((cbLight._m0[_1985].y * 0.3183098733425140380859375) * _2003) * _2004) + _1959;
        _1981 = (((cbLight._m0[_1985].z * 0.3183098733425140380859375) * _2003) * _2004) + _1960;
    }
    bool _1984 = _1964.y == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_1984)
    {
        _2022 = _1977;
        _2024 = _1979;
        _2026 = _1981;
    }
    else
    {
        uint _2192 = _1893 + 7u;
        float _2208 = (dot(vec3(cbLight._m0[_1893 + 3u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2209 = _2208 * _2208;
        float _4125 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2210 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2211 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2022 = (((cbLight._m0[_2192].x * 0.3183098733425140380859375) * _2210) * _2211) + _1977;
        _2024 = (((cbLight._m0[_2192].y * 0.3183098733425140380859375) * _2210) * _2211) + _1979;
        _2026 = (((cbLight._m0[_2192].z * 0.3183098733425140380859375) * _2210) * _2211) + _1981;
    }
    uint _2029 = _1893 + 8u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _691) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1893].x + _768;
    float _2045 = cbLight._m0[_1893].y + _769;
    float _2046 = cbLight._m0[_1893].z + _770;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_1893].xyz));
    float _4141 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2058 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2059 = dot(vec3(_688, _689, _690), vec3(_2051, _2052, _2053));
    float _4163 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2051, _2052, _2053));
    float _4174 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2043 * _2043;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2079 = exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0);
    float _2080 = 0.959999978542327880859375 - _835;
    float _2082 = 0.959999978542327880859375 - _836;
    float _2083 = 0.959999978542327880859375 - _837;
    float _2090 = 1.0 - _2043;
    float _2101 = (0.5 / (((_2058 * ((_2057 * _2090) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2090) + _2043) * _2057))) * _2057;
    float _4185 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2103 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    uint _2114 = _1893 + 9u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _691) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_1930].x + _768;
    float _2128 = cbLight._m0[_1930].y + _769;
    float _2129 = cbLight._m0[_1930].z + _770;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_1930].xyz));
    float _4196 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2141 = dot(vec3(_688, _689, _690), vec3(_2134, _2135, _2136));
    float _4207 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2145 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2134, _2135, _2136));
    float _4218 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2149 = _2126 * _2126;
    float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
    float _2160 = exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0);
    float _2167 = 1.0 - _2126;
    float _2177 = (0.5 / (((_2058 * ((_2140 * _2167) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2167) + _2126) * _2140))) * _2140;
    float _4229 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2179 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
    float _2189 = (((((_2160 * _2080) + _838) * cbLight._m0[_2114].x) * _2179) * _1916) + (((((_2079 * _2080) + _838) * cbLight._m0[_2029].x) * _2103) * _1926);
    float _2190 = (((((_2160 * _2082) + _840) * cbLight._m0[_2114].y) * _2179) * _1916) + (((((_2079 * _2082) + _840) * cbLight._m0[_2029].y) * _2103) * _1926);
    float _2191 = (((((_2160 * _2083) + _841) * cbLight._m0[_2114].z) * _2179) * _1916) + (((((_2079 * _2083) + _841) * cbLight._m0[_2029].z) * _2103) * _1926);
    float _2253;
    float _2255;
    float _2257;
    if (_1966)
    {
        _2253 = _2189;
        _2255 = _2190;
        _2257 = _2191;
    }
    else
    {
        uint _2259 = _1893 + 2u;
        uint _2263 = _1893 + 10u;
        float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _691) * 0.949999988079071044921875);
        float _2278 = _2277 * _2277;
        float _2279 = cbLight._m0[_2259].x + _768;
        float _2280 = cbLight._m0[_2259].y + _769;
        float _2281 = cbLight._m0[_2259].z + _770;
        float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
        float _2286 = _2285 * _2279;
        float _2287 = _2285 * _2280;
        float _2288 = _2285 * _2281;
        float _2289 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2259].xyz));
        float _4240 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2293 = dot(vec3(_688, _689, _690), vec3(_2286, _2287, _2288));
        float _4251 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2297 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2286, _2287, _2288));
        float _4262 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2301 = _2278 * _2278;
        float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
        float _2312 = exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0);
        float _2319 = 1.0 - _2278;
        float _2329 = (0.5 / (((_2058 * ((_2292 * _2319) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2319) + _2278) * _2292))) * _2292;
        float _4273 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2331 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
        float _2332 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2253 = (((((_2312 * _2080) + _838) * cbLight._m0[_2263].x) * _2331) * _2332) + _2189;
        _2255 = (((((_2312 * _2082) + _840) * cbLight._m0[_2263].y) * _2331) * _2332) + _2190;
        _2257 = (((((_2312 * _2083) + _841) * cbLight._m0[_2263].z) * _2331) * _2332) + _2191;
    }
    float _2367;
    float _2369;
    float _2371;
    if (_1984)
    {
        _2367 = _2253;
        _2369 = _2255;
        _2371 = _2257;
    }
    else
    {
        uint _2378 = _1893 + 3u;
        uint _2382 = _1893 + 11u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _691) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _768;
        float _2399 = cbLight._m0[_2378].y + _769;
        float _2400 = cbLight._m0[_2378].z + _770;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2378].xyz));
        float _4289 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2412 = dot(vec3(_688, _689, _690), vec3(_2405, _2406, _2407));
        float _4300 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4311 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
        float _2438 = 1.0 - _2397;
        float _2448 = (0.5 / (((_2058 * ((_2411 * _2438) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2438) + _2397) * _2411))) * _2411;
        float _4322 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2450 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2451 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2367 = (((((_2431 * _2080) + _838) * cbLight._m0[_2382].x) * _2450) * _2451) + _2253;
        _2369 = (((((_2431 * _2082) + _840) * cbLight._m0[_2382].y) * _2450) * _2451) + _2255;
        _2371 = (((((_2431 * _2083) + _841) * cbLight._m0[_2382].z) * _2450) * _2451) + _2257;
    }
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    if (_1891.y == 0u)
    {
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2526;
        float _2528 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2526;
        float _2529 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2526;
        uvec4 _2541 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2542 = _2541.x;
        uint _2553 = uint((float(_2541.y) * floor(float(uint(cbSceneParam._m0[85u].y * _777) / _2542))) + floor(float(uint(cbSceneParam._m0[85u].x * _776) / _2542)));
        float _2563 = (log2(_2529 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2564 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        uint _2567 = uint(isnan(14.0) ? _2564 : (isnan(_2564) ? 14.0 : min(_2564, 14.0)));
        uvec4 _2572 = texelFetch(g_lightClusterGridBuffer, int(((_2567 << 2u) + (_2553 << 6u)) >> 2u));
        uint _2573 = _2572.x;
        uint _2574 = _2541.z;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        if (((((1u << ((_2574 >> 4u) & 15u)) + 4294967295u) & _2573) == 0u) || ((_2574 & 240u) == 0u))
        {
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
            _2684 = 0.0;
        }
        else
        {
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2683;
            float _2685;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            uint _2825 = 0u;
            uint _2834;
            bool _2835;
            for (;;)
            {
                _2834 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2825 << 2u)) >> 2u)).x;
                _2835 = _2834 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2835)
                {
                    frontier_phi_61_pred = _2819;
                    frontier_phi_61_pred_1 = _2824;
                    frontier_phi_61_pred_2 = _2823;
                    frontier_phi_61_pred_3 = _2822;
                    frontier_phi_61_pred_4 = _2821;
                    frontier_phi_61_pred_5 = _2820;
                }
                else
                {
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    uint _2949;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2822;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2834;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    for (;;)
                    {
                        uint _2953 = uint(findLSB(_2949)) + (_2825 << 5u);
                        uint _2950 = (_2949 + 4294967295u) & _2949;
                        uint _2955 = _2953 * 48u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2975 = (_2953 * 48u) + 4u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2994 = (_2953 * 48u) + 8u;
                        vec3 _3005 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x));
                        float _3009 = _2969.x - _2527;
                        float _3010 = _2969.y - _2528;
                        float _3011 = _2969.z - _2529;
                        float _3012 = dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011));
                        float _3015 = inversesqrt(_3012);
                        float _3016 = _3015 * _3009;
                        float _3017 = _3015 * _3010;
                        float _3018 = _3015 * _3011;
                        float _3019 = dot(vec3(_795, _798, _801), vec3(_3016, _3017, _3018));
                        float _3024 = 1.0 - (_3012 * _2969.w);
                        float _4348 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3026 = sqrt(_3012) * _2988.w;
                        float _3029 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _3019) + _3030;
                        float _3036 = _3026 * _3026;
                        float _3040 = ((isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))) * _3025) / ((_3036 * 0.699999988079071044921875) + 1.0);
                        float _3044 = (-0.0) - _2527;
                        float _3045 = (-0.0) - _2528;
                        float _3046 = (-0.0) - _2529;
                        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                        float _3051 = _3050 * _3044;
                        float _3052 = _3050 * _3045;
                        float _3053 = _3050 * _3046;
                        float _3061 = exp2(log2(1.0 / ((_3036 * 3.5) + 5.0)) * 0.25);
                        float _3062 = 1.0 - _870;
                        float _3069 = sqrt(1.0 - ((1.0 - (_3062 * _3062)) * (1.0 - (_3061 * _3061))));
                        float _3070 = _3069 * _3069;
                        float _3071 = _3070 * _3070;
                        float _3072 = _3051 + _3016;
                        float _3073 = _3052 + _3017;
                        float _3074 = _3053 + _3018;
                        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                        float _3082 = dot(vec3(_795, _798, _801), vec3(_3051, _3052, _3053));
                        float _4364 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3085 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3086 = dot(vec3(_795, _798, _801), vec3(_3078 * _3072, _3078 * _3073, _3078 * _3074));
                        float _4375 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3089 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3093 = ((_3089 * _3089) * (_3071 + (-1.0))) + 1.0;
                        float _3094 = _3029 * _3070;
                        float _3095 = _3094 * _3094;
                        float _3098 = ((1.0 - _3095) * _3019) + _3095;
                        float _4386 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3099 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3100 = 1.0 - _3070;
                        float _3110 = (0.5 / (((_3099 * ((_3085 * _3100) + _3070)) + 9.9999999392252902907785028219223e-09) + (((_3099 * _3100) + _3070) * _3085))) * _3099;
                        float _4397 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3121 = (((_3071 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3093 * _3093) * ((_3036 * 2.1991131305694580078125) + 3.141590118408203125))) * _3025;
                        _2878 = (_3040 * _2988.x) + _2946;
                        _2879 = (_3040 * _2988.y) + _2947;
                        _2880 = (_3040 * _2988.z) + _2948;
                        _2875 = (_3121 * _3005.x) + _2943;
                        _2876 = (_3121 * _3005.y) + _2944;
                        _2877 = (_3121 * _3005.z) + _2945;
                        if (_2950 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2878;
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2950;
                        }
                    }
                    frontier_phi_61_pred = _2875;
                    frontier_phi_61_pred_1 = _2880;
                    frontier_phi_61_pred_2 = _2879;
                    frontier_phi_61_pred_3 = _2878;
                    frontier_phi_61_pred_4 = _2877;
                    frontier_phi_61_pred_5 = _2876;
                }
                _2675 = frontier_phi_61_pred;
                _2685 = frontier_phi_61_pred_1;
                _2683 = frontier_phi_61_pred_2;
                _2681 = frontier_phi_61_pred_3;
                _2679 = frontier_phi_61_pred_4;
                _2677 = frontier_phi_61_pred_5;
                uint _2826 = _2825 + 1u;
                if (_2826 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2819 = _2675;
                    _2820 = _2677;
                    _2821 = _2679;
                    _2822 = _2681;
                    _2823 = _2683;
                    _2824 = _2685;
                    _2825 = _2826;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
            _2684 = _2685;
        }
        uvec4 _2688 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2689 = _2688.z;
        uint _2691 = (_2689 >> 8u) & 15u;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        if (((4294967295u << _2691) & _2573) == 0u)
        {
            _2787 = _2674;
            _2789 = _2676;
            _2791 = _2678;
            _2793 = _2680;
            _2795 = _2682;
            _2797 = _2684;
        }
        else
        {
            float _2812 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
            float _2813 = _2812 * _2527;
            float _2814 = _2812 * _2528;
            float _2815 = _2812 * _2529;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2691 < ((_2689 >> 12u) & 15u))
            {
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2926 = _2674;
                float _2927 = _2676;
                float _2928 = _2678;
                float _2929 = _2680;
                float _2930 = _2682;
                float _2931 = _2684;
                uint _2932 = _2691;
                uint _2941;
                bool _2942;
                for (;;)
                {
                    _2941 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                    _2942 = _2941 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2942)
                    {
                        frontier_phi_67_pred = _2929;
                        frontier_phi_67_pred_1 = _2930;
                        frontier_phi_67_pred_2 = _2931;
                        frontier_phi_67_pred_3 = _2928;
                        frontier_phi_67_pred_4 = _2927;
                        frontier_phi_67_pred_5 = _2926;
                    }
                    else
                    {
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3139 = _2926;
                        float _3140 = _2927;
                        float _3141 = _2928;
                        float _3142 = _2929;
                        float _3143 = _2930;
                        float _3144 = _2931;
                        uint _3145 = _2941;
                        uint _3146;
                        vec4 _3171;
                        float _3172;
                        vec4 _3187;
                        vec3 _3199;
                        vec4 _3214;
                        vec4 _3230;
                        float _3276;
                        bool _3277;
                        for (;;)
                        {
                            uint _3156 = ((_2932 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3145));
                            _3146 = (_3145 + 4294967295u) & _3145;
                            uint _3158 = _3156 * 40u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3172 = _3171.w;
                            uint _3174 = (_3156 * 40u) + 4u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3189 = (_3156 * 40u) + 8u;
                            _3199 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x));
                            uint _3201 = (_3156 * 40u) + 16u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3217 = (_3156 * 40u) + 20u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3232 = (_3156 * 40u) + 24u;
                            vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3251 = (_3156 * 40u) + 28u;
                            vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            _3276 = fma(_2529, _3264.z, fma(_2528, _3264.y, _3264.x * _2527)) + _3264.w;
                            _3277 = !((fma(_2529, _3245.z, fma(_2528, _3245.y, _3245.x * _2527)) + _3245.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3277)
                            {
                                float _3304 = _3171.x - _2527;
                                float _3305 = _3171.y - _2528;
                                float _3306 = _3171.z - _2529;
                                float _3307 = dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306));
                                float _3310 = inversesqrt(_3307);
                                float _3311 = _3310 * _3304;
                                float _3312 = _3310 * _3305;
                                float _3313 = _3310 * _3306;
                                float _3317 = 1.0 - (_3307 / (_3172 * _3172));
                                float _4408 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3322 = sqrt(_3307) * _3187.w;
                                float _3324 = 1.39999997615814208984375 / (_3322 + 1.39999997615814208984375);
                                float _3325 = _3324 * _3324;
                                float _3328 = ((1.0 - _3325) * dot(vec3(_3311, _3312, _3313), vec3(_795, _798, _801))) + _3325;
                                float _3331 = _3322 * _3322;
                                float _3335 = (fma(_2529, _3214.z, fma(_2528, _3214.y, _3214.x * _2527)) + _3214.w) / _3276;
                                float _3336 = (fma(_2529, _3230.z, fma(_2528, _3230.y, _3230.x * _2527)) + _3230.w) / _3276;
                                float _3340 = 1.0 - dot(vec2(_3335, _3336), vec2(_3335, _3336));
                                float _4424 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3342 = _3341 * (((isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))) * _3318) / ((_3331 * 0.699999988079071044921875) + 1.0));
                                float _3354 = exp2(log2(1.0 / ((_3331 * 3.5) + 5.0)) * 0.25);
                                float _3355 = 1.0 - _870;
                                float _3362 = sqrt(1.0 - ((1.0 - (_3355 * _3355)) * (1.0 - (_3354 * _3354))));
                                float _3363 = _3362 * _3362;
                                float _3364 = _3363 * _3363;
                                float _3365 = _3311 - _2813;
                                float _3366 = _3312 - _2814;
                                float _3367 = _3313 - _2815;
                                float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                                float _3375 = dot(vec3(_795, _798, _801), vec3((-0.0) - _2813, (-0.0) - _2814, (-0.0) - _2815));
                                float _4435 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3379 = dot(vec3(_795, _798, _801), vec3(_3371 * _3365, _3371 * _3366, _3371 * _3367));
                                float _4446 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3382 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3386 = ((_3382 * _3382) * (_3364 + (-1.0))) + 1.0;
                                float _3387 = _3324 * _3363;
                                float _3388 = _3387 * _3387;
                                float _3394 = ((1.0 - _3388) * dot(vec3(_795, _798, _801), vec3(_3311, _3312, _3313))) + _3388;
                                float _4457 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3396 = 1.0 - _3363;
                                float _3406 = (0.5 / (((_3395 * ((_3378 * _3396) + _3363)) + 9.9999999392252902907785028219223e-09) + (((_3395 * _3396) + _3363) * _3378))) * _3395;
                                float _4468 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3416 = (_3341 * _3318) * (((_3364 * 3.1415927410125732421875) * (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) / ((_3386 * _3386) * ((_3331 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3416 * _3199.x;
                                frontier_phi_73_pred_1 = _3416 * _3199.y;
                                frontier_phi_73_pred_2 = _3342 * _3187.z;
                                frontier_phi_73_pred_3 = _3342 * _3187.y;
                                frontier_phi_73_pred_4 = _3342 * _3187.x;
                                frontier_phi_73_pred_5 = _3416 * _3199.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3420 = frontier_phi_73_pred;
                            _3421 = frontier_phi_73_pred_1;
                            _3425 = frontier_phi_73_pred_2;
                            _3424 = frontier_phi_73_pred_3;
                            _3423 = frontier_phi_73_pred_4;
                            _3422 = frontier_phi_73_pred_5;
                            _3129 = _3423 + _3142;
                            _3130 = _3424 + _3143;
                            _3131 = _3425 + _3144;
                            _3126 = _3420 + _3139;
                            _3127 = _3421 + _3140;
                            _3128 = _3422 + _3141;
                            if (_3146 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3146;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3129;
                        frontier_phi_67_pred_1 = _3130;
                        frontier_phi_67_pred_2 = _3131;
                        frontier_phi_67_pred_3 = _3128;
                        frontier_phi_67_pred_4 = _3127;
                        frontier_phi_67_pred_5 = _3126;
                    }
                    _2794 = frontier_phi_67_pred;
                    _2796 = frontier_phi_67_pred_1;
                    _2798 = frontier_phi_67_pred_2;
                    _2792 = frontier_phi_67_pred_3;
                    _2790 = frontier_phi_67_pred_4;
                    _2788 = frontier_phi_67_pred_5;
                    uint _2933 = _2932 + 1u;
                    if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2926 = _2788;
                        _2927 = _2790;
                        _2928 = _2792;
                        _2929 = _2794;
                        _2930 = _2796;
                        _2931 = _2798;
                        _2932 = _2933;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2796;
                frontier_phi_55_56_ladder_1 = _2798;
                frontier_phi_55_56_ladder_2 = _2794;
                frontier_phi_55_56_ladder_3 = _2792;
                frontier_phi_55_56_ladder_4 = _2790;
                frontier_phi_55_56_ladder_5 = _2788;
            }
            else
            {
                frontier_phi_55_56_ladder = _2682;
                frontier_phi_55_56_ladder_1 = _2684;
                frontier_phi_55_56_ladder_2 = _2680;
                frontier_phi_55_56_ladder_3 = _2678;
                frontier_phi_55_56_ladder_4 = _2676;
                frontier_phi_55_56_ladder_5 = _2674;
            }
            _2787 = frontier_phi_55_56_ladder_5;
            _2789 = frontier_phi_55_56_ladder_4;
            _2791 = frontier_phi_55_56_ladder_3;
            _2793 = frontier_phi_55_56_ladder_2;
            _2795 = frontier_phi_55_56_ladder;
            _2797 = frontier_phi_55_56_ladder_1;
        }
        float _2802 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2586 = (_2802 * _2793) + _2022;
        _2588 = (_2802 * _2795) + _2024;
        _2590 = (_2802 * _2797) + _2026;
        _2592 = ((_2787 * _838) * _2802) + _2367;
        _2594 = ((_2789 * _840) * _2802) + _2369;
        _2596 = ((_2791 * _841) * _2802) + _2371;
    }
    else
    {
        _2586 = _2022;
        _2588 = _2024;
        _2590 = _2026;
        _2592 = _2367;
        _2594 = _2369;
        _2596 = _2371;
    }
    float _4484 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4495 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4506 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    uint _2616 = _236 + 6u;
    float _2624 = _776 / cbSceneParam._m0[86u].x;
    float _2625 = _777 / cbSceneParam._m0[86u].y;
    vec4 _2639 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2624, _2625, (log2((isnan(cbSceneParam._m0[77u].w) ? _710 : (isnan(_710) ? cbSceneParam._m0[77u].w : min(_710, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2641 = _2639.x;
    float _2642 = _2639.y;
    float _2643 = _2639.z;
    float _2644 = _2639.w;
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    if (_710 > cbSceneParam._m0[78u].w)
    {
        float _2699 = isnan(_710) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _710 : min(cbSceneParam._m0[80u].w, _710));
        float _2700 = _2699 / _710;
        float _2711 = _2700 * _761;
        float _2712 = _762 * _2700;
        float _2713 = (-0.0) - _2712;
        float _2715 = _2700 * _763;
        float _2717 = (cbSceneParam._m0[77u].w * _2713) / _2699;
        float _2718 = _2717 + cbSceneParam._m0[79u].w;
        float _2719 = cbSceneParam._m0[79u].w - _2712;
        float _2725 = sqrt(((_2711 * _2711) + (_2712 * _2712)) + (_2715 * _2715));
        float _2728 = (1.0 - (cbSceneParam._m0[77u].w / _2699)) * _2725;
        float _2733 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2735 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2888;
        if (abs((_2713 - _2717) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2888 = ((((_2718 > 0.0) ? exp2(_2733 * _2718) : (2.0 - exp2(_2735 * _2718))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2728;
        }
        else
        {
            float _2848 = 1.0 / cbSceneParam._m0[80u].x;
            float _2849 = isnan(_2719) ? _2718 : (isnan(_2718) ? _2719 : max(_2718, _2719));
            float _2850 = isnan(_2719) ? _2718 : (isnan(_2718) ? _2719 : min(_2718, _2719));
            float _2859 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : min(_2849, 0.0));
            float _2860 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : min(_2850, 0.0));
            _2888 = ((abs(_2725 / _2713) * cbSceneParam._m0[80u].y) * ((((_2859 - _2860) * 2.0) - ((exp2(_2733 * (isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0)))) - exp2(_2733 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))))) * _2848)) - ((exp2(_2735 * _2859) - exp2(_2735 * _2860)) * _2848))) + (_2728 * cbSceneParam._m0[80u].z);
        }
        vec4 _2890 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2624, _2625, 1.0), 0.0);
        float _2899 = exp2((_2888 * (-1.44269502162933349609375)) * (1.0 - _2890.w));
        float _2900 = log2(_2899);
        float _2916 = log2(_2644);
        _2737 = (exp2(_2916 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].x)) * _2890.x) / cbSceneParam._m0[78u].x)) + _2641;
        _2739 = (exp2(_2916 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].y)) * _2890.y) / cbSceneParam._m0[78u].y)) + _2642;
        _2741 = (exp2(_2916 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].z)) * _2890.z) / cbSceneParam._m0[78u].z)) + _2643;
        _2743 = _2899 * _2644;
    }
    else
    {
        _2737 = _2641;
        _2739 = _2642;
        _2741 = _2643;
        _2743 = _2644;
    }
    float _2755 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2756 = _2755 == 3.0;
    float _2757 = log2(_2743);
    float _2764 = exp2(_2757 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2586 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _854))) + ((_2592 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1662)) * cbPerFrame._m0[3u].x));
    float _2765 = exp2(_2757 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2588 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _854))) + ((_2594 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1662)) * cbPerFrame._m0[3u].x));
    float _2766 = exp2(_2757 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2590 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _854))) + ((_2596 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1662)) * cbPerFrame._m0[3u].x));
    float _2775 = (_2755 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2775 * (_2756 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2737)));
    SV_Target.y = _2775 * (_2756 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2739)));
    SV_Target.z = _2775 * (_2756 ? _2766 : (_2766 + (cbSceneParam._m0[72u].w * _2741)));
    SV_Target.w = cbInstanceData._m0[_2616].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2616].w;
}


