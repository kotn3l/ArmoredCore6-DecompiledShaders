#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1284;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3637 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3648 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3659 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[24u].y) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3670 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _433 = (_426 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _434 = (_426 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _435 = (_426 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) + _445;
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _426) + _513;
    float _525 = ((((_492.x - _511) * _426) + _511) * 2.0) + (-1.0);
    float _526 = ((((_492.y - _512) * _426) + _512) * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3681 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))));
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _566 = (_525 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_467.x * 2.0) + (-1.0)))) + (((_554.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _567 = (_526 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_467.y * 2.0) + (-1.0)))) + (((_554.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _579 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _581 = _579.x;
    float _582 = 1.0 - _581;
    float _608 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_581 - _582) * cbMtdParam._m0[24u].w) + _582) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3692 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _617 = ((((cbMtdParam._m0[10u].x - _452) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _609) + _452;
    float _618 = ((((cbMtdParam._m0[10u].y - _453) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _609) + _453;
    float _619 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _454)) * _609) + _454;
    vec4 _631 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _645 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _647 = _645.x;
    float _665 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _294) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _295) + cbTextureTilingScale._m0[9u].w)).x - _647) * _426) + _647;
    float _669 = ((_631.x - _665) * cbMtdParam._m0[19u].z) + _665;
    float _671 = _669 - (_669 * _609);
    float _676 = (((_467.z - _522) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _522;
    float _680 = ((_554.z - _676) * cbMtdParam._m0[19u].w) + _676;
    float _684 = ((cbMtdParam._m0[23u].y - _680) * _609) + _680;
    vec4 _703 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _709 = (_703.x * 2.0) + (-1.0);
    float _710 = (_703.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _3703 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _727 = (_609 * (((cbMtdParam._m0[22u].z * _566) - _566) + _709)) + _566;
    float _728 = (_609 * (((cbMtdParam._m0[22u].z * _567) - _567) + _710)) + _567;
    float _729 = (_609 * (sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) - _532)) + _532;
    float _731 = cbMtdParam._m0[22u].x + _554.w;
    float _734 = fma(_729, _243 * NORMAL.x, fma(_728, _250 * TANGENT.x, (_236 * _228) * _727));
    float _737 = fma(_729, _243 * NORMAL.y, fma(_728, _250 * TANGENT.y, (_236 * _229) * _727));
    float _740 = fma(_729, _243 * NORMAL.z, fma(_728, _250 * TANGENT.z, (_236 * _230) * _727));
    float _744 = inversesqrt(dot(vec3(_734, _737, _740), vec3(_734, _737, _740)));
    float _745 = _744 * _734;
    float _746 = _744 * _737;
    float _747 = _744 * _740;
    float _3714 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _748 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3736 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3747 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3758 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3769 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _753 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _767 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _817 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _807);
    float _818 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _807);
    float _819 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _807);
    float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
    float _824 = _817 * _823;
    float _825 = _818 * _823;
    float _826 = _819 * _823;
    float _832 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _833 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _851 = fma(_747, cbSceneParam._m0[5u].z, fma(_746, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _745));
    float _854 = fma(_747, cbSceneParam._m0[6u].z, fma(_746, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _745));
    float _857 = fma(_747, cbSceneParam._m0[7u].z, fma(_746, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _745));
    uint _871 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _877 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_871].x;
    float _878 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_871].y;
    float _879 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_871].z;
    float _3780 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _883 = 1.0 - _753;
    float _884 = _880 * _883;
    float _885 = _881 * _883;
    float _886 = _882 * _883;
    float _891 = (_880 + (-0.039999999105930328369140625)) * _753;
    float _892 = (_881 + (-0.039999999105930328369140625)) * _753;
    float _893 = (_882 + (-0.039999999105930328369140625)) * _753;
    float _894 = _891 + 0.039999999105930328369140625;
    float _896 = _892 + 0.039999999105930328369140625;
    float _897 = _893 + 0.039999999105930328369140625;
    vec4 _906 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _832, cbSceneParam._m0[86u].y * _833));
    float _910 = ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * TEXCOORD_5.w) * _906.x;
    float _911 = dot(vec3(_745, _746, _747), vec3(_824, _825, _826));
    float _914 = _911 * 2.0;
    float _918 = (_914 * _745) - _824;
    float _919 = (_914 * _746) - _825;
    float _920 = (_914 * _747) - _826;
    float _924 = abs(dot(vec3(_824, _825, _826), vec3(_745, _746, _747)));
    float _3813 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _926 = sqrt(_748);
    float _939 = exp2((_926 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_926 * 3.0));
    float _945 = (1.0 - _939) * ((_926 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _946 = _939 * _926;
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1283;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1008 = fma(_982, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974));
        float _1012 = fma(_982, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974));
        float _1016 = fma(_982, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974));
        float _1041 = _974 + _745;
        float _1042 = _978 + _746;
        float _1043 = _982 + _747;
        float _1053 = fma(_1043, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041)) - _1008;
        float _1054 = fma(_1043, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041)) - _1012;
        float _1055 = fma(_1043, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041)) - _1016;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1008 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1012 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[34u].z) + ((((((_1016 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1111 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1077.x + (-0.5));
        float _1113 = _1111 * (_1077.y + (-0.5));
        float _1114 = _1111 * (_1077.z + (-0.5));
        float _1121 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1084.x + (-0.5));
        float _1123 = _1121 * (_1084.y + (-0.5));
        float _1124 = _1121 * (_1084.z + (-0.5));
        float _1131 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1091.x + (-0.5));
        float _1133 = _1131 * (_1091.y + (-0.5));
        float _1134 = _1131 * (_1091.z + (-0.5));
        float _1141 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1098.x + (-0.5));
        float _1143 = _1141 * (_1098.y + (-0.5));
        float _1144 = _1141 * (_1098.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1165 = (dot(vec3(_745, _746, _747), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1175 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3861 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1177 + 1.0))) + _1182) * _1145;
        float _1192 = _1113 * 0.5;
        float _1193 = _1123 * 0.5;
        float _1194 = _1133 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_745, _746, _747), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3894 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1219 + 1.0))) + _1224) * _1146;
        float _1234 = _1114 * 0.5;
        float _1235 = _1124 * 0.5;
        float _1236 = _1134 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_745, _746, _747), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3927 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1261 + 1.0))) + _1266) * _1147;
        _1283 = _1114;
        _1285 = _1113;
        _1286 = _1112;
        _1287 = _1124;
        _1288 = _1123;
        _1289 = _1122;
        _1290 = _1134;
        _1291 = _1133;
        _1292 = _1132;
        _1293 = _1147;
        _1294 = _1146;
        _1295 = _1145;
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _1284;
        _1285 = _1284;
        _1286 = _1284;
        _1287 = _1284;
        _1288 = _1284;
        _1289 = _1284;
        _1290 = _1284;
        _1291 = _1284;
        _1292 = _1284;
        _1293 = _1284;
        _1294 = _1284;
        _1295 = _1284;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1323 = fma(_982, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974));
        float _1327 = fma(_982, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974));
        float _1331 = fma(_982, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974));
        float _1354 = _974 + _745;
        float _1355 = _978 + _746;
        float _1356 = _982 + _747;
        float _1366 = fma(_1356, cbModelParam._m0[30u].z, fma(_1355, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1354)) - _1323;
        float _1367 = fma(_1356, cbModelParam._m0[31u].z, fma(_1355, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1354)) - _1327;
        float _1368 = fma(_1356, cbModelParam._m0[32u].z, fma(_1355, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1354)) - _1331;
        float _1372 = inversesqrt(dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368)));
        float _1385 = ((_1372 * _1366) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1323 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1372 * _1367) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1327 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1372 * _1368) / cbModelParam._m0[35u].z) + ((((((_1331 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        float _1422 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1389.x + (-0.5));
        float _1424 = _1422 * (_1389.y + (-0.5));
        float _1425 = _1422 * (_1389.z + (-0.5));
        float _1432 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1396.x + (-0.5));
        float _1434 = _1432 * (_1396.y + (-0.5));
        float _1435 = _1432 * (_1396.z + (-0.5));
        float _1442 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1403.x + (-0.5));
        float _1444 = _1442 * (_1403.y + (-0.5));
        float _1445 = _1442 * (_1403.z + (-0.5));
        float _1452 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1410.x + (-0.5));
        float _1454 = _1452 * (_1410.y + (-0.5));
        float _1455 = _1452 * (_1410.z + (-0.5));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = _1423 * 0.5;
        float _1460 = _1433 * 0.5;
        float _1461 = _1443 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_745, _746, _747), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _3990 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1486 + 1.0))) + _1491) * _1456;
        float _1501 = _1424 * 0.5;
        float _1502 = _1434 * 0.5;
        float _1503 = _1444 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_745, _746, _747), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4023 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1528 + 1.0))) + _1533) * _1457;
        float _1543 = _1425 * 0.5;
        float _1544 = _1435 * 0.5;
        float _1545 = _1445 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_745, _746, _747), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4056 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1570 + 1.0))) + _1575) * _1458;
        _1592 = _1425;
        _1593 = _1424;
        _1594 = _1423;
        _1595 = _1435;
        _1596 = _1434;
        _1597 = _1433;
        _1598 = _1445;
        _1599 = _1444;
        _1600 = _1443;
        _1601 = _1458;
        _1602 = _1457;
        _1603 = _1456;
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
    }
    else
    {
        _1592 = _1284;
        _1593 = _1284;
        _1594 = _1284;
        _1595 = _1284;
        _1596 = _1284;
        _1597 = _1284;
        _1598 = _1284;
        _1599 = _1284;
        _1600 = _1284;
        _1601 = _1284;
        _1602 = _1284;
        _1603 = _1284;
        _1604 = 0.0;
        _1605 = 0.0;
        _1606 = 0.0;
    }
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1296)) + _1296;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1297)) + _1297;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1298)) + _1298;
    float _1639 = fma(_1618, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1616 * cbSceneParam._m0[89u].x));
    float _1642 = fma(_1618, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1616 * cbSceneParam._m0[90u].x));
    float _1645 = fma(_1618, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1616));
    float _1660 = _918 * 0.5;
    float _1661 = _919 * 0.5;
    float _1662 = _920 * 0.5;
    float _1663 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1666 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1669 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1703;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1676 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1283, _1287, _1290, _1293));
        float _1680 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1684 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1691 = dot(vec4(cbModelParam._m0[39u]), vec4(_1660, _1661, _1662, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1691) ? 0.0 : (isnan(0.0) ? _1691 : max(0.0, _1691))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1714;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1705 = dot(vec4(cbModelParam._m0[40u]), vec4(_1660, _1661, _1662, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1718 = (_1714 * cbModelParam._m0[1u].x) + (_1703 * (1.0 - cbModelParam._m0[1u].x));
    float _1728 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1729 = isnan(_1728) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1728 : min(cbModelParam._m0[25u].z, _1728));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1778 = fma(_982, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974)) + cbModelParam._m0[13u].w;
        float _1782 = fma(_982, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974)) + cbModelParam._m0[14u].w;
        float _1786 = fma(_982, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974)) + cbModelParam._m0[15u].w;
        float _1789 = fma(_920, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918));
        float _1792 = fma(_920, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918));
        float _1795 = fma(_920, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918));
        float _1823;
        if (_1789 > 0.0)
        {
            _1823 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1823 = frontier_phi_14_12_ladder;
        }
        float _2048;
        if (_1792 > 0.0)
        {
            _2048 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2048 = frontier_phi_23_19_ladder;
        }
        float _2305;
        if (_1795 > 0.0)
        {
            _2305 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2305 = frontier_phi_35_30_ladder;
        }
        float _2307 = isnan(_2048) ? _1823 : (isnan(_1823) ? _2048 : min(_1823, _2048));
        float _2308 = isnan(_2305) ? _2307 : (isnan(_2307) ? _2305 : min(_2307, _2305));
        float _2312 = (_2308 * _1789) + _1778;
        float _2313 = (_2308 * _1792) + _1782;
        float _2314 = (_2308 * _1795) + _1786;
        float _2315 = _2308 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2315;
        float _2319 = _2315 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 > _2319) || ((_2313 < _2317) || ((_2312 < _2317) || (_2312 > _2319))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2442 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2314, cbModelParam._m0[9u].z, fma(_2313, cbModelParam._m0[9u].y, _2312 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2314, cbModelParam._m0[10u].z, fma(_2313, cbModelParam._m0[10u].y, _2312 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2314, cbModelParam._m0[11u].z, fma(_2313, cbModelParam._m0[11u].y, _2312 * cbModelParam._m0[11u].x))), _1729);
            frontier_phi_13_35_ladder = _2442.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2442.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2442.x * cbModelParam._m0[1u].y;
        }
        _1811 = frontier_phi_13_35_ladder_2;
        _1813 = frontier_phi_13_35_ladder_1;
        _1815 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_918, _919, _920), _1729);
        _1811 = _1799.x * cbModelParam._m0[1u].y;
        _1813 = _1799.y * cbModelParam._m0[1u].y;
        _1815 = _1799.z * cbModelParam._m0[1u].y;
    }
    float _1819 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1819 : min(cbModelParam._m0[25u].w, _1819));
    float _1911;
    float _1913;
    float _1915;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1875 = fma(_982, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974)) + cbModelParam._m0[21u].w;
        float _1879 = fma(_982, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974)) + cbModelParam._m0[22u].w;
        float _1883 = fma(_982, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974)) + cbModelParam._m0[23u].w;
        float _1886 = fma(_920, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918));
        float _1889 = fma(_920, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918));
        float _1892 = fma(_920, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918));
        float _2053;
        if (_1886 > 0.0)
        {
            _2053 = abs((1.0 - _1875) / _1886);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1875 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2053 = frontier_phi_25_21_ladder;
        }
        float _2332;
        if (_1889 > 0.0)
        {
            _2332 = abs((1.0 - _1879) / _1889);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1879 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2332 = frontier_phi_37_32_ladder;
        }
        float _2545;
        if (_1892 > 0.0)
        {
            _2545 = abs((1.0 - _1883) / _1892);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1883 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2545 = frontier_phi_46_43_ladder;
        }
        float _2547 = isnan(_2332) ? _2053 : (isnan(_2053) ? _2332 : min(_2053, _2332));
        float _2548 = isnan(_2545) ? _2547 : (isnan(_2547) ? _2545 : min(_2547, _2545));
        float _2552 = (_2548 * _1886) + _1875;
        float _2553 = (_2548 * _1889) + _1879;
        float _2554 = (_2548 * _1892) + _1883;
        float _2555 = _2548 * 9.9999997473787516355514526367188e-05;
        float _2556 = (-1.0) - _2555;
        float _2558 = _2555 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2554 > _2558) || ((_2554 < _2556) || ((_2553 > _2558) || ((_2553 < _2556) || ((_2552 < _2556) || (_2552 > _2558))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2554, cbModelParam._m0[17u].z, fma(_2553, cbModelParam._m0[17u].y, _2552 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2554, cbModelParam._m0[18u].z, fma(_2553, cbModelParam._m0[18u].y, _2552 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2554, cbModelParam._m0[19u].z, fma(_2553, cbModelParam._m0[19u].y, _2552 * cbModelParam._m0[19u].x))), _1820);
            frontier_phi_22_46_ladder = _2753.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2753.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2753.x * cbModelParam._m0[1u].z;
        }
        _1911 = frontier_phi_22_46_ladder_2;
        _1913 = frontier_phi_22_46_ladder_1;
        _1915 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_918, _919, _920), _1820);
        _1911 = _1895.x * cbModelParam._m0[1u].z;
        _1913 = _1895.y * cbModelParam._m0[1u].z;
        _1915 = _1895.z * cbModelParam._m0[1u].z;
    }
    float _1928 = (((_945 * _894) + _946) * _910) * ((cbModelParam._m0[1u].w * (_1911 - _1811)) + _1811);
    float _1930 = (((_945 * _896) + _946) * _910) * ((cbModelParam._m0[1u].w * (_1913 - _1813)) + _1813);
    float _1932 = (((_945 * _897) + _946) * _910) * ((cbModelParam._m0[1u].w * (_1915 - _1815)) + _1815);
    float _1935 = fma(_1932, cbSceneParam._m0[89u].z, fma(_1930, cbSceneParam._m0[89u].y, _1928 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1932, cbSceneParam._m0[90u].z, fma(_1930, cbSceneParam._m0[90u].y, _1928 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1932, cbSceneParam._m0[91u].z, fma(_1930, cbSceneParam._m0[91u].y, _1928 * cbSceneParam._m0[91u].x));
    vec4 _1949 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_832, _833));
    float _1951 = _1949.w;
    float _1963 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1951);
    float _1964 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1951);
    float _1965 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1951);
    uvec4 _1969 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _1971 = _1969.x * 14u;
    uint _1972 = _1971 + 13u;
    float _1979 = _910 + (-1.0);
    float _1984 = (cbLight._m0[_1972].x * _1979) + 1.0;
    float _1985 = (cbLight._m0[_1972].y * _1979) + 1.0;
    float _1986 = (cbLight._m0[_1972].z * _1979) + 1.0;
    float _1987 = (cbLight._m0[_1972].w * _1979) + 1.0;
    uint _1988 = _1971 + 5u;
    float _1994 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _1998 = _1971 + 4u;
    float _2007 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _2011 = _1971 | 1u;
    float _2022 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_745, _746, _747));
    float _2025 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_745, _746, _747));
    float _4192 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _4203 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2030 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.3183098733425140380859375;
    float _2032 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.3183098733425140380859375;
    float _2039 = ((cbLight._m0[_1988].x * _1994) * _2032) + (((cbLight._m0[_1998].x * _1963) * _2007) * _2030);
    float _2040 = ((_1994 * cbLight._m0[_1988].y) * _2032) + (((cbLight._m0[_1998].y * _1964) * _2007) * _2030);
    float _2041 = ((_1994 * cbLight._m0[_1988].z) * _2032) + (((cbLight._m0[_1998].z * _1965) * _2007) * _2030);
    uvec4 _2045 = floatBitsToUint(cbLight._m0[_1971 + 12u]);
    bool _2047 = _2045.x == 0u;
    float _2058;
    float _2060;
    float _2062;
    if (_2047)
    {
        _2058 = _2039;
        _2060 = _2040;
        _2062 = _2041;
    }
    else
    {
        uint _2066 = _1971 + 6u;
        float _2082 = (dot(vec3(cbLight._m0[_1971 + 2u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2083 = _2082 * _2082;
        float _4214 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2084 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2085 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2058 = (((cbLight._m0[_2066].x * 0.3183098733425140380859375) * _2084) * _2085) + _2039;
        _2060 = (((cbLight._m0[_2066].y * 0.3183098733425140380859375) * _2084) * _2085) + _2040;
        _2062 = (((cbLight._m0[_2066].z * 0.3183098733425140380859375) * _2084) * _2085) + _2041;
    }
    bool _2065 = _2045.y == 0u;
    float _2103;
    float _2105;
    float _2107;
    if (_2065)
    {
        _2103 = _2058;
        _2105 = _2060;
        _2107 = _2062;
    }
    else
    {
        uint _2276 = _1971 + 7u;
        float _2292 = (dot(vec3(cbLight._m0[_1971 + 3u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2293 = _2292 * _2292;
        float _4230 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2294 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2295 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2103 = (((cbLight._m0[_2276].x * 0.3183098733425140380859375) * _2294) * _2295) + _2058;
        _2105 = (((cbLight._m0[_2276].y * 0.3183098733425140380859375) * _2294) * _2295) + _2060;
        _2107 = (((cbLight._m0[_2276].z * 0.3183098733425140380859375) * _2294) * _2295) + _2062;
    }
    uint _2110 = _1971 + 8u;
    float _2123 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _748) * 0.949999988079071044921875);
    float _2124 = _2123 * _2123;
    float _2125 = cbLight._m0[_1971].x + _824;
    float _2126 = cbLight._m0[_1971].y + _825;
    float _2127 = cbLight._m0[_1971].z + _826;
    float _2131 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
    float _2132 = _2131 * _2125;
    float _2133 = _2131 * _2126;
    float _2134 = _2131 * _2127;
    float _2135 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_1971].xyz));
    float _4246 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _4257 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _2139 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2140 = dot(vec3(_745, _746, _747), vec3(_2132, _2133, _2134));
    float _4268 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2132, _2133, _2134));
    float _4279 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2148 = _2124 * _2124;
    float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
    float _2160 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
    float _2161 = 0.959999978542327880859375 - _891;
    float _2163 = 0.959999978542327880859375 - _892;
    float _2164 = 0.959999978542327880859375 - _893;
    float _2171 = 1.0 - _2124;
    float _2182 = (0.5 / (((_2139 * ((_2138 * _2171) + _2124)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2171) + _2124) * _2138))) * _2138;
    float _4290 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2184 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
    uint _2198 = _1971 + 9u;
    float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _748) * 0.949999988079071044921875);
    float _2210 = _2209 * _2209;
    float _2211 = cbLight._m0[_2011].x + _824;
    float _2212 = cbLight._m0[_2011].y + _825;
    float _2213 = cbLight._m0[_2011].z + _826;
    float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
    float _2218 = _2217 * _2211;
    float _2219 = _2217 * _2212;
    float _2220 = _2217 * _2213;
    float _2221 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2011].xyz));
    float _4301 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2225 = dot(vec3(_745, _746, _747), vec3(_2218, _2219, _2220));
    float _4312 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2229 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2218, _2219, _2220));
    float _4323 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2233 = _2210 * _2210;
    float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
    float _2244 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
    float _2251 = 1.0 - _2210;
    float _2261 = (0.5 / (((_2139 * ((_2224 * _2251) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2251) + _2210) * _2224))) * _2224;
    float _4334 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2263 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
    float _2273 = (((((_2244 * _2161) + _894) * cbLight._m0[_2198].x) * _2263) * _1994) + ((((cbLight._m0[_2110].x * _1963) * ((_2160 * _2161) + _894)) * _2184) * _2007);
    float _2274 = (((((_2244 * _2163) + _896) * cbLight._m0[_2198].y) * _2263) * _1994) + ((((cbLight._m0[_2110].y * _1964) * ((_2160 * _2163) + _896)) * _2184) * _2007);
    float _2275 = (((((_2244 * _2164) + _897) * cbLight._m0[_2198].z) * _2263) * _1994) + ((((cbLight._m0[_2110].z * _1965) * ((_2160 * _2164) + _897)) * _2184) * _2007);
    float _2337;
    float _2339;
    float _2341;
    if (_2047)
    {
        _2337 = _2273;
        _2339 = _2274;
        _2341 = _2275;
    }
    else
    {
        uint _2343 = _1971 + 2u;
        uint _2347 = _1971 + 10u;
        float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _748) * 0.949999988079071044921875);
        float _2362 = _2361 * _2361;
        float _2363 = cbLight._m0[_2343].x + _824;
        float _2364 = cbLight._m0[_2343].y + _825;
        float _2365 = cbLight._m0[_2343].z + _826;
        float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
        float _2370 = _2369 * _2363;
        float _2371 = _2369 * _2364;
        float _2372 = _2369 * _2365;
        float _2373 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2343].xyz));
        float _4345 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2377 = dot(vec3(_745, _746, _747), vec3(_2370, _2371, _2372));
        float _4356 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2381 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2370, _2371, _2372));
        float _4367 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2385 = _2362 * _2362;
        float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
        float _2396 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
        float _2403 = 1.0 - _2362;
        float _2413 = (0.5 / (((_2139 * ((_2376 * _2403) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2403) + _2362) * _2376))) * _2376;
        float _4378 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2415 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
        float _2416 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2337 = (((((_2396 * _2161) + _894) * cbLight._m0[_2347].x) * _2415) * _2416) + _2273;
        _2339 = (((((_2396 * _2163) + _896) * cbLight._m0[_2347].y) * _2415) * _2416) + _2274;
        _2341 = (((((_2396 * _2164) + _897) * cbLight._m0[_2347].z) * _2415) * _2416) + _2275;
    }
    float _2451;
    float _2453;
    float _2455;
    if (_2065)
    {
        _2451 = _2337;
        _2453 = _2339;
        _2455 = _2341;
    }
    else
    {
        uint _2462 = _1971 + 3u;
        uint _2466 = _1971 + 11u;
        float _2480 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2462].w)) * _748) * 0.949999988079071044921875);
        float _2481 = _2480 * _2480;
        float _2482 = cbLight._m0[_2462].x + _824;
        float _2483 = cbLight._m0[_2462].y + _825;
        float _2484 = cbLight._m0[_2462].z + _826;
        float _2488 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
        float _2489 = _2488 * _2482;
        float _2490 = _2488 * _2483;
        float _2491 = _2488 * _2484;
        float _2492 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2462].xyz));
        float _4394 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2496 = dot(vec3(_745, _746, _747), vec3(_2489, _2490, _2491));
        float _4405 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2499 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2500 = dot(vec3(cbLight._m0[_2462].xyz), vec3(_2489, _2490, _2491));
        float _4416 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2504 = _2481 * _2481;
        float _2508 = ((_2499 * _2499) * (_2504 + (-1.0))) + 1.0;
        float _2515 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
        float _2522 = 1.0 - _2481;
        float _2532 = (0.5 / (((_2139 * ((_2495 * _2522) + _2481)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2522) + _2481) * _2495))) * _2495;
        float _4427 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2534 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2504 / ((_2508 * _2508) * 3.141590118408203125));
        float _2535 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2451 = (((((_2515 * _2161) + _894) * cbLight._m0[_2466].x) * _2534) * _2535) + _2337;
        _2453 = (((((_2515 * _2163) + _896) * cbLight._m0[_2466].y) * _2534) * _2535) + _2339;
        _2455 = (((((_2515 * _2164) + _897) * cbLight._m0[_2466].z) * _2534) * _2535) + _2341;
    }
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    if (_1969.y == 0u)
    {
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2610;
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2610;
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2610;
        uvec4 _2625 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2626 = _2625.x;
        uint _2637 = uint((float(_2625.y) * floor(float(uint(cbSceneParam._m0[85u].y * _833) / _2626))) + floor(float(uint(cbSceneParam._m0[85u].x * _832) / _2626)));
        float _2647 = (log2(_2613 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2648 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        uint _2651 = uint(isnan(14.0) ? _2648 : (isnan(_2648) ? 14.0 : min(_2648, 14.0)));
        uvec4 _2656 = texelFetch(g_lightClusterGridBuffer, int(((_2651 << 2u) + (_2637 << 6u)) >> 2u));
        uint _2657 = _2656.x;
        uint _2658 = _2625.z;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        if (((((1u << ((_2658 >> 4u) & 15u)) + 4294967295u) & _2657) == 0u) || ((_2658 & 240u) == 0u))
        {
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
        }
        else
        {
            float _2759;
            float _2761;
            float _2763;
            float _2765;
            float _2767;
            float _2769;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            uint _2909 = 0u;
            uint _2918;
            bool _2919;
            for (;;)
            {
                _2918 = texelFetch(g_lightClassification, int((((_2651 << 5u) + (_2637 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                _2919 = _2918 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2919)
                {
                    frontier_phi_61_pred = _2903;
                    frontier_phi_61_pred_1 = _2908;
                    frontier_phi_61_pred_2 = _2907;
                    frontier_phi_61_pred_3 = _2906;
                    frontier_phi_61_pred_4 = _2905;
                    frontier_phi_61_pred_5 = _2904;
                }
                else
                {
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    uint _3033;
                    _3027 = _2903;
                    _3028 = _2904;
                    _3029 = _2905;
                    _3030 = _2906;
                    _3031 = _2907;
                    _3032 = _2908;
                    _3033 = _2918;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    for (;;)
                    {
                        uint _3037 = uint(findLSB(_3033)) + (_2909 << 5u);
                        uint _3034 = (_3033 + 4294967295u) & _3033;
                        uint _3039 = _3037 * 48u;
                        vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 3u)).x));
                        uint _3059 = (_3037 * 48u) + 4u;
                        vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 3u)).x));
                        uint _3078 = (_3037 * 48u) + 8u;
                        vec3 _3089 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x));
                        float _3093 = _3053.x - _2611;
                        float _3094 = _3053.y - _2612;
                        float _3095 = _3053.z - _2613;
                        float _3096 = dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095));
                        float _3099 = inversesqrt(_3096);
                        float _3100 = _3099 * _3093;
                        float _3101 = _3099 * _3094;
                        float _3102 = _3099 * _3095;
                        float _3103 = dot(vec3(_851, _854, _857), vec3(_3100, _3101, _3102));
                        float _3108 = 1.0 - (_3096 * _3053.w);
                        float _4453 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3109 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3110 = sqrt(_3096) * _3072.w;
                        float _3113 = 1.39999997615814208984375 / (_3110 + 1.39999997615814208984375);
                        float _3114 = _3113 * _3113;
                        float _3117 = ((1.0 - _3114) * _3103) + _3114;
                        float _3120 = _3110 * _3110;
                        float _3124 = ((isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))) * _3109) / ((_3120 * 0.699999988079071044921875) + 1.0);
                        float _3128 = (-0.0) - _2611;
                        float _3129 = (-0.0) - _2612;
                        float _3130 = (-0.0) - _2613;
                        float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                        float _3135 = _3134 * _3128;
                        float _3136 = _3134 * _3129;
                        float _3137 = _3134 * _3130;
                        float _3145 = exp2(log2(1.0 / ((_3120 * 3.5) + 5.0)) * 0.25);
                        float _3146 = 1.0 - _926;
                        float _3153 = sqrt(1.0 - ((1.0 - (_3146 * _3146)) * (1.0 - (_3145 * _3145))));
                        float _3154 = _3153 * _3153;
                        float _3155 = _3154 * _3154;
                        float _3156 = _3135 + _3100;
                        float _3157 = _3136 + _3101;
                        float _3158 = _3137 + _3102;
                        float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                        float _3166 = dot(vec3(_851, _854, _857), vec3(_3135, _3136, _3137));
                        float _4469 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3169 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3170 = dot(vec3(_851, _854, _857), vec3(_3162 * _3156, _3162 * _3157, _3162 * _3158));
                        float _4480 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3173 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3177 = ((_3173 * _3173) * (_3155 + (-1.0))) + 1.0;
                        float _3178 = _3113 * _3154;
                        float _3179 = _3178 * _3178;
                        float _3182 = ((1.0 - _3179) * _3103) + _3179;
                        float _4491 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3184 = 1.0 - _3154;
                        float _3194 = (0.5 / (((_3183 * ((_3169 * _3184) + _3154)) + 9.9999999392252902907785028219223e-09) + (((_3183 * _3184) + _3154) * _3169))) * _3183;
                        float _4502 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3205 = (((_3155 * 3.1415927410125732421875) * (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) / ((_3177 * _3177) * ((_3120 * 2.1991131305694580078125) + 3.141590118408203125))) * _3109;
                        _2962 = (_3124 * _3072.x) + _3030;
                        _2963 = (_3124 * _3072.y) + _3031;
                        _2964 = (_3124 * _3072.z) + _3032;
                        _2959 = (_3205 * _3089.x) + _3027;
                        _2960 = (_3205 * _3089.y) + _3028;
                        _2961 = (_3205 * _3089.z) + _3029;
                        if (_3034 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3027 = _2959;
                            _3028 = _2960;
                            _3029 = _2961;
                            _3030 = _2962;
                            _3031 = _2963;
                            _3032 = _2964;
                            _3033 = _3034;
                        }
                    }
                    frontier_phi_61_pred = _2959;
                    frontier_phi_61_pred_1 = _2964;
                    frontier_phi_61_pred_2 = _2963;
                    frontier_phi_61_pred_3 = _2962;
                    frontier_phi_61_pred_4 = _2961;
                    frontier_phi_61_pred_5 = _2960;
                }
                _2759 = frontier_phi_61_pred;
                _2769 = frontier_phi_61_pred_1;
                _2767 = frontier_phi_61_pred_2;
                _2765 = frontier_phi_61_pred_3;
                _2763 = frontier_phi_61_pred_4;
                _2761 = frontier_phi_61_pred_5;
                uint _2910 = _2909 + 1u;
                if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2903 = _2759;
                    _2904 = _2761;
                    _2905 = _2763;
                    _2906 = _2765;
                    _2907 = _2767;
                    _2908 = _2769;
                    _2909 = _2910;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
        }
        uvec4 _2772 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2773 = _2772.z;
        uint _2775 = (_2773 >> 8u) & 15u;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((4294967295u << _2775) & _2657) == 0u)
        {
            _2871 = _2758;
            _2873 = _2760;
            _2875 = _2762;
            _2877 = _2764;
            _2879 = _2766;
            _2881 = _2768;
        }
        else
        {
            float _2896 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
            float _2897 = _2896 * _2611;
            float _2898 = _2896 * _2612;
            float _2899 = _2896 * _2613;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2775 < ((_2773 >> 12u) & 15u))
            {
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _3010 = _2758;
                float _3011 = _2760;
                float _3012 = _2762;
                float _3013 = _2764;
                float _3014 = _2766;
                float _3015 = _2768;
                uint _3016 = _2775;
                uint _3025;
                bool _3026;
                for (;;)
                {
                    _3025 = texelFetch(g_lightClassification, int((((_2651 << 5u) + (_2637 << 9u)) + (_3016 << 2u)) >> 2u)).x;
                    _3026 = _3025 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3026)
                    {
                        frontier_phi_67_pred = _3013;
                        frontier_phi_67_pred_1 = _3014;
                        frontier_phi_67_pred_2 = _3015;
                        frontier_phi_67_pred_3 = _3012;
                        frontier_phi_67_pred_4 = _3011;
                        frontier_phi_67_pred_5 = _3010;
                    }
                    else
                    {
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3223 = _3010;
                        float _3224 = _3011;
                        float _3225 = _3012;
                        float _3226 = _3013;
                        float _3227 = _3014;
                        float _3228 = _3015;
                        uint _3229 = _3025;
                        uint _3230;
                        vec4 _3255;
                        float _3256;
                        vec4 _3271;
                        vec3 _3283;
                        vec4 _3298;
                        vec4 _3313;
                        float _3359;
                        bool _3360;
                        for (;;)
                        {
                            uint _3240 = ((_3016 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3229));
                            _3230 = (_3229 + 4294967295u) & _3229;
                            uint _3242 = _3240 * 40u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            _3256 = _3255.w;
                            uint _3258 = (_3240 * 40u) + 4u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3273 = (_3240 * 40u) + 8u;
                            _3283 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x));
                            uint _3285 = (_3240 * 40u) + 16u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3300 = (_3240 * 40u) + 20u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3315 = (_3240 * 40u) + 24u;
                            vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3334 = (_3240 * 40u) + 28u;
                            vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            _3359 = fma(_2613, _3347.z, fma(_2612, _3347.y, _3347.x * _2611)) + _3347.w;
                            _3360 = !((fma(_2613, _3328.z, fma(_2612, _3328.y, _3328.x * _2611)) + _3328.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3360)
                            {
                                float _3387 = _3255.x - _2611;
                                float _3388 = _3255.y - _2612;
                                float _3389 = _3255.z - _2613;
                                float _3390 = dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389));
                                float _3393 = inversesqrt(_3390);
                                float _3394 = _3393 * _3387;
                                float _3395 = _3393 * _3388;
                                float _3396 = _3393 * _3389;
                                float _3400 = 1.0 - (_3390 / (_3256 * _3256));
                                float _4513 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3405 = sqrt(_3390) * _3271.w;
                                float _3407 = 1.39999997615814208984375 / (_3405 + 1.39999997615814208984375);
                                float _3408 = _3407 * _3407;
                                float _3411 = ((1.0 - _3408) * dot(vec3(_3394, _3395, _3396), vec3(_851, _854, _857))) + _3408;
                                float _3414 = _3405 * _3405;
                                float _3418 = (fma(_2613, _3298.z, fma(_2612, _3298.y, _3298.x * _2611)) + _3298.w) / _3359;
                                float _3419 = (fma(_2613, _3313.z, fma(_2612, _3313.y, _3313.x * _2611)) + _3313.w) / _3359;
                                float _3423 = 1.0 - dot(vec2(_3418, _3419), vec2(_3418, _3419));
                                float _4529 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3425 = _3424 * (((isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))) * _3401) / ((_3414 * 0.699999988079071044921875) + 1.0));
                                float _3437 = exp2(log2(1.0 / ((_3414 * 3.5) + 5.0)) * 0.25);
                                float _3438 = 1.0 - _926;
                                float _3445 = sqrt(1.0 - ((1.0 - (_3438 * _3438)) * (1.0 - (_3437 * _3437))));
                                float _3446 = _3445 * _3445;
                                float _3447 = _3446 * _3446;
                                float _3448 = _3394 - _2897;
                                float _3449 = _3395 - _2898;
                                float _3450 = _3396 - _2899;
                                float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                                float _3458 = dot(vec3(_851, _854, _857), vec3((-0.0) - _2897, (-0.0) - _2898, (-0.0) - _2899));
                                float _4540 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3461 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3462 = dot(vec3(_851, _854, _857), vec3(_3454 * _3448, _3454 * _3449, _3454 * _3450));
                                float _4551 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3465 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3469 = ((_3465 * _3465) * (_3447 + (-1.0))) + 1.0;
                                float _3470 = _3407 * _3446;
                                float _3471 = _3470 * _3470;
                                float _3477 = ((1.0 - _3471) * dot(vec3(_851, _854, _857), vec3(_3394, _3395, _3396))) + _3471;
                                float _4562 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3479 = 1.0 - _3446;
                                float _3489 = (0.5 / (((_3478 * ((_3461 * _3479) + _3446)) + 9.9999999392252902907785028219223e-09) + (((_3478 * _3479) + _3446) * _3461))) * _3478;
                                float _4573 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3499 = (_3424 * _3401) * (((_3447 * 3.1415927410125732421875) * (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) / ((_3469 * _3469) * ((_3414 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3499 * _3283.x;
                                frontier_phi_73_pred_1 = _3499 * _3283.y;
                                frontier_phi_73_pred_2 = _3425 * _3271.z;
                                frontier_phi_73_pred_3 = _3425 * _3271.y;
                                frontier_phi_73_pred_4 = _3425 * _3271.x;
                                frontier_phi_73_pred_5 = _3499 * _3283.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3503 = frontier_phi_73_pred;
                            _3504 = frontier_phi_73_pred_1;
                            _3508 = frontier_phi_73_pred_2;
                            _3507 = frontier_phi_73_pred_3;
                            _3506 = frontier_phi_73_pred_4;
                            _3505 = frontier_phi_73_pred_5;
                            _3213 = _3506 + _3226;
                            _3214 = _3507 + _3227;
                            _3215 = _3508 + _3228;
                            _3210 = _3503 + _3223;
                            _3211 = _3504 + _3224;
                            _3212 = _3505 + _3225;
                            if (_3230 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3230;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3213;
                        frontier_phi_67_pred_1 = _3214;
                        frontier_phi_67_pred_2 = _3215;
                        frontier_phi_67_pred_3 = _3212;
                        frontier_phi_67_pred_4 = _3211;
                        frontier_phi_67_pred_5 = _3210;
                    }
                    _2878 = frontier_phi_67_pred;
                    _2880 = frontier_phi_67_pred_1;
                    _2882 = frontier_phi_67_pred_2;
                    _2876 = frontier_phi_67_pred_3;
                    _2874 = frontier_phi_67_pred_4;
                    _2872 = frontier_phi_67_pred_5;
                    uint _3017 = _3016 + 1u;
                    if (_3017 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3010 = _2872;
                        _3011 = _2874;
                        _3012 = _2876;
                        _3013 = _2878;
                        _3014 = _2880;
                        _3015 = _2882;
                        _3016 = _3017;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2880;
                frontier_phi_55_56_ladder_1 = _2882;
                frontier_phi_55_56_ladder_2 = _2878;
                frontier_phi_55_56_ladder_3 = _2876;
                frontier_phi_55_56_ladder_4 = _2874;
                frontier_phi_55_56_ladder_5 = _2872;
            }
            else
            {
                frontier_phi_55_56_ladder = _2766;
                frontier_phi_55_56_ladder_1 = _2768;
                frontier_phi_55_56_ladder_2 = _2764;
                frontier_phi_55_56_ladder_3 = _2762;
                frontier_phi_55_56_ladder_4 = _2760;
                frontier_phi_55_56_ladder_5 = _2758;
            }
            _2871 = frontier_phi_55_56_ladder_5;
            _2873 = frontier_phi_55_56_ladder_4;
            _2875 = frontier_phi_55_56_ladder_3;
            _2877 = frontier_phi_55_56_ladder_2;
            _2879 = frontier_phi_55_56_ladder;
            _2881 = frontier_phi_55_56_ladder_1;
        }
        float _2886 = isnan(1.0) ? _910 : (isnan(_910) ? 1.0 : min(_910, 1.0));
        _2670 = (_2886 * _2877) + _2103;
        _2672 = (_2886 * _2879) + _2105;
        _2674 = (_2886 * _2881) + _2107;
        _2676 = ((_2871 * _894) * _2886) + _2451;
        _2678 = ((_2873 * _896) * _2886) + _2453;
        _2680 = ((_2875 * _897) * _2886) + _2455;
    }
    else
    {
        _2670 = _2103;
        _2672 = _2105;
        _2674 = _2107;
        _2676 = _2451;
        _2678 = _2453;
        _2680 = _2455;
    }
    float _4589 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4600 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4611 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    uint _2700 = _275 + 6u;
    float _2708 = _832 / cbSceneParam._m0[86u].x;
    float _2709 = _833 / cbSceneParam._m0[86u].y;
    vec4 _2723 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2708, _2709, (log2((isnan(cbSceneParam._m0[77u].w) ? _767 : (isnan(_767) ? cbSceneParam._m0[77u].w : min(_767, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2725 = _2723.x;
    float _2726 = _2723.y;
    float _2727 = _2723.z;
    float _2728 = _2723.w;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    if (_767 > cbSceneParam._m0[78u].w)
    {
        float _2783 = isnan(_767) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _767 : min(cbSceneParam._m0[80u].w, _767));
        float _2784 = _2783 / _767;
        float _2795 = _2784 * _817;
        float _2796 = _818 * _2784;
        float _2797 = (-0.0) - _2796;
        float _2799 = _2784 * _819;
        float _2801 = (cbSceneParam._m0[77u].w * _2797) / _2783;
        float _2802 = _2801 + cbSceneParam._m0[79u].w;
        float _2803 = cbSceneParam._m0[79u].w - _2796;
        float _2809 = sqrt(((_2795 * _2795) + (_2796 * _2796)) + (_2799 * _2799));
        float _2812 = (1.0 - (cbSceneParam._m0[77u].w / _2783)) * _2809;
        float _2817 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2819 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2972;
        if (abs((_2797 - _2801) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2972 = ((((_2802 > 0.0) ? exp2(_2817 * _2802) : (2.0 - exp2(_2819 * _2802))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2812;
        }
        else
        {
            float _2932 = 1.0 / cbSceneParam._m0[80u].x;
            float _2933 = isnan(_2803) ? _2802 : (isnan(_2802) ? _2803 : max(_2802, _2803));
            float _2934 = isnan(_2803) ? _2802 : (isnan(_2802) ? _2803 : min(_2802, _2803));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            float _2944 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : min(_2934, 0.0));
            _2972 = ((abs(_2809 / _2797) * cbSceneParam._m0[80u].y) * ((((_2943 - _2944) * 2.0) - ((exp2(_2817 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0)))) - exp2(_2817 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0))))) * _2932)) - ((exp2(_2819 * _2943) - exp2(_2819 * _2944)) * _2932))) + (_2812 * cbSceneParam._m0[80u].z);
        }
        vec4 _2974 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2708, _2709, 1.0), 0.0);
        float _2983 = exp2((_2972 * (-1.44269502162933349609375)) * (1.0 - _2974.w));
        float _2984 = log2(_2983);
        float _3000 = log2(_2728);
        _2821 = (exp2(_3000 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].x)) * _2974.x) / cbSceneParam._m0[78u].x)) + _2725;
        _2823 = (exp2(_3000 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].y)) * _2974.y) / cbSceneParam._m0[78u].y)) + _2726;
        _2825 = (exp2(_3000 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].z)) * _2974.z) / cbSceneParam._m0[78u].z)) + _2727;
        _2827 = _2983 * _2728;
    }
    else
    {
        _2821 = _2725;
        _2823 = _2726;
        _2825 = _2727;
        _2827 = _2728;
    }
    float _2839 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2840 = _2839 == 3.0;
    float _2841 = log2(_2827);
    float _2848 = exp2(_2841 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2670 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _910))) + ((_2676 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1718)) * cbPerFrame._m0[3u].x));
    float _2849 = exp2(_2841 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2672 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _910))) + ((_2678 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1718)) * cbPerFrame._m0[3u].x));
    float _2850 = exp2(_2841 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2674 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _910))) + ((_2680 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1718)) * cbPerFrame._m0[3u].x));
    float _2859 = (_2839 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2859 * (_2840 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2821)));
    SV_Target.y = _2859 * (_2840 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2823)));
    SV_Target.z = _2859 * (_2840 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2825)));
    SV_Target.w = cbInstanceData._m0[_2700].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2700].w;
}


