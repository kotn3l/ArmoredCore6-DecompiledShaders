#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1140;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3749 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3760 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3771 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _263 = _258 + 1u;
    uint _267 = _258 + 2u;
    float _276 = sqrt(((cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x));
    float _277 = _276 * TEXCOORD.z;
    float _278 = _276 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _277) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _278) + cbTextureTilingScale._m0[13u].w));
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _319 = _314.x * cbMtdParam._m0[9u].x;
    float _320 = _314.y * cbMtdParam._m0[9u].y;
    float _321 = _314.z * cbMtdParam._m0[9u].z;
    float _325 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _291.x) * _319;
    float _328 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _291.y) * _320;
    float _331 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _291.z) * _321;
    float _338 = ((_319 - _325) * (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) + _325;
    float _339 = ((_320 - _328) * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) + _328;
    float _340 = ((_321 - _331) * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) + _331;
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _277) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _278) + cbTextureTilingScale._m0[14u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _277) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _278) + cbTextureTilingScale._m0[20u].w));
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _409 = _405.z;
    float _413 = (_405.x * 2.0) + (-1.0);
    float _414 = (_405.y * 2.0) + (-1.0);
    float _415 = dot(vec2(_413, _414), vec2(_413, _414));
    float _3782 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _420 = sqrt(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))));
    float _425 = _413 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_379.x * 2.0) + (-1.0)));
    float _426 = _414 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_379.y * 2.0) + (-1.0)));
    float _429 = fma(_420, _225, fma(_426, _232, _425 * _218));
    float _432 = fma(_420, _226, fma(_426, _233, _425 * _219));
    float _435 = fma(_420, _227, fma(_426, _234, _425 * _220));
    float _439 = inversesqrt(dot(vec3(_429, _432, _435), vec3(_429, _432, _435)));
    vec4 _475 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _277) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _278) + cbTextureTilingScale._m0[11u].w));
    float _477 = _475.x;
    float _478 = 1.0 - _477;
    float _485 = ((_477 - _478) * cbMtdParam._m0[24u].z) + _478;
    float _487 = (cbMtdParam._m0[19u].x + dot(vec4(_439 * _429, _439 * _432, _439 * _435, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_485 * cbMtdParam._m0[21u].z);
    float _3793 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _503 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_485 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3804 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _504 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _508 = ((_488 * ((_359.x * cbMtdParam._m0[18u].x) - _338)) * _504) + _338;
    float _509 = ((_488 * ((_359.y * cbMtdParam._m0[18u].y) - _339)) * _504) + _339;
    float _510 = ((_488 * ((_359.z * cbMtdParam._m0[18u].z) - _340)) * _504) + _340;
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _525 = _523.x;
    float _528 = _525 - ((_525 * _488) * _504);
    float _533 = (((_379.z - _409) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _409;
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _277) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _278) + cbTextureTilingScale._m0[15u].w));
    float _553 = (_546.x * 2.0) + (-1.0);
    float _554 = (_546.y * 2.0) + (-1.0);
    float _555 = dot(vec2(_553, _554), vec2(_553, _554));
    float _3815 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _564 = (((_546.z - _533) * _488) * _504) + _533;
    float _579 = (((cbMtdParam._m0[21u].x * _425) + ((_553 - _425) * _488)) * _504) + _425;
    float _580 = (((cbMtdParam._m0[21u].x * _426) + ((_554 - _426) * _488)) * _504) + _426;
    float _581 = (((sqrt(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) - _420) * _488) * _504) + _420;
    float _583 = cbMtdParam._m0[22u].x + _405.w;
    float _586 = fma(_581, _225, fma(_580, _232, _579 * _218));
    float _589 = fma(_581, _226, fma(_580, _233, _579 * _219));
    float _592 = fma(_581, _227, fma(_580, _234, _579 * _220));
    float _596 = inversesqrt(dot(vec3(_586, _589, _592), vec3(_586, _589, _592)));
    float _597 = _596 * _586;
    float _598 = _596 * _589;
    float _599 = _596 * _592;
    float _3826 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _600 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3848 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3859 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3870 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3881 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _605 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _619 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _670 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _660);
    float _671 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _660);
    float _672 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _660);
    float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
    float _677 = _670 * _676;
    float _678 = _671 * _676;
    float _679 = _672 * _676;
    float _685 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _686 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _707 = fma(_599, cbSceneParam._m0[5u].z, fma(_598, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _597));
    float _710 = fma(_599, cbSceneParam._m0[6u].z, fma(_598, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _597));
    float _713 = fma(_599, cbSceneParam._m0[7u].z, fma(_598, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _597));
    uint _727 = (_258 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _733 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_727].x;
    float _734 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_727].y;
    float _735 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_727].z;
    float _3892 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _739 = 1.0 - _605;
    float _740 = _736 * _739;
    float _741 = _737 * _739;
    float _742 = _738 * _739;
    float _747 = (_736 + (-0.039999999105930328369140625)) * _605;
    float _748 = (_737 + (-0.039999999105930328369140625)) * _605;
    float _749 = (_738 + (-0.039999999105930328369140625)) * _605;
    float _750 = _747 + 0.039999999105930328369140625;
    float _752 = _748 + 0.039999999105930328369140625;
    float _753 = _749 + 0.039999999105930328369140625;
    vec4 _762 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _685, cbSceneParam._m0[86u].y * _686));
    float _766 = ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * TEXCOORD_5.w) * _762.x;
    float _767 = dot(vec3(_597, _598, _599), vec3(_677, _678, _679));
    float _770 = _767 * 2.0;
    float _774 = (_770 * _597) - _677;
    float _775 = (_770 * _598) - _678;
    float _776 = (_770 * _599) - _679;
    float _780 = abs(dot(vec3(_677, _678, _679), vec3(_597, _598, _599)));
    float _3925 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _782 = sqrt(_600);
    float _795 = exp2((_782 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_782 * 3.0));
    float _801 = (1.0 - _795) * ((_782 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _802 = _795 * _782;
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1139;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _864 = fma(_838, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830));
        float _868 = fma(_838, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830));
        float _872 = fma(_838, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830));
        float _897 = _830 + _597;
        float _898 = _834 + _598;
        float _899 = _838 + _599;
        float _909 = fma(_899, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897)) - _864;
        float _910 = fma(_899, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897)) - _868;
        float _911 = fma(_899, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897)) - _872;
        float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
        float _928 = ((_915 * _909) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_864 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_915 * _910) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_868 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_915 * _911) / cbModelParam._m0[34u].z) + ((((((_872 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        float _967 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_933.x + (-0.5));
        float _969 = _967 * (_933.y + (-0.5));
        float _970 = _967 * (_933.z + (-0.5));
        float _977 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_940.x + (-0.5));
        float _979 = _977 * (_940.y + (-0.5));
        float _980 = _977 * (_940.z + (-0.5));
        float _987 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_947.x + (-0.5));
        float _989 = _987 * (_947.y + (-0.5));
        float _990 = _987 * (_947.z + (-0.5));
        float _997 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_954.x + (-0.5));
        float _999 = _997 * (_954.y + (-0.5));
        float _1000 = _997 * (_954.z + (-0.5));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = _968 * 0.5;
        float _1005 = _978 * 0.5;
        float _1006 = _988 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1021 = (dot(vec3(_597, _598, _599), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1031 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3973 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1033 + 1.0))) + _1038) * _1001;
        float _1048 = _969 * 0.5;
        float _1049 = _979 * 0.5;
        float _1050 = _989 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_597, _598, _599), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _4006 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1075 + 1.0))) + _1080) * _1002;
        float _1090 = _970 * 0.5;
        float _1091 = _980 * 0.5;
        float _1092 = _990 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_597, _598, _599), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _4039 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1117 + 1.0))) + _1122) * _1003;
        _1139 = _970;
        _1141 = _969;
        _1142 = _968;
        _1143 = _980;
        _1144 = _979;
        _1145 = _978;
        _1146 = _990;
        _1147 = _989;
        _1148 = _988;
        _1149 = _1003;
        _1150 = _1002;
        _1151 = _1001;
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
    }
    else
    {
        _1139 = _1140;
        _1141 = _1140;
        _1142 = _1140;
        _1143 = _1140;
        _1144 = _1140;
        _1145 = _1140;
        _1146 = _1140;
        _1147 = _1140;
        _1148 = _1140;
        _1149 = _1140;
        _1150 = _1140;
        _1151 = _1140;
        _1152 = 0.0;
        _1153 = 0.0;
        _1154 = 0.0;
    }
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1179 = fma(_838, cbModelParam._m0[30u].z, fma(_834, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _830));
        float _1183 = fma(_838, cbModelParam._m0[31u].z, fma(_834, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _830));
        float _1187 = fma(_838, cbModelParam._m0[32u].z, fma(_834, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _830));
        float _1210 = _830 + _597;
        float _1211 = _834 + _598;
        float _1212 = _838 + _599;
        float _1222 = fma(_1212, cbModelParam._m0[30u].z, fma(_1211, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1210)) - _1179;
        float _1223 = fma(_1212, cbModelParam._m0[31u].z, fma(_1211, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1210)) - _1183;
        float _1224 = fma(_1212, cbModelParam._m0[32u].z, fma(_1211, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1210)) - _1187;
        float _1228 = inversesqrt(dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224)));
        float _1241 = ((_1228 * _1222) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1179 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1228 * _1223) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1183 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1228 * _1224) / cbModelParam._m0[35u].z) + ((((((_1187 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        float _1278 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1245.x + (-0.5));
        float _1280 = _1278 * (_1245.y + (-0.5));
        float _1281 = _1278 * (_1245.z + (-0.5));
        float _1288 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1252.x + (-0.5));
        float _1290 = _1288 * (_1252.y + (-0.5));
        float _1291 = _1288 * (_1252.z + (-0.5));
        float _1298 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1259.x + (-0.5));
        float _1300 = _1298 * (_1259.y + (-0.5));
        float _1301 = _1298 * (_1259.z + (-0.5));
        float _1308 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1266.x + (-0.5));
        float _1310 = _1308 * (_1266.y + (-0.5));
        float _1311 = _1308 * (_1266.z + (-0.5));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = _1279 * 0.5;
        float _1316 = _1289 * 0.5;
        float _1317 = _1299 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_597, _598, _599), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4102 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1342 + 1.0))) + _1347) * _1312;
        float _1357 = _1280 * 0.5;
        float _1358 = _1290 * 0.5;
        float _1359 = _1300 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_597, _598, _599), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4135 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1384 + 1.0))) + _1389) * _1313;
        float _1399 = _1281 * 0.5;
        float _1400 = _1291 * 0.5;
        float _1401 = _1301 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_597, _598, _599), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4168 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1426 + 1.0))) + _1431) * _1314;
        _1448 = _1281;
        _1449 = _1280;
        _1450 = _1279;
        _1451 = _1291;
        _1452 = _1290;
        _1453 = _1289;
        _1454 = _1301;
        _1455 = _1300;
        _1456 = _1299;
        _1457 = _1314;
        _1458 = _1313;
        _1459 = _1312;
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
    }
    else
    {
        _1448 = _1140;
        _1449 = _1140;
        _1450 = _1140;
        _1451 = _1140;
        _1452 = _1140;
        _1453 = _1140;
        _1454 = _1140;
        _1455 = _1140;
        _1456 = _1140;
        _1457 = _1140;
        _1458 = _1140;
        _1459 = _1140;
        _1460 = 0.0;
        _1461 = 0.0;
        _1462 = 0.0;
    }
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1152)) + _1152;
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1153)) + _1153;
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1154)) + _1154;
    float _1495 = fma(_1474, cbSceneParam._m0[89u].z, fma(_1473, cbSceneParam._m0[89u].y, _1472 * cbSceneParam._m0[89u].x));
    float _1498 = fma(_1474, cbSceneParam._m0[90u].z, fma(_1473, cbSceneParam._m0[90u].y, _1472 * cbSceneParam._m0[90u].x));
    float _1501 = fma(_1474, cbSceneParam._m0[91u].z, fma(_1473, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1472));
    float _1516 = _774 * 0.5;
    float _1517 = _775 * 0.5;
    float _1518 = _776 * 0.5;
    float _1519 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1522 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1525 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1559;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1532 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1139, _1143, _1146, _1149));
        float _1536 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1540 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1547 = dot(vec4(cbModelParam._m0[39u]), vec4(_1516, _1517, _1518, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1547) ? 0.0 : (isnan(0.0) ? _1547 : max(0.0, _1547))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1570;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1561 = dot(vec4(cbModelParam._m0[40u]), vec4(_1516, _1517, _1518, 1.0));
        _1570 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1570 = 1.0;
    }
    float _1574 = (_1570 * cbModelParam._m0[1u].x) + (_1559 * (1.0 - cbModelParam._m0[1u].x));
    float _1584 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _600);
    float _1585 = isnan(_1584) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1584 : min(cbModelParam._m0[25u].z, _1584));
    float _1665;
    float _1667;
    float _1669;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1632 = fma(_838, cbModelParam._m0[13u].z, fma(_834, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _830)) + cbModelParam._m0[13u].w;
        float _1636 = fma(_838, cbModelParam._m0[14u].z, fma(_834, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _830)) + cbModelParam._m0[14u].w;
        float _1640 = fma(_838, cbModelParam._m0[15u].z, fma(_834, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _830)) + cbModelParam._m0[15u].w;
        float _1643 = fma(_776, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774));
        float _1646 = fma(_776, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774));
        float _1649 = fma(_776, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774));
        float _1677;
        if (_1643 > 0.0)
        {
            _1677 = abs((1.0 - _1632) / _1643);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1632 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1677 = frontier_phi_14_12_ladder;
        }
        float _1848;
        if (_1646 > 0.0)
        {
            _1848 = abs((1.0 - _1636) / _1646);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1636 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1848 = frontier_phi_23_19_ladder;
        }
        float _2144;
        if (_1649 > 0.0)
        {
            _2144 = abs((1.0 - _1640) / _1649);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1640 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2144 = frontier_phi_35_30_ladder;
        }
        float _2146 = isnan(_1848) ? _1677 : (isnan(_1677) ? _1848 : min(_1677, _1848));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1643) + _1632;
        float _2152 = (_2147 * _1646) + _1636;
        float _2153 = (_2147 * _1649) + _1640;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2154;
        float _2158 = _2154 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 > _2158) || ((_2152 < _2156) || ((_2151 < _2156) || (_2151 > _2158))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2298 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2153, cbModelParam._m0[9u].z, fma(_2152, cbModelParam._m0[9u].y, _2151 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2153, cbModelParam._m0[10u].z, fma(_2152, cbModelParam._m0[10u].y, _2151 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2153, cbModelParam._m0[11u].z, fma(_2152, cbModelParam._m0[11u].y, _2151 * cbModelParam._m0[11u].x))), _1585);
            frontier_phi_13_35_ladder = _2298.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2298.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2298.x * cbModelParam._m0[1u].y;
        }
        _1665 = frontier_phi_13_35_ladder_2;
        _1667 = frontier_phi_13_35_ladder_1;
        _1669 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1653 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_774, _775, _776), _1585);
        _1665 = _1653.x * cbModelParam._m0[1u].y;
        _1667 = _1653.y * cbModelParam._m0[1u].y;
        _1669 = _1653.z * cbModelParam._m0[1u].y;
    }
    float _1673 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _600);
    float _1674 = isnan(_1673) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1673 : min(cbModelParam._m0[25u].w, _1673));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1727 = fma(_838, cbModelParam._m0[21u].z, fma(_834, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _830)) + cbModelParam._m0[21u].w;
        float _1731 = fma(_838, cbModelParam._m0[22u].z, fma(_834, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _830)) + cbModelParam._m0[22u].w;
        float _1735 = fma(_838, cbModelParam._m0[23u].z, fma(_834, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _830)) + cbModelParam._m0[23u].w;
        float _1738 = fma(_776, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774));
        float _1741 = fma(_776, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774));
        float _1744 = fma(_776, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774));
        float _1853;
        if (_1738 > 0.0)
        {
            _1853 = abs((1.0 - _1727) / _1738);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1727 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1853 = frontier_phi_25_21_ladder;
        }
        float _2171;
        if (_1741 > 0.0)
        {
            _2171 = abs((1.0 - _1731) / _1741);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1731 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2171 = frontier_phi_37_32_ladder;
        }
        float _2509;
        if (_1744 > 0.0)
        {
            _2509 = abs((1.0 - _1735) / _1744);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1735 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2509 = frontier_phi_47_44_ladder;
        }
        float _2511 = isnan(_2171) ? _1853 : (isnan(_1853) ? _2171 : min(_1853, _2171));
        float _2512 = isnan(_2509) ? _2511 : (isnan(_2511) ? _2509 : min(_2511, _2509));
        float _2516 = (_2512 * _1738) + _1727;
        float _2517 = (_2512 * _1741) + _1731;
        float _2518 = (_2512 * _1744) + _1735;
        float _2519 = _2512 * 9.9999997473787516355514526367188e-05;
        float _2520 = (-1.0) - _2519;
        float _2522 = _2519 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2518 > _2522) || ((_2518 < _2520) || ((_2517 > _2522) || ((_2517 < _2520) || ((_2516 < _2520) || (_2516 > _2522))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2518, cbModelParam._m0[17u].z, fma(_2517, cbModelParam._m0[17u].y, _2516 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2518, cbModelParam._m0[18u].z, fma(_2517, cbModelParam._m0[18u].y, _2516 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2518, cbModelParam._m0[19u].z, fma(_2517, cbModelParam._m0[19u].y, _2516 * cbModelParam._m0[19u].x))), _1674);
            frontier_phi_22_47_ladder = _2640.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2640.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2640.x * cbModelParam._m0[1u].z;
        }
        _1763 = frontier_phi_22_47_ladder_2;
        _1765 = frontier_phi_22_47_ladder_1;
        _1767 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_774, _775, _776), _1674);
        _1763 = _1747.x * cbModelParam._m0[1u].z;
        _1765 = _1747.y * cbModelParam._m0[1u].z;
        _1767 = _1747.z * cbModelParam._m0[1u].z;
    }
    float _1780 = (((_801 * _750) + _802) * _766) * ((cbModelParam._m0[1u].w * (_1763 - _1665)) + _1665);
    float _1782 = (((_801 * _752) + _802) * _766) * ((cbModelParam._m0[1u].w * (_1765 - _1667)) + _1667);
    float _1784 = (((_801 * _753) + _802) * _766) * ((cbModelParam._m0[1u].w * (_1767 - _1669)) + _1669);
    float _1787 = fma(_1784, cbSceneParam._m0[89u].z, fma(_1782, cbSceneParam._m0[89u].y, _1780 * cbSceneParam._m0[89u].x));
    float _1790 = fma(_1784, cbSceneParam._m0[90u].z, fma(_1782, cbSceneParam._m0[90u].y, _1780 * cbSceneParam._m0[90u].x));
    float _1793 = fma(_1784, cbSceneParam._m0[91u].z, fma(_1782, cbSceneParam._m0[91u].y, _1780 * cbSceneParam._m0[91u].x));
    float _1827 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1831 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1835 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1839 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1840 = _1827 / _1839;
    float _1841 = _1831 / _1839;
    float _1842 = _1835 / _1839;
    float _1989;
    float _1990;
    float _1991;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1869 = ((uint(_1842 > cbSceneParam._m0[59u].y) + uint(_1842 > cbSceneParam._m0[59u].x)) + uint(_1842 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1870 = _1869 + 43u;
        uint _1878 = _1869 + 44u;
        uint _1886 = _1869 + 45u;
        uint _1894 = _1869 + 46u;
        float _1905 = fma(_1839, cbSceneParam._m0[_1870].w, fma(_1835, cbSceneParam._m0[_1870].z, fma(_1831, cbSceneParam._m0[_1870].y, _1827 * cbSceneParam._m0[_1870].x)));
        float _1909 = fma(_1839, cbSceneParam._m0[_1878].w, fma(_1835, cbSceneParam._m0[_1878].z, fma(_1831, cbSceneParam._m0[_1878].y, _1827 * cbSceneParam._m0[_1878].x)));
        float _1917 = fma(_1839, cbSceneParam._m0[_1894].w, fma(_1835, cbSceneParam._m0[_1894].z, fma(_1831, cbSceneParam._m0[_1894].y, _1827 * cbSceneParam._m0[_1894].x)));
        float _1922 = cbSceneParam._m0[33u].z * _1917;
        float _1924 = cbSceneParam._m0[33u].w * _1917;
        float _1927 = fma(_1839, cbSceneParam._m0[_1886].w, fma(_1835, cbSceneParam._m0[_1886].z, fma(_1831, cbSceneParam._m0[_1886].y, _1827 * cbSceneParam._m0[_1886].x))) / _1917;
        float _1975 = (cbSceneParam._m0[33u].x - sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842))) * cbSceneParam._m0[33u].y;
        float _4294 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1982 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1922 + _1905) / _1917, (_1924 + _1909) / _1917), _1927), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1924 + _1905) / _1917, (_1909 - _1922) / _1917), _1927), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1905 - _1922) / _1917, (_1909 - _1924) / _1917), _1927), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1905 - _1924) / _1917, (_1922 + _1909) / _1917), _1927), 0.0)).x), vec4(0.25)));
        _1989 = 1.0 - (_1982 * cbSceneParam._m0[34u].x);
        _1990 = 1.0 - (_1982 * cbSceneParam._m0[34u].y);
        _1991 = 1.0 - (_1982 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1989 = 1.0;
        _1990 = 1.0;
        _1991 = 1.0;
    }
    float _2055;
    float _2057;
    float _2059;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2043 = fma(_1839, cbSceneParam._m0[63u].w, fma(_1835, cbSceneParam._m0[63u].z, fma(_1831, cbSceneParam._m0[63u].y, _1827 * cbSceneParam._m0[63u].x)));
        float _2044 = fma(_1839, cbSceneParam._m0[60u].w, fma(_1835, cbSceneParam._m0[60u].z, fma(_1831, cbSceneParam._m0[60u].y, _1827 * cbSceneParam._m0[60u].x))) / _2043;
        float _2045 = fma(_1839, cbSceneParam._m0[61u].w, fma(_1835, cbSceneParam._m0[61u].z, fma(_1831, cbSceneParam._m0[61u].y, _1827 * cbSceneParam._m0[61u].x))) / _2043;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2044 >= cbSceneParam._m0[64u].x) && (_2045 >= cbSceneParam._m0[64u].y)) && (_2044 <= cbSceneParam._m0[64u].z)) && (_2045 <= cbSceneParam._m0[64u].w))
        {
            float _2184 = fma(_1839, cbSceneParam._m0[62u].w, fma(_1835, cbSceneParam._m0[62u].z, fma(_1831, cbSceneParam._m0[62u].y, _1827 * cbSceneParam._m0[62u].x))) / _2043;
            float _2188 = isnan(cbSceneParam._m0[41u].w) ? _2184 : (isnan(_2184) ? cbSceneParam._m0[41u].w : max(_2184, cbSceneParam._m0[41u].w));
            float _2231 = (cbSceneParam._m0[33u].x - sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842))) * cbSceneParam._m0[33u].y;
            float _4310 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
            float _2238 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2044, cbSceneParam._m0[33u].w + _2045), _2188), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2044, _2045 - cbSceneParam._m0[33u].z), _2188), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2044 - cbSceneParam._m0[33u].z, _2045 - cbSceneParam._m0[33u].w), _2188), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2044 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2045), _2188), 0.0)).x), vec4(0.25)));
            float _2242 = 1.0 - (_2238 * cbSceneParam._m0[34u].x);
            float _2243 = 1.0 - (_2238 * cbSceneParam._m0[34u].y);
            float _2244 = 1.0 - (_2238 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2244) ? _1991 : (isnan(_1991) ? _2244 : min(_1991, _2244));
            frontier_phi_34_33_ladder_1 = isnan(_2243) ? _1990 : (isnan(_1990) ? _2243 : min(_1990, _2243));
            frontier_phi_34_33_ladder_2 = isnan(_2242) ? _1989 : (isnan(_1989) ? _2242 : min(_1989, _2242));
        }
        else
        {
            frontier_phi_34_33_ladder = _1991;
            frontier_phi_34_33_ladder_1 = _1990;
            frontier_phi_34_33_ladder_2 = _1989;
        }
        _2055 = frontier_phi_34_33_ladder_2;
        _2057 = frontier_phi_34_33_ladder_1;
        _2059 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2055 = _1989;
        _2057 = _1990;
        _2059 = _1991;
    }
    uvec4 _2064 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2066 = _2064.x * 14u;
    uint _2067 = _2066 + 13u;
    float _2074 = _766 + (-1.0);
    float _2079 = (cbLight._m0[_2067].x * _2074) + 1.0;
    float _2080 = (cbLight._m0[_2067].y * _2074) + 1.0;
    float _2081 = (cbLight._m0[_2067].z * _2074) + 1.0;
    float _2082 = (cbLight._m0[_2067].w * _2074) + 1.0;
    uint _2083 = _2066 + 5u;
    float _2089 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2093 = _2066 + 4u;
    float _2103 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2107 = _2066 | 1u;
    float _2118 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_597, _598, _599));
    float _2121 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_597, _598, _599));
    float _4346 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _4357 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2126 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * 0.3183098733425140380859375;
    float _2128 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.3183098733425140380859375;
    float _2135 = ((cbLight._m0[_2083].x * _2089) * _2128) + (((cbLight._m0[_2093].x * _2055) * _2103) * _2126);
    float _2136 = ((_2089 * cbLight._m0[_2083].y) * _2128) + (((cbLight._m0[_2093].y * _2057) * _2103) * _2126);
    float _2137 = ((_2089 * cbLight._m0[_2083].z) * _2128) + (((cbLight._m0[_2093].z * _2059) * _2103) * _2126);
    uvec4 _2141 = floatBitsToUint(cbLight._m0[_2066 + 12u]);
    bool _2143 = _2141.x == 0u;
    float _2245;
    float _2247;
    float _2249;
    if (_2143)
    {
        _2245 = _2135;
        _2247 = _2136;
        _2249 = _2137;
    }
    else
    {
        uint _2253 = _2066 + 6u;
        float _2269 = (dot(vec3(cbLight._m0[_2066 + 2u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _2270 = _2269 * _2269;
        float _4368 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2271 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2272 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2245 = (((cbLight._m0[_2253].x * 0.3183098733425140380859375) * _2271) * _2272) + _2135;
        _2247 = (((cbLight._m0[_2253].y * 0.3183098733425140380859375) * _2271) * _2272) + _2136;
        _2249 = (((cbLight._m0[_2253].z * 0.3183098733425140380859375) * _2271) * _2272) + _2137;
    }
    bool _2252 = _2141.y == 0u;
    float _2307;
    float _2309;
    float _2311;
    if (_2252)
    {
        _2307 = _2245;
        _2309 = _2247;
        _2311 = _2249;
    }
    else
    {
        uint _2480 = _2066 + 7u;
        float _2496 = (dot(vec3(cbLight._m0[_2066 + 3u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _2497 = _2496 * _2496;
        float _4384 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2498 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2499 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2307 = (((cbLight._m0[_2480].x * 0.3183098733425140380859375) * _2498) * _2499) + _2245;
        _2309 = (((cbLight._m0[_2480].y * 0.3183098733425140380859375) * _2498) * _2499) + _2247;
        _2311 = (((cbLight._m0[_2480].z * 0.3183098733425140380859375) * _2498) * _2499) + _2249;
    }
    uint _2314 = _2066 + 8u;
    float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _600) * 0.949999988079071044921875);
    float _2328 = _2327 * _2327;
    float _2329 = cbLight._m0[_2066].x + _677;
    float _2330 = cbLight._m0[_2066].y + _678;
    float _2331 = cbLight._m0[_2066].z + _679;
    float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
    float _2336 = _2335 * _2329;
    float _2337 = _2335 * _2330;
    float _2338 = _2335 * _2331;
    float _2339 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2066].xyz));
    float _4400 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _4411 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _2343 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2344 = dot(vec3(_597, _598, _599), vec3(_2336, _2337, _2338));
    float _4422 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2348 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2336, _2337, _2338));
    float _4433 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2352 = _2328 * _2328;
    float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
    float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
    float _2365 = 0.959999978542327880859375 - _747;
    float _2367 = 0.959999978542327880859375 - _748;
    float _2368 = 0.959999978542327880859375 - _749;
    float _2375 = 1.0 - _2328;
    float _2386 = (0.5 / (((_2343 * ((_2342 * _2375) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2375) + _2328) * _2342))) * _2342;
    float _4444 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2388 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
    uint _2402 = _2066 + 9u;
    float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _600) * 0.949999988079071044921875);
    float _2414 = _2413 * _2413;
    float _2415 = cbLight._m0[_2107].x + _677;
    float _2416 = cbLight._m0[_2107].y + _678;
    float _2417 = cbLight._m0[_2107].z + _679;
    float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
    float _2422 = _2421 * _2415;
    float _2423 = _2421 * _2416;
    float _2424 = _2421 * _2417;
    float _2425 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2107].xyz));
    float _4455 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2429 = dot(vec3(_597, _598, _599), vec3(_2422, _2423, _2424));
    float _4466 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2433 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2422, _2423, _2424));
    float _4477 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2437 = _2414 * _2414;
    float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
    float _2448 = exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0);
    float _2455 = 1.0 - _2414;
    float _2465 = (0.5 / (((_2343 * ((_2428 * _2455) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2455) + _2414) * _2428))) * _2428;
    float _4488 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2467 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
    float _2477 = (((((_2448 * _2365) + _750) * cbLight._m0[_2402].x) * _2467) * _2089) + ((((cbLight._m0[_2314].x * _2055) * ((_2364 * _2365) + _750)) * _2388) * _2103);
    float _2478 = (((((_2448 * _2367) + _752) * cbLight._m0[_2402].y) * _2467) * _2089) + ((((cbLight._m0[_2314].y * _2057) * ((_2364 * _2367) + _752)) * _2388) * _2103);
    float _2479 = (((((_2448 * _2368) + _753) * cbLight._m0[_2402].z) * _2467) * _2089) + ((((cbLight._m0[_2314].z * _2059) * ((_2364 * _2368) + _753)) * _2388) * _2103);
    float _2535;
    float _2537;
    float _2539;
    if (_2143)
    {
        _2535 = _2477;
        _2537 = _2478;
        _2539 = _2479;
    }
    else
    {
        uint _2541 = _2066 + 2u;
        uint _2545 = _2066 + 10u;
        float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2541].w)) * _600) * 0.949999988079071044921875);
        float _2560 = _2559 * _2559;
        float _2561 = cbLight._m0[_2541].x + _677;
        float _2562 = cbLight._m0[_2541].y + _678;
        float _2563 = cbLight._m0[_2541].z + _679;
        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
        float _2568 = _2567 * _2561;
        float _2569 = _2567 * _2562;
        float _2570 = _2567 * _2563;
        float _2571 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2541].xyz));
        float _4499 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2575 = dot(vec3(_597, _598, _599), vec3(_2568, _2569, _2570));
        float _4510 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2579 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_2568, _2569, _2570));
        float _4521 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2583 = _2560 * _2560;
        float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
        float _2594 = exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0);
        float _2601 = 1.0 - _2560;
        float _2611 = (0.5 / (((_2343 * ((_2574 * _2601) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2601) + _2560) * _2574))) * _2574;
        float _4532 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2613 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
        float _2614 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2535 = (((((_2594 * _2365) + _750) * cbLight._m0[_2545].x) * _2613) * _2614) + _2477;
        _2537 = (((((_2594 * _2367) + _752) * cbLight._m0[_2545].y) * _2613) * _2614) + _2478;
        _2539 = (((((_2594 * _2368) + _753) * cbLight._m0[_2545].z) * _2613) * _2614) + _2479;
    }
    float _2645;
    float _2647;
    float _2649;
    if (_2252)
    {
        _2645 = _2535;
        _2647 = _2537;
        _2649 = _2539;
    }
    else
    {
        uint _2656 = _2066 + 3u;
        uint _2660 = _2066 + 11u;
        float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2656].w)) * _600) * 0.949999988079071044921875);
        float _2675 = _2674 * _2674;
        float _2676 = cbLight._m0[_2656].x + _677;
        float _2677 = cbLight._m0[_2656].y + _678;
        float _2678 = cbLight._m0[_2656].z + _679;
        float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
        float _2683 = _2682 * _2676;
        float _2684 = _2682 * _2677;
        float _2685 = _2682 * _2678;
        float _2686 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2656].xyz));
        float _4548 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2690 = dot(vec3(_597, _598, _599), vec3(_2683, _2684, _2685));
        float _4559 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2693 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2694 = dot(vec3(cbLight._m0[_2656].xyz), vec3(_2683, _2684, _2685));
        float _4570 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2698 = _2675 * _2675;
        float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
        float _2709 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
        float _2716 = 1.0 - _2675;
        float _2726 = (0.5 / (((_2343 * ((_2689 * _2716) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2716) + _2675) * _2689))) * _2689;
        float _4581 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2728 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
        float _2729 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2645 = (((((_2709 * _2365) + _750) * cbLight._m0[_2660].x) * _2728) * _2729) + _2535;
        _2647 = (((((_2709 * _2367) + _752) * cbLight._m0[_2660].y) * _2728) * _2729) + _2537;
        _2649 = (((((_2709 * _2368) + _753) * cbLight._m0[_2660].z) * _2728) * _2729) + _2539;
    }
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    if (_2064.y == 0u)
    {
        uvec4 _2750 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2751 = _2750.x;
        uint _2762 = uint((float(_2750.y) * floor(float(uint(cbSceneParam._m0[85u].y * _686) / _2751))) + floor(float(uint(cbSceneParam._m0[85u].x * _685) / _2751)));
        float _2772 = (log2(_1842 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2773 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        uint _2776 = uint(isnan(14.0) ? _2773 : (isnan(_2773) ? 14.0 : min(_2773, 14.0)));
        uvec4 _2781 = texelFetch(g_lightClusterGridBuffer, int(((_2776 << 2u) + (_2762 << 6u)) >> 2u));
        uint _2782 = _2781.x;
        uint _2783 = _2750.z;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        if (((((1u << ((_2783 >> 4u) & 15u)) + 4294967295u) & _2782) == 0u) || ((_2783 & 240u) == 0u))
        {
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
        }
        else
        {
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            uint _3013 = 0u;
            uint _3022;
            bool _3023;
            for (;;)
            {
                _3022 = texelFetch(g_lightClassification, int((((_2776 << 5u) + (_2762 << 9u)) + (_3013 << 2u)) >> 2u)).x;
                _3023 = _3022 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3023)
                {
                    frontier_phi_66_pred = _3012;
                    frontier_phi_66_pred_1 = _3011;
                    frontier_phi_66_pred_2 = _3010;
                    frontier_phi_66_pred_3 = _3009;
                    frontier_phi_66_pred_4 = _3008;
                    frontier_phi_66_pred_5 = _3007;
                }
                else
                {
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    uint _3137;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3010;
                    _3135 = _3011;
                    _3136 = _3012;
                    _3137 = _3022;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    for (;;)
                    {
                        uint _3141 = uint(findLSB(_3137)) + (_3013 << 5u);
                        uint _3138 = (_3137 + 4294967295u) & _3137;
                        uint _3143 = _3141 * 48u;
                        vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3163 = (_3141 * 48u) + 4u;
                        vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3182 = (_3141 * 48u) + 8u;
                        vec3 _3193 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x));
                        float _3197 = _3157.x - _1840;
                        float _3198 = _3157.y - _1841;
                        float _3199 = _3157.z - _1842;
                        float _3200 = dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199));
                        float _3203 = inversesqrt(_3200);
                        float _3204 = _3203 * _3197;
                        float _3205 = _3203 * _3198;
                        float _3206 = _3203 * _3199;
                        float _3207 = dot(vec3(_707, _710, _713), vec3(_3204, _3205, _3206));
                        float _3212 = 1.0 - (_3200 * _3157.w);
                        float _4607 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3213 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3214 = sqrt(_3200) * _3176.w;
                        float _3217 = 1.39999997615814208984375 / (_3214 + 1.39999997615814208984375);
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3207) + _3218;
                        float _3224 = _3214 * _3214;
                        float _3228 = ((isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))) * _3213) / ((_3224 * 0.699999988079071044921875) + 1.0);
                        float _3232 = (-0.0) - _1840;
                        float _3233 = (-0.0) - _1841;
                        float _3234 = (-0.0) - _1842;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3248 = exp2(log2(1.0 / ((_3224 * 3.5) + 5.0)) * 0.25);
                        float _3249 = 1.0 - _782;
                        float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                        float _3257 = _3256 * _3256;
                        float _3258 = _3257 * _3257;
                        float _3259 = _3239 + _3204;
                        float _3260 = _3240 + _3205;
                        float _3261 = _3241 + _3206;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3269 = dot(vec3(_707, _710, _713), vec3(_3239, _3240, _3241));
                        float _4623 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3272 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3273 = dot(vec3(_707, _710, _713), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                        float _4634 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3276 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                        float _3281 = _3217 * _3257;
                        float _3282 = _3281 * _3281;
                        float _3285 = ((1.0 - _3282) * _3207) + _3282;
                        float _4645 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3286 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3287 = 1.0 - _3257;
                        float _3297 = (0.5 / (((_3286 * ((_3272 * _3287) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3286 * _3287) + _3257) * _3272))) * _3286;
                        float _4656 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3308 = (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) / ((_3280 * _3280) * ((_3224 * 2.1991131305694580078125) + 3.141590118408203125))) * _3213;
                        _3066 = (_3228 * _3176.x) + _3134;
                        _3067 = (_3228 * _3176.y) + _3135;
                        _3068 = (_3228 * _3176.z) + _3136;
                        _3063 = (_3308 * _3193.x) + _3131;
                        _3064 = (_3308 * _3193.y) + _3132;
                        _3065 = (_3308 * _3193.z) + _3133;
                        if (_3138 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3066;
                            _3135 = _3067;
                            _3136 = _3068;
                            _3137 = _3138;
                        }
                    }
                    frontier_phi_66_pred = _3068;
                    frontier_phi_66_pred_1 = _3067;
                    frontier_phi_66_pred_2 = _3066;
                    frontier_phi_66_pred_3 = _3065;
                    frontier_phi_66_pred_4 = _3064;
                    frontier_phi_66_pred_5 = _3063;
                }
                _2873 = frontier_phi_66_pred;
                _2871 = frontier_phi_66_pred_1;
                _2869 = frontier_phi_66_pred_2;
                _2867 = frontier_phi_66_pred_3;
                _2865 = frontier_phi_66_pred_4;
                _2863 = frontier_phi_66_pred_5;
                uint _3014 = _3013 + 1u;
                if (_3014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3007 = _2863;
                    _3008 = _2865;
                    _3009 = _2867;
                    _3010 = _2869;
                    _3011 = _2871;
                    _3012 = _2873;
                    _3013 = _3014;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
        }
        uvec4 _2876 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2877 = _2876.z;
        uint _2879 = (_2877 >> 8u) & 15u;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        if (((4294967295u << _2879) & _2782) == 0u)
        {
            _2975 = _2862;
            _2977 = _2864;
            _2979 = _2866;
            _2981 = _2868;
            _2983 = _2870;
            _2985 = _2872;
        }
        else
        {
            float _3000 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
            float _3001 = _3000 * _1840;
            float _3002 = _3000 * _1841;
            float _3003 = _3000 * _1842;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2879 < ((_2877 >> 12u) & 15u))
            {
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _3114 = _2862;
                float _3115 = _2864;
                float _3116 = _2866;
                float _3117 = _2868;
                float _3118 = _2870;
                float _3119 = _2872;
                uint _3120 = _2879;
                uint _3129;
                bool _3130;
                for (;;)
                {
                    _3129 = texelFetch(g_lightClassification, int((((_2776 << 5u) + (_2762 << 9u)) + (_3120 << 2u)) >> 2u)).x;
                    _3130 = _3129 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3130)
                    {
                        frontier_phi_72_pred = _3119;
                        frontier_phi_72_pred_1 = _3118;
                        frontier_phi_72_pred_2 = _3117;
                        frontier_phi_72_pred_3 = _3116;
                        frontier_phi_72_pred_4 = _3115;
                        frontier_phi_72_pred_5 = _3114;
                    }
                    else
                    {
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3326 = _3114;
                        float _3327 = _3115;
                        float _3328 = _3116;
                        float _3329 = _3117;
                        float _3330 = _3118;
                        float _3331 = _3119;
                        uint _3332 = _3129;
                        uint _3333;
                        vec4 _3358;
                        float _3359;
                        vec4 _3374;
                        vec3 _3386;
                        vec4 _3401;
                        vec4 _3416;
                        float _3462;
                        bool _3463;
                        for (;;)
                        {
                            uint _3343 = ((_3120 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3332));
                            _3333 = (_3332 + 4294967295u) & _3332;
                            uint _3345 = _3343 * 40u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            _3359 = _3358.w;
                            uint _3361 = (_3343 * 40u) + 4u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3376 = (_3343 * 40u) + 8u;
                            _3386 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x));
                            uint _3388 = (_3343 * 40u) + 16u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3343 * 40u) + 20u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3343 * 40u) + 24u;
                            vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3437 = (_3343 * 40u) + 28u;
                            vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            _3462 = fma(_1842, _3450.z, fma(_1841, _3450.y, _3450.x * _1840)) + _3450.w;
                            _3463 = !((fma(_1842, _3431.z, fma(_1841, _3431.y, _3431.x * _1840)) + _3431.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3463)
                            {
                                float _3490 = _3358.x - _1840;
                                float _3491 = _3358.y - _1841;
                                float _3492 = _3358.z - _1842;
                                float _3493 = dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492));
                                float _3496 = inversesqrt(_3493);
                                float _3497 = _3496 * _3490;
                                float _3498 = _3496 * _3491;
                                float _3499 = _3496 * _3492;
                                float _3503 = 1.0 - (_3493 / (_3359 * _3359));
                                float _4667 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3508 = sqrt(_3493) * _3374.w;
                                float _3510 = 1.39999997615814208984375 / (_3508 + 1.39999997615814208984375);
                                float _3511 = _3510 * _3510;
                                float _3514 = ((1.0 - _3511) * dot(vec3(_3497, _3498, _3499), vec3(_707, _710, _713))) + _3511;
                                float _3517 = _3508 * _3508;
                                float _3521 = (fma(_1842, _3401.z, fma(_1841, _3401.y, _3401.x * _1840)) + _3401.w) / _3462;
                                float _3522 = (fma(_1842, _3416.z, fma(_1841, _3416.y, _3416.x * _1840)) + _3416.w) / _3462;
                                float _3526 = 1.0 - dot(vec2(_3521, _3522), vec2(_3521, _3522));
                                float _4683 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3528 = _3527 * (((isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0))) * _3504) / ((_3517 * 0.699999988079071044921875) + 1.0));
                                float _3540 = exp2(log2(1.0 / ((_3517 * 3.5) + 5.0)) * 0.25);
                                float _3541 = 1.0 - _782;
                                float _3548 = sqrt(1.0 - ((1.0 - (_3541 * _3541)) * (1.0 - (_3540 * _3540))));
                                float _3549 = _3548 * _3548;
                                float _3550 = _3549 * _3549;
                                float _3551 = _3497 - _3001;
                                float _3552 = _3498 - _3002;
                                float _3553 = _3499 - _3003;
                                float _3557 = inversesqrt(dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553)));
                                float _3561 = dot(vec3(_707, _710, _713), vec3((-0.0) - _3001, (-0.0) - _3002, (-0.0) - _3003));
                                float _4694 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3564 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3565 = dot(vec3(_707, _710, _713), vec3(_3557 * _3551, _3557 * _3552, _3557 * _3553));
                                float _4705 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3568 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3572 = ((_3568 * _3568) * (_3550 + (-1.0))) + 1.0;
                                float _3573 = _3510 * _3549;
                                float _3574 = _3573 * _3573;
                                float _3580 = ((1.0 - _3574) * dot(vec3(_707, _710, _713), vec3(_3497, _3498, _3499))) + _3574;
                                float _4716 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3581 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3582 = 1.0 - _3549;
                                float _3592 = (0.5 / (((_3581 * ((_3564 * _3582) + _3549)) + 9.9999999392252902907785028219223e-09) + (((_3581 * _3582) + _3549) * _3564))) * _3581;
                                float _4727 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3602 = (_3527 * _3504) * (((_3550 * 3.1415927410125732421875) * (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) / ((_3572 * _3572) * ((_3517 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3528 * _3374.y;
                                frontier_phi_78_pred_1 = _3528 * _3374.x;
                                frontier_phi_78_pred_2 = _3602 * _3386.z;
                                frontier_phi_78_pred_3 = _3602 * _3386.y;
                                frontier_phi_78_pred_4 = _3602 * _3386.x;
                                frontier_phi_78_pred_5 = _3528 * _3374.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3610 = frontier_phi_78_pred;
                            _3609 = frontier_phi_78_pred_1;
                            _3608 = frontier_phi_78_pred_2;
                            _3607 = frontier_phi_78_pred_3;
                            _3606 = frontier_phi_78_pred_4;
                            _3611 = frontier_phi_78_pred_5;
                            _3316 = _3609 + _3329;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            _3313 = _3606 + _3326;
                            _3314 = _3607 + _3327;
                            _3315 = _3608 + _3328;
                            if (_3333 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3333;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3318;
                        frontier_phi_72_pred_1 = _3317;
                        frontier_phi_72_pred_2 = _3316;
                        frontier_phi_72_pred_3 = _3315;
                        frontier_phi_72_pred_4 = _3314;
                        frontier_phi_72_pred_5 = _3313;
                    }
                    _2986 = frontier_phi_72_pred;
                    _2984 = frontier_phi_72_pred_1;
                    _2982 = frontier_phi_72_pred_2;
                    _2980 = frontier_phi_72_pred_3;
                    _2978 = frontier_phi_72_pred_4;
                    _2976 = frontier_phi_72_pred_5;
                    uint _3121 = _3120 + 1u;
                    if (_3121 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3114 = _2976;
                        _3115 = _2978;
                        _3116 = _2980;
                        _3117 = _2982;
                        _3118 = _2984;
                        _3119 = _2986;
                        _3120 = _3121;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2986;
                frontier_phi_60_61_ladder_1 = _2984;
                frontier_phi_60_61_ladder_2 = _2980;
                frontier_phi_60_61_ladder_3 = _2978;
                frontier_phi_60_61_ladder_4 = _2976;
                frontier_phi_60_61_ladder_5 = _2982;
            }
            else
            {
                frontier_phi_60_61_ladder = _2872;
                frontier_phi_60_61_ladder_1 = _2870;
                frontier_phi_60_61_ladder_2 = _2866;
                frontier_phi_60_61_ladder_3 = _2864;
                frontier_phi_60_61_ladder_4 = _2862;
                frontier_phi_60_61_ladder_5 = _2868;
            }
            _2975 = frontier_phi_60_61_ladder_4;
            _2977 = frontier_phi_60_61_ladder_3;
            _2979 = frontier_phi_60_61_ladder_2;
            _2981 = frontier_phi_60_61_ladder_5;
            _2983 = frontier_phi_60_61_ladder_1;
            _2985 = frontier_phi_60_61_ladder;
        }
        float _2990 = isnan(1.0) ? _766 : (isnan(_766) ? 1.0 : min(_766, 1.0));
        _2795 = (_2990 * _2981) + _2307;
        _2797 = (_2990 * _2983) + _2309;
        _2799 = (_2990 * _2985) + _2311;
        _2801 = ((_2975 * _750) * _2990) + _2645;
        _2803 = ((_2977 * _752) * _2990) + _2647;
        _2805 = ((_2979 * _753) * _2990) + _2649;
    }
    else
    {
        _2795 = _2307;
        _2797 = _2309;
        _2799 = _2311;
        _2801 = _2645;
        _2803 = _2647;
        _2805 = _2649;
    }
    float _4743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4754 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4765 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    uint _2825 = _258 + 6u;
    float _2833 = _685 / cbSceneParam._m0[86u].x;
    float _2834 = _686 / cbSceneParam._m0[86u].y;
    vec4 _2848 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, (log2((isnan(cbSceneParam._m0[77u].w) ? _619 : (isnan(_619) ? cbSceneParam._m0[77u].w : min(_619, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2850 = _2848.x;
    float _2851 = _2848.y;
    float _2852 = _2848.z;
    float _2853 = _2848.w;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    if (_619 > cbSceneParam._m0[78u].w)
    {
        float _2887 = isnan(_619) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _619 : min(cbSceneParam._m0[80u].w, _619));
        float _2888 = _2887 / _619;
        float _2899 = _2888 * _670;
        float _2900 = _671 * _2888;
        float _2901 = (-0.0) - _2900;
        float _2903 = _2888 * _672;
        float _2905 = (cbSceneParam._m0[77u].w * _2901) / _2887;
        float _2906 = _2905 + cbSceneParam._m0[79u].w;
        float _2907 = cbSceneParam._m0[79u].w - _2900;
        float _2913 = sqrt(((_2899 * _2899) + (_2900 * _2900)) + (_2903 * _2903));
        float _2916 = (1.0 - (cbSceneParam._m0[77u].w / _2887)) * _2913;
        float _2921 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2923 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3076;
        if (abs((_2901 - _2905) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3076 = ((((_2906 > 0.0) ? exp2(_2921 * _2906) : (2.0 - exp2(_2923 * _2906))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2916;
        }
        else
        {
            float _3036 = 1.0 / cbSceneParam._m0[80u].x;
            float _3037 = isnan(_2907) ? _2906 : (isnan(_2906) ? _2907 : max(_2906, _2907));
            float _3038 = isnan(_2907) ? _2906 : (isnan(_2906) ? _2907 : min(_2906, _2907));
            float _3047 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : min(_3037, 0.0));
            float _3048 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : min(_3038, 0.0));
            _3076 = ((abs(_2913 / _2901) * cbSceneParam._m0[80u].y) * ((((_3047 - _3048) * 2.0) - ((exp2(_2921 * (isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0)))) - exp2(_2921 * (isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))))) * _3036)) - ((exp2(_2923 * _3047) - exp2(_2923 * _3048)) * _3036))) + (_2916 * cbSceneParam._m0[80u].z);
        }
        vec4 _3078 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, 1.0), 0.0);
        float _3087 = exp2((_3076 * (-1.44269502162933349609375)) * (1.0 - _3078.w));
        float _3088 = log2(_3087);
        float _3104 = log2(_2853);
        _2925 = (exp2(_3104 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].x)) * _3078.x) / cbSceneParam._m0[78u].x)) + _2850;
        _2927 = (exp2(_3104 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].y)) * _3078.y) / cbSceneParam._m0[78u].y)) + _2851;
        _2929 = (exp2(_3104 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].z)) * _3078.z) / cbSceneParam._m0[78u].z)) + _2852;
        _2931 = _3087 * _2853;
    }
    else
    {
        _2925 = _2850;
        _2927 = _2851;
        _2929 = _2852;
        _2931 = _2853;
    }
    float _2943 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2944 = _2943 == 3.0;
    float _2945 = log2(_2931);
    float _2952 = exp2(_2945 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2795 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _766))) + ((_2801 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1574)) * cbPerFrame._m0[3u].x));
    float _2953 = exp2(_2945 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2797 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _766))) + ((_2803 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1574)) * cbPerFrame._m0[3u].x));
    float _2954 = exp2(_2945 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2799 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _766))) + ((_2805 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1574)) * cbPerFrame._m0[3u].x));
    float _2963 = (_2943 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2963 * (_2944 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2925)));
    SV_Target.y = _2963 * (_2944 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2927)));
    SV_Target.z = _2963 * (_2944 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2929)));
    SV_Target.w = cbInstanceData._m0[_2825].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2825].w;
}


