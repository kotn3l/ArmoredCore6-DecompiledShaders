#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1057;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _292 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _246) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _247) + cbTextureTilingScale._m0[20u].w));
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _322 = _318.z;
    float _326 = (_318.x * 2.0) + (-1.0);
    float _327 = (_318.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_326, _327), vec2(_326, _327));
    float _3386 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _334 = sqrt(1.0 - (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))));
    float _339 = _326 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_292.x * 2.0) + (-1.0)));
    float _340 = _327 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_292.y * 2.0) + (-1.0)));
    float _343 = fma(_334, _214, fma(_340, _221, _339 * _207));
    float _346 = fma(_334, _215, fma(_340, _222, _339 * _208));
    float _349 = fma(_334, _216, fma(_340, _223, _339 * _209));
    float _353 = inversesqrt(dot(vec3(_343, _346, _349), vec3(_343, _346, _349)));
    vec4 _389 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _391 = _389.x;
    float _392 = 1.0 - _391;
    float _399 = ((_391 - _392) * cbMtdParam._m0[24u].z) + _392;
    float _401 = (cbMtdParam._m0[19u].x + dot(vec4(_353 * _343, _353 * _346, _353 * _349, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_399 * cbMtdParam._m0[21u].z);
    float _3397 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _417 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_399 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3408 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _422 = ((_402 * (cbMtdParam._m0[17u].x - _272)) * _418) + _272;
    float _423 = ((_402 * (cbMtdParam._m0[17u].y - _273)) * _418) + _273;
    float _424 = ((_402 * (cbMtdParam._m0[17u].z - _274)) * _418) + _274;
    vec4 _437 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _439 = _437.x;
    float _442 = _439 - ((_439 * _402) * _418);
    float _447 = (((_292.z - _322) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _322;
    vec4 _460 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _467 = (_460.x * 2.0) + (-1.0);
    float _468 = (_460.y * 2.0) + (-1.0);
    float _469 = dot(vec2(_467, _468), vec2(_467, _468));
    float _3419 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _478 = (((_460.z - _447) * _402) * _418) + _447;
    float _493 = (((cbMtdParam._m0[21u].x * _339) + ((_467 - _339) * _402)) * _418) + _339;
    float _494 = (((cbMtdParam._m0[21u].x * _340) + ((_468 - _340) * _402)) * _418) + _340;
    float _495 = (((sqrt(1.0 - (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) - _334) * _402) * _418) + _334;
    float _500 = cbMtdParam._m0[22u].x + _318.w;
    float _503 = fma(_495, _214, fma(_494, _221, _493 * _207));
    float _506 = fma(_495, _215, fma(_494, _222, _493 * _208));
    float _509 = fma(_495, _216, fma(_494, _223, _493 * _209));
    float _513 = inversesqrt(dot(vec3(_503, _506, _509), vec3(_503, _506, _509)));
    float _514 = _513 * _503;
    float _515 = _513 * _506;
    float _516 = _513 * _509;
    float _3430 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _517 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3452 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3463 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _3474 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3485 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _522 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _536 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _587 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _577);
    float _588 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _577);
    float _589 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _577);
    float _593 = inversesqrt(dot(vec3(_587, _588, _589), vec3(_587, _588, _589)));
    float _594 = _587 * _593;
    float _595 = _588 * _593;
    float _596 = _589 * _593;
    float _602 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _603 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _624 = fma(_516, cbSceneParam._m0[5u].z, fma(_515, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _514));
    float _627 = fma(_516, cbSceneParam._m0[6u].z, fma(_515, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _514));
    float _630 = fma(_516, cbSceneParam._m0[7u].z, fma(_515, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _514));
    uint _644 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _650 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_644].x;
    float _651 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_644].y;
    float _652 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_644].z;
    float _3496 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _656 = 1.0 - _522;
    float _657 = _653 * _656;
    float _658 = _654 * _656;
    float _659 = _655 * _656;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _522;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _522;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _522;
    float _667 = _664 + 0.039999999105930328369140625;
    float _669 = _665 + 0.039999999105930328369140625;
    float _670 = _666 + 0.039999999105930328369140625;
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _602, cbSceneParam._m0[86u].y * _603));
    float _683 = ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * TEXCOORD_5.w) * _679.x;
    float _684 = dot(vec3(_514, _515, _516), vec3(_594, _595, _596));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _514) - _594;
    float _692 = (_687 * _515) - _595;
    float _693 = (_687 * _516) - _596;
    float _697 = abs(dot(vec3(_594, _595, _596), vec3(_514, _515, _516)));
    float _3529 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _699 = sqrt(_517);
    float _712 = exp2((_699 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_699 * 3.0));
    float _718 = (1.0 - _712) * ((_699 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _719 = _712 * _699;
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1056;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _781 = fma(_755, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747));
        float _785 = fma(_755, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747));
        float _789 = fma(_755, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747));
        float _814 = _747 + _514;
        float _815 = _751 + _515;
        float _816 = _755 + _516;
        float _826 = fma(_816, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814)) - _781;
        float _827 = fma(_816, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814)) - _785;
        float _828 = fma(_816, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814)) - _789;
        float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
        float _845 = ((_832 * _826) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_781 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_832 * _827) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_785 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_832 * _828) / cbModelParam._m0[34u].z) + ((((((_789 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        float _884 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_850.x + (-0.5));
        float _886 = _884 * (_850.y + (-0.5));
        float _887 = _884 * (_850.z + (-0.5));
        float _894 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_857.x + (-0.5));
        float _896 = _894 * (_857.y + (-0.5));
        float _897 = _894 * (_857.z + (-0.5));
        float _904 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_864.x + (-0.5));
        float _906 = _904 * (_864.y + (-0.5));
        float _907 = _904 * (_864.z + (-0.5));
        float _914 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_871.x + (-0.5));
        float _916 = _914 * (_871.y + (-0.5));
        float _917 = _914 * (_871.z + (-0.5));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = _885 * 0.5;
        float _922 = _895 * 0.5;
        float _923 = _905 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _938 = (dot(vec3(_514, _515, _516), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _948 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3577 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_950 + 1.0))) + _955) * _918;
        float _965 = _886 * 0.5;
        float _966 = _896 * 0.5;
        float _967 = _906 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_514, _515, _516), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3610 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_992 + 1.0))) + _997) * _919;
        float _1007 = _887 * 0.5;
        float _1008 = _897 * 0.5;
        float _1009 = _907 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_514, _515, _516), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3643 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1034 + 1.0))) + _1039) * _920;
        _1056 = _887;
        _1058 = _886;
        _1059 = _885;
        _1060 = _897;
        _1061 = _896;
        _1062 = _895;
        _1063 = _907;
        _1064 = _906;
        _1065 = _905;
        _1066 = _920;
        _1067 = _919;
        _1068 = _918;
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
    }
    else
    {
        _1056 = _1057;
        _1058 = _1057;
        _1059 = _1057;
        _1060 = _1057;
        _1061 = _1057;
        _1062 = _1057;
        _1063 = _1057;
        _1064 = _1057;
        _1065 = _1057;
        _1066 = _1057;
        _1067 = _1057;
        _1068 = _1057;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
    }
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1096 = fma(_755, cbModelParam._m0[30u].z, fma(_751, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _747));
        float _1100 = fma(_755, cbModelParam._m0[31u].z, fma(_751, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _747));
        float _1104 = fma(_755, cbModelParam._m0[32u].z, fma(_751, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _747));
        float _1127 = _747 + _514;
        float _1128 = _751 + _515;
        float _1129 = _755 + _516;
        float _1139 = fma(_1129, cbModelParam._m0[30u].z, fma(_1128, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1127)) - _1096;
        float _1140 = fma(_1129, cbModelParam._m0[31u].z, fma(_1128, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1127)) - _1100;
        float _1141 = fma(_1129, cbModelParam._m0[32u].z, fma(_1128, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1127)) - _1104;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1096 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1100 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[35u].z) + ((((((_1104 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1195 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1162.x + (-0.5));
        float _1197 = _1195 * (_1162.y + (-0.5));
        float _1198 = _1195 * (_1162.z + (-0.5));
        float _1205 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1169.x + (-0.5));
        float _1207 = _1205 * (_1169.y + (-0.5));
        float _1208 = _1205 * (_1169.z + (-0.5));
        float _1215 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1176.x + (-0.5));
        float _1217 = _1215 * (_1176.y + (-0.5));
        float _1218 = _1215 * (_1176.z + (-0.5));
        float _1225 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1183.x + (-0.5));
        float _1227 = _1225 * (_1183.y + (-0.5));
        float _1228 = _1225 * (_1183.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_514, _515, _516), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3706 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1259 + 1.0))) + _1264) * _1229;
        float _1274 = _1197 * 0.5;
        float _1275 = _1207 * 0.5;
        float _1276 = _1217 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_514, _515, _516), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3739 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1301 + 1.0))) + _1306) * _1230;
        float _1316 = _1198 * 0.5;
        float _1317 = _1208 * 0.5;
        float _1318 = _1218 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_514, _515, _516), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3772 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1343 + 1.0))) + _1348) * _1231;
        _1365 = _1198;
        _1366 = _1197;
        _1367 = _1196;
        _1368 = _1208;
        _1369 = _1207;
        _1370 = _1206;
        _1371 = _1218;
        _1372 = _1217;
        _1373 = _1216;
        _1374 = _1231;
        _1375 = _1230;
        _1376 = _1229;
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1057;
        _1366 = _1057;
        _1367 = _1057;
        _1368 = _1057;
        _1369 = _1057;
        _1370 = _1057;
        _1371 = _1057;
        _1372 = _1057;
        _1373 = _1057;
        _1374 = _1057;
        _1375 = _1057;
        _1376 = _1057;
        _1377 = 0.0;
        _1378 = 0.0;
        _1379 = 0.0;
    }
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1069)) + _1069;
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1070)) + _1070;
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1071)) + _1071;
    float _1412 = fma(_1391, cbSceneParam._m0[89u].z, fma(_1390, cbSceneParam._m0[89u].y, _1389 * cbSceneParam._m0[89u].x));
    float _1415 = fma(_1391, cbSceneParam._m0[90u].z, fma(_1390, cbSceneParam._m0[90u].y, _1389 * cbSceneParam._m0[90u].x));
    float _1418 = fma(_1391, cbSceneParam._m0[91u].z, fma(_1390, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1389));
    float _1433 = _691 * 0.5;
    float _1434 = _692 * 0.5;
    float _1435 = _693 * 0.5;
    float _1436 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1439 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1442 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1476;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1449 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1056, _1060, _1063, _1066));
        float _1453 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1457 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1464 = dot(vec4(cbModelParam._m0[39u]), vec4(_1433, _1434, _1435, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1464) ? 0.0 : (isnan(0.0) ? _1464 : max(0.0, _1464))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1487;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1478 = dot(vec4(cbModelParam._m0[40u]), vec4(_1433, _1434, _1435, 1.0));
        _1487 = dot(vec3(isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1487 = 1.0;
    }
    float _1491 = (_1487 * cbModelParam._m0[1u].x) + (_1476 * (1.0 - cbModelParam._m0[1u].x));
    float _1501 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _517);
    float _1502 = isnan(_1501) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1501 : min(cbModelParam._m0[25u].z, _1501));
    float _1583;
    float _1585;
    float _1587;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1550 = fma(_755, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747)) + cbModelParam._m0[13u].w;
        float _1554 = fma(_755, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747)) + cbModelParam._m0[14u].w;
        float _1558 = fma(_755, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747)) + cbModelParam._m0[15u].w;
        float _1561 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1564 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1567 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1595;
        if (_1561 > 0.0)
        {
            _1595 = abs((1.0 - _1550) / _1561);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1550 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1595 = frontier_phi_14_12_ladder;
        }
        float _1799;
        if (_1564 > 0.0)
        {
            _1799 = abs((1.0 - _1554) / _1564);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1554 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1799 = frontier_phi_23_19_ladder;
        }
        float _2053;
        if (_1567 > 0.0)
        {
            _2053 = abs((1.0 - _1558) / _1567);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1558 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2053 = frontier_phi_35_30_ladder;
        }
        float _2055 = isnan(_1799) ? _1595 : (isnan(_1595) ? _1799 : min(_1595, _1799));
        float _2056 = isnan(_2053) ? _2055 : (isnan(_2055) ? _2053 : min(_2055, _2053));
        float _2060 = (_2056 * _1561) + _1550;
        float _2061 = (_2056 * _1564) + _1554;
        float _2062 = (_2056 * _1567) + _1558;
        float _2063 = _2056 * 9.9999997473787516355514526367188e-05;
        float _2065 = (-1.0) - _2063;
        float _2067 = _2063 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2062 > _2067) || ((_2062 < _2065) || ((_2061 > _2067) || ((_2061 < _2065) || ((_2060 < _2065) || (_2060 > _2067))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2062, cbModelParam._m0[9u].z, fma(_2061, cbModelParam._m0[9u].y, _2060 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2062, cbModelParam._m0[10u].z, fma(_2061, cbModelParam._m0[10u].y, _2060 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2062, cbModelParam._m0[11u].z, fma(_2061, cbModelParam._m0[11u].y, _2060 * cbModelParam._m0[11u].x))), _1502);
            frontier_phi_13_35_ladder = _2190.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2190.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2190.x * cbModelParam._m0[1u].y;
        }
        _1583 = frontier_phi_13_35_ladder_2;
        _1585 = frontier_phi_13_35_ladder_1;
        _1587 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1502);
        _1583 = _1571.x * cbModelParam._m0[1u].y;
        _1585 = _1571.y * cbModelParam._m0[1u].y;
        _1587 = _1571.z * cbModelParam._m0[1u].y;
    }
    float _1591 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _517);
    float _1592 = isnan(_1591) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1591 : min(cbModelParam._m0[25u].w, _1591));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1646 = fma(_755, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747)) + cbModelParam._m0[21u].w;
        float _1650 = fma(_755, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747)) + cbModelParam._m0[22u].w;
        float _1654 = fma(_755, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747)) + cbModelParam._m0[23u].w;
        float _1657 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1660 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1663 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1804;
        if (_1657 > 0.0)
        {
            _1804 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1804 = frontier_phi_25_21_ladder;
        }
        float _2080;
        if (_1660 > 0.0)
        {
            _2080 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2080 = frontier_phi_37_32_ladder;
        }
        float _2293;
        if (_1663 > 0.0)
        {
            _2293 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2293 = frontier_phi_46_43_ladder;
        }
        float _2295 = isnan(_2080) ? _1804 : (isnan(_1804) ? _2080 : min(_1804, _2080));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1657) + _1646;
        float _2301 = (_2296 * _1660) + _1650;
        float _2302 = (_2296 * _1663) + _1654;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2304 = (-1.0) - _2303;
        float _2306 = _2303 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2302 > _2306) || ((_2302 < _2304) || ((_2301 > _2306) || ((_2301 < _2304) || ((_2300 < _2304) || (_2300 > _2306))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2302, cbModelParam._m0[17u].z, fma(_2301, cbModelParam._m0[17u].y, _2300 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2302, cbModelParam._m0[18u].z, fma(_2301, cbModelParam._m0[18u].y, _2300 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2302, cbModelParam._m0[19u].z, fma(_2301, cbModelParam._m0[19u].y, _2300 * cbModelParam._m0[19u].x))), _1592);
            frontier_phi_22_46_ladder = _2501.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2501.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2501.x * cbModelParam._m0[1u].z;
        }
        _1682 = frontier_phi_22_46_ladder_2;
        _1684 = frontier_phi_22_46_ladder_1;
        _1686 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1592);
        _1682 = _1666.x * cbModelParam._m0[1u].z;
        _1684 = _1666.y * cbModelParam._m0[1u].z;
        _1686 = _1666.z * cbModelParam._m0[1u].z;
    }
    float _1699 = (((_718 * _667) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1682 - _1583)) + _1583);
    float _1701 = (((_718 * _669) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1684 - _1585)) + _1585);
    float _1703 = (((_718 * _670) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1686 - _1587)) + _1587);
    float _1706 = fma(_1703, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1709 = fma(_1703, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1712 = fma(_1703, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, _1699 * cbSceneParam._m0[91u].x));
    uvec4 _1722 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1724 = _1722.x * 14u;
    uint _1725 = _1724 + 13u;
    float _1732 = _683 + (-1.0);
    float _1737 = (cbLight._m0[_1725].x * _1732) + 1.0;
    float _1738 = (cbLight._m0[_1725].y * _1732) + 1.0;
    float _1739 = (cbLight._m0[_1725].z * _1732) + 1.0;
    float _1740 = (cbLight._m0[_1725].w * _1732) + 1.0;
    uint _1741 = _1724 + 5u;
    float _1747 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
    uint _1751 = _1724 + 4u;
    float _1758 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
    uint _1762 = _1724 | 1u;
    float _1773 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_514, _515, _516));
    float _1776 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_514, _515, _516));
    float _3908 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _3919 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1781 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1783 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.3183098733425140380859375;
    float _1790 = ((cbLight._m0[_1741].x * _1747) * _1783) + ((cbLight._m0[_1751].x * _1758) * _1781);
    float _1791 = ((_1747 * cbLight._m0[_1741].y) * _1783) + ((_1758 * cbLight._m0[_1751].y) * _1781);
    float _1792 = ((_1747 * cbLight._m0[_1741].z) * _1783) + ((_1758 * cbLight._m0[_1751].z) * _1781);
    uvec4 _1796 = floatBitsToUint(cbLight._m0[_1724 + 12u]);
    bool _1798 = _1796.x == 0u;
    float _1809;
    float _1811;
    float _1813;
    if (_1798)
    {
        _1809 = _1790;
        _1811 = _1791;
        _1813 = _1792;
    }
    else
    {
        uint _1817 = _1724 + 6u;
        float _1833 = (dot(vec3(cbLight._m0[_1724 + 2u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _1834 = _1833 * _1833;
        float _3930 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1836 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _1809 = (((cbLight._m0[_1817].x * 0.3183098733425140380859375) * _1835) * _1836) + _1790;
        _1811 = (((cbLight._m0[_1817].y * 0.3183098733425140380859375) * _1835) * _1836) + _1791;
        _1813 = (((cbLight._m0[_1817].z * 0.3183098733425140380859375) * _1835) * _1836) + _1792;
    }
    bool _1816 = _1796.y == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1816)
    {
        _1854 = _1809;
        _1856 = _1811;
        _1858 = _1813;
    }
    else
    {
        uint _2024 = _1724 + 7u;
        float _2040 = (dot(vec3(cbLight._m0[_1724 + 3u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _2041 = _2040 * _2040;
        float _3946 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2042 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _2043 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _1854 = (((cbLight._m0[_2024].x * 0.3183098733425140380859375) * _2042) * _2043) + _1809;
        _1856 = (((cbLight._m0[_2024].y * 0.3183098733425140380859375) * _2042) * _2043) + _1811;
        _1858 = (((cbLight._m0[_2024].z * 0.3183098733425140380859375) * _2042) * _2043) + _1813;
    }
    uint _1861 = _1724 + 8u;
    float _1874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _517) * 0.949999988079071044921875);
    float _1875 = _1874 * _1874;
    float _1876 = cbLight._m0[_1724].x + _594;
    float _1877 = cbLight._m0[_1724].y + _595;
    float _1878 = cbLight._m0[_1724].z + _596;
    float _1882 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
    float _1883 = _1882 * _1876;
    float _1884 = _1882 * _1877;
    float _1885 = _1882 * _1878;
    float _1886 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1724].xyz));
    float _3962 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _1890 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1891 = dot(vec3(_514, _515, _516), vec3(_1883, _1884, _1885));
    float _3984 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1883, _1884, _1885));
    float _3995 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1875 * _1875;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1911 = exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0);
    float _1912 = 0.959999978542327880859375 - _664;
    float _1914 = 0.959999978542327880859375 - _665;
    float _1915 = 0.959999978542327880859375 - _666;
    float _1922 = 1.0 - _1875;
    float _1933 = (0.5 / (((_1890 * ((_1889 * _1922) + _1875)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1922) + _1875) * _1889))) * _1889;
    float _4006 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    uint _1946 = _1724 + 9u;
    float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1762].w)) * _517) * 0.949999988079071044921875);
    float _1958 = _1957 * _1957;
    float _1959 = cbLight._m0[_1762].x + _594;
    float _1960 = cbLight._m0[_1762].y + _595;
    float _1961 = cbLight._m0[_1762].z + _596;
    float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
    float _1966 = _1965 * _1959;
    float _1967 = _1965 * _1960;
    float _1968 = _1965 * _1961;
    float _1969 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1762].xyz));
    float _4017 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1973 = dot(vec3(_514, _515, _516), vec3(_1966, _1967, _1968));
    float _4028 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_1966, _1967, _1968));
    float _4039 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1981 = _1958 * _1958;
    float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
    float _1992 = exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0);
    float _1999 = 1.0 - _1958;
    float _2009 = (0.5 / (((_1890 * ((_1972 * _1999) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1999) + _1958) * _1972))) * _1972;
    float _4050 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2011 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
    float _2021 = (((((_1992 * _1912) + _667) * cbLight._m0[_1946].x) * _2011) * _1747) + (((((_1911 * _1912) + _667) * cbLight._m0[_1861].x) * _1935) * _1758);
    float _2022 = (((((_1992 * _1914) + _669) * cbLight._m0[_1946].y) * _2011) * _1747) + (((((_1911 * _1914) + _669) * cbLight._m0[_1861].y) * _1935) * _1758);
    float _2023 = (((((_1992 * _1915) + _670) * cbLight._m0[_1946].z) * _2011) * _1747) + (((((_1911 * _1915) + _670) * cbLight._m0[_1861].z) * _1935) * _1758);
    float _2085;
    float _2087;
    float _2089;
    if (_1798)
    {
        _2085 = _2021;
        _2087 = _2022;
        _2089 = _2023;
    }
    else
    {
        uint _2091 = _1724 + 2u;
        uint _2095 = _1724 + 10u;
        float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _517) * 0.949999988079071044921875);
        float _2110 = _2109 * _2109;
        float _2111 = cbLight._m0[_2091].x + _594;
        float _2112 = cbLight._m0[_2091].y + _595;
        float _2113 = cbLight._m0[_2091].z + _596;
        float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
        float _2118 = _2117 * _2111;
        float _2119 = _2117 * _2112;
        float _2120 = _2117 * _2113;
        float _2121 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2091].xyz));
        float _4061 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2125 = dot(vec3(_514, _515, _516), vec3(_2118, _2119, _2120));
        float _4072 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2129 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2118, _2119, _2120));
        float _4083 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2133 = _2110 * _2110;
        float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
        float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0);
        float _2151 = 1.0 - _2110;
        float _2161 = (0.5 / (((_1890 * ((_2124 * _2151) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2151) + _2110) * _2124))) * _2124;
        float _4094 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _2085 = (((((_2144 * _1912) + _667) * cbLight._m0[_2095].x) * _2163) * _2164) + _2021;
        _2087 = (((((_2144 * _1914) + _669) * cbLight._m0[_2095].y) * _2163) * _2164) + _2022;
        _2089 = (((((_2144 * _1915) + _670) * cbLight._m0[_2095].z) * _2163) * _2164) + _2023;
    }
    float _2199;
    float _2201;
    float _2203;
    if (_1816)
    {
        _2199 = _2085;
        _2201 = _2087;
        _2203 = _2089;
    }
    else
    {
        uint _2210 = _1724 + 3u;
        uint _2214 = _1724 + 11u;
        float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _517) * 0.949999988079071044921875);
        float _2229 = _2228 * _2228;
        float _2230 = cbLight._m0[_2210].x + _594;
        float _2231 = cbLight._m0[_2210].y + _595;
        float _2232 = cbLight._m0[_2210].z + _596;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2237 = _2236 * _2230;
        float _2238 = _2236 * _2231;
        float _2239 = _2236 * _2232;
        float _2240 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2210].xyz));
        float _4110 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2244 = dot(vec3(_514, _515, _516), vec3(_2237, _2238, _2239));
        float _4121 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
        float _4132 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2252 = _2229 * _2229;
        float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
        float _2263 = exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0);
        float _2270 = 1.0 - _2229;
        float _2280 = (0.5 / (((_1890 * ((_2243 * _2270) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2270) + _2229) * _2243))) * _2243;
        float _4143 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2282 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
        float _2283 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _2199 = (((((_2263 * _1912) + _667) * cbLight._m0[_2214].x) * _2282) * _2283) + _2085;
        _2201 = (((((_2263 * _1914) + _669) * cbLight._m0[_2214].y) * _2282) * _2283) + _2087;
        _2203 = (((((_2263 * _1915) + _670) * cbLight._m0[_2214].z) * _2282) * _2283) + _2089;
    }
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    if (_1722.y == 0u)
    {
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2359 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2358;
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2358;
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2358;
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.x;
        uint _2385 = uint((float(_2373.y) * floor(float(uint(cbSceneParam._m0[85u].y * _603) / _2374))) + floor(float(uint(cbSceneParam._m0[85u].x * _602) / _2374)));
        float _2395 = (log2(_2361 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2396 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        uint _2399 = uint(isnan(14.0) ? _2396 : (isnan(_2396) ? 14.0 : min(_2396, 14.0)));
        uvec4 _2404 = texelFetch(g_lightClusterGridBuffer, int(((_2399 << 2u) + (_2385 << 6u)) >> 2u));
        uint _2405 = _2404.x;
        uint _2406 = _2373.z;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        if (((((1u << ((_2406 >> 4u) & 15u)) + 4294967295u) & _2405) == 0u) || ((_2406 & 240u) == 0u))
        {
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
        }
        else
        {
            float _2507;
            float _2509;
            float _2511;
            float _2513;
            float _2515;
            float _2517;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            uint _2657 = 0u;
            uint _2666;
            bool _2667;
            for (;;)
            {
                _2666 = texelFetch(g_lightClassification, int((((_2399 << 5u) + (_2385 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                _2667 = _2666 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2667)
                {
                    frontier_phi_61_pred = _2651;
                    frontier_phi_61_pred_1 = _2656;
                    frontier_phi_61_pred_2 = _2655;
                    frontier_phi_61_pred_3 = _2654;
                    frontier_phi_61_pred_4 = _2653;
                    frontier_phi_61_pred_5 = _2652;
                }
                else
                {
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    uint _2781;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2666;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    for (;;)
                    {
                        uint _2785 = uint(findLSB(_2781)) + (_2657 << 5u);
                        uint _2782 = (_2781 + 4294967295u) & _2781;
                        uint _2787 = _2785 * 48u;
                        vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        uint _2807 = (_2785 * 48u) + 4u;
                        vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 3u)).x));
                        uint _2826 = (_2785 * 48u) + 8u;
                        vec3 _2837 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x));
                        float _2841 = _2801.x - _2359;
                        float _2842 = _2801.y - _2360;
                        float _2843 = _2801.z - _2361;
                        float _2844 = dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843));
                        float _2847 = inversesqrt(_2844);
                        float _2848 = _2847 * _2841;
                        float _2849 = _2847 * _2842;
                        float _2850 = _2847 * _2843;
                        float _2851 = dot(vec3(_624, _627, _630), vec3(_2848, _2849, _2850));
                        float _2856 = 1.0 - (_2844 * _2801.w);
                        float _4169 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2857 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2858 = sqrt(_2844) * _2820.w;
                        float _2861 = 1.39999997615814208984375 / (_2858 + 1.39999997615814208984375);
                        float _2862 = _2861 * _2861;
                        float _2865 = ((1.0 - _2862) * _2851) + _2862;
                        float _2868 = _2858 * _2858;
                        float _2872 = ((isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0))) * _2857) / ((_2868 * 0.699999988079071044921875) + 1.0);
                        float _2876 = (-0.0) - _2359;
                        float _2877 = (-0.0) - _2360;
                        float _2878 = (-0.0) - _2361;
                        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
                        float _2883 = _2882 * _2876;
                        float _2884 = _2882 * _2877;
                        float _2885 = _2882 * _2878;
                        float _2893 = exp2(log2(1.0 / ((_2868 * 3.5) + 5.0)) * 0.25);
                        float _2894 = 1.0 - _699;
                        float _2901 = sqrt(1.0 - ((1.0 - (_2894 * _2894)) * (1.0 - (_2893 * _2893))));
                        float _2902 = _2901 * _2901;
                        float _2903 = _2902 * _2902;
                        float _2904 = _2883 + _2848;
                        float _2905 = _2884 + _2849;
                        float _2906 = _2885 + _2850;
                        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
                        float _2914 = dot(vec3(_624, _627, _630), vec3(_2883, _2884, _2885));
                        float _4185 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2917 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2918 = dot(vec3(_624, _627, _630), vec3(_2910 * _2904, _2910 * _2905, _2910 * _2906));
                        float _4196 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2921 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2925 = ((_2921 * _2921) * (_2903 + (-1.0))) + 1.0;
                        float _2926 = _2861 * _2902;
                        float _2927 = _2926 * _2926;
                        float _2930 = ((1.0 - _2927) * _2851) + _2927;
                        float _4207 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2932 = 1.0 - _2902;
                        float _2942 = (0.5 / (((_2931 * ((_2917 * _2932) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2931 * _2932) + _2902) * _2917))) * _2931;
                        float _4218 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2953 = (((_2903 * 3.1415927410125732421875) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) / ((_2925 * _2925) * ((_2868 * 2.1991131305694580078125) + 3.141590118408203125))) * _2857;
                        _2710 = (_2872 * _2820.x) + _2778;
                        _2711 = (_2872 * _2820.y) + _2779;
                        _2712 = (_2872 * _2820.z) + _2780;
                        _2707 = (_2953 * _2837.x) + _2775;
                        _2708 = (_2953 * _2837.y) + _2776;
                        _2709 = (_2953 * _2837.z) + _2777;
                        if (_2782 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2782;
                        }
                    }
                    frontier_phi_61_pred = _2707;
                    frontier_phi_61_pred_1 = _2712;
                    frontier_phi_61_pred_2 = _2711;
                    frontier_phi_61_pred_3 = _2710;
                    frontier_phi_61_pred_4 = _2709;
                    frontier_phi_61_pred_5 = _2708;
                }
                _2507 = frontier_phi_61_pred;
                _2517 = frontier_phi_61_pred_1;
                _2515 = frontier_phi_61_pred_2;
                _2513 = frontier_phi_61_pred_3;
                _2511 = frontier_phi_61_pred_4;
                _2509 = frontier_phi_61_pred_5;
                uint _2658 = _2657 + 1u;
                if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2651 = _2507;
                    _2652 = _2509;
                    _2653 = _2511;
                    _2654 = _2513;
                    _2655 = _2515;
                    _2656 = _2517;
                    _2657 = _2658;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
        }
        uvec4 _2520 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2521 = _2520.z;
        uint _2523 = (_2521 >> 8u) & 15u;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((4294967295u << _2523) & _2405) == 0u)
        {
            _2619 = _2506;
            _2621 = _2508;
            _2623 = _2510;
            _2625 = _2512;
            _2627 = _2514;
            _2629 = _2516;
        }
        else
        {
            float _2644 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
            float _2645 = _2644 * _2359;
            float _2646 = _2644 * _2360;
            float _2647 = _2644 * _2361;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2523 < ((_2521 >> 12u) & 15u))
            {
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2758 = _2506;
                float _2759 = _2508;
                float _2760 = _2510;
                float _2761 = _2512;
                float _2762 = _2514;
                float _2763 = _2516;
                uint _2764 = _2523;
                uint _2773;
                bool _2774;
                for (;;)
                {
                    _2773 = texelFetch(g_lightClassification, int((((_2399 << 5u) + (_2385 << 9u)) + (_2764 << 2u)) >> 2u)).x;
                    _2774 = _2773 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2774)
                    {
                        frontier_phi_67_pred = _2761;
                        frontier_phi_67_pred_1 = _2762;
                        frontier_phi_67_pred_2 = _2763;
                        frontier_phi_67_pred_3 = _2760;
                        frontier_phi_67_pred_4 = _2759;
                        frontier_phi_67_pred_5 = _2758;
                    }
                    else
                    {
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _2971 = _2758;
                        float _2972 = _2759;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        uint _2977 = _2773;
                        uint _2978;
                        vec4 _3003;
                        float _3004;
                        vec4 _3019;
                        vec3 _3031;
                        vec4 _3047;
                        vec4 _3062;
                        float _3108;
                        bool _3109;
                        for (;;)
                        {
                            uint _2988 = ((_2764 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2977));
                            _2978 = (_2977 + 4294967295u) & _2977;
                            uint _2990 = _2988 * 40u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            _3004 = _3003.w;
                            uint _3006 = (_2988 * 40u) + 4u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3021 = (_2988 * 40u) + 8u;
                            _3031 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x));
                            uint _3034 = (_2988 * 40u) + 16u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3049 = (_2988 * 40u) + 20u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3064 = (_2988 * 40u) + 24u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3083 = (_2988 * 40u) + 28u;
                            vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            _3108 = fma(_2361, _3096.z, fma(_2360, _3096.y, _3096.x * _2359)) + _3096.w;
                            _3109 = !((fma(_2361, _3077.z, fma(_2360, _3077.y, _3077.x * _2359)) + _3077.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3109)
                            {
                                float _3136 = _3003.x - _2359;
                                float _3137 = _3003.y - _2360;
                                float _3138 = _3003.z - _2361;
                                float _3139 = dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138));
                                float _3142 = inversesqrt(_3139);
                                float _3143 = _3142 * _3136;
                                float _3144 = _3142 * _3137;
                                float _3145 = _3142 * _3138;
                                float _3149 = 1.0 - (_3139 / (_3004 * _3004));
                                float _4229 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3154 = sqrt(_3139) * _3019.w;
                                float _3156 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                                float _3157 = _3156 * _3156;
                                float _3160 = ((1.0 - _3157) * dot(vec3(_3143, _3144, _3145), vec3(_624, _627, _630))) + _3157;
                                float _3163 = _3154 * _3154;
                                float _3167 = (fma(_2361, _3047.z, fma(_2360, _3047.y, _3047.x * _2359)) + _3047.w) / _3108;
                                float _3168 = (fma(_2361, _3062.z, fma(_2360, _3062.y, _3062.x * _2359)) + _3062.w) / _3108;
                                float _3172 = 1.0 - dot(vec2(_3167, _3168), vec2(_3167, _3168));
                                float _4245 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3174 = _3173 * (((isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))) * _3150) / ((_3163 * 0.699999988079071044921875) + 1.0));
                                float _3186 = exp2(log2(1.0 / ((_3163 * 3.5) + 5.0)) * 0.25);
                                float _3187 = 1.0 - _699;
                                float _3194 = sqrt(1.0 - ((1.0 - (_3187 * _3187)) * (1.0 - (_3186 * _3186))));
                                float _3195 = _3194 * _3194;
                                float _3196 = _3195 * _3195;
                                float _3197 = _3143 - _2645;
                                float _3198 = _3144 - _2646;
                                float _3199 = _3145 - _2647;
                                float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                                float _3207 = dot(vec3(_624, _627, _630), vec3((-0.0) - _2645, (-0.0) - _2646, (-0.0) - _2647));
                                float _4256 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3210 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3211 = dot(vec3(_624, _627, _630), vec3(_3203 * _3197, _3203 * _3198, _3203 * _3199));
                                float _4267 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3214 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3218 = ((_3214 * _3214) * (_3196 + (-1.0))) + 1.0;
                                float _3219 = _3156 * _3195;
                                float _3220 = _3219 * _3219;
                                float _3226 = ((1.0 - _3220) * dot(vec3(_624, _627, _630), vec3(_3143, _3144, _3145))) + _3220;
                                float _4278 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3228 = 1.0 - _3195;
                                float _3238 = (0.5 / (((_3227 * ((_3210 * _3228) + _3195)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3195) * _3210))) * _3227;
                                float _4289 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3248 = (_3173 * _3150) * (((_3196 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_3218 * _3218) * ((_3163 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3248 * _3031.x;
                                frontier_phi_73_pred_1 = _3248 * _3031.y;
                                frontier_phi_73_pred_2 = _3174 * _3019.z;
                                frontier_phi_73_pred_3 = _3174 * _3019.y;
                                frontier_phi_73_pred_4 = _3174 * _3019.x;
                                frontier_phi_73_pred_5 = _3248 * _3031.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3252 = frontier_phi_73_pred;
                            _3253 = frontier_phi_73_pred_1;
                            _3257 = frontier_phi_73_pred_2;
                            _3256 = frontier_phi_73_pred_3;
                            _3255 = frontier_phi_73_pred_4;
                            _3254 = frontier_phi_73_pred_5;
                            _2961 = _3255 + _2974;
                            _2962 = _3256 + _2975;
                            _2963 = _3257 + _2976;
                            _2958 = _3252 + _2971;
                            _2959 = _3253 + _2972;
                            _2960 = _3254 + _2973;
                            if (_2978 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2978;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2961;
                        frontier_phi_67_pred_1 = _2962;
                        frontier_phi_67_pred_2 = _2963;
                        frontier_phi_67_pred_3 = _2960;
                        frontier_phi_67_pred_4 = _2959;
                        frontier_phi_67_pred_5 = _2958;
                    }
                    _2626 = frontier_phi_67_pred;
                    _2628 = frontier_phi_67_pred_1;
                    _2630 = frontier_phi_67_pred_2;
                    _2624 = frontier_phi_67_pred_3;
                    _2622 = frontier_phi_67_pred_4;
                    _2620 = frontier_phi_67_pred_5;
                    uint _2765 = _2764 + 1u;
                    if (_2765 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2758 = _2620;
                        _2759 = _2622;
                        _2760 = _2624;
                        _2761 = _2626;
                        _2762 = _2628;
                        _2763 = _2630;
                        _2764 = _2765;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2628;
                frontier_phi_55_56_ladder_1 = _2630;
                frontier_phi_55_56_ladder_2 = _2626;
                frontier_phi_55_56_ladder_3 = _2624;
                frontier_phi_55_56_ladder_4 = _2622;
                frontier_phi_55_56_ladder_5 = _2620;
            }
            else
            {
                frontier_phi_55_56_ladder = _2514;
                frontier_phi_55_56_ladder_1 = _2516;
                frontier_phi_55_56_ladder_2 = _2512;
                frontier_phi_55_56_ladder_3 = _2510;
                frontier_phi_55_56_ladder_4 = _2508;
                frontier_phi_55_56_ladder_5 = _2506;
            }
            _2619 = frontier_phi_55_56_ladder_5;
            _2621 = frontier_phi_55_56_ladder_4;
            _2623 = frontier_phi_55_56_ladder_3;
            _2625 = frontier_phi_55_56_ladder_2;
            _2627 = frontier_phi_55_56_ladder;
            _2629 = frontier_phi_55_56_ladder_1;
        }
        float _2634 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2418 = (_2634 * _2625) + _1854;
        _2420 = (_2634 * _2627) + _1856;
        _2422 = (_2634 * _2629) + _1858;
        _2424 = ((_2619 * _667) * _2634) + _2199;
        _2426 = ((_2621 * _669) * _2634) + _2201;
        _2428 = ((_2623 * _670) * _2634) + _2203;
    }
    else
    {
        _2418 = _1854;
        _2420 = _1856;
        _2422 = _1858;
        _2424 = _2199;
        _2426 = _2201;
        _2428 = _2203;
    }
    float _4305 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4316 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4327 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    uint _2448 = _226 + 6u;
    float _2456 = _602 / cbSceneParam._m0[86u].x;
    float _2457 = _603 / cbSceneParam._m0[86u].y;
    vec4 _2471 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2456, _2457, (log2((isnan(cbSceneParam._m0[77u].w) ? _536 : (isnan(_536) ? cbSceneParam._m0[77u].w : min(_536, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2473 = _2471.x;
    float _2474 = _2471.y;
    float _2475 = _2471.z;
    float _2476 = _2471.w;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    if (_536 > cbSceneParam._m0[78u].w)
    {
        float _2531 = isnan(_536) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _536 : min(cbSceneParam._m0[80u].w, _536));
        float _2532 = _2531 / _536;
        float _2543 = _2532 * _587;
        float _2544 = _588 * _2532;
        float _2545 = (-0.0) - _2544;
        float _2547 = _2532 * _589;
        float _2549 = (cbSceneParam._m0[77u].w * _2545) / _2531;
        float _2550 = _2549 + cbSceneParam._m0[79u].w;
        float _2551 = cbSceneParam._m0[79u].w - _2544;
        float _2557 = sqrt(((_2543 * _2543) + (_2544 * _2544)) + (_2547 * _2547));
        float _2560 = (1.0 - (cbSceneParam._m0[77u].w / _2531)) * _2557;
        float _2565 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2567 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2720;
        if (abs((_2545 - _2549) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2720 = ((((_2550 > 0.0) ? exp2(_2565 * _2550) : (2.0 - exp2(_2567 * _2550))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2560;
        }
        else
        {
            float _2680 = 1.0 / cbSceneParam._m0[80u].x;
            float _2681 = isnan(_2551) ? _2550 : (isnan(_2550) ? _2551 : max(_2550, _2551));
            float _2682 = isnan(_2551) ? _2550 : (isnan(_2550) ? _2551 : min(_2550, _2551));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            float _2692 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : min(_2682, 0.0));
            _2720 = ((abs(_2557 / _2545) * cbSceneParam._m0[80u].y) * ((((_2691 - _2692) * 2.0) - ((exp2(_2565 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0)))) - exp2(_2565 * (isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0))))) * _2680)) - ((exp2(_2567 * _2691) - exp2(_2567 * _2692)) * _2680))) + (_2560 * cbSceneParam._m0[80u].z);
        }
        vec4 _2722 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2456, _2457, 1.0), 0.0);
        float _2731 = exp2((_2720 * (-1.44269502162933349609375)) * (1.0 - _2722.w));
        float _2732 = log2(_2731);
        float _2748 = log2(_2476);
        _2569 = (exp2(_2748 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].x)) * _2722.x) / cbSceneParam._m0[78u].x)) + _2473;
        _2571 = (exp2(_2748 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].y)) * _2722.y) / cbSceneParam._m0[78u].y)) + _2474;
        _2573 = (exp2(_2748 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].z)) * _2722.z) / cbSceneParam._m0[78u].z)) + _2475;
        _2575 = _2731 * _2476;
    }
    else
    {
        _2569 = _2473;
        _2571 = _2474;
        _2573 = _2475;
        _2575 = _2476;
    }
    float _2587 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2588 = _2587 == 3.0;
    float _2589 = log2(_2575);
    float _2596 = exp2(_2589 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2418 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _683))) + ((_2424 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1491)) * cbPerFrame._m0[3u].x));
    float _2597 = exp2(_2589 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2420 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _683))) + ((_2426 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1491)) * cbPerFrame._m0[3u].x));
    float _2598 = exp2(_2589 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2422 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _683))) + ((_2428 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1491)) * cbPerFrame._m0[3u].x));
    float _2607 = (_2587 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2607 * (_2588 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2569)));
    SV_Target.y = _2607 * (_2588 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2571)));
    SV_Target.z = _2607 * (_2588 ? _2598 : (_2598 + (cbSceneParam._m0[72u].w * _2573)));
    SV_Target.w = cbInstanceData._m0[_2448].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2448].w;
}


