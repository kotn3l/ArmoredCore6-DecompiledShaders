#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1111;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((_258 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_259 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _329 = _325.z;
    float _333 = (_325.x * 2.0) + (-1.0);
    float _334 = (_325.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_333, _334), vec2(_333, _334));
    float _3464 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))));
    float _346 = _333 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_299.x * 2.0) + (-1.0)));
    float _347 = _334 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_299.y * 2.0) + (-1.0)));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _362 = _360.x;
    float _363 = 1.0 - _362;
    float _396 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_362 - _363) * cbMtdParam._m0[24u].w) + _363) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3475 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _405 = ((((cbMtdParam._m0[10u].x - _284) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _397) + _284;
    float _406 = ((((cbMtdParam._m0[10u].y - _285) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _397) + _285;
    float _407 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _286)) * _397) + _286;
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _422 = _420.x;
    float _424 = _422 - (_422 * _397);
    float _429 = (((_299.z - _329) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _329;
    float _433 = ((cbMtdParam._m0[23u].y - _429) * _397) + _429;
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _465 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_227, _228, _229, 0.0));
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _258) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _259) + cbTextureTilingScale._m0[18u].w));
    float _482 = _480.x;
    float _487 = fract(_480.w + cbPerFrame._m0[22u].x);
    float _489 = (1.0 - _487) * _482;
    float _494 = ((_487 + (-1.0)) + _482) * 9.0;
    float _496 = ((_482 + (-1.0)) + _487) * 9.0;
    float _497 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _498 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _512 = (_489 * ((_480.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _497 : (isnan(_497) ? 3.0 : min(_497, 3.0))) * 3.1415927410125732421875);
    float _514 = (_489 * ((_480.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _498 : (isnan(_498) ? 3.0 : min(_498, 3.0))) * 3.1415927410125732421875);
    float _518 = inversesqrt(dot(vec3(_512, _514, 1.0), vec3(_512, _514, 1.0)));
    float _534 = (((((0.5 - _457) + ((_512 * 0.5) * _518)) * _465) + _457) * 2.0) + (-1.0);
    float _535 = (((((0.5 - _458) + ((_518 * 0.5) * _514)) * _465) + _458) * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _3506 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _552 = ((((cbMtdParam._m0[22u].z * _346) - _346) + _534) * _397) + _346;
    float _553 = ((((cbMtdParam._m0[22u].z * _347) - _347) + _535) * _397) + _347;
    float _554 = (_397 * (sqrt(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) - _341)) + _341;
    float _556 = cbMtdParam._m0[22u].x + _325.w;
    float _559 = fma(_554, _227, fma(_553, _233 * TANGENT.x, (_219 * _211) * _552));
    float _562 = fma(_554, _228, fma(_553, _233 * TANGENT.y, (_219 * _212) * _552));
    float _565 = fma(_554, _229, fma(_553, _233 * TANGENT.z, (_219 * _213) * _552));
    float _569 = inversesqrt(dot(vec3(_559, _562, _565), vec3(_559, _562, _565)));
    float _570 = _569 * _559;
    float _571 = _569 * _562;
    float _572 = _569 * _565;
    float _3517 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _573 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3539 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3550 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3561 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3572 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _578 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _592 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _643 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _633);
    float _644 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _633);
    float _645 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _633);
    float _649 = inversesqrt(dot(vec3(_643, _644, _645), vec3(_643, _644, _645)));
    float _650 = _643 * _649;
    float _651 = _644 * _649;
    float _652 = _645 * _649;
    float _658 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _659 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _680 = fma(_572, cbSceneParam._m0[5u].z, fma(_571, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _570));
    float _683 = fma(_572, cbSceneParam._m0[6u].z, fma(_571, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _570));
    float _686 = fma(_572, cbSceneParam._m0[7u].z, fma(_571, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _570));
    uint _700 = (_239 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _706 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_700].x;
    float _707 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_700].y;
    float _708 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_700].z;
    float _3583 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _712 = 1.0 - _578;
    float _713 = _709 * _712;
    float _714 = _710 * _712;
    float _715 = _711 * _712;
    float _720 = (_709 + (-0.039999999105930328369140625)) * _578;
    float _721 = (_710 + (-0.039999999105930328369140625)) * _578;
    float _722 = (_711 + (-0.039999999105930328369140625)) * _578;
    float _723 = _720 + 0.039999999105930328369140625;
    float _725 = _721 + 0.039999999105930328369140625;
    float _726 = _722 + 0.039999999105930328369140625;
    vec4 _735 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _658, cbSceneParam._m0[86u].y * _659));
    float _739 = ((isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * TEXCOORD_5.w) * _735.x;
    float _740 = dot(vec3(_570, _571, _572), vec3(_650, _651, _652));
    float _743 = _740 * 2.0;
    float _747 = (_743 * _570) - _650;
    float _748 = (_743 * _571) - _651;
    float _749 = (_743 * _572) - _652;
    float _753 = abs(dot(vec3(_650, _651, _652), vec3(_570, _571, _572)));
    float _3616 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _755 = sqrt(_573);
    float _767 = exp2((_755 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_755 * 3.0));
    float _773 = (1.0 - _767) * ((_755 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _774 = _767 * _755;
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1110;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _836 = fma(_810, cbModelParam._m0[26u].z, fma(_806, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802));
        float _840 = fma(_810, cbModelParam._m0[27u].z, fma(_806, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802));
        float _844 = fma(_810, cbModelParam._m0[28u].z, fma(_806, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802));
        float _868 = _802 + _570;
        float _869 = _806 + _571;
        float _870 = _810 + _572;
        float _880 = fma(_870, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _868)) - _836;
        float _881 = fma(_870, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _868)) - _840;
        float _882 = fma(_870, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _868)) - _844;
        float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
        float _899 = ((_886 * _880) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_836 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_886 * _881) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_840 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_886 * _882) / cbModelParam._m0[34u].z) + ((((((_844 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        float _938 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_904.x + (-0.5));
        float _940 = _938 * (_904.y + (-0.5));
        float _941 = _938 * (_904.z + (-0.5));
        float _948 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_911.x + (-0.5));
        float _950 = _948 * (_911.y + (-0.5));
        float _951 = _948 * (_911.z + (-0.5));
        float _958 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_918.x + (-0.5));
        float _960 = _958 * (_918.y + (-0.5));
        float _961 = _958 * (_918.z + (-0.5));
        float _968 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_925.x + (-0.5));
        float _970 = _968 * (_925.y + (-0.5));
        float _971 = _968 * (_925.z + (-0.5));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = _939 * 0.5;
        float _976 = _949 * 0.5;
        float _977 = _959 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _992 = (dot(vec3(_570, _571, _572), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1002 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3664 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1004 + 1.0))) + _1009) * _972;
        float _1019 = _940 * 0.5;
        float _1020 = _950 * 0.5;
        float _1021 = _960 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_570, _571, _572), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3697 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1046 + 1.0))) + _1051) * _973;
        float _1061 = _941 * 0.5;
        float _1062 = _951 * 0.5;
        float _1063 = _961 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_570, _571, _572), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3730 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1088 + 1.0))) + _1093) * _974;
        _1110 = _941;
        _1112 = _940;
        _1113 = _939;
        _1114 = _951;
        _1115 = _950;
        _1116 = _949;
        _1117 = _961;
        _1118 = _960;
        _1119 = _959;
        _1120 = _974;
        _1121 = _973;
        _1122 = _972;
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
    }
    else
    {
        _1110 = _1111;
        _1112 = _1111;
        _1113 = _1111;
        _1114 = _1111;
        _1115 = _1111;
        _1116 = _1111;
        _1117 = _1111;
        _1118 = _1111;
        _1119 = _1111;
        _1120 = _1111;
        _1121 = _1111;
        _1122 = _1111;
        _1123 = 0.0;
        _1124 = 0.0;
        _1125 = 0.0;
    }
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1150 = fma(_810, cbModelParam._m0[30u].z, fma(_806, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _802));
        float _1154 = fma(_810, cbModelParam._m0[31u].z, fma(_806, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _802));
        float _1158 = fma(_810, cbModelParam._m0[32u].z, fma(_806, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _802));
        float _1181 = _802 + _570;
        float _1182 = _806 + _571;
        float _1183 = _810 + _572;
        float _1193 = fma(_1183, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1181)) - _1150;
        float _1194 = fma(_1183, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1181)) - _1154;
        float _1195 = fma(_1183, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1181)) - _1158;
        float _1199 = inversesqrt(dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195)));
        float _1212 = ((_1199 * _1193) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1150 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1199 * _1194) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1154 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1199 * _1195) / cbModelParam._m0[35u].z) + ((((((_1158 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        float _1249 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1216.x + (-0.5));
        float _1251 = _1249 * (_1216.y + (-0.5));
        float _1252 = _1249 * (_1216.z + (-0.5));
        float _1259 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1223.x + (-0.5));
        float _1261 = _1259 * (_1223.y + (-0.5));
        float _1262 = _1259 * (_1223.z + (-0.5));
        float _1269 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1230.x + (-0.5));
        float _1271 = _1269 * (_1230.y + (-0.5));
        float _1272 = _1269 * (_1230.z + (-0.5));
        float _1279 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1237.x + (-0.5));
        float _1281 = _1279 * (_1237.y + (-0.5));
        float _1282 = _1279 * (_1237.z + (-0.5));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = _1250 * 0.5;
        float _1287 = _1260 * 0.5;
        float _1288 = _1270 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_570, _571, _572), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3793 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1313 + 1.0))) + _1318) * _1283;
        float _1328 = _1251 * 0.5;
        float _1329 = _1261 * 0.5;
        float _1330 = _1271 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_570, _571, _572), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _3826 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1355 + 1.0))) + _1360) * _1284;
        float _1370 = _1252 * 0.5;
        float _1371 = _1262 * 0.5;
        float _1372 = _1272 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_570, _571, _572), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _3859 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1397 + 1.0))) + _1402) * _1285;
        _1419 = _1252;
        _1420 = _1251;
        _1421 = _1250;
        _1422 = _1262;
        _1423 = _1261;
        _1424 = _1260;
        _1425 = _1272;
        _1426 = _1271;
        _1427 = _1270;
        _1428 = _1285;
        _1429 = _1284;
        _1430 = _1283;
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
    }
    else
    {
        _1419 = _1111;
        _1420 = _1111;
        _1421 = _1111;
        _1422 = _1111;
        _1423 = _1111;
        _1424 = _1111;
        _1425 = _1111;
        _1426 = _1111;
        _1427 = _1111;
        _1428 = _1111;
        _1429 = _1111;
        _1430 = _1111;
        _1431 = 0.0;
        _1432 = 0.0;
        _1433 = 0.0;
    }
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1123)) + _1123;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1124)) + _1124;
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1125)) + _1125;
    float _1466 = fma(_1445, cbSceneParam._m0[89u].z, fma(_1444, cbSceneParam._m0[89u].y, _1443 * cbSceneParam._m0[89u].x));
    float _1469 = fma(_1445, cbSceneParam._m0[90u].z, fma(_1444, cbSceneParam._m0[90u].y, _1443 * cbSceneParam._m0[90u].x));
    float _1472 = fma(_1445, cbSceneParam._m0[91u].z, fma(_1444, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1443));
    float _1487 = _747 * 0.5;
    float _1488 = _748 * 0.5;
    float _1489 = _749 * 0.5;
    float _1490 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1493 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1496 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1530;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1503 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1110, _1114, _1117, _1120));
        float _1507 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1511 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1113, _1116, _1119, _1122));
        float _1518 = dot(vec4(cbModelParam._m0[39u]), vec4(_1487, _1488, _1489, 1.0));
        _1530 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1518) ? 0.0 : (isnan(0.0) ? _1518 : max(0.0, _1518))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1530 = 1.0;
    }
    float _1541;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1532 = dot(vec4(cbModelParam._m0[40u]), vec4(_1487, _1488, _1489, 1.0));
        _1541 = dot(vec3(isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1541 = 1.0;
    }
    float _1545 = (_1541 * cbModelParam._m0[1u].x) + (_1530 * (1.0 - cbModelParam._m0[1u].x));
    float _1555 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _573);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1555 : min(cbModelParam._m0[25u].z, _1555));
    float _1638;
    float _1640;
    float _1642;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1605 = fma(_810, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _802)) + cbModelParam._m0[13u].w;
        float _1609 = fma(_810, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _802)) + cbModelParam._m0[14u].w;
        float _1613 = fma(_810, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _802)) + cbModelParam._m0[15u].w;
        float _1616 = fma(_749, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747));
        float _1619 = fma(_749, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747));
        float _1622 = fma(_749, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747));
        float _1650;
        if (_1616 > 0.0)
        {
            _1650 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1650 = frontier_phi_14_12_ladder;
        }
        float _1875;
        if (_1619 > 0.0)
        {
            _1875 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1875 = frontier_phi_23_19_ladder;
        }
        float _2132;
        if (_1622 > 0.0)
        {
            _2132 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2132 = frontier_phi_35_30_ladder;
        }
        float _2134 = isnan(_1875) ? _1650 : (isnan(_1650) ? _1875 : min(_1650, _1875));
        float _2135 = isnan(_2132) ? _2134 : (isnan(_2134) ? _2132 : min(_2134, _2132));
        float _2139 = (_2135 * _1616) + _1605;
        float _2140 = (_2135 * _1619) + _1609;
        float _2141 = (_2135 * _1622) + _1613;
        float _2142 = _2135 * 9.9999997473787516355514526367188e-05;
        float _2144 = (-1.0) - _2142;
        float _2146 = _2142 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2141 > _2146) || ((_2141 < _2144) || ((_2140 > _2146) || ((_2140 < _2144) || ((_2139 < _2144) || (_2139 > _2146))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2269 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2141, cbModelParam._m0[9u].z, fma(_2140, cbModelParam._m0[9u].y, _2139 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2141, cbModelParam._m0[10u].z, fma(_2140, cbModelParam._m0[10u].y, _2139 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2141, cbModelParam._m0[11u].z, fma(_2140, cbModelParam._m0[11u].y, _2139 * cbModelParam._m0[11u].x))), _1556);
            frontier_phi_13_35_ladder = _2269.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2269.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2269.x * cbModelParam._m0[1u].y;
        }
        _1638 = frontier_phi_13_35_ladder_2;
        _1640 = frontier_phi_13_35_ladder_1;
        _1642 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1626 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_747, _748, _749), _1556);
        _1638 = _1626.x * cbModelParam._m0[1u].y;
        _1640 = _1626.y * cbModelParam._m0[1u].y;
        _1642 = _1626.z * cbModelParam._m0[1u].y;
    }
    float _1646 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _573);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1646 : min(cbModelParam._m0[25u].w, _1646));
    float _1737;
    float _1739;
    float _1741;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1701 = fma(_810, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _802)) + cbModelParam._m0[21u].w;
        float _1705 = fma(_810, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _802)) + cbModelParam._m0[22u].w;
        float _1709 = fma(_810, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _802)) + cbModelParam._m0[23u].w;
        float _1712 = fma(_749, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747));
        float _1715 = fma(_749, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747));
        float _1718 = fma(_749, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747));
        float _1880;
        if (_1712 > 0.0)
        {
            _1880 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1880 = frontier_phi_25_21_ladder;
        }
        float _2159;
        if (_1715 > 0.0)
        {
            _2159 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2159 = frontier_phi_37_32_ladder;
        }
        float _2372;
        if (_1718 > 0.0)
        {
            _2372 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2372 = frontier_phi_46_43_ladder;
        }
        float _2374 = isnan(_2159) ? _1880 : (isnan(_1880) ? _2159 : min(_1880, _2159));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1712) + _1701;
        float _2380 = (_2375 * _1715) + _1705;
        float _2381 = (_2375 * _1718) + _1709;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2382;
        float _2385 = _2382 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2381 > _2385) || ((_2381 < _2383) || ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 < _2383) || (_2379 > _2385))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2381, cbModelParam._m0[17u].z, fma(_2380, cbModelParam._m0[17u].y, _2379 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2381, cbModelParam._m0[18u].z, fma(_2380, cbModelParam._m0[18u].y, _2379 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2381, cbModelParam._m0[19u].z, fma(_2380, cbModelParam._m0[19u].y, _2379 * cbModelParam._m0[19u].x))), _1647);
            frontier_phi_22_46_ladder = _2580.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2580.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2580.x * cbModelParam._m0[1u].z;
        }
        _1737 = frontier_phi_22_46_ladder_2;
        _1739 = frontier_phi_22_46_ladder_1;
        _1741 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_747, _748, _749), _1647);
        _1737 = _1721.x * cbModelParam._m0[1u].z;
        _1739 = _1721.y * cbModelParam._m0[1u].z;
        _1741 = _1721.z * cbModelParam._m0[1u].z;
    }
    float _1754 = (((_773 * _723) + _774) * _739) * ((cbModelParam._m0[1u].w * (_1737 - _1638)) + _1638);
    float _1756 = (((_773 * _725) + _774) * _739) * ((cbModelParam._m0[1u].w * (_1739 - _1640)) + _1640);
    float _1758 = (((_773 * _726) + _774) * _739) * ((cbModelParam._m0[1u].w * (_1741 - _1642)) + _1642);
    float _1761 = fma(_1758, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1754 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1758, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1754 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1758, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, _1754 * cbSceneParam._m0[91u].x));
    vec4 _1775 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_658, _659));
    float _1777 = _1775.w;
    float _1789 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1777);
    float _1790 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1777);
    float _1791 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1777);
    uvec4 _1795 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1797 = _1795.x * 14u;
    uint _1798 = _1797 + 13u;
    float _1805 = _739 + (-1.0);
    float _1810 = (cbLight._m0[_1798].x * _1805) + 1.0;
    float _1811 = (cbLight._m0[_1798].y * _1805) + 1.0;
    float _1812 = (cbLight._m0[_1798].z * _1805) + 1.0;
    float _1813 = (cbLight._m0[_1798].w * _1805) + 1.0;
    uint _1814 = _1797 + 5u;
    float _1820 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1824 = _1797 + 4u;
    float _1834 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1838 = _1797 | 1u;
    float _1849 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_570, _571, _572));
    float _1852 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_570, _571, _572));
    float _3995 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _4006 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1857 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.3183098733425140380859375;
    float _1859 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.3183098733425140380859375;
    float _1866 = ((cbLight._m0[_1814].x * _1820) * _1859) + (((cbLight._m0[_1824].x * _1789) * _1834) * _1857);
    float _1867 = ((_1820 * cbLight._m0[_1814].y) * _1859) + (((cbLight._m0[_1824].y * _1790) * _1834) * _1857);
    float _1868 = ((_1820 * cbLight._m0[_1814].z) * _1859) + (((cbLight._m0[_1824].z * _1791) * _1834) * _1857);
    uvec4 _1872 = floatBitsToUint(cbLight._m0[_1797 + 12u]);
    bool _1874 = _1872.x == 0u;
    float _1885;
    float _1887;
    float _1889;
    if (_1874)
    {
        _1885 = _1866;
        _1887 = _1867;
        _1889 = _1868;
    }
    else
    {
        uint _1893 = _1797 + 6u;
        float _1909 = (dot(vec3(cbLight._m0[_1797 + 2u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _1910 = _1909 * _1909;
        float _4017 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1912 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1885 = (((cbLight._m0[_1893].x * 0.3183098733425140380859375) * _1911) * _1912) + _1866;
        _1887 = (((cbLight._m0[_1893].y * 0.3183098733425140380859375) * _1911) * _1912) + _1867;
        _1889 = (((cbLight._m0[_1893].z * 0.3183098733425140380859375) * _1911) * _1912) + _1868;
    }
    bool _1892 = _1872.y == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1892)
    {
        _1930 = _1885;
        _1932 = _1887;
        _1934 = _1889;
    }
    else
    {
        uint _2103 = _1797 + 7u;
        float _2119 = (dot(vec3(cbLight._m0[_1797 + 3u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2120 = _2119 * _2119;
        float _4033 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2121 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2122 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1930 = (((cbLight._m0[_2103].x * 0.3183098733425140380859375) * _2121) * _2122) + _1885;
        _1932 = (((cbLight._m0[_2103].y * 0.3183098733425140380859375) * _2121) * _2122) + _1887;
        _1934 = (((cbLight._m0[_2103].z * 0.3183098733425140380859375) * _2121) * _2122) + _1889;
    }
    uint _1937 = _1797 + 8u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * _573) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1797].x + _650;
    float _1953 = cbLight._m0[_1797].y + _651;
    float _1954 = cbLight._m0[_1797].z + _652;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1797].xyz));
    float _4049 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _1966 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _1967 = dot(vec3(_570, _571, _572), vec3(_1959, _1960, _1961));
    float _4071 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1959, _1960, _1961));
    float _4082 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1951 * _1951;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1987 = exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0);
    float _1988 = 0.959999978542327880859375 - _720;
    float _1990 = 0.959999978542327880859375 - _721;
    float _1991 = 0.959999978542327880859375 - _722;
    float _1998 = 1.0 - _1951;
    float _2009 = (0.5 / (((_1966 * ((_1965 * _1998) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _1998) + _1951) * _1965))) * _1965;
    float _4093 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2011 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    uint _2025 = _1797 + 9u;
    float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _573) * 0.949999988079071044921875);
    float _2037 = _2036 * _2036;
    float _2038 = cbLight._m0[_1838].x + _650;
    float _2039 = cbLight._m0[_1838].y + _651;
    float _2040 = cbLight._m0[_1838].z + _652;
    float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
    float _2045 = _2044 * _2038;
    float _2046 = _2044 * _2039;
    float _2047 = _2044 * _2040;
    float _2048 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1838].xyz));
    float _4104 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _2052 = dot(vec3(_570, _571, _572), vec3(_2045, _2046, _2047));
    float _4115 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2056 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2045, _2046, _2047));
    float _4126 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2060 = _2037 * _2037;
    float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
    float _2071 = exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0);
    float _2078 = 1.0 - _2037;
    float _2088 = (0.5 / (((_1966 * ((_2051 * _2078) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2078) + _2037) * _2051))) * _2051;
    float _4137 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2090 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
    float _2100 = (((((_2071 * _1988) + _723) * cbLight._m0[_2025].x) * _2090) * _1820) + ((((cbLight._m0[_1937].x * _1789) * ((_1987 * _1988) + _723)) * _2011) * _1834);
    float _2101 = (((((_2071 * _1990) + _725) * cbLight._m0[_2025].y) * _2090) * _1820) + ((((cbLight._m0[_1937].y * _1790) * ((_1987 * _1990) + _725)) * _2011) * _1834);
    float _2102 = (((((_2071 * _1991) + _726) * cbLight._m0[_2025].z) * _2090) * _1820) + ((((cbLight._m0[_1937].z * _1791) * ((_1987 * _1991) + _726)) * _2011) * _1834);
    float _2164;
    float _2166;
    float _2168;
    if (_1874)
    {
        _2164 = _2100;
        _2166 = _2101;
        _2168 = _2102;
    }
    else
    {
        uint _2170 = _1797 + 2u;
        uint _2174 = _1797 + 10u;
        float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _573) * 0.949999988079071044921875);
        float _2189 = _2188 * _2188;
        float _2190 = cbLight._m0[_2170].x + _650;
        float _2191 = cbLight._m0[_2170].y + _651;
        float _2192 = cbLight._m0[_2170].z + _652;
        float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
        float _2197 = _2196 * _2190;
        float _2198 = _2196 * _2191;
        float _2199 = _2196 * _2192;
        float _2200 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2170].xyz));
        float _4148 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2203 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2204 = dot(vec3(_570, _571, _572), vec3(_2197, _2198, _2199));
        float _4159 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2207 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2208 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2197, _2198, _2199));
        float _4170 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2212 = _2189 * _2189;
        float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
        float _2223 = exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0);
        float _2230 = 1.0 - _2189;
        float _2240 = (0.5 / (((_1966 * ((_2203 * _2230) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2230) + _2189) * _2203))) * _2203;
        float _4181 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2242 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
        float _2243 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2164 = (((((_2223 * _1988) + _723) * cbLight._m0[_2174].x) * _2242) * _2243) + _2100;
        _2166 = (((((_2223 * _1990) + _725) * cbLight._m0[_2174].y) * _2242) * _2243) + _2101;
        _2168 = (((((_2223 * _1991) + _726) * cbLight._m0[_2174].z) * _2242) * _2243) + _2102;
    }
    float _2278;
    float _2280;
    float _2282;
    if (_1892)
    {
        _2278 = _2164;
        _2280 = _2166;
        _2282 = _2168;
    }
    else
    {
        uint _2289 = _1797 + 3u;
        uint _2293 = _1797 + 11u;
        float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _573) * 0.949999988079071044921875);
        float _2308 = _2307 * _2307;
        float _2309 = cbLight._m0[_2289].x + _650;
        float _2310 = cbLight._m0[_2289].y + _651;
        float _2311 = cbLight._m0[_2289].z + _652;
        float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
        float _2316 = _2315 * _2309;
        float _2317 = _2315 * _2310;
        float _2318 = _2315 * _2311;
        float _2319 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2289].xyz));
        float _4197 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2323 = dot(vec3(_570, _571, _572), vec3(_2316, _2317, _2318));
        float _4208 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2327 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2316, _2317, _2318));
        float _4219 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2331 = _2308 * _2308;
        float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
        float _2342 = exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0);
        float _2349 = 1.0 - _2308;
        float _2359 = (0.5 / (((_1966 * ((_2322 * _2349) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2349) + _2308) * _2322))) * _2322;
        float _4230 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2361 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
        float _2362 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2278 = (((((_2342 * _1988) + _723) * cbLight._m0[_2293].x) * _2361) * _2362) + _2164;
        _2280 = (((((_2342 * _1990) + _725) * cbLight._m0[_2293].y) * _2361) * _2362) + _2166;
        _2282 = (((((_2342 * _1991) + _726) * cbLight._m0[_2293].z) * _2361) * _2362) + _2168;
    }
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    if (_1795.y == 0u)
    {
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2437;
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2437;
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2437;
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.x;
        uint _2464 = uint((float(_2452.y) * floor(float(uint(cbSceneParam._m0[85u].y * _659) / _2453))) + floor(float(uint(cbSceneParam._m0[85u].x * _658) / _2453)));
        float _2474 = (log2(_2440 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2475 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        uint _2478 = uint(isnan(14.0) ? _2475 : (isnan(_2475) ? 14.0 : min(_2475, 14.0)));
        uvec4 _2483 = texelFetch(g_lightClusterGridBuffer, int(((_2478 << 2u) + (_2464 << 6u)) >> 2u));
        uint _2484 = _2483.x;
        uint _2485 = _2452.z;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((((1u << ((_2485 >> 4u) & 15u)) + 4294967295u) & _2484) == 0u) || ((_2485 & 240u) == 0u))
        {
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
        }
        else
        {
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            uint _2736 = 0u;
            uint _2745;
            bool _2746;
            for (;;)
            {
                _2745 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2736 << 2u)) >> 2u)).x;
                _2746 = _2745 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2746)
                {
                    frontier_phi_61_pred = _2730;
                    frontier_phi_61_pred_1 = _2735;
                    frontier_phi_61_pred_2 = _2734;
                    frontier_phi_61_pred_3 = _2733;
                    frontier_phi_61_pred_4 = _2732;
                    frontier_phi_61_pred_5 = _2731;
                }
                else
                {
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    uint _2860;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2745;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    for (;;)
                    {
                        uint _2864 = uint(findLSB(_2860)) + (_2736 << 5u);
                        uint _2861 = (_2860 + 4294967295u) & _2860;
                        uint _2866 = _2864 * 48u;
                        vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2886 = (_2864 * 48u) + 4u;
                        vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 3u)).x));
                        uint _2905 = (_2864 * 48u) + 8u;
                        vec3 _2916 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x));
                        float _2920 = _2880.x - _2438;
                        float _2921 = _2880.y - _2439;
                        float _2922 = _2880.z - _2440;
                        float _2923 = dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922));
                        float _2926 = inversesqrt(_2923);
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2930 = dot(vec3(_680, _683, _686), vec3(_2927, _2928, _2929));
                        float _2935 = 1.0 - (_2923 * _2880.w);
                        float _4256 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2936 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2937 = sqrt(_2923) * _2899.w;
                        float _2940 = 1.39999997615814208984375 / (_2937 + 1.39999997615814208984375);
                        float _2941 = _2940 * _2940;
                        float _2944 = ((1.0 - _2941) * _2930) + _2941;
                        float _2947 = _2937 * _2937;
                        float _2951 = ((isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))) * _2936) / ((_2947 * 0.699999988079071044921875) + 1.0);
                        float _2955 = (-0.0) - _2438;
                        float _2956 = (-0.0) - _2439;
                        float _2957 = (-0.0) - _2440;
                        float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                        float _2962 = _2961 * _2955;
                        float _2963 = _2961 * _2956;
                        float _2964 = _2961 * _2957;
                        float _2972 = exp2(log2(1.0 / ((_2947 * 3.5) + 5.0)) * 0.25);
                        float _2973 = 1.0 - _755;
                        float _2980 = sqrt(1.0 - ((1.0 - (_2973 * _2973)) * (1.0 - (_2972 * _2972))));
                        float _2981 = _2980 * _2980;
                        float _2982 = _2981 * _2981;
                        float _2983 = _2962 + _2927;
                        float _2984 = _2963 + _2928;
                        float _2985 = _2964 + _2929;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2993 = dot(vec3(_680, _683, _686), vec3(_2962, _2963, _2964));
                        float _4272 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _2997 = dot(vec3(_680, _683, _686), vec3(_2989 * _2983, _2989 * _2984, _2989 * _2985));
                        float _4283 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _3004 = ((_3000 * _3000) * (_2982 + (-1.0))) + 1.0;
                        float _3005 = _2940 * _2981;
                        float _3006 = _3005 * _3005;
                        float _3009 = ((1.0 - _3006) * _2930) + _3006;
                        float _4294 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _3011 = 1.0 - _2981;
                        float _3021 = (0.5 / (((_3010 * ((_2996 * _3011) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_3010 * _3011) + _2981) * _2996))) * _3010;
                        float _4305 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3031 = (((_2982 * 3.1415927410125732421875) * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) / ((_3004 * _3004) * ((_2947 * 2.1991131305694580078125) + 3.141590118408203125))) * _2936;
                        _2789 = (_2951 * _2899.x) + _2857;
                        _2790 = (_2951 * _2899.y) + _2858;
                        _2791 = (_2951 * _2899.z) + _2859;
                        _2786 = (_3031 * _2916.x) + _2854;
                        _2787 = (_3031 * _2916.y) + _2855;
                        _2788 = (_3031 * _2916.z) + _2856;
                        if (_2861 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2861;
                        }
                    }
                    frontier_phi_61_pred = _2786;
                    frontier_phi_61_pred_1 = _2791;
                    frontier_phi_61_pred_2 = _2790;
                    frontier_phi_61_pred_3 = _2789;
                    frontier_phi_61_pred_4 = _2788;
                    frontier_phi_61_pred_5 = _2787;
                }
                _2586 = frontier_phi_61_pred;
                _2596 = frontier_phi_61_pred_1;
                _2594 = frontier_phi_61_pred_2;
                _2592 = frontier_phi_61_pred_3;
                _2590 = frontier_phi_61_pred_4;
                _2588 = frontier_phi_61_pred_5;
                uint _2737 = _2736 + 1u;
                if (_2737 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2730 = _2586;
                    _2731 = _2588;
                    _2732 = _2590;
                    _2733 = _2592;
                    _2734 = _2594;
                    _2735 = _2596;
                    _2736 = _2737;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
        }
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.z;
        uint _2602 = (_2600 >> 8u) & 15u;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        if (((4294967295u << _2602) & _2484) == 0u)
        {
            _2698 = _2585;
            _2700 = _2587;
            _2702 = _2589;
            _2704 = _2591;
            _2706 = _2593;
            _2708 = _2595;
        }
        else
        {
            float _2723 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
            float _2724 = _2723 * _2438;
            float _2725 = _2723 * _2439;
            float _2726 = _2723 * _2440;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2602 < ((_2600 >> 12u) & 15u))
            {
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2837 = _2585;
                float _2838 = _2587;
                float _2839 = _2589;
                float _2840 = _2591;
                float _2841 = _2593;
                float _2842 = _2595;
                uint _2843 = _2602;
                uint _2852;
                bool _2853;
                for (;;)
                {
                    _2852 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2843 << 2u)) >> 2u)).x;
                    _2853 = _2852 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2853)
                    {
                        frontier_phi_67_pred = _2840;
                        frontier_phi_67_pred_1 = _2841;
                        frontier_phi_67_pred_2 = _2842;
                        frontier_phi_67_pred_3 = _2839;
                        frontier_phi_67_pred_4 = _2838;
                        frontier_phi_67_pred_5 = _2837;
                    }
                    else
                    {
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3049 = _2837;
                        float _3050 = _2838;
                        float _3051 = _2839;
                        float _3052 = _2840;
                        float _3053 = _2841;
                        float _3054 = _2842;
                        uint _3055 = _2852;
                        uint _3056;
                        vec4 _3081;
                        float _3082;
                        vec4 _3097;
                        vec3 _3109;
                        vec4 _3125;
                        vec4 _3140;
                        float _3186;
                        bool _3187;
                        for (;;)
                        {
                            uint _3066 = ((_2843 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3055));
                            _3056 = (_3055 + 4294967295u) & _3055;
                            uint _3068 = _3066 * 40u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            _3082 = _3081.w;
                            uint _3084 = (_3066 * 40u) + 4u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3099 = (_3066 * 40u) + 8u;
                            _3109 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x));
                            uint _3112 = (_3066 * 40u) + 16u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3127 = (_3066 * 40u) + 20u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3142 = (_3066 * 40u) + 24u;
                            vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3161 = (_3066 * 40u) + 28u;
                            vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            _3186 = fma(_2440, _3174.z, fma(_2439, _3174.y, _3174.x * _2438)) + _3174.w;
                            _3187 = !((fma(_2440, _3155.z, fma(_2439, _3155.y, _3155.x * _2438)) + _3155.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3187)
                            {
                                float _3214 = _3081.x - _2438;
                                float _3215 = _3081.y - _2439;
                                float _3216 = _3081.z - _2440;
                                float _3217 = dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216));
                                float _3220 = inversesqrt(_3217);
                                float _3221 = _3220 * _3214;
                                float _3222 = _3220 * _3215;
                                float _3223 = _3220 * _3216;
                                float _3227 = 1.0 - (_3217 / (_3082 * _3082));
                                float _4316 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3232 = sqrt(_3217) * _3097.w;
                                float _3234 = 1.39999997615814208984375 / (_3232 + 1.39999997615814208984375);
                                float _3235 = _3234 * _3234;
                                float _3238 = ((1.0 - _3235) * dot(vec3(_3221, _3222, _3223), vec3(_680, _683, _686))) + _3235;
                                float _3241 = _3232 * _3232;
                                float _3245 = (fma(_2440, _3125.z, fma(_2439, _3125.y, _3125.x * _2438)) + _3125.w) / _3186;
                                float _3246 = (fma(_2440, _3140.z, fma(_2439, _3140.y, _3140.x * _2438)) + _3140.w) / _3186;
                                float _3250 = 1.0 - dot(vec2(_3245, _3246), vec2(_3245, _3246));
                                float _4332 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3252 = _3251 * (((isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))) * _3228) / ((_3241 * 0.699999988079071044921875) + 1.0));
                                float _3264 = exp2(log2(1.0 / ((_3241 * 3.5) + 5.0)) * 0.25);
                                float _3265 = 1.0 - _755;
                                float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                                float _3273 = _3272 * _3272;
                                float _3274 = _3273 * _3273;
                                float _3275 = _3221 - _2724;
                                float _3276 = _3222 - _2725;
                                float _3277 = _3223 - _2726;
                                float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                                float _3285 = dot(vec3(_680, _683, _686), vec3((-0.0) - _2724, (-0.0) - _2725, (-0.0) - _2726));
                                float _4343 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3288 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3289 = dot(vec3(_680, _683, _686), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                                float _4354 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3292 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                                float _3297 = _3234 * _3273;
                                float _3298 = _3297 * _3297;
                                float _3304 = ((1.0 - _3298) * dot(vec3(_680, _683, _686), vec3(_3221, _3222, _3223))) + _3298;
                                float _4365 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3306 = 1.0 - _3273;
                                float _3316 = (0.5 / (((_3305 * ((_3288 * _3306) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3305 * _3306) + _3273) * _3288))) * _3305;
                                float _4376 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3326 = (_3251 * _3228) * (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) / ((_3296 * _3296) * ((_3241 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3326 * _3109.x;
                                frontier_phi_73_pred_1 = _3326 * _3109.y;
                                frontier_phi_73_pred_2 = _3252 * _3097.z;
                                frontier_phi_73_pred_3 = _3252 * _3097.y;
                                frontier_phi_73_pred_4 = _3252 * _3097.x;
                                frontier_phi_73_pred_5 = _3326 * _3109.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3330 = frontier_phi_73_pred;
                            _3331 = frontier_phi_73_pred_1;
                            _3335 = frontier_phi_73_pred_2;
                            _3334 = frontier_phi_73_pred_3;
                            _3333 = frontier_phi_73_pred_4;
                            _3332 = frontier_phi_73_pred_5;
                            _3039 = _3333 + _3052;
                            _3040 = _3334 + _3053;
                            _3041 = _3335 + _3054;
                            _3036 = _3330 + _3049;
                            _3037 = _3331 + _3050;
                            _3038 = _3332 + _3051;
                            if (_3056 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3056;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3039;
                        frontier_phi_67_pred_1 = _3040;
                        frontier_phi_67_pred_2 = _3041;
                        frontier_phi_67_pred_3 = _3038;
                        frontier_phi_67_pred_4 = _3037;
                        frontier_phi_67_pred_5 = _3036;
                    }
                    _2705 = frontier_phi_67_pred;
                    _2707 = frontier_phi_67_pred_1;
                    _2709 = frontier_phi_67_pred_2;
                    _2703 = frontier_phi_67_pred_3;
                    _2701 = frontier_phi_67_pred_4;
                    _2699 = frontier_phi_67_pred_5;
                    uint _2844 = _2843 + 1u;
                    if (_2844 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2837 = _2699;
                        _2838 = _2701;
                        _2839 = _2703;
                        _2840 = _2705;
                        _2841 = _2707;
                        _2842 = _2709;
                        _2843 = _2844;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2707;
                frontier_phi_55_56_ladder_1 = _2709;
                frontier_phi_55_56_ladder_2 = _2705;
                frontier_phi_55_56_ladder_3 = _2703;
                frontier_phi_55_56_ladder_4 = _2701;
                frontier_phi_55_56_ladder_5 = _2699;
            }
            else
            {
                frontier_phi_55_56_ladder = _2593;
                frontier_phi_55_56_ladder_1 = _2595;
                frontier_phi_55_56_ladder_2 = _2591;
                frontier_phi_55_56_ladder_3 = _2589;
                frontier_phi_55_56_ladder_4 = _2587;
                frontier_phi_55_56_ladder_5 = _2585;
            }
            _2698 = frontier_phi_55_56_ladder_5;
            _2700 = frontier_phi_55_56_ladder_4;
            _2702 = frontier_phi_55_56_ladder_3;
            _2704 = frontier_phi_55_56_ladder_2;
            _2706 = frontier_phi_55_56_ladder;
            _2708 = frontier_phi_55_56_ladder_1;
        }
        float _2713 = isnan(1.0) ? _739 : (isnan(_739) ? 1.0 : min(_739, 1.0));
        _2497 = (_2713 * _2704) + _1930;
        _2499 = (_2713 * _2706) + _1932;
        _2501 = (_2713 * _2708) + _1934;
        _2503 = ((_2698 * _723) * _2713) + _2278;
        _2505 = ((_2700 * _725) * _2713) + _2280;
        _2507 = ((_2702 * _726) * _2713) + _2282;
    }
    else
    {
        _2497 = _1930;
        _2499 = _1932;
        _2501 = _1934;
        _2503 = _2278;
        _2505 = _2280;
        _2507 = _2282;
    }
    float _4392 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4403 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4414 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    uint _2527 = _239 + 6u;
    float _2535 = _658 / cbSceneParam._m0[86u].x;
    float _2536 = _659 / cbSceneParam._m0[86u].y;
    vec4 _2550 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, (log2((isnan(cbSceneParam._m0[77u].w) ? _592 : (isnan(_592) ? cbSceneParam._m0[77u].w : min(_592, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2552 = _2550.x;
    float _2553 = _2550.y;
    float _2554 = _2550.z;
    float _2555 = _2550.w;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_592 > cbSceneParam._m0[78u].w)
    {
        float _2610 = isnan(_592) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _592 : min(cbSceneParam._m0[80u].w, _592));
        float _2611 = _2610 / _592;
        float _2622 = _2611 * _643;
        float _2623 = _644 * _2611;
        float _2624 = (-0.0) - _2623;
        float _2626 = _2611 * _645;
        float _2628 = (cbSceneParam._m0[77u].w * _2624) / _2610;
        float _2629 = _2628 + cbSceneParam._m0[79u].w;
        float _2630 = cbSceneParam._m0[79u].w - _2623;
        float _2636 = sqrt(((_2622 * _2622) + (_2623 * _2623)) + (_2626 * _2626));
        float _2639 = (1.0 - (cbSceneParam._m0[77u].w / _2610)) * _2636;
        float _2644 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2646 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2799;
        if (abs((_2624 - _2628) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2799 = ((((_2629 > 0.0) ? exp2(_2644 * _2629) : (2.0 - exp2(_2646 * _2629))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2639;
        }
        else
        {
            float _2759 = 1.0 / cbSceneParam._m0[80u].x;
            float _2760 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : max(_2629, _2630));
            float _2761 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : min(_2629, _2630));
            float _2770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : min(_2760, 0.0));
            float _2771 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : min(_2761, 0.0));
            _2799 = ((abs(_2636 / _2624) * cbSceneParam._m0[80u].y) * ((((_2770 - _2771) * 2.0) - ((exp2(_2644 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0)))) - exp2(_2644 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0))))) * _2759)) - ((exp2(_2646 * _2770) - exp2(_2646 * _2771)) * _2759))) + (_2639 * cbSceneParam._m0[80u].z);
        }
        vec4 _2801 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, 1.0), 0.0);
        float _2810 = exp2((_2799 * (-1.44269502162933349609375)) * (1.0 - _2801.w));
        float _2811 = log2(_2810);
        float _2827 = log2(_2555);
        _2648 = (exp2(_2827 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].x)) * _2801.x) / cbSceneParam._m0[78u].x)) + _2552;
        _2650 = (exp2(_2827 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].y)) * _2801.y) / cbSceneParam._m0[78u].y)) + _2553;
        _2652 = (exp2(_2827 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].z)) * _2801.z) / cbSceneParam._m0[78u].z)) + _2554;
        _2654 = _2810 * _2555;
    }
    else
    {
        _2648 = _2552;
        _2650 = _2553;
        _2652 = _2554;
        _2654 = _2555;
    }
    float _2666 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2667 = _2666 == 3.0;
    float _2668 = log2(_2654);
    float _2675 = exp2(_2668 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2497 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _739))) + ((_2503 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1545)) * cbPerFrame._m0[3u].x));
    float _2676 = exp2(_2668 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2499 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _739))) + ((_2505 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1545)) * cbPerFrame._m0[3u].x));
    float _2677 = exp2(_2668 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2501 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _739))) + ((_2507 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1545)) * cbPerFrame._m0[3u].x));
    float _2686 = (_2666 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2686 * (_2667 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2648)));
    SV_Target.y = _2686 * (_2667 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2650)));
    SV_Target.z = _2686 * (_2667 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.w = cbInstanceData._m0[_2527].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2527].w;
}


