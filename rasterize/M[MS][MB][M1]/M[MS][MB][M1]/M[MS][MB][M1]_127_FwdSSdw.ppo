#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1273;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3622 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3633 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3644 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].y) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3655 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _428 = (_421 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _429 = (_421 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _430 = (_421 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _434 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _428;
    float _437 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _429;
    float _440 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _430;
    float _447 = ((_428 - _434) * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) + _434;
    float _448 = ((_429 - _437) * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) + _437;
    float _449 = ((_430 - _440) * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) + _440;
    vec4 _468 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _532 = _530.x;
    float _533 = _530.y;
    float _534 = _530.z;
    float _543 = ((_513.z - _534) * _421) + _534;
    float _546 = ((((_513.x - _532) * _421) + _532) * 2.0) + (-1.0);
    float _547 = ((((_513.y - _533) * _421) + _533) * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3666 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))));
    vec4 _566 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _586 = _584.x;
    float _587 = 1.0 - _586;
    float _600 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_586 - _587) * cbMtdParam._m0[24u].z) + _587) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3677 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _608 = (_601 * ((_468.x * cbMtdParam._m0[18u].x) - _447)) + _447;
    float _609 = (_601 * ((_468.y * cbMtdParam._m0[18u].y) - _448)) + _448;
    float _610 = (_601 * ((_468.z * cbMtdParam._m0[18u].z) - _449)) + _449;
    vec4 _622 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _636 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _638 = _636.x;
    float _656 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _638) * _421) + _638;
    float _660 = ((_622.x - _656) * cbMtdParam._m0[19u].z) + _656;
    float _662 = _660 - (_660 * _601);
    float _667 = (((_488.z - _543) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _543;
    vec4 _680 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _687 = (_680.x * 2.0) + (-1.0);
    float _688 = (_680.y * 2.0) + (-1.0);
    float _689 = dot(vec2(_687, _688), vec2(_687, _688));
    float _3688 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _697 = (_601 * (_680.z - _667)) + _667;
    float _702 = _546 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_488.x * 2.0) + (-1.0)));
    float _703 = _547 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_488.y * 2.0) + (-1.0)));
    float _715 = (((_687 - _702) + (cbMtdParam._m0[21u].x * _702)) * _601) + _702;
    float _716 = (((_688 - _703) + (cbMtdParam._m0[21u].x * _703)) * _601) + _703;
    float _717 = (_601 * (sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) - _553)) + _553;
    float _719 = cbMtdParam._m0[22u].x + _566.w;
    float _722 = fma(_717, _236 * NORMAL.x, fma(_716, _243 * TANGENT.x, (_229 * _221) * _715));
    float _725 = fma(_717, _236 * NORMAL.y, fma(_716, _243 * TANGENT.y, (_229 * _222) * _715));
    float _728 = fma(_717, _236 * NORMAL.z, fma(_716, _243 * TANGENT.z, (_229 * _223) * _715));
    float _732 = inversesqrt(dot(vec3(_722, _725, _728), vec3(_722, _725, _728)));
    float _733 = _732 * _722;
    float _734 = _732 * _725;
    float _735 = _732 * _728;
    float _3699 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _736 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _3721 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3732 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _3743 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3754 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _741 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _755 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _806 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _796);
    float _807 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _796);
    float _808 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _796);
    float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
    float _813 = _806 * _812;
    float _814 = _807 * _812;
    float _815 = _808 * _812;
    float _821 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _822 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _840 = fma(_735, cbSceneParam._m0[5u].z, fma(_734, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _733));
    float _843 = fma(_735, cbSceneParam._m0[6u].z, fma(_734, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _733));
    float _846 = fma(_735, cbSceneParam._m0[7u].z, fma(_734, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _733));
    uint _860 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _866 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_860].x;
    float _867 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_860].y;
    float _868 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_860].z;
    float _3765 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _872 = 1.0 - _741;
    float _873 = _869 * _872;
    float _874 = _870 * _872;
    float _875 = _871 * _872;
    float _880 = (_869 + (-0.039999999105930328369140625)) * _741;
    float _881 = (_870 + (-0.039999999105930328369140625)) * _741;
    float _882 = (_871 + (-0.039999999105930328369140625)) * _741;
    float _883 = _880 + 0.039999999105930328369140625;
    float _885 = _881 + 0.039999999105930328369140625;
    float _886 = _882 + 0.039999999105930328369140625;
    vec4 _895 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _821, cbSceneParam._m0[86u].y * _822));
    float _899 = ((isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * TEXCOORD_5.w) * _895.x;
    float _900 = dot(vec3(_733, _734, _735), vec3(_813, _814, _815));
    float _903 = _900 * 2.0;
    float _907 = (_903 * _733) - _813;
    float _908 = (_903 * _734) - _814;
    float _909 = (_903 * _735) - _815;
    float _913 = abs(dot(vec3(_813, _814, _815), vec3(_733, _734, _735)));
    float _3798 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _915 = sqrt(_736);
    float _928 = exp2((_915 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_915 * 3.0));
    float _934 = (1.0 - _928) * ((_915 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _935 = _928 * _915;
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1272;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _997 = fma(_971, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963));
        float _1001 = fma(_971, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963));
        float _1005 = fma(_971, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963));
        float _1030 = _963 + _733;
        float _1031 = _967 + _734;
        float _1032 = _971 + _735;
        float _1042 = fma(_1032, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030)) - _997;
        float _1043 = fma(_1032, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030)) - _1001;
        float _1044 = fma(_1032, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030)) - _1005;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_997 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1001 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[34u].z) + ((((((_1005 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1100 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1066.x + (-0.5));
        float _1102 = _1100 * (_1066.y + (-0.5));
        float _1103 = _1100 * (_1066.z + (-0.5));
        float _1110 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1073.x + (-0.5));
        float _1112 = _1110 * (_1073.y + (-0.5));
        float _1113 = _1110 * (_1073.z + (-0.5));
        float _1120 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1080.x + (-0.5));
        float _1122 = _1120 * (_1080.y + (-0.5));
        float _1123 = _1120 * (_1080.z + (-0.5));
        float _1130 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1087.x + (-0.5));
        float _1132 = _1130 * (_1087.y + (-0.5));
        float _1133 = _1130 * (_1087.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1154 = (dot(vec3(_733, _734, _735), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1164 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3846 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1166 + 1.0))) + _1171) * _1134;
        float _1181 = _1102 * 0.5;
        float _1182 = _1112 * 0.5;
        float _1183 = _1122 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_733, _734, _735), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3879 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1208 + 1.0))) + _1213) * _1135;
        float _1223 = _1103 * 0.5;
        float _1224 = _1113 * 0.5;
        float _1225 = _1123 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_733, _734, _735), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3912 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1250 + 1.0))) + _1255) * _1136;
        _1272 = _1103;
        _1274 = _1102;
        _1275 = _1101;
        _1276 = _1113;
        _1277 = _1112;
        _1278 = _1111;
        _1279 = _1123;
        _1280 = _1122;
        _1281 = _1121;
        _1282 = _1136;
        _1283 = _1135;
        _1284 = _1134;
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
    }
    else
    {
        _1272 = _1273;
        _1274 = _1273;
        _1275 = _1273;
        _1276 = _1273;
        _1277 = _1273;
        _1278 = _1273;
        _1279 = _1273;
        _1280 = _1273;
        _1281 = _1273;
        _1282 = _1273;
        _1283 = _1273;
        _1284 = _1273;
        _1285 = 0.0;
        _1286 = 0.0;
        _1287 = 0.0;
    }
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1312 = fma(_971, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963));
        float _1316 = fma(_971, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963));
        float _1320 = fma(_971, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963));
        float _1343 = _963 + _733;
        float _1344 = _967 + _734;
        float _1345 = _971 + _735;
        float _1355 = fma(_1345, cbModelParam._m0[30u].z, fma(_1344, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1343)) - _1312;
        float _1356 = fma(_1345, cbModelParam._m0[31u].z, fma(_1344, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1343)) - _1316;
        float _1357 = fma(_1345, cbModelParam._m0[32u].z, fma(_1344, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1343)) - _1320;
        float _1361 = inversesqrt(dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357)));
        float _1374 = ((_1361 * _1355) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1312 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1361 * _1356) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1316 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1361 * _1357) / cbModelParam._m0[35u].z) + ((((((_1320 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        float _1411 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1378.x + (-0.5));
        float _1413 = _1411 * (_1378.y + (-0.5));
        float _1414 = _1411 * (_1378.z + (-0.5));
        float _1421 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1385.x + (-0.5));
        float _1423 = _1421 * (_1385.y + (-0.5));
        float _1424 = _1421 * (_1385.z + (-0.5));
        float _1431 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1392.x + (-0.5));
        float _1433 = _1431 * (_1392.y + (-0.5));
        float _1434 = _1431 * (_1392.z + (-0.5));
        float _1441 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1399.x + (-0.5));
        float _1443 = _1441 * (_1399.y + (-0.5));
        float _1444 = _1441 * (_1399.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_733, _734, _735), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _3975 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1475 + 1.0))) + _1480) * _1445;
        float _1490 = _1413 * 0.5;
        float _1491 = _1423 * 0.5;
        float _1492 = _1433 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_733, _734, _735), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4008 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1517 + 1.0))) + _1522) * _1446;
        float _1532 = _1414 * 0.5;
        float _1533 = _1424 * 0.5;
        float _1534 = _1434 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_733, _734, _735), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4041 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1559 + 1.0))) + _1564) * _1447;
        _1581 = _1414;
        _1582 = _1413;
        _1583 = _1412;
        _1584 = _1424;
        _1585 = _1423;
        _1586 = _1422;
        _1587 = _1434;
        _1588 = _1433;
        _1589 = _1432;
        _1590 = _1447;
        _1591 = _1446;
        _1592 = _1445;
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1273;
        _1582 = _1273;
        _1583 = _1273;
        _1584 = _1273;
        _1585 = _1273;
        _1586 = _1273;
        _1587 = _1273;
        _1588 = _1273;
        _1589 = _1273;
        _1590 = _1273;
        _1591 = _1273;
        _1592 = _1273;
        _1593 = 0.0;
        _1594 = 0.0;
        _1595 = 0.0;
    }
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1285)) + _1285;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1286)) + _1286;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1287)) + _1287;
    float _1628 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1605 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1605 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1605));
    float _1649 = _907 * 0.5;
    float _1650 = _908 * 0.5;
    float _1651 = _909 * 0.5;
    float _1652 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1655 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1658 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1692;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1665 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1272, _1276, _1279, _1282));
        float _1669 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1673 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1680 = dot(vec4(cbModelParam._m0[39u]), vec4(_1649, _1650, _1651, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1703;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1694 = dot(vec4(cbModelParam._m0[40u]), vec4(_1649, _1650, _1651, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1707 = (_1703 * cbModelParam._m0[1u].x) + (_1692 * (1.0 - cbModelParam._m0[1u].x));
    float _1717 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _736);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1717 : min(cbModelParam._m0[25u].z, _1717));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1765 = fma(_971, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963)) + cbModelParam._m0[13u].w;
        float _1769 = fma(_971, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963)) + cbModelParam._m0[14u].w;
        float _1773 = fma(_971, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963)) + cbModelParam._m0[15u].w;
        float _1776 = fma(_909, cbModelParam._m0[13u].z, fma(_908, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907));
        float _1779 = fma(_909, cbModelParam._m0[14u].z, fma(_908, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907));
        float _1782 = fma(_909, cbModelParam._m0[15u].z, fma(_908, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907));
        float _1810;
        if (_1776 > 0.0)
        {
            _1810 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1810 = frontier_phi_14_12_ladder;
        }
        float _2033;
        if (_1779 > 0.0)
        {
            _2033 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2033 = frontier_phi_23_19_ladder;
        }
        float _2290;
        if (_1782 > 0.0)
        {
            _2290 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2290 = frontier_phi_35_30_ladder;
        }
        float _2292 = isnan(_2033) ? _1810 : (isnan(_1810) ? _2033 : min(_1810, _2033));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1776) + _1765;
        float _2298 = (_2293 * _1779) + _1769;
        float _2299 = (_2293 * _1782) + _1773;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2300;
        float _2304 = _2300 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 > _2304) || ((_2298 < _2302) || ((_2297 < _2302) || (_2297 > _2304))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2299, cbModelParam._m0[9u].z, fma(_2298, cbModelParam._m0[9u].y, _2297 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2299, cbModelParam._m0[10u].z, fma(_2298, cbModelParam._m0[10u].y, _2297 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2299, cbModelParam._m0[11u].z, fma(_2298, cbModelParam._m0[11u].y, _2297 * cbModelParam._m0[11u].x))), _1718);
            frontier_phi_13_35_ladder = _2427.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2427.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2427.x * cbModelParam._m0[1u].y;
        }
        _1798 = frontier_phi_13_35_ladder_2;
        _1800 = frontier_phi_13_35_ladder_1;
        _1802 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_907, _908, _909), _1718);
        _1798 = _1786.x * cbModelParam._m0[1u].y;
        _1800 = _1786.y * cbModelParam._m0[1u].y;
        _1802 = _1786.z * cbModelParam._m0[1u].y;
    }
    float _1806 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _736);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1806 : min(cbModelParam._m0[25u].w, _1806));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1860 = fma(_971, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963)) + cbModelParam._m0[21u].w;
        float _1864 = fma(_971, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963)) + cbModelParam._m0[22u].w;
        float _1868 = fma(_971, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963)) + cbModelParam._m0[23u].w;
        float _1871 = fma(_909, cbModelParam._m0[21u].z, fma(_908, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907));
        float _1874 = fma(_909, cbModelParam._m0[22u].z, fma(_908, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907));
        float _1877 = fma(_909, cbModelParam._m0[23u].z, fma(_908, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907));
        float _2038;
        if (_1871 > 0.0)
        {
            _2038 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2038 = frontier_phi_25_21_ladder;
        }
        float _2317;
        if (_1874 > 0.0)
        {
            _2317 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2317 = frontier_phi_37_32_ladder;
        }
        float _2530;
        if (_1877 > 0.0)
        {
            _2530 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2530 = frontier_phi_46_43_ladder;
        }
        float _2532 = isnan(_2317) ? _2038 : (isnan(_2038) ? _2317 : min(_2038, _2317));
        float _2533 = isnan(_2530) ? _2532 : (isnan(_2532) ? _2530 : min(_2532, _2530));
        float _2537 = (_2533 * _1871) + _1860;
        float _2538 = (_2533 * _1874) + _1864;
        float _2539 = (_2533 * _1877) + _1868;
        float _2540 = _2533 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2540;
        float _2543 = _2540 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2539 > _2543) || ((_2539 < _2541) || ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 < _2541) || (_2537 > _2543))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2539, cbModelParam._m0[17u].z, fma(_2538, cbModelParam._m0[17u].y, _2537 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2539, cbModelParam._m0[18u].z, fma(_2538, cbModelParam._m0[18u].y, _2537 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2539, cbModelParam._m0[19u].z, fma(_2538, cbModelParam._m0[19u].y, _2537 * cbModelParam._m0[19u].x))), _1807);
            frontier_phi_22_46_ladder = _2738.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2738.x * cbModelParam._m0[1u].z;
        }
        _1896 = frontier_phi_22_46_ladder_2;
        _1898 = frontier_phi_22_46_ladder_1;
        _1900 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_907, _908, _909), _1807);
        _1896 = _1880.x * cbModelParam._m0[1u].z;
        _1898 = _1880.y * cbModelParam._m0[1u].z;
        _1900 = _1880.z * cbModelParam._m0[1u].z;
    }
    float _1913 = (((_934 * _883) + _935) * _899) * ((cbModelParam._m0[1u].w * (_1896 - _1798)) + _1798);
    float _1915 = (((_934 * _885) + _935) * _899) * ((cbModelParam._m0[1u].w * (_1898 - _1800)) + _1800);
    float _1917 = (((_934 * _886) + _935) * _899) * ((cbModelParam._m0[1u].w * (_1900 - _1802)) + _1802);
    float _1920 = fma(_1917, cbSceneParam._m0[89u].z, fma(_1915, cbSceneParam._m0[89u].y, _1913 * cbSceneParam._m0[89u].x));
    float _1923 = fma(_1917, cbSceneParam._m0[90u].z, fma(_1915, cbSceneParam._m0[90u].y, _1913 * cbSceneParam._m0[90u].x));
    float _1926 = fma(_1917, cbSceneParam._m0[91u].z, fma(_1915, cbSceneParam._m0[91u].y, _1913 * cbSceneParam._m0[91u].x));
    vec4 _1934 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_821, _822));
    float _1936 = _1934.w;
    float _1948 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1936);
    float _1949 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1936);
    float _1950 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1936);
    uvec4 _1954 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1956 = _1954.x * 14u;
    uint _1957 = _1956 + 13u;
    float _1964 = _899 + (-1.0);
    float _1969 = (cbLight._m0[_1957].x * _1964) + 1.0;
    float _1970 = (cbLight._m0[_1957].y * _1964) + 1.0;
    float _1971 = (cbLight._m0[_1957].z * _1964) + 1.0;
    float _1972 = (cbLight._m0[_1957].w * _1964) + 1.0;
    uint _1973 = _1956 + 5u;
    float _1979 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    uint _1983 = _1956 + 4u;
    float _1992 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1996 = _1956 | 1u;
    float _2007 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_733, _734, _735));
    float _2010 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_733, _734, _735));
    float _4177 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _4188 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2015 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * 0.3183098733425140380859375;
    float _2017 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.3183098733425140380859375;
    float _2024 = ((cbLight._m0[_1973].x * _1979) * _2017) + (((cbLight._m0[_1983].x * _1948) * _1992) * _2015);
    float _2025 = ((_1979 * cbLight._m0[_1973].y) * _2017) + (((cbLight._m0[_1983].y * _1949) * _1992) * _2015);
    float _2026 = ((_1979 * cbLight._m0[_1973].z) * _2017) + (((cbLight._m0[_1983].z * _1950) * _1992) * _2015);
    uvec4 _2030 = floatBitsToUint(cbLight._m0[_1956 + 12u]);
    bool _2032 = _2030.x == 0u;
    float _2043;
    float _2045;
    float _2047;
    if (_2032)
    {
        _2043 = _2024;
        _2045 = _2025;
        _2047 = _2026;
    }
    else
    {
        uint _2051 = _1956 + 6u;
        float _2067 = (dot(vec3(cbLight._m0[_1956 + 2u].xyz), vec3(_733, _734, _735)) * 0.5) + 0.5;
        float _2068 = _2067 * _2067;
        float _4199 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2069 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2070 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2043 = (((cbLight._m0[_2051].x * 0.3183098733425140380859375) * _2069) * _2070) + _2024;
        _2045 = (((cbLight._m0[_2051].y * 0.3183098733425140380859375) * _2069) * _2070) + _2025;
        _2047 = (((cbLight._m0[_2051].z * 0.3183098733425140380859375) * _2069) * _2070) + _2026;
    }
    bool _2050 = _2030.y == 0u;
    float _2088;
    float _2090;
    float _2092;
    if (_2050)
    {
        _2088 = _2043;
        _2090 = _2045;
        _2092 = _2047;
    }
    else
    {
        uint _2261 = _1956 + 7u;
        float _2277 = (dot(vec3(cbLight._m0[_1956 + 3u].xyz), vec3(_733, _734, _735)) * 0.5) + 0.5;
        float _2278 = _2277 * _2277;
        float _4215 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2279 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2280 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2088 = (((cbLight._m0[_2261].x * 0.3183098733425140380859375) * _2279) * _2280) + _2043;
        _2090 = (((cbLight._m0[_2261].y * 0.3183098733425140380859375) * _2279) * _2280) + _2045;
        _2092 = (((cbLight._m0[_2261].z * 0.3183098733425140380859375) * _2279) * _2280) + _2047;
    }
    uint _2095 = _1956 + 8u;
    float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _736) * 0.949999988079071044921875);
    float _2109 = _2108 * _2108;
    float _2110 = cbLight._m0[_1956].x + _813;
    float _2111 = cbLight._m0[_1956].y + _814;
    float _2112 = cbLight._m0[_1956].z + _815;
    float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
    float _2117 = _2116 * _2110;
    float _2118 = _2116 * _2111;
    float _2119 = _2116 * _2112;
    float _2120 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_1956].xyz));
    float _4231 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _4242 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _2124 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2125 = dot(vec3(_733, _734, _735), vec3(_2117, _2118, _2119));
    float _4253 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2117, _2118, _2119));
    float _4264 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2133 = _2109 * _2109;
    float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
    float _2145 = exp2(log2(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * 5.0);
    float _2146 = 0.959999978542327880859375 - _880;
    float _2148 = 0.959999978542327880859375 - _881;
    float _2149 = 0.959999978542327880859375 - _882;
    float _2156 = 1.0 - _2109;
    float _2167 = (0.5 / (((_2124 * ((_2123 * _2156) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2156) + _2109) * _2123))) * _2123;
    float _4275 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2169 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
    uint _2183 = _1956 + 9u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _736) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_1996].x + _813;
    float _2197 = cbLight._m0[_1996].y + _814;
    float _2198 = cbLight._m0[_1996].z + _815;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_1996].xyz));
    float _4286 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2210 = dot(vec3(_733, _734, _735), vec3(_2203, _2204, _2205));
    float _4297 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2203, _2204, _2205));
    float _4308 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2195 * _2195;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2229 = exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0);
    float _2236 = 1.0 - _2195;
    float _2246 = (0.5 / (((_2124 * ((_2209 * _2236) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2236) + _2195) * _2209))) * _2209;
    float _4319 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2248 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    float _2258 = (((((_2229 * _2146) + _883) * cbLight._m0[_2183].x) * _2248) * _1979) + ((((cbLight._m0[_2095].x * _1948) * ((_2145 * _2146) + _883)) * _2169) * _1992);
    float _2259 = (((((_2229 * _2148) + _885) * cbLight._m0[_2183].y) * _2248) * _1979) + ((((cbLight._m0[_2095].y * _1949) * ((_2145 * _2148) + _885)) * _2169) * _1992);
    float _2260 = (((((_2229 * _2149) + _886) * cbLight._m0[_2183].z) * _2248) * _1979) + ((((cbLight._m0[_2095].z * _1950) * ((_2145 * _2149) + _886)) * _2169) * _1992);
    float _2322;
    float _2324;
    float _2326;
    if (_2032)
    {
        _2322 = _2258;
        _2324 = _2259;
        _2326 = _2260;
    }
    else
    {
        uint _2328 = _1956 + 2u;
        uint _2332 = _1956 + 10u;
        float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _736) * 0.949999988079071044921875);
        float _2347 = _2346 * _2346;
        float _2348 = cbLight._m0[_2328].x + _813;
        float _2349 = cbLight._m0[_2328].y + _814;
        float _2350 = cbLight._m0[_2328].z + _815;
        float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
        float _2355 = _2354 * _2348;
        float _2356 = _2354 * _2349;
        float _2357 = _2354 * _2350;
        float _2358 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2328].xyz));
        float _4330 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2362 = dot(vec3(_733, _734, _735), vec3(_2355, _2356, _2357));
        float _4341 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2366 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2355, _2356, _2357));
        float _4352 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2370 = _2347 * _2347;
        float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
        float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0);
        float _2388 = 1.0 - _2347;
        float _2398 = (0.5 / (((_2124 * ((_2361 * _2388) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2388) + _2347) * _2361))) * _2361;
        float _4363 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2400 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
        float _2401 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2322 = (((((_2381 * _2146) + _883) * cbLight._m0[_2332].x) * _2400) * _2401) + _2258;
        _2324 = (((((_2381 * _2148) + _885) * cbLight._m0[_2332].y) * _2400) * _2401) + _2259;
        _2326 = (((((_2381 * _2149) + _886) * cbLight._m0[_2332].z) * _2400) * _2401) + _2260;
    }
    float _2436;
    float _2438;
    float _2440;
    if (_2050)
    {
        _2436 = _2322;
        _2438 = _2324;
        _2440 = _2326;
    }
    else
    {
        uint _2447 = _1956 + 3u;
        uint _2451 = _1956 + 11u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _736) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _813;
        float _2468 = cbLight._m0[_2447].y + _814;
        float _2469 = cbLight._m0[_2447].z + _815;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2447].xyz));
        float _4379 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2481 = dot(vec3(_733, _734, _735), vec3(_2474, _2475, _2476));
        float _4390 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4401 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0);
        float _2507 = 1.0 - _2466;
        float _2517 = (0.5 / (((_2124 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2507) + _2466) * _2480))) * _2480;
        float _4412 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2519 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2520 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2436 = (((((_2500 * _2146) + _883) * cbLight._m0[_2451].x) * _2519) * _2520) + _2322;
        _2438 = (((((_2500 * _2148) + _885) * cbLight._m0[_2451].y) * _2519) * _2520) + _2324;
        _2440 = (((((_2500 * _2149) + _886) * cbLight._m0[_2451].z) * _2519) * _2520) + _2326;
    }
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_1954.y == 0u)
    {
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2595;
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2595;
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2595;
        uvec4 _2610 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2611 = _2610.x;
        uint _2622 = uint((float(_2610.y) * floor(float(uint(cbSceneParam._m0[85u].y * _822) / _2611))) + floor(float(uint(cbSceneParam._m0[85u].x * _821) / _2611)));
        float _2632 = (log2(_2598 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2633 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        uint _2636 = uint(isnan(14.0) ? _2633 : (isnan(_2633) ? 14.0 : min(_2633, 14.0)));
        uvec4 _2641 = texelFetch(g_lightClusterGridBuffer, int(((_2636 << 2u) + (_2622 << 6u)) >> 2u));
        uint _2642 = _2641.x;
        uint _2643 = _2610.z;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((((1u << ((_2643 >> 4u) & 15u)) + 4294967295u) & _2642) == 0u) || ((_2643 & 240u) == 0u))
        {
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
        }
        else
        {
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            uint _2894 = 0u;
            uint _2903;
            bool _2904;
            for (;;)
            {
                _2903 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_2894 << 2u)) >> 2u)).x;
                _2904 = _2903 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2904)
                {
                    frontier_phi_61_pred = _2888;
                    frontier_phi_61_pred_1 = _2893;
                    frontier_phi_61_pred_2 = _2892;
                    frontier_phi_61_pred_3 = _2891;
                    frontier_phi_61_pred_4 = _2890;
                    frontier_phi_61_pred_5 = _2889;
                }
                else
                {
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    uint _3018;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2903;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    for (;;)
                    {
                        uint _3022 = uint(findLSB(_3018)) + (_2894 << 5u);
                        uint _3019 = (_3018 + 4294967295u) & _3018;
                        uint _3024 = _3022 * 48u;
                        vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 3u)).x));
                        uint _3044 = (_3022 * 48u) + 4u;
                        vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 3u)).x));
                        uint _3063 = (_3022 * 48u) + 8u;
                        vec3 _3074 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x));
                        float _3078 = _3038.x - _2596;
                        float _3079 = _3038.y - _2597;
                        float _3080 = _3038.z - _2598;
                        float _3081 = dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080));
                        float _3084 = inversesqrt(_3081);
                        float _3085 = _3084 * _3078;
                        float _3086 = _3084 * _3079;
                        float _3087 = _3084 * _3080;
                        float _3088 = dot(vec3(_840, _843, _846), vec3(_3085, _3086, _3087));
                        float _3093 = 1.0 - (_3081 * _3038.w);
                        float _4438 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3094 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3095 = sqrt(_3081) * _3057.w;
                        float _3098 = 1.39999997615814208984375 / (_3095 + 1.39999997615814208984375);
                        float _3099 = _3098 * _3098;
                        float _3102 = ((1.0 - _3099) * _3088) + _3099;
                        float _3105 = _3095 * _3095;
                        float _3109 = ((isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))) * _3094) / ((_3105 * 0.699999988079071044921875) + 1.0);
                        float _3113 = (-0.0) - _2596;
                        float _3114 = (-0.0) - _2597;
                        float _3115 = (-0.0) - _2598;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3130 = exp2(log2(1.0 / ((_3105 * 3.5) + 5.0)) * 0.25);
                        float _3131 = 1.0 - _915;
                        float _3138 = sqrt(1.0 - ((1.0 - (_3131 * _3131)) * (1.0 - (_3130 * _3130))));
                        float _3139 = _3138 * _3138;
                        float _3140 = _3139 * _3139;
                        float _3141 = _3120 + _3085;
                        float _3142 = _3121 + _3086;
                        float _3143 = _3122 + _3087;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3151 = dot(vec3(_840, _843, _846), vec3(_3120, _3121, _3122));
                        float _4454 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                        float _3155 = dot(vec3(_840, _843, _846), vec3(_3147 * _3141, _3147 * _3142, _3147 * _3143));
                        float _4465 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3158 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3162 = ((_3158 * _3158) * (_3140 + (-1.0))) + 1.0;
                        float _3163 = _3098 * _3139;
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3088) + _3164;
                        float _4476 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3169 = 1.0 - _3139;
                        float _3179 = (0.5 / (((_3168 * ((_3154 * _3169) + _3139)) + 9.9999999392252902907785028219223e-09) + (((_3168 * _3169) + _3139) * _3154))) * _3168;
                        float _4487 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3190 = (((_3140 * 3.1415927410125732421875) * (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) / ((_3162 * _3162) * ((_3105 * 2.1991131305694580078125) + 3.141590118408203125))) * _3094;
                        _2947 = (_3109 * _3057.x) + _3015;
                        _2948 = (_3109 * _3057.y) + _3016;
                        _2949 = (_3109 * _3057.z) + _3017;
                        _2944 = (_3190 * _3074.x) + _3012;
                        _2945 = (_3190 * _3074.y) + _3013;
                        _2946 = (_3190 * _3074.z) + _3014;
                        if (_3019 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _3019;
                        }
                    }
                    frontier_phi_61_pred = _2944;
                    frontier_phi_61_pred_1 = _2949;
                    frontier_phi_61_pred_2 = _2948;
                    frontier_phi_61_pred_3 = _2947;
                    frontier_phi_61_pred_4 = _2946;
                    frontier_phi_61_pred_5 = _2945;
                }
                _2744 = frontier_phi_61_pred;
                _2754 = frontier_phi_61_pred_1;
                _2752 = frontier_phi_61_pred_2;
                _2750 = frontier_phi_61_pred_3;
                _2748 = frontier_phi_61_pred_4;
                _2746 = frontier_phi_61_pred_5;
                uint _2895 = _2894 + 1u;
                if (_2895 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2888 = _2744;
                    _2889 = _2746;
                    _2890 = _2748;
                    _2891 = _2750;
                    _2892 = _2752;
                    _2893 = _2754;
                    _2894 = _2895;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
        }
        uvec4 _2757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2758 = _2757.z;
        uint _2760 = (_2758 >> 8u) & 15u;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((4294967295u << _2760) & _2642) == 0u)
        {
            _2856 = _2743;
            _2858 = _2745;
            _2860 = _2747;
            _2862 = _2749;
            _2864 = _2751;
            _2866 = _2753;
        }
        else
        {
            float _2881 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
            float _2882 = _2881 * _2596;
            float _2883 = _2881 * _2597;
            float _2884 = _2881 * _2598;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2760 < ((_2758 >> 12u) & 15u))
            {
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _2995 = _2743;
                float _2996 = _2745;
                float _2997 = _2747;
                float _2998 = _2749;
                float _2999 = _2751;
                float _3000 = _2753;
                uint _3001 = _2760;
                uint _3010;
                bool _3011;
                for (;;)
                {
                    _3010 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_3001 << 2u)) >> 2u)).x;
                    _3011 = _3010 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3011)
                    {
                        frontier_phi_67_pred = _2998;
                        frontier_phi_67_pred_1 = _2999;
                        frontier_phi_67_pred_2 = _3000;
                        frontier_phi_67_pred_3 = _2997;
                        frontier_phi_67_pred_4 = _2996;
                        frontier_phi_67_pred_5 = _2995;
                    }
                    else
                    {
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3208 = _2995;
                        float _3209 = _2996;
                        float _3210 = _2997;
                        float _3211 = _2998;
                        float _3212 = _2999;
                        float _3213 = _3000;
                        uint _3214 = _3010;
                        uint _3215;
                        vec4 _3240;
                        float _3241;
                        vec4 _3256;
                        vec3 _3268;
                        vec4 _3283;
                        vec4 _3298;
                        float _3344;
                        bool _3345;
                        for (;;)
                        {
                            uint _3225 = ((_3001 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3214));
                            _3215 = (_3214 + 4294967295u) & _3214;
                            uint _3227 = _3225 * 40u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            _3241 = _3240.w;
                            uint _3243 = (_3225 * 40u) + 4u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3225 * 40u) + 8u;
                            _3268 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x));
                            uint _3270 = (_3225 * 40u) + 16u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3225 * 40u) + 20u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3300 = (_3225 * 40u) + 24u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3319 = (_3225 * 40u) + 28u;
                            vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3344 = fma(_2598, _3332.z, fma(_2597, _3332.y, _3332.x * _2596)) + _3332.w;
                            _3345 = !((fma(_2598, _3313.z, fma(_2597, _3313.y, _3313.x * _2596)) + _3313.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3345)
                            {
                                float _3372 = _3240.x - _2596;
                                float _3373 = _3240.y - _2597;
                                float _3374 = _3240.z - _2598;
                                float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                                float _3378 = inversesqrt(_3375);
                                float _3379 = _3378 * _3372;
                                float _3380 = _3378 * _3373;
                                float _3381 = _3378 * _3374;
                                float _3385 = 1.0 - (_3375 / (_3241 * _3241));
                                float _4498 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3390 = sqrt(_3375) * _3256.w;
                                float _3392 = 1.39999997615814208984375 / (_3390 + 1.39999997615814208984375);
                                float _3393 = _3392 * _3392;
                                float _3396 = ((1.0 - _3393) * dot(vec3(_3379, _3380, _3381), vec3(_840, _843, _846))) + _3393;
                                float _3399 = _3390 * _3390;
                                float _3403 = (fma(_2598, _3283.z, fma(_2597, _3283.y, _3283.x * _2596)) + _3283.w) / _3344;
                                float _3404 = (fma(_2598, _3298.z, fma(_2597, _3298.y, _3298.x * _2596)) + _3298.w) / _3344;
                                float _3408 = 1.0 - dot(vec2(_3403, _3404), vec2(_3403, _3404));
                                float _4514 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3410 = _3409 * (((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3386) / ((_3399 * 0.699999988079071044921875) + 1.0));
                                float _3422 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                                float _3423 = 1.0 - _915;
                                float _3430 = sqrt(1.0 - ((1.0 - (_3423 * _3423)) * (1.0 - (_3422 * _3422))));
                                float _3431 = _3430 * _3430;
                                float _3432 = _3431 * _3431;
                                float _3433 = _3379 - _2882;
                                float _3434 = _3380 - _2883;
                                float _3435 = _3381 - _2884;
                                float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                                float _3443 = dot(vec3(_840, _843, _846), vec3((-0.0) - _2882, (-0.0) - _2883, (-0.0) - _2884));
                                float _4525 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3446 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3447 = dot(vec3(_840, _843, _846), vec3(_3439 * _3433, _3439 * _3434, _3439 * _3435));
                                float _4536 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3454 = ((_3450 * _3450) * (_3432 + (-1.0))) + 1.0;
                                float _3455 = _3392 * _3431;
                                float _3456 = _3455 * _3455;
                                float _3462 = ((1.0 - _3456) * dot(vec3(_840, _843, _846), vec3(_3379, _3380, _3381))) + _3456;
                                float _4547 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3464 = 1.0 - _3431;
                                float _3474 = (0.5 / (((_3463 * ((_3446 * _3464) + _3431)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3431) * _3446))) * _3463;
                                float _4558 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3484 = (_3409 * _3386) * (((_3432 * 3.1415927410125732421875) * (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) / ((_3454 * _3454) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3484 * _3268.x;
                                frontier_phi_73_pred_1 = _3484 * _3268.y;
                                frontier_phi_73_pred_2 = _3410 * _3256.z;
                                frontier_phi_73_pred_3 = _3410 * _3256.y;
                                frontier_phi_73_pred_4 = _3410 * _3256.x;
                                frontier_phi_73_pred_5 = _3484 * _3268.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3488 = frontier_phi_73_pred;
                            _3489 = frontier_phi_73_pred_1;
                            _3493 = frontier_phi_73_pred_2;
                            _3492 = frontier_phi_73_pred_3;
                            _3491 = frontier_phi_73_pred_4;
                            _3490 = frontier_phi_73_pred_5;
                            _3198 = _3491 + _3211;
                            _3199 = _3492 + _3212;
                            _3200 = _3493 + _3213;
                            _3195 = _3488 + _3208;
                            _3196 = _3489 + _3209;
                            _3197 = _3490 + _3210;
                            if (_3215 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3215;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3198;
                        frontier_phi_67_pred_1 = _3199;
                        frontier_phi_67_pred_2 = _3200;
                        frontier_phi_67_pred_3 = _3197;
                        frontier_phi_67_pred_4 = _3196;
                        frontier_phi_67_pred_5 = _3195;
                    }
                    _2863 = frontier_phi_67_pred;
                    _2865 = frontier_phi_67_pred_1;
                    _2867 = frontier_phi_67_pred_2;
                    _2861 = frontier_phi_67_pred_3;
                    _2859 = frontier_phi_67_pred_4;
                    _2857 = frontier_phi_67_pred_5;
                    uint _3002 = _3001 + 1u;
                    if (_3002 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2995 = _2857;
                        _2996 = _2859;
                        _2997 = _2861;
                        _2998 = _2863;
                        _2999 = _2865;
                        _3000 = _2867;
                        _3001 = _3002;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2865;
                frontier_phi_55_56_ladder_1 = _2867;
                frontier_phi_55_56_ladder_2 = _2863;
                frontier_phi_55_56_ladder_3 = _2861;
                frontier_phi_55_56_ladder_4 = _2859;
                frontier_phi_55_56_ladder_5 = _2857;
            }
            else
            {
                frontier_phi_55_56_ladder = _2751;
                frontier_phi_55_56_ladder_1 = _2753;
                frontier_phi_55_56_ladder_2 = _2749;
                frontier_phi_55_56_ladder_3 = _2747;
                frontier_phi_55_56_ladder_4 = _2745;
                frontier_phi_55_56_ladder_5 = _2743;
            }
            _2856 = frontier_phi_55_56_ladder_5;
            _2858 = frontier_phi_55_56_ladder_4;
            _2860 = frontier_phi_55_56_ladder_3;
            _2862 = frontier_phi_55_56_ladder_2;
            _2864 = frontier_phi_55_56_ladder;
            _2866 = frontier_phi_55_56_ladder_1;
        }
        float _2871 = isnan(1.0) ? _899 : (isnan(_899) ? 1.0 : min(_899, 1.0));
        _2655 = (_2871 * _2862) + _2088;
        _2657 = (_2871 * _2864) + _2090;
        _2659 = (_2871 * _2866) + _2092;
        _2661 = ((_2856 * _883) * _2871) + _2436;
        _2663 = ((_2858 * _885) * _2871) + _2438;
        _2665 = ((_2860 * _886) * _2871) + _2440;
    }
    else
    {
        _2655 = _2088;
        _2657 = _2090;
        _2659 = _2092;
        _2661 = _2436;
        _2663 = _2438;
        _2665 = _2440;
    }
    float _4574 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4585 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4596 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    uint _2685 = _270 + 6u;
    float _2693 = _821 / cbSceneParam._m0[86u].x;
    float _2694 = _822 / cbSceneParam._m0[86u].y;
    vec4 _2708 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, (log2((isnan(cbSceneParam._m0[77u].w) ? _755 : (isnan(_755) ? cbSceneParam._m0[77u].w : min(_755, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2710 = _2708.x;
    float _2711 = _2708.y;
    float _2712 = _2708.z;
    float _2713 = _2708.w;
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    if (_755 > cbSceneParam._m0[78u].w)
    {
        float _2768 = isnan(_755) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _755 : min(cbSceneParam._m0[80u].w, _755));
        float _2769 = _2768 / _755;
        float _2780 = _2769 * _806;
        float _2781 = _807 * _2769;
        float _2782 = (-0.0) - _2781;
        float _2784 = _2769 * _808;
        float _2786 = (cbSceneParam._m0[77u].w * _2782) / _2768;
        float _2787 = _2786 + cbSceneParam._m0[79u].w;
        float _2788 = cbSceneParam._m0[79u].w - _2781;
        float _2794 = sqrt(((_2780 * _2780) + (_2781 * _2781)) + (_2784 * _2784));
        float _2797 = (1.0 - (cbSceneParam._m0[77u].w / _2768)) * _2794;
        float _2802 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2804 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2957;
        if (abs((_2782 - _2786) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2957 = ((((_2787 > 0.0) ? exp2(_2802 * _2787) : (2.0 - exp2(_2804 * _2787))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2797;
        }
        else
        {
            float _2917 = 1.0 / cbSceneParam._m0[80u].x;
            float _2918 = isnan(_2788) ? _2787 : (isnan(_2787) ? _2788 : max(_2787, _2788));
            float _2919 = isnan(_2788) ? _2787 : (isnan(_2787) ? _2788 : min(_2787, _2788));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            _2957 = ((abs(_2794 / _2782) * cbSceneParam._m0[80u].y) * ((((_2928 - _2929) * 2.0) - ((exp2(_2802 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0)))) - exp2(_2802 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))))) * _2917)) - ((exp2(_2804 * _2928) - exp2(_2804 * _2929)) * _2917))) + (_2797 * cbSceneParam._m0[80u].z);
        }
        vec4 _2959 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, 1.0), 0.0);
        float _2968 = exp2((_2957 * (-1.44269502162933349609375)) * (1.0 - _2959.w));
        float _2969 = log2(_2968);
        float _2985 = log2(_2713);
        _2806 = (exp2(_2985 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].x)) * _2959.x) / cbSceneParam._m0[78u].x)) + _2710;
        _2808 = (exp2(_2985 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].y)) * _2959.y) / cbSceneParam._m0[78u].y)) + _2711;
        _2810 = (exp2(_2985 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].z)) * _2959.z) / cbSceneParam._m0[78u].z)) + _2712;
        _2812 = _2968 * _2713;
    }
    else
    {
        _2806 = _2710;
        _2808 = _2711;
        _2810 = _2712;
        _2812 = _2713;
    }
    float _2824 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2825 = _2824 == 3.0;
    float _2826 = log2(_2812);
    float _2833 = exp2(_2826 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2655 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _899))) + ((_2661 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1707)) * cbPerFrame._m0[3u].x));
    float _2834 = exp2(_2826 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2657 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _899))) + ((_2663 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1707)) * cbPerFrame._m0[3u].x));
    float _2835 = exp2(_2826 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2659 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _899))) + ((_2665 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1707)) * cbPerFrame._m0[3u].x));
    float _2844 = (_2824 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2844 * (_2825 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2806)));
    SV_Target.y = _2844 * (_2825 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2808)));
    SV_Target.z = _2844 * (_2825 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2810)));
    SV_Target.w = cbInstanceData._m0[_2685].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2685].w;
}


