#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1168;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3498 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _421 = _419.x;
    float _422 = _419.y;
    float _423 = _419.z;
    float _432 = ((_402.z - _423) * _380) + _423;
    float _435 = ((((_402.x - _421) * _380) + _421) * 2.0) + (-1.0);
    float _437 = ((((_402.y - _422) * _380) + _422) * 2.0) + (-1.0);
    float _438 = dot(vec2(_435, _437), vec2(_435, _437));
    float _3509 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _443 = sqrt(1.0 - (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))));
    vec4 _456 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _472 = _470.x;
    float _473 = 1.0 - _472;
    float _501 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_472 - _473) * cbMtdParam._m0[24u].w) + _473) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3520 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _502 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _510 = ((((cbMtdParam._m0[10u].x - _387) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _502) + _387;
    float _511 = ((((cbMtdParam._m0[10u].y - _388) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _502) + _388;
    float _512 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _389)) * _502) + _389;
    vec4 _524 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _540 = _538.x;
    float _558 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _540) * _380) + _540;
    float _562 = ((_524.x - _558) * cbMtdParam._m0[19u].z) + _558;
    float _564 = _562 - (_562 * _502);
    float _568 = ((cbMtdParam._m0[23u].y - _432) * _502) + _432;
    vec4 _587 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _593 = (_587.x * 2.0) + (-1.0);
    float _594 = (_587.y * 2.0) + (-1.0);
    float _595 = dot(vec2(_593, _594), vec2(_593, _594));
    float _3531 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _611 = (_502 * (((cbMtdParam._m0[22u].z * _435) - _435) + _593)) + _435;
    float _612 = (_502 * (((cbMtdParam._m0[22u].z * _437) - _437) + _594)) + _437;
    float _613 = (_502 * (sqrt(1.0 - (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) - _443)) + _443;
    float _615 = cbMtdParam._m0[22u].x + _456.w;
    float _618 = fma(_613, _230 * NORMAL.x, fma(_612, _237 * TANGENT.x, (_223 * _215) * _611));
    float _621 = fma(_613, _230 * NORMAL.y, fma(_612, _237 * TANGENT.y, (_223 * _216) * _611));
    float _624 = fma(_613, _230 * NORMAL.z, fma(_612, _237 * TANGENT.z, (_223 * _217) * _611));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    float _629 = _628 * _618;
    float _630 = _628 * _621;
    float _631 = _628 * _624;
    float _3542 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _632 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3564 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3575 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3586 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3597 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _637 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _651 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _701 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _691);
    float _702 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _691);
    float _703 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _691);
    float _707 = inversesqrt(dot(vec3(_701, _702, _703), vec3(_701, _702, _703)));
    float _708 = _701 * _707;
    float _709 = _702 * _707;
    float _710 = _703 * _707;
    float _716 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _717 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _735 = fma(_631, cbSceneParam._m0[5u].z, fma(_630, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _629));
    float _738 = fma(_631, cbSceneParam._m0[6u].z, fma(_630, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _629));
    float _741 = fma(_631, cbSceneParam._m0[7u].z, fma(_630, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _629));
    uint _755 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _761 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_755].x;
    float _762 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_755].y;
    float _763 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_755].z;
    float _3608 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _767 = 1.0 - _637;
    float _768 = _764 * _767;
    float _769 = _765 * _767;
    float _770 = _766 * _767;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _637;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _637;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _637;
    float _778 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    vec4 _790 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _716, cbSceneParam._m0[86u].y * _717));
    float _794 = ((isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * TEXCOORD_5.w) * _790.x;
    float _795 = dot(vec3(_629, _630, _631), vec3(_708, _709, _710));
    float _798 = _795 * 2.0;
    float _802 = (_798 * _629) - _708;
    float _803 = (_798 * _630) - _709;
    float _804 = (_798 * _631) - _710;
    float _808 = abs(dot(vec3(_708, _709, _710), vec3(_629, _630, _631)));
    float _3641 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _810 = sqrt(_632);
    float _823 = exp2((_810 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_810 * 3.0));
    float _829 = (1.0 - _823) * ((_810 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _830 = _823 * _810;
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1167;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _892 = fma(_866, cbModelParam._m0[26u].z, fma(_862, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _858));
        float _896 = fma(_866, cbModelParam._m0[27u].z, fma(_862, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _858));
        float _900 = fma(_866, cbModelParam._m0[28u].z, fma(_862, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _858));
        float _925 = _858 + _629;
        float _926 = _862 + _630;
        float _927 = _866 + _631;
        float _937 = fma(_927, cbModelParam._m0[26u].z, fma(_926, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _925)) - _892;
        float _938 = fma(_927, cbModelParam._m0[27u].z, fma(_926, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _925)) - _896;
        float _939 = fma(_927, cbModelParam._m0[28u].z, fma(_926, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _925)) - _900;
        float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
        float _956 = ((_943 * _937) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_892 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_943 * _938) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_896 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_943 * _939) / cbModelParam._m0[34u].z) + ((((((_900 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        float _995 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_961.x + (-0.5));
        float _997 = _995 * (_961.y + (-0.5));
        float _998 = _995 * (_961.z + (-0.5));
        float _1005 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_968.x + (-0.5));
        float _1007 = _1005 * (_968.y + (-0.5));
        float _1008 = _1005 * (_968.z + (-0.5));
        float _1015 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_975.x + (-0.5));
        float _1017 = _1015 * (_975.y + (-0.5));
        float _1018 = _1015 * (_975.z + (-0.5));
        float _1025 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_982.x + (-0.5));
        float _1027 = _1025 * (_982.y + (-0.5));
        float _1028 = _1025 * (_982.z + (-0.5));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = _996 * 0.5;
        float _1033 = _1006 * 0.5;
        float _1034 = _1016 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1049 = (dot(vec3(_629, _630, _631), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1059 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3689 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1061 + 1.0))) + _1066) * _1029;
        float _1076 = _997 * 0.5;
        float _1077 = _1007 * 0.5;
        float _1078 = _1017 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_629, _630, _631), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3722 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1103 + 1.0))) + _1108) * _1030;
        float _1118 = _998 * 0.5;
        float _1119 = _1008 * 0.5;
        float _1120 = _1018 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_629, _630, _631), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3755 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1145 + 1.0))) + _1150) * _1031;
        _1167 = _998;
        _1169 = _997;
        _1170 = _996;
        _1171 = _1008;
        _1172 = _1007;
        _1173 = _1006;
        _1174 = _1018;
        _1175 = _1017;
        _1176 = _1016;
        _1177 = _1031;
        _1178 = _1030;
        _1179 = _1029;
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
    }
    else
    {
        _1167 = _1168;
        _1169 = _1168;
        _1170 = _1168;
        _1171 = _1168;
        _1172 = _1168;
        _1173 = _1168;
        _1174 = _1168;
        _1175 = _1168;
        _1176 = _1168;
        _1177 = _1168;
        _1178 = _1168;
        _1179 = _1168;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1207 = fma(_866, cbModelParam._m0[30u].z, fma(_862, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _858));
        float _1211 = fma(_866, cbModelParam._m0[31u].z, fma(_862, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _858));
        float _1215 = fma(_866, cbModelParam._m0[32u].z, fma(_862, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _858));
        float _1238 = _858 + _629;
        float _1239 = _862 + _630;
        float _1240 = _866 + _631;
        float _1250 = fma(_1240, cbModelParam._m0[30u].z, fma(_1239, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1238)) - _1207;
        float _1251 = fma(_1240, cbModelParam._m0[31u].z, fma(_1239, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1238)) - _1211;
        float _1252 = fma(_1240, cbModelParam._m0[32u].z, fma(_1239, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1238)) - _1215;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1207 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1211 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[35u].z) + ((((((_1215 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1306 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1273.x + (-0.5));
        float _1308 = _1306 * (_1273.y + (-0.5));
        float _1309 = _1306 * (_1273.z + (-0.5));
        float _1316 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1280.x + (-0.5));
        float _1318 = _1316 * (_1280.y + (-0.5));
        float _1319 = _1316 * (_1280.z + (-0.5));
        float _1326 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1287.x + (-0.5));
        float _1328 = _1326 * (_1287.y + (-0.5));
        float _1329 = _1326 * (_1287.z + (-0.5));
        float _1336 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1294.x + (-0.5));
        float _1338 = _1336 * (_1294.y + (-0.5));
        float _1339 = _1336 * (_1294.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_629, _630, _631), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3818 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1370 + 1.0))) + _1375) * _1340;
        float _1385 = _1308 * 0.5;
        float _1386 = _1318 * 0.5;
        float _1387 = _1328 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_629, _630, _631), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3851 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1412 + 1.0))) + _1417) * _1341;
        float _1427 = _1309 * 0.5;
        float _1428 = _1319 * 0.5;
        float _1429 = _1329 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_629, _630, _631), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3884 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1454 + 1.0))) + _1459) * _1342;
        _1476 = _1309;
        _1477 = _1308;
        _1478 = _1307;
        _1479 = _1319;
        _1480 = _1318;
        _1481 = _1317;
        _1482 = _1329;
        _1483 = _1328;
        _1484 = _1327;
        _1485 = _1342;
        _1486 = _1341;
        _1487 = _1340;
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
    }
    else
    {
        _1476 = _1168;
        _1477 = _1168;
        _1478 = _1168;
        _1479 = _1168;
        _1480 = _1168;
        _1481 = _1168;
        _1482 = _1168;
        _1483 = _1168;
        _1484 = _1168;
        _1485 = _1168;
        _1486 = _1168;
        _1487 = _1168;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1180)) + _1180;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1181)) + _1181;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1182)) + _1182;
    float _1523 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1500));
    float _1544 = _802 * 0.5;
    float _1545 = _803 * 0.5;
    float _1546 = _804 * 0.5;
    float _1547 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1550 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1553 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1587;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1560 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1167, _1171, _1174, _1177));
        float _1564 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1568 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1575 = dot(vec4(cbModelParam._m0[39u]), vec4(_1544, _1545, _1546, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1598;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1589 = dot(vec4(cbModelParam._m0[40u]), vec4(_1544, _1545, _1546, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1602 = (_1598 * cbModelParam._m0[1u].x) + (_1587 * (1.0 - cbModelParam._m0[1u].x));
    float _1612 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _632);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1612 : min(cbModelParam._m0[25u].z, _1612));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1662 = fma(_866, cbModelParam._m0[13u].z, fma(_862, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _858)) + cbModelParam._m0[13u].w;
        float _1666 = fma(_866, cbModelParam._m0[14u].z, fma(_862, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _858)) + cbModelParam._m0[14u].w;
        float _1670 = fma(_866, cbModelParam._m0[15u].z, fma(_862, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _858)) + cbModelParam._m0[15u].w;
        float _1673 = fma(_804, cbModelParam._m0[13u].z, fma(_803, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _802));
        float _1676 = fma(_804, cbModelParam._m0[14u].z, fma(_803, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _802));
        float _1679 = fma(_804, cbModelParam._m0[15u].z, fma(_803, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _802));
        float _1707;
        if (_1673 > 0.0)
        {
            _1707 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1707 = frontier_phi_14_12_ladder;
        }
        float _1911;
        if (_1676 > 0.0)
        {
            _1911 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1911 = frontier_phi_23_19_ladder;
        }
        float _2165;
        if (_1679 > 0.0)
        {
            _2165 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2165 = frontier_phi_35_30_ladder;
        }
        float _2167 = isnan(_1911) ? _1707 : (isnan(_1707) ? _1911 : min(_1707, _1911));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1673) + _1662;
        float _2173 = (_2168 * _1676) + _1666;
        float _2174 = (_2168 * _1679) + _1670;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2175;
        float _2179 = _2175 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 > _2179) || ((_2173 < _2177) || ((_2172 < _2177) || (_2172 > _2179))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2302 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2174, cbModelParam._m0[9u].z, fma(_2173, cbModelParam._m0[9u].y, _2172 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2174, cbModelParam._m0[10u].z, fma(_2173, cbModelParam._m0[10u].y, _2172 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2174, cbModelParam._m0[11u].z, fma(_2173, cbModelParam._m0[11u].y, _2172 * cbModelParam._m0[11u].x))), _1613);
            frontier_phi_13_35_ladder = _2302.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2302.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2302.x * cbModelParam._m0[1u].y;
        }
        _1695 = frontier_phi_13_35_ladder_2;
        _1697 = frontier_phi_13_35_ladder_1;
        _1699 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_802, _803, _804), _1613);
        _1695 = _1683.x * cbModelParam._m0[1u].y;
        _1697 = _1683.y * cbModelParam._m0[1u].y;
        _1699 = _1683.z * cbModelParam._m0[1u].y;
    }
    float _1703 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _632);
    float _1704 = isnan(_1703) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1703 : min(cbModelParam._m0[25u].w, _1703));
    float _1795;
    float _1797;
    float _1799;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1759 = fma(_866, cbModelParam._m0[21u].z, fma(_862, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _858)) + cbModelParam._m0[21u].w;
        float _1763 = fma(_866, cbModelParam._m0[22u].z, fma(_862, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _858)) + cbModelParam._m0[22u].w;
        float _1767 = fma(_866, cbModelParam._m0[23u].z, fma(_862, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _858)) + cbModelParam._m0[23u].w;
        float _1770 = fma(_804, cbModelParam._m0[21u].z, fma(_803, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _802));
        float _1773 = fma(_804, cbModelParam._m0[22u].z, fma(_803, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _802));
        float _1776 = fma(_804, cbModelParam._m0[23u].z, fma(_803, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _802));
        float _1916;
        if (_1770 > 0.0)
        {
            _1916 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1916 = frontier_phi_25_21_ladder;
        }
        float _2192;
        if (_1773 > 0.0)
        {
            _2192 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2192 = frontier_phi_37_32_ladder;
        }
        float _2405;
        if (_1776 > 0.0)
        {
            _2405 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2405 = frontier_phi_46_43_ladder;
        }
        float _2407 = isnan(_2192) ? _1916 : (isnan(_1916) ? _2192 : min(_1916, _2192));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1770) + _1759;
        float _2413 = (_2408 * _1773) + _1763;
        float _2414 = (_2408 * _1776) + _1767;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2415;
        float _2418 = _2415 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2414 > _2418) || ((_2414 < _2416) || ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 < _2416) || (_2412 > _2418))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2613 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2414, cbModelParam._m0[17u].z, fma(_2413, cbModelParam._m0[17u].y, _2412 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2414, cbModelParam._m0[18u].z, fma(_2413, cbModelParam._m0[18u].y, _2412 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2414, cbModelParam._m0[19u].z, fma(_2413, cbModelParam._m0[19u].y, _2412 * cbModelParam._m0[19u].x))), _1704);
            frontier_phi_22_46_ladder = _2613.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2613.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2613.x * cbModelParam._m0[1u].z;
        }
        _1795 = frontier_phi_22_46_ladder_2;
        _1797 = frontier_phi_22_46_ladder_1;
        _1799 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1779 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_802, _803, _804), _1704);
        _1795 = _1779.x * cbModelParam._m0[1u].z;
        _1797 = _1779.y * cbModelParam._m0[1u].z;
        _1799 = _1779.z * cbModelParam._m0[1u].z;
    }
    float _1812 = (((_829 * _778) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1795 - _1695)) + _1695);
    float _1814 = (((_829 * _780) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1797 - _1697)) + _1697);
    float _1816 = (((_829 * _781) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1799 - _1699)) + _1699);
    float _1819 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1812 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1812 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, _1812 * cbSceneParam._m0[91u].x));
    uvec4 _1835 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1837 = _1835.x * 14u;
    uint _1838 = _1837 + 13u;
    float _1845 = _794 + (-1.0);
    float _1850 = (cbLight._m0[_1838].x * _1845) + 1.0;
    float _1851 = (cbLight._m0[_1838].y * _1845) + 1.0;
    float _1852 = (cbLight._m0[_1838].z * _1845) + 1.0;
    float _1853 = (cbLight._m0[_1838].w * _1845) + 1.0;
    uint _1854 = _1837 + 5u;
    float _1860 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
    uint _1864 = _1837 + 4u;
    float _1870 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
    uint _1874 = _1837 | 1u;
    float _1885 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_629, _630, _631));
    float _1888 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_629, _630, _631));
    float _4020 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _4031 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1893 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.3183098733425140380859375;
    float _1895 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * 0.3183098733425140380859375;
    float _1902 = ((cbLight._m0[_1854].x * _1860) * _1895) + ((cbLight._m0[_1864].x * _1870) * _1893);
    float _1903 = ((_1860 * cbLight._m0[_1854].y) * _1895) + ((_1870 * cbLight._m0[_1864].y) * _1893);
    float _1904 = ((_1860 * cbLight._m0[_1854].z) * _1895) + ((_1870 * cbLight._m0[_1864].z) * _1893);
    uvec4 _1908 = floatBitsToUint(cbLight._m0[_1837 + 12u]);
    bool _1910 = _1908.x == 0u;
    float _1921;
    float _1923;
    float _1925;
    if (_1910)
    {
        _1921 = _1902;
        _1923 = _1903;
        _1925 = _1904;
    }
    else
    {
        uint _1929 = _1837 + 6u;
        float _1945 = (dot(vec3(cbLight._m0[_1837 + 2u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _1946 = _1945 * _1945;
        float _4042 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1947 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1948 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _1921 = (((cbLight._m0[_1929].x * 0.3183098733425140380859375) * _1947) * _1948) + _1902;
        _1923 = (((cbLight._m0[_1929].y * 0.3183098733425140380859375) * _1947) * _1948) + _1903;
        _1925 = (((cbLight._m0[_1929].z * 0.3183098733425140380859375) * _1947) * _1948) + _1904;
    }
    bool _1928 = _1908.y == 0u;
    float _1966;
    float _1968;
    float _1970;
    if (_1928)
    {
        _1966 = _1921;
        _1968 = _1923;
        _1970 = _1925;
    }
    else
    {
        uint _2136 = _1837 + 7u;
        float _2152 = (dot(vec3(cbLight._m0[_1837 + 3u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4058 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2155 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _1966 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _1921;
        _1968 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _1923;
        _1970 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _1925;
    }
    uint _1973 = _1837 + 8u;
    float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1837].w)) * _632) * 0.949999988079071044921875);
    float _1987 = _1986 * _1986;
    float _1988 = cbLight._m0[_1837].x + _708;
    float _1989 = cbLight._m0[_1837].y + _709;
    float _1990 = cbLight._m0[_1837].z + _710;
    float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
    float _1995 = _1994 * _1988;
    float _1996 = _1994 * _1989;
    float _1997 = _1994 * _1990;
    float _1998 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1837].xyz));
    float _4074 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _2002 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _2003 = dot(vec3(_629, _630, _631), vec3(_1995, _1996, _1997));
    float _4096 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _2007 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_1995, _1996, _1997));
    float _4107 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2011 = _1987 * _1987;
    float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
    float _2023 = exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0);
    float _2024 = 0.959999978542327880859375 - _775;
    float _2026 = 0.959999978542327880859375 - _776;
    float _2027 = 0.959999978542327880859375 - _777;
    float _2034 = 1.0 - _1987;
    float _2045 = (0.5 / (((_2002 * ((_2001 * _2034) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2034) + _1987) * _2001))) * _2001;
    float _4118 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
    uint _2058 = _1837 + 9u;
    float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _632) * 0.949999988079071044921875);
    float _2070 = _2069 * _2069;
    float _2071 = cbLight._m0[_1874].x + _708;
    float _2072 = cbLight._m0[_1874].y + _709;
    float _2073 = cbLight._m0[_1874].z + _710;
    float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
    float _2078 = _2077 * _2071;
    float _2079 = _2077 * _2072;
    float _2080 = _2077 * _2073;
    float _2081 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1874].xyz));
    float _4129 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2085 = dot(vec3(_629, _630, _631), vec3(_2078, _2079, _2080));
    float _4140 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2078, _2079, _2080));
    float _4151 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2070 * _2070;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2104 = exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0);
    float _2111 = 1.0 - _2070;
    float _2121 = (0.5 / (((_2002 * ((_2084 * _2111) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2111) + _2070) * _2084))) * _2084;
    float _4162 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2123 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    float _2133 = (((((_2104 * _2024) + _778) * cbLight._m0[_2058].x) * _2123) * _1860) + (((((_2023 * _2024) + _778) * cbLight._m0[_1973].x) * _2047) * _1870);
    float _2134 = (((((_2104 * _2026) + _780) * cbLight._m0[_2058].y) * _2123) * _1860) + (((((_2023 * _2026) + _780) * cbLight._m0[_1973].y) * _2047) * _1870);
    float _2135 = (((((_2104 * _2027) + _781) * cbLight._m0[_2058].z) * _2123) * _1860) + (((((_2023 * _2027) + _781) * cbLight._m0[_1973].z) * _2047) * _1870);
    float _2197;
    float _2199;
    float _2201;
    if (_1910)
    {
        _2197 = _2133;
        _2199 = _2134;
        _2201 = _2135;
    }
    else
    {
        uint _2203 = _1837 + 2u;
        uint _2207 = _1837 + 10u;
        float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _632) * 0.949999988079071044921875);
        float _2222 = _2221 * _2221;
        float _2223 = cbLight._m0[_2203].x + _708;
        float _2224 = cbLight._m0[_2203].y + _709;
        float _2225 = cbLight._m0[_2203].z + _710;
        float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
        float _2230 = _2229 * _2223;
        float _2231 = _2229 * _2224;
        float _2232 = _2229 * _2225;
        float _2233 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2203].xyz));
        float _4173 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2237 = dot(vec3(_629, _630, _631), vec3(_2230, _2231, _2232));
        float _4184 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2241 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2230, _2231, _2232));
        float _4195 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2245 = _2222 * _2222;
        float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
        float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0);
        float _2263 = 1.0 - _2222;
        float _2273 = (0.5 / (((_2002 * ((_2236 * _2263) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2263) + _2222) * _2236))) * _2236;
        float _4206 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2275 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
        float _2276 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _2197 = (((((_2256 * _2024) + _778) * cbLight._m0[_2207].x) * _2275) * _2276) + _2133;
        _2199 = (((((_2256 * _2026) + _780) * cbLight._m0[_2207].y) * _2275) * _2276) + _2134;
        _2201 = (((((_2256 * _2027) + _781) * cbLight._m0[_2207].z) * _2275) * _2276) + _2135;
    }
    float _2311;
    float _2313;
    float _2315;
    if (_1928)
    {
        _2311 = _2197;
        _2313 = _2199;
        _2315 = _2201;
    }
    else
    {
        uint _2322 = _1837 + 3u;
        uint _2326 = _1837 + 11u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _632) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _708;
        float _2343 = cbLight._m0[_2322].y + _709;
        float _2344 = cbLight._m0[_2322].z + _710;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2322].xyz));
        float _4222 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2356 = dot(vec3(_629, _630, _631), vec3(_2349, _2350, _2351));
        float _4233 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4244 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0);
        float _2382 = 1.0 - _2341;
        float _2392 = (0.5 / (((_2002 * ((_2355 * _2382) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2382) + _2341) * _2355))) * _2355;
        float _4255 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2311 = (((((_2375 * _2024) + _778) * cbLight._m0[_2326].x) * _2394) * _2395) + _2197;
        _2313 = (((((_2375 * _2026) + _780) * cbLight._m0[_2326].y) * _2394) * _2395) + _2199;
        _2315 = (((((_2375 * _2027) + _781) * cbLight._m0[_2326].z) * _2394) * _2395) + _2201;
    }
    float _2530;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_1835.y == 0u)
    {
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2470;
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2470;
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2470;
        uvec4 _2485 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2486 = _2485.x;
        uint _2497 = uint((float(_2485.y) * floor(float(uint(cbSceneParam._m0[85u].y * _717) / _2486))) + floor(float(uint(cbSceneParam._m0[85u].x * _716) / _2486)));
        float _2507 = (log2(_2473 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2508 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        uint _2511 = uint(isnan(14.0) ? _2508 : (isnan(_2508) ? 14.0 : min(_2508, 14.0)));
        uvec4 _2516 = texelFetch(g_lightClusterGridBuffer, int(((_2511 << 2u) + (_2497 << 6u)) >> 2u));
        uint _2517 = _2516.x;
        uint _2518 = _2485.z;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        if (((((1u << ((_2518 >> 4u) & 15u)) + 4294967295u) & _2517) == 0u) || ((_2518 & 240u) == 0u))
        {
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
        }
        else
        {
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            uint _2769 = 0u;
            uint _2778;
            bool _2779;
            for (;;)
            {
                _2778 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2769 << 2u)) >> 2u)).x;
                _2779 = _2778 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2779)
                {
                    frontier_phi_61_pred = _2763;
                    frontier_phi_61_pred_1 = _2768;
                    frontier_phi_61_pred_2 = _2767;
                    frontier_phi_61_pred_3 = _2766;
                    frontier_phi_61_pred_4 = _2765;
                    frontier_phi_61_pred_5 = _2764;
                }
                else
                {
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    uint _2893;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2778;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    for (;;)
                    {
                        uint _2897 = uint(findLSB(_2893)) + (_2769 << 5u);
                        uint _2894 = (_2893 + 4294967295u) & _2893;
                        uint _2899 = _2897 * 48u;
                        vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 3u)).x));
                        uint _2919 = (_2897 * 48u) + 4u;
                        vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 3u)).x));
                        uint _2938 = (_2897 * 48u) + 8u;
                        vec3 _2949 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x));
                        float _2953 = _2913.x - _2471;
                        float _2954 = _2913.y - _2472;
                        float _2955 = _2913.z - _2473;
                        float _2956 = dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955));
                        float _2959 = inversesqrt(_2956);
                        float _2960 = _2959 * _2953;
                        float _2961 = _2959 * _2954;
                        float _2962 = _2959 * _2955;
                        float _2963 = dot(vec3(_735, _738, _741), vec3(_2960, _2961, _2962));
                        float _2968 = 1.0 - (_2956 * _2913.w);
                        float _4281 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2969 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                        float _2970 = sqrt(_2956) * _2932.w;
                        float _2973 = 1.39999997615814208984375 / (_2970 + 1.39999997615814208984375);
                        float _2974 = _2973 * _2973;
                        float _2977 = ((1.0 - _2974) * _2963) + _2974;
                        float _2980 = _2970 * _2970;
                        float _2984 = ((isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))) * _2969) / ((_2980 * 0.699999988079071044921875) + 1.0);
                        float _2988 = (-0.0) - _2471;
                        float _2989 = (-0.0) - _2472;
                        float _2990 = (-0.0) - _2473;
                        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                        float _2995 = _2994 * _2988;
                        float _2996 = _2994 * _2989;
                        float _2997 = _2994 * _2990;
                        float _3005 = exp2(log2(1.0 / ((_2980 * 3.5) + 5.0)) * 0.25);
                        float _3006 = 1.0 - _810;
                        float _3013 = sqrt(1.0 - ((1.0 - (_3006 * _3006)) * (1.0 - (_3005 * _3005))));
                        float _3014 = _3013 * _3013;
                        float _3015 = _3014 * _3014;
                        float _3016 = _2995 + _2960;
                        float _3017 = _2996 + _2961;
                        float _3018 = _2997 + _2962;
                        float _3022 = inversesqrt(dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018)));
                        float _3026 = dot(vec3(_735, _738, _741), vec3(_2995, _2996, _2997));
                        float _4297 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3029 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                        float _3030 = dot(vec3(_735, _738, _741), vec3(_3022 * _3016, _3022 * _3017, _3022 * _3018));
                        float _4308 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3033 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _3037 = ((_3033 * _3033) * (_3015 + (-1.0))) + 1.0;
                        float _3038 = _2973 * _3014;
                        float _3039 = _3038 * _3038;
                        float _3042 = ((1.0 - _3039) * _2963) + _3039;
                        float _4319 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3043 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3044 = 1.0 - _3014;
                        float _3054 = (0.5 / (((_3043 * ((_3029 * _3044) + _3014)) + 9.9999999392252902907785028219223e-09) + (((_3043 * _3044) + _3014) * _3029))) * _3043;
                        float _4330 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3065 = (((_3015 * 3.1415927410125732421875) * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) / ((_3037 * _3037) * ((_2980 * 2.1991131305694580078125) + 3.141590118408203125))) * _2969;
                        _2822 = (_2984 * _2932.x) + _2890;
                        _2823 = (_2984 * _2932.y) + _2891;
                        _2824 = (_2984 * _2932.z) + _2892;
                        _2819 = (_3065 * _2949.x) + _2887;
                        _2820 = (_3065 * _2949.y) + _2888;
                        _2821 = (_3065 * _2949.z) + _2889;
                        if (_2894 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2894;
                        }
                    }
                    frontier_phi_61_pred = _2819;
                    frontier_phi_61_pred_1 = _2824;
                    frontier_phi_61_pred_2 = _2823;
                    frontier_phi_61_pred_3 = _2822;
                    frontier_phi_61_pred_4 = _2821;
                    frontier_phi_61_pred_5 = _2820;
                }
                _2619 = frontier_phi_61_pred;
                _2629 = frontier_phi_61_pred_1;
                _2627 = frontier_phi_61_pred_2;
                _2625 = frontier_phi_61_pred_3;
                _2623 = frontier_phi_61_pred_4;
                _2621 = frontier_phi_61_pred_5;
                uint _2770 = _2769 + 1u;
                if (_2770 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2763 = _2619;
                    _2764 = _2621;
                    _2765 = _2623;
                    _2766 = _2625;
                    _2767 = _2627;
                    _2768 = _2629;
                    _2769 = _2770;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
        }
        uvec4 _2632 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2633 = _2632.z;
        uint _2635 = (_2633 >> 8u) & 15u;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        if (((4294967295u << _2635) & _2517) == 0u)
        {
            _2731 = _2618;
            _2733 = _2620;
            _2735 = _2622;
            _2737 = _2624;
            _2739 = _2626;
            _2741 = _2628;
        }
        else
        {
            float _2756 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
            float _2757 = _2756 * _2471;
            float _2758 = _2756 * _2472;
            float _2759 = _2756 * _2473;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2635 < ((_2633 >> 12u) & 15u))
            {
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2870 = _2618;
                float _2871 = _2620;
                float _2872 = _2622;
                float _2873 = _2624;
                float _2874 = _2626;
                float _2875 = _2628;
                uint _2876 = _2635;
                uint _2885;
                bool _2886;
                for (;;)
                {
                    _2885 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2876 << 2u)) >> 2u)).x;
                    _2886 = _2885 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2886)
                    {
                        frontier_phi_67_pred = _2873;
                        frontier_phi_67_pred_1 = _2874;
                        frontier_phi_67_pred_2 = _2875;
                        frontier_phi_67_pred_3 = _2872;
                        frontier_phi_67_pred_4 = _2871;
                        frontier_phi_67_pred_5 = _2870;
                    }
                    else
                    {
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3083 = _2870;
                        float _3084 = _2871;
                        float _3085 = _2872;
                        float _3086 = _2873;
                        float _3087 = _2874;
                        float _3088 = _2875;
                        uint _3089 = _2885;
                        uint _3090;
                        vec4 _3115;
                        float _3116;
                        vec4 _3131;
                        vec3 _3143;
                        vec4 _3158;
                        vec4 _3174;
                        float _3220;
                        bool _3221;
                        for (;;)
                        {
                            uint _3100 = ((_2876 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3089));
                            _3090 = (_3089 + 4294967295u) & _3089;
                            uint _3102 = _3100 * 40u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            _3116 = _3115.w;
                            uint _3118 = (_3100 * 40u) + 4u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3133 = (_3100 * 40u) + 8u;
                            _3143 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x));
                            uint _3145 = (_3100 * 40u) + 16u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3161 = (_3100 * 40u) + 20u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3176 = (_3100 * 40u) + 24u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3195 = (_3100 * 40u) + 28u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            _3220 = fma(_2473, _3208.z, fma(_2472, _3208.y, _3208.x * _2471)) + _3208.w;
                            _3221 = !((fma(_2473, _3189.z, fma(_2472, _3189.y, _3189.x * _2471)) + _3189.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3221)
                            {
                                float _3248 = _3115.x - _2471;
                                float _3249 = _3115.y - _2472;
                                float _3250 = _3115.z - _2473;
                                float _3251 = dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250));
                                float _3254 = inversesqrt(_3251);
                                float _3255 = _3254 * _3248;
                                float _3256 = _3254 * _3249;
                                float _3257 = _3254 * _3250;
                                float _3261 = 1.0 - (_3251 / (_3116 * _3116));
                                float _4341 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3266 = sqrt(_3251) * _3131.w;
                                float _3268 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                                float _3269 = _3268 * _3268;
                                float _3272 = ((1.0 - _3269) * dot(vec3(_3255, _3256, _3257), vec3(_735, _738, _741))) + _3269;
                                float _3275 = _3266 * _3266;
                                float _3279 = (fma(_2473, _3158.z, fma(_2472, _3158.y, _3158.x * _2471)) + _3158.w) / _3220;
                                float _3280 = (fma(_2473, _3174.z, fma(_2472, _3174.y, _3174.x * _2471)) + _3174.w) / _3220;
                                float _3284 = 1.0 - dot(vec2(_3279, _3280), vec2(_3279, _3280));
                                float _4357 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3286 = _3285 * (((isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))) * _3262) / ((_3275 * 0.699999988079071044921875) + 1.0));
                                float _3298 = exp2(log2(1.0 / ((_3275 * 3.5) + 5.0)) * 0.25);
                                float _3299 = 1.0 - _810;
                                float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                                float _3307 = _3306 * _3306;
                                float _3308 = _3307 * _3307;
                                float _3309 = _3255 - _2757;
                                float _3310 = _3256 - _2758;
                                float _3311 = _3257 - _2759;
                                float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                                float _3319 = dot(vec3(_735, _738, _741), vec3((-0.0) - _2757, (-0.0) - _2758, (-0.0) - _2759));
                                float _4368 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3322 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3323 = dot(vec3(_735, _738, _741), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                                float _4379 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                                float _3331 = _3268 * _3307;
                                float _3332 = _3331 * _3331;
                                float _3338 = ((1.0 - _3332) * dot(vec3(_735, _738, _741), vec3(_3255, _3256, _3257))) + _3332;
                                float _4390 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3340 = 1.0 - _3307;
                                float _3350 = (0.5 / (((_3339 * ((_3322 * _3340) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3307) * _3322))) * _3339;
                                float _4401 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3360 = (_3285 * _3262) * (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) / ((_3330 * _3330) * ((_3275 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3360 * _3143.x;
                                frontier_phi_73_pred_1 = _3360 * _3143.y;
                                frontier_phi_73_pred_2 = _3286 * _3131.z;
                                frontier_phi_73_pred_3 = _3286 * _3131.y;
                                frontier_phi_73_pred_4 = _3286 * _3131.x;
                                frontier_phi_73_pred_5 = _3360 * _3143.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3364 = frontier_phi_73_pred;
                            _3365 = frontier_phi_73_pred_1;
                            _3369 = frontier_phi_73_pred_2;
                            _3368 = frontier_phi_73_pred_3;
                            _3367 = frontier_phi_73_pred_4;
                            _3366 = frontier_phi_73_pred_5;
                            _3073 = _3367 + _3086;
                            _3074 = _3368 + _3087;
                            _3075 = _3369 + _3088;
                            _3070 = _3364 + _3083;
                            _3071 = _3365 + _3084;
                            _3072 = _3366 + _3085;
                            if (_3090 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3090;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3073;
                        frontier_phi_67_pred_1 = _3074;
                        frontier_phi_67_pred_2 = _3075;
                        frontier_phi_67_pred_3 = _3072;
                        frontier_phi_67_pred_4 = _3071;
                        frontier_phi_67_pred_5 = _3070;
                    }
                    _2738 = frontier_phi_67_pred;
                    _2740 = frontier_phi_67_pred_1;
                    _2742 = frontier_phi_67_pred_2;
                    _2736 = frontier_phi_67_pred_3;
                    _2734 = frontier_phi_67_pred_4;
                    _2732 = frontier_phi_67_pred_5;
                    uint _2877 = _2876 + 1u;
                    if (_2877 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2870 = _2732;
                        _2871 = _2734;
                        _2872 = _2736;
                        _2873 = _2738;
                        _2874 = _2740;
                        _2875 = _2742;
                        _2876 = _2877;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2740;
                frontier_phi_55_56_ladder_1 = _2742;
                frontier_phi_55_56_ladder_2 = _2738;
                frontier_phi_55_56_ladder_3 = _2736;
                frontier_phi_55_56_ladder_4 = _2734;
                frontier_phi_55_56_ladder_5 = _2732;
            }
            else
            {
                frontier_phi_55_56_ladder = _2626;
                frontier_phi_55_56_ladder_1 = _2628;
                frontier_phi_55_56_ladder_2 = _2624;
                frontier_phi_55_56_ladder_3 = _2622;
                frontier_phi_55_56_ladder_4 = _2620;
                frontier_phi_55_56_ladder_5 = _2618;
            }
            _2731 = frontier_phi_55_56_ladder_5;
            _2733 = frontier_phi_55_56_ladder_4;
            _2735 = frontier_phi_55_56_ladder_3;
            _2737 = frontier_phi_55_56_ladder_2;
            _2739 = frontier_phi_55_56_ladder;
            _2741 = frontier_phi_55_56_ladder_1;
        }
        float _2746 = isnan(1.0) ? _794 : (isnan(_794) ? 1.0 : min(_794, 1.0));
        _2530 = (_2746 * _2737) + _1966;
        _2532 = (_2746 * _2739) + _1968;
        _2534 = (_2746 * _2741) + _1970;
        _2536 = ((_2731 * _778) * _2746) + _2311;
        _2538 = ((_2733 * _780) * _2746) + _2313;
        _2540 = ((_2735 * _781) * _2746) + _2315;
    }
    else
    {
        _2530 = _1966;
        _2532 = _1968;
        _2534 = _1970;
        _2536 = _2311;
        _2538 = _2313;
        _2540 = _2315;
    }
    float _4417 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4428 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4439 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    uint _2560 = _243 + 6u;
    float _2568 = _716 / cbSceneParam._m0[86u].x;
    float _2569 = _717 / cbSceneParam._m0[86u].y;
    vec4 _2583 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2568, _2569, (log2((isnan(cbSceneParam._m0[77u].w) ? _651 : (isnan(_651) ? cbSceneParam._m0[77u].w : min(_651, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2585 = _2583.x;
    float _2586 = _2583.y;
    float _2587 = _2583.z;
    float _2588 = _2583.w;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_651 > cbSceneParam._m0[78u].w)
    {
        float _2643 = isnan(_651) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _651 : min(cbSceneParam._m0[80u].w, _651));
        float _2644 = _2643 / _651;
        float _2655 = _2644 * _701;
        float _2656 = _702 * _2644;
        float _2657 = (-0.0) - _2656;
        float _2659 = _2644 * _703;
        float _2661 = (cbSceneParam._m0[77u].w * _2657) / _2643;
        float _2662 = _2661 + cbSceneParam._m0[79u].w;
        float _2663 = cbSceneParam._m0[79u].w - _2656;
        float _2669 = sqrt(((_2655 * _2655) + (_2656 * _2656)) + (_2659 * _2659));
        float _2672 = (1.0 - (cbSceneParam._m0[77u].w / _2643)) * _2669;
        float _2677 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2679 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2832;
        if (abs((_2657 - _2661) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2832 = ((((_2662 > 0.0) ? exp2(_2677 * _2662) : (2.0 - exp2(_2679 * _2662))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2672;
        }
        else
        {
            float _2792 = 1.0 / cbSceneParam._m0[80u].x;
            float _2793 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : max(_2662, _2663));
            float _2794 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : min(_2662, _2663));
            float _2803 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : min(_2793, 0.0));
            float _2804 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : min(_2794, 0.0));
            _2832 = ((abs(_2669 / _2657) * cbSceneParam._m0[80u].y) * ((((_2803 - _2804) * 2.0) - ((exp2(_2677 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0)))) - exp2(_2677 * (isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))))) * _2792)) - ((exp2(_2679 * _2803) - exp2(_2679 * _2804)) * _2792))) + (_2672 * cbSceneParam._m0[80u].z);
        }
        vec4 _2834 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2568, _2569, 1.0), 0.0);
        float _2843 = exp2((_2832 * (-1.44269502162933349609375)) * (1.0 - _2834.w));
        float _2844 = log2(_2843);
        float _2860 = log2(_2588);
        _2681 = (exp2(_2860 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].x)) * _2834.x) / cbSceneParam._m0[78u].x)) + _2585;
        _2683 = (exp2(_2860 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].y)) * _2834.y) / cbSceneParam._m0[78u].y)) + _2586;
        _2685 = (exp2(_2860 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].z)) * _2834.z) / cbSceneParam._m0[78u].z)) + _2587;
        _2687 = _2843 * _2588;
    }
    else
    {
        _2681 = _2585;
        _2683 = _2586;
        _2685 = _2587;
        _2687 = _2588;
    }
    float _2699 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2700 = _2699 == 3.0;
    float _2701 = log2(_2687);
    float _2708 = exp2(_2701 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2530 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _794))) + ((_2536 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1602)) * cbPerFrame._m0[3u].x));
    float _2709 = exp2(_2701 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2532 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _794))) + ((_2538 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1602)) * cbPerFrame._m0[3u].x));
    float _2710 = exp2(_2701 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2534 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _794))) + ((_2540 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1602)) * cbPerFrame._m0[3u].x));
    float _2719 = (_2699 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2719 * (_2700 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2681)));
    SV_Target.y = _2719 * (_2700 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2683)));
    SV_Target.z = _2719 * (_2700 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.w = cbInstanceData._m0[_2560].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2560].w;
}


