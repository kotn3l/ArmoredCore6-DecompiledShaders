#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1057;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _352 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _352) * cbMtdParam._m0[24u].y) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3670 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _377 = (_370 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _378 = (_370 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _379 = (_370 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _392 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _411 = _409.x;
    float _412 = _409.y;
    float _413 = _409.z;
    float _422 = ((_392.z - _413) * _370) + _413;
    float _425 = ((((_392.x - _411) * _370) + _411) * 2.0) + (-1.0);
    float _427 = ((((_392.y - _412) * _370) + _412) * 2.0) + (-1.0);
    float _428 = dot(vec2(_425, _427), vec2(_425, _427));
    float _3681 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _460 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _476 = _474.x;
    float _494 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _252) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _253) + cbTextureTilingScale._m0[9u].w)).x - _476) * _370) + _476;
    float _498 = ((_460.x - _494) * cbMtdParam._m0[19u].z) + _494;
    float _503 = cbMtdParam._m0[22u].x + _446.w;
    float _506 = fma(_433, _219 * NORMAL.x, fma(_427, _226 * TANGENT.x, (_212 * _204) * _425));
    float _509 = fma(_433, _219 * NORMAL.y, fma(_427, _226 * TANGENT.y, (_212 * _205) * _425));
    float _512 = fma(_433, _219 * NORMAL.z, fma(_427, _226 * TANGENT.z, (_212 * _206) * _425));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    float _517 = _516 * _506;
    float _518 = _516 * _509;
    float _519 = _516 * _512;
    float _3692 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _520 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3714 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3725 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3736 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3747 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _525 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _539 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _590 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _580);
    float _591 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _580);
    float _592 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _580);
    float _596 = inversesqrt(dot(vec3(_590, _591, _592), vec3(_590, _591, _592)));
    float _597 = _590 * _596;
    float _598 = _591 * _596;
    float _599 = _592 * _596;
    float _605 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _606 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _624 = fma(_519, cbSceneParam._m0[5u].z, fma(_518, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _517));
    float _627 = fma(_519, cbSceneParam._m0[6u].z, fma(_518, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _517));
    float _630 = fma(_519, cbSceneParam._m0[7u].z, fma(_518, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _517));
    uint _644 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _650 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_644].x;
    float _651 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * cbInstanceData._m0[_644].y;
    float _652 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_644].z;
    float _3758 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _656 = 1.0 - _525;
    float _657 = _653 * _656;
    float _658 = _654 * _656;
    float _659 = _655 * _656;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _525;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _525;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _525;
    float _667 = _664 + 0.039999999105930328369140625;
    float _669 = _665 + 0.039999999105930328369140625;
    float _670 = _666 + 0.039999999105930328369140625;
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _605, cbSceneParam._m0[86u].y * _606));
    float _683 = ((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * TEXCOORD_5.w) * _679.x;
    float _684 = dot(vec3(_517, _518, _519), vec3(_597, _598, _599));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _517) - _597;
    float _692 = (_687 * _518) - _598;
    float _693 = (_687 * _519) - _599;
    float _697 = abs(dot(vec3(_597, _598, _599), vec3(_517, _518, _519)));
    float _3791 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _699 = sqrt(_520);
    float _712 = exp2((_699 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_699 * 3.0));
    float _718 = (1.0 - _712) * ((_699 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _719 = _712 * _699;
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1056;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _781 = fma(_755, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747));
        float _785 = fma(_755, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747));
        float _789 = fma(_755, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747));
        float _814 = _747 + _517;
        float _815 = _751 + _518;
        float _816 = _755 + _519;
        float _826 = fma(_816, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814)) - _781;
        float _827 = fma(_816, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814)) - _785;
        float _828 = fma(_816, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814)) - _789;
        float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
        float _845 = ((_832 * _826) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_781 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_832 * _827) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_785 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_832 * _828) / cbModelParam._m0[34u].z) + ((((((_789 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        float _884 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_850.x + (-0.5));
        float _886 = _884 * (_850.y + (-0.5));
        float _887 = _884 * (_850.z + (-0.5));
        float _894 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_857.x + (-0.5));
        float _896 = _894 * (_857.y + (-0.5));
        float _897 = _894 * (_857.z + (-0.5));
        float _904 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_864.x + (-0.5));
        float _906 = _904 * (_864.y + (-0.5));
        float _907 = _904 * (_864.z + (-0.5));
        float _914 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_871.x + (-0.5));
        float _916 = _914 * (_871.y + (-0.5));
        float _917 = _914 * (_871.z + (-0.5));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = _885 * 0.5;
        float _922 = _895 * 0.5;
        float _923 = _905 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _938 = (dot(vec3(_517, _518, _519), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _948 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3839 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_950 + 1.0))) + _955) * _918;
        float _965 = _886 * 0.5;
        float _966 = _896 * 0.5;
        float _967 = _906 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_517, _518, _519), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3872 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_992 + 1.0))) + _997) * _919;
        float _1007 = _887 * 0.5;
        float _1008 = _897 * 0.5;
        float _1009 = _907 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_517, _518, _519), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3905 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1034 + 1.0))) + _1039) * _920;
        _1056 = _887;
        _1058 = _886;
        _1059 = _885;
        _1060 = _897;
        _1061 = _896;
        _1062 = _895;
        _1063 = _907;
        _1064 = _906;
        _1065 = _905;
        _1066 = _920;
        _1067 = _919;
        _1068 = _918;
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
    }
    else
    {
        _1056 = _1057;
        _1058 = _1057;
        _1059 = _1057;
        _1060 = _1057;
        _1061 = _1057;
        _1062 = _1057;
        _1063 = _1057;
        _1064 = _1057;
        _1065 = _1057;
        _1066 = _1057;
        _1067 = _1057;
        _1068 = _1057;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
    }
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1096 = fma(_755, cbModelParam._m0[30u].z, fma(_751, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _747));
        float _1100 = fma(_755, cbModelParam._m0[31u].z, fma(_751, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _747));
        float _1104 = fma(_755, cbModelParam._m0[32u].z, fma(_751, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _747));
        float _1127 = _747 + _517;
        float _1128 = _751 + _518;
        float _1129 = _755 + _519;
        float _1139 = fma(_1129, cbModelParam._m0[30u].z, fma(_1128, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1127)) - _1096;
        float _1140 = fma(_1129, cbModelParam._m0[31u].z, fma(_1128, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1127)) - _1100;
        float _1141 = fma(_1129, cbModelParam._m0[32u].z, fma(_1128, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1127)) - _1104;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1096 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1100 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[35u].z) + ((((((_1104 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1195 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1162.x + (-0.5));
        float _1197 = _1195 * (_1162.y + (-0.5));
        float _1198 = _1195 * (_1162.z + (-0.5));
        float _1205 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1169.x + (-0.5));
        float _1207 = _1205 * (_1169.y + (-0.5));
        float _1208 = _1205 * (_1169.z + (-0.5));
        float _1215 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1176.x + (-0.5));
        float _1217 = _1215 * (_1176.y + (-0.5));
        float _1218 = _1215 * (_1176.z + (-0.5));
        float _1225 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1183.x + (-0.5));
        float _1227 = _1225 * (_1183.y + (-0.5));
        float _1228 = _1225 * (_1183.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_517, _518, _519), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3968 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1259 + 1.0))) + _1264) * _1229;
        float _1274 = _1197 * 0.5;
        float _1275 = _1207 * 0.5;
        float _1276 = _1217 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_517, _518, _519), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4001 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1301 + 1.0))) + _1306) * _1230;
        float _1316 = _1198 * 0.5;
        float _1317 = _1208 * 0.5;
        float _1318 = _1218 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_517, _518, _519), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4034 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1343 + 1.0))) + _1348) * _1231;
        _1365 = _1198;
        _1366 = _1197;
        _1367 = _1196;
        _1368 = _1208;
        _1369 = _1207;
        _1370 = _1206;
        _1371 = _1218;
        _1372 = _1217;
        _1373 = _1216;
        _1374 = _1231;
        _1375 = _1230;
        _1376 = _1229;
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1057;
        _1366 = _1057;
        _1367 = _1057;
        _1368 = _1057;
        _1369 = _1057;
        _1370 = _1057;
        _1371 = _1057;
        _1372 = _1057;
        _1373 = _1057;
        _1374 = _1057;
        _1375 = _1057;
        _1376 = _1057;
        _1377 = 0.0;
        _1378 = 0.0;
        _1379 = 0.0;
    }
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1069)) + _1069;
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1070)) + _1070;
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1071)) + _1071;
    float _1412 = fma(_1391, cbSceneParam._m0[89u].z, fma(_1390, cbSceneParam._m0[89u].y, _1389 * cbSceneParam._m0[89u].x));
    float _1415 = fma(_1391, cbSceneParam._m0[90u].z, fma(_1390, cbSceneParam._m0[90u].y, _1389 * cbSceneParam._m0[90u].x));
    float _1418 = fma(_1391, cbSceneParam._m0[91u].z, fma(_1390, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1389));
    float _1433 = _691 * 0.5;
    float _1434 = _692 * 0.5;
    float _1435 = _693 * 0.5;
    float _1436 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1439 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1442 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1476;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1449 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1056, _1060, _1063, _1066));
        float _1453 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1457 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1464 = dot(vec4(cbModelParam._m0[39u]), vec4(_1433, _1434, _1435, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1464) ? 0.0 : (isnan(0.0) ? _1464 : max(0.0, _1464))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1487;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1478 = dot(vec4(cbModelParam._m0[40u]), vec4(_1433, _1434, _1435, 1.0));
        _1487 = dot(vec3(isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1487 = 1.0;
    }
    float _1491 = (_1487 * cbModelParam._m0[1u].x) + (_1476 * (1.0 - cbModelParam._m0[1u].x));
    float _1501 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _520);
    float _1502 = isnan(_1501) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1501 : min(cbModelParam._m0[25u].z, _1501));
    float _1584;
    float _1586;
    float _1588;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1551 = fma(_755, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747)) + cbModelParam._m0[13u].w;
        float _1555 = fma(_755, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747)) + cbModelParam._m0[14u].w;
        float _1559 = fma(_755, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747)) + cbModelParam._m0[15u].w;
        float _1562 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1565 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1568 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1596;
        if (_1562 > 0.0)
        {
            _1596 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1596 = frontier_phi_14_12_ladder;
        }
        float _1769;
        if (_1565 > 0.0)
        {
            _1769 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1769 = frontier_phi_23_19_ladder;
        }
        float _2064;
        if (_1568 > 0.0)
        {
            _2064 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2064 = frontier_phi_35_30_ladder;
        }
        float _2066 = isnan(_1769) ? _1596 : (isnan(_1596) ? _1769 : min(_1596, _1769));
        float _2067 = isnan(_2064) ? _2066 : (isnan(_2066) ? _2064 : min(_2066, _2064));
        float _2071 = (_2067 * _1562) + _1551;
        float _2072 = (_2067 * _1565) + _1555;
        float _2073 = (_2067 * _1568) + _1559;
        float _2074 = _2067 * 9.9999997473787516355514526367188e-05;
        float _2076 = (-1.0) - _2074;
        float _2078 = _2074 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2073 > _2078) || ((_2073 < _2076) || ((_2072 > _2078) || ((_2072 < _2076) || ((_2071 < _2076) || (_2071 > _2078))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2218 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2073, cbModelParam._m0[9u].z, fma(_2072, cbModelParam._m0[9u].y, _2071 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2073, cbModelParam._m0[10u].z, fma(_2072, cbModelParam._m0[10u].y, _2071 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2073, cbModelParam._m0[11u].z, fma(_2072, cbModelParam._m0[11u].y, _2071 * cbModelParam._m0[11u].x))), _1502);
            frontier_phi_13_35_ladder = _2218.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2218.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2218.x * cbModelParam._m0[1u].y;
        }
        _1584 = frontier_phi_13_35_ladder_2;
        _1586 = frontier_phi_13_35_ladder_1;
        _1588 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1572 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1502);
        _1584 = _1572.x * cbModelParam._m0[1u].y;
        _1586 = _1572.y * cbModelParam._m0[1u].y;
        _1588 = _1572.z * cbModelParam._m0[1u].y;
    }
    float _1592 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _520);
    float _1593 = isnan(_1592) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1592 : min(cbModelParam._m0[25u].w, _1592));
    float _1684;
    float _1686;
    float _1688;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1648 = fma(_755, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747)) + cbModelParam._m0[21u].w;
        float _1652 = fma(_755, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747)) + cbModelParam._m0[22u].w;
        float _1656 = fma(_755, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747)) + cbModelParam._m0[23u].w;
        float _1659 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1662 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1665 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1774;
        if (_1659 > 0.0)
        {
            _1774 = abs((1.0 - _1648) / _1659);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1648 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1774 = frontier_phi_25_21_ladder;
        }
        float _2091;
        if (_1662 > 0.0)
        {
            _2091 = abs((1.0 - _1652) / _1662);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1652 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2091 = frontier_phi_37_32_ladder;
        }
        float _2429;
        if (_1665 > 0.0)
        {
            _2429 = abs((1.0 - _1656) / _1665);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1656 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2429 = frontier_phi_47_44_ladder;
        }
        float _2431 = isnan(_2091) ? _1774 : (isnan(_1774) ? _2091 : min(_1774, _2091));
        float _2432 = isnan(_2429) ? _2431 : (isnan(_2431) ? _2429 : min(_2431, _2429));
        float _2436 = (_2432 * _1659) + _1648;
        float _2437 = (_2432 * _1662) + _1652;
        float _2438 = (_2432 * _1665) + _1656;
        float _2439 = _2432 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2439;
        float _2442 = _2439 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2438 > _2442) || ((_2438 < _2440) || ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 < _2440) || (_2436 > _2442))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2438, cbModelParam._m0[17u].z, fma(_2437, cbModelParam._m0[17u].y, _2436 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2438, cbModelParam._m0[18u].z, fma(_2437, cbModelParam._m0[18u].y, _2436 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2438, cbModelParam._m0[19u].z, fma(_2437, cbModelParam._m0[19u].y, _2436 * cbModelParam._m0[19u].x))), _1593);
            frontier_phi_22_47_ladder = _2560.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2560.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2560.x * cbModelParam._m0[1u].z;
        }
        _1684 = frontier_phi_22_47_ladder_2;
        _1686 = frontier_phi_22_47_ladder_1;
        _1688 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1593);
        _1684 = _1668.x * cbModelParam._m0[1u].z;
        _1686 = _1668.y * cbModelParam._m0[1u].z;
        _1688 = _1668.z * cbModelParam._m0[1u].z;
    }
    float _1701 = (((_718 * _667) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1684 - _1584)) + _1584);
    float _1703 = (((_718 * _669) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1686 - _1586)) + _1586);
    float _1705 = (((_718 * _670) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1688 - _1588)) + _1588);
    float _1708 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1701 * cbSceneParam._m0[89u].x));
    float _1711 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1701 * cbSceneParam._m0[90u].x));
    float _1714 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, _1701 * cbSceneParam._m0[91u].x));
    float _1748 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1752 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1756 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1760 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1761 = _1748 / _1760;
    float _1762 = _1752 / _1760;
    float _1763 = _1756 / _1760;
    float _1910;
    float _1911;
    float _1912;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1790 = ((uint(_1763 > cbSceneParam._m0[59u].y) + uint(_1763 > cbSceneParam._m0[59u].x)) + uint(_1763 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1791 = _1790 + 43u;
        uint _1799 = _1790 + 44u;
        uint _1807 = _1790 + 45u;
        uint _1815 = _1790 + 46u;
        float _1826 = fma(_1760, cbSceneParam._m0[_1791].w, fma(_1756, cbSceneParam._m0[_1791].z, fma(_1752, cbSceneParam._m0[_1791].y, _1748 * cbSceneParam._m0[_1791].x)));
        float _1830 = fma(_1760, cbSceneParam._m0[_1799].w, fma(_1756, cbSceneParam._m0[_1799].z, fma(_1752, cbSceneParam._m0[_1799].y, _1748 * cbSceneParam._m0[_1799].x)));
        float _1838 = fma(_1760, cbSceneParam._m0[_1815].w, fma(_1756, cbSceneParam._m0[_1815].z, fma(_1752, cbSceneParam._m0[_1815].y, _1748 * cbSceneParam._m0[_1815].x)));
        float _1843 = cbSceneParam._m0[33u].z * _1838;
        float _1845 = cbSceneParam._m0[33u].w * _1838;
        float _1848 = fma(_1760, cbSceneParam._m0[_1807].w, fma(_1756, cbSceneParam._m0[_1807].z, fma(_1752, cbSceneParam._m0[_1807].y, _1748 * cbSceneParam._m0[_1807].x))) / _1838;
        float _1896 = (cbSceneParam._m0[33u].x - sqrt(((_1762 * _1762) + (_1761 * _1761)) + (_1763 * _1763))) * cbSceneParam._m0[33u].y;
        float _4160 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1903 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 + _1826) / _1838, (_1845 + _1830) / _1838), _1848), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1845 + _1826) / _1838, (_1830 - _1843) / _1838), _1848), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1826 - _1843) / _1838, (_1830 - _1845) / _1838), _1848), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1826 - _1845) / _1838, (_1843 + _1830) / _1838), _1848), 0.0)).x), vec4(0.25)));
        _1910 = 1.0 - (_1903 * cbSceneParam._m0[34u].x);
        _1911 = 1.0 - (_1903 * cbSceneParam._m0[34u].y);
        _1912 = 1.0 - (_1903 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1910 = 1.0;
        _1911 = 1.0;
        _1912 = 1.0;
    }
    float _1976;
    float _1978;
    float _1980;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1964 = fma(_1760, cbSceneParam._m0[63u].w, fma(_1756, cbSceneParam._m0[63u].z, fma(_1752, cbSceneParam._m0[63u].y, _1748 * cbSceneParam._m0[63u].x)));
        float _1965 = fma(_1760, cbSceneParam._m0[60u].w, fma(_1756, cbSceneParam._m0[60u].z, fma(_1752, cbSceneParam._m0[60u].y, _1748 * cbSceneParam._m0[60u].x))) / _1964;
        float _1966 = fma(_1760, cbSceneParam._m0[61u].w, fma(_1756, cbSceneParam._m0[61u].z, fma(_1752, cbSceneParam._m0[61u].y, _1748 * cbSceneParam._m0[61u].x))) / _1964;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1965 >= cbSceneParam._m0[64u].x) && (_1966 >= cbSceneParam._m0[64u].y)) && (_1965 <= cbSceneParam._m0[64u].z)) && (_1966 <= cbSceneParam._m0[64u].w))
        {
            float _2104 = fma(_1760, cbSceneParam._m0[62u].w, fma(_1756, cbSceneParam._m0[62u].z, fma(_1752, cbSceneParam._m0[62u].y, _1748 * cbSceneParam._m0[62u].x))) / _1964;
            float _2108 = isnan(cbSceneParam._m0[41u].w) ? _2104 : (isnan(_2104) ? cbSceneParam._m0[41u].w : max(_2104, cbSceneParam._m0[41u].w));
            float _2151 = (cbSceneParam._m0[33u].x - sqrt(((_1762 * _1762) + (_1761 * _1761)) + (_1763 * _1763))) * cbSceneParam._m0[33u].y;
            float _4176 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
            float _2158 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1965, cbSceneParam._m0[33u].w + _1966), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1965, _1966 - cbSceneParam._m0[33u].z), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1965 - cbSceneParam._m0[33u].z, _1966 - cbSceneParam._m0[33u].w), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1965 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1966), _2108), 0.0)).x), vec4(0.25)));
            float _2162 = 1.0 - (_2158 * cbSceneParam._m0[34u].x);
            float _2163 = 1.0 - (_2158 * cbSceneParam._m0[34u].y);
            float _2164 = 1.0 - (_2158 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2164) ? _1912 : (isnan(_1912) ? _2164 : min(_1912, _2164));
            frontier_phi_34_33_ladder_1 = isnan(_2163) ? _1911 : (isnan(_1911) ? _2163 : min(_1911, _2163));
            frontier_phi_34_33_ladder_2 = isnan(_2162) ? _1910 : (isnan(_1910) ? _2162 : min(_1910, _2162));
        }
        else
        {
            frontier_phi_34_33_ladder = _1912;
            frontier_phi_34_33_ladder_1 = _1911;
            frontier_phi_34_33_ladder_2 = _1910;
        }
        _1976 = frontier_phi_34_33_ladder_2;
        _1978 = frontier_phi_34_33_ladder_1;
        _1980 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1976 = _1910;
        _1978 = _1911;
        _1980 = _1912;
    }
    uvec4 _1985 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1987 = _1985.x * 14u;
    uint _1988 = _1987 + 13u;
    float _1995 = _683 + (-1.0);
    float _2000 = (cbLight._m0[_1988].x * _1995) + 1.0;
    float _2001 = (cbLight._m0[_1988].y * _1995) + 1.0;
    float _2002 = (cbLight._m0[_1988].z * _1995) + 1.0;
    float _2003 = (cbLight._m0[_1988].w * _1995) + 1.0;
    uint _2004 = _1987 + 5u;
    float _2010 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2014 = _1987 + 4u;
    float _2023 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2027 = _1987 | 1u;
    float _2038 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_517, _518, _519));
    float _2041 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_517, _518, _519));
    float _4212 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _4223 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2046 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * 0.3183098733425140380859375;
    float _2048 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.3183098733425140380859375;
    float _2055 = ((cbLight._m0[_2004].x * _2010) * _2048) + (((cbLight._m0[_2014].x * _1976) * _2023) * _2046);
    float _2056 = ((_2010 * cbLight._m0[_2004].y) * _2048) + (((cbLight._m0[_2014].y * _1978) * _2023) * _2046);
    float _2057 = ((_2010 * cbLight._m0[_2004].z) * _2048) + (((cbLight._m0[_2014].z * _1980) * _2023) * _2046);
    uvec4 _2061 = floatBitsToUint(cbLight._m0[_1987 + 12u]);
    bool _2063 = _2061.x == 0u;
    float _2165;
    float _2167;
    float _2169;
    if (_2063)
    {
        _2165 = _2055;
        _2167 = _2056;
        _2169 = _2057;
    }
    else
    {
        uint _2173 = _1987 + 6u;
        float _2189 = (dot(vec3(cbLight._m0[_1987 + 2u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2190 = _2189 * _2189;
        float _4234 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2191 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2192 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2165 = (((cbLight._m0[_2173].x * 0.3183098733425140380859375) * _2191) * _2192) + _2055;
        _2167 = (((cbLight._m0[_2173].y * 0.3183098733425140380859375) * _2191) * _2192) + _2056;
        _2169 = (((cbLight._m0[_2173].z * 0.3183098733425140380859375) * _2191) * _2192) + _2057;
    }
    bool _2172 = _2061.y == 0u;
    float _2227;
    float _2229;
    float _2231;
    if (_2172)
    {
        _2227 = _2165;
        _2229 = _2167;
        _2231 = _2169;
    }
    else
    {
        uint _2400 = _1987 + 7u;
        float _2416 = (dot(vec3(cbLight._m0[_1987 + 3u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2417 = _2416 * _2416;
        float _4250 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2418 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2419 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2227 = (((cbLight._m0[_2400].x * 0.3183098733425140380859375) * _2418) * _2419) + _2165;
        _2229 = (((cbLight._m0[_2400].y * 0.3183098733425140380859375) * _2418) * _2419) + _2167;
        _2231 = (((cbLight._m0[_2400].z * 0.3183098733425140380859375) * _2418) * _2419) + _2169;
    }
    uint _2234 = _1987 + 8u;
    float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1987].w)) * _520) * 0.949999988079071044921875);
    float _2248 = _2247 * _2247;
    float _2249 = cbLight._m0[_1987].x + _597;
    float _2250 = cbLight._m0[_1987].y + _598;
    float _2251 = cbLight._m0[_1987].z + _599;
    float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
    float _2256 = _2255 * _2249;
    float _2257 = _2255 * _2250;
    float _2258 = _2255 * _2251;
    float _2259 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1987].xyz));
    float _4266 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _4277 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2263 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2264 = dot(vec3(_517, _518, _519), vec3(_2256, _2257, _2258));
    float _4288 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2268 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_2256, _2257, _2258));
    float _4299 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2272 = _2248 * _2248;
    float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
    float _2284 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
    float _2285 = 0.959999978542327880859375 - _664;
    float _2287 = 0.959999978542327880859375 - _665;
    float _2288 = 0.959999978542327880859375 - _666;
    float _2295 = 1.0 - _2248;
    float _2306 = (0.5 / (((_2263 * ((_2262 * _2295) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2295) + _2248) * _2262))) * _2262;
    float _4310 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2308 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
    uint _2322 = _1987 + 9u;
    float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _520) * 0.949999988079071044921875);
    float _2334 = _2333 * _2333;
    float _2335 = cbLight._m0[_2027].x + _597;
    float _2336 = cbLight._m0[_2027].y + _598;
    float _2337 = cbLight._m0[_2027].z + _599;
    float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
    float _2342 = _2341 * _2335;
    float _2343 = _2341 * _2336;
    float _2344 = _2341 * _2337;
    float _2345 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2027].xyz));
    float _4321 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2349 = dot(vec3(_517, _518, _519), vec3(_2342, _2343, _2344));
    float _4332 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2353 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2342, _2343, _2344));
    float _4343 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2357 = _2334 * _2334;
    float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
    float _2368 = exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0);
    float _2375 = 1.0 - _2334;
    float _2385 = (0.5 / (((_2263 * ((_2348 * _2375) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2375) + _2334) * _2348))) * _2348;
    float _4354 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2387 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
    float _2397 = (((((_2368 * _2285) + _667) * cbLight._m0[_2322].x) * _2387) * _2010) + ((((cbLight._m0[_2234].x * _1976) * ((_2284 * _2285) + _667)) * _2308) * _2023);
    float _2398 = (((((_2368 * _2287) + _669) * cbLight._m0[_2322].y) * _2387) * _2010) + ((((cbLight._m0[_2234].y * _1978) * ((_2284 * _2287) + _669)) * _2308) * _2023);
    float _2399 = (((((_2368 * _2288) + _670) * cbLight._m0[_2322].z) * _2387) * _2010) + ((((cbLight._m0[_2234].z * _1980) * ((_2284 * _2288) + _670)) * _2308) * _2023);
    float _2455;
    float _2457;
    float _2459;
    if (_2063)
    {
        _2455 = _2397;
        _2457 = _2398;
        _2459 = _2399;
    }
    else
    {
        uint _2461 = _1987 + 2u;
        uint _2465 = _1987 + 10u;
        float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _520) * 0.949999988079071044921875);
        float _2480 = _2479 * _2479;
        float _2481 = cbLight._m0[_2461].x + _597;
        float _2482 = cbLight._m0[_2461].y + _598;
        float _2483 = cbLight._m0[_2461].z + _599;
        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
        float _2488 = _2487 * _2481;
        float _2489 = _2487 * _2482;
        float _2490 = _2487 * _2483;
        float _2491 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2461].xyz));
        float _4365 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2495 = dot(vec3(_517, _518, _519), vec3(_2488, _2489, _2490));
        float _4376 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2499 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2488, _2489, _2490));
        float _4387 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2503 = _2480 * _2480;
        float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
        float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0);
        float _2521 = 1.0 - _2480;
        float _2531 = (0.5 / (((_2263 * ((_2494 * _2521) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2521) + _2480) * _2494))) * _2494;
        float _4398 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2533 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
        float _2534 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2455 = (((((_2514 * _2285) + _667) * cbLight._m0[_2465].x) * _2533) * _2534) + _2397;
        _2457 = (((((_2514 * _2287) + _669) * cbLight._m0[_2465].y) * _2533) * _2534) + _2398;
        _2459 = (((((_2514 * _2288) + _670) * cbLight._m0[_2465].z) * _2533) * _2534) + _2399;
    }
    float _2565;
    float _2567;
    float _2569;
    if (_2172)
    {
        _2565 = _2455;
        _2567 = _2457;
        _2569 = _2459;
    }
    else
    {
        uint _2576 = _1987 + 3u;
        uint _2580 = _1987 + 11u;
        float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2576].w)) * _520) * 0.949999988079071044921875);
        float _2595 = _2594 * _2594;
        float _2596 = cbLight._m0[_2576].x + _597;
        float _2597 = cbLight._m0[_2576].y + _598;
        float _2598 = cbLight._m0[_2576].z + _599;
        float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
        float _2603 = _2602 * _2596;
        float _2604 = _2602 * _2597;
        float _2605 = _2602 * _2598;
        float _2606 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2576].xyz));
        float _4414 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2610 = dot(vec3(_517, _518, _519), vec3(_2603, _2604, _2605));
        float _4425 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2614 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_2603, _2604, _2605));
        float _4436 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2618 = _2595 * _2595;
        float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
        float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
        float _2636 = 1.0 - _2595;
        float _2646 = (0.5 / (((_2263 * ((_2609 * _2636) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2636) + _2595) * _2609))) * _2609;
        float _4447 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2648 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
        float _2649 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2565 = (((((_2629 * _2285) + _667) * cbLight._m0[_2580].x) * _2648) * _2649) + _2455;
        _2567 = (((((_2629 * _2287) + _669) * cbLight._m0[_2580].y) * _2648) * _2649) + _2457;
        _2569 = (((((_2629 * _2288) + _670) * cbLight._m0[_2580].z) * _2648) * _2649) + _2459;
    }
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    if (_1985.y == 0u)
    {
        uvec4 _2670 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2671 = _2670.x;
        uint _2682 = uint((float(_2670.y) * floor(float(uint(cbSceneParam._m0[85u].y * _606) / _2671))) + floor(float(uint(cbSceneParam._m0[85u].x * _605) / _2671)));
        float _2692 = (log2(_1763 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2693 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        uint _2696 = uint(isnan(14.0) ? _2693 : (isnan(_2693) ? 14.0 : min(_2693, 14.0)));
        uvec4 _2701 = texelFetch(g_lightClusterGridBuffer, int(((_2696 << 2u) + (_2682 << 6u)) >> 2u));
        uint _2702 = _2701.x;
        uint _2703 = _2670.z;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        if (((((1u << ((_2703 >> 4u) & 15u)) + 4294967295u) & _2702) == 0u) || ((_2703 & 240u) == 0u))
        {
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
        }
        else
        {
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            uint _2933 = 0u;
            uint _2942;
            bool _2943;
            for (;;)
            {
                _2942 = texelFetch(g_lightClassification, int((((_2696 << 5u) + (_2682 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                _2943 = _2942 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2943)
                {
                    frontier_phi_66_pred = _2932;
                    frontier_phi_66_pred_1 = _2931;
                    frontier_phi_66_pred_2 = _2930;
                    frontier_phi_66_pred_3 = _2929;
                    frontier_phi_66_pred_4 = _2928;
                    frontier_phi_66_pred_5 = _2927;
                }
                else
                {
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    uint _3057;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2942;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    for (;;)
                    {
                        uint _3061 = uint(findLSB(_3057)) + (_2933 << 5u);
                        uint _3058 = (_3057 + 4294967295u) & _3057;
                        uint _3063 = _3061 * 48u;
                        vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 3u)).x));
                        uint _3083 = (_3061 * 48u) + 4u;
                        vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3102 = (_3061 * 48u) + 8u;
                        vec3 _3113 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x));
                        float _3117 = _3077.x - _1761;
                        float _3118 = _3077.y - _1762;
                        float _3119 = _3077.z - _1763;
                        float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                        float _3123 = inversesqrt(_3120);
                        float _3124 = _3123 * _3117;
                        float _3125 = _3123 * _3118;
                        float _3126 = _3123 * _3119;
                        float _3127 = dot(vec3(_624, _627, _630), vec3(_3124, _3125, _3126));
                        float _3132 = 1.0 - (_3120 * _3077.w);
                        float _4473 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3133 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3134 = sqrt(_3120) * _3096.w;
                        float _3137 = 1.39999997615814208984375 / (_3134 + 1.39999997615814208984375);
                        float _3138 = _3137 * _3137;
                        float _3141 = ((1.0 - _3138) * _3127) + _3138;
                        float _3144 = _3134 * _3134;
                        float _3148 = ((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3133) / ((_3144 * 0.699999988079071044921875) + 1.0);
                        float _3152 = (-0.0) - _1761;
                        float _3153 = (-0.0) - _1762;
                        float _3154 = (-0.0) - _1763;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3168 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                        float _3169 = 1.0 - _699;
                        float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                        float _3177 = _3176 * _3176;
                        float _3178 = _3177 * _3177;
                        float _3179 = _3159 + _3124;
                        float _3180 = _3160 + _3125;
                        float _3181 = _3161 + _3126;
                        float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                        float _3189 = dot(vec3(_624, _627, _630), vec3(_3159, _3160, _3161));
                        float _4489 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3192 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3193 = dot(vec3(_624, _627, _630), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                        float _4500 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3196 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                        float _3201 = _3137 * _3177;
                        float _3202 = _3201 * _3201;
                        float _3205 = ((1.0 - _3202) * _3127) + _3202;
                        float _4511 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3207 = 1.0 - _3177;
                        float _3217 = (0.5 / (((_3206 * ((_3192 * _3207) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3206 * _3207) + _3177) * _3192))) * _3206;
                        float _4522 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3228 = (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) / ((_3200 * _3200) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125))) * _3133;
                        _2986 = (_3148 * _3096.x) + _3054;
                        _2987 = (_3148 * _3096.y) + _3055;
                        _2988 = (_3148 * _3096.z) + _3056;
                        _2983 = (_3228 * _3113.x) + _3051;
                        _2984 = (_3228 * _3113.y) + _3052;
                        _2985 = (_3228 * _3113.z) + _3053;
                        if (_3058 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _3058;
                        }
                    }
                    frontier_phi_66_pred = _2988;
                    frontier_phi_66_pred_1 = _2987;
                    frontier_phi_66_pred_2 = _2986;
                    frontier_phi_66_pred_3 = _2985;
                    frontier_phi_66_pred_4 = _2984;
                    frontier_phi_66_pred_5 = _2983;
                }
                _2793 = frontier_phi_66_pred;
                _2791 = frontier_phi_66_pred_1;
                _2789 = frontier_phi_66_pred_2;
                _2787 = frontier_phi_66_pred_3;
                _2785 = frontier_phi_66_pred_4;
                _2783 = frontier_phi_66_pred_5;
                uint _2934 = _2933 + 1u;
                if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2927 = _2783;
                    _2928 = _2785;
                    _2929 = _2787;
                    _2930 = _2789;
                    _2931 = _2791;
                    _2932 = _2793;
                    _2933 = _2934;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
        }
        uvec4 _2796 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2797 = _2796.z;
        uint _2799 = (_2797 >> 8u) & 15u;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        if (((4294967295u << _2799) & _2702) == 0u)
        {
            _2895 = _2782;
            _2897 = _2784;
            _2899 = _2786;
            _2901 = _2788;
            _2903 = _2790;
            _2905 = _2792;
        }
        else
        {
            float _2920 = inversesqrt(dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763)));
            float _2921 = _2920 * _1761;
            float _2922 = _2920 * _1762;
            float _2923 = _2920 * _1763;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2799 < ((_2797 >> 12u) & 15u))
            {
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _3034 = _2782;
                float _3035 = _2784;
                float _3036 = _2786;
                float _3037 = _2788;
                float _3038 = _2790;
                float _3039 = _2792;
                uint _3040 = _2799;
                uint _3049;
                bool _3050;
                for (;;)
                {
                    _3049 = texelFetch(g_lightClassification, int((((_2696 << 5u) + (_2682 << 9u)) + (_3040 << 2u)) >> 2u)).x;
                    _3050 = _3049 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3050)
                    {
                        frontier_phi_72_pred = _3039;
                        frontier_phi_72_pred_1 = _3038;
                        frontier_phi_72_pred_2 = _3037;
                        frontier_phi_72_pred_3 = _3036;
                        frontier_phi_72_pred_4 = _3035;
                        frontier_phi_72_pred_5 = _3034;
                    }
                    else
                    {
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3246 = _3034;
                        float _3247 = _3035;
                        float _3248 = _3036;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        uint _3252 = _3049;
                        uint _3253;
                        vec4 _3278;
                        float _3279;
                        vec4 _3294;
                        vec3 _3306;
                        vec4 _3321;
                        vec4 _3337;
                        float _3383;
                        bool _3384;
                        for (;;)
                        {
                            uint _3263 = ((_3040 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3252));
                            _3253 = (_3252 + 4294967295u) & _3252;
                            uint _3265 = _3263 * 40u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            _3279 = _3278.w;
                            uint _3281 = (_3263 * 40u) + 4u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3296 = (_3263 * 40u) + 8u;
                            _3306 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x));
                            uint _3308 = (_3263 * 40u) + 16u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3324 = (_3263 * 40u) + 20u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3339 = (_3263 * 40u) + 24u;
                            vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3358 = (_3263 * 40u) + 28u;
                            vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            _3383 = fma(_1763, _3371.z, fma(_1762, _3371.y, _3371.x * _1761)) + _3371.w;
                            _3384 = !((fma(_1763, _3352.z, fma(_1762, _3352.y, _3352.x * _1761)) + _3352.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3384)
                            {
                                float _3411 = _3278.x - _1761;
                                float _3412 = _3278.y - _1762;
                                float _3413 = _3278.z - _1763;
                                float _3414 = dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413));
                                float _3417 = inversesqrt(_3414);
                                float _3418 = _3417 * _3411;
                                float _3419 = _3417 * _3412;
                                float _3420 = _3417 * _3413;
                                float _3424 = 1.0 - (_3414 / (_3279 * _3279));
                                float _4533 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3425 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3429 = sqrt(_3414) * _3294.w;
                                float _3431 = 1.39999997615814208984375 / (_3429 + 1.39999997615814208984375);
                                float _3432 = _3431 * _3431;
                                float _3435 = ((1.0 - _3432) * dot(vec3(_3418, _3419, _3420), vec3(_624, _627, _630))) + _3432;
                                float _3438 = _3429 * _3429;
                                float _3442 = (fma(_1763, _3321.z, fma(_1762, _3321.y, _3321.x * _1761)) + _3321.w) / _3383;
                                float _3443 = (fma(_1763, _3337.z, fma(_1762, _3337.y, _3337.x * _1761)) + _3337.w) / _3383;
                                float _3447 = 1.0 - dot(vec2(_3442, _3443), vec2(_3442, _3443));
                                float _4549 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3449 = _3448 * (((isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0))) * _3425) / ((_3438 * 0.699999988079071044921875) + 1.0));
                                float _3461 = exp2(log2(1.0 / ((_3438 * 3.5) + 5.0)) * 0.25);
                                float _3462 = 1.0 - _699;
                                float _3469 = sqrt(1.0 - ((1.0 - (_3462 * _3462)) * (1.0 - (_3461 * _3461))));
                                float _3470 = _3469 * _3469;
                                float _3471 = _3470 * _3470;
                                float _3472 = _3418 - _2921;
                                float _3473 = _3419 - _2922;
                                float _3474 = _3420 - _2923;
                                float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                                float _3482 = dot(vec3(_624, _627, _630), vec3((-0.0) - _2921, (-0.0) - _2922, (-0.0) - _2923));
                                float _4560 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3485 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3486 = dot(vec3(_624, _627, _630), vec3(_3478 * _3472, _3478 * _3473, _3478 * _3474));
                                float _4571 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3493 = ((_3489 * _3489) * (_3471 + (-1.0))) + 1.0;
                                float _3494 = _3431 * _3470;
                                float _3495 = _3494 * _3494;
                                float _3501 = ((1.0 - _3495) * dot(vec3(_624, _627, _630), vec3(_3418, _3419, _3420))) + _3495;
                                float _4582 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3503 = 1.0 - _3470;
                                float _3513 = (0.5 / (((_3502 * ((_3485 * _3503) + _3470)) + 9.9999999392252902907785028219223e-09) + (((_3502 * _3503) + _3470) * _3485))) * _3502;
                                float _4593 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3523 = (_3448 * _3425) * (((_3471 * 3.1415927410125732421875) * (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) / ((_3493 * _3493) * ((_3438 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3449 * _3294.y;
                                frontier_phi_78_pred_1 = _3449 * _3294.x;
                                frontier_phi_78_pred_2 = _3523 * _3306.z;
                                frontier_phi_78_pred_3 = _3523 * _3306.y;
                                frontier_phi_78_pred_4 = _3523 * _3306.x;
                                frontier_phi_78_pred_5 = _3449 * _3294.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3531 = frontier_phi_78_pred;
                            _3530 = frontier_phi_78_pred_1;
                            _3529 = frontier_phi_78_pred_2;
                            _3528 = frontier_phi_78_pred_3;
                            _3527 = frontier_phi_78_pred_4;
                            _3532 = frontier_phi_78_pred_5;
                            _3236 = _3530 + _3249;
                            _3237 = _3531 + _3250;
                            _3238 = _3532 + _3251;
                            _3233 = _3527 + _3246;
                            _3234 = _3528 + _3247;
                            _3235 = _3529 + _3248;
                            if (_3253 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3253;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3238;
                        frontier_phi_72_pred_1 = _3237;
                        frontier_phi_72_pred_2 = _3236;
                        frontier_phi_72_pred_3 = _3235;
                        frontier_phi_72_pred_4 = _3234;
                        frontier_phi_72_pred_5 = _3233;
                    }
                    _2906 = frontier_phi_72_pred;
                    _2904 = frontier_phi_72_pred_1;
                    _2902 = frontier_phi_72_pred_2;
                    _2900 = frontier_phi_72_pred_3;
                    _2898 = frontier_phi_72_pred_4;
                    _2896 = frontier_phi_72_pred_5;
                    uint _3041 = _3040 + 1u;
                    if (_3041 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3034 = _2896;
                        _3035 = _2898;
                        _3036 = _2900;
                        _3037 = _2902;
                        _3038 = _2904;
                        _3039 = _2906;
                        _3040 = _3041;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2906;
                frontier_phi_60_61_ladder_1 = _2904;
                frontier_phi_60_61_ladder_2 = _2900;
                frontier_phi_60_61_ladder_3 = _2898;
                frontier_phi_60_61_ladder_4 = _2896;
                frontier_phi_60_61_ladder_5 = _2902;
            }
            else
            {
                frontier_phi_60_61_ladder = _2792;
                frontier_phi_60_61_ladder_1 = _2790;
                frontier_phi_60_61_ladder_2 = _2786;
                frontier_phi_60_61_ladder_3 = _2784;
                frontier_phi_60_61_ladder_4 = _2782;
                frontier_phi_60_61_ladder_5 = _2788;
            }
            _2895 = frontier_phi_60_61_ladder_4;
            _2897 = frontier_phi_60_61_ladder_3;
            _2899 = frontier_phi_60_61_ladder_2;
            _2901 = frontier_phi_60_61_ladder_5;
            _2903 = frontier_phi_60_61_ladder_1;
            _2905 = frontier_phi_60_61_ladder;
        }
        float _2910 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2715 = (_2910 * _2901) + _2227;
        _2717 = (_2910 * _2903) + _2229;
        _2719 = (_2910 * _2905) + _2231;
        _2721 = ((_2895 * _667) * _2910) + _2565;
        _2723 = ((_2897 * _669) * _2910) + _2567;
        _2725 = ((_2899 * _670) * _2910) + _2569;
    }
    else
    {
        _2715 = _2227;
        _2717 = _2229;
        _2719 = _2231;
        _2721 = _2565;
        _2723 = _2567;
        _2725 = _2569;
    }
    float _4609 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4620 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4631 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    uint _2745 = _232 + 6u;
    float _2753 = _605 / cbSceneParam._m0[86u].x;
    float _2754 = _606 / cbSceneParam._m0[86u].y;
    vec4 _2768 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2753, _2754, (log2((isnan(cbSceneParam._m0[77u].w) ? _539 : (isnan(_539) ? cbSceneParam._m0[77u].w : min(_539, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2770 = _2768.x;
    float _2771 = _2768.y;
    float _2772 = _2768.z;
    float _2773 = _2768.w;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    if (_539 > cbSceneParam._m0[78u].w)
    {
        float _2807 = isnan(_539) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _539 : min(cbSceneParam._m0[80u].w, _539));
        float _2808 = _2807 / _539;
        float _2819 = _2808 * _590;
        float _2820 = _591 * _2808;
        float _2821 = (-0.0) - _2820;
        float _2823 = _2808 * _592;
        float _2825 = (cbSceneParam._m0[77u].w * _2821) / _2807;
        float _2826 = _2825 + cbSceneParam._m0[79u].w;
        float _2827 = cbSceneParam._m0[79u].w - _2820;
        float _2833 = sqrt(((_2819 * _2819) + (_2820 * _2820)) + (_2823 * _2823));
        float _2836 = (1.0 - (cbSceneParam._m0[77u].w / _2807)) * _2833;
        float _2841 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2843 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2996;
        if (abs((_2821 - _2825) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2996 = ((((_2826 > 0.0) ? exp2(_2841 * _2826) : (2.0 - exp2(_2843 * _2826))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2836;
        }
        else
        {
            float _2956 = 1.0 / cbSceneParam._m0[80u].x;
            float _2957 = isnan(_2827) ? _2826 : (isnan(_2826) ? _2827 : max(_2826, _2827));
            float _2958 = isnan(_2827) ? _2826 : (isnan(_2826) ? _2827 : min(_2826, _2827));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            _2996 = ((abs(_2833 / _2821) * cbSceneParam._m0[80u].y) * ((((_2967 - _2968) * 2.0) - ((exp2(_2841 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0)))) - exp2(_2841 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))))) * _2956)) - ((exp2(_2843 * _2967) - exp2(_2843 * _2968)) * _2956))) + (_2836 * cbSceneParam._m0[80u].z);
        }
        vec4 _2998 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2753, _2754, 1.0), 0.0);
        float _3007 = exp2((_2996 * (-1.44269502162933349609375)) * (1.0 - _2998.w));
        float _3008 = log2(_3007);
        float _3024 = log2(_2773);
        _2845 = (exp2(_3024 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].x)) * _2998.x) / cbSceneParam._m0[78u].x)) + _2770;
        _2847 = (exp2(_3024 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].y)) * _2998.y) / cbSceneParam._m0[78u].y)) + _2771;
        _2849 = (exp2(_3024 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].z)) * _2998.z) / cbSceneParam._m0[78u].z)) + _2772;
        _2851 = _3007 * _2773;
    }
    else
    {
        _2845 = _2770;
        _2847 = _2771;
        _2849 = _2772;
        _2851 = _2773;
    }
    float _2863 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2864 = _2863 == 3.0;
    float _2865 = log2(_2851);
    float _2872 = exp2(_2865 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2715 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _683))) + ((_2721 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1491)) * cbPerFrame._m0[3u].x));
    float _2873 = exp2(_2865 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2717 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _683))) + ((_2723 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1491)) * cbPerFrame._m0[3u].x));
    float _2874 = exp2(_2865 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2719 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _683))) + ((_2725 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1491)) * cbPerFrame._m0[3u].x));
    float _2883 = (_2863 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2883 * (_2864 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2845)));
    SV_Target.y = _2883 * (_2864 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2847)));
    SV_Target.z = _2883 * (_2864 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2849)));
    SV_Target.w = cbInstanceData._m0[_2745].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2745].w;
}


