#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1023;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _244) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _245) + cbTextureTilingScale._m0[14u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = _311.z;
    float _320 = (_311.x * 2.0) + (-1.0);
    float _322 = (_311.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3634 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))));
    float _332 = fma(_329, _212, fma(_322, _219, _320 * _205));
    float _335 = fma(_329, _213, fma(_322, _220, _320 * _206));
    float _338 = fma(_329, _214, fma(_322, _221, _320 * _207));
    float _342 = inversesqrt(dot(vec3(_332, _335, _338), vec3(_332, _335, _338)));
    vec4 _378 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _380 = _378.x;
    float _381 = 1.0 - _380;
    float _390 = (cbMtdParam._m0[19u].x + dot(vec4(_342 * _332, _342 * _335, _342 * _338, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_380 - _381) * cbMtdParam._m0[24u].z) + _381) * cbMtdParam._m0[21u].z);
    float _3645 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _398 = (_391 * ((_291.x * cbMtdParam._m0[18u].x) - _270)) + _270;
    float _399 = (_391 * ((_291.y * cbMtdParam._m0[18u].y) - _271)) + _271;
    float _400 = (_391 * ((_291.z * cbMtdParam._m0[18u].z) - _272)) + _272;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _415 = _413.x;
    float _417 = _415 - (_415 * _391);
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _437 = (_430.x * 2.0) + (-1.0);
    float _438 = (_430.y * 2.0) + (-1.0);
    float _439 = dot(vec2(_437, _438), vec2(_437, _438));
    float _3656 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _447 = ((_430.z - _315) * _391) + _315;
    float _457 = ((sqrt(1.0 - (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) - _329) * _391) + _329;
    float _460 = (((_437 - _320) * _391) + _320) + (cbMtdParam._m0[21u].x * _320);
    float _461 = (((_438 - _322) * _391) + _322) + (cbMtdParam._m0[21u].x * _322);
    float _466 = cbMtdParam._m0[22u].x + _311.w;
    float _469 = fma(_457, _212, fma(_461, _219, _460 * _205));
    float _472 = fma(_457, _213, fma(_461, _220, _460 * _206));
    float _475 = fma(_457, _214, fma(_461, _221, _460 * _207));
    float _479 = inversesqrt(dot(vec3(_469, _472, _475), vec3(_469, _472, _475)));
    float _480 = _479 * _469;
    float _481 = _479 * _472;
    float _482 = _479 * _475;
    float _3667 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _483 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3689 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _3700 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3711 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3722 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _488 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _502 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _553 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _543);
    float _554 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _543);
    float _555 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _543);
    float _559 = inversesqrt(dot(vec3(_553, _554, _555), vec3(_553, _554, _555)));
    float _560 = _553 * _559;
    float _561 = _554 * _559;
    float _562 = _555 * _559;
    float _568 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _569 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _590 = fma(_482, cbSceneParam._m0[5u].z, fma(_481, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _480));
    float _593 = fma(_482, cbSceneParam._m0[6u].z, fma(_481, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _480));
    float _596 = fma(_482, cbSceneParam._m0[7u].z, fma(_481, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _480));
    uint _610 = (_224 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _616 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * cbInstanceData._m0[_610].x;
    float _617 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * cbInstanceData._m0[_610].y;
    float _618 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) * cbInstanceData._m0[_610].z;
    float _3733 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _3755 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _622 = 1.0 - _488;
    float _623 = _619 * _622;
    float _624 = _620 * _622;
    float _625 = _621 * _622;
    float _630 = (_619 + (-0.039999999105930328369140625)) * _488;
    float _631 = (_620 + (-0.039999999105930328369140625)) * _488;
    float _632 = (_621 + (-0.039999999105930328369140625)) * _488;
    float _633 = _630 + 0.039999999105930328369140625;
    float _635 = _631 + 0.039999999105930328369140625;
    float _636 = _632 + 0.039999999105930328369140625;
    vec4 _645 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _568, cbSceneParam._m0[86u].y * _569));
    float _649 = ((isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * TEXCOORD_5.w) * _645.x;
    float _650 = dot(vec3(_480, _481, _482), vec3(_560, _561, _562));
    float _653 = _650 * 2.0;
    float _657 = (_653 * _480) - _560;
    float _658 = (_653 * _481) - _561;
    float _659 = (_653 * _482) - _562;
    float _663 = abs(dot(vec3(_560, _561, _562), vec3(_480, _481, _482)));
    float _3766 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _665 = sqrt(_483);
    float _678 = exp2((_665 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_665 * 3.0));
    float _684 = (1.0 - _678) * ((_665 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _685 = _678 * _665;
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1022;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _747 = fma(_721, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713));
        float _751 = fma(_721, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713));
        float _755 = fma(_721, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713));
        float _780 = _713 + _480;
        float _781 = _717 + _481;
        float _782 = _721 + _482;
        float _792 = fma(_782, cbModelParam._m0[26u].z, fma(_781, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _780)) - _747;
        float _793 = fma(_782, cbModelParam._m0[27u].z, fma(_781, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _780)) - _751;
        float _794 = fma(_782, cbModelParam._m0[28u].z, fma(_781, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _780)) - _755;
        float _798 = inversesqrt(dot(vec3(_792, _793, _794), vec3(_792, _793, _794)));
        float _811 = ((_798 * _792) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_747 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_798 * _793) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_751 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _813 = ((_798 * _794) / cbModelParam._m0[34u].z) + ((((((_755 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        float _850 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_816.x + (-0.5));
        float _852 = _850 * (_816.y + (-0.5));
        float _853 = _850 * (_816.z + (-0.5));
        float _860 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_823.x + (-0.5));
        float _862 = _860 * (_823.y + (-0.5));
        float _863 = _860 * (_823.z + (-0.5));
        float _870 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_830.x + (-0.5));
        float _872 = _870 * (_830.y + (-0.5));
        float _873 = _870 * (_830.z + (-0.5));
        float _880 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_837.x + (-0.5));
        float _882 = _880 * (_837.y + (-0.5));
        float _883 = _880 * (_837.z + (-0.5));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = _851 * 0.5;
        float _888 = _861 * 0.5;
        float _889 = _871 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _904 = (dot(vec3(_480, _481, _482), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _914 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3814 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_916 + 1.0))) + _921) * _884;
        float _931 = _852 * 0.5;
        float _932 = _862 * 0.5;
        float _933 = _872 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_480, _481, _482), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3847 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_958 + 1.0))) + _963) * _885;
        float _973 = _853 * 0.5;
        float _974 = _863 * 0.5;
        float _975 = _873 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_480, _481, _482), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3880 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1000 + 1.0))) + _1005) * _886;
        _1022 = _853;
        _1024 = _852;
        _1025 = _851;
        _1026 = _863;
        _1027 = _862;
        _1028 = _861;
        _1029 = _873;
        _1030 = _872;
        _1031 = _871;
        _1032 = _886;
        _1033 = _885;
        _1034 = _884;
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
    }
    else
    {
        _1022 = _1023;
        _1024 = _1023;
        _1025 = _1023;
        _1026 = _1023;
        _1027 = _1023;
        _1028 = _1023;
        _1029 = _1023;
        _1030 = _1023;
        _1031 = _1023;
        _1032 = _1023;
        _1033 = _1023;
        _1034 = _1023;
        _1035 = 0.0;
        _1036 = 0.0;
        _1037 = 0.0;
    }
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1062 = fma(_721, cbModelParam._m0[30u].z, fma(_717, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _713));
        float _1066 = fma(_721, cbModelParam._m0[31u].z, fma(_717, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _713));
        float _1070 = fma(_721, cbModelParam._m0[32u].z, fma(_717, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _713));
        float _1093 = _713 + _480;
        float _1094 = _717 + _481;
        float _1095 = _721 + _482;
        float _1105 = fma(_1095, cbModelParam._m0[30u].z, fma(_1094, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093)) - _1062;
        float _1106 = fma(_1095, cbModelParam._m0[31u].z, fma(_1094, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093)) - _1066;
        float _1107 = fma(_1095, cbModelParam._m0[32u].z, fma(_1094, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093)) - _1070;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1062 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1066 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[35u].z) + ((((((_1070 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1161 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1128.x + (-0.5));
        float _1163 = _1161 * (_1128.y + (-0.5));
        float _1164 = _1161 * (_1128.z + (-0.5));
        float _1171 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1135.x + (-0.5));
        float _1173 = _1171 * (_1135.y + (-0.5));
        float _1174 = _1171 * (_1135.z + (-0.5));
        float _1181 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1142.x + (-0.5));
        float _1183 = _1181 * (_1142.y + (-0.5));
        float _1184 = _1181 * (_1142.z + (-0.5));
        float _1191 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1149.x + (-0.5));
        float _1193 = _1191 * (_1149.y + (-0.5));
        float _1194 = _1191 * (_1149.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_480, _481, _482), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3943 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1225 + 1.0))) + _1230) * _1195;
        float _1240 = _1163 * 0.5;
        float _1241 = _1173 * 0.5;
        float _1242 = _1183 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_480, _481, _482), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3976 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1267 + 1.0))) + _1272) * _1196;
        float _1282 = _1164 * 0.5;
        float _1283 = _1174 * 0.5;
        float _1284 = _1184 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_480, _481, _482), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4009 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1309 + 1.0))) + _1314) * _1197;
        _1331 = _1164;
        _1332 = _1163;
        _1333 = _1162;
        _1334 = _1174;
        _1335 = _1173;
        _1336 = _1172;
        _1337 = _1184;
        _1338 = _1183;
        _1339 = _1182;
        _1340 = _1197;
        _1341 = _1196;
        _1342 = _1195;
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1023;
        _1332 = _1023;
        _1333 = _1023;
        _1334 = _1023;
        _1335 = _1023;
        _1336 = _1023;
        _1337 = _1023;
        _1338 = _1023;
        _1339 = _1023;
        _1340 = _1023;
        _1341 = _1023;
        _1342 = _1023;
        _1343 = 0.0;
        _1344 = 0.0;
        _1345 = 0.0;
    }
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1035)) + _1035;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1036)) + _1036;
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1037)) + _1037;
    float _1378 = fma(_1357, cbSceneParam._m0[89u].z, fma(_1356, cbSceneParam._m0[89u].y, _1355 * cbSceneParam._m0[89u].x));
    float _1381 = fma(_1357, cbSceneParam._m0[90u].z, fma(_1356, cbSceneParam._m0[90u].y, _1355 * cbSceneParam._m0[90u].x));
    float _1384 = fma(_1357, cbSceneParam._m0[91u].z, fma(_1356, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1355));
    float _1399 = _657 * 0.5;
    float _1400 = _658 * 0.5;
    float _1401 = _659 * 0.5;
    float _1402 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1405 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1408 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1442;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1415 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1022, _1026, _1029, _1032));
        float _1419 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1423 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1430 = dot(vec4(cbModelParam._m0[39u]), vec4(_1399, _1400, _1401, 1.0));
        _1442 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1430) ? 0.0 : (isnan(0.0) ? _1430 : max(0.0, _1430))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1442 = 1.0;
    }
    float _1453;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1444 = dot(vec4(cbModelParam._m0[40u]), vec4(_1399, _1400, _1401, 1.0));
        _1453 = dot(vec3(isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1453 = 1.0;
    }
    float _1457 = (_1453 * cbModelParam._m0[1u].x) + (_1442 * (1.0 - cbModelParam._m0[1u].x));
    float _1467 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _483);
    float _1468 = isnan(_1467) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1467 : min(cbModelParam._m0[25u].z, _1467));
    float _1548;
    float _1550;
    float _1552;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1515 = fma(_721, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713)) + cbModelParam._m0[13u].w;
        float _1519 = fma(_721, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713)) + cbModelParam._m0[14u].w;
        float _1523 = fma(_721, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713)) + cbModelParam._m0[15u].w;
        float _1526 = fma(_659, cbModelParam._m0[13u].z, fma(_658, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _657));
        float _1529 = fma(_659, cbModelParam._m0[14u].z, fma(_658, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _657));
        float _1532 = fma(_659, cbModelParam._m0[15u].z, fma(_658, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _657));
        float _1560;
        if (_1526 > 0.0)
        {
            _1560 = abs((1.0 - _1515) / _1526);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1515 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1560 = frontier_phi_14_12_ladder;
        }
        float _1731;
        if (_1529 > 0.0)
        {
            _1731 = abs((1.0 - _1519) / _1529);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1519 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1731 = frontier_phi_23_19_ladder;
        }
        float _2027;
        if (_1532 > 0.0)
        {
            _2027 = abs((1.0 - _1523) / _1532);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1523 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2027 = frontier_phi_35_30_ladder;
        }
        float _2029 = isnan(_1731) ? _1560 : (isnan(_1560) ? _1731 : min(_1560, _1731));
        float _2030 = isnan(_2027) ? _2029 : (isnan(_2029) ? _2027 : min(_2029, _2027));
        float _2034 = (_2030 * _1526) + _1515;
        float _2035 = (_2030 * _1529) + _1519;
        float _2036 = (_2030 * _1532) + _1523;
        float _2037 = _2030 * 9.9999997473787516355514526367188e-05;
        float _2039 = (-1.0) - _2037;
        float _2041 = _2037 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2036 > _2041) || ((_2036 < _2039) || ((_2035 > _2041) || ((_2035 < _2039) || ((_2034 < _2039) || (_2034 > _2041))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2181 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2036, cbModelParam._m0[9u].z, fma(_2035, cbModelParam._m0[9u].y, _2034 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2036, cbModelParam._m0[10u].z, fma(_2035, cbModelParam._m0[10u].y, _2034 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2036, cbModelParam._m0[11u].z, fma(_2035, cbModelParam._m0[11u].y, _2034 * cbModelParam._m0[11u].x))), _1468);
            frontier_phi_13_35_ladder = _2181.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2181.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2181.x * cbModelParam._m0[1u].y;
        }
        _1548 = frontier_phi_13_35_ladder_2;
        _1550 = frontier_phi_13_35_ladder_1;
        _1552 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_657, _658, _659), _1468);
        _1548 = _1536.x * cbModelParam._m0[1u].y;
        _1550 = _1536.y * cbModelParam._m0[1u].y;
        _1552 = _1536.z * cbModelParam._m0[1u].y;
    }
    float _1556 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _483);
    float _1557 = isnan(_1556) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1556 : min(cbModelParam._m0[25u].w, _1556));
    float _1646;
    float _1648;
    float _1650;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1610 = fma(_721, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713)) + cbModelParam._m0[21u].w;
        float _1614 = fma(_721, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713)) + cbModelParam._m0[22u].w;
        float _1618 = fma(_721, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713)) + cbModelParam._m0[23u].w;
        float _1621 = fma(_659, cbModelParam._m0[21u].z, fma(_658, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _657));
        float _1624 = fma(_659, cbModelParam._m0[22u].z, fma(_658, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _657));
        float _1627 = fma(_659, cbModelParam._m0[23u].z, fma(_658, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _657));
        float _1736;
        if (_1621 > 0.0)
        {
            _1736 = abs((1.0 - _1610) / _1621);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1610 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1736 = frontier_phi_25_21_ladder;
        }
        float _2054;
        if (_1624 > 0.0)
        {
            _2054 = abs((1.0 - _1614) / _1624);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1614 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2054 = frontier_phi_37_32_ladder;
        }
        float _2392;
        if (_1627 > 0.0)
        {
            _2392 = abs((1.0 - _1618) / _1627);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1618 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2392 = frontier_phi_47_44_ladder;
        }
        float _2394 = isnan(_2054) ? _1736 : (isnan(_1736) ? _2054 : min(_1736, _2054));
        float _2395 = isnan(_2392) ? _2394 : (isnan(_2394) ? _2392 : min(_2394, _2392));
        float _2399 = (_2395 * _1621) + _1610;
        float _2400 = (_2395 * _1624) + _1614;
        float _2401 = (_2395 * _1627) + _1618;
        float _2402 = _2395 * 9.9999997473787516355514526367188e-05;
        float _2403 = (-1.0) - _2402;
        float _2405 = _2402 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2401 > _2405) || ((_2401 < _2403) || ((_2400 > _2405) || ((_2400 < _2403) || ((_2399 < _2403) || (_2399 > _2405))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2401, cbModelParam._m0[17u].z, fma(_2400, cbModelParam._m0[17u].y, _2399 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2401, cbModelParam._m0[18u].z, fma(_2400, cbModelParam._m0[18u].y, _2399 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2401, cbModelParam._m0[19u].z, fma(_2400, cbModelParam._m0[19u].y, _2399 * cbModelParam._m0[19u].x))), _1557);
            frontier_phi_22_47_ladder = _2523.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2523.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2523.x * cbModelParam._m0[1u].z;
        }
        _1646 = frontier_phi_22_47_ladder_2;
        _1648 = frontier_phi_22_47_ladder_1;
        _1650 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1630 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_657, _658, _659), _1557);
        _1646 = _1630.x * cbModelParam._m0[1u].z;
        _1648 = _1630.y * cbModelParam._m0[1u].z;
        _1650 = _1630.z * cbModelParam._m0[1u].z;
    }
    float _1663 = (((_684 * _633) + _685) * _649) * ((cbModelParam._m0[1u].w * (_1646 - _1548)) + _1548);
    float _1665 = (((_684 * _635) + _685) * _649) * ((cbModelParam._m0[1u].w * (_1648 - _1550)) + _1550);
    float _1667 = (((_684 * _636) + _685) * _649) * ((cbModelParam._m0[1u].w * (_1650 - _1552)) + _1552);
    float _1670 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1663 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1663 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, _1663 * cbSceneParam._m0[91u].x));
    float _1710 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1714 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1718 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1722 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1723 = _1710 / _1722;
    float _1724 = _1714 / _1722;
    float _1725 = _1718 / _1722;
    float _1872;
    float _1873;
    float _1874;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1752 = ((uint(_1725 > cbSceneParam._m0[59u].y) + uint(_1725 > cbSceneParam._m0[59u].x)) + uint(_1725 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1753 = _1752 + 43u;
        uint _1761 = _1752 + 44u;
        uint _1769 = _1752 + 45u;
        uint _1777 = _1752 + 46u;
        float _1788 = fma(_1722, cbSceneParam._m0[_1753].w, fma(_1718, cbSceneParam._m0[_1753].z, fma(_1714, cbSceneParam._m0[_1753].y, _1710 * cbSceneParam._m0[_1753].x)));
        float _1792 = fma(_1722, cbSceneParam._m0[_1761].w, fma(_1718, cbSceneParam._m0[_1761].z, fma(_1714, cbSceneParam._m0[_1761].y, _1710 * cbSceneParam._m0[_1761].x)));
        float _1800 = fma(_1722, cbSceneParam._m0[_1777].w, fma(_1718, cbSceneParam._m0[_1777].z, fma(_1714, cbSceneParam._m0[_1777].y, _1710 * cbSceneParam._m0[_1777].x)));
        float _1805 = cbSceneParam._m0[33u].z * _1800;
        float _1807 = cbSceneParam._m0[33u].w * _1800;
        float _1810 = fma(_1722, cbSceneParam._m0[_1769].w, fma(_1718, cbSceneParam._m0[_1769].z, fma(_1714, cbSceneParam._m0[_1769].y, _1710 * cbSceneParam._m0[_1769].x))) / _1800;
        float _1858 = (cbSceneParam._m0[33u].x - sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725))) * cbSceneParam._m0[33u].y;
        float _4135 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1865 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1805 + _1788) / _1800, (_1807 + _1792) / _1800), _1810), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1807 + _1788) / _1800, (_1792 - _1805) / _1800), _1810), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1788 - _1805) / _1800, (_1792 - _1807) / _1800), _1810), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1788 - _1807) / _1800, (_1805 + _1792) / _1800), _1810), 0.0)).x), vec4(0.25)));
        _1872 = 1.0 - (_1865 * cbSceneParam._m0[34u].x);
        _1873 = 1.0 - (_1865 * cbSceneParam._m0[34u].y);
        _1874 = 1.0 - (_1865 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1872 = 1.0;
        _1873 = 1.0;
        _1874 = 1.0;
    }
    float _1938;
    float _1940;
    float _1942;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1926 = fma(_1722, cbSceneParam._m0[63u].w, fma(_1718, cbSceneParam._m0[63u].z, fma(_1714, cbSceneParam._m0[63u].y, _1710 * cbSceneParam._m0[63u].x)));
        float _1927 = fma(_1722, cbSceneParam._m0[60u].w, fma(_1718, cbSceneParam._m0[60u].z, fma(_1714, cbSceneParam._m0[60u].y, _1710 * cbSceneParam._m0[60u].x))) / _1926;
        float _1928 = fma(_1722, cbSceneParam._m0[61u].w, fma(_1718, cbSceneParam._m0[61u].z, fma(_1714, cbSceneParam._m0[61u].y, _1710 * cbSceneParam._m0[61u].x))) / _1926;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1927 >= cbSceneParam._m0[64u].x) && (_1928 >= cbSceneParam._m0[64u].y)) && (_1927 <= cbSceneParam._m0[64u].z)) && (_1928 <= cbSceneParam._m0[64u].w))
        {
            float _2067 = fma(_1722, cbSceneParam._m0[62u].w, fma(_1718, cbSceneParam._m0[62u].z, fma(_1714, cbSceneParam._m0[62u].y, _1710 * cbSceneParam._m0[62u].x))) / _1926;
            float _2071 = isnan(cbSceneParam._m0[41u].w) ? _2067 : (isnan(_2067) ? cbSceneParam._m0[41u].w : max(_2067, cbSceneParam._m0[41u].w));
            float _2114 = (cbSceneParam._m0[33u].x - sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725))) * cbSceneParam._m0[33u].y;
            float _4151 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
            float _2121 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1927, cbSceneParam._m0[33u].w + _1928), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1927, _1928 - cbSceneParam._m0[33u].z), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1927 - cbSceneParam._m0[33u].z, _1928 - cbSceneParam._m0[33u].w), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1927 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1928), _2071), 0.0)).x), vec4(0.25)));
            float _2125 = 1.0 - (_2121 * cbSceneParam._m0[34u].x);
            float _2126 = 1.0 - (_2121 * cbSceneParam._m0[34u].y);
            float _2127 = 1.0 - (_2121 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2127) ? _1874 : (isnan(_1874) ? _2127 : min(_1874, _2127));
            frontier_phi_34_33_ladder_1 = isnan(_2126) ? _1873 : (isnan(_1873) ? _2126 : min(_1873, _2126));
            frontier_phi_34_33_ladder_2 = isnan(_2125) ? _1872 : (isnan(_1872) ? _2125 : min(_1872, _2125));
        }
        else
        {
            frontier_phi_34_33_ladder = _1874;
            frontier_phi_34_33_ladder_1 = _1873;
            frontier_phi_34_33_ladder_2 = _1872;
        }
        _1938 = frontier_phi_34_33_ladder_2;
        _1940 = frontier_phi_34_33_ladder_1;
        _1942 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1938 = _1872;
        _1940 = _1873;
        _1942 = _1874;
    }
    uvec4 _1947 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1949 = _1947.x * 14u;
    uint _1950 = _1949 + 13u;
    float _1957 = _649 + (-1.0);
    float _1962 = (cbLight._m0[_1950].x * _1957) + 1.0;
    float _1963 = (cbLight._m0[_1950].y * _1957) + 1.0;
    float _1964 = (cbLight._m0[_1950].z * _1957) + 1.0;
    float _1965 = (cbLight._m0[_1950].w * _1957) + 1.0;
    uint _1966 = _1949 + 5u;
    float _1972 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
    uint _1976 = _1949 + 4u;
    float _1986 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
    uint _1990 = _1949 | 1u;
    float _2001 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_480, _481, _482));
    float _2004 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_480, _481, _482));
    float _4187 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _4198 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2009 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _2011 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * 0.3183098733425140380859375;
    float _2018 = ((cbLight._m0[_1966].x * _1972) * _2011) + (((cbLight._m0[_1976].x * _1938) * _1986) * _2009);
    float _2019 = ((_1972 * cbLight._m0[_1966].y) * _2011) + (((cbLight._m0[_1976].y * _1940) * _1986) * _2009);
    float _2020 = ((_1972 * cbLight._m0[_1966].z) * _2011) + (((cbLight._m0[_1976].z * _1942) * _1986) * _2009);
    uvec4 _2024 = floatBitsToUint(cbLight._m0[_1949 + 12u]);
    bool _2026 = _2024.x == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2026)
    {
        _2128 = _2018;
        _2130 = _2019;
        _2132 = _2020;
    }
    else
    {
        uint _2136 = _1949 + 6u;
        float _2152 = (dot(vec3(cbLight._m0[_1949 + 2u].xyz), vec3(_480, _481, _482)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4209 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2155 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2128 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _2018;
        _2130 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _2019;
        _2132 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _2020;
    }
    bool _2135 = _2024.y == 0u;
    float _2190;
    float _2192;
    float _2194;
    if (_2135)
    {
        _2190 = _2128;
        _2192 = _2130;
        _2194 = _2132;
    }
    else
    {
        uint _2363 = _1949 + 7u;
        float _2379 = (dot(vec3(cbLight._m0[_1949 + 3u].xyz), vec3(_480, _481, _482)) * 0.5) + 0.5;
        float _2380 = _2379 * _2379;
        float _4225 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2381 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2382 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2190 = (((cbLight._m0[_2363].x * 0.3183098733425140380859375) * _2381) * _2382) + _2128;
        _2192 = (((cbLight._m0[_2363].y * 0.3183098733425140380859375) * _2381) * _2382) + _2130;
        _2194 = (((cbLight._m0[_2363].z * 0.3183098733425140380859375) * _2381) * _2382) + _2132;
    }
    uint _2197 = _1949 + 8u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _483) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_1949].x + _560;
    float _2213 = cbLight._m0[_1949].y + _561;
    float _2214 = cbLight._m0[_1949].z + _562;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_1949].xyz));
    float _4241 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _2226 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2227 = dot(vec3(_480, _481, _482), vec3(_2219, _2220, _2221));
    float _4263 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2219, _2220, _2221));
    float _4274 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2211 * _2211;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0);
    float _2248 = 0.959999978542327880859375 - _630;
    float _2250 = 0.959999978542327880859375 - _631;
    float _2251 = 0.959999978542327880859375 - _632;
    float _2258 = 1.0 - _2211;
    float _2269 = (0.5 / (((_2226 * ((_2225 * _2258) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2258) + _2211) * _2225))) * _2225;
    float _4285 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2271 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    uint _2285 = _1949 + 9u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _483) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_1990].x + _560;
    float _2299 = cbLight._m0[_1990].y + _561;
    float _2300 = cbLight._m0[_1990].z + _562;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_1990].xyz));
    float _4296 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2312 = dot(vec3(_480, _481, _482), vec3(_2305, _2306, _2307));
    float _4307 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2305, _2306, _2307));
    float _4318 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2297 * _2297;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0);
    float _2338 = 1.0 - _2297;
    float _2348 = (0.5 / (((_2226 * ((_2311 * _2338) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2338) + _2297) * _2311))) * _2311;
    float _4329 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    float _2360 = (((((_2331 * _2248) + _633) * cbLight._m0[_2285].x) * _2350) * _1972) + ((((cbLight._m0[_2197].x * _1938) * ((_2247 * _2248) + _633)) * _2271) * _1986);
    float _2361 = (((((_2331 * _2250) + _635) * cbLight._m0[_2285].y) * _2350) * _1972) + ((((cbLight._m0[_2197].y * _1940) * ((_2247 * _2250) + _635)) * _2271) * _1986);
    float _2362 = (((((_2331 * _2251) + _636) * cbLight._m0[_2285].z) * _2350) * _1972) + ((((cbLight._m0[_2197].z * _1942) * ((_2247 * _2251) + _636)) * _2271) * _1986);
    float _2418;
    float _2420;
    float _2422;
    if (_2026)
    {
        _2418 = _2360;
        _2420 = _2361;
        _2422 = _2362;
    }
    else
    {
        uint _2424 = _1949 + 2u;
        uint _2428 = _1949 + 10u;
        float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _483) * 0.949999988079071044921875);
        float _2443 = _2442 * _2442;
        float _2444 = cbLight._m0[_2424].x + _560;
        float _2445 = cbLight._m0[_2424].y + _561;
        float _2446 = cbLight._m0[_2424].z + _562;
        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
        float _2451 = _2450 * _2444;
        float _2452 = _2450 * _2445;
        float _2453 = _2450 * _2446;
        float _2454 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2424].xyz));
        float _4340 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2458 = dot(vec3(_480, _481, _482), vec3(_2451, _2452, _2453));
        float _4351 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2462 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2451, _2452, _2453));
        float _4362 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2466 = _2443 * _2443;
        float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
        float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0);
        float _2484 = 1.0 - _2443;
        float _2494 = (0.5 / (((_2226 * ((_2457 * _2484) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2484) + _2443) * _2457))) * _2457;
        float _4373 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2496 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
        float _2497 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2418 = (((((_2477 * _2248) + _633) * cbLight._m0[_2428].x) * _2496) * _2497) + _2360;
        _2420 = (((((_2477 * _2250) + _635) * cbLight._m0[_2428].y) * _2496) * _2497) + _2361;
        _2422 = (((((_2477 * _2251) + _636) * cbLight._m0[_2428].z) * _2496) * _2497) + _2362;
    }
    float _2528;
    float _2530;
    float _2532;
    if (_2135)
    {
        _2528 = _2418;
        _2530 = _2420;
        _2532 = _2422;
    }
    else
    {
        uint _2539 = _1949 + 3u;
        uint _2543 = _1949 + 11u;
        float _2557 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2539].w)) * _483) * 0.949999988079071044921875);
        float _2558 = _2557 * _2557;
        float _2559 = cbLight._m0[_2539].x + _560;
        float _2560 = cbLight._m0[_2539].y + _561;
        float _2561 = cbLight._m0[_2539].z + _562;
        float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
        float _2566 = _2565 * _2559;
        float _2567 = _2565 * _2560;
        float _2568 = _2565 * _2561;
        float _2569 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2539].xyz));
        float _4389 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2573 = dot(vec3(_480, _481, _482), vec3(_2566, _2567, _2568));
        float _4400 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2577 = dot(vec3(cbLight._m0[_2539].xyz), vec3(_2566, _2567, _2568));
        float _4411 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2581 = _2558 * _2558;
        float _2585 = ((_2576 * _2576) * (_2581 + (-1.0))) + 1.0;
        float _2592 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
        float _2599 = 1.0 - _2558;
        float _2609 = (0.5 / (((_2226 * ((_2572 * _2599) + _2558)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2599) + _2558) * _2572))) * _2572;
        float _4422 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2611 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2581 / ((_2585 * _2585) * 3.141590118408203125));
        float _2612 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2528 = (((((_2592 * _2248) + _633) * cbLight._m0[_2543].x) * _2611) * _2612) + _2418;
        _2530 = (((((_2592 * _2250) + _635) * cbLight._m0[_2543].y) * _2611) * _2612) + _2420;
        _2532 = (((((_2592 * _2251) + _636) * cbLight._m0[_2543].z) * _2611) * _2612) + _2422;
    }
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    if (_1947.y == 0u)
    {
        uvec4 _2633 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2634 = _2633.x;
        uint _2645 = uint((float(_2633.y) * floor(float(uint(cbSceneParam._m0[85u].y * _569) / _2634))) + floor(float(uint(cbSceneParam._m0[85u].x * _568) / _2634)));
        float _2655 = (log2(_1725 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2656 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        uint _2659 = uint(isnan(14.0) ? _2656 : (isnan(_2656) ? 14.0 : min(_2656, 14.0)));
        uvec4 _2664 = texelFetch(g_lightClusterGridBuffer, int(((_2659 << 2u) + (_2645 << 6u)) >> 2u));
        uint _2665 = _2664.x;
        uint _2666 = _2633.z;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        if (((((1u << ((_2666 >> 4u) & 15u)) + 4294967295u) & _2665) == 0u) || ((_2666 & 240u) == 0u))
        {
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
        }
        else
        {
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2756;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            uint _2896 = 0u;
            uint _2905;
            bool _2906;
            for (;;)
            {
                _2905 = texelFetch(g_lightClassification, int((((_2659 << 5u) + (_2645 << 9u)) + (_2896 << 2u)) >> 2u)).x;
                _2906 = _2905 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2906)
                {
                    frontier_phi_66_pred = _2895;
                    frontier_phi_66_pred_1 = _2894;
                    frontier_phi_66_pred_2 = _2893;
                    frontier_phi_66_pred_3 = _2892;
                    frontier_phi_66_pred_4 = _2891;
                    frontier_phi_66_pred_5 = _2890;
                }
                else
                {
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    uint _3020;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2895;
                    _3020 = _2905;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    for (;;)
                    {
                        uint _3024 = uint(findLSB(_3020)) + (_2896 << 5u);
                        uint _3021 = (_3020 + 4294967295u) & _3020;
                        uint _3026 = _3024 * 48u;
                        vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 3u)).x));
                        uint _3046 = (_3024 * 48u) + 4u;
                        vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 3u)).x));
                        uint _3065 = (_3024 * 48u) + 8u;
                        vec3 _3076 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x));
                        float _3080 = _3040.x - _1723;
                        float _3081 = _3040.y - _1724;
                        float _3082 = _3040.z - _1725;
                        float _3083 = dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082));
                        float _3086 = inversesqrt(_3083);
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3090 = dot(vec3(_590, _593, _596), vec3(_3087, _3088, _3089));
                        float _3095 = 1.0 - (_3083 * _3040.w);
                        float _4448 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3096 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3097 = sqrt(_3083) * _3059.w;
                        float _3100 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                        float _3101 = _3100 * _3100;
                        float _3104 = ((1.0 - _3101) * _3090) + _3101;
                        float _3107 = _3097 * _3097;
                        float _3111 = ((isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0))) * _3096) / ((_3107 * 0.699999988079071044921875) + 1.0);
                        float _3115 = (-0.0) - _1723;
                        float _3116 = (-0.0) - _1724;
                        float _3117 = (-0.0) - _1725;
                        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3131 = exp2(log2(1.0 / ((_3107 * 3.5) + 5.0)) * 0.25);
                        float _3132 = 1.0 - _665;
                        float _3139 = sqrt(1.0 - ((1.0 - (_3132 * _3132)) * (1.0 - (_3131 * _3131))));
                        float _3140 = _3139 * _3139;
                        float _3141 = _3140 * _3140;
                        float _3142 = _3122 + _3087;
                        float _3143 = _3123 + _3088;
                        float _3144 = _3124 + _3089;
                        float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                        float _3152 = dot(vec3(_590, _593, _596), vec3(_3122, _3123, _3124));
                        float _4464 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3155 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3156 = dot(vec3(_590, _593, _596), vec3(_3148 * _3142, _3148 * _3143, _3148 * _3144));
                        float _4475 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3159 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3163 = ((_3159 * _3159) * (_3141 + (-1.0))) + 1.0;
                        float _3164 = _3100 * _3140;
                        float _3165 = _3164 * _3164;
                        float _3168 = ((1.0 - _3165) * _3090) + _3165;
                        float _4486 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3169 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3170 = 1.0 - _3140;
                        float _3180 = (0.5 / (((_3169 * ((_3155 * _3170) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_3169 * _3170) + _3140) * _3155))) * _3169;
                        float _4497 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3191 = (((_3141 * 3.1415927410125732421875) * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) / ((_3163 * _3163) * ((_3107 * 2.1991131305694580078125) + 3.141590118408203125))) * _3096;
                        _2949 = (_3111 * _3059.x) + _3017;
                        _2950 = (_3111 * _3059.y) + _3018;
                        _2951 = (_3111 * _3059.z) + _3019;
                        _2946 = (_3191 * _3076.x) + _3014;
                        _2947 = (_3191 * _3076.y) + _3015;
                        _2948 = (_3191 * _3076.z) + _3016;
                        if (_3021 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _2951;
                            _3020 = _3021;
                        }
                    }
                    frontier_phi_66_pred = _2951;
                    frontier_phi_66_pred_1 = _2950;
                    frontier_phi_66_pred_2 = _2949;
                    frontier_phi_66_pred_3 = _2948;
                    frontier_phi_66_pred_4 = _2947;
                    frontier_phi_66_pred_5 = _2946;
                }
                _2756 = frontier_phi_66_pred;
                _2754 = frontier_phi_66_pred_1;
                _2752 = frontier_phi_66_pred_2;
                _2750 = frontier_phi_66_pred_3;
                _2748 = frontier_phi_66_pred_4;
                _2746 = frontier_phi_66_pred_5;
                uint _2897 = _2896 + 1u;
                if (_2897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2890 = _2746;
                    _2891 = _2748;
                    _2892 = _2750;
                    _2893 = _2752;
                    _2894 = _2754;
                    _2895 = _2756;
                    _2896 = _2897;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
        }
        uvec4 _2759 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2760 = _2759.z;
        uint _2762 = (_2760 >> 8u) & 15u;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        if (((4294967295u << _2762) & _2665) == 0u)
        {
            _2858 = _2745;
            _2860 = _2747;
            _2862 = _2749;
            _2864 = _2751;
            _2866 = _2753;
            _2868 = _2755;
        }
        else
        {
            float _2883 = inversesqrt(dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725)));
            float _2884 = _2883 * _1723;
            float _2885 = _2883 * _1724;
            float _2886 = _2883 * _1725;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2762 < ((_2760 >> 12u) & 15u))
            {
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2997 = _2745;
                float _2998 = _2747;
                float _2999 = _2749;
                float _3000 = _2751;
                float _3001 = _2753;
                float _3002 = _2755;
                uint _3003 = _2762;
                uint _3012;
                bool _3013;
                for (;;)
                {
                    _3012 = texelFetch(g_lightClassification, int((((_2659 << 5u) + (_2645 << 9u)) + (_3003 << 2u)) >> 2u)).x;
                    _3013 = _3012 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3013)
                    {
                        frontier_phi_72_pred = _3002;
                        frontier_phi_72_pred_1 = _3001;
                        frontier_phi_72_pred_2 = _3000;
                        frontier_phi_72_pred_3 = _2999;
                        frontier_phi_72_pred_4 = _2998;
                        frontier_phi_72_pred_5 = _2997;
                    }
                    else
                    {
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3209 = _2997;
                        float _3210 = _2998;
                        float _3211 = _2999;
                        float _3212 = _3000;
                        float _3213 = _3001;
                        float _3214 = _3002;
                        uint _3215 = _3012;
                        uint _3216;
                        vec4 _3241;
                        float _3242;
                        vec4 _3257;
                        vec3 _3269;
                        vec4 _3285;
                        vec4 _3301;
                        float _3347;
                        bool _3348;
                        for (;;)
                        {
                            uint _3226 = ((_3003 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3215));
                            _3216 = (_3215 + 4294967295u) & _3215;
                            uint _3228 = _3226 * 40u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            _3242 = _3241.w;
                            uint _3244 = (_3226 * 40u) + 4u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3259 = (_3226 * 40u) + 8u;
                            _3269 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x));
                            uint _3272 = (_3226 * 40u) + 16u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3288 = (_3226 * 40u) + 20u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3226 * 40u) + 24u;
                            vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3322 = (_3226 * 40u) + 28u;
                            vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3347 = fma(_1725, _3335.z, fma(_1724, _3335.y, _3335.x * _1723)) + _3335.w;
                            _3348 = !((fma(_1725, _3316.z, fma(_1724, _3316.y, _3316.x * _1723)) + _3316.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3348)
                            {
                                float _3375 = _3241.x - _1723;
                                float _3376 = _3241.y - _1724;
                                float _3377 = _3241.z - _1725;
                                float _3378 = dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377));
                                float _3381 = inversesqrt(_3378);
                                float _3382 = _3381 * _3375;
                                float _3383 = _3381 * _3376;
                                float _3384 = _3381 * _3377;
                                float _3388 = 1.0 - (_3378 / (_3242 * _3242));
                                float _4508 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3393 = sqrt(_3378) * _3257.w;
                                float _3395 = 1.39999997615814208984375 / (_3393 + 1.39999997615814208984375);
                                float _3396 = _3395 * _3395;
                                float _3399 = ((1.0 - _3396) * dot(vec3(_3382, _3383, _3384), vec3(_590, _593, _596))) + _3396;
                                float _3402 = _3393 * _3393;
                                float _3406 = (fma(_1725, _3285.z, fma(_1724, _3285.y, _3285.x * _1723)) + _3285.w) / _3347;
                                float _3407 = (fma(_1725, _3301.z, fma(_1724, _3301.y, _3301.x * _1723)) + _3301.w) / _3347;
                                float _3411 = 1.0 - dot(vec2(_3406, _3407), vec2(_3406, _3407));
                                float _4524 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3413 = _3412 * (((isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))) * _3389) / ((_3402 * 0.699999988079071044921875) + 1.0));
                                float _3425 = exp2(log2(1.0 / ((_3402 * 3.5) + 5.0)) * 0.25);
                                float _3426 = 1.0 - _665;
                                float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                                float _3434 = _3433 * _3433;
                                float _3435 = _3434 * _3434;
                                float _3436 = _3382 - _2884;
                                float _3437 = _3383 - _2885;
                                float _3438 = _3384 - _2886;
                                float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                                float _3446 = dot(vec3(_590, _593, _596), vec3((-0.0) - _2884, (-0.0) - _2885, (-0.0) - _2886));
                                float _4535 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3449 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3450 = dot(vec3(_590, _593, _596), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                                float _4546 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                                float _3458 = _3395 * _3434;
                                float _3459 = _3458 * _3458;
                                float _3465 = ((1.0 - _3459) * dot(vec3(_590, _593, _596), vec3(_3382, _3383, _3384))) + _3459;
                                float _4557 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3467 = 1.0 - _3434;
                                float _3477 = (0.5 / (((_3466 * ((_3449 * _3467) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3434) * _3449))) * _3466;
                                float _4568 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3487 = (_3412 * _3389) * (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3457 * _3457) * ((_3402 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3413 * _3257.y;
                                frontier_phi_78_pred_1 = _3413 * _3257.x;
                                frontier_phi_78_pred_2 = _3487 * _3269.z;
                                frontier_phi_78_pred_3 = _3487 * _3269.y;
                                frontier_phi_78_pred_4 = _3487 * _3269.x;
                                frontier_phi_78_pred_5 = _3413 * _3257.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3495 = frontier_phi_78_pred;
                            _3494 = frontier_phi_78_pred_1;
                            _3493 = frontier_phi_78_pred_2;
                            _3492 = frontier_phi_78_pred_3;
                            _3491 = frontier_phi_78_pred_4;
                            _3496 = frontier_phi_78_pred_5;
                            _3199 = _3494 + _3212;
                            _3200 = _3495 + _3213;
                            _3201 = _3496 + _3214;
                            _3196 = _3491 + _3209;
                            _3197 = _3492 + _3210;
                            _3198 = _3493 + _3211;
                            if (_3216 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3216;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3201;
                        frontier_phi_72_pred_1 = _3200;
                        frontier_phi_72_pred_2 = _3199;
                        frontier_phi_72_pred_3 = _3198;
                        frontier_phi_72_pred_4 = _3197;
                        frontier_phi_72_pred_5 = _3196;
                    }
                    _2869 = frontier_phi_72_pred;
                    _2867 = frontier_phi_72_pred_1;
                    _2865 = frontier_phi_72_pred_2;
                    _2863 = frontier_phi_72_pred_3;
                    _2861 = frontier_phi_72_pred_4;
                    _2859 = frontier_phi_72_pred_5;
                    uint _3004 = _3003 + 1u;
                    if (_3004 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2997 = _2859;
                        _2998 = _2861;
                        _2999 = _2863;
                        _3000 = _2865;
                        _3001 = _2867;
                        _3002 = _2869;
                        _3003 = _3004;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2869;
                frontier_phi_60_61_ladder_1 = _2867;
                frontier_phi_60_61_ladder_2 = _2863;
                frontier_phi_60_61_ladder_3 = _2861;
                frontier_phi_60_61_ladder_4 = _2859;
                frontier_phi_60_61_ladder_5 = _2865;
            }
            else
            {
                frontier_phi_60_61_ladder = _2755;
                frontier_phi_60_61_ladder_1 = _2753;
                frontier_phi_60_61_ladder_2 = _2749;
                frontier_phi_60_61_ladder_3 = _2747;
                frontier_phi_60_61_ladder_4 = _2745;
                frontier_phi_60_61_ladder_5 = _2751;
            }
            _2858 = frontier_phi_60_61_ladder_4;
            _2860 = frontier_phi_60_61_ladder_3;
            _2862 = frontier_phi_60_61_ladder_2;
            _2864 = frontier_phi_60_61_ladder_5;
            _2866 = frontier_phi_60_61_ladder_1;
            _2868 = frontier_phi_60_61_ladder;
        }
        float _2873 = isnan(1.0) ? _649 : (isnan(_649) ? 1.0 : min(_649, 1.0));
        _2678 = (_2873 * _2864) + _2190;
        _2680 = (_2873 * _2866) + _2192;
        _2682 = (_2873 * _2868) + _2194;
        _2684 = ((_2858 * _633) * _2873) + _2528;
        _2686 = ((_2860 * _635) * _2873) + _2530;
        _2688 = ((_2862 * _636) * _2873) + _2532;
    }
    else
    {
        _2678 = _2190;
        _2680 = _2192;
        _2682 = _2194;
        _2684 = _2528;
        _2686 = _2530;
        _2688 = _2532;
    }
    float _4584 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4595 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4606 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    uint _2708 = _224 + 6u;
    float _2716 = _568 / cbSceneParam._m0[86u].x;
    float _2717 = _569 / cbSceneParam._m0[86u].y;
    vec4 _2731 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2716, _2717, (log2((isnan(cbSceneParam._m0[77u].w) ? _502 : (isnan(_502) ? cbSceneParam._m0[77u].w : min(_502, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2733 = _2731.x;
    float _2734 = _2731.y;
    float _2735 = _2731.z;
    float _2736 = _2731.w;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    if (_502 > cbSceneParam._m0[78u].w)
    {
        float _2770 = isnan(_502) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _502 : min(cbSceneParam._m0[80u].w, _502));
        float _2771 = _2770 / _502;
        float _2782 = _2771 * _553;
        float _2783 = _554 * _2771;
        float _2784 = (-0.0) - _2783;
        float _2786 = _2771 * _555;
        float _2788 = (cbSceneParam._m0[77u].w * _2784) / _2770;
        float _2789 = _2788 + cbSceneParam._m0[79u].w;
        float _2790 = cbSceneParam._m0[79u].w - _2783;
        float _2796 = sqrt(((_2782 * _2782) + (_2783 * _2783)) + (_2786 * _2786));
        float _2799 = (1.0 - (cbSceneParam._m0[77u].w / _2770)) * _2796;
        float _2804 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2806 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2959;
        if (abs((_2784 - _2788) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2959 = ((((_2789 > 0.0) ? exp2(_2804 * _2789) : (2.0 - exp2(_2806 * _2789))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2799;
        }
        else
        {
            float _2919 = 1.0 / cbSceneParam._m0[80u].x;
            float _2920 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : max(_2789, _2790));
            float _2921 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : min(_2789, _2790));
            float _2930 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : min(_2920, 0.0));
            float _2931 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : min(_2921, 0.0));
            _2959 = ((abs(_2796 / _2784) * cbSceneParam._m0[80u].y) * ((((_2930 - _2931) * 2.0) - ((exp2(_2804 * (isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0)))) - exp2(_2804 * (isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0))))) * _2919)) - ((exp2(_2806 * _2930) - exp2(_2806 * _2931)) * _2919))) + (_2799 * cbSceneParam._m0[80u].z);
        }
        vec4 _2961 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2716, _2717, 1.0), 0.0);
        float _2970 = exp2((_2959 * (-1.44269502162933349609375)) * (1.0 - _2961.w));
        float _2971 = log2(_2970);
        float _2987 = log2(_2736);
        _2808 = (exp2(_2987 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].x)) * _2961.x) / cbSceneParam._m0[78u].x)) + _2733;
        _2810 = (exp2(_2987 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].y)) * _2961.y) / cbSceneParam._m0[78u].y)) + _2734;
        _2812 = (exp2(_2987 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].z)) * _2961.z) / cbSceneParam._m0[78u].z)) + _2735;
        _2814 = _2970 * _2736;
    }
    else
    {
        _2808 = _2733;
        _2810 = _2734;
        _2812 = _2735;
        _2814 = _2736;
    }
    float _2826 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2827 = _2826 == 3.0;
    float _2828 = log2(_2814);
    float _2835 = exp2(_2828 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2678 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _649))) + ((_2684 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1457)) * cbPerFrame._m0[3u].x));
    float _2836 = exp2(_2828 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2680 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _649))) + ((_2686 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1457)) * cbPerFrame._m0[3u].x));
    float _2837 = exp2(_2828 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2682 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _649))) + ((_2688 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1457)) * cbPerFrame._m0[3u].x));
    float _2846 = (_2826 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2846 * (_2827 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2808)));
    SV_Target.y = _2846 * (_2827 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2810)));
    SV_Target.z = _2846 * (_2827 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2812)));
    SV_Target.w = cbInstanceData._m0[_2708].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2708].w;
}


