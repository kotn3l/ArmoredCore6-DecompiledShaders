#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1371;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3721 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3732 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3743 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].y) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3754 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _435 = (_428 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _436 = (_428 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _437 = (_428 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _454 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[24u].y) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3765 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _508 = (_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435;
    float _509 = (_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436;
    float _510 = (_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437;
    float _514 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _508;
    float _517 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _509;
    float _520 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _510;
    float _527 = ((_508 - _514) * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) + _514;
    float _528 = ((_509 - _517) * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) + _517;
    float _529 = ((_510 - _520) * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) + _520;
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _569 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _588 = _586.x;
    float _589 = _586.y;
    float _590 = _586.z;
    float _597 = ((_569.x - _588) * _428) + _588;
    float _598 = ((_569.y - _589) * _428) + _589;
    float _599 = ((_569.z - _590) * _428) + _590;
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _624 = ((_611.z - _599) * _501) + _599;
    float _627 = ((((_611.x - _597) * _501) + _597) * 2.0) + (-1.0);
    float _628 = ((((_611.y - _598) * _501) + _598) * 2.0) + (-1.0);
    float _629 = dot(vec2(_627, _628), vec2(_627, _628));
    float _3776 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _634 = sqrt(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))));
    vec4 _647 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _665 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _667 = _665.x;
    float _668 = 1.0 - _667;
    float _681 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_667 - _668) * cbMtdParam._m0[24u].z) + _668) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3787 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _689 = (_682 * (cbMtdParam._m0[17u].x - _527)) + _527;
    float _690 = (_682 * (cbMtdParam._m0[17u].y - _528)) + _528;
    float _691 = (_682 * (cbMtdParam._m0[17u].z - _529)) + _529;
    vec4 _703 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _717 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _719 = _717.x;
    float _737 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _719) * _428) + _719;
    float _754 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _295) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _296) + cbTextureTilingScale._m0[21u].w)).x - _737) * _501) + _737;
    float _758 = ((_703.x - _754) * cbMtdParam._m0[19u].z) + _754;
    float _760 = _758 - (_758 * _682);
    float _765 = (((_546.z - _624) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _624;
    vec4 _778 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _785 = (_778.x * 2.0) + (-1.0);
    float _786 = (_778.y * 2.0) + (-1.0);
    float _787 = dot(vec2(_785, _786), vec2(_785, _786));
    float _3798 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _795 = (_682 * (_778.z - _765)) + _765;
    float _800 = _627 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_546.x * 2.0) + (-1.0)));
    float _801 = _628 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_546.y * 2.0) + (-1.0)));
    float _813 = (((_785 - _800) + (cbMtdParam._m0[21u].x * _800)) * _682) + _800;
    float _814 = (((_786 - _801) + (cbMtdParam._m0[21u].x * _801)) * _682) + _801;
    float _815 = (_682 * (sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) - _634)) + _634;
    float _817 = cbMtdParam._m0[22u].x + _647.w;
    float _820 = fma(_815, _242 * NORMAL.x, fma(_814, _249 * TANGENT.x, (_235 * _227) * _813));
    float _823 = fma(_815, _242 * NORMAL.y, fma(_814, _249 * TANGENT.y, (_235 * _228) * _813));
    float _826 = fma(_815, _242 * NORMAL.z, fma(_814, _249 * TANGENT.z, (_235 * _229) * _813));
    float _830 = inversesqrt(dot(vec3(_820, _823, _826), vec3(_820, _823, _826)));
    float _831 = _830 * _820;
    float _832 = _830 * _823;
    float _833 = _830 * _826;
    float _3809 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _834 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _3831 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3842 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3853 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3864 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _839 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _853 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _904 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _894);
    float _905 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _894);
    float _906 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _894);
    float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
    float _911 = _904 * _910;
    float _912 = _905 * _910;
    float _913 = _906 * _910;
    float _919 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _920 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _938 = fma(_833, cbSceneParam._m0[5u].z, fma(_832, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _831));
    float _941 = fma(_833, cbSceneParam._m0[6u].z, fma(_832, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _831));
    float _944 = fma(_833, cbSceneParam._m0[7u].z, fma(_832, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _831));
    uint _958 = (_276 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _964 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_958].x;
    float _965 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_958].y;
    float _966 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_958].z;
    float _3875 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _970 = 1.0 - _839;
    float _971 = _967 * _970;
    float _972 = _968 * _970;
    float _973 = _969 * _970;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _839;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _839;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _839;
    float _981 = _978 + 0.039999999105930328369140625;
    float _983 = _979 + 0.039999999105930328369140625;
    float _984 = _980 + 0.039999999105930328369140625;
    vec4 _993 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _919, cbSceneParam._m0[86u].y * _920));
    float _997 = ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * TEXCOORD_5.w) * _993.x;
    float _998 = dot(vec3(_831, _832, _833), vec3(_911, _912, _913));
    float _1001 = _998 * 2.0;
    float _1005 = (_1001 * _831) - _911;
    float _1006 = (_1001 * _832) - _912;
    float _1007 = (_1001 * _833) - _913;
    float _1011 = abs(dot(vec3(_911, _912, _913), vec3(_831, _832, _833)));
    float _3908 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1013 = sqrt(_834);
    float _1026 = exp2((_1013 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1013 * 3.0));
    float _1032 = (1.0 - _1026) * ((_1013 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1033 = _1026 * _1013;
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1370;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1095 = fma(_1069, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061));
        float _1099 = fma(_1069, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061));
        float _1103 = fma(_1069, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061));
        float _1128 = _1061 + _831;
        float _1129 = _1065 + _832;
        float _1130 = _1069 + _833;
        float _1140 = fma(_1130, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128)) - _1095;
        float _1141 = fma(_1130, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128)) - _1099;
        float _1142 = fma(_1130, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128)) - _1103;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1095 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1099 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[34u].z) + ((((((_1103 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1198 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1164.x + (-0.5));
        float _1200 = _1198 * (_1164.y + (-0.5));
        float _1201 = _1198 * (_1164.z + (-0.5));
        float _1208 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1171.x + (-0.5));
        float _1210 = _1208 * (_1171.y + (-0.5));
        float _1211 = _1208 * (_1171.z + (-0.5));
        float _1218 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1178.x + (-0.5));
        float _1220 = _1218 * (_1178.y + (-0.5));
        float _1221 = _1218 * (_1178.z + (-0.5));
        float _1228 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1185.x + (-0.5));
        float _1230 = _1228 * (_1185.y + (-0.5));
        float _1231 = _1228 * (_1185.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1252 = (dot(vec3(_831, _832, _833), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1262 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3956 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1264 + 1.0))) + _1269) * _1232;
        float _1279 = _1200 * 0.5;
        float _1280 = _1210 * 0.5;
        float _1281 = _1220 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_831, _832, _833), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3989 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1306 + 1.0))) + _1311) * _1233;
        float _1321 = _1201 * 0.5;
        float _1322 = _1211 * 0.5;
        float _1323 = _1221 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_831, _832, _833), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4022 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1348 + 1.0))) + _1353) * _1234;
        _1370 = _1201;
        _1372 = _1200;
        _1373 = _1199;
        _1374 = _1211;
        _1375 = _1210;
        _1376 = _1209;
        _1377 = _1221;
        _1378 = _1220;
        _1379 = _1219;
        _1380 = _1234;
        _1381 = _1233;
        _1382 = _1232;
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1371;
        _1372 = _1371;
        _1373 = _1371;
        _1374 = _1371;
        _1375 = _1371;
        _1376 = _1371;
        _1377 = _1371;
        _1378 = _1371;
        _1379 = _1371;
        _1380 = _1371;
        _1381 = _1371;
        _1382 = _1371;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1409 = fma(_1069, cbModelParam._m0[30u].z, fma(_1065, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061));
        float _1413 = fma(_1069, cbModelParam._m0[31u].z, fma(_1065, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061));
        float _1417 = fma(_1069, cbModelParam._m0[32u].z, fma(_1065, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061));
        float _1440 = _1061 + _831;
        float _1441 = _1065 + _832;
        float _1442 = _1069 + _833;
        float _1452 = fma(_1442, cbModelParam._m0[30u].z, fma(_1441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1440)) - _1409;
        float _1453 = fma(_1442, cbModelParam._m0[31u].z, fma(_1441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1440)) - _1413;
        float _1454 = fma(_1442, cbModelParam._m0[32u].z, fma(_1441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1440)) - _1417;
        float _1458 = inversesqrt(dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454)));
        float _1471 = ((_1458 * _1452) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1409 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1458 * _1453) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1413 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1458 * _1454) / cbModelParam._m0[35u].z) + ((((((_1417 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        float _1508 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1475.x + (-0.5));
        float _1510 = _1508 * (_1475.y + (-0.5));
        float _1511 = _1508 * (_1475.z + (-0.5));
        float _1518 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1482.x + (-0.5));
        float _1520 = _1518 * (_1482.y + (-0.5));
        float _1521 = _1518 * (_1482.z + (-0.5));
        float _1528 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1489.x + (-0.5));
        float _1530 = _1528 * (_1489.y + (-0.5));
        float _1531 = _1528 * (_1489.z + (-0.5));
        float _1538 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1496.x + (-0.5));
        float _1540 = _1538 * (_1496.y + (-0.5));
        float _1541 = _1538 * (_1496.z + (-0.5));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = _1509 * 0.5;
        float _1546 = _1519 * 0.5;
        float _1547 = _1529 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_831, _832, _833), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4085 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1572 + 1.0))) + _1577) * _1542;
        float _1587 = _1510 * 0.5;
        float _1588 = _1520 * 0.5;
        float _1589 = _1530 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_831, _832, _833), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4118 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1614 + 1.0))) + _1619) * _1543;
        float _1629 = _1511 * 0.5;
        float _1630 = _1521 * 0.5;
        float _1631 = _1531 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_831, _832, _833), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4151 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1656 + 1.0))) + _1661) * _1544;
        _1678 = _1511;
        _1679 = _1510;
        _1680 = _1509;
        _1681 = _1521;
        _1682 = _1520;
        _1683 = _1519;
        _1684 = _1531;
        _1685 = _1530;
        _1686 = _1529;
        _1687 = _1544;
        _1688 = _1543;
        _1689 = _1542;
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
    }
    else
    {
        _1678 = _1371;
        _1679 = _1371;
        _1680 = _1371;
        _1681 = _1371;
        _1682 = _1371;
        _1683 = _1371;
        _1684 = _1371;
        _1685 = _1371;
        _1686 = _1371;
        _1687 = _1371;
        _1688 = _1371;
        _1689 = _1371;
        _1690 = 0.0;
        _1691 = 0.0;
        _1692 = 0.0;
    }
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1383)) + _1383;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1384)) + _1384;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1385)) + _1385;
    float _1725 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1702));
    float _1746 = _1005 * 0.5;
    float _1747 = _1006 * 0.5;
    float _1748 = _1007 * 0.5;
    float _1749 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1752 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1755 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1789;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1762 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1370, _1374, _1377, _1380));
        float _1766 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1770 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1777 = dot(vec4(cbModelParam._m0[39u]), vec4(_1746, _1747, _1748, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1800;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1791 = dot(vec4(cbModelParam._m0[40u]), vec4(_1746, _1747, _1748, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1804 = (_1800 * cbModelParam._m0[1u].x) + (_1789 * (1.0 - cbModelParam._m0[1u].x));
    float _1814 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _834);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1814 : min(cbModelParam._m0[25u].z, _1814));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1863 = fma(_1069, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061)) + cbModelParam._m0[13u].w;
        float _1867 = fma(_1069, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061)) + cbModelParam._m0[14u].w;
        float _1871 = fma(_1069, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061)) + cbModelParam._m0[15u].w;
        float _1874 = fma(_1007, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005));
        float _1877 = fma(_1007, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005));
        float _1880 = fma(_1007, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005));
        float _1908;
        if (_1874 > 0.0)
        {
            _1908 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1908 = frontier_phi_14_12_ladder;
        }
        float _2132;
        if (_1877 > 0.0)
        {
            _2132 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2132 = frontier_phi_23_19_ladder;
        }
        float _2389;
        if (_1880 > 0.0)
        {
            _2389 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2389 = frontier_phi_35_30_ladder;
        }
        float _2391 = isnan(_2132) ? _1908 : (isnan(_1908) ? _2132 : min(_1908, _2132));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1874) + _1863;
        float _2397 = (_2392 * _1877) + _1867;
        float _2398 = (_2392 * _1880) + _1871;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2399;
        float _2403 = _2399 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 > _2403) || ((_2397 < _2401) || ((_2396 < _2401) || (_2396 > _2403))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2398, cbModelParam._m0[9u].z, fma(_2397, cbModelParam._m0[9u].y, _2396 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2398, cbModelParam._m0[10u].z, fma(_2397, cbModelParam._m0[10u].y, _2396 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2398, cbModelParam._m0[11u].z, fma(_2397, cbModelParam._m0[11u].y, _2396 * cbModelParam._m0[11u].x))), _1815);
            frontier_phi_13_35_ladder = _2526.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2526.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2526.x * cbModelParam._m0[1u].y;
        }
        _1896 = frontier_phi_13_35_ladder_2;
        _1898 = frontier_phi_13_35_ladder_1;
        _1900 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1005, _1006, _1007), _1815);
        _1896 = _1884.x * cbModelParam._m0[1u].y;
        _1898 = _1884.y * cbModelParam._m0[1u].y;
        _1900 = _1884.z * cbModelParam._m0[1u].y;
    }
    float _1904 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _834);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1904 : min(cbModelParam._m0[25u].w, _1904));
    float _1995;
    float _1997;
    float _1999;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1959 = fma(_1069, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061)) + cbModelParam._m0[21u].w;
        float _1963 = fma(_1069, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061)) + cbModelParam._m0[22u].w;
        float _1967 = fma(_1069, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061)) + cbModelParam._m0[23u].w;
        float _1970 = fma(_1007, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005));
        float _1973 = fma(_1007, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005));
        float _1976 = fma(_1007, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005));
        float _2137;
        if (_1970 > 0.0)
        {
            _2137 = abs((1.0 - _1959) / _1970);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1959 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2137 = frontier_phi_25_21_ladder;
        }
        float _2416;
        if (_1973 > 0.0)
        {
            _2416 = abs((1.0 - _1963) / _1973);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1963 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2416 = frontier_phi_37_32_ladder;
        }
        float _2629;
        if (_1976 > 0.0)
        {
            _2629 = abs((1.0 - _1967) / _1976);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1967 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2629 = frontier_phi_46_43_ladder;
        }
        float _2631 = isnan(_2416) ? _2137 : (isnan(_2137) ? _2416 : min(_2137, _2416));
        float _2632 = isnan(_2629) ? _2631 : (isnan(_2631) ? _2629 : min(_2631, _2629));
        float _2636 = (_2632 * _1970) + _1959;
        float _2637 = (_2632 * _1973) + _1963;
        float _2638 = (_2632 * _1976) + _1967;
        float _2639 = _2632 * 9.9999997473787516355514526367188e-05;
        float _2640 = (-1.0) - _2639;
        float _2642 = _2639 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2638 > _2642) || ((_2638 < _2640) || ((_2637 > _2642) || ((_2637 < _2640) || ((_2636 < _2640) || (_2636 > _2642))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2638, cbModelParam._m0[17u].z, fma(_2637, cbModelParam._m0[17u].y, _2636 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2638, cbModelParam._m0[18u].z, fma(_2637, cbModelParam._m0[18u].y, _2636 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2638, cbModelParam._m0[19u].z, fma(_2637, cbModelParam._m0[19u].y, _2636 * cbModelParam._m0[19u].x))), _1905);
            frontier_phi_22_46_ladder = _2837.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2837.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2837.x * cbModelParam._m0[1u].z;
        }
        _1995 = frontier_phi_22_46_ladder_2;
        _1997 = frontier_phi_22_46_ladder_1;
        _1999 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1005, _1006, _1007), _1905);
        _1995 = _1979.x * cbModelParam._m0[1u].z;
        _1997 = _1979.y * cbModelParam._m0[1u].z;
        _1999 = _1979.z * cbModelParam._m0[1u].z;
    }
    float _2012 = (((_1032 * _981) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_1995 - _1896)) + _1896);
    float _2014 = (((_1032 * _983) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_1997 - _1898)) + _1898);
    float _2016 = (((_1032 * _984) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_1999 - _1900)) + _1900);
    float _2019 = fma(_2016, cbSceneParam._m0[89u].z, fma(_2014, cbSceneParam._m0[89u].y, _2012 * cbSceneParam._m0[89u].x));
    float _2022 = fma(_2016, cbSceneParam._m0[90u].z, fma(_2014, cbSceneParam._m0[90u].y, _2012 * cbSceneParam._m0[90u].x));
    float _2025 = fma(_2016, cbSceneParam._m0[91u].z, fma(_2014, cbSceneParam._m0[91u].y, _2012 * cbSceneParam._m0[91u].x));
    vec4 _2033 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_919, _920));
    float _2035 = _2033.w;
    float _2047 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2035);
    float _2048 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2035);
    float _2049 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2035);
    uvec4 _2053 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2055 = _2053.x * 14u;
    uint _2056 = _2055 + 13u;
    float _2063 = _997 + (-1.0);
    float _2068 = (cbLight._m0[_2056].x * _2063) + 1.0;
    float _2069 = (cbLight._m0[_2056].y * _2063) + 1.0;
    float _2070 = (cbLight._m0[_2056].z * _2063) + 1.0;
    float _2071 = (cbLight._m0[_2056].w * _2063) + 1.0;
    uint _2072 = _2055 + 5u;
    float _2078 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
    uint _2082 = _2055 + 4u;
    float _2091 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
    uint _2095 = _2055 | 1u;
    float _2106 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_831, _832, _833));
    float _2109 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_831, _832, _833));
    float _4287 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _4298 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2114 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * 0.3183098733425140380859375;
    float _2116 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
    float _2123 = ((cbLight._m0[_2072].x * _2078) * _2116) + (((cbLight._m0[_2082].x * _2047) * _2091) * _2114);
    float _2124 = ((_2078 * cbLight._m0[_2072].y) * _2116) + (((cbLight._m0[_2082].y * _2048) * _2091) * _2114);
    float _2125 = ((_2078 * cbLight._m0[_2072].z) * _2116) + (((cbLight._m0[_2082].z * _2049) * _2091) * _2114);
    uvec4 _2129 = floatBitsToUint(cbLight._m0[_2055 + 12u]);
    bool _2131 = _2129.x == 0u;
    float _2142;
    float _2144;
    float _2146;
    if (_2131)
    {
        _2142 = _2123;
        _2144 = _2124;
        _2146 = _2125;
    }
    else
    {
        uint _2150 = _2055 + 6u;
        float _2166 = (dot(vec3(cbLight._m0[_2055 + 2u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2167 = _2166 * _2166;
        float _4309 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2168 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2169 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2142 = (((cbLight._m0[_2150].x * 0.3183098733425140380859375) * _2168) * _2169) + _2123;
        _2144 = (((cbLight._m0[_2150].y * 0.3183098733425140380859375) * _2168) * _2169) + _2124;
        _2146 = (((cbLight._m0[_2150].z * 0.3183098733425140380859375) * _2168) * _2169) + _2125;
    }
    bool _2149 = _2129.y == 0u;
    float _2187;
    float _2189;
    float _2191;
    if (_2149)
    {
        _2187 = _2142;
        _2189 = _2144;
        _2191 = _2146;
    }
    else
    {
        uint _2360 = _2055 + 7u;
        float _2376 = (dot(vec3(cbLight._m0[_2055 + 3u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4325 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2379 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2187 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2142;
        _2189 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2144;
        _2191 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2146;
    }
    uint _2194 = _2055 + 8u;
    float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _834) * 0.949999988079071044921875);
    float _2208 = _2207 * _2207;
    float _2209 = cbLight._m0[_2055].x + _911;
    float _2210 = cbLight._m0[_2055].y + _912;
    float _2211 = cbLight._m0[_2055].z + _913;
    float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
    float _2216 = _2215 * _2209;
    float _2217 = _2215 * _2210;
    float _2218 = _2215 * _2211;
    float _2219 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2055].xyz));
    float _4341 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _4352 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2223 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2224 = dot(vec3(_831, _832, _833), vec3(_2216, _2217, _2218));
    float _4363 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2228 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2216, _2217, _2218));
    float _4374 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = _2208 * _2208;
    float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
    float _2244 = exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0);
    float _2245 = 0.959999978542327880859375 - _978;
    float _2247 = 0.959999978542327880859375 - _979;
    float _2248 = 0.959999978542327880859375 - _980;
    float _2255 = 1.0 - _2208;
    float _2266 = (0.5 / (((_2223 * ((_2222 * _2255) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2255) + _2208) * _2222))) * _2222;
    float _4385 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2268 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
    uint _2282 = _2055 + 9u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _834) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2095].x + _911;
    float _2296 = cbLight._m0[_2095].y + _912;
    float _2297 = cbLight._m0[_2095].z + _913;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2095].xyz));
    float _4396 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2309 = dot(vec3(_831, _832, _833), vec3(_2302, _2303, _2304));
    float _4407 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2313 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2302, _2303, _2304));
    float _4418 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2317 = _2294 * _2294;
    float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
    float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0);
    float _2335 = 1.0 - _2294;
    float _2345 = (0.5 / (((_2223 * ((_2308 * _2335) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2335) + _2294) * _2308))) * _2308;
    float _4429 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2347 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
    float _2357 = (((((_2328 * _2245) + _981) * cbLight._m0[_2282].x) * _2347) * _2078) + ((((cbLight._m0[_2194].x * _2047) * ((_2244 * _2245) + _981)) * _2268) * _2091);
    float _2358 = (((((_2328 * _2247) + _983) * cbLight._m0[_2282].y) * _2347) * _2078) + ((((cbLight._m0[_2194].y * _2048) * ((_2244 * _2247) + _983)) * _2268) * _2091);
    float _2359 = (((((_2328 * _2248) + _984) * cbLight._m0[_2282].z) * _2347) * _2078) + ((((cbLight._m0[_2194].z * _2049) * ((_2244 * _2248) + _984)) * _2268) * _2091);
    float _2421;
    float _2423;
    float _2425;
    if (_2131)
    {
        _2421 = _2357;
        _2423 = _2358;
        _2425 = _2359;
    }
    else
    {
        uint _2427 = _2055 + 2u;
        uint _2431 = _2055 + 10u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _834) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _911;
        float _2448 = cbLight._m0[_2427].y + _912;
        float _2449 = cbLight._m0[_2427].z + _913;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2427].xyz));
        float _4440 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2461 = dot(vec3(_831, _832, _833), vec3(_2454, _2455, _2456));
        float _4451 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4462 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
        float _2487 = 1.0 - _2446;
        float _2497 = (0.5 / (((_2223 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2487) + _2446) * _2460))) * _2460;
        float _4473 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2499 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2500 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2421 = (((((_2480 * _2245) + _981) * cbLight._m0[_2431].x) * _2499) * _2500) + _2357;
        _2423 = (((((_2480 * _2247) + _983) * cbLight._m0[_2431].y) * _2499) * _2500) + _2358;
        _2425 = (((((_2480 * _2248) + _984) * cbLight._m0[_2431].z) * _2499) * _2500) + _2359;
    }
    float _2535;
    float _2537;
    float _2539;
    if (_2149)
    {
        _2535 = _2421;
        _2537 = _2423;
        _2539 = _2425;
    }
    else
    {
        uint _2546 = _2055 + 3u;
        uint _2550 = _2055 + 11u;
        float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2546].w)) * _834) * 0.949999988079071044921875);
        float _2565 = _2564 * _2564;
        float _2566 = cbLight._m0[_2546].x + _911;
        float _2567 = cbLight._m0[_2546].y + _912;
        float _2568 = cbLight._m0[_2546].z + _913;
        float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
        float _2573 = _2572 * _2566;
        float _2574 = _2572 * _2567;
        float _2575 = _2572 * _2568;
        float _2576 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2546].xyz));
        float _4489 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2580 = dot(vec3(_831, _832, _833), vec3(_2573, _2574, _2575));
        float _4500 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2584 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_2573, _2574, _2575));
        float _4511 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2588 = _2565 * _2565;
        float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
        float _2599 = exp2(log2(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * 5.0);
        float _2606 = 1.0 - _2565;
        float _2616 = (0.5 / (((_2223 * ((_2579 * _2606) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2606) + _2565) * _2579))) * _2579;
        float _4522 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2618 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
        float _2619 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2535 = (((((_2599 * _2245) + _981) * cbLight._m0[_2550].x) * _2618) * _2619) + _2421;
        _2537 = (((((_2599 * _2247) + _983) * cbLight._m0[_2550].y) * _2618) * _2619) + _2423;
        _2539 = (((((_2599 * _2248) + _984) * cbLight._m0[_2550].z) * _2618) * _2619) + _2425;
    }
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    if (_2053.y == 0u)
    {
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2694;
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2694;
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2694;
        uvec4 _2709 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2710 = _2709.x;
        uint _2721 = uint((float(_2709.y) * floor(float(uint(cbSceneParam._m0[85u].y * _920) / _2710))) + floor(float(uint(cbSceneParam._m0[85u].x * _919) / _2710)));
        float _2731 = (log2(_2697 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2732 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        uint _2735 = uint(isnan(14.0) ? _2732 : (isnan(_2732) ? 14.0 : min(_2732, 14.0)));
        uvec4 _2740 = texelFetch(g_lightClusterGridBuffer, int(((_2735 << 2u) + (_2721 << 6u)) >> 2u));
        uint _2741 = _2740.x;
        uint _2742 = _2709.z;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        if (((((1u << ((_2742 >> 4u) & 15u)) + 4294967295u) & _2741) == 0u) || ((_2742 & 240u) == 0u))
        {
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
        }
        else
        {
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            uint _2993 = 0u;
            uint _3002;
            bool _3003;
            for (;;)
            {
                _3002 = texelFetch(g_lightClassification, int((((_2735 << 5u) + (_2721 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                _3003 = _3002 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3003)
                {
                    frontier_phi_61_pred = _2987;
                    frontier_phi_61_pred_1 = _2992;
                    frontier_phi_61_pred_2 = _2991;
                    frontier_phi_61_pred_3 = _2990;
                    frontier_phi_61_pred_4 = _2989;
                    frontier_phi_61_pred_5 = _2988;
                }
                else
                {
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    uint _3117;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2989;
                    _3114 = _2990;
                    _3115 = _2991;
                    _3116 = _2992;
                    _3117 = _3002;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    for (;;)
                    {
                        uint _3121 = uint(findLSB(_3117)) + (_2993 << 5u);
                        uint _3118 = (_3117 + 4294967295u) & _3117;
                        uint _3123 = _3121 * 48u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3143 = (_3121 * 48u) + 4u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3162 = (_3121 * 48u) + 8u;
                        vec3 _3173 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x));
                        float _3177 = _3137.x - _2695;
                        float _3178 = _3137.y - _2696;
                        float _3179 = _3137.z - _2697;
                        float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                        float _3183 = inversesqrt(_3180);
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3187 = dot(vec3(_938, _941, _944), vec3(_3184, _3185, _3186));
                        float _3192 = 1.0 - (_3180 * _3137.w);
                        float _4548 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3194 = sqrt(_3180) * _3156.w;
                        float _3197 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3187) + _3198;
                        float _3204 = _3194 * _3194;
                        float _3208 = ((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3193) / ((_3204 * 0.699999988079071044921875) + 1.0);
                        float _3212 = (-0.0) - _2695;
                        float _3213 = (-0.0) - _2696;
                        float _3214 = (-0.0) - _2697;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3229 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                        float _3230 = 1.0 - _1013;
                        float _3237 = sqrt(1.0 - ((1.0 - (_3230 * _3230)) * (1.0 - (_3229 * _3229))));
                        float _3238 = _3237 * _3237;
                        float _3239 = _3238 * _3238;
                        float _3240 = _3219 + _3184;
                        float _3241 = _3220 + _3185;
                        float _3242 = _3221 + _3186;
                        float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                        float _3250 = dot(vec3(_938, _941, _944), vec3(_3219, _3220, _3221));
                        float _4564 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3253 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3254 = dot(vec3(_938, _941, _944), vec3(_3246 * _3240, _3246 * _3241, _3246 * _3242));
                        float _4575 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3257 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3261 = ((_3257 * _3257) * (_3239 + (-1.0))) + 1.0;
                        float _3262 = _3197 * _3238;
                        float _3263 = _3262 * _3262;
                        float _3266 = ((1.0 - _3263) * _3187) + _3263;
                        float _4586 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3267 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3268 = 1.0 - _3238;
                        float _3278 = (0.5 / (((_3267 * ((_3253 * _3268) + _3238)) + 9.9999999392252902907785028219223e-09) + (((_3267 * _3268) + _3238) * _3253))) * _3267;
                        float _4597 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3289 = (((_3239 * 3.1415927410125732421875) * (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) / ((_3261 * _3261) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125))) * _3193;
                        _3046 = (_3208 * _3156.x) + _3114;
                        _3047 = (_3208 * _3156.y) + _3115;
                        _3048 = (_3208 * _3156.z) + _3116;
                        _3043 = (_3289 * _3173.x) + _3111;
                        _3044 = (_3289 * _3173.y) + _3112;
                        _3045 = (_3289 * _3173.z) + _3113;
                        if (_3118 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3045;
                            _3114 = _3046;
                            _3115 = _3047;
                            _3116 = _3048;
                            _3117 = _3118;
                        }
                    }
                    frontier_phi_61_pred = _3043;
                    frontier_phi_61_pred_1 = _3048;
                    frontier_phi_61_pred_2 = _3047;
                    frontier_phi_61_pred_3 = _3046;
                    frontier_phi_61_pred_4 = _3045;
                    frontier_phi_61_pred_5 = _3044;
                }
                _2843 = frontier_phi_61_pred;
                _2853 = frontier_phi_61_pred_1;
                _2851 = frontier_phi_61_pred_2;
                _2849 = frontier_phi_61_pred_3;
                _2847 = frontier_phi_61_pred_4;
                _2845 = frontier_phi_61_pred_5;
                uint _2994 = _2993 + 1u;
                if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2987 = _2843;
                    _2988 = _2845;
                    _2989 = _2847;
                    _2990 = _2849;
                    _2991 = _2851;
                    _2992 = _2853;
                    _2993 = _2994;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
        }
        uvec4 _2856 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2857 = _2856.z;
        uint _2859 = (_2857 >> 8u) & 15u;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((4294967295u << _2859) & _2741) == 0u)
        {
            _2955 = _2842;
            _2957 = _2844;
            _2959 = _2846;
            _2961 = _2848;
            _2963 = _2850;
            _2965 = _2852;
        }
        else
        {
            float _2980 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
            float _2981 = _2980 * _2695;
            float _2982 = _2980 * _2696;
            float _2983 = _2980 * _2697;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2859 < ((_2857 >> 12u) & 15u))
            {
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _3094 = _2842;
                float _3095 = _2844;
                float _3096 = _2846;
                float _3097 = _2848;
                float _3098 = _2850;
                float _3099 = _2852;
                uint _3100 = _2859;
                uint _3109;
                bool _3110;
                for (;;)
                {
                    _3109 = texelFetch(g_lightClassification, int((((_2735 << 5u) + (_2721 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                    _3110 = _3109 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3110)
                    {
                        frontier_phi_67_pred = _3097;
                        frontier_phi_67_pred_1 = _3098;
                        frontier_phi_67_pred_2 = _3099;
                        frontier_phi_67_pred_3 = _3096;
                        frontier_phi_67_pred_4 = _3095;
                        frontier_phi_67_pred_5 = _3094;
                    }
                    else
                    {
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3307 = _3094;
                        float _3308 = _3095;
                        float _3309 = _3096;
                        float _3310 = _3097;
                        float _3311 = _3098;
                        float _3312 = _3099;
                        uint _3313 = _3109;
                        uint _3314;
                        vec4 _3339;
                        float _3340;
                        vec4 _3355;
                        vec3 _3367;
                        vec4 _3382;
                        vec4 _3397;
                        float _3443;
                        bool _3444;
                        for (;;)
                        {
                            uint _3324 = ((_3100 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3313));
                            _3314 = (_3313 + 4294967295u) & _3313;
                            uint _3326 = _3324 * 40u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            _3340 = _3339.w;
                            uint _3342 = (_3324 * 40u) + 4u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3357 = (_3324 * 40u) + 8u;
                            _3367 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x));
                            uint _3369 = (_3324 * 40u) + 16u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3324 * 40u) + 20u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3324 * 40u) + 24u;
                            vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3418 = (_3324 * 40u) + 28u;
                            vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            _3443 = fma(_2697, _3431.z, fma(_2696, _3431.y, _3431.x * _2695)) + _3431.w;
                            _3444 = !((fma(_2697, _3412.z, fma(_2696, _3412.y, _3412.x * _2695)) + _3412.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3444)
                            {
                                float _3471 = _3339.x - _2695;
                                float _3472 = _3339.y - _2696;
                                float _3473 = _3339.z - _2697;
                                float _3474 = dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473));
                                float _3477 = inversesqrt(_3474);
                                float _3478 = _3477 * _3471;
                                float _3479 = _3477 * _3472;
                                float _3480 = _3477 * _3473;
                                float _3484 = 1.0 - (_3474 / (_3340 * _3340));
                                float _4608 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3489 = sqrt(_3474) * _3355.w;
                                float _3491 = 1.39999997615814208984375 / (_3489 + 1.39999997615814208984375);
                                float _3492 = _3491 * _3491;
                                float _3495 = ((1.0 - _3492) * dot(vec3(_3478, _3479, _3480), vec3(_938, _941, _944))) + _3492;
                                float _3498 = _3489 * _3489;
                                float _3502 = (fma(_2697, _3382.z, fma(_2696, _3382.y, _3382.x * _2695)) + _3382.w) / _3443;
                                float _3503 = (fma(_2697, _3397.z, fma(_2696, _3397.y, _3397.x * _2695)) + _3397.w) / _3443;
                                float _3507 = 1.0 - dot(vec2(_3502, _3503), vec2(_3502, _3503));
                                float _4624 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3509 = _3508 * (((isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0))) * _3485) / ((_3498 * 0.699999988079071044921875) + 1.0));
                                float _3521 = exp2(log2(1.0 / ((_3498 * 3.5) + 5.0)) * 0.25);
                                float _3522 = 1.0 - _1013;
                                float _3529 = sqrt(1.0 - ((1.0 - (_3522 * _3522)) * (1.0 - (_3521 * _3521))));
                                float _3530 = _3529 * _3529;
                                float _3531 = _3530 * _3530;
                                float _3532 = _3478 - _2981;
                                float _3533 = _3479 - _2982;
                                float _3534 = _3480 - _2983;
                                float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                                float _3542 = dot(vec3(_938, _941, _944), vec3((-0.0) - _2981, (-0.0) - _2982, (-0.0) - _2983));
                                float _4635 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3546 = dot(vec3(_938, _941, _944), vec3(_3538 * _3532, _3538 * _3533, _3538 * _3534));
                                float _4646 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3549 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3553 = ((_3549 * _3549) * (_3531 + (-1.0))) + 1.0;
                                float _3554 = _3491 * _3530;
                                float _3555 = _3554 * _3554;
                                float _3561 = ((1.0 - _3555) * dot(vec3(_938, _941, _944), vec3(_3478, _3479, _3480))) + _3555;
                                float _4657 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3563 = 1.0 - _3530;
                                float _3573 = (0.5 / (((_3562 * ((_3545 * _3563) + _3530)) + 9.9999999392252902907785028219223e-09) + (((_3562 * _3563) + _3530) * _3545))) * _3562;
                                float _4668 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3583 = (_3508 * _3485) * (((_3531 * 3.1415927410125732421875) * (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) / ((_3553 * _3553) * ((_3498 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3583 * _3367.x;
                                frontier_phi_73_pred_1 = _3583 * _3367.y;
                                frontier_phi_73_pred_2 = _3509 * _3355.z;
                                frontier_phi_73_pred_3 = _3509 * _3355.y;
                                frontier_phi_73_pred_4 = _3509 * _3355.x;
                                frontier_phi_73_pred_5 = _3583 * _3367.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3587 = frontier_phi_73_pred;
                            _3588 = frontier_phi_73_pred_1;
                            _3592 = frontier_phi_73_pred_2;
                            _3591 = frontier_phi_73_pred_3;
                            _3590 = frontier_phi_73_pred_4;
                            _3589 = frontier_phi_73_pred_5;
                            _3297 = _3590 + _3310;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3296 = _3589 + _3309;
                            if (_3314 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3314;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3297;
                        frontier_phi_67_pred_1 = _3298;
                        frontier_phi_67_pred_2 = _3299;
                        frontier_phi_67_pred_3 = _3296;
                        frontier_phi_67_pred_4 = _3295;
                        frontier_phi_67_pred_5 = _3294;
                    }
                    _2962 = frontier_phi_67_pred;
                    _2964 = frontier_phi_67_pred_1;
                    _2966 = frontier_phi_67_pred_2;
                    _2960 = frontier_phi_67_pred_3;
                    _2958 = frontier_phi_67_pred_4;
                    _2956 = frontier_phi_67_pred_5;
                    uint _3101 = _3100 + 1u;
                    if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3094 = _2956;
                        _3095 = _2958;
                        _3096 = _2960;
                        _3097 = _2962;
                        _3098 = _2964;
                        _3099 = _2966;
                        _3100 = _3101;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2964;
                frontier_phi_55_56_ladder_1 = _2966;
                frontier_phi_55_56_ladder_2 = _2962;
                frontier_phi_55_56_ladder_3 = _2960;
                frontier_phi_55_56_ladder_4 = _2958;
                frontier_phi_55_56_ladder_5 = _2956;
            }
            else
            {
                frontier_phi_55_56_ladder = _2850;
                frontier_phi_55_56_ladder_1 = _2852;
                frontier_phi_55_56_ladder_2 = _2848;
                frontier_phi_55_56_ladder_3 = _2846;
                frontier_phi_55_56_ladder_4 = _2844;
                frontier_phi_55_56_ladder_5 = _2842;
            }
            _2955 = frontier_phi_55_56_ladder_5;
            _2957 = frontier_phi_55_56_ladder_4;
            _2959 = frontier_phi_55_56_ladder_3;
            _2961 = frontier_phi_55_56_ladder_2;
            _2963 = frontier_phi_55_56_ladder;
            _2965 = frontier_phi_55_56_ladder_1;
        }
        float _2970 = isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0));
        _2754 = (_2970 * _2961) + _2187;
        _2756 = (_2970 * _2963) + _2189;
        _2758 = (_2970 * _2965) + _2191;
        _2760 = ((_2955 * _981) * _2970) + _2535;
        _2762 = ((_2957 * _983) * _2970) + _2537;
        _2764 = ((_2959 * _984) * _2970) + _2539;
    }
    else
    {
        _2754 = _2187;
        _2756 = _2189;
        _2758 = _2191;
        _2760 = _2535;
        _2762 = _2537;
        _2764 = _2539;
    }
    float _4684 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4695 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4706 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    uint _2784 = _276 + 6u;
    float _2792 = _919 / cbSceneParam._m0[86u].x;
    float _2793 = _920 / cbSceneParam._m0[86u].y;
    vec4 _2807 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2792, _2793, (log2((isnan(cbSceneParam._m0[77u].w) ? _853 : (isnan(_853) ? cbSceneParam._m0[77u].w : min(_853, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2809 = _2807.x;
    float _2810 = _2807.y;
    float _2811 = _2807.z;
    float _2812 = _2807.w;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    if (_853 > cbSceneParam._m0[78u].w)
    {
        float _2867 = isnan(_853) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _853 : min(cbSceneParam._m0[80u].w, _853));
        float _2868 = _2867 / _853;
        float _2879 = _2868 * _904;
        float _2880 = _905 * _2868;
        float _2881 = (-0.0) - _2880;
        float _2883 = _2868 * _906;
        float _2885 = (cbSceneParam._m0[77u].w * _2881) / _2867;
        float _2886 = _2885 + cbSceneParam._m0[79u].w;
        float _2887 = cbSceneParam._m0[79u].w - _2880;
        float _2893 = sqrt(((_2879 * _2879) + (_2880 * _2880)) + (_2883 * _2883));
        float _2896 = (1.0 - (cbSceneParam._m0[77u].w / _2867)) * _2893;
        float _2901 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2903 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3056;
        if (abs((_2881 - _2885) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3056 = ((((_2886 > 0.0) ? exp2(_2901 * _2886) : (2.0 - exp2(_2903 * _2886))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2896;
        }
        else
        {
            float _3016 = 1.0 / cbSceneParam._m0[80u].x;
            float _3017 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : max(_2886, _2887));
            float _3018 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : min(_2886, _2887));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            _3056 = ((abs(_2893 / _2881) * cbSceneParam._m0[80u].y) * ((((_3027 - _3028) * 2.0) - ((exp2(_2901 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0)))) - exp2(_2901 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))))) * _3016)) - ((exp2(_2903 * _3027) - exp2(_2903 * _3028)) * _3016))) + (_2896 * cbSceneParam._m0[80u].z);
        }
        vec4 _3058 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2792, _2793, 1.0), 0.0);
        float _3067 = exp2((_3056 * (-1.44269502162933349609375)) * (1.0 - _3058.w));
        float _3068 = log2(_3067);
        float _3084 = log2(_2812);
        _2905 = (exp2(_3084 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].x)) * _3058.x) / cbSceneParam._m0[78u].x)) + _2809;
        _2907 = (exp2(_3084 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].y)) * _3058.y) / cbSceneParam._m0[78u].y)) + _2810;
        _2909 = (exp2(_3084 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].z)) * _3058.z) / cbSceneParam._m0[78u].z)) + _2811;
        _2911 = _3067 * _2812;
    }
    else
    {
        _2905 = _2809;
        _2907 = _2810;
        _2909 = _2811;
        _2911 = _2812;
    }
    float _2923 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2924 = _2923 == 3.0;
    float _2925 = log2(_2911);
    float _2932 = exp2(_2925 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2754 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _997))) + ((_2760 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1804)) * cbPerFrame._m0[3u].x));
    float _2933 = exp2(_2925 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2756 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _997))) + ((_2762 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1804)) * cbPerFrame._m0[3u].x));
    float _2934 = exp2(_2925 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2758 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _997))) + ((_2764 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1804)) * cbPerFrame._m0[3u].x));
    float _2943 = (_2923 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2943 * (_2924 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2905)));
    SV_Target.y = _2943 * (_2924 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2907)));
    SV_Target.z = _2943 * (_2924 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2909)));
    SV_Target.w = cbInstanceData._m0[_2784].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2784].w;
}


