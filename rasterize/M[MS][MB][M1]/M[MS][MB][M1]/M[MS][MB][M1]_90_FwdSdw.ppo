#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1316;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3926 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _467 = _465.x;
    float _468 = _465.y;
    float _469 = _465.z;
    float _478 = ((_448.z - _469) * _396) + _469;
    float _481 = ((((_448.x - _467) * _396) + _467) * 2.0) + (-1.0);
    float _482 = ((((_448.y - _468) * _396) + _468) * 2.0) + (-1.0);
    float _483 = dot(vec2(_481, _482), vec2(_481, _482));
    float _3937 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _521 = _519.x;
    float _522 = 1.0 - _521;
    float _528 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _531 = ((isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : min(_528, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _540 = (_531 - ((((((_521 - _522) * cbMtdParam._m0[24u].z) + _522) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _531))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3958 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _548 = (_541 * (cbMtdParam._m0[17u].x - _403)) + _403;
    float _549 = (_541 * (cbMtdParam._m0[17u].y - _404)) + _404;
    float _550 = (_541 * (cbMtdParam._m0[17u].z - _405)) + _405;
    vec4 _562 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _564 = _562.x;
    float _565 = 1.0 - _564;
    float _592 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_564 - _565) * cbMtdParam._m0[24u].w) + _565) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3969 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _601 = ((((cbMtdParam._m0[10u].x - _548) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _593) + _548;
    float _602 = ((((cbMtdParam._m0[10u].y - _549) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _593) + _549;
    float _603 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _550)) * _593) + _550;
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _631 = _629.x;
    float _649 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _631) * _396) + _631;
    float _653 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _649) * cbMtdParam._m0[19u].z) + _649;
    float _655 = _653 - (_653 * _541);
    float _657 = _655 - (_655 * _593);
    float _662 = (((_423.z - _478) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _478;
    vec4 _676 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _683 = (_676.x * 2.0) + (-1.0);
    float _684 = (_676.y * 2.0) + (-1.0);
    float _685 = dot(vec2(_683, _684), vec2(_683, _684));
    float _3980 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _693 = (_541 * (_676.z - _662)) + _662;
    float _696 = ((cbMtdParam._m0[23u].y - _693) * _593) + _693;
    vec4 _715 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _721 = (_715.x * 2.0) + (-1.0);
    float _722 = (_715.y * 2.0) + (-1.0);
    float _723 = dot(vec2(_721, _722), vec2(_721, _722));
    float _3991 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _733 = _481 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_423.x * 2.0) + (-1.0)));
    float _734 = _482 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_423.y * 2.0) + (-1.0)));
    float _746 = (((_683 - _733) + (cbMtdParam._m0[21u].x * _733)) * _541) + _733;
    float _747 = (((_684 - _734) + (cbMtdParam._m0[21u].x * _734)) * _541) + _734;
    float _748 = (_541 * (sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) - _488)) + _488;
    float _759 = (((_721 - _746) + (_746 * cbMtdParam._m0[22u].z)) * _593) + _746;
    float _760 = (((_722 - _747) + (_747 * cbMtdParam._m0[22u].z)) * _593) + _747;
    float _761 = ((sqrt(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) - _748) * _593) + _748;
    float _763 = cbMtdParam._m0[22u].x + _501.w;
    float _766 = fma(_761, _246 * NORMAL.x, fma(_760, _253 * TANGENT.x, (_239 * _231) * _759));
    float _769 = fma(_761, _246 * NORMAL.y, fma(_760, _253 * TANGENT.y, (_239 * _232) * _759));
    float _772 = fma(_761, _246 * NORMAL.z, fma(_760, _253 * TANGENT.z, (_239 * _233) * _759));
    float _776 = inversesqrt(dot(vec3(_766, _769, _772), vec3(_766, _769, _772)));
    float _777 = _776 * _766;
    float _778 = _776 * _769;
    float _779 = _776 * _772;
    float _4002 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _780 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4024 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4035 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4046 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4057 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _785 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _799 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _849 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _839);
    float _850 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _839);
    float _851 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _839);
    float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
    float _856 = _849 * _855;
    float _857 = _850 * _855;
    float _858 = _851 * _855;
    float _864 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _865 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _883 = fma(_779, cbSceneParam._m0[5u].z, fma(_778, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _777));
    float _886 = fma(_779, cbSceneParam._m0[6u].z, fma(_778, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _777));
    float _889 = fma(_779, cbSceneParam._m0[7u].z, fma(_778, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _777));
    uint _903 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _909 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_903].x;
    float _910 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_903].y;
    float _911 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_903].z;
    float _4068 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _4079 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _915 = 1.0 - _785;
    float _916 = _912 * _915;
    float _917 = _913 * _915;
    float _918 = _914 * _915;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _785;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _785;
    float _925 = (_914 + (-0.039999999105930328369140625)) * _785;
    float _926 = _923 + 0.039999999105930328369140625;
    float _928 = _924 + 0.039999999105930328369140625;
    float _929 = _925 + 0.039999999105930328369140625;
    vec4 _938 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _864, cbSceneParam._m0[86u].y * _865));
    float _942 = ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * TEXCOORD_5.w) * _938.x;
    float _943 = dot(vec3(_777, _778, _779), vec3(_856, _857, _858));
    float _946 = _943 * 2.0;
    float _950 = (_946 * _777) - _856;
    float _951 = (_946 * _778) - _857;
    float _952 = (_946 * _779) - _858;
    float _956 = abs(dot(vec3(_856, _857, _858), vec3(_777, _778, _779)));
    float _4101 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _958 = sqrt(_780);
    float _971 = exp2((_958 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_958 * 3.0));
    float _977 = (1.0 - _971) * ((_958 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _978 = _971 * _958;
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1315;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1040 = fma(_1014, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006));
        float _1044 = fma(_1014, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006));
        float _1048 = fma(_1014, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006));
        float _1073 = _1006 + _777;
        float _1074 = _1010 + _778;
        float _1075 = _1014 + _779;
        float _1085 = fma(_1075, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073)) - _1040;
        float _1086 = fma(_1075, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073)) - _1044;
        float _1087 = fma(_1075, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073)) - _1048;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1040 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1044 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[34u].z) + ((((((_1048 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1143 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1109.x + (-0.5));
        float _1145 = _1143 * (_1109.y + (-0.5));
        float _1146 = _1143 * (_1109.z + (-0.5));
        float _1153 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1116.x + (-0.5));
        float _1155 = _1153 * (_1116.y + (-0.5));
        float _1156 = _1153 * (_1116.z + (-0.5));
        float _1163 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1123.x + (-0.5));
        float _1165 = _1163 * (_1123.y + (-0.5));
        float _1166 = _1163 * (_1123.z + (-0.5));
        float _1173 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1130.x + (-0.5));
        float _1175 = _1173 * (_1130.y + (-0.5));
        float _1176 = _1173 * (_1130.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1197 = (dot(vec3(_777, _778, _779), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1207 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _4149 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1209 + 1.0))) + _1214) * _1177;
        float _1224 = _1145 * 0.5;
        float _1225 = _1155 * 0.5;
        float _1226 = _1165 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_777, _778, _779), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _4182 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1251 + 1.0))) + _1256) * _1178;
        float _1266 = _1146 * 0.5;
        float _1267 = _1156 * 0.5;
        float _1268 = _1166 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_777, _778, _779), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4215 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1293 + 1.0))) + _1298) * _1179;
        _1315 = _1146;
        _1317 = _1145;
        _1318 = _1144;
        _1319 = _1156;
        _1320 = _1155;
        _1321 = _1154;
        _1322 = _1166;
        _1323 = _1165;
        _1324 = _1164;
        _1325 = _1179;
        _1326 = _1178;
        _1327 = _1177;
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1316;
        _1317 = _1316;
        _1318 = _1316;
        _1319 = _1316;
        _1320 = _1316;
        _1321 = _1316;
        _1322 = _1316;
        _1323 = _1316;
        _1324 = _1316;
        _1325 = _1316;
        _1326 = _1316;
        _1327 = _1316;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1355 = fma(_1014, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006));
        float _1359 = fma(_1014, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006));
        float _1363 = fma(_1014, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006));
        float _1386 = _1006 + _777;
        float _1387 = _1010 + _778;
        float _1388 = _1014 + _779;
        float _1398 = fma(_1388, cbModelParam._m0[30u].z, fma(_1387, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1386)) - _1355;
        float _1399 = fma(_1388, cbModelParam._m0[31u].z, fma(_1387, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1386)) - _1359;
        float _1400 = fma(_1388, cbModelParam._m0[32u].z, fma(_1387, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1386)) - _1363;
        float _1404 = inversesqrt(dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400)));
        float _1417 = ((_1404 * _1398) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1355 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1404 * _1399) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1359 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1404 * _1400) / cbModelParam._m0[35u].z) + ((((((_1363 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        float _1454 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1421.x + (-0.5));
        float _1456 = _1454 * (_1421.y + (-0.5));
        float _1457 = _1454 * (_1421.z + (-0.5));
        float _1464 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1428.x + (-0.5));
        float _1466 = _1464 * (_1428.y + (-0.5));
        float _1467 = _1464 * (_1428.z + (-0.5));
        float _1474 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1435.x + (-0.5));
        float _1476 = _1474 * (_1435.y + (-0.5));
        float _1477 = _1474 * (_1435.z + (-0.5));
        float _1484 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1442.x + (-0.5));
        float _1486 = _1484 * (_1442.y + (-0.5));
        float _1487 = _1484 * (_1442.z + (-0.5));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = _1455 * 0.5;
        float _1492 = _1465 * 0.5;
        float _1493 = _1475 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_777, _778, _779), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4278 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1518 + 1.0))) + _1523) * _1488;
        float _1533 = _1456 * 0.5;
        float _1534 = _1466 * 0.5;
        float _1535 = _1476 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_777, _778, _779), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4311 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1560 + 1.0))) + _1565) * _1489;
        float _1575 = _1457 * 0.5;
        float _1576 = _1467 * 0.5;
        float _1577 = _1477 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_777, _778, _779), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4344 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1602 + 1.0))) + _1607) * _1490;
        _1624 = _1457;
        _1625 = _1456;
        _1626 = _1455;
        _1627 = _1467;
        _1628 = _1466;
        _1629 = _1465;
        _1630 = _1477;
        _1631 = _1476;
        _1632 = _1475;
        _1633 = _1490;
        _1634 = _1489;
        _1635 = _1488;
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
    }
    else
    {
        _1624 = _1316;
        _1625 = _1316;
        _1626 = _1316;
        _1627 = _1316;
        _1628 = _1316;
        _1629 = _1316;
        _1630 = _1316;
        _1631 = _1316;
        _1632 = _1316;
        _1633 = _1316;
        _1634 = _1316;
        _1635 = _1316;
        _1636 = 0.0;
        _1637 = 0.0;
        _1638 = 0.0;
    }
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1328)) + _1328;
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1329)) + _1329;
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1330)) + _1330;
    float _1671 = fma(_1650, cbSceneParam._m0[89u].z, fma(_1649, cbSceneParam._m0[89u].y, _1648 * cbSceneParam._m0[89u].x));
    float _1674 = fma(_1650, cbSceneParam._m0[90u].z, fma(_1649, cbSceneParam._m0[90u].y, _1648 * cbSceneParam._m0[90u].x));
    float _1677 = fma(_1650, cbSceneParam._m0[91u].z, fma(_1649, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1648));
    float _1692 = _950 * 0.5;
    float _1693 = _951 * 0.5;
    float _1694 = _952 * 0.5;
    float _1695 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1698 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1701 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1735;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1708 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1315, _1319, _1322, _1325));
        float _1712 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1716 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1723 = dot(vec4(cbModelParam._m0[39u]), vec4(_1692, _1693, _1694, 1.0));
        _1735 = dot(vec3(isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1723) ? 0.0 : (isnan(0.0) ? _1723 : max(0.0, _1723))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1735 = 1.0;
    }
    float _1746;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1737 = dot(vec4(cbModelParam._m0[40u]), vec4(_1692, _1693, _1694, 1.0));
        _1746 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1737) ? 0.0 : (isnan(0.0) ? _1737 : max(0.0, _1737))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1746 = 1.0;
    }
    float _1750 = (_1746 * cbModelParam._m0[1u].x) + (_1735 * (1.0 - cbModelParam._m0[1u].x));
    float _1760 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _780);
    float _1761 = isnan(_1760) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1760 : min(cbModelParam._m0[25u].z, _1760));
    float _1842;
    float _1844;
    float _1846;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1809 = fma(_1014, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006)) + cbModelParam._m0[13u].w;
        float _1813 = fma(_1014, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006)) + cbModelParam._m0[14u].w;
        float _1817 = fma(_1014, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006)) + cbModelParam._m0[15u].w;
        float _1820 = fma(_952, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950));
        float _1823 = fma(_952, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950));
        float _1826 = fma(_952, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950));
        float _1854;
        if (_1820 > 0.0)
        {
            _1854 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1854 = frontier_phi_14_12_ladder;
        }
        float _2026;
        if (_1823 > 0.0)
        {
            _2026 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2026 = frontier_phi_23_19_ladder;
        }
        float _2321;
        if (_1826 > 0.0)
        {
            _2321 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2321 = frontier_phi_35_30_ladder;
        }
        float _2323 = isnan(_2026) ? _1854 : (isnan(_1854) ? _2026 : min(_1854, _2026));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1820) + _1809;
        float _2329 = (_2324 * _1823) + _1813;
        float _2330 = (_2324 * _1826) + _1817;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2331;
        float _2335 = _2331 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 > _2335) || ((_2329 < _2333) || ((_2328 < _2333) || (_2328 > _2335))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2330, cbModelParam._m0[9u].z, fma(_2329, cbModelParam._m0[9u].y, _2328 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2330, cbModelParam._m0[10u].z, fma(_2329, cbModelParam._m0[10u].y, _2328 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2330, cbModelParam._m0[11u].z, fma(_2329, cbModelParam._m0[11u].y, _2328 * cbModelParam._m0[11u].x))), _1761);
            frontier_phi_13_35_ladder = _2475.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2475.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2475.x * cbModelParam._m0[1u].y;
        }
        _1842 = frontier_phi_13_35_ladder_2;
        _1844 = frontier_phi_13_35_ladder_1;
        _1846 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1830 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_950, _951, _952), _1761);
        _1842 = _1830.x * cbModelParam._m0[1u].y;
        _1844 = _1830.y * cbModelParam._m0[1u].y;
        _1846 = _1830.z * cbModelParam._m0[1u].y;
    }
    float _1850 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _780);
    float _1851 = isnan(_1850) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1850 : min(cbModelParam._m0[25u].w, _1850));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1905 = fma(_1014, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006)) + cbModelParam._m0[21u].w;
        float _1909 = fma(_1014, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006)) + cbModelParam._m0[22u].w;
        float _1913 = fma(_1014, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006)) + cbModelParam._m0[23u].w;
        float _1916 = fma(_952, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950));
        float _1919 = fma(_952, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950));
        float _1922 = fma(_952, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950));
        float _2031;
        if (_1916 > 0.0)
        {
            _2031 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2031 = frontier_phi_25_21_ladder;
        }
        float _2348;
        if (_1919 > 0.0)
        {
            _2348 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2348 = frontier_phi_37_32_ladder;
        }
        float _2686;
        if (_1922 > 0.0)
        {
            _2686 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2686 = frontier_phi_47_44_ladder;
        }
        float _2688 = isnan(_2348) ? _2031 : (isnan(_2031) ? _2348 : min(_2031, _2348));
        float _2689 = isnan(_2686) ? _2688 : (isnan(_2688) ? _2686 : min(_2688, _2686));
        float _2693 = (_2689 * _1916) + _1905;
        float _2694 = (_2689 * _1919) + _1909;
        float _2695 = (_2689 * _1922) + _1913;
        float _2696 = _2689 * 9.9999997473787516355514526367188e-05;
        float _2697 = (-1.0) - _2696;
        float _2699 = _2696 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2695 > _2699) || ((_2695 < _2697) || ((_2694 > _2699) || ((_2694 < _2697) || ((_2693 < _2697) || (_2693 > _2699))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2695, cbModelParam._m0[17u].z, fma(_2694, cbModelParam._m0[17u].y, _2693 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2695, cbModelParam._m0[18u].z, fma(_2694, cbModelParam._m0[18u].y, _2693 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2695, cbModelParam._m0[19u].z, fma(_2694, cbModelParam._m0[19u].y, _2693 * cbModelParam._m0[19u].x))), _1851);
            frontier_phi_22_47_ladder = _2817.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2817.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2817.x * cbModelParam._m0[1u].z;
        }
        _1941 = frontier_phi_22_47_ladder_2;
        _1943 = frontier_phi_22_47_ladder_1;
        _1945 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_950, _951, _952), _1851);
        _1941 = _1925.x * cbModelParam._m0[1u].z;
        _1943 = _1925.y * cbModelParam._m0[1u].z;
        _1945 = _1925.z * cbModelParam._m0[1u].z;
    }
    float _1958 = (((_977 * _926) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1941 - _1842)) + _1842);
    float _1960 = (((_977 * _928) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1943 - _1844)) + _1844);
    float _1962 = (((_977 * _929) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1945 - _1846)) + _1846);
    float _1965 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1960, cbSceneParam._m0[89u].y, _1958 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1960, cbSceneParam._m0[90u].y, _1958 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1960, cbSceneParam._m0[91u].y, _1958 * cbSceneParam._m0[91u].x));
    float _2005 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2009 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2013 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2018 = _2005 / _2017;
    float _2019 = _2009 / _2017;
    float _2020 = _2013 / _2017;
    float _2167;
    float _2168;
    float _2169;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2047 = ((uint(_2020 > cbSceneParam._m0[59u].y) + uint(_2020 > cbSceneParam._m0[59u].x)) + uint(_2020 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2048 = _2047 + 43u;
        uint _2056 = _2047 + 44u;
        uint _2064 = _2047 + 45u;
        uint _2072 = _2047 + 46u;
        float _2083 = fma(_2017, cbSceneParam._m0[_2048].w, fma(_2013, cbSceneParam._m0[_2048].z, fma(_2009, cbSceneParam._m0[_2048].y, _2005 * cbSceneParam._m0[_2048].x)));
        float _2087 = fma(_2017, cbSceneParam._m0[_2056].w, fma(_2013, cbSceneParam._m0[_2056].z, fma(_2009, cbSceneParam._m0[_2056].y, _2005 * cbSceneParam._m0[_2056].x)));
        float _2095 = fma(_2017, cbSceneParam._m0[_2072].w, fma(_2013, cbSceneParam._m0[_2072].z, fma(_2009, cbSceneParam._m0[_2072].y, _2005 * cbSceneParam._m0[_2072].x)));
        float _2100 = cbSceneParam._m0[33u].z * _2095;
        float _2102 = cbSceneParam._m0[33u].w * _2095;
        float _2105 = fma(_2017, cbSceneParam._m0[_2064].w, fma(_2013, cbSceneParam._m0[_2064].z, fma(_2009, cbSceneParam._m0[_2064].y, _2005 * cbSceneParam._m0[_2064].x))) / _2095;
        float _2153 = (cbSceneParam._m0[33u].x - sqrt(((_2019 * _2019) + (_2018 * _2018)) + (_2020 * _2020))) * cbSceneParam._m0[33u].y;
        float _4470 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2160 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 + _2083) / _2095, (_2102 + _2087) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 + _2083) / _2095, (_2087 - _2100) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 - _2100) / _2095, (_2087 - _2102) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 - _2102) / _2095, (_2100 + _2087) / _2095), _2105), 0.0)).x), vec4(0.25)));
        _2167 = 1.0 - (_2160 * cbSceneParam._m0[34u].x);
        _2168 = 1.0 - (_2160 * cbSceneParam._m0[34u].y);
        _2169 = 1.0 - (_2160 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2167 = 1.0;
        _2168 = 1.0;
        _2169 = 1.0;
    }
    float _2233;
    float _2235;
    float _2237;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2221 = fma(_2017, cbSceneParam._m0[63u].w, fma(_2013, cbSceneParam._m0[63u].z, fma(_2009, cbSceneParam._m0[63u].y, _2005 * cbSceneParam._m0[63u].x)));
        float _2222 = fma(_2017, cbSceneParam._m0[60u].w, fma(_2013, cbSceneParam._m0[60u].z, fma(_2009, cbSceneParam._m0[60u].y, _2005 * cbSceneParam._m0[60u].x))) / _2221;
        float _2223 = fma(_2017, cbSceneParam._m0[61u].w, fma(_2013, cbSceneParam._m0[61u].z, fma(_2009, cbSceneParam._m0[61u].y, _2005 * cbSceneParam._m0[61u].x))) / _2221;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2222 >= cbSceneParam._m0[64u].x) && (_2223 >= cbSceneParam._m0[64u].y)) && (_2222 <= cbSceneParam._m0[64u].z)) && (_2223 <= cbSceneParam._m0[64u].w))
        {
            float _2361 = fma(_2017, cbSceneParam._m0[62u].w, fma(_2013, cbSceneParam._m0[62u].z, fma(_2009, cbSceneParam._m0[62u].y, _2005 * cbSceneParam._m0[62u].x))) / _2221;
            float _2365 = isnan(cbSceneParam._m0[41u].w) ? _2361 : (isnan(_2361) ? cbSceneParam._m0[41u].w : max(_2361, cbSceneParam._m0[41u].w));
            float _2408 = (cbSceneParam._m0[33u].x - sqrt(((_2019 * _2019) + (_2018 * _2018)) + (_2020 * _2020))) * cbSceneParam._m0[33u].y;
            float _4486 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
            float _2415 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2222, cbSceneParam._m0[33u].w + _2223), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2222, _2223 - cbSceneParam._m0[33u].z), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2222 - cbSceneParam._m0[33u].z, _2223 - cbSceneParam._m0[33u].w), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2222 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2223), _2365), 0.0)).x), vec4(0.25)));
            float _2419 = 1.0 - (_2415 * cbSceneParam._m0[34u].x);
            float _2420 = 1.0 - (_2415 * cbSceneParam._m0[34u].y);
            float _2421 = 1.0 - (_2415 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2421) ? _2169 : (isnan(_2169) ? _2421 : min(_2169, _2421));
            frontier_phi_34_33_ladder_1 = isnan(_2420) ? _2168 : (isnan(_2168) ? _2420 : min(_2168, _2420));
            frontier_phi_34_33_ladder_2 = isnan(_2419) ? _2167 : (isnan(_2167) ? _2419 : min(_2167, _2419));
        }
        else
        {
            frontier_phi_34_33_ladder = _2169;
            frontier_phi_34_33_ladder_1 = _2168;
            frontier_phi_34_33_ladder_2 = _2167;
        }
        _2233 = frontier_phi_34_33_ladder_2;
        _2235 = frontier_phi_34_33_ladder_1;
        _2237 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2233 = _2167;
        _2235 = _2168;
        _2237 = _2169;
    }
    uvec4 _2242 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2244 = _2242.x * 14u;
    uint _2245 = _2244 + 13u;
    float _2252 = _942 + (-1.0);
    float _2257 = (cbLight._m0[_2245].x * _2252) + 1.0;
    float _2258 = (cbLight._m0[_2245].y * _2252) + 1.0;
    float _2259 = (cbLight._m0[_2245].z * _2252) + 1.0;
    float _2260 = (cbLight._m0[_2245].w * _2252) + 1.0;
    uint _2261 = _2244 + 5u;
    float _2267 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2271 = _2244 + 4u;
    float _2280 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2284 = _2244 | 1u;
    float _2295 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_777, _778, _779));
    float _2298 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_777, _778, _779));
    float _4522 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _4533 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2303 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * 0.3183098733425140380859375;
    float _2305 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * 0.3183098733425140380859375;
    float _2312 = ((cbLight._m0[_2261].x * _2267) * _2305) + (((cbLight._m0[_2271].x * _2233) * _2280) * _2303);
    float _2313 = ((_2267 * cbLight._m0[_2261].y) * _2305) + (((cbLight._m0[_2271].y * _2235) * _2280) * _2303);
    float _2314 = ((_2267 * cbLight._m0[_2261].z) * _2305) + (((cbLight._m0[_2271].z * _2237) * _2280) * _2303);
    uvec4 _2318 = floatBitsToUint(cbLight._m0[_2244 + 12u]);
    bool _2320 = _2318.x == 0u;
    float _2422;
    float _2424;
    float _2426;
    if (_2320)
    {
        _2422 = _2312;
        _2424 = _2313;
        _2426 = _2314;
    }
    else
    {
        uint _2430 = _2244 + 6u;
        float _2446 = (dot(vec3(cbLight._m0[_2244 + 2u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2447 = _2446 * _2446;
        float _4544 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2448 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2449 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2422 = (((cbLight._m0[_2430].x * 0.3183098733425140380859375) * _2448) * _2449) + _2312;
        _2424 = (((cbLight._m0[_2430].y * 0.3183098733425140380859375) * _2448) * _2449) + _2313;
        _2426 = (((cbLight._m0[_2430].z * 0.3183098733425140380859375) * _2448) * _2449) + _2314;
    }
    bool _2429 = _2318.y == 0u;
    float _2484;
    float _2486;
    float _2488;
    if (_2429)
    {
        _2484 = _2422;
        _2486 = _2424;
        _2488 = _2426;
    }
    else
    {
        uint _2657 = _2244 + 7u;
        float _2673 = (dot(vec3(cbLight._m0[_2244 + 3u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2674 = _2673 * _2673;
        float _4560 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2675 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2676 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2484 = (((cbLight._m0[_2657].x * 0.3183098733425140380859375) * _2675) * _2676) + _2422;
        _2486 = (((cbLight._m0[_2657].y * 0.3183098733425140380859375) * _2675) * _2676) + _2424;
        _2488 = (((cbLight._m0[_2657].z * 0.3183098733425140380859375) * _2675) * _2676) + _2426;
    }
    uint _2491 = _2244 + 8u;
    float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _780) * 0.949999988079071044921875);
    float _2505 = _2504 * _2504;
    float _2506 = cbLight._m0[_2244].x + _856;
    float _2507 = cbLight._m0[_2244].y + _857;
    float _2508 = cbLight._m0[_2244].z + _858;
    float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
    float _2513 = _2512 * _2506;
    float _2514 = _2512 * _2507;
    float _2515 = _2512 * _2508;
    float _2516 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2244].xyz));
    float _4576 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _4587 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _2520 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2521 = dot(vec3(_777, _778, _779), vec3(_2513, _2514, _2515));
    float _4598 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2525 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2513, _2514, _2515));
    float _4609 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2529 = _2505 * _2505;
    float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
    float _2541 = exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0);
    float _2542 = 0.959999978542327880859375 - _923;
    float _2544 = 0.959999978542327880859375 - _924;
    float _2545 = 0.959999978542327880859375 - _925;
    float _2552 = 1.0 - _2505;
    float _2563 = (0.5 / (((_2520 * ((_2519 * _2552) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2552) + _2505) * _2519))) * _2519;
    float _4620 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2565 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
    uint _2579 = _2244 + 9u;
    float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _780) * 0.949999988079071044921875);
    float _2591 = _2590 * _2590;
    float _2592 = cbLight._m0[_2284].x + _856;
    float _2593 = cbLight._m0[_2284].y + _857;
    float _2594 = cbLight._m0[_2284].z + _858;
    float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
    float _2599 = _2598 * _2592;
    float _2600 = _2598 * _2593;
    float _2601 = _2598 * _2594;
    float _2602 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2284].xyz));
    float _4631 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2605 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
    float _2606 = dot(vec3(_777, _778, _779), vec3(_2599, _2600, _2601));
    float _4642 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _2610 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2599, _2600, _2601));
    float _4653 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2614 = _2591 * _2591;
    float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
    float _2625 = exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0);
    float _2632 = 1.0 - _2591;
    float _2642 = (0.5 / (((_2520 * ((_2605 * _2632) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2632) + _2591) * _2605))) * _2605;
    float _4664 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2644 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
    float _2654 = (((((_2625 * _2542) + _926) * cbLight._m0[_2579].x) * _2644) * _2267) + ((((cbLight._m0[_2491].x * _2233) * ((_2541 * _2542) + _926)) * _2565) * _2280);
    float _2655 = (((((_2625 * _2544) + _928) * cbLight._m0[_2579].y) * _2644) * _2267) + ((((cbLight._m0[_2491].y * _2235) * ((_2541 * _2544) + _928)) * _2565) * _2280);
    float _2656 = (((((_2625 * _2545) + _929) * cbLight._m0[_2579].z) * _2644) * _2267) + ((((cbLight._m0[_2491].z * _2237) * ((_2541 * _2545) + _929)) * _2565) * _2280);
    float _2712;
    float _2714;
    float _2716;
    if (_2320)
    {
        _2712 = _2654;
        _2714 = _2655;
        _2716 = _2656;
    }
    else
    {
        uint _2718 = _2244 + 2u;
        uint _2722 = _2244 + 10u;
        float _2736 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2718].w)) * _780) * 0.949999988079071044921875);
        float _2737 = _2736 * _2736;
        float _2738 = cbLight._m0[_2718].x + _856;
        float _2739 = cbLight._m0[_2718].y + _857;
        float _2740 = cbLight._m0[_2718].z + _858;
        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
        float _2745 = _2744 * _2738;
        float _2746 = _2744 * _2739;
        float _2747 = _2744 * _2740;
        float _2748 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2718].xyz));
        float _4675 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2751 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2752 = dot(vec3(_777, _778, _779), vec3(_2745, _2746, _2747));
        float _4686 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2755 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2756 = dot(vec3(cbLight._m0[_2718].xyz), vec3(_2745, _2746, _2747));
        float _4697 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2760 = _2737 * _2737;
        float _2764 = ((_2755 * _2755) * (_2760 + (-1.0))) + 1.0;
        float _2771 = exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0);
        float _2778 = 1.0 - _2737;
        float _2788 = (0.5 / (((_2520 * ((_2751 * _2778) + _2737)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2778) + _2737) * _2751))) * _2751;
        float _4708 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2790 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2760 / ((_2764 * _2764) * 3.141590118408203125));
        float _2791 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2712 = (((((_2771 * _2542) + _926) * cbLight._m0[_2722].x) * _2790) * _2791) + _2654;
        _2714 = (((((_2771 * _2544) + _928) * cbLight._m0[_2722].y) * _2790) * _2791) + _2655;
        _2716 = (((((_2771 * _2545) + _929) * cbLight._m0[_2722].z) * _2790) * _2791) + _2656;
    }
    float _2822;
    float _2824;
    float _2826;
    if (_2429)
    {
        _2822 = _2712;
        _2824 = _2714;
        _2826 = _2716;
    }
    else
    {
        uint _2833 = _2244 + 3u;
        uint _2837 = _2244 + 11u;
        float _2851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2833].w)) * _780) * 0.949999988079071044921875);
        float _2852 = _2851 * _2851;
        float _2853 = cbLight._m0[_2833].x + _856;
        float _2854 = cbLight._m0[_2833].y + _857;
        float _2855 = cbLight._m0[_2833].z + _858;
        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
        float _2860 = _2859 * _2853;
        float _2861 = _2859 * _2854;
        float _2862 = _2859 * _2855;
        float _2863 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2833].xyz));
        float _4724 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2866 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2867 = dot(vec3(_777, _778, _779), vec3(_2860, _2861, _2862));
        float _4735 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2871 = dot(vec3(cbLight._m0[_2833].xyz), vec3(_2860, _2861, _2862));
        float _4746 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2875 = _2852 * _2852;
        float _2879 = ((_2870 * _2870) * (_2875 + (-1.0))) + 1.0;
        float _2886 = exp2(log2(1.0 - (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) * 5.0);
        float _2893 = 1.0 - _2852;
        float _2903 = (0.5 / (((_2520 * ((_2866 * _2893) + _2852)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2893) + _2852) * _2866))) * _2866;
        float _4757 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2905 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2875 / ((_2879 * _2879) * 3.141590118408203125));
        float _2906 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2822 = (((((_2886 * _2542) + _926) * cbLight._m0[_2837].x) * _2905) * _2906) + _2712;
        _2824 = (((((_2886 * _2544) + _928) * cbLight._m0[_2837].y) * _2905) * _2906) + _2714;
        _2826 = (((((_2886 * _2545) + _929) * cbLight._m0[_2837].z) * _2905) * _2906) + _2716;
    }
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    if (_2242.y == 0u)
    {
        uvec4 _2927 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2928 = _2927.x;
        uint _2939 = uint((float(_2927.y) * floor(float(uint(cbSceneParam._m0[85u].y * _865) / _2928))) + floor(float(uint(cbSceneParam._m0[85u].x * _864) / _2928)));
        float _2949 = (log2(_2020 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2950 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        uint _2953 = uint(isnan(14.0) ? _2950 : (isnan(_2950) ? 14.0 : min(_2950, 14.0)));
        uvec4 _2958 = texelFetch(g_lightClusterGridBuffer, int(((_2953 << 2u) + (_2939 << 6u)) >> 2u));
        uint _2959 = _2958.x;
        uint _2960 = _2927.z;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        if (((((1u << ((_2960 >> 4u) & 15u)) + 4294967295u) & _2959) == 0u) || ((_2960 & 240u) == 0u))
        {
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
        }
        else
        {
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            uint _3190 = 0u;
            uint _3199;
            bool _3200;
            for (;;)
            {
                _3199 = texelFetch(g_lightClassification, int((((_2953 << 5u) + (_2939 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                _3200 = _3199 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3200)
                {
                    frontier_phi_66_pred = _3189;
                    frontier_phi_66_pred_1 = _3188;
                    frontier_phi_66_pred_2 = _3187;
                    frontier_phi_66_pred_3 = _3186;
                    frontier_phi_66_pred_4 = _3185;
                    frontier_phi_66_pred_5 = _3184;
                }
                else
                {
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    uint _3314;
                    _3308 = _3184;
                    _3309 = _3185;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3188;
                    _3313 = _3189;
                    _3314 = _3199;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    for (;;)
                    {
                        uint _3318 = uint(findLSB(_3314)) + (_3190 << 5u);
                        uint _3315 = (_3314 + 4294967295u) & _3314;
                        uint _3320 = _3318 * 48u;
                        vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3340 = (_3318 * 48u) + 4u;
                        vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 3u)).x));
                        uint _3359 = (_3318 * 48u) + 8u;
                        vec3 _3370 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x));
                        float _3374 = _3334.x - _2018;
                        float _3375 = _3334.y - _2019;
                        float _3376 = _3334.z - _2020;
                        float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                        float _3380 = inversesqrt(_3377);
                        float _3381 = _3380 * _3374;
                        float _3382 = _3380 * _3375;
                        float _3383 = _3380 * _3376;
                        float _3384 = dot(vec3(_883, _886, _889), vec3(_3381, _3382, _3383));
                        float _3389 = 1.0 - (_3377 * _3334.w);
                        float _4783 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3390 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3391 = sqrt(_3377) * _3353.w;
                        float _3394 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                        float _3395 = _3394 * _3394;
                        float _3398 = ((1.0 - _3395) * _3384) + _3395;
                        float _3401 = _3391 * _3391;
                        float _3405 = ((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3390) / ((_3401 * 0.699999988079071044921875) + 1.0);
                        float _3409 = (-0.0) - _2018;
                        float _3410 = (-0.0) - _2019;
                        float _3411 = (-0.0) - _2020;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3425 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                        float _3426 = 1.0 - _958;
                        float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                        float _3434 = _3433 * _3433;
                        float _3435 = _3434 * _3434;
                        float _3436 = _3416 + _3381;
                        float _3437 = _3417 + _3382;
                        float _3438 = _3418 + _3383;
                        float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                        float _3446 = dot(vec3(_883, _886, _889), vec3(_3416, _3417, _3418));
                        float _4799 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3450 = dot(vec3(_883, _886, _889), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                        float _4810 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3453 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                        float _3458 = _3394 * _3434;
                        float _3459 = _3458 * _3458;
                        float _3462 = ((1.0 - _3459) * _3384) + _3459;
                        float _4821 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3463 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3464 = 1.0 - _3434;
                        float _3474 = (0.5 / (((_3463 * ((_3449 * _3464) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3434) * _3449))) * _3463;
                        float _4832 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3485 = (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) / ((_3457 * _3457) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125))) * _3390;
                        _3243 = (_3405 * _3353.x) + _3311;
                        _3244 = (_3405 * _3353.y) + _3312;
                        _3245 = (_3405 * _3353.z) + _3313;
                        _3240 = (_3485 * _3370.x) + _3308;
                        _3241 = (_3485 * _3370.y) + _3309;
                        _3242 = (_3485 * _3370.z) + _3310;
                        if (_3315 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3308 = _3240;
                            _3309 = _3241;
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3244;
                            _3313 = _3245;
                            _3314 = _3315;
                        }
                    }
                    frontier_phi_66_pred = _3245;
                    frontier_phi_66_pred_1 = _3244;
                    frontier_phi_66_pred_2 = _3243;
                    frontier_phi_66_pred_3 = _3242;
                    frontier_phi_66_pred_4 = _3241;
                    frontier_phi_66_pred_5 = _3240;
                }
                _3050 = frontier_phi_66_pred;
                _3048 = frontier_phi_66_pred_1;
                _3046 = frontier_phi_66_pred_2;
                _3044 = frontier_phi_66_pred_3;
                _3042 = frontier_phi_66_pred_4;
                _3040 = frontier_phi_66_pred_5;
                uint _3191 = _3190 + 1u;
                if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3184 = _3040;
                    _3185 = _3042;
                    _3186 = _3044;
                    _3187 = _3046;
                    _3188 = _3048;
                    _3189 = _3050;
                    _3190 = _3191;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
        }
        uvec4 _3053 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3054 = _3053.z;
        uint _3056 = (_3054 >> 8u) & 15u;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        if (((4294967295u << _3056) & _2959) == 0u)
        {
            _3152 = _3039;
            _3154 = _3041;
            _3156 = _3043;
            _3158 = _3045;
            _3160 = _3047;
            _3162 = _3049;
        }
        else
        {
            float _3177 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
            float _3178 = _3177 * _2018;
            float _3179 = _3177 * _2019;
            float _3180 = _3177 * _2020;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3056 < ((_3054 >> 12u) & 15u))
            {
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3291 = _3039;
                float _3292 = _3041;
                float _3293 = _3043;
                float _3294 = _3045;
                float _3295 = _3047;
                float _3296 = _3049;
                uint _3297 = _3056;
                uint _3306;
                bool _3307;
                for (;;)
                {
                    _3306 = texelFetch(g_lightClassification, int((((_2953 << 5u) + (_2939 << 9u)) + (_3297 << 2u)) >> 2u)).x;
                    _3307 = _3306 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3307)
                    {
                        frontier_phi_72_pred = _3296;
                        frontier_phi_72_pred_1 = _3295;
                        frontier_phi_72_pred_2 = _3294;
                        frontier_phi_72_pred_3 = _3293;
                        frontier_phi_72_pred_4 = _3292;
                        frontier_phi_72_pred_5 = _3291;
                    }
                    else
                    {
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3503 = _3291;
                        float _3504 = _3292;
                        float _3505 = _3293;
                        float _3506 = _3294;
                        float _3507 = _3295;
                        float _3508 = _3296;
                        uint _3509 = _3306;
                        uint _3510;
                        vec4 _3535;
                        float _3536;
                        vec4 _3551;
                        vec3 _3563;
                        vec4 _3578;
                        vec4 _3593;
                        float _3639;
                        bool _3640;
                        for (;;)
                        {
                            uint _3520 = ((_3297 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3509));
                            _3510 = (_3509 + 4294967295u) & _3509;
                            uint _3522 = _3520 * 40u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3536 = _3535.w;
                            uint _3538 = (_3520 * 40u) + 4u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3520 * 40u) + 8u;
                            _3563 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x));
                            uint _3565 = (_3520 * 40u) + 16u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3520 * 40u) + 20u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3520 * 40u) + 24u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3614 = (_3520 * 40u) + 28u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            _3639 = fma(_2020, _3627.z, fma(_2019, _3627.y, _3627.x * _2018)) + _3627.w;
                            _3640 = !((fma(_2020, _3608.z, fma(_2019, _3608.y, _3608.x * _2018)) + _3608.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3640)
                            {
                                float _3667 = _3535.x - _2018;
                                float _3668 = _3535.y - _2019;
                                float _3669 = _3535.z - _2020;
                                float _3670 = dot(vec3(_3667, _3668, _3669), vec3(_3667, _3668, _3669));
                                float _3673 = inversesqrt(_3670);
                                float _3674 = _3673 * _3667;
                                float _3675 = _3673 * _3668;
                                float _3676 = _3673 * _3669;
                                float _3680 = 1.0 - (_3670 / (_3536 * _3536));
                                float _4843 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3685 = sqrt(_3670) * _3551.w;
                                float _3687 = 1.39999997615814208984375 / (_3685 + 1.39999997615814208984375);
                                float _3688 = _3687 * _3687;
                                float _3691 = ((1.0 - _3688) * dot(vec3(_3674, _3675, _3676), vec3(_883, _886, _889))) + _3688;
                                float _3694 = _3685 * _3685;
                                float _3698 = (fma(_2020, _3578.z, fma(_2019, _3578.y, _3578.x * _2018)) + _3578.w) / _3639;
                                float _3699 = (fma(_2020, _3593.z, fma(_2019, _3593.y, _3593.x * _2018)) + _3593.w) / _3639;
                                float _3703 = 1.0 - dot(vec2(_3698, _3699), vec2(_3698, _3699));
                                float _4859 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3705 = _3704 * (((isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0))) * _3681) / ((_3694 * 0.699999988079071044921875) + 1.0));
                                float _3717 = exp2(log2(1.0 / ((_3694 * 3.5) + 5.0)) * 0.25);
                                float _3718 = 1.0 - _958;
                                float _3725 = sqrt(1.0 - ((1.0 - (_3718 * _3718)) * (1.0 - (_3717 * _3717))));
                                float _3726 = _3725 * _3725;
                                float _3727 = _3726 * _3726;
                                float _3728 = _3674 - _3178;
                                float _3729 = _3675 - _3179;
                                float _3730 = _3676 - _3180;
                                float _3734 = inversesqrt(dot(vec3(_3728, _3729, _3730), vec3(_3728, _3729, _3730)));
                                float _3738 = dot(vec3(_883, _886, _889), vec3((-0.0) - _3178, (-0.0) - _3179, (-0.0) - _3180));
                                float _4870 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3741 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3742 = dot(vec3(_883, _886, _889), vec3(_3734 * _3728, _3734 * _3729, _3734 * _3730));
                                float _4881 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3745 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3749 = ((_3745 * _3745) * (_3727 + (-1.0))) + 1.0;
                                float _3750 = _3687 * _3726;
                                float _3751 = _3750 * _3750;
                                float _3757 = ((1.0 - _3751) * dot(vec3(_883, _886, _889), vec3(_3674, _3675, _3676))) + _3751;
                                float _4892 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3759 = 1.0 - _3726;
                                float _3769 = (0.5 / (((_3758 * ((_3741 * _3759) + _3726)) + 9.9999999392252902907785028219223e-09) + (((_3758 * _3759) + _3726) * _3741))) * _3758;
                                float _4903 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3779 = (_3704 * _3681) * (((_3727 * 3.1415927410125732421875) * (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) / ((_3749 * _3749) * ((_3694 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3705 * _3551.y;
                                frontier_phi_78_pred_1 = _3705 * _3551.x;
                                frontier_phi_78_pred_2 = _3779 * _3563.z;
                                frontier_phi_78_pred_3 = _3779 * _3563.y;
                                frontier_phi_78_pred_4 = _3779 * _3563.x;
                                frontier_phi_78_pred_5 = _3705 * _3551.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3787 = frontier_phi_78_pred;
                            _3786 = frontier_phi_78_pred_1;
                            _3785 = frontier_phi_78_pred_2;
                            _3784 = frontier_phi_78_pred_3;
                            _3783 = frontier_phi_78_pred_4;
                            _3788 = frontier_phi_78_pred_5;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            if (_3510 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3510;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3495;
                        frontier_phi_72_pred_1 = _3494;
                        frontier_phi_72_pred_2 = _3493;
                        frontier_phi_72_pred_3 = _3492;
                        frontier_phi_72_pred_4 = _3491;
                        frontier_phi_72_pred_5 = _3490;
                    }
                    _3163 = frontier_phi_72_pred;
                    _3161 = frontier_phi_72_pred_1;
                    _3159 = frontier_phi_72_pred_2;
                    _3157 = frontier_phi_72_pred_3;
                    _3155 = frontier_phi_72_pred_4;
                    _3153 = frontier_phi_72_pred_5;
                    uint _3298 = _3297 + 1u;
                    if (_3298 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3291 = _3153;
                        _3292 = _3155;
                        _3293 = _3157;
                        _3294 = _3159;
                        _3295 = _3161;
                        _3296 = _3163;
                        _3297 = _3298;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3163;
                frontier_phi_60_61_ladder_1 = _3161;
                frontier_phi_60_61_ladder_2 = _3157;
                frontier_phi_60_61_ladder_3 = _3155;
                frontier_phi_60_61_ladder_4 = _3153;
                frontier_phi_60_61_ladder_5 = _3159;
            }
            else
            {
                frontier_phi_60_61_ladder = _3049;
                frontier_phi_60_61_ladder_1 = _3047;
                frontier_phi_60_61_ladder_2 = _3043;
                frontier_phi_60_61_ladder_3 = _3041;
                frontier_phi_60_61_ladder_4 = _3039;
                frontier_phi_60_61_ladder_5 = _3045;
            }
            _3152 = frontier_phi_60_61_ladder_4;
            _3154 = frontier_phi_60_61_ladder_3;
            _3156 = frontier_phi_60_61_ladder_2;
            _3158 = frontier_phi_60_61_ladder_5;
            _3160 = frontier_phi_60_61_ladder_1;
            _3162 = frontier_phi_60_61_ladder;
        }
        float _3167 = isnan(1.0) ? _942 : (isnan(_942) ? 1.0 : min(_942, 1.0));
        _2972 = (_3167 * _3158) + _2484;
        _2974 = (_3167 * _3160) + _2486;
        _2976 = (_3167 * _3162) + _2488;
        _2978 = ((_3152 * _926) * _3167) + _2822;
        _2980 = ((_3154 * _928) * _3167) + _2824;
        _2982 = ((_3156 * _929) * _3167) + _2826;
    }
    else
    {
        _2972 = _2484;
        _2974 = _2486;
        _2976 = _2488;
        _2978 = _2822;
        _2980 = _2824;
        _2982 = _2826;
    }
    float _4919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4930 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4941 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    uint _3002 = _259 + 6u;
    float _3010 = _864 / cbSceneParam._m0[86u].x;
    float _3011 = _865 / cbSceneParam._m0[86u].y;
    vec4 _3025 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3010, _3011, (log2((isnan(cbSceneParam._m0[77u].w) ? _799 : (isnan(_799) ? cbSceneParam._m0[77u].w : min(_799, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3027 = _3025.x;
    float _3028 = _3025.y;
    float _3029 = _3025.z;
    float _3030 = _3025.w;
    float _3102;
    float _3104;
    float _3106;
    float _3108;
    if (_799 > cbSceneParam._m0[78u].w)
    {
        float _3064 = isnan(_799) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _799 : min(cbSceneParam._m0[80u].w, _799));
        float _3065 = _3064 / _799;
        float _3076 = _3065 * _849;
        float _3077 = _850 * _3065;
        float _3078 = (-0.0) - _3077;
        float _3080 = _3065 * _851;
        float _3082 = (cbSceneParam._m0[77u].w * _3078) / _3064;
        float _3083 = _3082 + cbSceneParam._m0[79u].w;
        float _3084 = cbSceneParam._m0[79u].w - _3077;
        float _3090 = sqrt(((_3076 * _3076) + (_3077 * _3077)) + (_3080 * _3080));
        float _3093 = (1.0 - (cbSceneParam._m0[77u].w / _3064)) * _3090;
        float _3098 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3100 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3253;
        if (abs((_3078 - _3082) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3253 = ((((_3083 > 0.0) ? exp2(_3098 * _3083) : (2.0 - exp2(_3100 * _3083))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3093;
        }
        else
        {
            float _3213 = 1.0 / cbSceneParam._m0[80u].x;
            float _3214 = isnan(_3084) ? _3083 : (isnan(_3083) ? _3084 : max(_3083, _3084));
            float _3215 = isnan(_3084) ? _3083 : (isnan(_3083) ? _3084 : min(_3083, _3084));
            float _3224 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : min(_3214, 0.0));
            float _3225 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : min(_3215, 0.0));
            _3253 = ((abs(_3090 / _3078) * cbSceneParam._m0[80u].y) * ((((_3224 - _3225) * 2.0) - ((exp2(_3098 * (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0)))) - exp2(_3098 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))))) * _3213)) - ((exp2(_3100 * _3224) - exp2(_3100 * _3225)) * _3213))) + (_3093 * cbSceneParam._m0[80u].z);
        }
        vec4 _3255 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3010, _3011, 1.0), 0.0);
        float _3264 = exp2((_3253 * (-1.44269502162933349609375)) * (1.0 - _3255.w));
        float _3265 = log2(_3264);
        float _3281 = log2(_3030);
        _3102 = (exp2(_3281 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3265 * cbSceneParam._m0[78u].x)) * _3255.x) / cbSceneParam._m0[78u].x)) + _3027;
        _3104 = (exp2(_3281 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3265 * cbSceneParam._m0[78u].y)) * _3255.y) / cbSceneParam._m0[78u].y)) + _3028;
        _3106 = (exp2(_3281 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3265 * cbSceneParam._m0[78u].z)) * _3255.z) / cbSceneParam._m0[78u].z)) + _3029;
        _3108 = _3264 * _3030;
    }
    else
    {
        _3102 = _3027;
        _3104 = _3028;
        _3106 = _3029;
        _3108 = _3030;
    }
    float _3120 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3121 = _3120 == 3.0;
    float _3122 = log2(_3108);
    float _3129 = exp2(_3122 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2972 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _942))) + ((_2978 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1750)) * cbPerFrame._m0[3u].x));
    float _3130 = exp2(_3122 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2974 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _942))) + ((_2980 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1750)) * cbPerFrame._m0[3u].x));
    float _3131 = exp2(_3122 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2976 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _942))) + ((_2982 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1750)) * cbPerFrame._m0[3u].x));
    float _3140 = (_3120 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3140 * (_3121 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3102)));
    SV_Target.y = _3140 * (_3121 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3104)));
    SV_Target.z = _3140 * (_3121 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3106)));
    SV_Target.w = cbInstanceData._m0[_3002].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3002].w;
}


