#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1504;
float _3906;
float _3907;
float _3908;
float _3909;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3918 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3929 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3940 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _408 = _406.x;
    float _420 = dot(vec4(_408, _406.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _437 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_408 - _420) * cbMtdParam._m0[24u].y) + _420) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3951 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _445 = (_438 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _446 = (_438 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _447 = (_438 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    float _451 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _445;
    float _454 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _446;
    float _457 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _447;
    float _464 = ((_445 - _451) * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) + _451;
    float _465 = ((_446 - _454) * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) + _454;
    float _466 = ((_447 - _457) * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) + _457;
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _553 = _549.z;
    float _562 = ((_532.z - _553) * _438) + _553;
    float _565 = ((((_532.x - _551) * _438) + _551) * 2.0) + (-1.0);
    float _566 = ((((_532.y - _552) * _438) + _552) * 2.0) + (-1.0);
    float _567 = dot(vec2(_565, _566), vec2(_565, _566));
    float _3962 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))));
    vec4 _592 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _604 = (_565 + ((((_505.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_592.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _605 = (_566 + ((((_505.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_592.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _608 = fma(_572, _256, fma(_605, _263, _604 * _249));
    float _611 = fma(_572, _257, fma(_605, _264, _604 * _250));
    float _614 = fma(_572, _258, fma(_605, _265, _604 * _251));
    float _618 = inversesqrt(dot(vec3(_608, _611, _614), vec3(_608, _611, _614)));
    vec4 _645 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _647 = _645.x;
    float _648 = 1.0 - _647;
    float _652 = ((_647 - _648) * cbMtdParam._m0[24u].z) + _648;
    float _654 = (cbMtdParam._m0[19u].x + dot(vec4(_618 * _608, _618 * _611, _618 * _614, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_652 * cbMtdParam._m0[21u].z);
    float _3973 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _655 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _657 = (-0.0) - cbMtdParam._m0[24u].x;
    float _659 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _659 : (isnan(_659) ? 1.0 : min(_659, 1.0));
    float _667 = _655 - ((_655 * TEXCOORD_8.x) * _660);
    float _668 = _655 - ((_655 * TEXCOORD_8.y) * _660);
    float _669 = _655 - ((_655 * TEXCOORD_8.z) * _660);
    float _676 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _680 = ((isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : min(_676, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _688 = (_680 - (((_652 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _680))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4004 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _689 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _693 = ((_667 * ((_485.x * cbMtdParam._m0[18u].x) - _464)) * _689) + _464;
    float _694 = ((_668 * ((_485.y * cbMtdParam._m0[18u].y) - _465)) * _689) + _465;
    float _695 = ((_669 * ((_485.z * cbMtdParam._m0[18u].z) - _466)) * _689) + _466;
    vec4 _707 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _709 = _707.x;
    float _710 = 1.0 - _709;
    float _735 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_709 - _710) * cbMtdParam._m0[24u].w) + _710) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4015 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _736 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _744 = ((((cbMtdParam._m0[10u].x - _693) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _736) + _693;
    float _745 = ((((cbMtdParam._m0[10u].y - _694) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _736) + _694;
    float _746 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _695)) * _736) + _695;
    vec4 _772 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _774 = _772.x;
    float _792 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _774) * _438) + _774;
    float _796 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _792) * cbMtdParam._m0[19u].z) + _792;
    float _799 = _796 - ((_689 * _667) * _796);
    float _801 = _799 - (_799 * _736);
    float _806 = (((_505.z - _562) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _562;
    float _810 = ((_592.z - _806) * cbMtdParam._m0[19u].w) + _806;
    vec4 _824 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _831 = (_824.x * 2.0) + (-1.0);
    float _832 = (_824.y * 2.0) + (-1.0);
    float _833 = dot(vec2(_831, _832), vec2(_831, _832));
    float _4026 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _842 = (((_824.z - _810) * _667) * _689) + _810;
    float _845 = ((cbMtdParam._m0[23u].y - _842) * _736) + _842;
    vec4 _866 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _872 = (_866.x * 2.0) + (-1.0);
    float _873 = (_866.y * 2.0) + (-1.0);
    float _874 = dot(vec2(_872, _873), vec2(_872, _873));
    float _4037 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _894 = (((cbMtdParam._m0[21u].x * _604) + ((_831 - _604) * _667)) * _689) + _604;
    float _895 = (((cbMtdParam._m0[21u].x * _605) + ((_832 - _605) * _668)) * _689) + _605;
    float _896 = (((sqrt(1.0 - (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) - _572) * _669) * _689) + _572;
    float _907 = (((_872 - _894) + (_894 * cbMtdParam._m0[22u].z)) * _736) + _894;
    float _908 = (((_873 - _895) + (_895 * cbMtdParam._m0[22u].z)) * _736) + _895;
    float _909 = ((sqrt(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) - _896) * _736) + _896;
    float _911 = cbMtdParam._m0[22u].x + _592.w;
    float _914 = fma(_909, _256, fma(_908, _263, _907 * _249));
    float _917 = fma(_909, _257, fma(_908, _264, _907 * _250));
    float _920 = fma(_909, _258, fma(_908, _265, _907 * _251));
    float _924 = inversesqrt(dot(vec3(_914, _917, _920), vec3(_914, _917, _920)));
    float _925 = _924 * _914;
    float _926 = _924 * _917;
    float _927 = _924 * _920;
    float _4048 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _928 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4070 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4081 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4092 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4103 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _933 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _947 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _997 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _987);
    float _998 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _987);
    float _999 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _987);
    float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
    float _1004 = _997 * _1003;
    float _1005 = _998 * _1003;
    float _1006 = _999 * _1003;
    vec4 _1011 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1013 = _1011.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1185 = sqrt(((_997 * _997) + (_998 * _998)) + (_999 * _999));
        float _1191 = (cbMatDynParam._m0[5u].x * _1185) + cbMatDynParam._m0[5u].y;
        float _4114 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1196 = (cbMatDynParam._m0[5u].z * _1185) + cbMatDynParam._m0[5u].w;
        float _4125 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) - _1192)) + _1192) < ((_1013 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1024 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1025 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1043 = fma(_927, cbSceneParam._m0[5u].z, fma(_926, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _925));
    float _1046 = fma(_927, cbSceneParam._m0[6u].z, fma(_926, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _925));
    float _1049 = fma(_927, cbSceneParam._m0[7u].z, fma(_926, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _925));
    uint _1062 = _287 + 9u;
    uint _1063 = _1062 + uint(cbMatDynParam._m0[0u].w);
    float _1069 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_1063].x;
    float _1070 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * cbInstanceData._m0[_1063].y;
    float _1071 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * cbInstanceData._m0[_1063].z;
    float _4136 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1073 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1074 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _1075 = 1.0 - _933;
    float _1076 = _1072 * _1075;
    float _1077 = _1073 * _1075;
    float _1078 = _1074 * _1075;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _933;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _933;
    float _1085 = (_1074 + (-0.039999999105930328369140625)) * _933;
    float _1086 = _1083 + 0.039999999105930328369140625;
    float _1088 = _1084 + 0.039999999105930328369140625;
    float _1089 = _1085 + 0.039999999105930328369140625;
    vec4 _1098 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1024, cbSceneParam._m0[86u].y * _1025));
    float _1102 = ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * TEXCOORD_5.w) * _1098.x;
    float _1103 = dot(vec3(_925, _926, _927), vec3(_1004, _1005, _1006));
    float _1106 = _1103 * 2.0;
    float _1110 = (_1106 * _925) - _1004;
    float _1111 = (_1106 * _926) - _1005;
    float _1112 = (_1106 * _927) - _1006;
    float _1116 = abs(dot(vec3(_1004, _1005, _1006), vec3(_925, _926, _927)));
    float _4169 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1118 = sqrt(_928);
    float _1131 = exp2((_1118 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1118 * 3.0));
    float _1137 = (1.0 - _1131) * ((_1118 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1138 = _1131 * _1118;
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1503;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1228 = fma(_1174, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1166));
        float _1232 = fma(_1174, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1166));
        float _1236 = fma(_1174, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1166));
        float _1261 = _1166 + _925;
        float _1262 = _1170 + _926;
        float _1263 = _1174 + _927;
        float _1273 = fma(_1263, cbModelParam._m0[26u].z, fma(_1262, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1261)) - _1228;
        float _1274 = fma(_1263, cbModelParam._m0[27u].z, fma(_1262, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1261)) - _1232;
        float _1275 = fma(_1263, cbModelParam._m0[28u].z, fma(_1262, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1261)) - _1236;
        float _1279 = inversesqrt(dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275)));
        float _1292 = ((_1279 * _1273) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1228 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1279 * _1274) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1232 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1279 * _1275) / cbModelParam._m0[34u].z) + ((((((_1236 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        float _1331 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1297.x + (-0.5));
        float _1333 = _1331 * (_1297.y + (-0.5));
        float _1334 = _1331 * (_1297.z + (-0.5));
        float _1341 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1304.x + (-0.5));
        float _1343 = _1341 * (_1304.y + (-0.5));
        float _1344 = _1341 * (_1304.z + (-0.5));
        float _1351 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1311.x + (-0.5));
        float _1353 = _1351 * (_1311.y + (-0.5));
        float _1354 = _1351 * (_1311.z + (-0.5));
        float _1361 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1318.x + (-0.5));
        float _1363 = _1361 * (_1318.y + (-0.5));
        float _1364 = _1361 * (_1318.z + (-0.5));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = _1332 * 0.5;
        float _1369 = _1342 * 0.5;
        float _1370 = _1352 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1385 = (dot(vec3(_925, _926, _927), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1395 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4217 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1397 + 1.0))) + _1402) * _1365;
        float _1412 = _1333 * 0.5;
        float _1413 = _1343 * 0.5;
        float _1414 = _1353 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_925, _926, _927), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4250 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1439 + 1.0))) + _1444) * _1366;
        float _1454 = _1334 * 0.5;
        float _1455 = _1344 * 0.5;
        float _1456 = _1354 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_925, _926, _927), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4283 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1481 + 1.0))) + _1486) * _1367;
        _1503 = _1334;
        _1505 = _1333;
        _1506 = _1332;
        _1507 = _1344;
        _1508 = _1343;
        _1509 = _1342;
        _1510 = _1354;
        _1511 = _1353;
        _1512 = _1352;
        _1513 = _1367;
        _1514 = _1366;
        _1515 = _1365;
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
    }
    else
    {
        _1503 = _1504;
        _1505 = _1504;
        _1506 = _1504;
        _1507 = _1504;
        _1508 = _1504;
        _1509 = _1504;
        _1510 = _1504;
        _1511 = _1504;
        _1512 = _1504;
        _1513 = _1504;
        _1514 = _1504;
        _1515 = _1504;
        _1516 = 0.0;
        _1517 = 0.0;
        _1518 = 0.0;
    }
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1546 = fma(_1174, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166));
        float _1550 = fma(_1174, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166));
        float _1554 = fma(_1174, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166));
        float _1577 = _1166 + _925;
        float _1578 = _1170 + _926;
        float _1579 = _1174 + _927;
        float _1589 = fma(_1579, cbModelParam._m0[30u].z, fma(_1578, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1577)) - _1546;
        float _1590 = fma(_1579, cbModelParam._m0[31u].z, fma(_1578, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1577)) - _1550;
        float _1591 = fma(_1579, cbModelParam._m0[32u].z, fma(_1578, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1577)) - _1554;
        float _1595 = inversesqrt(dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591)));
        float _1608 = ((_1595 * _1589) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1546 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1609 = ((_1595 * _1590) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1550 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1610 = ((_1595 * _1591) / cbModelParam._m0[35u].z) + ((((((_1554 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1626 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        float _1645 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1612.x + (-0.5));
        float _1647 = _1645 * (_1612.y + (-0.5));
        float _1648 = _1645 * (_1612.z + (-0.5));
        float _1655 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1619.x + (-0.5));
        float _1657 = _1655 * (_1619.y + (-0.5));
        float _1658 = _1655 * (_1619.z + (-0.5));
        float _1665 = exp2((_1626.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1626.x + (-0.5));
        float _1667 = _1665 * (_1626.y + (-0.5));
        float _1668 = _1665 * (_1626.z + (-0.5));
        float _1675 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1676 = _1675 * (_1633.x + (-0.5));
        float _1677 = _1675 * (_1633.y + (-0.5));
        float _1678 = _1675 * (_1633.z + (-0.5));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = _1646 * 0.5;
        float _1683 = _1656 * 0.5;
        float _1684 = _1666 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_925, _926, _927), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4346 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1709 + 1.0))) + _1714) * _1679;
        float _1724 = _1647 * 0.5;
        float _1725 = _1657 * 0.5;
        float _1726 = _1667 * 0.5;
        float _1727 = dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726));
        float _1732 = (_1727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1727);
        float _1740 = (dot(vec3(_925, _926, _927), vec3(_1732 * _1724, _1732 * _1725, _1732 * _1726)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1751 = _1750 * 2.0;
        float _1755 = (1.0 - _1750) / (_1750 + 1.0);
        float _4379 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1765 = ((((1.0 - _1756) * (_1751 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1751 + 1.0))) + _1756) * _1680;
        float _1766 = _1648 * 0.5;
        float _1767 = _1658 * 0.5;
        float _1768 = _1668 * 0.5;
        float _1769 = dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768));
        float _1774 = (_1769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1769);
        float _1782 = (dot(vec3(_925, _926, _927), vec3(_1774 * _1766, _1774 * _1767, _1774 * _1768)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1791 = sqrt(((_1767 * _1767) + (_1766 * _1766)) + (_1768 * _1768)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1793 = _1792 * 2.0;
        float _1797 = (1.0 - _1792) / (_1792 + 1.0);
        float _4412 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1807 = ((((1.0 - _1798) * (_1793 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1793 + 1.0))) + _1798) * _1681;
        _1815 = _1648;
        _1816 = _1647;
        _1817 = _1646;
        _1818 = _1658;
        _1819 = _1657;
        _1820 = _1656;
        _1821 = _1668;
        _1822 = _1667;
        _1823 = _1666;
        _1824 = _1681;
        _1825 = _1680;
        _1826 = _1679;
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)));
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)));
    }
    else
    {
        _1815 = _1504;
        _1816 = _1504;
        _1817 = _1504;
        _1818 = _1504;
        _1819 = _1504;
        _1820 = _1504;
        _1821 = _1504;
        _1822 = _1504;
        _1823 = _1504;
        _1824 = _1504;
        _1825 = _1504;
        _1826 = _1504;
        _1827 = 0.0;
        _1828 = 0.0;
        _1829 = 0.0;
    }
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1516)) + _1516;
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1517)) + _1517;
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1518)) + _1518;
    float _1862 = fma(_1841, cbSceneParam._m0[89u].z, fma(_1840, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1865 = fma(_1841, cbSceneParam._m0[90u].z, fma(_1840, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1868 = fma(_1841, cbSceneParam._m0[91u].z, fma(_1840, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1839));
    float _1883 = _1110 * 0.5;
    float _1884 = _1111 * 0.5;
    float _1885 = _1112 * 0.5;
    float _1886 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1889 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1892 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1926;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1899 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1503, _1507, _1510, _1513));
        float _1903 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1505, _1508, _1511, _1514));
        float _1907 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1506, _1509, _1512, _1515));
        float _1914 = dot(vec4(cbModelParam._m0[39u]), vec4(_1883, _1884, _1885, 1.0));
        _1926 = dot(vec3(isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1914) ? 0.0 : (isnan(0.0) ? _1914 : max(0.0, _1914))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1926 = 1.0;
    }
    float _1937;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1928 = dot(vec4(cbModelParam._m0[40u]), vec4(_1883, _1884, _1885, 1.0));
        _1937 = dot(vec3(isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1928) ? 0.0 : (isnan(0.0) ? _1928 : max(0.0, _1928))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1937 = 1.0;
    }
    float _1941 = (_1937 * cbModelParam._m0[1u].x) + (_1926 * (1.0 - cbModelParam._m0[1u].x));
    float _1951 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _928);
    float _1952 = isnan(_1951) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1951 : min(cbModelParam._m0[25u].z, _1951));
    float _2032;
    float _2034;
    float _2036;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1999 = fma(_1174, cbModelParam._m0[13u].z, fma(_1170, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1166)) + cbModelParam._m0[13u].w;
        float _2003 = fma(_1174, cbModelParam._m0[14u].z, fma(_1170, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1166)) + cbModelParam._m0[14u].w;
        float _2007 = fma(_1174, cbModelParam._m0[15u].z, fma(_1170, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1166)) + cbModelParam._m0[15u].w;
        float _2010 = fma(_1112, cbModelParam._m0[13u].z, fma(_1111, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1110));
        float _2013 = fma(_1112, cbModelParam._m0[14u].z, fma(_1111, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1110));
        float _2016 = fma(_1112, cbModelParam._m0[15u].z, fma(_1111, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1110));
        float _2044;
        if (_2010 > 0.0)
        {
            _2044 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2044 = frontier_phi_17_15_ladder;
        }
        float _2267;
        if (_2013 > 0.0)
        {
            _2267 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2267 = frontier_phi_26_22_ladder;
        }
        float _2524;
        if (_2016 > 0.0)
        {
            _2524 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2524 = frontier_phi_38_33_ladder;
        }
        float _2526 = isnan(_2267) ? _2044 : (isnan(_2044) ? _2267 : min(_2044, _2267));
        float _2527 = isnan(_2524) ? _2526 : (isnan(_2526) ? _2524 : min(_2526, _2524));
        float _2531 = (_2527 * _2010) + _1999;
        float _2532 = (_2527 * _2013) + _2003;
        float _2533 = (_2527 * _2016) + _2007;
        float _2534 = _2527 * 9.9999997473787516355514526367188e-05;
        float _2536 = (-1.0) - _2534;
        float _2538 = _2534 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2533 > _2538) || ((_2533 < _2536) || ((_2532 > _2538) || ((_2532 < _2536) || ((_2531 < _2536) || (_2531 > _2538))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2533, cbModelParam._m0[9u].z, fma(_2532, cbModelParam._m0[9u].y, _2531 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2533, cbModelParam._m0[10u].z, fma(_2532, cbModelParam._m0[10u].y, _2531 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2533, cbModelParam._m0[11u].z, fma(_2532, cbModelParam._m0[11u].y, _2531 * cbModelParam._m0[11u].x))), _1952);
            frontier_phi_16_38_ladder = _2661.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2661.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2661.x * cbModelParam._m0[1u].y;
        }
        _2032 = frontier_phi_16_38_ladder_2;
        _2034 = frontier_phi_16_38_ladder_1;
        _2036 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1110, _1111, _1112), _1952);
        _2032 = _2020.x * cbModelParam._m0[1u].y;
        _2034 = _2020.y * cbModelParam._m0[1u].y;
        _2036 = _2020.z * cbModelParam._m0[1u].y;
    }
    float _2040 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _928);
    float _2041 = isnan(_2040) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2040 : min(cbModelParam._m0[25u].w, _2040));
    float _2130;
    float _2132;
    float _2134;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2094 = fma(_1174, cbModelParam._m0[21u].z, fma(_1170, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1166)) + cbModelParam._m0[21u].w;
        float _2098 = fma(_1174, cbModelParam._m0[22u].z, fma(_1170, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1166)) + cbModelParam._m0[22u].w;
        float _2102 = fma(_1174, cbModelParam._m0[23u].z, fma(_1170, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1166)) + cbModelParam._m0[23u].w;
        float _2105 = fma(_1112, cbModelParam._m0[21u].z, fma(_1111, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1110));
        float _2108 = fma(_1112, cbModelParam._m0[22u].z, fma(_1111, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1110));
        float _2111 = fma(_1112, cbModelParam._m0[23u].z, fma(_1111, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1110));
        float _2272;
        if (_2105 > 0.0)
        {
            _2272 = abs((1.0 - _2094) / _2105);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2094 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2272 = frontier_phi_28_24_ladder;
        }
        float _2551;
        if (_2108 > 0.0)
        {
            _2551 = abs((1.0 - _2098) / _2108);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2098 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2551 = frontier_phi_40_35_ladder;
        }
        float _2764;
        if (_2111 > 0.0)
        {
            _2764 = abs((1.0 - _2102) / _2111);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2102 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2764 = frontier_phi_49_46_ladder;
        }
        float _2766 = isnan(_2551) ? _2272 : (isnan(_2272) ? _2551 : min(_2272, _2551));
        float _2767 = isnan(_2764) ? _2766 : (isnan(_2766) ? _2764 : min(_2766, _2764));
        float _2771 = (_2767 * _2105) + _2094;
        float _2772 = (_2767 * _2108) + _2098;
        float _2773 = (_2767 * _2111) + _2102;
        float _2774 = _2767 * 9.9999997473787516355514526367188e-05;
        float _2775 = (-1.0) - _2774;
        float _2777 = _2774 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2773 > _2777) || ((_2773 < _2775) || ((_2772 > _2777) || ((_2772 < _2775) || ((_2771 < _2775) || (_2771 > _2777))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2972 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2773, cbModelParam._m0[17u].z, fma(_2772, cbModelParam._m0[17u].y, _2771 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2773, cbModelParam._m0[18u].z, fma(_2772, cbModelParam._m0[18u].y, _2771 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2773, cbModelParam._m0[19u].z, fma(_2772, cbModelParam._m0[19u].y, _2771 * cbModelParam._m0[19u].x))), _2041);
            frontier_phi_25_49_ladder = _2972.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2972.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2972.x * cbModelParam._m0[1u].z;
        }
        _2130 = frontier_phi_25_49_ladder_2;
        _2132 = frontier_phi_25_49_ladder_1;
        _2134 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2114 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1110, _1111, _1112), _2041);
        _2130 = _2114.x * cbModelParam._m0[1u].z;
        _2132 = _2114.y * cbModelParam._m0[1u].z;
        _2134 = _2114.z * cbModelParam._m0[1u].z;
    }
    float _2147 = (((_1137 * _1086) + _1138) * _1102) * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2149 = (((_1137 * _1088) + _1138) * _1102) * ((cbModelParam._m0[1u].w * (_2132 - _2034)) + _2034);
    float _2151 = (((_1137 * _1089) + _1138) * _1102) * ((cbModelParam._m0[1u].w * (_2134 - _2036)) + _2036);
    float _2154 = fma(_2151, cbSceneParam._m0[89u].z, fma(_2149, cbSceneParam._m0[89u].y, _2147 * cbSceneParam._m0[89u].x));
    float _2157 = fma(_2151, cbSceneParam._m0[90u].z, fma(_2149, cbSceneParam._m0[90u].y, _2147 * cbSceneParam._m0[90u].x));
    float _2160 = fma(_2151, cbSceneParam._m0[91u].z, fma(_2149, cbSceneParam._m0[91u].y, _2147 * cbSceneParam._m0[91u].x));
    vec4 _2168 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1024, _1025));
    float _2170 = _2168.w;
    float _2182 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2170);
    float _2183 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2170);
    float _2184 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2170);
    uvec4 _2188 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2190 = _2188.x * 14u;
    uint _2191 = _2190 + 13u;
    float _2198 = _1102 + (-1.0);
    float _2203 = (cbLight._m0[_2191].x * _2198) + 1.0;
    float _2204 = (cbLight._m0[_2191].y * _2198) + 1.0;
    float _2205 = (cbLight._m0[_2191].z * _2198) + 1.0;
    float _2206 = (cbLight._m0[_2191].w * _2198) + 1.0;
    uint _2207 = _2190 + 5u;
    float _2213 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2217 = _2190 + 4u;
    float _2226 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2230 = _2190 | 1u;
    float _2241 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_925, _926, _927));
    float _2244 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_925, _926, _927));
    float _4548 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _4559 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2249 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * 0.3183098733425140380859375;
    float _2251 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * 0.3183098733425140380859375;
    float _2258 = ((cbLight._m0[_2207].x * _2213) * _2251) + (((cbLight._m0[_2217].x * _2182) * _2226) * _2249);
    float _2259 = ((_2213 * cbLight._m0[_2207].y) * _2251) + (((cbLight._m0[_2217].y * _2183) * _2226) * _2249);
    float _2260 = ((_2213 * cbLight._m0[_2207].z) * _2251) + (((cbLight._m0[_2217].z * _2184) * _2226) * _2249);
    uvec4 _2264 = floatBitsToUint(cbLight._m0[_2190 + 12u]);
    bool _2266 = _2264.x == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2266)
    {
        _2277 = _2258;
        _2279 = _2259;
        _2281 = _2260;
    }
    else
    {
        uint _2285 = _2190 + 6u;
        float _2301 = (dot(vec3(cbLight._m0[_2190 + 2u].xyz), vec3(_925, _926, _927)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4570 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2304 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2277 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2258;
        _2279 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2259;
        _2281 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2260;
    }
    bool _2284 = _2264.y == 0u;
    float _2322;
    float _2324;
    float _2326;
    if (_2284)
    {
        _2322 = _2277;
        _2324 = _2279;
        _2326 = _2281;
    }
    else
    {
        uint _2495 = _2190 + 7u;
        float _2511 = (dot(vec3(cbLight._m0[_2190 + 3u].xyz), vec3(_925, _926, _927)) * 0.5) + 0.5;
        float _2512 = _2511 * _2511;
        float _4586 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2513 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2514 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2322 = (((cbLight._m0[_2495].x * 0.3183098733425140380859375) * _2513) * _2514) + _2277;
        _2324 = (((cbLight._m0[_2495].y * 0.3183098733425140380859375) * _2513) * _2514) + _2279;
        _2326 = (((cbLight._m0[_2495].z * 0.3183098733425140380859375) * _2513) * _2514) + _2281;
    }
    uint _2329 = _2190 + 8u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _928) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2190].x + _1004;
    float _2345 = cbLight._m0[_2190].y + _1005;
    float _2346 = cbLight._m0[_2190].z + _1006;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_925, _926, _927), vec3(cbLight._m0[_2190].xyz));
    float _4602 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _4613 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _2358 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2359 = dot(vec3(_925, _926, _927), vec3(_2351, _2352, _2353));
    float _4624 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2351, _2352, _2353));
    float _4635 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2343 * _2343;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0);
    float _2380 = 0.959999978542327880859375 - _1083;
    float _2382 = 0.959999978542327880859375 - _1084;
    float _2383 = 0.959999978542327880859375 - _1085;
    float _2390 = 1.0 - _2343;
    float _2401 = (0.5 / (((_2358 * ((_2357 * _2390) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2390) + _2343) * _2357))) * _2357;
    float _4646 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    uint _2417 = _2190 + 9u;
    float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _928) * 0.949999988079071044921875);
    float _2429 = _2428 * _2428;
    float _2430 = cbLight._m0[_2230].x + _1004;
    float _2431 = cbLight._m0[_2230].y + _1005;
    float _2432 = cbLight._m0[_2230].z + _1006;
    float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
    float _2437 = _2436 * _2430;
    float _2438 = _2436 * _2431;
    float _2439 = _2436 * _2432;
    float _2440 = dot(vec3(_925, _926, _927), vec3(cbLight._m0[_2230].xyz));
    float _4657 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
    float _2444 = dot(vec3(_925, _926, _927), vec3(_2437, _2438, _2439));
    float _4668 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2437, _2438, _2439));
    float _4679 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2429 * _2429;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2463 = exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0);
    float _2470 = 1.0 - _2429;
    float _2480 = (0.5 / (((_2358 * ((_2443 * _2470) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2470) + _2429) * _2443))) * _2443;
    float _4690 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2482 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    float _2492 = (((((_2463 * _2380) + _1086) * cbLight._m0[_2417].x) * _2482) * _2213) + ((((cbLight._m0[_2329].x * _2182) * ((_2379 * _2380) + _1086)) * _2403) * _2226);
    float _2493 = (((((_2463 * _2382) + _1088) * cbLight._m0[_2417].y) * _2482) * _2213) + ((((cbLight._m0[_2329].y * _2183) * ((_2379 * _2382) + _1088)) * _2403) * _2226);
    float _2494 = (((((_2463 * _2383) + _1089) * cbLight._m0[_2417].z) * _2482) * _2213) + ((((cbLight._m0[_2329].z * _2184) * ((_2379 * _2383) + _1089)) * _2403) * _2226);
    float _2556;
    float _2558;
    float _2560;
    if (_2266)
    {
        _2556 = _2492;
        _2558 = _2493;
        _2560 = _2494;
    }
    else
    {
        uint _2562 = _2190 + 2u;
        uint _2566 = _2190 + 10u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _928) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _1004;
        float _2583 = cbLight._m0[_2562].y + _1005;
        float _2584 = cbLight._m0[_2562].z + _1006;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_925, _926, _927), vec3(cbLight._m0[_2562].xyz));
        float _4701 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2596 = dot(vec3(_925, _926, _927), vec3(_2589, _2590, _2591));
        float _4712 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4723 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) * 5.0);
        float _2622 = 1.0 - _2581;
        float _2632 = (0.5 / (((_2358 * ((_2595 * _2622) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2622) + _2581) * _2595))) * _2595;
        float _4734 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2634 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2635 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2556 = (((((_2615 * _2380) + _1086) * cbLight._m0[_2566].x) * _2634) * _2635) + _2492;
        _2558 = (((((_2615 * _2382) + _1088) * cbLight._m0[_2566].y) * _2634) * _2635) + _2493;
        _2560 = (((((_2615 * _2383) + _1089) * cbLight._m0[_2566].z) * _2634) * _2635) + _2494;
    }
    float _2670;
    float _2672;
    float _2674;
    if (_2284)
    {
        _2670 = _2556;
        _2672 = _2558;
        _2674 = _2560;
    }
    else
    {
        uint _2681 = _2190 + 3u;
        uint _2685 = _2190 + 11u;
        float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2681].w)) * _928) * 0.949999988079071044921875);
        float _2700 = _2699 * _2699;
        float _2701 = cbLight._m0[_2681].x + _1004;
        float _2702 = cbLight._m0[_2681].y + _1005;
        float _2703 = cbLight._m0[_2681].z + _1006;
        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
        float _2708 = _2707 * _2701;
        float _2709 = _2707 * _2702;
        float _2710 = _2707 * _2703;
        float _2711 = dot(vec3(_925, _926, _927), vec3(cbLight._m0[_2681].xyz));
        float _4750 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
        float _2715 = dot(vec3(_925, _926, _927), vec3(_2708, _2709, _2710));
        float _4761 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _2719 = dot(vec3(cbLight._m0[_2681].xyz), vec3(_2708, _2709, _2710));
        float _4772 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2723 = _2700 * _2700;
        float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
        float _2734 = exp2(log2(1.0 - (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) * 5.0);
        float _2741 = 1.0 - _2700;
        float _2751 = (0.5 / (((_2358 * ((_2714 * _2741) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2741) + _2700) * _2714))) * _2714;
        float _4783 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2753 = (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
        float _2754 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2670 = (((((_2734 * _2380) + _1086) * cbLight._m0[_2685].x) * _2753) * _2754) + _2556;
        _2672 = (((((_2734 * _2382) + _1088) * cbLight._m0[_2685].y) * _2753) * _2754) + _2558;
        _2674 = (((((_2734 * _2383) + _1089) * cbLight._m0[_2685].z) * _2753) * _2754) + _2560;
    }
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    if (_2188.y == 0u)
    {
        float _2829 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2830 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2829;
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2829;
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2829;
        uvec4 _2844 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2845 = _2844.x;
        uint _2856 = uint((float(_2844.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1025) / _2845))) + floor(float(uint(cbSceneParam._m0[85u].x * _1024) / _2845)));
        float _2866 = (log2(_2832 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2867 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        uint _2870 = uint(isnan(14.0) ? _2867 : (isnan(_2867) ? 14.0 : min(_2867, 14.0)));
        uvec4 _2875 = texelFetch(g_lightClusterGridBuffer, int(((_2870 << 2u) + (_2856 << 6u)) >> 2u));
        uint _2876 = _2875.x;
        uint _2877 = _2844.z;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        if (((((1u << ((_2877 >> 4u) & 15u)) + 4294967295u) & _2876) == 0u) || ((_2877 & 240u) == 0u))
        {
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
        }
        else
        {
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            uint _3135 = 0u;
            uint _3144;
            bool _3145;
            for (;;)
            {
                _3144 = texelFetch(g_lightClassification, int((((_2870 << 5u) + (_2856 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                _3145 = _3144 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3145)
                {
                    frontier_phi_66_pred = _3129;
                    frontier_phi_66_pred_1 = _3134;
                    frontier_phi_66_pred_2 = _3133;
                    frontier_phi_66_pred_3 = _3132;
                    frontier_phi_66_pred_4 = _3131;
                    frontier_phi_66_pred_5 = _3130;
                }
                else
                {
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    uint _3280;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3144;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    for (;;)
                    {
                        uint _3284 = uint(findLSB(_3280)) + (_3135 << 5u);
                        uint _3281 = (_3280 + 4294967295u) & _3280;
                        uint _3286 = _3284 * 48u;
                        vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 3u)).x));
                        uint _3306 = (_3284 * 48u) + 4u;
                        vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 3u)).x));
                        uint _3325 = (_3284 * 48u) + 8u;
                        vec3 _3336 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3325)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 2u)).x));
                        float _3340 = _3300.x - _2830;
                        float _3341 = _3300.y - _2831;
                        float _3342 = _3300.z - _2832;
                        float _3343 = dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342));
                        float _3346 = inversesqrt(_3343);
                        float _3347 = _3346 * _3340;
                        float _3348 = _3346 * _3341;
                        float _3349 = _3346 * _3342;
                        float _3350 = dot(vec3(_1043, _1046, _1049), vec3(_3347, _3348, _3349));
                        float _3355 = 1.0 - (_3343 * _3300.w);
                        float _4809 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3356 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3357 = sqrt(_3343) * _3319.w;
                        float _3360 = 1.39999997615814208984375 / (_3357 + 1.39999997615814208984375);
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3350) + _3361;
                        float _3367 = _3357 * _3357;
                        float _3371 = ((isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))) * _3356) / ((_3367 * 0.699999988079071044921875) + 1.0);
                        float _3375 = (-0.0) - _2830;
                        float _3376 = (-0.0) - _2831;
                        float _3377 = (-0.0) - _2832;
                        float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                        float _3382 = _3381 * _3375;
                        float _3383 = _3381 * _3376;
                        float _3384 = _3381 * _3377;
                        float _3392 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                        float _3393 = 1.0 - _1118;
                        float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                        float _3401 = _3400 * _3400;
                        float _3402 = _3401 * _3401;
                        float _3403 = _3382 + _3347;
                        float _3404 = _3383 + _3348;
                        float _3405 = _3384 + _3349;
                        float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                        float _3413 = dot(vec3(_1043, _1046, _1049), vec3(_3382, _3383, _3384));
                        float _4825 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3416 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                        float _3417 = dot(vec3(_1043, _1046, _1049), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                        float _4836 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                        float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                        float _3425 = _3360 * _3401;
                        float _3426 = _3425 * _3425;
                        float _3429 = ((1.0 - _3426) * _3350) + _3426;
                        float _4847 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3430 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                        float _3431 = 1.0 - _3401;
                        float _3441 = (0.5 / (((_3430 * ((_3416 * _3431) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3430 * _3431) + _3401) * _3416))) * _3430;
                        float _4858 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3452 = (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) / ((_3424 * _3424) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125))) * _3356;
                        _3204 = (_3371 * _3319.x) + _3277;
                        _3205 = (_3371 * _3319.y) + _3278;
                        _3206 = (_3371 * _3319.z) + _3279;
                        _3201 = (_3452 * _3336.x) + _3274;
                        _3202 = (_3452 * _3336.y) + _3275;
                        _3203 = (_3452 * _3336.z) + _3276;
                        if (_3281 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3281;
                        }
                    }
                    frontier_phi_66_pred = _3201;
                    frontier_phi_66_pred_1 = _3206;
                    frontier_phi_66_pred_2 = _3205;
                    frontier_phi_66_pred_3 = _3204;
                    frontier_phi_66_pred_4 = _3203;
                    frontier_phi_66_pred_5 = _3202;
                }
                _2978 = frontier_phi_66_pred;
                _2988 = frontier_phi_66_pred_1;
                _2986 = frontier_phi_66_pred_2;
                _2984 = frontier_phi_66_pred_3;
                _2982 = frontier_phi_66_pred_4;
                _2980 = frontier_phi_66_pred_5;
                uint _3136 = _3135 + 1u;
                if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3129 = _2978;
                    _3130 = _2980;
                    _3131 = _2982;
                    _3132 = _2984;
                    _3133 = _2986;
                    _3134 = _2988;
                    _3135 = _3136;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
        }
        uvec4 _2991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2992 = _2991.z;
        uint _2994 = (_2992 >> 8u) & 15u;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        if (((4294967295u << _2994) & _2876) == 0u)
        {
            _3097 = _2977;
            _3099 = _2979;
            _3101 = _2981;
            _3103 = _2983;
            _3105 = _2985;
            _3107 = _2987;
        }
        else
        {
            float _3122 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
            float _3123 = _3122 * _2830;
            float _3124 = _3122 * _2831;
            float _3125 = _3122 * _2832;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2994 < ((_2992 >> 12u) & 15u))
            {
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3257 = _2977;
                float _3258 = _2979;
                float _3259 = _2981;
                float _3260 = _2983;
                float _3261 = _2985;
                float _3262 = _2987;
                uint _3263 = _2994;
                uint _3272;
                bool _3273;
                for (;;)
                {
                    _3272 = texelFetch(g_lightClassification, int((((_2870 << 5u) + (_2856 << 9u)) + (_3263 << 2u)) >> 2u)).x;
                    _3273 = _3272 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3273)
                    {
                        frontier_phi_77_pred = _3262;
                        frontier_phi_77_pred_1 = _3261;
                        frontier_phi_77_pred_2 = _3260;
                        frontier_phi_77_pred_3 = _3259;
                        frontier_phi_77_pred_4 = _3258;
                        frontier_phi_77_pred_5 = _3257;
                    }
                    else
                    {
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3479 = _3257;
                        float _3480 = _3258;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        uint _3485 = _3272;
                        uint _3486;
                        vec4 _3511;
                        float _3512;
                        vec4 _3527;
                        vec3 _3539;
                        vec4 _3554;
                        vec4 _3569;
                        float _3615;
                        bool _3616;
                        for (;;)
                        {
                            uint _3496 = ((_3263 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3485));
                            _3486 = (_3485 + 4294967295u) & _3485;
                            uint _3498 = _3496 * 40u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            _3512 = _3511.w;
                            uint _3514 = (_3496 * 40u) + 4u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3529 = (_3496 * 40u) + 8u;
                            _3539 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x));
                            uint _3541 = (_3496 * 40u) + 16u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3496 * 40u) + 20u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3571 = (_3496 * 40u) + 24u;
                            vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            uint _3590 = (_3496 * 40u) + 28u;
                            vec4 _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            _3615 = fma(_2832, _3603.z, fma(_2831, _3603.y, _3603.x * _2830)) + _3603.w;
                            _3616 = !((fma(_2832, _3584.z, fma(_2831, _3584.y, _3584.x * _2830)) + _3584.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3616)
                            {
                                float _3643 = _3511.x - _2830;
                                float _3644 = _3511.y - _2831;
                                float _3645 = _3511.z - _2832;
                                float _3646 = dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645));
                                float _3649 = inversesqrt(_3646);
                                float _3650 = _3649 * _3643;
                                float _3651 = _3649 * _3644;
                                float _3652 = _3649 * _3645;
                                float _3656 = 1.0 - (_3646 / (_3512 * _3512));
                                float _4869 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3661 = sqrt(_3646) * _3527.w;
                                float _3663 = 1.39999997615814208984375 / (_3661 + 1.39999997615814208984375);
                                float _3664 = _3663 * _3663;
                                float _3667 = ((1.0 - _3664) * dot(vec3(_3650, _3651, _3652), vec3(_1043, _1046, _1049))) + _3664;
                                float _3670 = _3661 * _3661;
                                float _3674 = (fma(_2832, _3554.z, fma(_2831, _3554.y, _3554.x * _2830)) + _3554.w) / _3615;
                                float _3675 = (fma(_2832, _3569.z, fma(_2831, _3569.y, _3569.x * _2830)) + _3569.w) / _3615;
                                float _3679 = 1.0 - dot(vec2(_3674, _3675), vec2(_3674, _3675));
                                float _4885 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3680 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3681 = _3680 * (((isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0))) * _3657) / ((_3670 * 0.699999988079071044921875) + 1.0));
                                float _3693 = exp2(log2(1.0 / ((_3670 * 3.5) + 5.0)) * 0.25);
                                float _3694 = 1.0 - _1118;
                                float _3701 = sqrt(1.0 - ((1.0 - (_3694 * _3694)) * (1.0 - (_3693 * _3693))));
                                float _3702 = _3701 * _3701;
                                float _3703 = _3702 * _3702;
                                float _3704 = _3650 - _3123;
                                float _3705 = _3651 - _3124;
                                float _3706 = _3652 - _3125;
                                float _3710 = inversesqrt(dot(vec3(_3704, _3705, _3706), vec3(_3704, _3705, _3706)));
                                float _3714 = dot(vec3(_1043, _1046, _1049), vec3((-0.0) - _3123, (-0.0) - _3124, (-0.0) - _3125));
                                float _4896 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3717 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3718 = dot(vec3(_1043, _1046, _1049), vec3(_3710 * _3704, _3710 * _3705, _3710 * _3706));
                                float _4907 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3721 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3725 = ((_3721 * _3721) * (_3703 + (-1.0))) + 1.0;
                                float _3726 = _3663 * _3702;
                                float _3727 = _3726 * _3726;
                                float _3733 = ((1.0 - _3727) * dot(vec3(_1043, _1046, _1049), vec3(_3650, _3651, _3652))) + _3727;
                                float _4918 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3734 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3735 = 1.0 - _3702;
                                float _3745 = (0.5 / (((_3734 * ((_3717 * _3735) + _3702)) + 9.9999999392252902907785028219223e-09) + (((_3734 * _3735) + _3702) * _3717))) * _3734;
                                float _4929 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3755 = (_3680 * _3657) * (((_3703 * 3.1415927410125732421875) * (isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0)))) / ((_3725 * _3725) * ((_3670 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3681 * _3527.y;
                                frontier_phi_83_pred_1 = _3681 * _3527.x;
                                frontier_phi_83_pred_2 = _3755 * _3539.z;
                                frontier_phi_83_pred_3 = _3755 * _3539.y;
                                frontier_phi_83_pred_4 = _3755 * _3539.x;
                                frontier_phi_83_pred_5 = _3681 * _3527.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3763 = frontier_phi_83_pred;
                            _3762 = frontier_phi_83_pred_1;
                            _3761 = frontier_phi_83_pred_2;
                            _3760 = frontier_phi_83_pred_3;
                            _3759 = frontier_phi_83_pred_4;
                            _3764 = frontier_phi_83_pred_5;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            if (_3486 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3486;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3471;
                        frontier_phi_77_pred_1 = _3470;
                        frontier_phi_77_pred_2 = _3469;
                        frontier_phi_77_pred_3 = _3468;
                        frontier_phi_77_pred_4 = _3467;
                        frontier_phi_77_pred_5 = _3466;
                    }
                    _3108 = frontier_phi_77_pred;
                    _3106 = frontier_phi_77_pred_1;
                    _3104 = frontier_phi_77_pred_2;
                    _3102 = frontier_phi_77_pred_3;
                    _3100 = frontier_phi_77_pred_4;
                    _3098 = frontier_phi_77_pred_5;
                    uint _3264 = _3263 + 1u;
                    if (_3264 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3257 = _3098;
                        _3258 = _3100;
                        _3259 = _3102;
                        _3260 = _3104;
                        _3261 = _3106;
                        _3262 = _3108;
                        _3263 = _3264;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3102;
                frontier_phi_58_59_ladder_1 = _3108;
                frontier_phi_58_59_ladder_2 = _3106;
                frontier_phi_58_59_ladder_3 = _3104;
                frontier_phi_58_59_ladder_4 = _3100;
                frontier_phi_58_59_ladder_5 = _3098;
            }
            else
            {
                frontier_phi_58_59_ladder = _2981;
                frontier_phi_58_59_ladder_1 = _2987;
                frontier_phi_58_59_ladder_2 = _2985;
                frontier_phi_58_59_ladder_3 = _2983;
                frontier_phi_58_59_ladder_4 = _2979;
                frontier_phi_58_59_ladder_5 = _2977;
            }
            _3097 = frontier_phi_58_59_ladder_5;
            _3099 = frontier_phi_58_59_ladder_4;
            _3101 = frontier_phi_58_59_ladder;
            _3103 = frontier_phi_58_59_ladder_3;
            _3105 = frontier_phi_58_59_ladder_2;
            _3107 = frontier_phi_58_59_ladder_1;
        }
        float _3112 = isnan(1.0) ? _1102 : (isnan(_1102) ? 1.0 : min(_1102, 1.0));
        _2889 = (_3112 * _3103) + _2322;
        _2891 = (_3112 * _3105) + _2324;
        _2893 = (_3112 * _3107) + _2326;
        _2895 = ((_3097 * _1086) * _3112) + _2670;
        _2897 = ((_3099 * _1088) * _3112) + _2672;
        _2899 = ((_3101 * _1089) * _3112) + _2674;
    }
    else
    {
        _2889 = _2322;
        _2891 = _2324;
        _2893 = _2326;
        _2895 = _2670;
        _2897 = _2672;
        _2899 = _2674;
    }
    float _4945 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _4956 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _4967 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2916 = ((isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2889 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1102))) + ((_2895 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1941)) * cbPerFrame._m0[3u].x);
    float _2917 = ((isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2891 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1102))) + ((_2897 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1941)) * cbPerFrame._m0[3u].x);
    float _2918 = ((isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0))) * (_2893 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1102))) + ((_2899 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1941)) * cbPerFrame._m0[3u].x);
    uint _2919 = _287 + 6u;
    float _2927 = _1024 / cbSceneParam._m0[86u].x;
    float _2928 = _1025 / cbSceneParam._m0[86u].y;
    vec4 _2942 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, (log2((isnan(cbSceneParam._m0[77u].w) ? _947 : (isnan(_947) ? cbSceneParam._m0[77u].w : min(_947, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2944 = _2942.x;
    float _2945 = _2942.y;
    float _2946 = _2942.z;
    float _2947 = _2942.w;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_947 > cbSceneParam._m0[78u].w)
    {
        float _3002 = isnan(_947) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _947 : min(cbSceneParam._m0[80u].w, _947));
        float _3003 = _3002 / _947;
        float _3014 = _3003 * _997;
        float _3015 = _998 * _3003;
        float _3016 = (-0.0) - _3015;
        float _3017 = _3003 * _999;
        float _3019 = (cbSceneParam._m0[77u].w * _3016) / _3002;
        float _3020 = _3019 + cbSceneParam._m0[79u].w;
        float _3021 = cbSceneParam._m0[79u].w - _3015;
        float _3027 = sqrt(((_3014 * _3014) + (_3015 * _3015)) + (_3017 * _3017));
        float _3030 = (1.0 - (cbSceneParam._m0[77u].w / _3002)) * _3027;
        float _3035 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3037 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3214;
        if (abs((_3016 - _3019) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3214 = ((((_3020 > 0.0) ? exp2(_3035 * _3020) : (2.0 - exp2(_3037 * _3020))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3030;
        }
        else
        {
            float _3158 = 1.0 / cbSceneParam._m0[80u].x;
            float _3159 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : max(_3020, _3021));
            float _3160 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : min(_3020, _3021));
            float _3169 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : min(_3159, 0.0));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            _3214 = ((abs(_3027 / _3016) * cbSceneParam._m0[80u].y) * ((((_3169 - _3170) * 2.0) - ((exp2(_3035 * (isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0)))) - exp2(_3035 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))))) * _3158)) - ((exp2(_3037 * _3169) - exp2(_3037 * _3170)) * _3158))) + (_3030 * cbSceneParam._m0[80u].z);
        }
        vec4 _3216 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, 1.0), 0.0);
        float _3225 = exp2((_3214 * (-1.44269502162933349609375)) * (1.0 - _3216.w));
        float _3226 = log2(_3225);
        float _3242 = log2(_2947);
        _3039 = (exp2(_3242 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].x)) * _3216.x) / cbSceneParam._m0[78u].x)) + _2944;
        _3041 = (exp2(_3242 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].y)) * _3216.y) / cbSceneParam._m0[78u].y)) + _2945;
        _3043 = (exp2(_3242 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].z)) * _3216.z) / cbSceneParam._m0[78u].z)) + _2946;
        _3045 = _3225 * _2947;
    }
    else
    {
        _3039 = _2944;
        _3041 = _2945;
        _3043 = _2946;
        _3045 = _2947;
    }
    bool _3252;
    vec4 _3055;
    vec4 _3077;
    float _3079;
    float _3083;
    float _3084;
    float _3085;
    float _3086;
    bool _3096;
    for (;;)
    {
        _3055 = cbMatDynParam._m0[0u];
        float _3057 = roundEven(_3055.y);
        bool _3058 = _3057 == 3.0;
        float _3059 = log2(_3045);
        float _3066 = exp2(_3059 * cbSceneParam._m0[78u].x) * _2916;
        float _3067 = exp2(_3059 * cbSceneParam._m0[78u].y) * _2917;
        float _3068 = exp2(_3059 * cbSceneParam._m0[78u].z) * _2918;
        float _3075 = _1013 + (-0.5);
        _3077 = cbMtdParam._m0[1u];
        _3079 = _3077.y * _3075;
        float _3082 = (_3057 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3083 = _3082 * (_3058 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3039)));
        _3084 = _3082 * (_3058 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3041)));
        _3085 = _3082 * (_3058 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3043)));
        _3086 = _3075 * 0.999000012874603271484375;
        _3096 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3096)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3086) < 0.5)
            {
                _3252 = true;
                break;
            }
        }
        uint _3193 = _1062 + uint(_3055.w);
        if ((cbInstanceData._m0[_3193].w < 1.0) && ((cbInstanceData._m0[_3193].w + _3086) < 0.5))
        {
            _3252 = true;
            break;
        }
        if ((_3079 + 1.0) < _3077.x)
        {
            _3252 = true;
            break;
        }
        _3252 = false;
        break;
    }
    float _3457;
    if (_3252)
    {
        discard_state = true;
        _3457 = 0.0;
    }
    else
    {
        _3457 = cbInstanceData._m0[_2919].w;
    }
    SV_Target.x = _3083;
    SV_Target.y = _3084;
    SV_Target.z = _3085;
    SV_Target.w = _3457;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2919].w;
    discard_exit();
}


