#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1177;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _358 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _358) * cbMtdParam._m0[24u].y) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3527 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _383 = (_376 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _384 = (_376 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _385 = (_376 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    float _454 = ((_424.z - _445) * _376) + _445;
    float _457 = ((((_424.x - _443) * _376) + _443) * 2.0) + (-1.0);
    float _459 = ((((_424.y - _444) * _376) + _444) * 2.0) + (-1.0);
    float _460 = dot(vec2(_457, _459), vec2(_457, _459));
    float _3538 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _465 = sqrt(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _498 = _496.x;
    float _499 = 1.0 - _498;
    float _512 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_498 - _499) * cbMtdParam._m0[24u].z) + _499) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3549 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _520 = (_513 * ((_404.x * cbMtdParam._m0[18u].x) - _383)) + _383;
    float _521 = (_513 * ((_404.y * cbMtdParam._m0[18u].y) - _384)) + _384;
    float _522 = (_513 * ((_404.z * cbMtdParam._m0[18u].z) - _385)) + _385;
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _550 = _548.x;
    float _568 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _550) * _376) + _550;
    float _572 = ((_534.x - _568) * cbMtdParam._m0[19u].z) + _568;
    float _574 = _572 - (_572 * _513);
    vec4 _587 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _594 = (_587.x * 2.0) + (-1.0);
    float _595 = (_587.y * 2.0) + (-1.0);
    float _596 = dot(vec2(_594, _595), vec2(_594, _595));
    float _3560 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _604 = (_513 * (_587.z - _454)) + _454;
    float _616 = (((_594 - _457) + (cbMtdParam._m0[21u].x * _457)) * _513) + _457;
    float _617 = (((_595 - _459) + (cbMtdParam._m0[21u].x * _459)) * _513) + _459;
    float _618 = (_513 * (sqrt(1.0 - (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) - _465)) + _465;
    float _623 = cbMtdParam._m0[22u].x + _478.w;
    float _626 = fma(_618, _225 * NORMAL.x, fma(_617, _232 * TANGENT.x, (_218 * _210) * _616));
    float _629 = fma(_618, _225 * NORMAL.y, fma(_617, _232 * TANGENT.y, (_218 * _211) * _616));
    float _632 = fma(_618, _225 * NORMAL.z, fma(_617, _232 * TANGENT.z, (_218 * _212) * _616));
    float _636 = inversesqrt(dot(vec3(_626, _629, _632), vec3(_626, _629, _632)));
    float _637 = _636 * _626;
    float _638 = _636 * _629;
    float _639 = _636 * _632;
    float _3571 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _640 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _3582 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3593 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3604 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3615 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3626 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _645 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _659 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _710 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _700);
    float _711 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _700);
    float _712 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _700);
    float _716 = inversesqrt(dot(vec3(_710, _711, _712), vec3(_710, _711, _712)));
    float _717 = _710 * _716;
    float _718 = _711 * _716;
    float _719 = _712 * _716;
    float _725 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _726 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _744 = fma(_639, cbSceneParam._m0[5u].z, fma(_638, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _637));
    float _747 = fma(_639, cbSceneParam._m0[6u].z, fma(_638, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _637));
    float _750 = fma(_639, cbSceneParam._m0[7u].z, fma(_638, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _637));
    uint _764 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _770 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_764].x;
    float _771 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_764].y;
    float _772 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_764].z;
    float _3637 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _776 = 1.0 - _645;
    float _777 = _773 * _776;
    float _778 = _774 * _776;
    float _779 = _775 * _776;
    float _784 = (_773 + (-0.039999999105930328369140625)) * _645;
    float _785 = (_774 + (-0.039999999105930328369140625)) * _645;
    float _786 = (_775 + (-0.039999999105930328369140625)) * _645;
    float _787 = _784 + 0.039999999105930328369140625;
    float _789 = _785 + 0.039999999105930328369140625;
    float _790 = _786 + 0.039999999105930328369140625;
    vec4 _799 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _725, cbSceneParam._m0[86u].y * _726));
    float _803 = ((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * TEXCOORD_5.w) * _799.x;
    float _804 = dot(vec3(_637, _638, _639), vec3(_717, _718, _719));
    float _807 = _804 * 2.0;
    float _811 = (_807 * _637) - _717;
    float _812 = (_807 * _638) - _718;
    float _813 = (_807 * _639) - _719;
    float _817 = abs(dot(vec3(_717, _718, _719), vec3(_637, _638, _639)));
    float _3670 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _819 = sqrt(_640);
    float _832 = exp2((_819 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_819 * 3.0));
    float _838 = (1.0 - _832) * ((_819 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _839 = _832 * _819;
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1176;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _901 = fma(_875, cbModelParam._m0[26u].z, fma(_871, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _867));
        float _905 = fma(_875, cbModelParam._m0[27u].z, fma(_871, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _867));
        float _909 = fma(_875, cbModelParam._m0[28u].z, fma(_871, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _867));
        float _934 = _867 + _637;
        float _935 = _871 + _638;
        float _936 = _875 + _639;
        float _946 = fma(_936, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934)) - _901;
        float _947 = fma(_936, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934)) - _905;
        float _948 = fma(_936, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934)) - _909;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _965 = ((_952 * _946) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_901 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_952 * _947) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_905 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_952 * _948) / cbModelParam._m0[34u].z) + ((((((_909 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        float _1004 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_970.x + (-0.5));
        float _1006 = _1004 * (_970.y + (-0.5));
        float _1007 = _1004 * (_970.z + (-0.5));
        float _1014 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_977.x + (-0.5));
        float _1016 = _1014 * (_977.y + (-0.5));
        float _1017 = _1014 * (_977.z + (-0.5));
        float _1024 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_984.x + (-0.5));
        float _1026 = _1024 * (_984.y + (-0.5));
        float _1027 = _1024 * (_984.z + (-0.5));
        float _1034 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_991.x + (-0.5));
        float _1036 = _1034 * (_991.y + (-0.5));
        float _1037 = _1034 * (_991.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1058 = (dot(vec3(_637, _638, _639), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1068 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3718 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1070 + 1.0))) + _1075) * _1038;
        float _1085 = _1006 * 0.5;
        float _1086 = _1016 * 0.5;
        float _1087 = _1026 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_637, _638, _639), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3751 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1112 + 1.0))) + _1117) * _1039;
        float _1127 = _1007 * 0.5;
        float _1128 = _1017 * 0.5;
        float _1129 = _1027 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_637, _638, _639), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3784 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1154 + 1.0))) + _1159) * _1040;
        _1176 = _1007;
        _1178 = _1006;
        _1179 = _1005;
        _1180 = _1017;
        _1181 = _1016;
        _1182 = _1015;
        _1183 = _1027;
        _1184 = _1026;
        _1185 = _1025;
        _1186 = _1040;
        _1187 = _1039;
        _1188 = _1038;
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _1177;
        _1178 = _1177;
        _1179 = _1177;
        _1180 = _1177;
        _1181 = _1177;
        _1182 = _1177;
        _1183 = _1177;
        _1184 = _1177;
        _1185 = _1177;
        _1186 = _1177;
        _1187 = _1177;
        _1188 = _1177;
        _1189 = 0.0;
        _1190 = 0.0;
        _1191 = 0.0;
    }
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1216 = fma(_875, cbModelParam._m0[30u].z, fma(_871, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _867));
        float _1220 = fma(_875, cbModelParam._m0[31u].z, fma(_871, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _867));
        float _1224 = fma(_875, cbModelParam._m0[32u].z, fma(_871, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _867));
        float _1247 = _867 + _637;
        float _1248 = _871 + _638;
        float _1249 = _875 + _639;
        float _1259 = fma(_1249, cbModelParam._m0[30u].z, fma(_1248, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1247)) - _1216;
        float _1260 = fma(_1249, cbModelParam._m0[31u].z, fma(_1248, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1247)) - _1220;
        float _1261 = fma(_1249, cbModelParam._m0[32u].z, fma(_1248, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1247)) - _1224;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1216 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1220 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[35u].z) + ((((((_1224 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1315 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1282.x + (-0.5));
        float _1317 = _1315 * (_1282.y + (-0.5));
        float _1318 = _1315 * (_1282.z + (-0.5));
        float _1325 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1289.x + (-0.5));
        float _1327 = _1325 * (_1289.y + (-0.5));
        float _1328 = _1325 * (_1289.z + (-0.5));
        float _1335 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1296.x + (-0.5));
        float _1337 = _1335 * (_1296.y + (-0.5));
        float _1338 = _1335 * (_1296.z + (-0.5));
        float _1345 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1303.x + (-0.5));
        float _1347 = _1345 * (_1303.y + (-0.5));
        float _1348 = _1345 * (_1303.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_637, _638, _639), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3847 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1379 + 1.0))) + _1384) * _1349;
        float _1394 = _1317 * 0.5;
        float _1395 = _1327 * 0.5;
        float _1396 = _1337 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_637, _638, _639), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _3880 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1421 + 1.0))) + _1426) * _1350;
        float _1436 = _1318 * 0.5;
        float _1437 = _1328 * 0.5;
        float _1438 = _1338 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_637, _638, _639), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _3913 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1463 + 1.0))) + _1468) * _1351;
        _1485 = _1318;
        _1486 = _1317;
        _1487 = _1316;
        _1488 = _1328;
        _1489 = _1327;
        _1490 = _1326;
        _1491 = _1338;
        _1492 = _1337;
        _1493 = _1336;
        _1494 = _1351;
        _1495 = _1350;
        _1496 = _1349;
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    }
    else
    {
        _1485 = _1177;
        _1486 = _1177;
        _1487 = _1177;
        _1488 = _1177;
        _1489 = _1177;
        _1490 = _1177;
        _1491 = _1177;
        _1492 = _1177;
        _1493 = _1177;
        _1494 = _1177;
        _1495 = _1177;
        _1496 = _1177;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1189)) + _1189;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1190)) + _1190;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1191)) + _1191;
    float _1532 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1509));
    float _1553 = _811 * 0.5;
    float _1554 = _812 * 0.5;
    float _1555 = _813 * 0.5;
    float _1556 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1559 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1562 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1596;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1569 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1176, _1180, _1183, _1186));
        float _1573 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1178, _1181, _1184, _1187));
        float _1577 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1179, _1182, _1185, _1188));
        float _1584 = dot(vec4(cbModelParam._m0[39u]), vec4(_1553, _1554, _1555, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1607;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1598 = dot(vec4(cbModelParam._m0[40u]), vec4(_1553, _1554, _1555, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1598) ? 0.0 : (isnan(0.0) ? _1598 : max(0.0, _1598))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1611 = (_1607 * cbModelParam._m0[1u].x) + (_1596 * (1.0 - cbModelParam._m0[1u].x));
    float _1621 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _640);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1621 : min(cbModelParam._m0[25u].z, _1621));
    float _1702;
    float _1704;
    float _1706;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1669 = fma(_875, cbModelParam._m0[13u].z, fma(_871, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867)) + cbModelParam._m0[13u].w;
        float _1673 = fma(_875, cbModelParam._m0[14u].z, fma(_871, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867)) + cbModelParam._m0[14u].w;
        float _1677 = fma(_875, cbModelParam._m0[15u].z, fma(_871, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867)) + cbModelParam._m0[15u].w;
        float _1680 = fma(_813, cbModelParam._m0[13u].z, fma(_812, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _811));
        float _1683 = fma(_813, cbModelParam._m0[14u].z, fma(_812, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _811));
        float _1686 = fma(_813, cbModelParam._m0[15u].z, fma(_812, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _811));
        float _1714;
        if (_1680 > 0.0)
        {
            _1714 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1714 = frontier_phi_14_12_ladder;
        }
        float _1937;
        if (_1683 > 0.0)
        {
            _1937 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1937 = frontier_phi_23_19_ladder;
        }
        float _2194;
        if (_1686 > 0.0)
        {
            _2194 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2194 = frontier_phi_35_30_ladder;
        }
        float _2196 = isnan(_1937) ? _1714 : (isnan(_1714) ? _1937 : min(_1714, _1937));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1680) + _1669;
        float _2202 = (_2197 * _1683) + _1673;
        float _2203 = (_2197 * _1686) + _1677;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2204;
        float _2208 = _2204 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 > _2208) || ((_2202 < _2206) || ((_2201 < _2206) || (_2201 > _2208))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2331 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2203, cbModelParam._m0[9u].z, fma(_2202, cbModelParam._m0[9u].y, _2201 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2203, cbModelParam._m0[10u].z, fma(_2202, cbModelParam._m0[10u].y, _2201 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2203, cbModelParam._m0[11u].z, fma(_2202, cbModelParam._m0[11u].y, _2201 * cbModelParam._m0[11u].x))), _1622);
            frontier_phi_13_35_ladder = _2331.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2331.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2331.x * cbModelParam._m0[1u].y;
        }
        _1702 = frontier_phi_13_35_ladder_2;
        _1704 = frontier_phi_13_35_ladder_1;
        _1706 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_811, _812, _813), _1622);
        _1702 = _1690.x * cbModelParam._m0[1u].y;
        _1704 = _1690.y * cbModelParam._m0[1u].y;
        _1706 = _1690.z * cbModelParam._m0[1u].y;
    }
    float _1710 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _640);
    float _1711 = isnan(_1710) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1710 : min(cbModelParam._m0[25u].w, _1710));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1764 = fma(_875, cbModelParam._m0[21u].z, fma(_871, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867)) + cbModelParam._m0[21u].w;
        float _1768 = fma(_875, cbModelParam._m0[22u].z, fma(_871, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867)) + cbModelParam._m0[22u].w;
        float _1772 = fma(_875, cbModelParam._m0[23u].z, fma(_871, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867)) + cbModelParam._m0[23u].w;
        float _1775 = fma(_813, cbModelParam._m0[21u].z, fma(_812, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _811));
        float _1778 = fma(_813, cbModelParam._m0[22u].z, fma(_812, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _811));
        float _1781 = fma(_813, cbModelParam._m0[23u].z, fma(_812, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _811));
        float _1942;
        if (_1775 > 0.0)
        {
            _1942 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1942 = frontier_phi_25_21_ladder;
        }
        float _2221;
        if (_1778 > 0.0)
        {
            _2221 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2221 = frontier_phi_37_32_ladder;
        }
        float _2434;
        if (_1781 > 0.0)
        {
            _2434 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2434 = frontier_phi_46_43_ladder;
        }
        float _2436 = isnan(_2221) ? _1942 : (isnan(_1942) ? _2221 : min(_1942, _2221));
        float _2437 = isnan(_2434) ? _2436 : (isnan(_2436) ? _2434 : min(_2436, _2434));
        float _2441 = (_2437 * _1775) + _1764;
        float _2442 = (_2437 * _1778) + _1768;
        float _2443 = (_2437 * _1781) + _1772;
        float _2444 = _2437 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2444;
        float _2447 = _2444 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2443 > _2447) || ((_2443 < _2445) || ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 < _2445) || (_2441 > _2447))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2443, cbModelParam._m0[17u].z, fma(_2442, cbModelParam._m0[17u].y, _2441 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2443, cbModelParam._m0[18u].z, fma(_2442, cbModelParam._m0[18u].y, _2441 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2443, cbModelParam._m0[19u].z, fma(_2442, cbModelParam._m0[19u].y, _2441 * cbModelParam._m0[19u].x))), _1711);
            frontier_phi_22_46_ladder = _2642.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2642.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2642.x * cbModelParam._m0[1u].z;
        }
        _1800 = frontier_phi_22_46_ladder_2;
        _1802 = frontier_phi_22_46_ladder_1;
        _1804 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_811, _812, _813), _1711);
        _1800 = _1784.x * cbModelParam._m0[1u].z;
        _1802 = _1784.y * cbModelParam._m0[1u].z;
        _1804 = _1784.z * cbModelParam._m0[1u].z;
    }
    float _1817 = (((_838 * _787) + _839) * _803) * ((cbModelParam._m0[1u].w * (_1800 - _1702)) + _1702);
    float _1819 = (((_838 * _789) + _839) * _803) * ((cbModelParam._m0[1u].w * (_1802 - _1704)) + _1704);
    float _1821 = (((_838 * _790) + _839) * _803) * ((cbModelParam._m0[1u].w * (_1804 - _1706)) + _1706);
    float _1824 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1827 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1830 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, _1817 * cbSceneParam._m0[91u].x));
    vec4 _1838 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_725, _726));
    float _1840 = _1838.w;
    float _1852 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1840);
    float _1853 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1840);
    float _1854 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1840);
    uvec4 _1858 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1860 = _1858.x * 14u;
    uint _1861 = _1860 + 13u;
    float _1868 = _803 + (-1.0);
    float _1873 = (cbLight._m0[_1861].x * _1868) + 1.0;
    float _1874 = (cbLight._m0[_1861].y * _1868) + 1.0;
    float _1875 = (cbLight._m0[_1861].z * _1868) + 1.0;
    float _1876 = (cbLight._m0[_1861].w * _1868) + 1.0;
    uint _1877 = _1860 + 5u;
    float _1883 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1887 = _1860 + 4u;
    float _1896 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
    uint _1900 = _1860 | 1u;
    float _1911 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_637, _638, _639));
    float _1914 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_637, _638, _639));
    float _4049 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _4060 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1919 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.3183098733425140380859375;
    float _1921 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1928 = ((cbLight._m0[_1877].x * _1883) * _1921) + (((cbLight._m0[_1887].x * _1852) * _1896) * _1919);
    float _1929 = ((_1883 * cbLight._m0[_1877].y) * _1921) + (((cbLight._m0[_1887].y * _1853) * _1896) * _1919);
    float _1930 = ((_1883 * cbLight._m0[_1877].z) * _1921) + (((cbLight._m0[_1887].z * _1854) * _1896) * _1919);
    uvec4 _1934 = floatBitsToUint(cbLight._m0[_1860 + 12u]);
    bool _1936 = _1934.x == 0u;
    float _1947;
    float _1949;
    float _1951;
    if (_1936)
    {
        _1947 = _1928;
        _1949 = _1929;
        _1951 = _1930;
    }
    else
    {
        uint _1955 = _1860 + 6u;
        float _1971 = (dot(vec3(cbLight._m0[_1860 + 2u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _1972 = _1971 * _1971;
        float _4071 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1973 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1974 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _1947 = (((cbLight._m0[_1955].x * 0.3183098733425140380859375) * _1973) * _1974) + _1928;
        _1949 = (((cbLight._m0[_1955].y * 0.3183098733425140380859375) * _1973) * _1974) + _1929;
        _1951 = (((cbLight._m0[_1955].z * 0.3183098733425140380859375) * _1973) * _1974) + _1930;
    }
    bool _1954 = _1934.y == 0u;
    float _1992;
    float _1994;
    float _1996;
    if (_1954)
    {
        _1992 = _1947;
        _1994 = _1949;
        _1996 = _1951;
    }
    else
    {
        uint _2165 = _1860 + 7u;
        float _2181 = (dot(vec3(cbLight._m0[_1860 + 3u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4087 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2184 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _1992 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _1947;
        _1994 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _1949;
        _1996 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _1951;
    }
    uint _1999 = _1860 + 8u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _640) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1860].x + _717;
    float _2015 = cbLight._m0[_1860].y + _718;
    float _2016 = cbLight._m0[_1860].z + _719;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_1860].xyz));
    float _4103 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _2028 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _2029 = dot(vec3(_637, _638, _639), vec3(_2021, _2022, _2023));
    float _4125 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2021, _2022, _2023));
    float _4136 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2013 * _2013;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2049 = exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0);
    float _2050 = 0.959999978542327880859375 - _784;
    float _2052 = 0.959999978542327880859375 - _785;
    float _2053 = 0.959999978542327880859375 - _786;
    float _2060 = 1.0 - _2013;
    float _2071 = (0.5 / (((_2028 * ((_2027 * _2060) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2060) + _2013) * _2027))) * _2027;
    float _4147 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    uint _2087 = _1860 + 9u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _640) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1900].x + _717;
    float _2101 = cbLight._m0[_1900].y + _718;
    float _2102 = cbLight._m0[_1900].z + _719;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_1900].xyz));
    float _4158 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _2114 = dot(vec3(_637, _638, _639), vec3(_2107, _2108, _2109));
    float _4169 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_2107, _2108, _2109));
    float _4180 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2099 * _2099;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2133 = exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0);
    float _2140 = 1.0 - _2099;
    float _2150 = (0.5 / (((_2028 * ((_2113 * _2140) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2140) + _2099) * _2113))) * _2113;
    float _4191 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    float _2162 = (((((_2133 * _2050) + _787) * cbLight._m0[_2087].x) * _2152) * _1883) + ((((cbLight._m0[_1999].x * _1852) * ((_2049 * _2050) + _787)) * _2073) * _1896);
    float _2163 = (((((_2133 * _2052) + _789) * cbLight._m0[_2087].y) * _2152) * _1883) + ((((cbLight._m0[_1999].y * _1853) * ((_2049 * _2052) + _789)) * _2073) * _1896);
    float _2164 = (((((_2133 * _2053) + _790) * cbLight._m0[_2087].z) * _2152) * _1883) + ((((cbLight._m0[_1999].z * _1854) * ((_2049 * _2053) + _790)) * _2073) * _1896);
    float _2226;
    float _2228;
    float _2230;
    if (_1936)
    {
        _2226 = _2162;
        _2228 = _2163;
        _2230 = _2164;
    }
    else
    {
        uint _2232 = _1860 + 2u;
        uint _2236 = _1860 + 10u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _640) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _717;
        float _2253 = cbLight._m0[_2232].y + _718;
        float _2254 = cbLight._m0[_2232].z + _719;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2232].xyz));
        float _4202 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2266 = dot(vec3(_637, _638, _639), vec3(_2259, _2260, _2261));
        float _4213 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4224 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2285 = exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0);
        float _2292 = 1.0 - _2251;
        float _2302 = (0.5 / (((_2028 * ((_2265 * _2292) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2292) + _2251) * _2265))) * _2265;
        float _4235 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2304 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2305 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2226 = (((((_2285 * _2050) + _787) * cbLight._m0[_2236].x) * _2304) * _2305) + _2162;
        _2228 = (((((_2285 * _2052) + _789) * cbLight._m0[_2236].y) * _2304) * _2305) + _2163;
        _2230 = (((((_2285 * _2053) + _790) * cbLight._m0[_2236].z) * _2304) * _2305) + _2164;
    }
    float _2340;
    float _2342;
    float _2344;
    if (_1954)
    {
        _2340 = _2226;
        _2342 = _2228;
        _2344 = _2230;
    }
    else
    {
        uint _2351 = _1860 + 3u;
        uint _2355 = _1860 + 11u;
        float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _640) * 0.949999988079071044921875);
        float _2370 = _2369 * _2369;
        float _2371 = cbLight._m0[_2351].x + _717;
        float _2372 = cbLight._m0[_2351].y + _718;
        float _2373 = cbLight._m0[_2351].z + _719;
        float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
        float _2378 = _2377 * _2371;
        float _2379 = _2377 * _2372;
        float _2380 = _2377 * _2373;
        float _2381 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2351].xyz));
        float _4251 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2385 = dot(vec3(_637, _638, _639), vec3(_2378, _2379, _2380));
        float _4262 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2389 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2378, _2379, _2380));
        float _4273 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2393 = _2370 * _2370;
        float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
        float _2404 = exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0);
        float _2411 = 1.0 - _2370;
        float _2421 = (0.5 / (((_2028 * ((_2384 * _2411) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2411) + _2370) * _2384))) * _2384;
        float _4284 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2423 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
        float _2424 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2340 = (((((_2404 * _2050) + _787) * cbLight._m0[_2355].x) * _2423) * _2424) + _2226;
        _2342 = (((((_2404 * _2052) + _789) * cbLight._m0[_2355].y) * _2423) * _2424) + _2228;
        _2344 = (((((_2404 * _2053) + _790) * cbLight._m0[_2355].z) * _2423) * _2424) + _2230;
    }
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    if (_1858.y == 0u)
    {
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2499;
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2499;
        float _2502 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2499;
        uvec4 _2514 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2515 = _2514.x;
        uint _2526 = uint((float(_2514.y) * floor(float(uint(cbSceneParam._m0[85u].y * _726) / _2515))) + floor(float(uint(cbSceneParam._m0[85u].x * _725) / _2515)));
        float _2536 = (log2(_2502 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2537 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        uint _2540 = uint(isnan(14.0) ? _2537 : (isnan(_2537) ? 14.0 : min(_2537, 14.0)));
        uvec4 _2545 = texelFetch(g_lightClusterGridBuffer, int(((_2540 << 2u) + (_2526 << 6u)) >> 2u));
        uint _2546 = _2545.x;
        uint _2547 = _2514.z;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        if (((((1u << ((_2547 >> 4u) & 15u)) + 4294967295u) & _2546) == 0u) || ((_2547 & 240u) == 0u))
        {
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
        }
        else
        {
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            float _2796 = 0.0;
            float _2797 = 0.0;
            uint _2798 = 0u;
            uint _2807;
            bool _2808;
            for (;;)
            {
                _2807 = texelFetch(g_lightClassification, int((((_2540 << 5u) + (_2526 << 9u)) + (_2798 << 2u)) >> 2u)).x;
                _2808 = _2807 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2808)
                {
                    frontier_phi_61_pred = _2792;
                    frontier_phi_61_pred_1 = _2797;
                    frontier_phi_61_pred_2 = _2796;
                    frontier_phi_61_pred_3 = _2795;
                    frontier_phi_61_pred_4 = _2794;
                    frontier_phi_61_pred_5 = _2793;
                }
                else
                {
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    uint _2922;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2795;
                    _2920 = _2796;
                    _2921 = _2797;
                    _2922 = _2807;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    for (;;)
                    {
                        uint _2926 = uint(findLSB(_2922)) + (_2798 << 5u);
                        uint _2923 = (_2922 + 4294967295u) & _2922;
                        uint _2928 = _2926 * 48u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2948 = (_2926 * 48u) + 4u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2967 = (_2926 * 48u) + 8u;
                        vec3 _2978 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x));
                        float _2982 = _2942.x - _2500;
                        float _2983 = _2942.y - _2501;
                        float _2984 = _2942.z - _2502;
                        float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                        float _2988 = inversesqrt(_2985);
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2992 = dot(vec3(_744, _747, _750), vec3(_2989, _2990, _2991));
                        float _2997 = 1.0 - (_2985 * _2942.w);
                        float _4310 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _2998 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _2999 = sqrt(_2985) * _2961.w;
                        float _3002 = 1.39999997615814208984375 / (_2999 + 1.39999997615814208984375);
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2992) + _3003;
                        float _3009 = _2999 * _2999;
                        float _3013 = ((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2998) / ((_3009 * 0.699999988079071044921875) + 1.0);
                        float _3017 = (-0.0) - _2500;
                        float _3018 = (-0.0) - _2501;
                        float _3019 = (-0.0) - _2502;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3024 = _3023 * _3017;
                        float _3025 = _3023 * _3018;
                        float _3026 = _3023 * _3019;
                        float _3034 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                        float _3035 = 1.0 - _819;
                        float _3042 = sqrt(1.0 - ((1.0 - (_3035 * _3035)) * (1.0 - (_3034 * _3034))));
                        float _3043 = _3042 * _3042;
                        float _3044 = _3043 * _3043;
                        float _3045 = _3024 + _2989;
                        float _3046 = _3025 + _2990;
                        float _3047 = _3026 + _2991;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3055 = dot(vec3(_744, _747, _750), vec3(_3024, _3025, _3026));
                        float _4326 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3058 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3059 = dot(vec3(_744, _747, _750), vec3(_3051 * _3045, _3051 * _3046, _3051 * _3047));
                        float _4337 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3066 = ((_3062 * _3062) * (_3044 + (-1.0))) + 1.0;
                        float _3067 = _3002 * _3043;
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _2992) + _3068;
                        float _4348 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3073 = 1.0 - _3043;
                        float _3083 = (0.5 / (((_3072 * ((_3058 * _3073) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_3072 * _3073) + _3043) * _3058))) * _3072;
                        float _4359 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3094 = (((_3044 * 3.1415927410125732421875) * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) / ((_3066 * _3066) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125))) * _2998;
                        _2851 = (_3013 * _2961.x) + _2919;
                        _2852 = (_3013 * _2961.y) + _2920;
                        _2853 = (_3013 * _2961.z) + _2921;
                        _2848 = (_3094 * _2978.x) + _2916;
                        _2849 = (_3094 * _2978.y) + _2917;
                        _2850 = (_3094 * _2978.z) + _2918;
                        if (_2923 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2851;
                            _2920 = _2852;
                            _2921 = _2853;
                            _2922 = _2923;
                        }
                    }
                    frontier_phi_61_pred = _2848;
                    frontier_phi_61_pred_1 = _2853;
                    frontier_phi_61_pred_2 = _2852;
                    frontier_phi_61_pred_3 = _2851;
                    frontier_phi_61_pred_4 = _2850;
                    frontier_phi_61_pred_5 = _2849;
                }
                _2648 = frontier_phi_61_pred;
                _2658 = frontier_phi_61_pred_1;
                _2656 = frontier_phi_61_pred_2;
                _2654 = frontier_phi_61_pred_3;
                _2652 = frontier_phi_61_pred_4;
                _2650 = frontier_phi_61_pred_5;
                uint _2799 = _2798 + 1u;
                if (_2799 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2792 = _2648;
                    _2793 = _2650;
                    _2794 = _2652;
                    _2795 = _2654;
                    _2796 = _2656;
                    _2797 = _2658;
                    _2798 = _2799;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
        }
        uvec4 _2661 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2662 = _2661.z;
        uint _2664 = (_2662 >> 8u) & 15u;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        if (((4294967295u << _2664) & _2546) == 0u)
        {
            _2760 = _2647;
            _2762 = _2649;
            _2764 = _2651;
            _2766 = _2653;
            _2768 = _2655;
            _2770 = _2657;
        }
        else
        {
            float _2785 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
            float _2786 = _2785 * _2500;
            float _2787 = _2785 * _2501;
            float _2788 = _2785 * _2502;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2664 < ((_2662 >> 12u) & 15u))
            {
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2769;
                float _2771;
                float _2899 = _2647;
                float _2900 = _2649;
                float _2901 = _2651;
                float _2902 = _2653;
                float _2903 = _2655;
                float _2904 = _2657;
                uint _2905 = _2664;
                uint _2914;
                bool _2915;
                for (;;)
                {
                    _2914 = texelFetch(g_lightClassification, int((((_2540 << 5u) + (_2526 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                    _2915 = _2914 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2915)
                    {
                        frontier_phi_67_pred = _2902;
                        frontier_phi_67_pred_1 = _2903;
                        frontier_phi_67_pred_2 = _2904;
                        frontier_phi_67_pred_3 = _2901;
                        frontier_phi_67_pred_4 = _2900;
                        frontier_phi_67_pred_5 = _2899;
                    }
                    else
                    {
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3112 = _2899;
                        float _3113 = _2900;
                        float _3114 = _2901;
                        float _3115 = _2902;
                        float _3116 = _2903;
                        float _3117 = _2904;
                        uint _3118 = _2914;
                        uint _3119;
                        vec4 _3144;
                        float _3145;
                        vec4 _3160;
                        vec3 _3172;
                        vec4 _3187;
                        vec4 _3203;
                        float _3249;
                        bool _3250;
                        for (;;)
                        {
                            uint _3129 = ((_2905 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3118));
                            _3119 = (_3118 + 4294967295u) & _3118;
                            uint _3131 = _3129 * 40u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            _3145 = _3144.w;
                            uint _3147 = (_3129 * 40u) + 4u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3162 = (_3129 * 40u) + 8u;
                            _3172 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x));
                            uint _3174 = (_3129 * 40u) + 16u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3190 = (_3129 * 40u) + 20u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3205 = (_3129 * 40u) + 24u;
                            vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3224 = (_3129 * 40u) + 28u;
                            vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3249 = fma(_2502, _3237.z, fma(_2501, _3237.y, _3237.x * _2500)) + _3237.w;
                            _3250 = !((fma(_2502, _3218.z, fma(_2501, _3218.y, _3218.x * _2500)) + _3218.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3250)
                            {
                                float _3277 = _3144.x - _2500;
                                float _3278 = _3144.y - _2501;
                                float _3279 = _3144.z - _2502;
                                float _3280 = dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279));
                                float _3283 = inversesqrt(_3280);
                                float _3284 = _3283 * _3277;
                                float _3285 = _3283 * _3278;
                                float _3286 = _3283 * _3279;
                                float _3290 = 1.0 - (_3280 / (_3145 * _3145));
                                float _4370 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3291 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3295 = sqrt(_3280) * _3160.w;
                                float _3297 = 1.39999997615814208984375 / (_3295 + 1.39999997615814208984375);
                                float _3298 = _3297 * _3297;
                                float _3301 = ((1.0 - _3298) * dot(vec3(_3284, _3285, _3286), vec3(_744, _747, _750))) + _3298;
                                float _3304 = _3295 * _3295;
                                float _3308 = (fma(_2502, _3187.z, fma(_2501, _3187.y, _3187.x * _2500)) + _3187.w) / _3249;
                                float _3309 = (fma(_2502, _3203.z, fma(_2501, _3203.y, _3203.x * _2500)) + _3203.w) / _3249;
                                float _3313 = 1.0 - dot(vec2(_3308, _3309), vec2(_3308, _3309));
                                float _4386 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3315 = _3314 * (((isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0))) * _3291) / ((_3304 * 0.699999988079071044921875) + 1.0));
                                float _3327 = exp2(log2(1.0 / ((_3304 * 3.5) + 5.0)) * 0.25);
                                float _3328 = 1.0 - _819;
                                float _3335 = sqrt(1.0 - ((1.0 - (_3328 * _3328)) * (1.0 - (_3327 * _3327))));
                                float _3336 = _3335 * _3335;
                                float _3337 = _3336 * _3336;
                                float _3338 = _3284 - _2786;
                                float _3339 = _3285 - _2787;
                                float _3340 = _3286 - _2788;
                                float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                                float _3348 = dot(vec3(_744, _747, _750), vec3((-0.0) - _2786, (-0.0) - _2787, (-0.0) - _2788));
                                float _4397 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3351 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3352 = dot(vec3(_744, _747, _750), vec3(_3344 * _3338, _3344 * _3339, _3344 * _3340));
                                float _4408 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3355 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3359 = ((_3355 * _3355) * (_3337 + (-1.0))) + 1.0;
                                float _3360 = _3297 * _3336;
                                float _3361 = _3360 * _3360;
                                float _3367 = ((1.0 - _3361) * dot(vec3(_744, _747, _750), vec3(_3284, _3285, _3286))) + _3361;
                                float _4419 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3369 = 1.0 - _3336;
                                float _3379 = (0.5 / (((_3368 * ((_3351 * _3369) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3368 * _3369) + _3336) * _3351))) * _3368;
                                float _4430 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3389 = (_3314 * _3291) * (((_3337 * 3.1415927410125732421875) * (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) / ((_3359 * _3359) * ((_3304 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3389 * _3172.x;
                                frontier_phi_73_pred_1 = _3389 * _3172.y;
                                frontier_phi_73_pred_2 = _3315 * _3160.z;
                                frontier_phi_73_pred_3 = _3315 * _3160.y;
                                frontier_phi_73_pred_4 = _3315 * _3160.x;
                                frontier_phi_73_pred_5 = _3389 * _3172.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3393 = frontier_phi_73_pred;
                            _3394 = frontier_phi_73_pred_1;
                            _3398 = frontier_phi_73_pred_2;
                            _3397 = frontier_phi_73_pred_3;
                            _3396 = frontier_phi_73_pred_4;
                            _3395 = frontier_phi_73_pred_5;
                            _3102 = _3396 + _3115;
                            _3103 = _3397 + _3116;
                            _3104 = _3398 + _3117;
                            _3099 = _3393 + _3112;
                            _3100 = _3394 + _3113;
                            _3101 = _3395 + _3114;
                            if (_3119 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3119;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3102;
                        frontier_phi_67_pred_1 = _3103;
                        frontier_phi_67_pred_2 = _3104;
                        frontier_phi_67_pred_3 = _3101;
                        frontier_phi_67_pred_4 = _3100;
                        frontier_phi_67_pred_5 = _3099;
                    }
                    _2767 = frontier_phi_67_pred;
                    _2769 = frontier_phi_67_pred_1;
                    _2771 = frontier_phi_67_pred_2;
                    _2765 = frontier_phi_67_pred_3;
                    _2763 = frontier_phi_67_pred_4;
                    _2761 = frontier_phi_67_pred_5;
                    uint _2906 = _2905 + 1u;
                    if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2899 = _2761;
                        _2900 = _2763;
                        _2901 = _2765;
                        _2902 = _2767;
                        _2903 = _2769;
                        _2904 = _2771;
                        _2905 = _2906;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2769;
                frontier_phi_55_56_ladder_1 = _2771;
                frontier_phi_55_56_ladder_2 = _2767;
                frontier_phi_55_56_ladder_3 = _2765;
                frontier_phi_55_56_ladder_4 = _2763;
                frontier_phi_55_56_ladder_5 = _2761;
            }
            else
            {
                frontier_phi_55_56_ladder = _2655;
                frontier_phi_55_56_ladder_1 = _2657;
                frontier_phi_55_56_ladder_2 = _2653;
                frontier_phi_55_56_ladder_3 = _2651;
                frontier_phi_55_56_ladder_4 = _2649;
                frontier_phi_55_56_ladder_5 = _2647;
            }
            _2760 = frontier_phi_55_56_ladder_5;
            _2762 = frontier_phi_55_56_ladder_4;
            _2764 = frontier_phi_55_56_ladder_3;
            _2766 = frontier_phi_55_56_ladder_2;
            _2768 = frontier_phi_55_56_ladder;
            _2770 = frontier_phi_55_56_ladder_1;
        }
        float _2775 = isnan(1.0) ? _803 : (isnan(_803) ? 1.0 : min(_803, 1.0));
        _2559 = (_2775 * _2766) + _1992;
        _2561 = (_2775 * _2768) + _1994;
        _2563 = (_2775 * _2770) + _1996;
        _2565 = ((_2760 * _787) * _2775) + _2340;
        _2567 = ((_2762 * _789) * _2775) + _2342;
        _2569 = ((_2764 * _790) * _2775) + _2344;
    }
    else
    {
        _2559 = _1992;
        _2561 = _1994;
        _2563 = _1996;
        _2565 = _2340;
        _2567 = _2342;
        _2569 = _2344;
    }
    float _4446 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4457 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4468 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    uint _2589 = _238 + 6u;
    float _2597 = _725 / cbSceneParam._m0[86u].x;
    float _2598 = _726 / cbSceneParam._m0[86u].y;
    vec4 _2612 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2597, _2598, (log2((isnan(cbSceneParam._m0[77u].w) ? _659 : (isnan(_659) ? cbSceneParam._m0[77u].w : min(_659, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2614 = _2612.x;
    float _2615 = _2612.y;
    float _2616 = _2612.z;
    float _2617 = _2612.w;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    if (_659 > cbSceneParam._m0[78u].w)
    {
        float _2672 = isnan(_659) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _659 : min(cbSceneParam._m0[80u].w, _659));
        float _2673 = _2672 / _659;
        float _2684 = _2673 * _710;
        float _2685 = _711 * _2673;
        float _2686 = (-0.0) - _2685;
        float _2688 = _2673 * _712;
        float _2690 = (cbSceneParam._m0[77u].w * _2686) / _2672;
        float _2691 = _2690 + cbSceneParam._m0[79u].w;
        float _2692 = cbSceneParam._m0[79u].w - _2685;
        float _2698 = sqrt(((_2684 * _2684) + (_2685 * _2685)) + (_2688 * _2688));
        float _2701 = (1.0 - (cbSceneParam._m0[77u].w / _2672)) * _2698;
        float _2706 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2708 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2861;
        if (abs((_2686 - _2690) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2861 = ((((_2691 > 0.0) ? exp2(_2706 * _2691) : (2.0 - exp2(_2708 * _2691))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2701;
        }
        else
        {
            float _2821 = 1.0 / cbSceneParam._m0[80u].x;
            float _2822 = isnan(_2692) ? _2691 : (isnan(_2691) ? _2692 : max(_2691, _2692));
            float _2823 = isnan(_2692) ? _2691 : (isnan(_2691) ? _2692 : min(_2691, _2692));
            float _2832 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : min(_2822, 0.0));
            float _2833 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : min(_2823, 0.0));
            _2861 = ((abs(_2698 / _2686) * cbSceneParam._m0[80u].y) * ((((_2832 - _2833) * 2.0) - ((exp2(_2706 * (isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0)))) - exp2(_2706 * (isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))))) * _2821)) - ((exp2(_2708 * _2832) - exp2(_2708 * _2833)) * _2821))) + (_2701 * cbSceneParam._m0[80u].z);
        }
        vec4 _2863 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2597, _2598, 1.0), 0.0);
        float _2872 = exp2((_2861 * (-1.44269502162933349609375)) * (1.0 - _2863.w));
        float _2873 = log2(_2872);
        float _2889 = log2(_2617);
        _2710 = (exp2(_2889 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].x)) * _2863.x) / cbSceneParam._m0[78u].x)) + _2614;
        _2712 = (exp2(_2889 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].y)) * _2863.y) / cbSceneParam._m0[78u].y)) + _2615;
        _2714 = (exp2(_2889 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].z)) * _2863.z) / cbSceneParam._m0[78u].z)) + _2616;
        _2716 = _2872 * _2617;
    }
    else
    {
        _2710 = _2614;
        _2712 = _2615;
        _2714 = _2616;
        _2716 = _2617;
    }
    float _2728 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2729 = _2728 == 3.0;
    float _2730 = log2(_2716);
    float _2737 = exp2(_2730 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2559 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _803))) + ((_2565 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2738 = exp2(_2730 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2561 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _803))) + ((_2567 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2739 = exp2(_2730 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2563 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _803))) + ((_2569 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2748 = (_2728 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2748 * (_2729 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2710)));
    SV_Target.y = _2748 * (_2729 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2712)));
    SV_Target.z = _2748 * (_2729 ? _2739 : (_2739 + (cbSceneParam._m0[72u].w * _2714)));
    SV_Target.w = cbInstanceData._m0[_2589].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2589].w;
}


