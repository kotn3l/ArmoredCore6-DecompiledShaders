#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1315;
float _3694;
float _3695;
float _3696;
float _3697;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3706 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3717 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3728 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].y) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3739 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _430 = (_423 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _431 = (_423 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _432 = (_423 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _436 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _430;
    float _439 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _431;
    float _442 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _432;
    float _449 = ((_430 - _436) * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) + _436;
    float _450 = ((_431 - _439) * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) + _439;
    float _451 = ((_432 - _442) * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) + _442;
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _536 = _532.z;
    float _545 = ((_515.z - _536) * _423) + _536;
    float _548 = ((((_515.x - _534) * _423) + _534) * 2.0) + (-1.0);
    float _549 = ((((_515.y - _535) * _423) + _535) * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3750 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))));
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _588 = _586.x;
    float _589 = 1.0 - _588;
    float _602 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_588 - _589) * cbMtdParam._m0[24u].z) + _589) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3761 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _610 = (_603 * ((_470.x * cbMtdParam._m0[18u].x) - _449)) + _449;
    float _611 = (_603 * ((_470.y * cbMtdParam._m0[18u].y) - _450)) + _450;
    float _612 = (_603 * ((_470.z * cbMtdParam._m0[18u].z) - _451)) + _451;
    vec4 _624 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _640 = _638.x;
    float _658 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _640) * _423) + _640;
    float _662 = ((_624.x - _658) * cbMtdParam._m0[19u].z) + _658;
    float _664 = _662 - (_662 * _603);
    float _669 = (((_490.z - _545) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _545;
    vec4 _682 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _689 = (_682.x * 2.0) + (-1.0);
    float _690 = (_682.y * 2.0) + (-1.0);
    float _691 = dot(vec2(_689, _690), vec2(_689, _690));
    float _3772 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _699 = (_603 * (_682.z - _669)) + _669;
    float _704 = _548 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_490.x * 2.0) + (-1.0)));
    float _705 = _549 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_490.y * 2.0) + (-1.0)));
    float _717 = (((_689 - _704) + (cbMtdParam._m0[21u].x * _704)) * _603) + _704;
    float _718 = (((_690 - _705) + (cbMtdParam._m0[21u].x * _705)) * _603) + _705;
    float _719 = (_603 * (sqrt(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) - _555)) + _555;
    float _721 = cbMtdParam._m0[22u].x + _568.w;
    float _724 = fma(_719, _238 * NORMAL.x, fma(_718, _245 * TANGENT.x, (_231 * _223) * _717));
    float _727 = fma(_719, _238 * NORMAL.y, fma(_718, _245 * TANGENT.y, (_231 * _224) * _717));
    float _730 = fma(_719, _238 * NORMAL.z, fma(_718, _245 * TANGENT.z, (_231 * _225) * _717));
    float _734 = inversesqrt(dot(vec3(_724, _727, _730), vec3(_724, _727, _730)));
    float _735 = _734 * _724;
    float _736 = _734 * _727;
    float _737 = _734 * _730;
    float _3783 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _738 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _3805 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3816 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3827 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3838 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _743 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _757 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _808 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _798);
    float _809 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _798);
    float _810 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _798);
    float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
    float _815 = _808 * _814;
    float _816 = _809 * _814;
    float _817 = _810 * _814;
    vec4 _822 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _824 = _822.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _996 = sqrt(((_808 * _808) + (_809 * _809)) + (_810 * _810));
        float _1002 = (cbMatDynParam._m0[5u].x * _996) + cbMatDynParam._m0[5u].y;
        float _3849 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1007 = (cbMatDynParam._m0[5u].z * _996) + cbMatDynParam._m0[5u].w;
        float _3860 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) - _1003)) + _1003) < ((_824 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _835 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _836 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _854 = fma(_737, cbSceneParam._m0[5u].z, fma(_736, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _735));
    float _857 = fma(_737, cbSceneParam._m0[6u].z, fma(_736, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _735));
    float _860 = fma(_737, cbSceneParam._m0[7u].z, fma(_736, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _735));
    uint _873 = _272 + 9u;
    uint _874 = _873 + uint(cbMatDynParam._m0[0u].w);
    float _880 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_874].x;
    float _881 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_874].y;
    float _882 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_874].z;
    float _3871 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _886 = 1.0 - _743;
    float _887 = _883 * _886;
    float _888 = _884 * _886;
    float _889 = _885 * _886;
    float _894 = (_883 + (-0.039999999105930328369140625)) * _743;
    float _895 = (_884 + (-0.039999999105930328369140625)) * _743;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _743;
    float _897 = _894 + 0.039999999105930328369140625;
    float _899 = _895 + 0.039999999105930328369140625;
    float _900 = _896 + 0.039999999105930328369140625;
    vec4 _909 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _835, cbSceneParam._m0[86u].y * _836));
    float _913 = ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * TEXCOORD_5.w) * _909.x;
    float _914 = dot(vec3(_735, _736, _737), vec3(_815, _816, _817));
    float _917 = _914 * 2.0;
    float _921 = (_917 * _735) - _815;
    float _922 = (_917 * _736) - _816;
    float _923 = (_917 * _737) - _817;
    float _927 = abs(dot(vec3(_815, _816, _817), vec3(_735, _736, _737)));
    float _3904 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _929 = sqrt(_738);
    float _942 = exp2((_929 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_929 * 3.0));
    float _948 = (1.0 - _942) * ((_929 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _949 = _942 * _929;
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1314;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1039 = fma(_985, cbModelParam._m0[26u].z, fma(_981, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _977));
        float _1043 = fma(_985, cbModelParam._m0[27u].z, fma(_981, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _977));
        float _1047 = fma(_985, cbModelParam._m0[28u].z, fma(_981, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _977));
        float _1072 = _977 + _735;
        float _1073 = _981 + _736;
        float _1074 = _985 + _737;
        float _1084 = fma(_1074, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072)) - _1039;
        float _1085 = fma(_1074, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072)) - _1043;
        float _1086 = fma(_1074, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072)) - _1047;
        float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
        float _1103 = ((_1090 * _1084) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1039 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1090 * _1085) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1043 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1090 * _1086) / cbModelParam._m0[34u].z) + ((((((_1047 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1142 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1108.x + (-0.5));
        float _1144 = _1142 * (_1108.y + (-0.5));
        float _1145 = _1142 * (_1108.z + (-0.5));
        float _1152 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1115.x + (-0.5));
        float _1154 = _1152 * (_1115.y + (-0.5));
        float _1155 = _1152 * (_1115.z + (-0.5));
        float _1162 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1122.x + (-0.5));
        float _1164 = _1162 * (_1122.y + (-0.5));
        float _1165 = _1162 * (_1122.z + (-0.5));
        float _1172 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1129.x + (-0.5));
        float _1174 = _1172 * (_1129.y + (-0.5));
        float _1175 = _1172 * (_1129.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1196 = (dot(vec3(_735, _736, _737), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1206 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3952 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1208 + 1.0))) + _1213) * _1176;
        float _1223 = _1144 * 0.5;
        float _1224 = _1154 * 0.5;
        float _1225 = _1164 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_735, _736, _737), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3985 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1250 + 1.0))) + _1255) * _1177;
        float _1265 = _1145 * 0.5;
        float _1266 = _1155 * 0.5;
        float _1267 = _1165 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_735, _736, _737), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4018 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1292 + 1.0))) + _1297) * _1178;
        _1314 = _1145;
        _1316 = _1144;
        _1317 = _1143;
        _1318 = _1155;
        _1319 = _1154;
        _1320 = _1153;
        _1321 = _1165;
        _1322 = _1164;
        _1323 = _1163;
        _1324 = _1178;
        _1325 = _1177;
        _1326 = _1176;
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1315;
        _1316 = _1315;
        _1317 = _1315;
        _1318 = _1315;
        _1319 = _1315;
        _1320 = _1315;
        _1321 = _1315;
        _1322 = _1315;
        _1323 = _1315;
        _1324 = _1315;
        _1325 = _1315;
        _1326 = _1315;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1357 = fma(_985, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _977));
        float _1361 = fma(_985, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _977));
        float _1365 = fma(_985, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _977));
        float _1388 = _977 + _735;
        float _1389 = _981 + _736;
        float _1390 = _985 + _737;
        float _1400 = fma(_1390, cbModelParam._m0[30u].z, fma(_1389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1388)) - _1357;
        float _1401 = fma(_1390, cbModelParam._m0[31u].z, fma(_1389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1388)) - _1361;
        float _1402 = fma(_1390, cbModelParam._m0[32u].z, fma(_1389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1388)) - _1365;
        float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
        float _1419 = ((_1406 * _1400) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1357 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1406 * _1401) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1361 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1406 * _1402) / cbModelParam._m0[35u].z) + ((((((_1365 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        float _1456 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1423.x + (-0.5));
        float _1458 = _1456 * (_1423.y + (-0.5));
        float _1459 = _1456 * (_1423.z + (-0.5));
        float _1466 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1430.x + (-0.5));
        float _1468 = _1466 * (_1430.y + (-0.5));
        float _1469 = _1466 * (_1430.z + (-0.5));
        float _1476 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1437.x + (-0.5));
        float _1478 = _1476 * (_1437.y + (-0.5));
        float _1479 = _1476 * (_1437.z + (-0.5));
        float _1486 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1444.x + (-0.5));
        float _1488 = _1486 * (_1444.y + (-0.5));
        float _1489 = _1486 * (_1444.z + (-0.5));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = _1457 * 0.5;
        float _1494 = _1467 * 0.5;
        float _1495 = _1477 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_735, _736, _737), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4081 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1520 + 1.0))) + _1525) * _1490;
        float _1535 = _1458 * 0.5;
        float _1536 = _1468 * 0.5;
        float _1537 = _1478 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_735, _736, _737), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4114 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1562 + 1.0))) + _1567) * _1491;
        float _1577 = _1459 * 0.5;
        float _1578 = _1469 * 0.5;
        float _1579 = _1479 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_735, _736, _737), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4147 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1604 + 1.0))) + _1609) * _1492;
        _1626 = _1459;
        _1627 = _1458;
        _1628 = _1457;
        _1629 = _1469;
        _1630 = _1468;
        _1631 = _1467;
        _1632 = _1479;
        _1633 = _1478;
        _1634 = _1477;
        _1635 = _1492;
        _1636 = _1491;
        _1637 = _1490;
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
    }
    else
    {
        _1626 = _1315;
        _1627 = _1315;
        _1628 = _1315;
        _1629 = _1315;
        _1630 = _1315;
        _1631 = _1315;
        _1632 = _1315;
        _1633 = _1315;
        _1634 = _1315;
        _1635 = _1315;
        _1636 = _1315;
        _1637 = _1315;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1327)) + _1327;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1328)) + _1328;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1329)) + _1329;
    float _1673 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1650));
    float _1694 = _921 * 0.5;
    float _1695 = _922 * 0.5;
    float _1696 = _923 * 0.5;
    float _1697 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1700 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1703 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1737;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1710 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1314, _1318, _1321, _1324));
        float _1714 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1718 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1725 = dot(vec4(cbModelParam._m0[39u]), vec4(_1694, _1695, _1696, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1748;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1739 = dot(vec4(cbModelParam._m0[40u]), vec4(_1694, _1695, _1696, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1752 = (_1748 * cbModelParam._m0[1u].x) + (_1737 * (1.0 - cbModelParam._m0[1u].x));
    float _1762 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _738);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1762 : min(cbModelParam._m0[25u].z, _1762));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1810 = fma(_985, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _977)) + cbModelParam._m0[13u].w;
        float _1814 = fma(_985, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _977)) + cbModelParam._m0[14u].w;
        float _1818 = fma(_985, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _977)) + cbModelParam._m0[15u].w;
        float _1821 = fma(_923, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921));
        float _1824 = fma(_923, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921));
        float _1827 = fma(_923, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921));
        float _1855;
        if (_1821 > 0.0)
        {
            _1855 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1855 = frontier_phi_17_15_ladder;
        }
        float _2057;
        if (_1824 > 0.0)
        {
            _2057 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2057 = frontier_phi_26_22_ladder;
        }
        float _2311;
        if (_1827 > 0.0)
        {
            _2311 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2311 = frontier_phi_38_33_ladder;
        }
        float _2313 = isnan(_2057) ? _1855 : (isnan(_1855) ? _2057 : min(_1855, _2057));
        float _2314 = isnan(_2311) ? _2313 : (isnan(_2313) ? _2311 : min(_2313, _2311));
        float _2318 = (_2314 * _1821) + _1810;
        float _2319 = (_2314 * _1824) + _1814;
        float _2320 = (_2314 * _1827) + _1818;
        float _2321 = _2314 * 9.9999997473787516355514526367188e-05;
        float _2323 = (-1.0) - _2321;
        float _2325 = _2321 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2320 > _2325) || ((_2320 < _2323) || ((_2319 > _2325) || ((_2319 < _2323) || ((_2318 < _2323) || (_2318 > _2325))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2320, cbModelParam._m0[9u].z, fma(_2319, cbModelParam._m0[9u].y, _2318 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2320, cbModelParam._m0[10u].z, fma(_2319, cbModelParam._m0[10u].y, _2318 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2320, cbModelParam._m0[11u].z, fma(_2319, cbModelParam._m0[11u].y, _2318 * cbModelParam._m0[11u].x))), _1763);
            frontier_phi_16_38_ladder = _2448.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2448.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2448.x * cbModelParam._m0[1u].y;
        }
        _1843 = frontier_phi_16_38_ladder_2;
        _1845 = frontier_phi_16_38_ladder_1;
        _1847 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_921, _922, _923), _1763);
        _1843 = _1831.x * cbModelParam._m0[1u].y;
        _1845 = _1831.y * cbModelParam._m0[1u].y;
        _1847 = _1831.z * cbModelParam._m0[1u].y;
    }
    float _1851 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _738);
    float _1852 = isnan(_1851) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1851 : min(cbModelParam._m0[25u].w, _1851));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1905 = fma(_985, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _977)) + cbModelParam._m0[21u].w;
        float _1909 = fma(_985, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _977)) + cbModelParam._m0[22u].w;
        float _1913 = fma(_985, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _977)) + cbModelParam._m0[23u].w;
        float _1916 = fma(_923, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921));
        float _1919 = fma(_923, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921));
        float _1922 = fma(_923, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921));
        float _2062;
        if (_1916 > 0.0)
        {
            _2062 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2062 = frontier_phi_28_24_ladder;
        }
        float _2338;
        if (_1919 > 0.0)
        {
            _2338 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2338 = frontier_phi_40_35_ladder;
        }
        float _2551;
        if (_1922 > 0.0)
        {
            _2551 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2551 = frontier_phi_49_46_ladder;
        }
        float _2553 = isnan(_2338) ? _2062 : (isnan(_2062) ? _2338 : min(_2062, _2338));
        float _2554 = isnan(_2551) ? _2553 : (isnan(_2553) ? _2551 : min(_2553, _2551));
        float _2558 = (_2554 * _1916) + _1905;
        float _2559 = (_2554 * _1919) + _1909;
        float _2560 = (_2554 * _1922) + _1913;
        float _2561 = _2554 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2561;
        float _2564 = _2561 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2560 > _2564) || ((_2560 < _2562) || ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 < _2562) || (_2558 > _2564))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2560, cbModelParam._m0[17u].z, fma(_2559, cbModelParam._m0[17u].y, _2558 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2560, cbModelParam._m0[18u].z, fma(_2559, cbModelParam._m0[18u].y, _2558 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2560, cbModelParam._m0[19u].z, fma(_2559, cbModelParam._m0[19u].y, _2558 * cbModelParam._m0[19u].x))), _1852);
            frontier_phi_25_49_ladder = _2759.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2759.x * cbModelParam._m0[1u].z;
        }
        _1941 = frontier_phi_25_49_ladder_2;
        _1943 = frontier_phi_25_49_ladder_1;
        _1945 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_921, _922, _923), _1852);
        _1941 = _1925.x * cbModelParam._m0[1u].z;
        _1943 = _1925.y * cbModelParam._m0[1u].z;
        _1945 = _1925.z * cbModelParam._m0[1u].z;
    }
    float _1958 = (((_948 * _897) + _949) * _913) * ((cbModelParam._m0[1u].w * (_1941 - _1843)) + _1843);
    float _1960 = (((_948 * _899) + _949) * _913) * ((cbModelParam._m0[1u].w * (_1943 - _1845)) + _1845);
    float _1962 = (((_948 * _900) + _949) * _913) * ((cbModelParam._m0[1u].w * (_1945 - _1847)) + _1847);
    float _1965 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1960, cbSceneParam._m0[89u].y, _1958 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1960, cbSceneParam._m0[90u].y, _1958 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1960, cbSceneParam._m0[91u].y, _1958 * cbSceneParam._m0[91u].x));
    uvec4 _1981 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _1983 = _1981.x * 14u;
    uint _1984 = _1983 + 13u;
    float _1991 = _913 + (-1.0);
    float _1996 = (cbLight._m0[_1984].x * _1991) + 1.0;
    float _1997 = (cbLight._m0[_1984].y * _1991) + 1.0;
    float _1998 = (cbLight._m0[_1984].z * _1991) + 1.0;
    float _1999 = (cbLight._m0[_1984].w * _1991) + 1.0;
    uint _2000 = _1983 + 5u;
    float _2006 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2010 = _1983 + 4u;
    float _2016 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2020 = _1983 | 1u;
    float _2031 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_735, _736, _737));
    float _2034 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_735, _736, _737));
    float _4283 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _4294 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2039 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.3183098733425140380859375;
    float _2041 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * 0.3183098733425140380859375;
    float _2048 = ((cbLight._m0[_2000].x * _2006) * _2041) + ((cbLight._m0[_2010].x * _2016) * _2039);
    float _2049 = ((_2006 * cbLight._m0[_2000].y) * _2041) + ((_2016 * cbLight._m0[_2010].y) * _2039);
    float _2050 = ((_2006 * cbLight._m0[_2000].z) * _2041) + ((_2016 * cbLight._m0[_2010].z) * _2039);
    uvec4 _2054 = floatBitsToUint(cbLight._m0[_1983 + 12u]);
    bool _2056 = _2054.x == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_2056)
    {
        _2067 = _2048;
        _2069 = _2049;
        _2071 = _2050;
    }
    else
    {
        uint _2075 = _1983 + 6u;
        float _2091 = (dot(vec3(cbLight._m0[_1983 + 2u].xyz), vec3(_735, _736, _737)) * 0.5) + 0.5;
        float _2092 = _2091 * _2091;
        float _4305 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2094 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2067 = (((cbLight._m0[_2075].x * 0.3183098733425140380859375) * _2093) * _2094) + _2048;
        _2069 = (((cbLight._m0[_2075].y * 0.3183098733425140380859375) * _2093) * _2094) + _2049;
        _2071 = (((cbLight._m0[_2075].z * 0.3183098733425140380859375) * _2093) * _2094) + _2050;
    }
    bool _2074 = _2054.y == 0u;
    float _2112;
    float _2114;
    float _2116;
    if (_2074)
    {
        _2112 = _2067;
        _2114 = _2069;
        _2116 = _2071;
    }
    else
    {
        uint _2282 = _1983 + 7u;
        float _2298 = (dot(vec3(cbLight._m0[_1983 + 3u].xyz), vec3(_735, _736, _737)) * 0.5) + 0.5;
        float _2299 = _2298 * _2298;
        float _4321 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2300 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2301 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2112 = (((cbLight._m0[_2282].x * 0.3183098733425140380859375) * _2300) * _2301) + _2067;
        _2114 = (((cbLight._m0[_2282].y * 0.3183098733425140380859375) * _2300) * _2301) + _2069;
        _2116 = (((cbLight._m0[_2282].z * 0.3183098733425140380859375) * _2300) * _2301) + _2071;
    }
    uint _2119 = _1983 + 8u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _738) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1983].x + _815;
    float _2135 = cbLight._m0[_1983].y + _816;
    float _2136 = cbLight._m0[_1983].z + _817;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_1983].xyz));
    float _4337 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _4348 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _2148 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2149 = dot(vec3(_735, _736, _737), vec3(_2141, _2142, _2143));
    float _4359 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2141, _2142, _2143));
    float _4370 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2133 * _2133;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
    float _2170 = 0.959999978542327880859375 - _894;
    float _2172 = 0.959999978542327880859375 - _895;
    float _2173 = 0.959999978542327880859375 - _896;
    float _2180 = 1.0 - _2133;
    float _2191 = (0.5 / (((_2148 * ((_2147 * _2180) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2180) + _2133) * _2147))) * _2147;
    float _4381 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    uint _2204 = _1983 + 9u;
    float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _738) * 0.949999988079071044921875);
    float _2216 = _2215 * _2215;
    float _2217 = cbLight._m0[_2020].x + _815;
    float _2218 = cbLight._m0[_2020].y + _816;
    float _2219 = cbLight._m0[_2020].z + _817;
    float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
    float _2224 = _2223 * _2217;
    float _2225 = _2223 * _2218;
    float _2226 = _2223 * _2219;
    float _2227 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2020].xyz));
    float _4392 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2231 = dot(vec3(_735, _736, _737), vec3(_2224, _2225, _2226));
    float _4403 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2235 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2224, _2225, _2226));
    float _4414 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2239 = _2216 * _2216;
    float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
    float _2250 = exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0);
    float _2257 = 1.0 - _2216;
    float _2267 = (0.5 / (((_2148 * ((_2230 * _2257) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2257) + _2216) * _2230))) * _2230;
    float _4425 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2269 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
    float _2279 = (((((_2250 * _2170) + _897) * cbLight._m0[_2204].x) * _2269) * _2006) + (((((_2169 * _2170) + _897) * cbLight._m0[_2119].x) * _2193) * _2016);
    float _2280 = (((((_2250 * _2172) + _899) * cbLight._m0[_2204].y) * _2269) * _2006) + (((((_2169 * _2172) + _899) * cbLight._m0[_2119].y) * _2193) * _2016);
    float _2281 = (((((_2250 * _2173) + _900) * cbLight._m0[_2204].z) * _2269) * _2006) + (((((_2169 * _2173) + _900) * cbLight._m0[_2119].z) * _2193) * _2016);
    float _2343;
    float _2345;
    float _2347;
    if (_2056)
    {
        _2343 = _2279;
        _2345 = _2280;
        _2347 = _2281;
    }
    else
    {
        uint _2349 = _1983 + 2u;
        uint _2353 = _1983 + 10u;
        float _2367 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _738) * 0.949999988079071044921875);
        float _2368 = _2367 * _2367;
        float _2369 = cbLight._m0[_2349].x + _815;
        float _2370 = cbLight._m0[_2349].y + _816;
        float _2371 = cbLight._m0[_2349].z + _817;
        float _2375 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
        float _2376 = _2375 * _2369;
        float _2377 = _2375 * _2370;
        float _2378 = _2375 * _2371;
        float _2379 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2349].xyz));
        float _4436 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2383 = dot(vec3(_735, _736, _737), vec3(_2376, _2377, _2378));
        float _4447 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2387 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2376, _2377, _2378));
        float _4458 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2391 = _2368 * _2368;
        float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
        float _2402 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
        float _2409 = 1.0 - _2368;
        float _2419 = (0.5 / (((_2148 * ((_2382 * _2409) + _2368)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2409) + _2368) * _2382))) * _2382;
        float _4469 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2421 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
        float _2422 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2343 = (((((_2402 * _2170) + _897) * cbLight._m0[_2353].x) * _2421) * _2422) + _2279;
        _2345 = (((((_2402 * _2172) + _899) * cbLight._m0[_2353].y) * _2421) * _2422) + _2280;
        _2347 = (((((_2402 * _2173) + _900) * cbLight._m0[_2353].z) * _2421) * _2422) + _2281;
    }
    float _2457;
    float _2459;
    float _2461;
    if (_2074)
    {
        _2457 = _2343;
        _2459 = _2345;
        _2461 = _2347;
    }
    else
    {
        uint _2468 = _1983 + 3u;
        uint _2472 = _1983 + 11u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _738) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _815;
        float _2489 = cbLight._m0[_2468].y + _816;
        float _2490 = cbLight._m0[_2468].z + _817;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2468].xyz));
        float _4485 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2502 = dot(vec3(_735, _736, _737), vec3(_2495, _2496, _2497));
        float _4496 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4507 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2521 = exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0);
        float _2528 = 1.0 - _2487;
        float _2538 = (0.5 / (((_2148 * ((_2501 * _2528) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2528) + _2487) * _2501))) * _2501;
        float _4518 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2540 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2541 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2457 = (((((_2521 * _2170) + _897) * cbLight._m0[_2472].x) * _2540) * _2541) + _2343;
        _2459 = (((((_2521 * _2172) + _899) * cbLight._m0[_2472].y) * _2540) * _2541) + _2345;
        _2461 = (((((_2521 * _2173) + _900) * cbLight._m0[_2472].z) * _2540) * _2541) + _2347;
    }
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    if (_1981.y == 0u)
    {
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2617 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2616;
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2616;
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2616;
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.x;
        uint _2643 = uint((float(_2631.y) * floor(float(uint(cbSceneParam._m0[85u].y * _836) / _2632))) + floor(float(uint(cbSceneParam._m0[85u].x * _835) / _2632)));
        float _2653 = (log2(_2619 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2654 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        uint _2657 = uint(isnan(14.0) ? _2654 : (isnan(_2654) ? 14.0 : min(_2654, 14.0)));
        uvec4 _2662 = texelFetch(g_lightClusterGridBuffer, int(((_2657 << 2u) + (_2643 << 6u)) >> 2u));
        uint _2663 = _2662.x;
        uint _2664 = _2631.z;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        if (((((1u << ((_2664 >> 4u) & 15u)) + 4294967295u) & _2663) == 0u) || ((_2664 & 240u) == 0u))
        {
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
        }
        else
        {
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            uint _2923 = 0u;
            uint _2932;
            bool _2933;
            for (;;)
            {
                _2932 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_2923 << 2u)) >> 2u)).x;
                _2933 = _2932 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2933)
                {
                    frontier_phi_66_pred = _2917;
                    frontier_phi_66_pred_1 = _2922;
                    frontier_phi_66_pred_2 = _2921;
                    frontier_phi_66_pred_3 = _2920;
                    frontier_phi_66_pred_4 = _2919;
                    frontier_phi_66_pred_5 = _2918;
                }
                else
                {
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    uint _3068;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2919;
                    _3065 = _2920;
                    _3066 = _2921;
                    _3067 = _2922;
                    _3068 = _2932;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    for (;;)
                    {
                        uint _3072 = uint(findLSB(_3068)) + (_2923 << 5u);
                        uint _3069 = (_3068 + 4294967295u) & _3068;
                        uint _3074 = _3072 * 48u;
                        vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 3u)).x));
                        uint _3094 = (_3072 * 48u) + 4u;
                        vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 3u)).x));
                        uint _3113 = (_3072 * 48u) + 8u;
                        vec3 _3124 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x));
                        float _3128 = _3088.x - _2617;
                        float _3129 = _3088.y - _2618;
                        float _3130 = _3088.z - _2619;
                        float _3131 = dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130));
                        float _3134 = inversesqrt(_3131);
                        float _3135 = _3134 * _3128;
                        float _3136 = _3134 * _3129;
                        float _3137 = _3134 * _3130;
                        float _3138 = dot(vec3(_854, _857, _860), vec3(_3135, _3136, _3137));
                        float _3143 = 1.0 - (_3131 * _3088.w);
                        float _4544 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3144 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3145 = sqrt(_3131) * _3107.w;
                        float _3148 = 1.39999997615814208984375 / (_3145 + 1.39999997615814208984375);
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3138) + _3149;
                        float _3155 = _3145 * _3145;
                        float _3159 = ((isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0))) * _3144) / ((_3155 * 0.699999988079071044921875) + 1.0);
                        float _3163 = (-0.0) - _2617;
                        float _3164 = (-0.0) - _2618;
                        float _3165 = (-0.0) - _2619;
                        float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                        float _3170 = _3169 * _3163;
                        float _3171 = _3169 * _3164;
                        float _3172 = _3169 * _3165;
                        float _3180 = exp2(log2(1.0 / ((_3155 * 3.5) + 5.0)) * 0.25);
                        float _3181 = 1.0 - _929;
                        float _3188 = sqrt(1.0 - ((1.0 - (_3181 * _3181)) * (1.0 - (_3180 * _3180))));
                        float _3189 = _3188 * _3188;
                        float _3190 = _3189 * _3189;
                        float _3191 = _3170 + _3135;
                        float _3192 = _3171 + _3136;
                        float _3193 = _3172 + _3137;
                        float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                        float _3201 = dot(vec3(_854, _857, _860), vec3(_3170, _3171, _3172));
                        float _4560 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3205 = dot(vec3(_854, _857, _860), vec3(_3197 * _3191, _3197 * _3192, _3197 * _3193));
                        float _4571 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3212 = ((_3208 * _3208) * (_3190 + (-1.0))) + 1.0;
                        float _3213 = _3148 * _3189;
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3138) + _3214;
                        float _4582 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3219 = 1.0 - _3189;
                        float _3229 = (0.5 / (((_3218 * ((_3204 * _3219) + _3189)) + 9.9999999392252902907785028219223e-09) + (((_3218 * _3219) + _3189) * _3204))) * _3218;
                        float _4593 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3240 = (((_3190 * 3.1415927410125732421875) * (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) / ((_3212 * _3212) * ((_3155 * 2.1991131305694580078125) + 3.141590118408203125))) * _3144;
                        _2992 = (_3159 * _3107.x) + _3065;
                        _2993 = (_3159 * _3107.y) + _3066;
                        _2994 = (_3159 * _3107.z) + _3067;
                        _2989 = (_3240 * _3124.x) + _3062;
                        _2990 = (_3240 * _3124.y) + _3063;
                        _2991 = (_3240 * _3124.z) + _3064;
                        if (_3069 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _2991;
                            _3065 = _2992;
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _3069;
                        }
                    }
                    frontier_phi_66_pred = _2989;
                    frontier_phi_66_pred_1 = _2994;
                    frontier_phi_66_pred_2 = _2993;
                    frontier_phi_66_pred_3 = _2992;
                    frontier_phi_66_pred_4 = _2991;
                    frontier_phi_66_pred_5 = _2990;
                }
                _2765 = frontier_phi_66_pred;
                _2775 = frontier_phi_66_pred_1;
                _2773 = frontier_phi_66_pred_2;
                _2771 = frontier_phi_66_pred_3;
                _2769 = frontier_phi_66_pred_4;
                _2767 = frontier_phi_66_pred_5;
                uint _2924 = _2923 + 1u;
                if (_2924 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2917 = _2765;
                    _2918 = _2767;
                    _2919 = _2769;
                    _2920 = _2771;
                    _2921 = _2773;
                    _2922 = _2775;
                    _2923 = _2924;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
        }
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.z;
        uint _2781 = (_2779 >> 8u) & 15u;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((4294967295u << _2781) & _2663) == 0u)
        {
            _2885 = _2764;
            _2887 = _2766;
            _2889 = _2768;
            _2891 = _2770;
            _2893 = _2772;
            _2895 = _2774;
        }
        else
        {
            float _2910 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
            float _2911 = _2910 * _2617;
            float _2912 = _2910 * _2618;
            float _2913 = _2910 * _2619;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2781 < ((_2779 >> 12u) & 15u))
            {
                float _2886;
                float _2888;
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _3045 = _2764;
                float _3046 = _2766;
                float _3047 = _2768;
                float _3048 = _2770;
                float _3049 = _2772;
                float _3050 = _2774;
                uint _3051 = _2781;
                uint _3060;
                bool _3061;
                for (;;)
                {
                    _3060 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_3051 << 2u)) >> 2u)).x;
                    _3061 = _3060 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3061)
                    {
                        frontier_phi_77_pred = _3050;
                        frontier_phi_77_pred_1 = _3049;
                        frontier_phi_77_pred_2 = _3048;
                        frontier_phi_77_pred_3 = _3047;
                        frontier_phi_77_pred_4 = _3046;
                        frontier_phi_77_pred_5 = _3045;
                    }
                    else
                    {
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3267 = _3045;
                        float _3268 = _3046;
                        float _3269 = _3047;
                        float _3270 = _3048;
                        float _3271 = _3049;
                        float _3272 = _3050;
                        uint _3273 = _3060;
                        uint _3274;
                        vec4 _3299;
                        float _3300;
                        vec4 _3315;
                        vec3 _3327;
                        vec4 _3342;
                        vec4 _3357;
                        float _3403;
                        bool _3404;
                        for (;;)
                        {
                            uint _3284 = ((_3051 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3273));
                            _3274 = (_3273 + 4294967295u) & _3273;
                            uint _3286 = _3284 * 40u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            _3300 = _3299.w;
                            uint _3302 = (_3284 * 40u) + 4u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3317 = (_3284 * 40u) + 8u;
                            _3327 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x));
                            uint _3329 = (_3284 * 40u) + 16u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3344 = (_3284 * 40u) + 20u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3359 = (_3284 * 40u) + 24u;
                            vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3378 = (_3284 * 40u) + 28u;
                            vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            _3403 = fma(_2619, _3391.z, fma(_2618, _3391.y, _3391.x * _2617)) + _3391.w;
                            _3404 = !((fma(_2619, _3372.z, fma(_2618, _3372.y, _3372.x * _2617)) + _3372.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3404)
                            {
                                float _3431 = _3299.x - _2617;
                                float _3432 = _3299.y - _2618;
                                float _3433 = _3299.z - _2619;
                                float _3434 = dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433));
                                float _3437 = inversesqrt(_3434);
                                float _3438 = _3437 * _3431;
                                float _3439 = _3437 * _3432;
                                float _3440 = _3437 * _3433;
                                float _3444 = 1.0 - (_3434 / (_3300 * _3300));
                                float _4604 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3449 = sqrt(_3434) * _3315.w;
                                float _3451 = 1.39999997615814208984375 / (_3449 + 1.39999997615814208984375);
                                float _3452 = _3451 * _3451;
                                float _3455 = ((1.0 - _3452) * dot(vec3(_3438, _3439, _3440), vec3(_854, _857, _860))) + _3452;
                                float _3458 = _3449 * _3449;
                                float _3462 = (fma(_2619, _3342.z, fma(_2618, _3342.y, _3342.x * _2617)) + _3342.w) / _3403;
                                float _3463 = (fma(_2619, _3357.z, fma(_2618, _3357.y, _3357.x * _2617)) + _3357.w) / _3403;
                                float _3467 = 1.0 - dot(vec2(_3462, _3463), vec2(_3462, _3463));
                                float _4620 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3469 = _3468 * (((isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0))) * _3445) / ((_3458 * 0.699999988079071044921875) + 1.0));
                                float _3481 = exp2(log2(1.0 / ((_3458 * 3.5) + 5.0)) * 0.25);
                                float _3482 = 1.0 - _929;
                                float _3489 = sqrt(1.0 - ((1.0 - (_3482 * _3482)) * (1.0 - (_3481 * _3481))));
                                float _3490 = _3489 * _3489;
                                float _3491 = _3490 * _3490;
                                float _3492 = _3438 - _2911;
                                float _3493 = _3439 - _2912;
                                float _3494 = _3440 - _2913;
                                float _3498 = inversesqrt(dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494)));
                                float _3502 = dot(vec3(_854, _857, _860), vec3((-0.0) - _2911, (-0.0) - _2912, (-0.0) - _2913));
                                float _4631 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3505 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3506 = dot(vec3(_854, _857, _860), vec3(_3498 * _3492, _3498 * _3493, _3498 * _3494));
                                float _4642 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3509 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3513 = ((_3509 * _3509) * (_3491 + (-1.0))) + 1.0;
                                float _3514 = _3451 * _3490;
                                float _3515 = _3514 * _3514;
                                float _3521 = ((1.0 - _3515) * dot(vec3(_854, _857, _860), vec3(_3438, _3439, _3440))) + _3515;
                                float _4653 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3523 = 1.0 - _3490;
                                float _3533 = (0.5 / (((_3522 * ((_3505 * _3523) + _3490)) + 9.9999999392252902907785028219223e-09) + (((_3522 * _3523) + _3490) * _3505))) * _3522;
                                float _4664 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3543 = (_3468 * _3445) * (((_3491 * 3.1415927410125732421875) * (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) / ((_3513 * _3513) * ((_3458 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3469 * _3315.y;
                                frontier_phi_83_pred_1 = _3469 * _3315.x;
                                frontier_phi_83_pred_2 = _3543 * _3327.z;
                                frontier_phi_83_pred_3 = _3543 * _3327.y;
                                frontier_phi_83_pred_4 = _3543 * _3327.x;
                                frontier_phi_83_pred_5 = _3469 * _3315.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3551 = frontier_phi_83_pred;
                            _3550 = frontier_phi_83_pred_1;
                            _3549 = frontier_phi_83_pred_2;
                            _3548 = frontier_phi_83_pred_3;
                            _3547 = frontier_phi_83_pred_4;
                            _3552 = frontier_phi_83_pred_5;
                            _3257 = _3550 + _3270;
                            _3258 = _3551 + _3271;
                            _3259 = _3552 + _3272;
                            _3254 = _3547 + _3267;
                            _3255 = _3548 + _3268;
                            _3256 = _3549 + _3269;
                            if (_3274 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3274;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3259;
                        frontier_phi_77_pred_1 = _3258;
                        frontier_phi_77_pred_2 = _3257;
                        frontier_phi_77_pred_3 = _3256;
                        frontier_phi_77_pred_4 = _3255;
                        frontier_phi_77_pred_5 = _3254;
                    }
                    _2896 = frontier_phi_77_pred;
                    _2894 = frontier_phi_77_pred_1;
                    _2892 = frontier_phi_77_pred_2;
                    _2890 = frontier_phi_77_pred_3;
                    _2888 = frontier_phi_77_pred_4;
                    _2886 = frontier_phi_77_pred_5;
                    uint _3052 = _3051 + 1u;
                    if (_3052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3045 = _2886;
                        _3046 = _2888;
                        _3047 = _2890;
                        _3048 = _2892;
                        _3049 = _2894;
                        _3050 = _2896;
                        _3051 = _3052;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2890;
                frontier_phi_58_59_ladder_1 = _2896;
                frontier_phi_58_59_ladder_2 = _2894;
                frontier_phi_58_59_ladder_3 = _2892;
                frontier_phi_58_59_ladder_4 = _2888;
                frontier_phi_58_59_ladder_5 = _2886;
            }
            else
            {
                frontier_phi_58_59_ladder = _2768;
                frontier_phi_58_59_ladder_1 = _2774;
                frontier_phi_58_59_ladder_2 = _2772;
                frontier_phi_58_59_ladder_3 = _2770;
                frontier_phi_58_59_ladder_4 = _2766;
                frontier_phi_58_59_ladder_5 = _2764;
            }
            _2885 = frontier_phi_58_59_ladder_5;
            _2887 = frontier_phi_58_59_ladder_4;
            _2889 = frontier_phi_58_59_ladder;
            _2891 = frontier_phi_58_59_ladder_3;
            _2893 = frontier_phi_58_59_ladder_2;
            _2895 = frontier_phi_58_59_ladder_1;
        }
        float _2900 = isnan(1.0) ? _913 : (isnan(_913) ? 1.0 : min(_913, 1.0));
        _2676 = (_2900 * _2891) + _2112;
        _2678 = (_2900 * _2893) + _2114;
        _2680 = (_2900 * _2895) + _2116;
        _2682 = ((_2885 * _897) * _2900) + _2457;
        _2684 = ((_2887 * _899) * _2900) + _2459;
        _2686 = ((_2889 * _900) * _2900) + _2461;
    }
    else
    {
        _2676 = _2112;
        _2678 = _2114;
        _2680 = _2116;
        _2682 = _2457;
        _2684 = _2459;
        _2686 = _2461;
    }
    float _4680 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4691 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4702 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2703 = ((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2676 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _913))) + ((_2682 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    float _2704 = ((isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2678 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _913))) + ((_2684 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    float _2705 = ((isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2680 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _913))) + ((_2686 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    uint _2706 = _272 + 6u;
    float _2714 = _835 / cbSceneParam._m0[86u].x;
    float _2715 = _836 / cbSceneParam._m0[86u].y;
    vec4 _2729 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, (log2((isnan(cbSceneParam._m0[77u].w) ? _757 : (isnan(_757) ? cbSceneParam._m0[77u].w : min(_757, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2731 = _2729.x;
    float _2732 = _2729.y;
    float _2733 = _2729.z;
    float _2734 = _2729.w;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_757 > cbSceneParam._m0[78u].w)
    {
        float _2789 = isnan(_757) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _757 : min(cbSceneParam._m0[80u].w, _757));
        float _2790 = _2789 / _757;
        float _2801 = _2790 * _808;
        float _2802 = _809 * _2790;
        float _2803 = (-0.0) - _2802;
        float _2805 = _2790 * _810;
        float _2807 = (cbSceneParam._m0[77u].w * _2803) / _2789;
        float _2808 = _2807 + cbSceneParam._m0[79u].w;
        float _2809 = cbSceneParam._m0[79u].w - _2802;
        float _2815 = sqrt(((_2801 * _2801) + (_2802 * _2802)) + (_2805 * _2805));
        float _2818 = (1.0 - (cbSceneParam._m0[77u].w / _2789)) * _2815;
        float _2823 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2825 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3002;
        if (abs((_2803 - _2807) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3002 = ((((_2808 > 0.0) ? exp2(_2823 * _2808) : (2.0 - exp2(_2825 * _2808))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2818;
        }
        else
        {
            float _2946 = 1.0 / cbSceneParam._m0[80u].x;
            float _2947 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : max(_2808, _2809));
            float _2948 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : min(_2808, _2809));
            float _2957 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : min(_2947, 0.0));
            float _2958 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : min(_2948, 0.0));
            _3002 = ((abs(_2815 / _2803) * cbSceneParam._m0[80u].y) * ((((_2957 - _2958) * 2.0) - ((exp2(_2823 * (isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0)))) - exp2(_2823 * (isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))))) * _2946)) - ((exp2(_2825 * _2957) - exp2(_2825 * _2958)) * _2946))) + (_2818 * cbSceneParam._m0[80u].z);
        }
        vec4 _3004 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, 1.0), 0.0);
        float _3013 = exp2((_3002 * (-1.44269502162933349609375)) * (1.0 - _3004.w));
        float _3014 = log2(_3013);
        float _3030 = log2(_2734);
        _2827 = (exp2(_3030 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].x)) * _3004.x) / cbSceneParam._m0[78u].x)) + _2731;
        _2829 = (exp2(_3030 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].y)) * _3004.y) / cbSceneParam._m0[78u].y)) + _2732;
        _2831 = (exp2(_3030 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].z)) * _3004.z) / cbSceneParam._m0[78u].z)) + _2733;
        _2833 = _3013 * _2734;
    }
    else
    {
        _2827 = _2731;
        _2829 = _2732;
        _2831 = _2733;
        _2833 = _2734;
    }
    bool _3040;
    vec4 _2843;
    vec4 _2865;
    float _2867;
    float _2871;
    float _2872;
    float _2873;
    float _2874;
    bool _2884;
    for (;;)
    {
        _2843 = cbMatDynParam._m0[0u];
        float _2845 = roundEven(_2843.y);
        bool _2846 = _2845 == 3.0;
        float _2847 = log2(_2833);
        float _2854 = exp2(_2847 * cbSceneParam._m0[78u].x) * _2703;
        float _2855 = exp2(_2847 * cbSceneParam._m0[78u].y) * _2704;
        float _2856 = exp2(_2847 * cbSceneParam._m0[78u].z) * _2705;
        float _2863 = _824 + (-0.5);
        _2865 = cbMtdParam._m0[1u];
        _2867 = _2865.y * _2863;
        float _2870 = (_2845 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2871 = _2870 * (_2846 ? _2854 : (_2854 + (cbSceneParam._m0[72u].w * _2827)));
        _2872 = _2870 * (_2846 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2829)));
        _2873 = _2870 * (_2846 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2831)));
        _2874 = _2863 * 0.999000012874603271484375;
        _2884 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2884)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _2874) < 0.5)
            {
                _3040 = true;
                break;
            }
        }
        uint _2981 = _873 + uint(_2843.w);
        if ((cbInstanceData._m0[_2981].w < 1.0) && ((cbInstanceData._m0[_2981].w + _2874) < 0.5))
        {
            _3040 = true;
            break;
        }
        if ((_2867 + 1.0) < _2865.x)
        {
            _3040 = true;
            break;
        }
        _3040 = false;
        break;
    }
    float _3245;
    if (_3040)
    {
        discard_state = true;
        _3245 = 0.0;
    }
    else
    {
        _3245 = cbInstanceData._m0[_2706].w;
    }
    SV_Target.x = _2871;
    SV_Target.y = _2872;
    SV_Target.z = _2873;
    SV_Target.w = _3245;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2706].w;
    discard_exit();
}


