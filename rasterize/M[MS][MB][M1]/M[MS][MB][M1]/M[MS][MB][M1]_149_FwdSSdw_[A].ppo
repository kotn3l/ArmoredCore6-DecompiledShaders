#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1424;
float _3826;
float _3827;
float _3828;
float _3829;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _368 = _366.x;
    float _380 = dot(vec4(_368, _366.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _397 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_368 - _380) * cbMtdParam._m0[24u].y) + _380) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3838 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _405 = (_398 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _406 = (_398 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _407 = (_398 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _492 = _490.x;
    float _493 = _490.y;
    float _494 = _490.z;
    float _503 = ((_473.z - _494) * _398) + _494;
    float _506 = ((((_473.x - _492) * _398) + _492) * 2.0) + (-1.0);
    float _507 = ((((_473.y - _493) * _398) + _493) * 2.0) + (-1.0);
    float _508 = dot(vec2(_506, _507), vec2(_506, _507));
    float _3849 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _513 = sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))));
    vec4 _533 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _545 = (_506 + ((((_446.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_533.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _546 = (_507 + ((((_446.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_533.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _549 = fma(_513, _249, fma(_546, _256, _545 * _242));
    float _552 = fma(_513, _250, fma(_546, _257, _545 * _243));
    float _555 = fma(_513, _251, fma(_546, _258, _545 * _244));
    float _559 = inversesqrt(dot(vec3(_549, _552, _555), vec3(_549, _552, _555)));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _588 = _586.x;
    float _589 = 1.0 - _588;
    float _595 = (cbMtdParam._m0[19u].x + dot(vec4(_559 * _549, _559 * _552, _559 * _555, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_588 - _589) * cbMtdParam._m0[24u].z) + _589) * cbMtdParam._m0[21u].z);
    float _3860 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _598 = (-0.0) - cbMtdParam._m0[24u].x;
    float _600 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _600 : (isnan(_600) ? 1.0 : min(_600, 1.0));
    float _608 = _596 - ((_596 * TEXCOORD_8.x) * _601);
    float _609 = _596 - ((_596 * TEXCOORD_8.y) * _601);
    float _610 = _596 - ((_596 * TEXCOORD_8.z) * _601);
    float _617 = (_608 * ((_426.x * cbMtdParam._m0[18u].x) - _405)) + _405;
    float _618 = (_609 * ((_426.y * cbMtdParam._m0[18u].y) - _406)) + _406;
    float _619 = (_610 * ((_426.z * cbMtdParam._m0[18u].z) - _407)) + _407;
    vec4 _631 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _633 = _631.x;
    float _634 = 1.0 - _633;
    float _662 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_633 - _634) * cbMtdParam._m0[24u].w) + _634) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3881 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _671 = ((((cbMtdParam._m0[10u].x - _617) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _663) + _617;
    float _672 = ((((cbMtdParam._m0[10u].y - _618) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _663) + _618;
    float _673 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _619)) * _663) + _619;
    vec4 _699 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _701 = _699.x;
    float _719 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _701) * _398) + _701;
    float _723 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _719) * cbMtdParam._m0[19u].z) + _719;
    float _725 = _723 - (_723 * _608);
    float _727 = _725 - (_725 * _663);
    float _732 = (((_446.z - _503) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _503;
    float _736 = ((_533.z - _732) * cbMtdParam._m0[19u].w) + _732;
    vec4 _750 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _757 = (_750.x * 2.0) + (-1.0);
    float _758 = (_750.y * 2.0) + (-1.0);
    float _759 = dot(vec2(_757, _758), vec2(_757, _758));
    float _3892 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _767 = ((_750.z - _736) * _608) + _736;
    float _770 = ((cbMtdParam._m0[23u].y - _767) * _663) + _767;
    vec4 _789 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _795 = (_789.x * 2.0) + (-1.0);
    float _796 = (_789.y * 2.0) + (-1.0);
    float _797 = dot(vec2(_795, _796), vec2(_795, _796));
    float _3903 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _812 = ((sqrt(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) - _513) * _610) + _513;
    float _815 = (((_757 - _545) * _608) + _545) + (cbMtdParam._m0[21u].x * _545);
    float _816 = (((_758 - _546) * _609) + _546) + (cbMtdParam._m0[21u].x * _546);
    float _827 = (((_795 - _815) + (_815 * cbMtdParam._m0[22u].z)) * _663) + _815;
    float _828 = (((_796 - _816) + (_816 * cbMtdParam._m0[22u].z)) * _663) + _816;
    float _829 = (_663 * (sqrt(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) - _812)) + _812;
    float _831 = cbMtdParam._m0[22u].x + _533.w;
    float _834 = fma(_829, _249, fma(_828, _256, _827 * _242));
    float _837 = fma(_829, _250, fma(_828, _257, _827 * _243));
    float _840 = fma(_829, _251, fma(_828, _258, _827 * _244));
    float _844 = inversesqrt(dot(vec3(_834, _837, _840), vec3(_834, _837, _840)));
    float _845 = _844 * _834;
    float _846 = _844 * _837;
    float _847 = _844 * _840;
    float _3914 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _848 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _3936 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3947 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3958 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3969 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _853 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _867 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _917 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _907);
    float _918 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _907);
    float _919 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _907);
    float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
    float _924 = _917 * _923;
    float _925 = _918 * _923;
    float _926 = _919 * _923;
    vec4 _931 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _933 = _931.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1105 = sqrt(((_917 * _917) + (_918 * _918)) + (_919 * _919));
        float _1111 = (cbMatDynParam._m0[5u].x * _1105) + cbMatDynParam._m0[5u].y;
        float _3980 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1116 = (cbMatDynParam._m0[5u].z * _1105) + cbMatDynParam._m0[5u].w;
        float _3991 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) - _1112)) + _1112) < ((_933 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _944 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _945 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _963 = fma(_847, cbSceneParam._m0[5u].z, fma(_846, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _845));
    float _966 = fma(_847, cbSceneParam._m0[6u].z, fma(_846, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _845));
    float _969 = fma(_847, cbSceneParam._m0[7u].z, fma(_846, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _845));
    uint _982 = _261 + 9u;
    uint _983 = _982 + uint(cbMatDynParam._m0[0u].w);
    float _989 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_983].x;
    float _990 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * cbInstanceData._m0[_983].y;
    float _991 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * cbInstanceData._m0[_983].z;
    float _4002 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _4024 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _995 = 1.0 - _853;
    float _996 = _992 * _995;
    float _997 = _993 * _995;
    float _998 = _994 * _995;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _853;
    float _1004 = (_993 + (-0.039999999105930328369140625)) * _853;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _853;
    float _1006 = _1003 + 0.039999999105930328369140625;
    float _1008 = _1004 + 0.039999999105930328369140625;
    float _1009 = _1005 + 0.039999999105930328369140625;
    vec4 _1018 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _944, cbSceneParam._m0[86u].y * _945));
    float _1022 = ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * TEXCOORD_5.w) * _1018.x;
    float _1023 = dot(vec3(_845, _846, _847), vec3(_924, _925, _926));
    float _1026 = _1023 * 2.0;
    float _1030 = (_1026 * _845) - _924;
    float _1031 = (_1026 * _846) - _925;
    float _1032 = (_1026 * _847) - _926;
    float _1036 = abs(dot(vec3(_924, _925, _926), vec3(_845, _846, _847)));
    float _4035 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1038 = sqrt(_848);
    float _1051 = exp2((_1038 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1038 * 3.0));
    float _1057 = (1.0 - _1051) * ((_1038 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1058 = _1051 * _1038;
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1423;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1148 = fma(_1094, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1086));
        float _1152 = fma(_1094, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1086));
        float _1156 = fma(_1094, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1086));
        float _1181 = _1086 + _845;
        float _1182 = _1090 + _846;
        float _1183 = _1094 + _847;
        float _1193 = fma(_1183, cbModelParam._m0[26u].z, fma(_1182, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1181)) - _1148;
        float _1194 = fma(_1183, cbModelParam._m0[27u].z, fma(_1182, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1181)) - _1152;
        float _1195 = fma(_1183, cbModelParam._m0[28u].z, fma(_1182, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1181)) - _1156;
        float _1199 = inversesqrt(dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195)));
        float _1212 = ((_1199 * _1193) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1148 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1199 * _1194) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1152 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1199 * _1195) / cbModelParam._m0[34u].z) + ((((((_1156 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        float _1251 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1217.x + (-0.5));
        float _1253 = _1251 * (_1217.y + (-0.5));
        float _1254 = _1251 * (_1217.z + (-0.5));
        float _1261 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1224.x + (-0.5));
        float _1263 = _1261 * (_1224.y + (-0.5));
        float _1264 = _1261 * (_1224.z + (-0.5));
        float _1271 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1231.x + (-0.5));
        float _1273 = _1271 * (_1231.y + (-0.5));
        float _1274 = _1271 * (_1231.z + (-0.5));
        float _1281 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1238.x + (-0.5));
        float _1283 = _1281 * (_1238.y + (-0.5));
        float _1284 = _1281 * (_1238.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1305 = (dot(vec3(_845, _846, _847), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1315 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4083 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1317 + 1.0))) + _1322) * _1285;
        float _1332 = _1253 * 0.5;
        float _1333 = _1263 * 0.5;
        float _1334 = _1273 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_845, _846, _847), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4116 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1359 + 1.0))) + _1364) * _1286;
        float _1374 = _1254 * 0.5;
        float _1375 = _1264 * 0.5;
        float _1376 = _1274 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_845, _846, _847), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4149 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1401 + 1.0))) + _1406) * _1287;
        _1423 = _1254;
        _1425 = _1253;
        _1426 = _1252;
        _1427 = _1264;
        _1428 = _1263;
        _1429 = _1262;
        _1430 = _1274;
        _1431 = _1273;
        _1432 = _1272;
        _1433 = _1287;
        _1434 = _1286;
        _1435 = _1285;
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
    }
    else
    {
        _1423 = _1424;
        _1425 = _1424;
        _1426 = _1424;
        _1427 = _1424;
        _1428 = _1424;
        _1429 = _1424;
        _1430 = _1424;
        _1431 = _1424;
        _1432 = _1424;
        _1433 = _1424;
        _1434 = _1424;
        _1435 = _1424;
        _1436 = 0.0;
        _1437 = 0.0;
        _1438 = 0.0;
    }
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1466 = fma(_1094, cbModelParam._m0[30u].z, fma(_1090, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1086));
        float _1470 = fma(_1094, cbModelParam._m0[31u].z, fma(_1090, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1086));
        float _1474 = fma(_1094, cbModelParam._m0[32u].z, fma(_1090, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1086));
        float _1497 = _1086 + _845;
        float _1498 = _1090 + _846;
        float _1499 = _1094 + _847;
        float _1509 = fma(_1499, cbModelParam._m0[30u].z, fma(_1498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1497)) - _1466;
        float _1510 = fma(_1499, cbModelParam._m0[31u].z, fma(_1498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1497)) - _1470;
        float _1511 = fma(_1499, cbModelParam._m0[32u].z, fma(_1498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1497)) - _1474;
        float _1515 = inversesqrt(dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511)));
        float _1528 = ((_1515 * _1509) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1466 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1515 * _1510) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1470 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1515 * _1511) / cbModelParam._m0[35u].z) + ((((((_1474 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        float _1565 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1532.x + (-0.5));
        float _1567 = _1565 * (_1532.y + (-0.5));
        float _1568 = _1565 * (_1532.z + (-0.5));
        float _1575 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1539.x + (-0.5));
        float _1577 = _1575 * (_1539.y + (-0.5));
        float _1578 = _1575 * (_1539.z + (-0.5));
        float _1585 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1546.x + (-0.5));
        float _1587 = _1585 * (_1546.y + (-0.5));
        float _1588 = _1585 * (_1546.z + (-0.5));
        float _1595 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1553.x + (-0.5));
        float _1597 = _1595 * (_1553.y + (-0.5));
        float _1598 = _1595 * (_1553.z + (-0.5));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = _1566 * 0.5;
        float _1603 = _1576 * 0.5;
        float _1604 = _1586 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_845, _846, _847), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4212 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1629 + 1.0))) + _1634) * _1599;
        float _1644 = _1567 * 0.5;
        float _1645 = _1577 * 0.5;
        float _1646 = _1587 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_845, _846, _847), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4245 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1671 + 1.0))) + _1676) * _1600;
        float _1686 = _1568 * 0.5;
        float _1687 = _1578 * 0.5;
        float _1688 = _1588 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_845, _846, _847), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4278 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1713 + 1.0))) + _1718) * _1601;
        _1735 = _1568;
        _1736 = _1567;
        _1737 = _1566;
        _1738 = _1578;
        _1739 = _1577;
        _1740 = _1576;
        _1741 = _1588;
        _1742 = _1587;
        _1743 = _1586;
        _1744 = _1601;
        _1745 = _1600;
        _1746 = _1599;
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
    }
    else
    {
        _1735 = _1424;
        _1736 = _1424;
        _1737 = _1424;
        _1738 = _1424;
        _1739 = _1424;
        _1740 = _1424;
        _1741 = _1424;
        _1742 = _1424;
        _1743 = _1424;
        _1744 = _1424;
        _1745 = _1424;
        _1746 = _1424;
        _1747 = 0.0;
        _1748 = 0.0;
        _1749 = 0.0;
    }
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1436)) + _1436;
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1437)) + _1437;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1438)) + _1438;
    float _1782 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1759));
    float _1803 = _1030 * 0.5;
    float _1804 = _1031 * 0.5;
    float _1805 = _1032 * 0.5;
    float _1806 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1809 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1812 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1846;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1819 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1423, _1427, _1430, _1433));
        float _1823 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1425, _1428, _1431, _1434));
        float _1827 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1426, _1429, _1432, _1435));
        float _1834 = dot(vec4(cbModelParam._m0[39u]), vec4(_1803, _1804, _1805, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1857;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1848 = dot(vec4(cbModelParam._m0[40u]), vec4(_1803, _1804, _1805, 1.0));
        _1857 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1848) ? 0.0 : (isnan(0.0) ? _1848 : max(0.0, _1848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1857 = 1.0;
    }
    float _1861 = (_1857 * cbModelParam._m0[1u].x) + (_1846 * (1.0 - cbModelParam._m0[1u].x));
    float _1871 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _848);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1871 : min(cbModelParam._m0[25u].z, _1871));
    float _1952;
    float _1954;
    float _1956;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1919 = fma(_1094, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1086)) + cbModelParam._m0[13u].w;
        float _1923 = fma(_1094, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1086)) + cbModelParam._m0[14u].w;
        float _1927 = fma(_1094, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1086)) + cbModelParam._m0[15u].w;
        float _1930 = fma(_1032, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030));
        float _1933 = fma(_1032, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030));
        float _1936 = fma(_1032, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030));
        float _1964;
        if (_1930 > 0.0)
        {
            _1964 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1964 = frontier_phi_17_15_ladder;
        }
        float _2187;
        if (_1933 > 0.0)
        {
            _2187 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2187 = frontier_phi_26_22_ladder;
        }
        float _2444;
        if (_1936 > 0.0)
        {
            _2444 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2444 = frontier_phi_38_33_ladder;
        }
        float _2446 = isnan(_2187) ? _1964 : (isnan(_1964) ? _2187 : min(_1964, _2187));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1930) + _1919;
        float _2452 = (_2447 * _1933) + _1923;
        float _2453 = (_2447 * _1936) + _1927;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2456 = (-1.0) - _2454;
        float _2458 = _2454 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2453 > _2458) || ((_2453 < _2456) || ((_2452 > _2458) || ((_2452 < _2456) || ((_2451 < _2456) || (_2451 > _2458))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2453, cbModelParam._m0[9u].z, fma(_2452, cbModelParam._m0[9u].y, _2451 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2453, cbModelParam._m0[10u].z, fma(_2452, cbModelParam._m0[10u].y, _2451 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2453, cbModelParam._m0[11u].z, fma(_2452, cbModelParam._m0[11u].y, _2451 * cbModelParam._m0[11u].x))), _1872);
            frontier_phi_16_38_ladder = _2581.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2581.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2581.x * cbModelParam._m0[1u].y;
        }
        _1952 = frontier_phi_16_38_ladder_2;
        _1954 = frontier_phi_16_38_ladder_1;
        _1956 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1030, _1031, _1032), _1872);
        _1952 = _1940.x * cbModelParam._m0[1u].y;
        _1954 = _1940.y * cbModelParam._m0[1u].y;
        _1956 = _1940.z * cbModelParam._m0[1u].y;
    }
    float _1960 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _848);
    float _1961 = isnan(_1960) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1960 : min(cbModelParam._m0[25u].w, _1960));
    float _2050;
    float _2052;
    float _2054;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2014 = fma(_1094, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1086)) + cbModelParam._m0[21u].w;
        float _2018 = fma(_1094, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1086)) + cbModelParam._m0[22u].w;
        float _2022 = fma(_1094, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1086)) + cbModelParam._m0[23u].w;
        float _2025 = fma(_1032, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030));
        float _2028 = fma(_1032, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030));
        float _2031 = fma(_1032, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030));
        float _2192;
        if (_2025 > 0.0)
        {
            _2192 = abs((1.0 - _2014) / _2025);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2014 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2192 = frontier_phi_28_24_ladder;
        }
        float _2471;
        if (_2028 > 0.0)
        {
            _2471 = abs((1.0 - _2018) / _2028);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2018 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2471 = frontier_phi_40_35_ladder;
        }
        float _2684;
        if (_2031 > 0.0)
        {
            _2684 = abs((1.0 - _2022) / _2031);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2022 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2684 = frontier_phi_49_46_ladder;
        }
        float _2686 = isnan(_2471) ? _2192 : (isnan(_2192) ? _2471 : min(_2192, _2471));
        float _2687 = isnan(_2684) ? _2686 : (isnan(_2686) ? _2684 : min(_2686, _2684));
        float _2691 = (_2687 * _2025) + _2014;
        float _2692 = (_2687 * _2028) + _2018;
        float _2693 = (_2687 * _2031) + _2022;
        float _2694 = _2687 * 9.9999997473787516355514526367188e-05;
        float _2695 = (-1.0) - _2694;
        float _2697 = _2694 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2693 > _2697) || ((_2693 < _2695) || ((_2692 > _2697) || ((_2692 < _2695) || ((_2691 < _2695) || (_2691 > _2697))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2693, cbModelParam._m0[17u].z, fma(_2692, cbModelParam._m0[17u].y, _2691 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2693, cbModelParam._m0[18u].z, fma(_2692, cbModelParam._m0[18u].y, _2691 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2693, cbModelParam._m0[19u].z, fma(_2692, cbModelParam._m0[19u].y, _2691 * cbModelParam._m0[19u].x))), _1961);
            frontier_phi_25_49_ladder = _2892.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2892.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2892.x * cbModelParam._m0[1u].z;
        }
        _2050 = frontier_phi_25_49_ladder_2;
        _2052 = frontier_phi_25_49_ladder_1;
        _2054 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2034 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1030, _1031, _1032), _1961);
        _2050 = _2034.x * cbModelParam._m0[1u].z;
        _2052 = _2034.y * cbModelParam._m0[1u].z;
        _2054 = _2034.z * cbModelParam._m0[1u].z;
    }
    float _2067 = (((_1057 * _1006) + _1058) * _1022) * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2069 = (((_1057 * _1008) + _1058) * _1022) * ((cbModelParam._m0[1u].w * (_2052 - _1954)) + _1954);
    float _2071 = (((_1057 * _1009) + _1058) * _1022) * ((cbModelParam._m0[1u].w * (_2054 - _1956)) + _1956);
    float _2074 = fma(_2071, cbSceneParam._m0[89u].z, fma(_2069, cbSceneParam._m0[89u].y, _2067 * cbSceneParam._m0[89u].x));
    float _2077 = fma(_2071, cbSceneParam._m0[90u].z, fma(_2069, cbSceneParam._m0[90u].y, _2067 * cbSceneParam._m0[90u].x));
    float _2080 = fma(_2071, cbSceneParam._m0[91u].z, fma(_2069, cbSceneParam._m0[91u].y, _2067 * cbSceneParam._m0[91u].x));
    vec4 _2088 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_944, _945));
    float _2090 = _2088.w;
    float _2102 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2090);
    float _2103 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2090);
    float _2104 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2090);
    uvec4 _2108 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2110 = _2108.x * 14u;
    uint _2111 = _2110 + 13u;
    float _2118 = _1022 + (-1.0);
    float _2123 = (cbLight._m0[_2111].x * _2118) + 1.0;
    float _2124 = (cbLight._m0[_2111].y * _2118) + 1.0;
    float _2125 = (cbLight._m0[_2111].z * _2118) + 1.0;
    float _2126 = (cbLight._m0[_2111].w * _2118) + 1.0;
    uint _2127 = _2110 + 5u;
    float _2133 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    uint _2137 = _2110 + 4u;
    float _2146 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
    uint _2150 = _2110 | 1u;
    float _2161 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_845, _846, _847));
    float _2164 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_845, _846, _847));
    float _4414 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _4425 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2169 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * 0.3183098733425140380859375;
    float _2171 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * 0.3183098733425140380859375;
    float _2178 = ((cbLight._m0[_2127].x * _2133) * _2171) + (((cbLight._m0[_2137].x * _2102) * _2146) * _2169);
    float _2179 = ((_2133 * cbLight._m0[_2127].y) * _2171) + (((cbLight._m0[_2137].y * _2103) * _2146) * _2169);
    float _2180 = ((_2133 * cbLight._m0[_2127].z) * _2171) + (((cbLight._m0[_2137].z * _2104) * _2146) * _2169);
    uvec4 _2184 = floatBitsToUint(cbLight._m0[_2110 + 12u]);
    bool _2186 = _2184.x == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2186)
    {
        _2197 = _2178;
        _2199 = _2179;
        _2201 = _2180;
    }
    else
    {
        uint _2205 = _2110 + 6u;
        float _2221 = (dot(vec3(cbLight._m0[_2110 + 2u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2222 = _2221 * _2221;
        float _4436 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2223 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2224 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2197 = (((cbLight._m0[_2205].x * 0.3183098733425140380859375) * _2223) * _2224) + _2178;
        _2199 = (((cbLight._m0[_2205].y * 0.3183098733425140380859375) * _2223) * _2224) + _2179;
        _2201 = (((cbLight._m0[_2205].z * 0.3183098733425140380859375) * _2223) * _2224) + _2180;
    }
    bool _2204 = _2184.y == 0u;
    float _2242;
    float _2244;
    float _2246;
    if (_2204)
    {
        _2242 = _2197;
        _2244 = _2199;
        _2246 = _2201;
    }
    else
    {
        uint _2415 = _2110 + 7u;
        float _2431 = (dot(vec3(cbLight._m0[_2110 + 3u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4452 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2434 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2242 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2197;
        _2244 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2199;
        _2246 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2201;
    }
    uint _2249 = _2110 + 8u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _848) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2110].x + _924;
    float _2265 = cbLight._m0[_2110].y + _925;
    float _2266 = cbLight._m0[_2110].z + _926;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2110].xyz));
    float _4468 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _4479 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _2278 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2279 = dot(vec3(_845, _846, _847), vec3(_2271, _2272, _2273));
    float _4490 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2271, _2272, _2273));
    float _4501 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2263 * _2263;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0);
    float _2300 = 0.959999978542327880859375 - _1003;
    float _2302 = 0.959999978542327880859375 - _1004;
    float _2303 = 0.959999978542327880859375 - _1005;
    float _2310 = 1.0 - _2263;
    float _2321 = (0.5 / (((_2278 * ((_2277 * _2310) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2310) + _2263) * _2277))) * _2277;
    float _4512 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    uint _2337 = _2110 + 9u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _848) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2150].x + _924;
    float _2351 = cbLight._m0[_2150].y + _925;
    float _2352 = cbLight._m0[_2150].z + _926;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2150].xyz));
    float _4523 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2364 = dot(vec3(_845, _846, _847), vec3(_2357, _2358, _2359));
    float _4534 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2357, _2358, _2359));
    float _4545 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2349 * _2349;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
    float _2390 = 1.0 - _2349;
    float _2400 = (0.5 / (((_2278 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2390) + _2349) * _2363))) * _2363;
    float _4556 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    float _2412 = (((((_2383 * _2300) + _1006) * cbLight._m0[_2337].x) * _2402) * _2133) + ((((cbLight._m0[_2249].x * _2102) * ((_2299 * _2300) + _1006)) * _2323) * _2146);
    float _2413 = (((((_2383 * _2302) + _1008) * cbLight._m0[_2337].y) * _2402) * _2133) + ((((cbLight._m0[_2249].y * _2103) * ((_2299 * _2302) + _1008)) * _2323) * _2146);
    float _2414 = (((((_2383 * _2303) + _1009) * cbLight._m0[_2337].z) * _2402) * _2133) + ((((cbLight._m0[_2249].z * _2104) * ((_2299 * _2303) + _1009)) * _2323) * _2146);
    float _2476;
    float _2478;
    float _2480;
    if (_2186)
    {
        _2476 = _2412;
        _2478 = _2413;
        _2480 = _2414;
    }
    else
    {
        uint _2482 = _2110 + 2u;
        uint _2486 = _2110 + 10u;
        float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _848) * 0.949999988079071044921875);
        float _2501 = _2500 * _2500;
        float _2502 = cbLight._m0[_2482].x + _924;
        float _2503 = cbLight._m0[_2482].y + _925;
        float _2504 = cbLight._m0[_2482].z + _926;
        float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
        float _2509 = _2508 * _2502;
        float _2510 = _2508 * _2503;
        float _2511 = _2508 * _2504;
        float _2512 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2482].xyz));
        float _4567 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2516 = dot(vec3(_845, _846, _847), vec3(_2509, _2510, _2511));
        float _4578 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2520 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2509, _2510, _2511));
        float _4589 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2524 = _2501 * _2501;
        float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
        float _2535 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
        float _2542 = 1.0 - _2501;
        float _2552 = (0.5 / (((_2278 * ((_2515 * _2542) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2542) + _2501) * _2515))) * _2515;
        float _4600 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2554 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
        float _2555 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2476 = (((((_2535 * _2300) + _1006) * cbLight._m0[_2486].x) * _2554) * _2555) + _2412;
        _2478 = (((((_2535 * _2302) + _1008) * cbLight._m0[_2486].y) * _2554) * _2555) + _2413;
        _2480 = (((((_2535 * _2303) + _1009) * cbLight._m0[_2486].z) * _2554) * _2555) + _2414;
    }
    float _2590;
    float _2592;
    float _2594;
    if (_2204)
    {
        _2590 = _2476;
        _2592 = _2478;
        _2594 = _2480;
    }
    else
    {
        uint _2601 = _2110 + 3u;
        uint _2605 = _2110 + 11u;
        float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2601].w)) * _848) * 0.949999988079071044921875);
        float _2620 = _2619 * _2619;
        float _2621 = cbLight._m0[_2601].x + _924;
        float _2622 = cbLight._m0[_2601].y + _925;
        float _2623 = cbLight._m0[_2601].z + _926;
        float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
        float _2628 = _2627 * _2621;
        float _2629 = _2627 * _2622;
        float _2630 = _2627 * _2623;
        float _2631 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2601].xyz));
        float _4616 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2635 = dot(vec3(_845, _846, _847), vec3(_2628, _2629, _2630));
        float _4627 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2639 = dot(vec3(cbLight._m0[_2601].xyz), vec3(_2628, _2629, _2630));
        float _4638 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2643 = _2620 * _2620;
        float _2647 = ((_2638 * _2638) * (_2643 + (-1.0))) + 1.0;
        float _2654 = exp2(log2(1.0 - (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) * 5.0);
        float _2661 = 1.0 - _2620;
        float _2671 = (0.5 / (((_2278 * ((_2634 * _2661) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2661) + _2620) * _2634))) * _2634;
        float _4649 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2673 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2643 / ((_2647 * _2647) * 3.141590118408203125));
        float _2674 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2590 = (((((_2654 * _2300) + _1006) * cbLight._m0[_2605].x) * _2673) * _2674) + _2476;
        _2592 = (((((_2654 * _2302) + _1008) * cbLight._m0[_2605].y) * _2673) * _2674) + _2478;
        _2594 = (((((_2654 * _2303) + _1009) * cbLight._m0[_2605].z) * _2673) * _2674) + _2480;
    }
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    if (_2108.y == 0u)
    {
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2749;
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2749;
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2749;
        uvec4 _2764 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2765 = _2764.x;
        uint _2776 = uint((float(_2764.y) * floor(float(uint(cbSceneParam._m0[85u].y * _945) / _2765))) + floor(float(uint(cbSceneParam._m0[85u].x * _944) / _2765)));
        float _2786 = (log2(_2752 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2787 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        uint _2790 = uint(isnan(14.0) ? _2787 : (isnan(_2787) ? 14.0 : min(_2787, 14.0)));
        uvec4 _2795 = texelFetch(g_lightClusterGridBuffer, int(((_2790 << 2u) + (_2776 << 6u)) >> 2u));
        uint _2796 = _2795.x;
        uint _2797 = _2764.z;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((((1u << ((_2797 >> 4u) & 15u)) + 4294967295u) & _2796) == 0u) || ((_2797 & 240u) == 0u))
        {
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
        }
        else
        {
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            uint _3055 = 0u;
            uint _3064;
            bool _3065;
            for (;;)
            {
                _3064 = texelFetch(g_lightClassification, int((((_2790 << 5u) + (_2776 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                _3065 = _3064 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3065)
                {
                    frontier_phi_66_pred = _3049;
                    frontier_phi_66_pred_1 = _3054;
                    frontier_phi_66_pred_2 = _3053;
                    frontier_phi_66_pred_3 = _3052;
                    frontier_phi_66_pred_4 = _3051;
                    frontier_phi_66_pred_5 = _3050;
                }
                else
                {
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    uint _3200;
                    _3194 = _3049;
                    _3195 = _3050;
                    _3196 = _3051;
                    _3197 = _3052;
                    _3198 = _3053;
                    _3199 = _3054;
                    _3200 = _3064;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    for (;;)
                    {
                        uint _3204 = uint(findLSB(_3200)) + (_3055 << 5u);
                        uint _3201 = (_3200 + 4294967295u) & _3200;
                        uint _3206 = _3204 * 48u;
                        vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3226 = (_3204 * 48u) + 4u;
                        vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 3u)).x));
                        uint _3245 = (_3204 * 48u) + 8u;
                        vec3 _3256 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x));
                        float _3260 = _3220.x - _2750;
                        float _3261 = _3220.y - _2751;
                        float _3262 = _3220.z - _2752;
                        float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                        float _3266 = inversesqrt(_3263);
                        float _3267 = _3266 * _3260;
                        float _3268 = _3266 * _3261;
                        float _3269 = _3266 * _3262;
                        float _3270 = dot(vec3(_963, _966, _969), vec3(_3267, _3268, _3269));
                        float _3275 = 1.0 - (_3263 * _3220.w);
                        float _4675 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3276 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3277 = sqrt(_3263) * _3239.w;
                        float _3280 = 1.39999997615814208984375 / (_3277 + 1.39999997615814208984375);
                        float _3281 = _3280 * _3280;
                        float _3284 = ((1.0 - _3281) * _3270) + _3281;
                        float _3287 = _3277 * _3277;
                        float _3291 = ((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3276) / ((_3287 * 0.699999988079071044921875) + 1.0);
                        float _3295 = (-0.0) - _2750;
                        float _3296 = (-0.0) - _2751;
                        float _3297 = (-0.0) - _2752;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3312 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                        float _3313 = 1.0 - _1038;
                        float _3320 = sqrt(1.0 - ((1.0 - (_3313 * _3313)) * (1.0 - (_3312 * _3312))));
                        float _3321 = _3320 * _3320;
                        float _3322 = _3321 * _3321;
                        float _3323 = _3302 + _3267;
                        float _3324 = _3303 + _3268;
                        float _3325 = _3304 + _3269;
                        float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                        float _3333 = dot(vec3(_963, _966, _969), vec3(_3302, _3303, _3304));
                        float _4691 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3336 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3337 = dot(vec3(_963, _966, _969), vec3(_3329 * _3323, _3329 * _3324, _3329 * _3325));
                        float _4702 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3340 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3344 = ((_3340 * _3340) * (_3322 + (-1.0))) + 1.0;
                        float _3345 = _3280 * _3321;
                        float _3346 = _3345 * _3345;
                        float _3349 = ((1.0 - _3346) * _3270) + _3346;
                        float _4713 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3350 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3351 = 1.0 - _3321;
                        float _3361 = (0.5 / (((_3350 * ((_3336 * _3351) + _3321)) + 9.9999999392252902907785028219223e-09) + (((_3350 * _3351) + _3321) * _3336))) * _3350;
                        float _4724 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3372 = (((_3322 * 3.1415927410125732421875) * (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) / ((_3344 * _3344) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125))) * _3276;
                        _3124 = (_3291 * _3239.x) + _3197;
                        _3125 = (_3291 * _3239.y) + _3198;
                        _3126 = (_3291 * _3239.z) + _3199;
                        _3121 = (_3372 * _3256.x) + _3194;
                        _3122 = (_3372 * _3256.y) + _3195;
                        _3123 = (_3372 * _3256.z) + _3196;
                        if (_3201 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3194 = _3121;
                            _3195 = _3122;
                            _3196 = _3123;
                            _3197 = _3124;
                            _3198 = _3125;
                            _3199 = _3126;
                            _3200 = _3201;
                        }
                    }
                    frontier_phi_66_pred = _3121;
                    frontier_phi_66_pred_1 = _3126;
                    frontier_phi_66_pred_2 = _3125;
                    frontier_phi_66_pred_3 = _3124;
                    frontier_phi_66_pred_4 = _3123;
                    frontier_phi_66_pred_5 = _3122;
                }
                _2898 = frontier_phi_66_pred;
                _2908 = frontier_phi_66_pred_1;
                _2906 = frontier_phi_66_pred_2;
                _2904 = frontier_phi_66_pred_3;
                _2902 = frontier_phi_66_pred_4;
                _2900 = frontier_phi_66_pred_5;
                uint _3056 = _3055 + 1u;
                if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3049 = _2898;
                    _3050 = _2900;
                    _3051 = _2902;
                    _3052 = _2904;
                    _3053 = _2906;
                    _3054 = _2908;
                    _3055 = _3056;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
        }
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.z;
        uint _2914 = (_2912 >> 8u) & 15u;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        if (((4294967295u << _2914) & _2796) == 0u)
        {
            _3017 = _2897;
            _3019 = _2899;
            _3021 = _2901;
            _3023 = _2903;
            _3025 = _2905;
            _3027 = _2907;
        }
        else
        {
            float _3042 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
            float _3043 = _3042 * _2750;
            float _3044 = _3042 * _2751;
            float _3045 = _3042 * _2752;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2914 < ((_2912 >> 12u) & 15u))
            {
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3177 = _2897;
                float _3178 = _2899;
                float _3179 = _2901;
                float _3180 = _2903;
                float _3181 = _2905;
                float _3182 = _2907;
                uint _3183 = _2914;
                uint _3192;
                bool _3193;
                for (;;)
                {
                    _3192 = texelFetch(g_lightClassification, int((((_2790 << 5u) + (_2776 << 9u)) + (_3183 << 2u)) >> 2u)).x;
                    _3193 = _3192 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3193)
                    {
                        frontier_phi_77_pred = _3182;
                        frontier_phi_77_pred_1 = _3181;
                        frontier_phi_77_pred_2 = _3180;
                        frontier_phi_77_pred_3 = _3179;
                        frontier_phi_77_pred_4 = _3178;
                        frontier_phi_77_pred_5 = _3177;
                    }
                    else
                    {
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3399 = _3177;
                        float _3400 = _3178;
                        float _3401 = _3179;
                        float _3402 = _3180;
                        float _3403 = _3181;
                        float _3404 = _3182;
                        uint _3405 = _3192;
                        uint _3406;
                        vec4 _3431;
                        float _3432;
                        vec4 _3447;
                        vec3 _3459;
                        vec4 _3474;
                        vec4 _3489;
                        float _3535;
                        bool _3536;
                        for (;;)
                        {
                            uint _3416 = ((_3183 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3405));
                            _3406 = (_3405 + 4294967295u) & _3405;
                            uint _3418 = _3416 * 40u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            _3432 = _3431.w;
                            uint _3434 = (_3416 * 40u) + 4u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3416 * 40u) + 8u;
                            _3459 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x));
                            uint _3461 = (_3416 * 40u) + 16u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3476 = (_3416 * 40u) + 20u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3491 = (_3416 * 40u) + 24u;
                            vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3510 = (_3416 * 40u) + 28u;
                            vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            _3535 = fma(_2752, _3523.z, fma(_2751, _3523.y, _3523.x * _2750)) + _3523.w;
                            _3536 = !((fma(_2752, _3504.z, fma(_2751, _3504.y, _3504.x * _2750)) + _3504.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3536)
                            {
                                float _3563 = _3431.x - _2750;
                                float _3564 = _3431.y - _2751;
                                float _3565 = _3431.z - _2752;
                                float _3566 = dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565));
                                float _3569 = inversesqrt(_3566);
                                float _3570 = _3569 * _3563;
                                float _3571 = _3569 * _3564;
                                float _3572 = _3569 * _3565;
                                float _3576 = 1.0 - (_3566 / (_3432 * _3432));
                                float _4735 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3581 = sqrt(_3566) * _3447.w;
                                float _3583 = 1.39999997615814208984375 / (_3581 + 1.39999997615814208984375);
                                float _3584 = _3583 * _3583;
                                float _3587 = ((1.0 - _3584) * dot(vec3(_3570, _3571, _3572), vec3(_963, _966, _969))) + _3584;
                                float _3590 = _3581 * _3581;
                                float _3594 = (fma(_2752, _3474.z, fma(_2751, _3474.y, _3474.x * _2750)) + _3474.w) / _3535;
                                float _3595 = (fma(_2752, _3489.z, fma(_2751, _3489.y, _3489.x * _2750)) + _3489.w) / _3535;
                                float _3599 = 1.0 - dot(vec2(_3594, _3595), vec2(_3594, _3595));
                                float _4751 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3601 = _3600 * (((isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0))) * _3577) / ((_3590 * 0.699999988079071044921875) + 1.0));
                                float _3613 = exp2(log2(1.0 / ((_3590 * 3.5) + 5.0)) * 0.25);
                                float _3614 = 1.0 - _1038;
                                float _3621 = sqrt(1.0 - ((1.0 - (_3614 * _3614)) * (1.0 - (_3613 * _3613))));
                                float _3622 = _3621 * _3621;
                                float _3623 = _3622 * _3622;
                                float _3624 = _3570 - _3043;
                                float _3625 = _3571 - _3044;
                                float _3626 = _3572 - _3045;
                                float _3630 = inversesqrt(dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626)));
                                float _3634 = dot(vec3(_963, _966, _969), vec3((-0.0) - _3043, (-0.0) - _3044, (-0.0) - _3045));
                                float _4762 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3637 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3638 = dot(vec3(_963, _966, _969), vec3(_3630 * _3624, _3630 * _3625, _3630 * _3626));
                                float _4773 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3641 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3645 = ((_3641 * _3641) * (_3623 + (-1.0))) + 1.0;
                                float _3646 = _3583 * _3622;
                                float _3647 = _3646 * _3646;
                                float _3653 = ((1.0 - _3647) * dot(vec3(_963, _966, _969), vec3(_3570, _3571, _3572))) + _3647;
                                float _4784 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3655 = 1.0 - _3622;
                                float _3665 = (0.5 / (((_3654 * ((_3637 * _3655) + _3622)) + 9.9999999392252902907785028219223e-09) + (((_3654 * _3655) + _3622) * _3637))) * _3654;
                                float _4795 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3675 = (_3600 * _3577) * (((_3623 * 3.1415927410125732421875) * (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) / ((_3645 * _3645) * ((_3590 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3601 * _3447.y;
                                frontier_phi_83_pred_1 = _3601 * _3447.x;
                                frontier_phi_83_pred_2 = _3675 * _3459.z;
                                frontier_phi_83_pred_3 = _3675 * _3459.y;
                                frontier_phi_83_pred_4 = _3675 * _3459.x;
                                frontier_phi_83_pred_5 = _3601 * _3447.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3683 = frontier_phi_83_pred;
                            _3682 = frontier_phi_83_pred_1;
                            _3681 = frontier_phi_83_pred_2;
                            _3680 = frontier_phi_83_pred_3;
                            _3679 = frontier_phi_83_pred_4;
                            _3684 = frontier_phi_83_pred_5;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            _3391 = _3684 + _3404;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            _3388 = _3681 + _3401;
                            if (_3406 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3406;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3391;
                        frontier_phi_77_pred_1 = _3390;
                        frontier_phi_77_pred_2 = _3389;
                        frontier_phi_77_pred_3 = _3388;
                        frontier_phi_77_pred_4 = _3387;
                        frontier_phi_77_pred_5 = _3386;
                    }
                    _3028 = frontier_phi_77_pred;
                    _3026 = frontier_phi_77_pred_1;
                    _3024 = frontier_phi_77_pred_2;
                    _3022 = frontier_phi_77_pred_3;
                    _3020 = frontier_phi_77_pred_4;
                    _3018 = frontier_phi_77_pred_5;
                    uint _3184 = _3183 + 1u;
                    if (_3184 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3177 = _3018;
                        _3178 = _3020;
                        _3179 = _3022;
                        _3180 = _3024;
                        _3181 = _3026;
                        _3182 = _3028;
                        _3183 = _3184;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3022;
                frontier_phi_58_59_ladder_1 = _3028;
                frontier_phi_58_59_ladder_2 = _3026;
                frontier_phi_58_59_ladder_3 = _3024;
                frontier_phi_58_59_ladder_4 = _3020;
                frontier_phi_58_59_ladder_5 = _3018;
            }
            else
            {
                frontier_phi_58_59_ladder = _2901;
                frontier_phi_58_59_ladder_1 = _2907;
                frontier_phi_58_59_ladder_2 = _2905;
                frontier_phi_58_59_ladder_3 = _2903;
                frontier_phi_58_59_ladder_4 = _2899;
                frontier_phi_58_59_ladder_5 = _2897;
            }
            _3017 = frontier_phi_58_59_ladder_5;
            _3019 = frontier_phi_58_59_ladder_4;
            _3021 = frontier_phi_58_59_ladder;
            _3023 = frontier_phi_58_59_ladder_3;
            _3025 = frontier_phi_58_59_ladder_2;
            _3027 = frontier_phi_58_59_ladder_1;
        }
        float _3032 = isnan(1.0) ? _1022 : (isnan(_1022) ? 1.0 : min(_1022, 1.0));
        _2809 = (_3032 * _3023) + _2242;
        _2811 = (_3032 * _3025) + _2244;
        _2813 = (_3032 * _3027) + _2246;
        _2815 = ((_3017 * _1006) * _3032) + _2590;
        _2817 = ((_3019 * _1008) * _3032) + _2592;
        _2819 = ((_3021 * _1009) * _3032) + _2594;
    }
    else
    {
        _2809 = _2242;
        _2811 = _2244;
        _2813 = _2246;
        _2815 = _2590;
        _2817 = _2592;
        _2819 = _2594;
    }
    float _4811 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4822 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4833 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2836 = ((isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2809 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1022))) + ((_2815 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1861)) * cbPerFrame._m0[3u].x);
    float _2837 = ((isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2811 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1022))) + ((_2817 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1861)) * cbPerFrame._m0[3u].x);
    float _2838 = ((isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2813 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1022))) + ((_2819 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1861)) * cbPerFrame._m0[3u].x);
    uint _2839 = _261 + 6u;
    float _2847 = _944 / cbSceneParam._m0[86u].x;
    float _2848 = _945 / cbSceneParam._m0[86u].y;
    vec4 _2862 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, (log2((isnan(cbSceneParam._m0[77u].w) ? _867 : (isnan(_867) ? cbSceneParam._m0[77u].w : min(_867, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2864 = _2862.x;
    float _2865 = _2862.y;
    float _2866 = _2862.z;
    float _2867 = _2862.w;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_867 > cbSceneParam._m0[78u].w)
    {
        float _2922 = isnan(_867) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _867 : min(cbSceneParam._m0[80u].w, _867));
        float _2923 = _2922 / _867;
        float _2934 = _2923 * _917;
        float _2935 = _918 * _2923;
        float _2936 = (-0.0) - _2935;
        float _2937 = _2923 * _919;
        float _2939 = (cbSceneParam._m0[77u].w * _2936) / _2922;
        float _2940 = _2939 + cbSceneParam._m0[79u].w;
        float _2941 = cbSceneParam._m0[79u].w - _2935;
        float _2947 = sqrt(((_2934 * _2934) + (_2935 * _2935)) + (_2937 * _2937));
        float _2950 = (1.0 - (cbSceneParam._m0[77u].w / _2922)) * _2947;
        float _2955 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2957 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3134;
        if (abs((_2936 - _2939) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3134 = ((((_2940 > 0.0) ? exp2(_2955 * _2940) : (2.0 - exp2(_2957 * _2940))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2950;
        }
        else
        {
            float _3078 = 1.0 / cbSceneParam._m0[80u].x;
            float _3079 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : max(_2940, _2941));
            float _3080 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : min(_2940, _2941));
            float _3089 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : min(_3079, 0.0));
            float _3090 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : min(_3080, 0.0));
            _3134 = ((abs(_2947 / _2936) * cbSceneParam._m0[80u].y) * ((((_3089 - _3090) * 2.0) - ((exp2(_2955 * (isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0)))) - exp2(_2955 * (isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))))) * _3078)) - ((exp2(_2957 * _3089) - exp2(_2957 * _3090)) * _3078))) + (_2950 * cbSceneParam._m0[80u].z);
        }
        vec4 _3136 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, 1.0), 0.0);
        float _3145 = exp2((_3134 * (-1.44269502162933349609375)) * (1.0 - _3136.w));
        float _3146 = log2(_3145);
        float _3162 = log2(_2867);
        _2959 = (exp2(_3162 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].x)) * _3136.x) / cbSceneParam._m0[78u].x)) + _2864;
        _2961 = (exp2(_3162 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].y)) * _3136.y) / cbSceneParam._m0[78u].y)) + _2865;
        _2963 = (exp2(_3162 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].z)) * _3136.z) / cbSceneParam._m0[78u].z)) + _2866;
        _2965 = _3145 * _2867;
    }
    else
    {
        _2959 = _2864;
        _2961 = _2865;
        _2963 = _2866;
        _2965 = _2867;
    }
    bool _3172;
    vec4 _2975;
    vec4 _2997;
    float _2999;
    float _3003;
    float _3004;
    float _3005;
    float _3006;
    bool _3016;
    for (;;)
    {
        _2975 = cbMatDynParam._m0[0u];
        float _2977 = roundEven(_2975.y);
        bool _2978 = _2977 == 3.0;
        float _2979 = log2(_2965);
        float _2986 = exp2(_2979 * cbSceneParam._m0[78u].x) * _2836;
        float _2987 = exp2(_2979 * cbSceneParam._m0[78u].y) * _2837;
        float _2988 = exp2(_2979 * cbSceneParam._m0[78u].z) * _2838;
        float _2995 = _933 + (-0.5);
        _2997 = cbMtdParam._m0[1u];
        _2999 = _2997.y * _2995;
        float _3002 = (_2977 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3003 = _3002 * (_2978 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2959)));
        _3004 = _3002 * (_2978 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2961)));
        _3005 = _3002 * (_2978 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2963)));
        _3006 = _2995 * 0.999000012874603271484375;
        _3016 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3016)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3006) < 0.5)
            {
                _3172 = true;
                break;
            }
        }
        uint _3113 = _982 + uint(_2975.w);
        if ((cbInstanceData._m0[_3113].w < 1.0) && ((cbInstanceData._m0[_3113].w + _3006) < 0.5))
        {
            _3172 = true;
            break;
        }
        if ((_2999 + 1.0) < _2997.x)
        {
            _3172 = true;
            break;
        }
        _3172 = false;
        break;
    }
    float _3377;
    if (_3172)
    {
        discard_state = true;
        _3377 = 0.0;
    }
    else
    {
        _3377 = cbInstanceData._m0[_2839].w;
    }
    SV_Target.x = _3003;
    SV_Target.y = _3004;
    SV_Target.z = _3005;
    SV_Target.w = _3377;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2839].w;
    discard_exit();
}


