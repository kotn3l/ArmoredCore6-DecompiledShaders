#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1538;
float _4201;
float _4202;
float _4203;
float _4204;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4213 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4224 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4235 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _415 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _417 = _415.x;
    float _429 = dot(vec4(_417, _415.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _446 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_417 - _429) * cbMtdParam._m0[24u].y) + _429) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4246 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _454 = (_447 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _455 = (_447 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _456 = (_447 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _495 = _493.x;
    float _505 = dot(vec4(_495, _493.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _519 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_495 - _505) * cbMtdParam._m0[24u].y) + _505) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4257 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _527 = (_520 * ((_473.x * cbMtdParam._m0[13u].x) - _454)) + _454;
    float _528 = (_520 * ((_473.y * cbMtdParam._m0[13u].y) - _455)) + _455;
    float _529 = (_520 * ((_473.z * cbMtdParam._m0[13u].z) - _456)) + _456;
    float _533 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _527;
    float _536 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _528;
    float _539 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _529;
    float _546 = ((_527 - _533) * (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) + _533;
    float _547 = ((_528 - _536) * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) + _536;
    float _548 = ((_529 - _539) * (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) + _539;
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _607 = _605.x;
    float _608 = _605.y;
    float _609 = _605.z;
    float _616 = ((_588.x - _607) * _447) + _607;
    float _617 = ((_588.y - _608) * _447) + _608;
    float _618 = ((_588.z - _609) * _447) + _609;
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _643 = ((_630.z - _618) * _520) + _618;
    float _646 = ((((_630.x - _616) * _520) + _616) * 2.0) + (-1.0);
    float _647 = ((((_630.y - _617) * _520) + _617) * 2.0) + (-1.0);
    float _648 = dot(vec2(_646, _647), vec2(_646, _647));
    float _4268 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _653 = sqrt(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))));
    vec4 _666 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _684 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _686 = _684.x;
    float _687 = 1.0 - _686;
    float _693 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _696 = ((isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : min(_693, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _705 = (_696 - ((((((_686 - _687) * cbMtdParam._m0[24u].z) + _687) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _696))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4289 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _706 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _713 = (_706 * (cbMtdParam._m0[17u].x - _546)) + _546;
    float _714 = (_706 * (cbMtdParam._m0[17u].y - _547)) + _547;
    float _715 = (_706 * (cbMtdParam._m0[17u].z - _548)) + _548;
    vec4 _727 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _729 = _727.x;
    float _730 = 1.0 - _729;
    float _755 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_729 - _730) * cbMtdParam._m0[24u].w) + _730) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4300 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _756 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _764 = ((((cbMtdParam._m0[10u].x - _713) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _756) + _713;
    float _765 = ((((cbMtdParam._m0[10u].y - _714) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _756) + _714;
    float _766 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _715)) * _756) + _715;
    vec4 _792 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _794 = _792.x;
    float _812 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _794) * _447) + _794;
    float _829 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _812) * _520) + _812;
    float _833 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _829) * cbMtdParam._m0[19u].z) + _829;
    float _835 = _833 - (_833 * _706);
    float _837 = _835 - (_835 * _756);
    float _842 = (((_565.z - _643) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _643;
    vec4 _856 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _863 = (_856.x * 2.0) + (-1.0);
    float _864 = (_856.y * 2.0) + (-1.0);
    float _865 = dot(vec2(_863, _864), vec2(_863, _864));
    float _4311 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _873 = (_706 * (_856.z - _842)) + _842;
    float _876 = ((cbMtdParam._m0[23u].y - _873) * _756) + _873;
    vec4 _897 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _903 = (_897.x * 2.0) + (-1.0);
    float _904 = (_897.y * 2.0) + (-1.0);
    float _905 = dot(vec2(_903, _904), vec2(_903, _904));
    float _4322 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _915 = _646 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_565.x * 2.0) + (-1.0)));
    float _916 = _647 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_565.y * 2.0) + (-1.0)));
    float _928 = (((_863 - _915) + (cbMtdParam._m0[21u].x * _915)) * _706) + _915;
    float _929 = (((_864 - _916) + (cbMtdParam._m0[21u].x * _916)) * _706) + _916;
    float _930 = (_706 * (sqrt(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) - _653)) + _653;
    float _941 = (((_903 - _928) + (_928 * cbMtdParam._m0[22u].z)) * _756) + _928;
    float _942 = (((_904 - _929) + (_929 * cbMtdParam._m0[22u].z)) * _756) + _929;
    float _943 = ((sqrt(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) - _930) * _756) + _930;
    float _945 = cbMtdParam._m0[22u].x + _666.w;
    float _948 = fma(_943, _263 * NORMAL.x, fma(_942, _270 * TANGENT.x, (_256 * _248) * _941));
    float _951 = fma(_943, _263 * NORMAL.y, fma(_942, _270 * TANGENT.y, (_256 * _249) * _941));
    float _954 = fma(_943, _263 * NORMAL.z, fma(_942, _270 * TANGENT.z, (_256 * _250) * _941));
    float _958 = inversesqrt(dot(vec3(_948, _951, _954), vec3(_948, _951, _954)));
    float _959 = _958 * _948;
    float _960 = _958 * _951;
    float _961 = _958 * _954;
    float _4333 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _962 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _4344 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4355 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4366 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4377 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4388 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _967 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _981 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1031 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1021);
    float _1032 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1021);
    float _1033 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1021);
    float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
    float _1038 = _1031 * _1037;
    float _1039 = _1032 * _1037;
    float _1040 = _1033 * _1037;
    vec4 _1045 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1047 = _1045.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1219 = sqrt(((_1031 * _1031) + (_1032 * _1032)) + (_1033 * _1033));
        float _1225 = (cbMatDynParam._m0[5u].x * _1219) + cbMatDynParam._m0[5u].y;
        float _4399 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1230 = (cbMatDynParam._m0[5u].z * _1219) + cbMatDynParam._m0[5u].w;
        float _4410 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) - _1226)) + _1226) < ((_1047 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1058 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1059 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1077 = fma(_961, cbSceneParam._m0[5u].z, fma(_960, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _959));
    float _1080 = fma(_961, cbSceneParam._m0[6u].z, fma(_960, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _959));
    float _1083 = fma(_961, cbSceneParam._m0[7u].z, fma(_960, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _959));
    uint _1096 = _295 + 9u;
    uint _1097 = _1096 + uint(cbMatDynParam._m0[0u].w);
    float _1103 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * cbInstanceData._m0[_1097].x;
    float _1104 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * cbInstanceData._m0[_1097].y;
    float _1105 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * cbInstanceData._m0[_1097].z;
    float _4421 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _4432 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1107 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _4443 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _1109 = 1.0 - _967;
    float _1110 = _1106 * _1109;
    float _1111 = _1107 * _1109;
    float _1112 = _1108 * _1109;
    float _1117 = (_1106 + (-0.039999999105930328369140625)) * _967;
    float _1118 = (_1107 + (-0.039999999105930328369140625)) * _967;
    float _1119 = (_1108 + (-0.039999999105930328369140625)) * _967;
    float _1120 = _1117 + 0.039999999105930328369140625;
    float _1122 = _1118 + 0.039999999105930328369140625;
    float _1123 = _1119 + 0.039999999105930328369140625;
    vec4 _1132 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1058, cbSceneParam._m0[86u].y * _1059));
    float _1136 = ((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * TEXCOORD_5.w) * _1132.x;
    float _1137 = dot(vec3(_959, _960, _961), vec3(_1038, _1039, _1040));
    float _1140 = _1137 * 2.0;
    float _1144 = (_1140 * _959) - _1038;
    float _1145 = (_1140 * _960) - _1039;
    float _1146 = (_1140 * _961) - _1040;
    float _1150 = abs(dot(vec3(_1038, _1039, _1040), vec3(_959, _960, _961)));
    float _4454 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _1152 = sqrt(_962);
    float _1165 = exp2((_1152 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1152 * 3.0));
    float _1171 = (1.0 - _1165) * ((_1152 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1172 = _1165 * _1152;
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1204 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1208 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1537;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1262 = fma(_1208, cbModelParam._m0[26u].z, fma(_1204, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1200));
        float _1266 = fma(_1208, cbModelParam._m0[27u].z, fma(_1204, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1200));
        float _1270 = fma(_1208, cbModelParam._m0[28u].z, fma(_1204, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1200));
        float _1295 = _1200 + _959;
        float _1296 = _1204 + _960;
        float _1297 = _1208 + _961;
        float _1307 = fma(_1297, cbModelParam._m0[26u].z, fma(_1296, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1295)) - _1262;
        float _1308 = fma(_1297, cbModelParam._m0[27u].z, fma(_1296, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1295)) - _1266;
        float _1309 = fma(_1297, cbModelParam._m0[28u].z, fma(_1296, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1295)) - _1270;
        float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
        float _1326 = ((_1313 * _1307) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1262 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1313 * _1308) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1266 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1313 * _1309) / cbModelParam._m0[34u].z) + ((((((_1270 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        float _1365 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1331.x + (-0.5));
        float _1367 = _1365 * (_1331.y + (-0.5));
        float _1368 = _1365 * (_1331.z + (-0.5));
        float _1375 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1338.x + (-0.5));
        float _1377 = _1375 * (_1338.y + (-0.5));
        float _1378 = _1375 * (_1338.z + (-0.5));
        float _1385 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1345.x + (-0.5));
        float _1387 = _1385 * (_1345.y + (-0.5));
        float _1388 = _1385 * (_1345.z + (-0.5));
        float _1395 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1352.x + (-0.5));
        float _1397 = _1395 * (_1352.y + (-0.5));
        float _1398 = _1395 * (_1352.z + (-0.5));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = _1366 * 0.5;
        float _1403 = _1376 * 0.5;
        float _1404 = _1386 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1419 = (dot(vec3(_959, _960, _961), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4480 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1429 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4491 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4502 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_1431 + 1.0))) + _1436) * _1399;
        float _1446 = _1367 * 0.5;
        float _1447 = _1377 * 0.5;
        float _1448 = _1387 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_959, _960, _961), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4513 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _4524 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4535 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_1473 + 1.0))) + _1478) * _1400;
        float _1488 = _1368 * 0.5;
        float _1489 = _1378 * 0.5;
        float _1490 = _1388 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_959, _960, _961), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4546 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4557 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4568 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_1515 + 1.0))) + _1520) * _1401;
        _1537 = _1368;
        _1539 = _1367;
        _1540 = _1366;
        _1541 = _1378;
        _1542 = _1377;
        _1543 = _1376;
        _1544 = _1388;
        _1545 = _1387;
        _1546 = _1386;
        _1547 = _1401;
        _1548 = _1400;
        _1549 = _1399;
        _1550 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1551 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1552 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
    }
    else
    {
        _1537 = _1538;
        _1539 = _1538;
        _1540 = _1538;
        _1541 = _1538;
        _1542 = _1538;
        _1543 = _1538;
        _1544 = _1538;
        _1545 = _1538;
        _1546 = _1538;
        _1547 = _1538;
        _1548 = _1538;
        _1549 = _1538;
        _1550 = 0.0;
        _1551 = 0.0;
        _1552 = 0.0;
    }
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1579 = fma(_1208, cbModelParam._m0[30u].z, fma(_1204, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1200));
        float _1583 = fma(_1208, cbModelParam._m0[31u].z, fma(_1204, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1200));
        float _1587 = fma(_1208, cbModelParam._m0[32u].z, fma(_1204, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1200));
        float _1610 = _1200 + _959;
        float _1611 = _1204 + _960;
        float _1612 = _1208 + _961;
        float _1622 = fma(_1612, cbModelParam._m0[30u].z, fma(_1611, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1610)) - _1579;
        float _1623 = fma(_1612, cbModelParam._m0[31u].z, fma(_1611, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1610)) - _1583;
        float _1624 = fma(_1612, cbModelParam._m0[32u].z, fma(_1611, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1610)) - _1587;
        float _1628 = inversesqrt(dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624)));
        float _1641 = ((_1628 * _1622) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1579 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1642 = ((_1628 * _1623) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1583 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1643 = ((_1628 * _1624) / cbModelParam._m0[35u].z) + ((((((_1587 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1641, _1642, _1643), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1641, _1642, _1643), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1641, _1642, _1643), 0.0);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1641, _1642, _1643), 0.0);
        float _1678 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1645.x + (-0.5));
        float _1680 = _1678 * (_1645.y + (-0.5));
        float _1681 = _1678 * (_1645.z + (-0.5));
        float _1688 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1689 = _1688 * (_1652.x + (-0.5));
        float _1690 = _1688 * (_1652.y + (-0.5));
        float _1691 = _1688 * (_1652.z + (-0.5));
        float _1698 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1659.x + (-0.5));
        float _1700 = _1698 * (_1659.y + (-0.5));
        float _1701 = _1698 * (_1659.z + (-0.5));
        float _1708 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1709 = _1708 * (_1666.x + (-0.5));
        float _1710 = _1708 * (_1666.y + (-0.5));
        float _1711 = _1708 * (_1666.z + (-0.5));
        float _1712 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1713 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1714 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1715 = _1679 * 0.5;
        float _1716 = _1689 * 0.5;
        float _1717 = _1699 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_959, _960, _961), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4609 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1712 + 9.9999997473787516355514526367188e-06);
        float _4620 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4631 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_1742 + 1.0))) + _1747) * _1712;
        float _1757 = _1680 * 0.5;
        float _1758 = _1690 * 0.5;
        float _1759 = _1700 * 0.5;
        float _1760 = dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759));
        float _1765 = (_1760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1760);
        float _1773 = (dot(vec3(_959, _960, _961), vec3(_1765 * _1757, _1765 * _1758, _1765 * _1759)) + 1.0) * 0.5;
        float _4642 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1782 = sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759)) / (_1713 + 9.9999997473787516355514526367188e-06);
        float _4653 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _1784 = _1783 * 2.0;
        float _1788 = (1.0 - _1783) / (_1783 + 1.0);
        float _4664 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1789 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _1798 = ((((1.0 - _1789) * (_1784 + 2.0)) * exp2(log2(isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_1784 + 1.0))) + _1789) * _1713;
        float _1799 = _1681 * 0.5;
        float _1800 = _1691 * 0.5;
        float _1801 = _1701 * 0.5;
        float _1802 = dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801));
        float _1807 = (_1802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1802);
        float _1815 = (dot(vec3(_959, _960, _961), vec3(_1807 * _1799, _1807 * _1800, _1807 * _1801)) + 1.0) * 0.5;
        float _4675 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1824 = sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801)) / (_1714 + 9.9999997473787516355514526367188e-06);
        float _4686 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _1826 = _1825 * 2.0;
        float _1830 = (1.0 - _1825) / (_1825 + 1.0);
        float _4697 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _1840 = ((((1.0 - _1831) * (_1826 + 2.0)) * exp2(log2(isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_1826 + 1.0))) + _1831) * _1714;
        _1848 = _1681;
        _1849 = _1680;
        _1850 = _1679;
        _1851 = _1691;
        _1852 = _1690;
        _1853 = _1689;
        _1854 = _1701;
        _1855 = _1700;
        _1856 = _1699;
        _1857 = _1714;
        _1858 = _1713;
        _1859 = _1712;
        _1860 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
        _1861 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)));
        _1862 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)));
    }
    else
    {
        _1848 = _1538;
        _1849 = _1538;
        _1850 = _1538;
        _1851 = _1538;
        _1852 = _1538;
        _1853 = _1538;
        _1854 = _1538;
        _1855 = _1538;
        _1856 = _1538;
        _1857 = _1538;
        _1858 = _1538;
        _1859 = _1538;
        _1860 = 0.0;
        _1861 = 0.0;
        _1862 = 0.0;
    }
    float _1872 = (cbModelParam._m0[1u].x * (_1860 - _1550)) + _1550;
    float _1873 = (cbModelParam._m0[1u].x * (_1861 - _1551)) + _1551;
    float _1874 = (cbModelParam._m0[1u].x * (_1862 - _1552)) + _1552;
    float _1895 = fma(_1874, cbSceneParam._m0[89u].z, fma(_1873, cbSceneParam._m0[89u].y, _1872 * cbSceneParam._m0[89u].x));
    float _1898 = fma(_1874, cbSceneParam._m0[90u].z, fma(_1873, cbSceneParam._m0[90u].y, _1872 * cbSceneParam._m0[90u].x));
    float _1901 = fma(_1874, cbSceneParam._m0[91u].z, fma(_1873, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1872));
    float _1916 = _1144 * 0.5;
    float _1917 = _1145 * 0.5;
    float _1918 = _1146 * 0.5;
    float _1919 = dot(vec4(_1916, _1917, _1918, 1.0), vec4(_1850, _1853, _1856, _1859));
    float _1922 = dot(vec4(_1916, _1917, _1918, 1.0), vec4(_1849, _1852, _1855, _1858));
    float _1925 = dot(vec4(_1916, _1917, _1918, 1.0), vec4(_1848, _1851, _1854, _1857));
    float _1959;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1932 = dot(vec4(_1916, _1917, _1918, 1.0), vec4(_1537, _1541, _1544, _1547));
        float _1936 = dot(vec4(_1916, _1917, _1918, 1.0), vec4(_1539, _1542, _1545, _1548));
        float _1940 = dot(vec4(_1916, _1917, _1918, 1.0), vec4(_1540, _1543, _1546, _1549));
        float _1947 = dot(vec4(cbModelParam._m0[39u]), vec4(_1916, _1917, _1918, 1.0));
        _1959 = dot(vec3(isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0)), isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)), isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1947) ? 0.0 : (isnan(0.0) ? _1947 : max(0.0, _1947))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1959 = 1.0;
    }
    float _1970;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1961 = dot(vec4(cbModelParam._m0[40u]), vec4(_1916, _1917, _1918, 1.0));
        _1970 = dot(vec3(isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0)), isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1961) ? 0.0 : (isnan(0.0) ? _1961 : max(0.0, _1961))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1970 = 1.0;
    }
    float _1974 = (_1970 * cbModelParam._m0[1u].x) + (_1959 * (1.0 - cbModelParam._m0[1u].x));
    float _1984 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _962);
    float _1985 = isnan(_1984) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1984 : min(cbModelParam._m0[25u].z, _1984));
    float _2066;
    float _2068;
    float _2070;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2033 = fma(_1208, cbModelParam._m0[13u].z, fma(_1204, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1200)) + cbModelParam._m0[13u].w;
        float _2037 = fma(_1208, cbModelParam._m0[14u].z, fma(_1204, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1200)) + cbModelParam._m0[14u].w;
        float _2041 = fma(_1208, cbModelParam._m0[15u].z, fma(_1204, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1200)) + cbModelParam._m0[15u].w;
        float _2044 = fma(_1146, cbModelParam._m0[13u].z, fma(_1145, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1144));
        float _2047 = fma(_1146, cbModelParam._m0[14u].z, fma(_1145, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1144));
        float _2050 = fma(_1146, cbModelParam._m0[15u].z, fma(_1145, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1144));
        float _2078;
        if (_2044 > 0.0)
        {
            _2078 = abs((1.0 - _2033) / _2044);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2033 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2078 = frontier_phi_17_15_ladder;
        }
        float _2250;
        if (_2047 > 0.0)
        {
            _2250 = abs((1.0 - _2037) / _2047);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2037 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2250 = frontier_phi_26_22_ladder;
        }
        float _2545;
        if (_2050 > 0.0)
        {
            _2545 = abs((1.0 - _2041) / _2050);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2041 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2545 = frontier_phi_38_33_ladder;
        }
        float _2547 = isnan(_2250) ? _2078 : (isnan(_2078) ? _2250 : min(_2078, _2250));
        float _2548 = isnan(_2545) ? _2547 : (isnan(_2547) ? _2545 : min(_2547, _2545));
        float _2552 = (_2548 * _2044) + _2033;
        float _2553 = (_2548 * _2047) + _2037;
        float _2554 = (_2548 * _2050) + _2041;
        float _2555 = _2548 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2555;
        float _2559 = _2555 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 > _2559) || ((_2553 < _2557) || ((_2552 < _2557) || (_2552 > _2559))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2699 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2554, cbModelParam._m0[9u].z, fma(_2553, cbModelParam._m0[9u].y, _2552 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2554, cbModelParam._m0[10u].z, fma(_2553, cbModelParam._m0[10u].y, _2552 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2554, cbModelParam._m0[11u].z, fma(_2553, cbModelParam._m0[11u].y, _2552 * cbModelParam._m0[11u].x))), _1985);
            frontier_phi_16_38_ladder = _2699.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2699.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2699.x * cbModelParam._m0[1u].y;
        }
        _2066 = frontier_phi_16_38_ladder_2;
        _2068 = frontier_phi_16_38_ladder_1;
        _2070 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2054 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1144, _1145, _1146), _1985);
        _2066 = _2054.x * cbModelParam._m0[1u].y;
        _2068 = _2054.y * cbModelParam._m0[1u].y;
        _2070 = _2054.z * cbModelParam._m0[1u].y;
    }
    float _2074 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _962);
    float _2075 = isnan(_2074) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2074 : min(cbModelParam._m0[25u].w, _2074));
    float _2165;
    float _2167;
    float _2169;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2129 = fma(_1208, cbModelParam._m0[21u].z, fma(_1204, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1200)) + cbModelParam._m0[21u].w;
        float _2133 = fma(_1208, cbModelParam._m0[22u].z, fma(_1204, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1200)) + cbModelParam._m0[22u].w;
        float _2137 = fma(_1208, cbModelParam._m0[23u].z, fma(_1204, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1200)) + cbModelParam._m0[23u].w;
        float _2140 = fma(_1146, cbModelParam._m0[21u].z, fma(_1145, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1144));
        float _2143 = fma(_1146, cbModelParam._m0[22u].z, fma(_1145, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1144));
        float _2146 = fma(_1146, cbModelParam._m0[23u].z, fma(_1145, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1144));
        float _2255;
        if (_2140 > 0.0)
        {
            _2255 = abs((1.0 - _2129) / _2140);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2129 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2255 = frontier_phi_28_24_ladder;
        }
        float _2572;
        if (_2143 > 0.0)
        {
            _2572 = abs((1.0 - _2133) / _2143);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2143 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2133 + 1.0) / _2143);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2572 = frontier_phi_40_35_ladder;
        }
        float _2910;
        if (_2146 > 0.0)
        {
            _2910 = abs((1.0 - _2137) / _2146);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2146 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2137 + 1.0) / _2146);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2910 = frontier_phi_50_47_ladder;
        }
        float _2912 = isnan(_2572) ? _2255 : (isnan(_2255) ? _2572 : min(_2255, _2572));
        float _2913 = isnan(_2910) ? _2912 : (isnan(_2912) ? _2910 : min(_2912, _2910));
        float _2917 = (_2913 * _2140) + _2129;
        float _2918 = (_2913 * _2143) + _2133;
        float _2919 = (_2913 * _2146) + _2137;
        float _2920 = _2913 * 9.9999997473787516355514526367188e-05;
        float _2921 = (-1.0) - _2920;
        float _2923 = _2920 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2919 > _2923) || ((_2919 < _2921) || ((_2918 > _2923) || ((_2918 < _2921) || ((_2917 < _2921) || (_2917 > _2923))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3041 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2919, cbModelParam._m0[17u].z, fma(_2918, cbModelParam._m0[17u].y, _2917 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2919, cbModelParam._m0[18u].z, fma(_2918, cbModelParam._m0[18u].y, _2917 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2919, cbModelParam._m0[19u].z, fma(_2918, cbModelParam._m0[19u].y, _2917 * cbModelParam._m0[19u].x))), _2075);
            frontier_phi_25_50_ladder = _3041.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3041.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3041.x * cbModelParam._m0[1u].z;
        }
        _2165 = frontier_phi_25_50_ladder_2;
        _2167 = frontier_phi_25_50_ladder_1;
        _2169 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2149 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1144, _1145, _1146), _2075);
        _2165 = _2149.x * cbModelParam._m0[1u].z;
        _2167 = _2149.y * cbModelParam._m0[1u].z;
        _2169 = _2149.z * cbModelParam._m0[1u].z;
    }
    float _2182 = (((_1171 * _1120) + _1172) * _1136) * ((cbModelParam._m0[1u].w * (_2165 - _2066)) + _2066);
    float _2184 = (((_1171 * _1122) + _1172) * _1136) * ((cbModelParam._m0[1u].w * (_2167 - _2068)) + _2068);
    float _2186 = (((_1171 * _1123) + _1172) * _1136) * ((cbModelParam._m0[1u].w * (_2169 - _2070)) + _2070);
    float _2189 = fma(_2186, cbSceneParam._m0[89u].z, fma(_2184, cbSceneParam._m0[89u].y, _2182 * cbSceneParam._m0[89u].x));
    float _2192 = fma(_2186, cbSceneParam._m0[90u].z, fma(_2184, cbSceneParam._m0[90u].y, _2182 * cbSceneParam._m0[90u].x));
    float _2195 = fma(_2186, cbSceneParam._m0[91u].z, fma(_2184, cbSceneParam._m0[91u].y, _2182 * cbSceneParam._m0[91u].x));
    float _2229 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2233 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2237 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2241 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2242 = _2229 / _2241;
    float _2243 = _2233 / _2241;
    float _2244 = _2237 / _2241;
    float _2391;
    float _2392;
    float _2393;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2271 = ((uint(_2244 > cbSceneParam._m0[59u].y) + uint(_2244 > cbSceneParam._m0[59u].x)) + uint(_2244 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2272 = _2271 + 43u;
        uint _2280 = _2271 + 44u;
        uint _2288 = _2271 + 45u;
        uint _2296 = _2271 + 46u;
        float _2307 = fma(_2241, cbSceneParam._m0[_2272].w, fma(_2237, cbSceneParam._m0[_2272].z, fma(_2233, cbSceneParam._m0[_2272].y, _2229 * cbSceneParam._m0[_2272].x)));
        float _2311 = fma(_2241, cbSceneParam._m0[_2280].w, fma(_2237, cbSceneParam._m0[_2280].z, fma(_2233, cbSceneParam._m0[_2280].y, _2229 * cbSceneParam._m0[_2280].x)));
        float _2319 = fma(_2241, cbSceneParam._m0[_2296].w, fma(_2237, cbSceneParam._m0[_2296].z, fma(_2233, cbSceneParam._m0[_2296].y, _2229 * cbSceneParam._m0[_2296].x)));
        float _2324 = cbSceneParam._m0[33u].z * _2319;
        float _2326 = cbSceneParam._m0[33u].w * _2319;
        float _2329 = fma(_2241, cbSceneParam._m0[_2288].w, fma(_2237, cbSceneParam._m0[_2288].z, fma(_2233, cbSceneParam._m0[_2288].y, _2229 * cbSceneParam._m0[_2288].x))) / _2319;
        float _2377 = (cbSceneParam._m0[33u].x - sqrt(((_2243 * _2243) + (_2242 * _2242)) + (_2244 * _2244))) * cbSceneParam._m0[33u].y;
        float _4823 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2384 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2324 + _2307) / _2319, (_2326 + _2311) / _2319), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2326 + _2307) / _2319, (_2311 - _2324) / _2319), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2307 - _2324) / _2319, (_2311 - _2326) / _2319), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2307 - _2326) / _2319, (_2324 + _2311) / _2319), _2329), 0.0)).x), vec4(0.25)));
        _2391 = 1.0 - (_2384 * cbSceneParam._m0[34u].x);
        _2392 = 1.0 - (_2384 * cbSceneParam._m0[34u].y);
        _2393 = 1.0 - (_2384 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2391 = 1.0;
        _2392 = 1.0;
        _2393 = 1.0;
    }
    float _2457;
    float _2459;
    float _2461;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2445 = fma(_2241, cbSceneParam._m0[63u].w, fma(_2237, cbSceneParam._m0[63u].z, fma(_2233, cbSceneParam._m0[63u].y, _2229 * cbSceneParam._m0[63u].x)));
        float _2446 = fma(_2241, cbSceneParam._m0[60u].w, fma(_2237, cbSceneParam._m0[60u].z, fma(_2233, cbSceneParam._m0[60u].y, _2229 * cbSceneParam._m0[60u].x))) / _2445;
        float _2447 = fma(_2241, cbSceneParam._m0[61u].w, fma(_2237, cbSceneParam._m0[61u].z, fma(_2233, cbSceneParam._m0[61u].y, _2229 * cbSceneParam._m0[61u].x))) / _2445;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2446 >= cbSceneParam._m0[64u].x) && (_2447 >= cbSceneParam._m0[64u].y)) && (_2446 <= cbSceneParam._m0[64u].z)) && (_2447 <= cbSceneParam._m0[64u].w))
        {
            float _2585 = fma(_2241, cbSceneParam._m0[62u].w, fma(_2237, cbSceneParam._m0[62u].z, fma(_2233, cbSceneParam._m0[62u].y, _2229 * cbSceneParam._m0[62u].x))) / _2445;
            float _2589 = isnan(cbSceneParam._m0[41u].w) ? _2585 : (isnan(_2585) ? cbSceneParam._m0[41u].w : max(_2585, cbSceneParam._m0[41u].w));
            float _2632 = (cbSceneParam._m0[33u].x - sqrt(((_2243 * _2243) + (_2242 * _2242)) + (_2244 * _2244))) * cbSceneParam._m0[33u].y;
            float _4839 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
            float _2639 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2446, cbSceneParam._m0[33u].w + _2447), _2589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2446, _2447 - cbSceneParam._m0[33u].z), _2589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2446 - cbSceneParam._m0[33u].z, _2447 - cbSceneParam._m0[33u].w), _2589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2446 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2447), _2589), 0.0)).x), vec4(0.25)));
            float _2643 = 1.0 - (_2639 * cbSceneParam._m0[34u].x);
            float _2644 = 1.0 - (_2639 * cbSceneParam._m0[34u].y);
            float _2645 = 1.0 - (_2639 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2645) ? _2393 : (isnan(_2393) ? _2645 : min(_2393, _2645));
            frontier_phi_37_36_ladder_1 = isnan(_2644) ? _2392 : (isnan(_2392) ? _2644 : min(_2392, _2644));
            frontier_phi_37_36_ladder_2 = isnan(_2643) ? _2391 : (isnan(_2391) ? _2643 : min(_2391, _2643));
        }
        else
        {
            frontier_phi_37_36_ladder = _2393;
            frontier_phi_37_36_ladder_1 = _2392;
            frontier_phi_37_36_ladder_2 = _2391;
        }
        _2457 = frontier_phi_37_36_ladder_2;
        _2459 = frontier_phi_37_36_ladder_1;
        _2461 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2457 = _2391;
        _2459 = _2392;
        _2461 = _2393;
    }
    uvec4 _2466 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2468 = _2466.x * 14u;
    uint _2469 = _2468 + 13u;
    float _2476 = _1136 + (-1.0);
    float _2481 = (cbLight._m0[_2469].x * _2476) + 1.0;
    float _2482 = (cbLight._m0[_2469].y * _2476) + 1.0;
    float _2483 = (cbLight._m0[_2469].z * _2476) + 1.0;
    float _2484 = (cbLight._m0[_2469].w * _2476) + 1.0;
    uint _2485 = _2468 + 5u;
    float _2491 = isnan(1.0) ? _2482 : (isnan(_2482) ? 1.0 : min(_2482, 1.0));
    uint _2495 = _2468 + 4u;
    float _2504 = isnan(1.0) ? _2481 : (isnan(_2481) ? 1.0 : min(_2481, 1.0));
    uint _2508 = _2468 | 1u;
    float _2519 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_959, _960, _961));
    float _2522 = dot(vec3(cbLight._m0[_2508].xyz), vec3(_959, _960, _961));
    float _4875 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _4886 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2527 = (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * 0.3183098733425140380859375;
    float _2529 = (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * 0.3183098733425140380859375;
    float _2536 = ((cbLight._m0[_2485].x * _2491) * _2529) + (((cbLight._m0[_2495].x * _2457) * _2504) * _2527);
    float _2537 = ((_2491 * cbLight._m0[_2485].y) * _2529) + (((cbLight._m0[_2495].y * _2459) * _2504) * _2527);
    float _2538 = ((_2491 * cbLight._m0[_2485].z) * _2529) + (((cbLight._m0[_2495].z * _2461) * _2504) * _2527);
    uvec4 _2542 = floatBitsToUint(cbLight._m0[_2468 + 12u]);
    bool _2544 = _2542.x == 0u;
    float _2646;
    float _2648;
    float _2650;
    if (_2544)
    {
        _2646 = _2536;
        _2648 = _2537;
        _2650 = _2538;
    }
    else
    {
        uint _2654 = _2468 + 6u;
        float _2670 = (dot(vec3(cbLight._m0[_2468 + 2u].xyz), vec3(_959, _960, _961)) * 0.5) + 0.5;
        float _2671 = _2670 * _2670;
        float _4897 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2672 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
        float _2673 = isnan(1.0) ? _2483 : (isnan(_2483) ? 1.0 : min(_2483, 1.0));
        _2646 = (((cbLight._m0[_2654].x * 0.3183098733425140380859375) * _2672) * _2673) + _2536;
        _2648 = (((cbLight._m0[_2654].y * 0.3183098733425140380859375) * _2672) * _2673) + _2537;
        _2650 = (((cbLight._m0[_2654].z * 0.3183098733425140380859375) * _2672) * _2673) + _2538;
    }
    bool _2653 = _2542.y == 0u;
    float _2708;
    float _2710;
    float _2712;
    if (_2653)
    {
        _2708 = _2646;
        _2710 = _2648;
        _2712 = _2650;
    }
    else
    {
        uint _2881 = _2468 + 7u;
        float _2897 = (dot(vec3(cbLight._m0[_2468 + 3u].xyz), vec3(_959, _960, _961)) * 0.5) + 0.5;
        float _2898 = _2897 * _2897;
        float _4913 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2899 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _2900 = isnan(1.0) ? _2484 : (isnan(_2484) ? 1.0 : min(_2484, 1.0));
        _2708 = (((cbLight._m0[_2881].x * 0.3183098733425140380859375) * _2899) * _2900) + _2646;
        _2710 = (((cbLight._m0[_2881].y * 0.3183098733425140380859375) * _2899) * _2900) + _2648;
        _2712 = (((cbLight._m0[_2881].z * 0.3183098733425140380859375) * _2899) * _2900) + _2650;
    }
    uint _2715 = _2468 + 8u;
    float _2728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _962) * 0.949999988079071044921875);
    float _2729 = _2728 * _2728;
    float _2730 = cbLight._m0[_2468].x + _1038;
    float _2731 = cbLight._m0[_2468].y + _1039;
    float _2732 = cbLight._m0[_2468].z + _1040;
    float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
    float _2737 = _2736 * _2730;
    float _2738 = _2736 * _2731;
    float _2739 = _2736 * _2732;
    float _2740 = dot(vec3(_959, _960, _961), vec3(cbLight._m0[_2468].xyz));
    float _4929 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2743 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
    float _4940 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _2744 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
    float _2745 = dot(vec3(_959, _960, _961), vec3(_2737, _2738, _2739));
    float _4951 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    float _2748 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
    float _2749 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2737, _2738, _2739));
    float _4962 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2753 = _2729 * _2729;
    float _2757 = ((_2748 * _2748) * (_2753 + (-1.0))) + 1.0;
    float _2765 = exp2(log2(1.0 - (isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0)))) * 5.0);
    float _2766 = 0.959999978542327880859375 - _1117;
    float _2768 = 0.959999978542327880859375 - _1118;
    float _2769 = 0.959999978542327880859375 - _1119;
    float _2776 = 1.0 - _2729;
    float _2787 = (0.5 / (((_2744 * ((_2743 * _2776) + _2729)) + 9.9999999392252902907785028219223e-09) + (((_2744 * _2776) + _2729) * _2743))) * _2743;
    float _4973 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2789 = (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * (_2753 / ((_2757 * _2757) * 3.141590118408203125));
    uint _2803 = _2468 + 9u;
    float _2814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2508].w)) * _962) * 0.949999988079071044921875);
    float _2815 = _2814 * _2814;
    float _2816 = cbLight._m0[_2508].x + _1038;
    float _2817 = cbLight._m0[_2508].y + _1039;
    float _2818 = cbLight._m0[_2508].z + _1040;
    float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
    float _2823 = _2822 * _2816;
    float _2824 = _2822 * _2817;
    float _2825 = _2822 * _2818;
    float _2826 = dot(vec3(_959, _960, _961), vec3(cbLight._m0[_2508].xyz));
    float _4984 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
    float _2829 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
    float _2830 = dot(vec3(_959, _960, _961), vec3(_2823, _2824, _2825));
    float _4995 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2833 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
    float _2834 = dot(vec3(cbLight._m0[_2508].xyz), vec3(_2823, _2824, _2825));
    float _5006 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
    float _2838 = _2815 * _2815;
    float _2842 = ((_2833 * _2833) * (_2838 + (-1.0))) + 1.0;
    float _2849 = exp2(log2(1.0 - (isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0)))) * 5.0);
    float _2856 = 1.0 - _2815;
    float _2866 = (0.5 / (((_2744 * ((_2829 * _2856) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2744 * _2856) + _2815) * _2829))) * _2829;
    float _5017 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
    float _2868 = (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_2838 / ((_2842 * _2842) * 3.141590118408203125));
    float _2878 = (((((_2849 * _2766) + _1120) * cbLight._m0[_2803].x) * _2868) * _2491) + ((((cbLight._m0[_2715].x * _2457) * ((_2765 * _2766) + _1120)) * _2789) * _2504);
    float _2879 = (((((_2849 * _2768) + _1122) * cbLight._m0[_2803].y) * _2868) * _2491) + ((((cbLight._m0[_2715].y * _2459) * ((_2765 * _2768) + _1122)) * _2789) * _2504);
    float _2880 = (((((_2849 * _2769) + _1123) * cbLight._m0[_2803].z) * _2868) * _2491) + ((((cbLight._m0[_2715].z * _2461) * ((_2765 * _2769) + _1123)) * _2789) * _2504);
    float _2936;
    float _2938;
    float _2940;
    if (_2544)
    {
        _2936 = _2878;
        _2938 = _2879;
        _2940 = _2880;
    }
    else
    {
        uint _2942 = _2468 + 2u;
        uint _2946 = _2468 + 10u;
        float _2960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2942].w)) * _962) * 0.949999988079071044921875);
        float _2961 = _2960 * _2960;
        float _2962 = cbLight._m0[_2942].x + _1038;
        float _2963 = cbLight._m0[_2942].y + _1039;
        float _2964 = cbLight._m0[_2942].z + _1040;
        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
        float _2969 = _2968 * _2962;
        float _2970 = _2968 * _2963;
        float _2971 = _2968 * _2964;
        float _2972 = dot(vec3(_959, _960, _961), vec3(cbLight._m0[_2942].xyz));
        float _5028 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2975 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
        float _2976 = dot(vec3(_959, _960, _961), vec3(_2969, _2970, _2971));
        float _5039 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2979 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
        float _2980 = dot(vec3(cbLight._m0[_2942].xyz), vec3(_2969, _2970, _2971));
        float _5050 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2984 = _2961 * _2961;
        float _2988 = ((_2979 * _2979) * (_2984 + (-1.0))) + 1.0;
        float _2995 = exp2(log2(1.0 - (isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0)))) * 5.0);
        float _3002 = 1.0 - _2961;
        float _3012 = (0.5 / (((_2744 * ((_2975 * _3002) + _2961)) + 9.9999999392252902907785028219223e-09) + (((_2744 * _3002) + _2961) * _2975))) * _2975;
        float _5061 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        float _3014 = (isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_2984 / ((_2988 * _2988) * 3.141590118408203125));
        float _3015 = isnan(1.0) ? _2483 : (isnan(_2483) ? 1.0 : min(_2483, 1.0));
        _2936 = (((((_2995 * _2766) + _1120) * cbLight._m0[_2946].x) * _3014) * _3015) + _2878;
        _2938 = (((((_2995 * _2768) + _1122) * cbLight._m0[_2946].y) * _3014) * _3015) + _2879;
        _2940 = (((((_2995 * _2769) + _1123) * cbLight._m0[_2946].z) * _3014) * _3015) + _2880;
    }
    float _3046;
    float _3048;
    float _3050;
    if (_2653)
    {
        _3046 = _2936;
        _3048 = _2938;
        _3050 = _2940;
    }
    else
    {
        uint _3057 = _2468 + 3u;
        uint _3061 = _2468 + 11u;
        float _3075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3057].w)) * _962) * 0.949999988079071044921875);
        float _3076 = _3075 * _3075;
        float _3077 = cbLight._m0[_3057].x + _1038;
        float _3078 = cbLight._m0[_3057].y + _1039;
        float _3079 = cbLight._m0[_3057].z + _1040;
        float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
        float _3084 = _3083 * _3077;
        float _3085 = _3083 * _3078;
        float _3086 = _3083 * _3079;
        float _3087 = dot(vec3(_959, _960, _961), vec3(cbLight._m0[_3057].xyz));
        float _5077 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
        float _3090 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
        float _3091 = dot(vec3(_959, _960, _961), vec3(_3084, _3085, _3086));
        float _5088 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
        float _3094 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
        float _3095 = dot(vec3(cbLight._m0[_3057].xyz), vec3(_3084, _3085, _3086));
        float _5099 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
        float _3099 = _3076 * _3076;
        float _3103 = ((_3094 * _3094) * (_3099 + (-1.0))) + 1.0;
        float _3110 = exp2(log2(1.0 - (isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0)))) * 5.0);
        float _3117 = 1.0 - _3076;
        float _3127 = (0.5 / (((_2744 * ((_3090 * _3117) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_2744 * _3117) + _3076) * _3090))) * _3090;
        float _5110 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
        float _3129 = (isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0))) * (_3099 / ((_3103 * _3103) * 3.141590118408203125));
        float _3130 = isnan(1.0) ? _2484 : (isnan(_2484) ? 1.0 : min(_2484, 1.0));
        _3046 = (((((_3110 * _2766) + _1120) * cbLight._m0[_3061].x) * _3129) * _3130) + _2936;
        _3048 = (((((_3110 * _2768) + _1122) * cbLight._m0[_3061].y) * _3129) * _3130) + _2938;
        _3050 = (((((_3110 * _2769) + _1123) * cbLight._m0[_3061].z) * _3129) * _3130) + _2940;
    }
    float _3196;
    float _3198;
    float _3200;
    float _3202;
    float _3204;
    float _3206;
    if (_2466.y == 0u)
    {
        uvec4 _3151 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3152 = _3151.x;
        uint _3163 = uint((float(_3151.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1059) / _3152))) + floor(float(uint(cbSceneParam._m0[85u].x * _1058) / _3152)));
        float _3173 = (log2(_2244 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3174 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
        uint _3177 = uint(isnan(14.0) ? _3174 : (isnan(_3174) ? 14.0 : min(_3174, 14.0)));
        uvec4 _3182 = texelFetch(g_lightClusterGridBuffer, int(((_3177 << 2u) + (_3163 << 6u)) >> 2u));
        uint _3183 = _3182.x;
        uint _3184 = _3151.z;
        float _3263;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        if (((((1u << ((_3184 >> 4u) & 15u)) + 4294967295u) & _3183) == 0u) || ((_3184 & 240u) == 0u))
        {
            _3263 = 0.0;
            _3265 = 0.0;
            _3267 = 0.0;
            _3269 = 0.0;
            _3271 = 0.0;
            _3273 = 0.0;
        }
        else
        {
            float _3264;
            float _3266;
            float _3268;
            float _3270;
            float _3272;
            float _3274;
            float _3416 = 0.0;
            float _3417 = 0.0;
            float _3418 = 0.0;
            float _3419 = 0.0;
            float _3420 = 0.0;
            float _3421 = 0.0;
            uint _3422 = 0u;
            uint _3431;
            bool _3432;
            for (;;)
            {
                _3431 = texelFetch(g_lightClassification, int((((_3177 << 5u) + (_3163 << 9u)) + (_3422 << 2u)) >> 2u)).x;
                _3432 = _3431 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3432)
                {
                    frontier_phi_71_pred = _3421;
                    frontier_phi_71_pred_1 = _3420;
                    frontier_phi_71_pred_2 = _3419;
                    frontier_phi_71_pred_3 = _3418;
                    frontier_phi_71_pred_4 = _3417;
                    frontier_phi_71_pred_5 = _3416;
                }
                else
                {
                    float _3561;
                    float _3562;
                    float _3563;
                    float _3564;
                    float _3565;
                    float _3566;
                    uint _3567;
                    _3561 = _3416;
                    _3562 = _3417;
                    _3563 = _3418;
                    _3564 = _3419;
                    _3565 = _3420;
                    _3566 = _3421;
                    _3567 = _3431;
                    float _3488;
                    float _3489;
                    float _3490;
                    float _3491;
                    float _3492;
                    float _3493;
                    for (;;)
                    {
                        uint _3571 = uint(findLSB(_3567)) + (_3422 << 5u);
                        uint _3568 = (_3567 + 4294967295u) & _3567;
                        uint _3573 = _3571 * 48u;
                        vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3573)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 3u)).x));
                        uint _3593 = (_3571 * 48u) + 4u;
                        vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3593)).x, texelFetch(g_PointLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3593 + 3u)).x));
                        uint _3612 = (_3571 * 48u) + 8u;
                        vec3 _3623 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3612)).x, texelFetch(g_PointLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3612 + 2u)).x));
                        float _3627 = _3587.x - _2242;
                        float _3628 = _3587.y - _2243;
                        float _3629 = _3587.z - _2244;
                        float _3630 = dot(vec3(_3627, _3628, _3629), vec3(_3627, _3628, _3629));
                        float _3633 = inversesqrt(_3630);
                        float _3634 = _3633 * _3627;
                        float _3635 = _3633 * _3628;
                        float _3636 = _3633 * _3629;
                        float _3637 = dot(vec3(_1077, _1080, _1083), vec3(_3634, _3635, _3636));
                        float _3642 = 1.0 - (_3630 * _3587.w);
                        float _5136 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                        float _3643 = isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0));
                        float _3644 = sqrt(_3630) * _3606.w;
                        float _3647 = 1.39999997615814208984375 / (_3644 + 1.39999997615814208984375);
                        float _3648 = _3647 * _3647;
                        float _3651 = ((1.0 - _3648) * _3637) + _3648;
                        float _3654 = _3644 * _3644;
                        float _3658 = ((isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0))) * _3643) / ((_3654 * 0.699999988079071044921875) + 1.0);
                        float _3662 = (-0.0) - _2242;
                        float _3663 = (-0.0) - _2243;
                        float _3664 = (-0.0) - _2244;
                        float _3668 = inversesqrt(dot(vec3(_3662, _3663, _3664), vec3(_3662, _3663, _3664)));
                        float _3669 = _3668 * _3662;
                        float _3670 = _3668 * _3663;
                        float _3671 = _3668 * _3664;
                        float _3678 = exp2(log2(1.0 / ((_3654 * 3.5) + 5.0)) * 0.25);
                        float _3679 = 1.0 - _1152;
                        float _3686 = sqrt(1.0 - ((1.0 - (_3679 * _3679)) * (1.0 - (_3678 * _3678))));
                        float _3687 = _3686 * _3686;
                        float _3688 = _3687 * _3687;
                        float _3689 = _3669 + _3634;
                        float _3690 = _3670 + _3635;
                        float _3691 = _3671 + _3636;
                        float _3695 = inversesqrt(dot(vec3(_3689, _3690, _3691), vec3(_3689, _3690, _3691)));
                        float _3699 = dot(vec3(_1077, _1080, _1083), vec3(_3669, _3670, _3671));
                        float _5152 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                        float _3702 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
                        float _3703 = dot(vec3(_1077, _1080, _1083), vec3(_3695 * _3689, _3695 * _3690, _3695 * _3691));
                        float _5163 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                        float _3706 = isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0));
                        float _3710 = ((_3706 * _3706) * (_3688 + (-1.0))) + 1.0;
                        float _3711 = _3647 * _3687;
                        float _3712 = _3711 * _3711;
                        float _3715 = ((1.0 - _3712) * _3637) + _3712;
                        float _5174 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                        float _3716 = isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0));
                        float _3717 = 1.0 - _3687;
                        float _3727 = (0.5 / (((_3716 * ((_3702 * _3717) + _3687)) + 9.9999999392252902907785028219223e-09) + (((_3716 * _3717) + _3687) * _3702))) * _3716;
                        float _5185 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                        float _3738 = (((_3688 * 3.1415927410125732421875) * (isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0)))) / ((_3710 * _3710) * ((_3654 * 2.1991131305694580078125) + 3.141590118408203125))) * _3643;
                        _3491 = (_3658 * _3606.x) + _3564;
                        _3492 = (_3658 * _3606.y) + _3565;
                        _3493 = (_3658 * _3606.z) + _3566;
                        _3488 = (_3738 * _3623.x) + _3561;
                        _3489 = (_3738 * _3623.y) + _3562;
                        _3490 = (_3738 * _3623.z) + _3563;
                        if (_3568 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3561 = _3488;
                            _3562 = _3489;
                            _3563 = _3490;
                            _3564 = _3491;
                            _3565 = _3492;
                            _3566 = _3493;
                            _3567 = _3568;
                        }
                    }
                    frontier_phi_71_pred = _3493;
                    frontier_phi_71_pred_1 = _3492;
                    frontier_phi_71_pred_2 = _3491;
                    frontier_phi_71_pred_3 = _3490;
                    frontier_phi_71_pred_4 = _3489;
                    frontier_phi_71_pred_5 = _3488;
                }
                _3274 = frontier_phi_71_pred;
                _3272 = frontier_phi_71_pred_1;
                _3270 = frontier_phi_71_pred_2;
                _3268 = frontier_phi_71_pred_3;
                _3266 = frontier_phi_71_pred_4;
                _3264 = frontier_phi_71_pred_5;
                uint _3423 = _3422 + 1u;
                if (_3423 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3416 = _3264;
                    _3417 = _3266;
                    _3418 = _3268;
                    _3419 = _3270;
                    _3420 = _3272;
                    _3421 = _3274;
                    _3422 = _3423;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3263 = _3264;
            _3265 = _3266;
            _3267 = _3268;
            _3269 = _3270;
            _3271 = _3272;
            _3273 = _3274;
        }
        uvec4 _3277 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3278 = _3277.z;
        uint _3280 = (_3278 >> 8u) & 15u;
        float _3384;
        float _3386;
        float _3388;
        float _3390;
        float _3392;
        float _3394;
        if (((4294967295u << _3280) & _3183) == 0u)
        {
            _3384 = _3263;
            _3386 = _3265;
            _3388 = _3267;
            _3390 = _3269;
            _3392 = _3271;
            _3394 = _3273;
        }
        else
        {
            float _3409 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
            float _3410 = _3409 * _2242;
            float _3411 = _3409 * _2243;
            float _3412 = _3409 * _2244;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3280 < ((_3278 >> 12u) & 15u))
            {
                float _3385;
                float _3387;
                float _3389;
                float _3391;
                float _3393;
                float _3395;
                float _3544 = _3263;
                float _3545 = _3265;
                float _3546 = _3267;
                float _3547 = _3269;
                float _3548 = _3271;
                float _3549 = _3273;
                uint _3550 = _3280;
                uint _3559;
                bool _3560;
                for (;;)
                {
                    _3559 = texelFetch(g_lightClassification, int((((_3177 << 5u) + (_3163 << 9u)) + (_3550 << 2u)) >> 2u)).x;
                    _3560 = _3559 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3560)
                    {
                        frontier_phi_82_pred = _3549;
                        frontier_phi_82_pred_1 = _3548;
                        frontier_phi_82_pred_2 = _3547;
                        frontier_phi_82_pred_3 = _3546;
                        frontier_phi_82_pred_4 = _3545;
                        frontier_phi_82_pred_5 = _3544;
                    }
                    else
                    {
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _4045;
                        float _4046;
                        float _4047;
                        float _4048;
                        float _4049;
                        float _4050;
                        float _3765 = _3544;
                        float _3766 = _3545;
                        float _3767 = _3546;
                        float _3768 = _3547;
                        float _3769 = _3548;
                        float _3770 = _3549;
                        uint _3771 = _3559;
                        uint _3772;
                        vec4 _3797;
                        float _3798;
                        vec4 _3813;
                        vec3 _3825;
                        vec4 _3840;
                        vec4 _3855;
                        float _3901;
                        bool _3902;
                        for (;;)
                        {
                            uint _3782 = ((_3550 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3771));
                            _3772 = (_3771 + 4294967295u) & _3771;
                            uint _3784 = _3782 * 40u;
                            _3797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 3u)).x));
                            _3798 = _3797.w;
                            uint _3800 = (_3782 * 40u) + 4u;
                            _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            uint _3815 = (_3782 * 40u) + 8u;
                            _3825 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 2u)).x));
                            uint _3827 = (_3782 * 40u) + 16u;
                            _3840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 3u)).x));
                            uint _3842 = (_3782 * 40u) + 20u;
                            _3855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 3u)).x));
                            uint _3857 = (_3782 * 40u) + 24u;
                            vec4 _3870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3857 + 3u)).x));
                            uint _3876 = (_3782 * 40u) + 28u;
                            vec4 _3889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3876 + 3u)).x));
                            _3901 = fma(_2244, _3889.z, fma(_2243, _3889.y, _3889.x * _2242)) + _3889.w;
                            _3902 = !((fma(_2244, _3870.z, fma(_2243, _3870.y, _3870.x * _2242)) + _3870.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3902)
                            {
                                float _3929 = _3797.x - _2242;
                                float _3930 = _3797.y - _2243;
                                float _3931 = _3797.z - _2244;
                                float _3932 = dot(vec3(_3929, _3930, _3931), vec3(_3929, _3930, _3931));
                                float _3935 = inversesqrt(_3932);
                                float _3936 = _3935 * _3929;
                                float _3937 = _3935 * _3930;
                                float _3938 = _3935 * _3931;
                                float _3942 = 1.0 - (_3932 / (_3798 * _3798));
                                float _5196 = isnan(0.0) ? _3942 : (isnan(_3942) ? 0.0 : max(_3942, 0.0));
                                float _3943 = isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0));
                                float _3947 = sqrt(_3932) * _3813.w;
                                float _3949 = 1.39999997615814208984375 / (_3947 + 1.39999997615814208984375);
                                float _3950 = _3949 * _3949;
                                float _3953 = ((1.0 - _3950) * dot(vec3(_3936, _3937, _3938), vec3(_1077, _1080, _1083))) + _3950;
                                float _3956 = _3947 * _3947;
                                float _3960 = (fma(_2244, _3840.z, fma(_2243, _3840.y, _3840.x * _2242)) + _3840.w) / _3901;
                                float _3961 = (fma(_2244, _3855.z, fma(_2243, _3855.y, _3855.x * _2242)) + _3855.w) / _3901;
                                float _3965 = 1.0 - dot(vec2(_3960, _3961), vec2(_3960, _3961));
                                float _5212 = isnan(0.0) ? _3965 : (isnan(_3965) ? 0.0 : max(_3965, 0.0));
                                float _3966 = isnan(1.0) ? _5212 : (isnan(_5212) ? 1.0 : min(_5212, 1.0));
                                float _3967 = _3966 * (((isnan(0.0) ? _3953 : (isnan(_3953) ? 0.0 : max(_3953, 0.0))) * _3943) / ((_3956 * 0.699999988079071044921875) + 1.0));
                                float _3979 = exp2(log2(1.0 / ((_3956 * 3.5) + 5.0)) * 0.25);
                                float _3980 = 1.0 - _1152;
                                float _3987 = sqrt(1.0 - ((1.0 - (_3980 * _3980)) * (1.0 - (_3979 * _3979))));
                                float _3988 = _3987 * _3987;
                                float _3989 = _3988 * _3988;
                                float _3990 = _3936 - _3410;
                                float _3991 = _3937 - _3411;
                                float _3992 = _3938 - _3412;
                                float _3996 = inversesqrt(dot(vec3(_3990, _3991, _3992), vec3(_3990, _3991, _3992)));
                                float _4000 = dot(vec3(_1077, _1080, _1083), vec3((-0.0) - _3410, (-0.0) - _3411, (-0.0) - _3412));
                                float _5223 = isnan(0.0) ? _4000 : (isnan(_4000) ? 0.0 : max(_4000, 0.0));
                                float _4003 = isnan(1.0) ? _5223 : (isnan(_5223) ? 1.0 : min(_5223, 1.0));
                                float _4004 = dot(vec3(_1077, _1080, _1083), vec3(_3996 * _3990, _3996 * _3991, _3996 * _3992));
                                float _5234 = isnan(0.0) ? _4004 : (isnan(_4004) ? 0.0 : max(_4004, 0.0));
                                float _4007 = isnan(1.0) ? _5234 : (isnan(_5234) ? 1.0 : min(_5234, 1.0));
                                float _4011 = ((_4007 * _4007) * (_3989 + (-1.0))) + 1.0;
                                float _4012 = _3949 * _3988;
                                float _4013 = _4012 * _4012;
                                float _4019 = ((1.0 - _4013) * dot(vec3(_1077, _1080, _1083), vec3(_3936, _3937, _3938))) + _4013;
                                float _5245 = isnan(0.0) ? _4019 : (isnan(_4019) ? 0.0 : max(_4019, 0.0));
                                float _4020 = isnan(1.0) ? _5245 : (isnan(_5245) ? 1.0 : min(_5245, 1.0));
                                float _4021 = 1.0 - _3988;
                                float _4031 = (0.5 / (((_4020 * ((_4003 * _4021) + _3988)) + 9.9999999392252902907785028219223e-09) + (((_4020 * _4021) + _3988) * _4003))) * _4020;
                                float _5256 = isnan(0.0) ? _4031 : (isnan(_4031) ? 0.0 : max(_4031, 0.0));
                                float _4041 = (_3966 * _3943) * (((_3989 * 3.1415927410125732421875) * (isnan(1.0) ? _5256 : (isnan(_5256) ? 1.0 : min(_5256, 1.0)))) / ((_4011 * _4011) * ((_3956 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3967 * _3813.z;
                                frontier_phi_88_pred_1 = _3967 * _3813.y;
                                frontier_phi_88_pred_2 = _3967 * _3813.x;
                                frontier_phi_88_pred_3 = _4041 * _3825.z;
                                frontier_phi_88_pred_4 = _4041 * _3825.y;
                                frontier_phi_88_pred_5 = _4041 * _3825.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4050 = frontier_phi_88_pred;
                            _4049 = frontier_phi_88_pred_1;
                            _4048 = frontier_phi_88_pred_2;
                            _4047 = frontier_phi_88_pred_3;
                            _4046 = frontier_phi_88_pred_4;
                            _4045 = frontier_phi_88_pred_5;
                            _3755 = _4048 + _3768;
                            _3756 = _4049 + _3769;
                            _3757 = _4050 + _3770;
                            _3752 = _4045 + _3765;
                            _3753 = _4046 + _3766;
                            _3754 = _4047 + _3767;
                            if (_3772 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3765 = _3752;
                                _3766 = _3753;
                                _3767 = _3754;
                                _3768 = _3755;
                                _3769 = _3756;
                                _3770 = _3757;
                                _3771 = _3772;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3757;
                        frontier_phi_82_pred_1 = _3756;
                        frontier_phi_82_pred_2 = _3755;
                        frontier_phi_82_pred_3 = _3754;
                        frontier_phi_82_pred_4 = _3753;
                        frontier_phi_82_pred_5 = _3752;
                    }
                    _3395 = frontier_phi_82_pred;
                    _3393 = frontier_phi_82_pred_1;
                    _3391 = frontier_phi_82_pred_2;
                    _3389 = frontier_phi_82_pred_3;
                    _3387 = frontier_phi_82_pred_4;
                    _3385 = frontier_phi_82_pred_5;
                    uint _3551 = _3550 + 1u;
                    if (_3551 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3544 = _3385;
                        _3545 = _3387;
                        _3546 = _3389;
                        _3547 = _3391;
                        _3548 = _3393;
                        _3549 = _3395;
                        _3550 = _3551;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3391;
                frontier_phi_63_64_ladder_1 = _3395;
                frontier_phi_63_64_ladder_2 = _3393;
                frontier_phi_63_64_ladder_3 = _3389;
                frontier_phi_63_64_ladder_4 = _3387;
                frontier_phi_63_64_ladder_5 = _3385;
            }
            else
            {
                frontier_phi_63_64_ladder = _3269;
                frontier_phi_63_64_ladder_1 = _3273;
                frontier_phi_63_64_ladder_2 = _3271;
                frontier_phi_63_64_ladder_3 = _3267;
                frontier_phi_63_64_ladder_4 = _3265;
                frontier_phi_63_64_ladder_5 = _3263;
            }
            _3384 = frontier_phi_63_64_ladder_5;
            _3386 = frontier_phi_63_64_ladder_4;
            _3388 = frontier_phi_63_64_ladder_3;
            _3390 = frontier_phi_63_64_ladder;
            _3392 = frontier_phi_63_64_ladder_2;
            _3394 = frontier_phi_63_64_ladder_1;
        }
        float _3399 = isnan(1.0) ? _1136 : (isnan(_1136) ? 1.0 : min(_1136, 1.0));
        _3196 = (_3399 * _3390) + _2708;
        _3198 = (_3399 * _3392) + _2710;
        _3200 = (_3399 * _3394) + _2712;
        _3202 = ((_3384 * _1120) * _3399) + _3046;
        _3204 = ((_3386 * _1122) * _3399) + _3048;
        _3206 = ((_3388 * _1123) * _3399) + _3050;
    }
    else
    {
        _3196 = _2708;
        _3198 = _2710;
        _3200 = _2712;
        _3202 = _3046;
        _3204 = _3048;
        _3206 = _3050;
    }
    float _5272 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _5283 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _5294 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _3223 = ((isnan(1.0) ? _5272 : (isnan(_5272) ? 1.0 : min(_5272, 1.0))) * (_3196 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1136))) + ((_3202 + ((isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0))) * _1974)) * cbPerFrame._m0[3u].x);
    float _3224 = ((isnan(1.0) ? _5283 : (isnan(_5283) ? 1.0 : min(_5283, 1.0))) * (_3198 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1136))) + ((_3204 + ((isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0))) * _1974)) * cbPerFrame._m0[3u].x);
    float _3225 = ((isnan(1.0) ? _5294 : (isnan(_5294) ? 1.0 : min(_5294, 1.0))) * (_3200 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1136))) + ((_3206 + ((isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0))) * _1974)) * cbPerFrame._m0[3u].x);
    uint _3226 = _295 + 6u;
    float _3234 = _1058 / cbSceneParam._m0[86u].x;
    float _3235 = _1059 / cbSceneParam._m0[86u].y;
    vec4 _3249 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3234, _3235, (log2((isnan(cbSceneParam._m0[77u].w) ? _981 : (isnan(_981) ? cbSceneParam._m0[77u].w : min(_981, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3251 = _3249.x;
    float _3252 = _3249.y;
    float _3253 = _3249.z;
    float _3254 = _3249.w;
    float _3326;
    float _3328;
    float _3330;
    float _3332;
    if (_981 > cbSceneParam._m0[78u].w)
    {
        float _3288 = isnan(_981) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _981 : min(cbSceneParam._m0[80u].w, _981));
        float _3289 = _3288 / _981;
        float _3300 = _3289 * _1031;
        float _3301 = _1032 * _3289;
        float _3302 = (-0.0) - _3301;
        float _3304 = _3289 * _1033;
        float _3306 = (cbSceneParam._m0[77u].w * _3302) / _3288;
        float _3307 = _3306 + cbSceneParam._m0[79u].w;
        float _3308 = cbSceneParam._m0[79u].w - _3301;
        float _3314 = sqrt(((_3300 * _3300) + (_3301 * _3301)) + (_3304 * _3304));
        float _3317 = (1.0 - (cbSceneParam._m0[77u].w / _3288)) * _3314;
        float _3322 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3324 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3501;
        if (abs((_3302 - _3306) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3501 = ((((_3307 > 0.0) ? exp2(_3322 * _3307) : (2.0 - exp2(_3324 * _3307))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3317;
        }
        else
        {
            float _3445 = 1.0 / cbSceneParam._m0[80u].x;
            float _3446 = isnan(_3308) ? _3307 : (isnan(_3307) ? _3308 : max(_3307, _3308));
            float _3447 = isnan(_3308) ? _3307 : (isnan(_3307) ? _3308 : min(_3307, _3308));
            float _3456 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : min(_3446, 0.0));
            float _3457 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : min(_3447, 0.0));
            _3501 = ((abs(_3314 / _3302) * cbSceneParam._m0[80u].y) * ((((_3456 - _3457) * 2.0) - ((exp2(_3322 * (isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0)))) - exp2(_3322 * (isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))))) * _3445)) - ((exp2(_3324 * _3456) - exp2(_3324 * _3457)) * _3445))) + (_3317 * cbSceneParam._m0[80u].z);
        }
        vec4 _3503 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3234, _3235, 1.0), 0.0);
        float _3512 = exp2((_3501 * (-1.44269502162933349609375)) * (1.0 - _3503.w));
        float _3513 = log2(_3512);
        float _3529 = log2(_3254);
        _3326 = (exp2(_3529 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3513 * cbSceneParam._m0[78u].x)) * _3503.x) / cbSceneParam._m0[78u].x)) + _3251;
        _3328 = (exp2(_3529 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3513 * cbSceneParam._m0[78u].y)) * _3503.y) / cbSceneParam._m0[78u].y)) + _3252;
        _3330 = (exp2(_3529 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3513 * cbSceneParam._m0[78u].z)) * _3503.z) / cbSceneParam._m0[78u].z)) + _3253;
        _3332 = _3512 * _3254;
    }
    else
    {
        _3326 = _3251;
        _3328 = _3252;
        _3330 = _3253;
        _3332 = _3254;
    }
    bool _3539;
    vec4 _3342;
    vec4 _3364;
    float _3366;
    float _3370;
    float _3371;
    float _3372;
    float _3373;
    bool _3383;
    for (;;)
    {
        _3342 = cbMatDynParam._m0[0u];
        float _3344 = roundEven(_3342.y);
        bool _3345 = _3344 == 3.0;
        float _3346 = log2(_3332);
        float _3353 = exp2(_3346 * cbSceneParam._m0[78u].x) * _3223;
        float _3354 = exp2(_3346 * cbSceneParam._m0[78u].y) * _3224;
        float _3355 = exp2(_3346 * cbSceneParam._m0[78u].z) * _3225;
        float _3362 = _1047 + (-0.5);
        _3364 = cbMtdParam._m0[1u];
        _3366 = _3364.y * _3362;
        float _3369 = (_3344 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3370 = _3369 * (_3345 ? _3353 : (_3353 + (cbSceneParam._m0[72u].w * _3326)));
        _3371 = _3369 * (_3345 ? _3354 : (_3354 + (cbSceneParam._m0[72u].w * _3328)));
        _3372 = _3369 * (_3345 ? _3355 : (_3355 + (cbSceneParam._m0[72u].w * _3330)));
        _3373 = _3362 * 0.999000012874603271484375;
        _3383 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3383)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3373) < 0.5)
            {
                _3539 = true;
                break;
            }
        }
        uint _3480 = _1096 + uint(_3342.w);
        if ((cbInstanceData._m0[_3480].w < 1.0) && ((cbInstanceData._m0[_3480].w + _3373) < 0.5))
        {
            _3539 = true;
            break;
        }
        if ((_3366 + 1.0) < _3364.x)
        {
            _3539 = true;
            break;
        }
        _3539 = false;
        break;
    }
    float _3743;
    if (_3539)
    {
        discard_state = true;
        _3743 = 0.0;
    }
    else
    {
        _3743 = cbInstanceData._m0[_3226].w;
    }
    SV_Target.x = _3370;
    SV_Target.y = _3371;
    SV_Target.z = _3372;
    SV_Target.w = _3743;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3226].w;
    discard_exit();
}


