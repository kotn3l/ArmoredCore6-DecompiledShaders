#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1036;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _235 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _235 + 1u;
    uint _244 = _235 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_235].x * cbInstanceData._m0[_235].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((_254 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_255 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _325 = _321.z;
    float _329 = (_321.x * 2.0) + (-1.0);
    float _330 = (_321.y * 2.0) + (-1.0);
    float _331 = dot(vec2(_329, _330), vec2(_329, _330));
    float _3367 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _337 = sqrt(1.0 - (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))));
    float _342 = _329 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_295.x * 2.0) + (-1.0)));
    float _343 = _330 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_295.y * 2.0) + (-1.0)));
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _254) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _255) + cbTextureTilingScale._m0[19u].w));
    float _358 = _356.x;
    float _359 = 1.0 - _358;
    float _392 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_358 - _359) * cbMtdParam._m0[24u].w) + _359) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3378 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _401 = ((((cbMtdParam._m0[10u].x - _280) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _393) + _280;
    float _402 = ((((cbMtdParam._m0[10u].y - _281) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _393) + _281;
    float _403 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _282)) * _393) + _282;
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _418 = _416.x;
    float _420 = _418 - (_418 * _393);
    float _425 = (((_295.z - _325) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _325;
    float _429 = ((cbMtdParam._m0[23u].y - _425) * _393) + _425;
    vec4 _451 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _254) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _255) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _457 = (_451.x * 2.0) + (-1.0);
    float _458 = (_451.y * 2.0) + (-1.0);
    float _459 = dot(vec2(_457, _458), vec2(_457, _458));
    float _3389 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _475 = (_393 * (((cbMtdParam._m0[22u].z * _342) - _342) + _457)) + _342;
    float _476 = (_393 * (((cbMtdParam._m0[22u].z * _343) - _343) + _458)) + _343;
    float _477 = (_393 * (sqrt(1.0 - (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) - _337)) + _337;
    float _479 = cbMtdParam._m0[22u].x + _321.w;
    float _482 = fma(_477, _222 * NORMAL.x, fma(_476, _229 * TANGENT.x, (_215 * _207) * _475));
    float _485 = fma(_477, _222 * NORMAL.y, fma(_476, _229 * TANGENT.y, (_215 * _208) * _475));
    float _488 = fma(_477, _222 * NORMAL.z, fma(_476, _229 * TANGENT.z, (_215 * _209) * _475));
    float _492 = inversesqrt(dot(vec3(_482, _485, _488), vec3(_482, _485, _488)));
    float _493 = _492 * _482;
    float _494 = _492 * _485;
    float _495 = _492 * _488;
    float _3400 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _496 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _3411 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3422 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3433 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3444 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3455 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _501 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _515 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _566 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _556);
    float _567 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _556);
    float _568 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _556);
    float _572 = inversesqrt(dot(vec3(_566, _567, _568), vec3(_566, _567, _568)));
    float _573 = _566 * _572;
    float _574 = _567 * _572;
    float _575 = _568 * _572;
    float _581 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _582 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _603 = fma(_495, cbSceneParam._m0[5u].z, fma(_494, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _493));
    float _606 = fma(_495, cbSceneParam._m0[6u].z, fma(_494, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _493));
    float _609 = fma(_495, cbSceneParam._m0[7u].z, fma(_494, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _493));
    uint _623 = (_235 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3466 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _635 = 1.0 - _501;
    float _636 = _632 * _635;
    float _637 = _633 * _635;
    float _638 = _634 * _635;
    float _643 = (_632 + (-0.039999999105930328369140625)) * _501;
    float _644 = (_633 + (-0.039999999105930328369140625)) * _501;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _501;
    float _646 = _643 + 0.039999999105930328369140625;
    float _648 = _644 + 0.039999999105930328369140625;
    float _649 = _645 + 0.039999999105930328369140625;
    vec4 _658 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _581, cbSceneParam._m0[86u].y * _582));
    float _662 = ((isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * TEXCOORD_5.w) * _658.x;
    float _663 = dot(vec3(_493, _494, _495), vec3(_573, _574, _575));
    float _666 = _663 * 2.0;
    float _670 = (_666 * _493) - _573;
    float _671 = (_666 * _494) - _574;
    float _672 = (_666 * _495) - _575;
    float _676 = abs(dot(vec3(_573, _574, _575), vec3(_493, _494, _495)));
    float _3499 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _678 = sqrt(_496);
    float _691 = exp2((_678 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_678 * 3.0));
    float _697 = (1.0 - _691) * ((_678 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _698 = _691 * _678;
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1035;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _760 = fma(_734, cbModelParam._m0[26u].z, fma(_730, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726));
        float _764 = fma(_734, cbModelParam._m0[27u].z, fma(_730, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726));
        float _768 = fma(_734, cbModelParam._m0[28u].z, fma(_730, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726));
        float _793 = _726 + _493;
        float _794 = _730 + _494;
        float _795 = _734 + _495;
        float _805 = fma(_795, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793)) - _760;
        float _806 = fma(_795, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793)) - _764;
        float _807 = fma(_795, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793)) - _768;
        float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
        float _824 = ((_811 * _805) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_760 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_811 * _806) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_764 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_811 * _807) / cbModelParam._m0[34u].z) + ((((((_768 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        float _863 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_829.x + (-0.5));
        float _865 = _863 * (_829.y + (-0.5));
        float _866 = _863 * (_829.z + (-0.5));
        float _873 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_836.x + (-0.5));
        float _875 = _873 * (_836.y + (-0.5));
        float _876 = _873 * (_836.z + (-0.5));
        float _883 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_843.x + (-0.5));
        float _885 = _883 * (_843.y + (-0.5));
        float _886 = _883 * (_843.z + (-0.5));
        float _893 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_850.x + (-0.5));
        float _895 = _893 * (_850.y + (-0.5));
        float _896 = _893 * (_850.z + (-0.5));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = _864 * 0.5;
        float _901 = _874 * 0.5;
        float _902 = _884 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _917 = (dot(vec3(_493, _494, _495), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _927 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3547 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_929 + 1.0))) + _934) * _897;
        float _944 = _865 * 0.5;
        float _945 = _875 * 0.5;
        float _946 = _885 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_493, _494, _495), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3580 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_971 + 1.0))) + _976) * _898;
        float _986 = _866 * 0.5;
        float _987 = _876 * 0.5;
        float _988 = _886 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_493, _494, _495), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3613 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_1013 + 1.0))) + _1018) * _899;
        _1035 = _866;
        _1037 = _865;
        _1038 = _864;
        _1039 = _876;
        _1040 = _875;
        _1041 = _874;
        _1042 = _886;
        _1043 = _885;
        _1044 = _884;
        _1045 = _899;
        _1046 = _898;
        _1047 = _897;
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _1036;
        _1037 = _1036;
        _1038 = _1036;
        _1039 = _1036;
        _1040 = _1036;
        _1041 = _1036;
        _1042 = _1036;
        _1043 = _1036;
        _1044 = _1036;
        _1045 = _1036;
        _1046 = _1036;
        _1047 = _1036;
        _1048 = 0.0;
        _1049 = 0.0;
        _1050 = 0.0;
    }
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1075 = fma(_734, cbModelParam._m0[30u].z, fma(_730, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _726));
        float _1079 = fma(_734, cbModelParam._m0[31u].z, fma(_730, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _726));
        float _1083 = fma(_734, cbModelParam._m0[32u].z, fma(_730, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _726));
        float _1106 = _726 + _493;
        float _1107 = _730 + _494;
        float _1108 = _734 + _495;
        float _1118 = fma(_1108, cbModelParam._m0[30u].z, fma(_1107, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1106)) - _1075;
        float _1119 = fma(_1108, cbModelParam._m0[31u].z, fma(_1107, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1106)) - _1079;
        float _1120 = fma(_1108, cbModelParam._m0[32u].z, fma(_1107, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1106)) - _1083;
        float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
        float _1137 = ((_1124 * _1118) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1075 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1124 * _1119) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1079 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1124 * _1120) / cbModelParam._m0[35u].z) + ((((((_1083 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        float _1174 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1141.x + (-0.5));
        float _1176 = _1174 * (_1141.y + (-0.5));
        float _1177 = _1174 * (_1141.z + (-0.5));
        float _1184 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1148.x + (-0.5));
        float _1186 = _1184 * (_1148.y + (-0.5));
        float _1187 = _1184 * (_1148.z + (-0.5));
        float _1194 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1155.x + (-0.5));
        float _1196 = _1194 * (_1155.y + (-0.5));
        float _1197 = _1194 * (_1155.z + (-0.5));
        float _1204 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1162.x + (-0.5));
        float _1206 = _1204 * (_1162.y + (-0.5));
        float _1207 = _1204 * (_1162.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_493, _494, _495), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3676 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1238 + 1.0))) + _1243) * _1208;
        float _1253 = _1176 * 0.5;
        float _1254 = _1186 * 0.5;
        float _1255 = _1196 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_493, _494, _495), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3709 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1280 + 1.0))) + _1285) * _1209;
        float _1295 = _1177 * 0.5;
        float _1296 = _1187 * 0.5;
        float _1297 = _1197 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_493, _494, _495), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3742 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1322 + 1.0))) + _1327) * _1210;
        _1344 = _1177;
        _1345 = _1176;
        _1346 = _1175;
        _1347 = _1187;
        _1348 = _1186;
        _1349 = _1185;
        _1350 = _1197;
        _1351 = _1196;
        _1352 = _1195;
        _1353 = _1210;
        _1354 = _1209;
        _1355 = _1208;
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
    }
    else
    {
        _1344 = _1036;
        _1345 = _1036;
        _1346 = _1036;
        _1347 = _1036;
        _1348 = _1036;
        _1349 = _1036;
        _1350 = _1036;
        _1351 = _1036;
        _1352 = _1036;
        _1353 = _1036;
        _1354 = _1036;
        _1355 = _1036;
        _1356 = 0.0;
        _1357 = 0.0;
        _1358 = 0.0;
    }
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1048)) + _1048;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1049)) + _1049;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1050)) + _1050;
    float _1391 = fma(_1370, cbSceneParam._m0[89u].z, fma(_1369, cbSceneParam._m0[89u].y, _1368 * cbSceneParam._m0[89u].x));
    float _1394 = fma(_1370, cbSceneParam._m0[90u].z, fma(_1369, cbSceneParam._m0[90u].y, _1368 * cbSceneParam._m0[90u].x));
    float _1397 = fma(_1370, cbSceneParam._m0[91u].z, fma(_1369, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1368));
    float _1412 = _670 * 0.5;
    float _1413 = _671 * 0.5;
    float _1414 = _672 * 0.5;
    float _1415 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1418 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1421 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1455;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1428 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1035, _1039, _1042, _1045));
        float _1432 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1436 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1443 = dot(vec4(cbModelParam._m0[39u]), vec4(_1412, _1413, _1414, 1.0));
        _1455 = dot(vec3(isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1455 = 1.0;
    }
    float _1466;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1457 = dot(vec4(cbModelParam._m0[40u]), vec4(_1412, _1413, _1414, 1.0));
        _1466 = dot(vec3(isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1457) ? 0.0 : (isnan(0.0) ? _1457 : max(0.0, _1457))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1466 = 1.0;
    }
    float _1470 = (_1466 * cbModelParam._m0[1u].x) + (_1455 * (1.0 - cbModelParam._m0[1u].x));
    float _1480 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _496);
    float _1481 = isnan(_1480) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1480 : min(cbModelParam._m0[25u].z, _1480));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1530 = fma(_734, cbModelParam._m0[13u].z, fma(_730, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _726)) + cbModelParam._m0[13u].w;
        float _1534 = fma(_734, cbModelParam._m0[14u].z, fma(_730, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _726)) + cbModelParam._m0[14u].w;
        float _1538 = fma(_734, cbModelParam._m0[15u].z, fma(_730, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _726)) + cbModelParam._m0[15u].w;
        float _1541 = fma(_672, cbModelParam._m0[13u].z, fma(_671, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _670));
        float _1544 = fma(_672, cbModelParam._m0[14u].z, fma(_671, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _670));
        float _1547 = fma(_672, cbModelParam._m0[15u].z, fma(_671, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _670));
        float _1575;
        if (_1541 > 0.0)
        {
            _1575 = abs((1.0 - _1530) / _1541);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1530 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1575 = frontier_phi_14_12_ladder;
        }
        float _1780;
        if (_1544 > 0.0)
        {
            _1780 = abs((1.0 - _1534) / _1544);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1534 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1780 = frontier_phi_23_19_ladder;
        }
        float _2034;
        if (_1547 > 0.0)
        {
            _2034 = abs((1.0 - _1538) / _1547);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1538 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2034 = frontier_phi_35_30_ladder;
        }
        float _2036 = isnan(_1780) ? _1575 : (isnan(_1575) ? _1780 : min(_1575, _1780));
        float _2037 = isnan(_2034) ? _2036 : (isnan(_2036) ? _2034 : min(_2036, _2034));
        float _2041 = (_2037 * _1541) + _1530;
        float _2042 = (_2037 * _1544) + _1534;
        float _2043 = (_2037 * _1547) + _1538;
        float _2044 = _2037 * 9.9999997473787516355514526367188e-05;
        float _2046 = (-1.0) - _2044;
        float _2048 = _2044 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2043 > _2048) || ((_2043 < _2046) || ((_2042 > _2048) || ((_2042 < _2046) || ((_2041 < _2046) || (_2041 > _2048))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2171 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2043, cbModelParam._m0[9u].z, fma(_2042, cbModelParam._m0[9u].y, _2041 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2043, cbModelParam._m0[10u].z, fma(_2042, cbModelParam._m0[10u].y, _2041 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2043, cbModelParam._m0[11u].z, fma(_2042, cbModelParam._m0[11u].y, _2041 * cbModelParam._m0[11u].x))), _1481);
            frontier_phi_13_35_ladder = _2171.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2171.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2171.x * cbModelParam._m0[1u].y;
        }
        _1563 = frontier_phi_13_35_ladder_2;
        _1565 = frontier_phi_13_35_ladder_1;
        _1567 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1551 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_670, _671, _672), _1481);
        _1563 = _1551.x * cbModelParam._m0[1u].y;
        _1565 = _1551.y * cbModelParam._m0[1u].y;
        _1567 = _1551.z * cbModelParam._m0[1u].y;
    }
    float _1571 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _496);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1571 : min(cbModelParam._m0[25u].w, _1571));
    float _1663;
    float _1665;
    float _1667;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1627 = fma(_734, cbModelParam._m0[21u].z, fma(_730, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _726)) + cbModelParam._m0[21u].w;
        float _1631 = fma(_734, cbModelParam._m0[22u].z, fma(_730, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _726)) + cbModelParam._m0[22u].w;
        float _1635 = fma(_734, cbModelParam._m0[23u].z, fma(_730, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _726)) + cbModelParam._m0[23u].w;
        float _1638 = fma(_672, cbModelParam._m0[21u].z, fma(_671, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _670));
        float _1641 = fma(_672, cbModelParam._m0[22u].z, fma(_671, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _670));
        float _1644 = fma(_672, cbModelParam._m0[23u].z, fma(_671, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _670));
        float _1785;
        if (_1638 > 0.0)
        {
            _1785 = abs((1.0 - _1627) / _1638);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1627 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1785 = frontier_phi_25_21_ladder;
        }
        float _2061;
        if (_1641 > 0.0)
        {
            _2061 = abs((1.0 - _1631) / _1641);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1631 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2061 = frontier_phi_37_32_ladder;
        }
        float _2274;
        if (_1644 > 0.0)
        {
            _2274 = abs((1.0 - _1635) / _1644);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1635 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2274 = frontier_phi_46_43_ladder;
        }
        float _2276 = isnan(_2061) ? _1785 : (isnan(_1785) ? _2061 : min(_1785, _2061));
        float _2277 = isnan(_2274) ? _2276 : (isnan(_2276) ? _2274 : min(_2276, _2274));
        float _2281 = (_2277 * _1638) + _1627;
        float _2282 = (_2277 * _1641) + _1631;
        float _2283 = (_2277 * _1644) + _1635;
        float _2284 = _2277 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2284;
        float _2287 = _2284 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2283 > _2287) || ((_2283 < _2285) || ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 < _2285) || (_2281 > _2287))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2283, cbModelParam._m0[17u].z, fma(_2282, cbModelParam._m0[17u].y, _2281 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2283, cbModelParam._m0[18u].z, fma(_2282, cbModelParam._m0[18u].y, _2281 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2283, cbModelParam._m0[19u].z, fma(_2282, cbModelParam._m0[19u].y, _2281 * cbModelParam._m0[19u].x))), _1572);
            frontier_phi_22_46_ladder = _2482.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2482.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2482.x * cbModelParam._m0[1u].z;
        }
        _1663 = frontier_phi_22_46_ladder_2;
        _1665 = frontier_phi_22_46_ladder_1;
        _1667 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_670, _671, _672), _1572);
        _1663 = _1647.x * cbModelParam._m0[1u].z;
        _1665 = _1647.y * cbModelParam._m0[1u].z;
        _1667 = _1647.z * cbModelParam._m0[1u].z;
    }
    float _1680 = (((_697 * _646) + _698) * _662) * ((cbModelParam._m0[1u].w * (_1663 - _1563)) + _1563);
    float _1682 = (((_697 * _648) + _698) * _662) * ((cbModelParam._m0[1u].w * (_1665 - _1565)) + _1565);
    float _1684 = (((_697 * _649) + _698) * _662) * ((cbModelParam._m0[1u].w * (_1667 - _1567)) + _1567);
    float _1687 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1690 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1693 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, _1680 * cbSceneParam._m0[91u].x));
    uvec4 _1703 = floatBitsToUint(cbInstanceData._m0[_235 + 5u]);
    uint _1705 = _1703.x * 14u;
    uint _1706 = _1705 + 13u;
    float _1713 = _662 + (-1.0);
    float _1718 = (cbLight._m0[_1706].x * _1713) + 1.0;
    float _1719 = (cbLight._m0[_1706].y * _1713) + 1.0;
    float _1720 = (cbLight._m0[_1706].z * _1713) + 1.0;
    float _1721 = (cbLight._m0[_1706].w * _1713) + 1.0;
    uint _1722 = _1705 + 5u;
    float _1728 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1732 = _1705 + 4u;
    float _1739 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
    uint _1743 = _1705 | 1u;
    float _1754 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_493, _494, _495));
    float _1757 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_493, _494, _495));
    float _3878 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _3889 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1762 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.3183098733425140380859375;
    float _1764 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
    float _1771 = ((cbLight._m0[_1722].x * _1728) * _1764) + ((cbLight._m0[_1732].x * _1739) * _1762);
    float _1772 = ((_1728 * cbLight._m0[_1722].y) * _1764) + ((_1739 * cbLight._m0[_1732].y) * _1762);
    float _1773 = ((_1728 * cbLight._m0[_1722].z) * _1764) + ((_1739 * cbLight._m0[_1732].z) * _1762);
    uvec4 _1777 = floatBitsToUint(cbLight._m0[_1705 + 12u]);
    bool _1779 = _1777.x == 0u;
    float _1790;
    float _1792;
    float _1794;
    if (_1779)
    {
        _1790 = _1771;
        _1792 = _1772;
        _1794 = _1773;
    }
    else
    {
        uint _1798 = _1705 + 6u;
        float _1814 = (dot(vec3(cbLight._m0[_1705 + 2u].xyz), vec3(_493, _494, _495)) * 0.5) + 0.5;
        float _1815 = _1814 * _1814;
        float _3900 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1817 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1790 = (((cbLight._m0[_1798].x * 0.3183098733425140380859375) * _1816) * _1817) + _1771;
        _1792 = (((cbLight._m0[_1798].y * 0.3183098733425140380859375) * _1816) * _1817) + _1772;
        _1794 = (((cbLight._m0[_1798].z * 0.3183098733425140380859375) * _1816) * _1817) + _1773;
    }
    bool _1797 = _1777.y == 0u;
    float _1835;
    float _1837;
    float _1839;
    if (_1797)
    {
        _1835 = _1790;
        _1837 = _1792;
        _1839 = _1794;
    }
    else
    {
        uint _2005 = _1705 + 7u;
        float _2021 = (dot(vec3(cbLight._m0[_1705 + 3u].xyz), vec3(_493, _494, _495)) * 0.5) + 0.5;
        float _2022 = _2021 * _2021;
        float _3916 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2023 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2024 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _1835 = (((cbLight._m0[_2005].x * 0.3183098733425140380859375) * _2023) * _2024) + _1790;
        _1837 = (((cbLight._m0[_2005].y * 0.3183098733425140380859375) * _2023) * _2024) + _1792;
        _1839 = (((cbLight._m0[_2005].z * 0.3183098733425140380859375) * _2023) * _2024) + _1794;
    }
    uint _1842 = _1705 + 8u;
    float _1855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1705].w)) * _496) * 0.949999988079071044921875);
    float _1856 = _1855 * _1855;
    float _1857 = cbLight._m0[_1705].x + _573;
    float _1858 = cbLight._m0[_1705].y + _574;
    float _1859 = cbLight._m0[_1705].z + _575;
    float _1863 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
    float _1864 = _1863 * _1857;
    float _1865 = _1863 * _1858;
    float _1866 = _1863 * _1859;
    float _1867 = dot(vec3(_493, _494, _495), vec3(cbLight._m0[_1705].xyz));
    float _3932 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _1871 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1872 = dot(vec3(_493, _494, _495), vec3(_1864, _1865, _1866));
    float _3954 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1876 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_1864, _1865, _1866));
    float _3965 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1880 = _1856 * _1856;
    float _1884 = ((_1875 * _1875) * (_1880 + (-1.0))) + 1.0;
    float _1892 = exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0);
    float _1893 = 0.959999978542327880859375 - _643;
    float _1895 = 0.959999978542327880859375 - _644;
    float _1896 = 0.959999978542327880859375 - _645;
    float _1903 = 1.0 - _1856;
    float _1914 = (0.5 / (((_1871 * ((_1870 * _1903) + _1856)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _1903) + _1856) * _1870))) * _1870;
    float _3976 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1916 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1880 / ((_1884 * _1884) * 3.141590118408203125));
    uint _1927 = _1705 + 9u;
    float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1743].w)) * _496) * 0.949999988079071044921875);
    float _1939 = _1938 * _1938;
    float _1940 = cbLight._m0[_1743].x + _573;
    float _1941 = cbLight._m0[_1743].y + _574;
    float _1942 = cbLight._m0[_1743].z + _575;
    float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
    float _1947 = _1946 * _1940;
    float _1948 = _1946 * _1941;
    float _1949 = _1946 * _1942;
    float _1950 = dot(vec3(_493, _494, _495), vec3(cbLight._m0[_1743].xyz));
    float _3987 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1954 = dot(vec3(_493, _494, _495), vec3(_1947, _1948, _1949));
    float _3998 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1958 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_1947, _1948, _1949));
    float _4009 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1962 = _1939 * _1939;
    float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
    float _1973 = exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0);
    float _1980 = 1.0 - _1939;
    float _1990 = (0.5 / (((_1871 * ((_1953 * _1980) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _1980) + _1939) * _1953))) * _1953;
    float _4020 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1992 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
    float _2002 = (((((_1973 * _1893) + _646) * cbLight._m0[_1927].x) * _1992) * _1728) + (((((_1892 * _1893) + _646) * cbLight._m0[_1842].x) * _1916) * _1739);
    float _2003 = (((((_1973 * _1895) + _648) * cbLight._m0[_1927].y) * _1992) * _1728) + (((((_1892 * _1895) + _648) * cbLight._m0[_1842].y) * _1916) * _1739);
    float _2004 = (((((_1973 * _1896) + _649) * cbLight._m0[_1927].z) * _1992) * _1728) + (((((_1892 * _1896) + _649) * cbLight._m0[_1842].z) * _1916) * _1739);
    float _2066;
    float _2068;
    float _2070;
    if (_1779)
    {
        _2066 = _2002;
        _2068 = _2003;
        _2070 = _2004;
    }
    else
    {
        uint _2072 = _1705 + 2u;
        uint _2076 = _1705 + 10u;
        float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _496) * 0.949999988079071044921875);
        float _2091 = _2090 * _2090;
        float _2092 = cbLight._m0[_2072].x + _573;
        float _2093 = cbLight._m0[_2072].y + _574;
        float _2094 = cbLight._m0[_2072].z + _575;
        float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
        float _2099 = _2098 * _2092;
        float _2100 = _2098 * _2093;
        float _2101 = _2098 * _2094;
        float _2102 = dot(vec3(_493, _494, _495), vec3(cbLight._m0[_2072].xyz));
        float _4031 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2106 = dot(vec3(_493, _494, _495), vec3(_2099, _2100, _2101));
        float _4042 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2110 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2099, _2100, _2101));
        float _4053 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2114 = _2091 * _2091;
        float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
        float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0);
        float _2132 = 1.0 - _2091;
        float _2142 = (0.5 / (((_1871 * ((_2105 * _2132) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _2132) + _2091) * _2105))) * _2105;
        float _4064 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2144 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
        float _2145 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _2066 = (((((_2125 * _1893) + _646) * cbLight._m0[_2076].x) * _2144) * _2145) + _2002;
        _2068 = (((((_2125 * _1895) + _648) * cbLight._m0[_2076].y) * _2144) * _2145) + _2003;
        _2070 = (((((_2125 * _1896) + _649) * cbLight._m0[_2076].z) * _2144) * _2145) + _2004;
    }
    float _2180;
    float _2182;
    float _2184;
    if (_1797)
    {
        _2180 = _2066;
        _2182 = _2068;
        _2184 = _2070;
    }
    else
    {
        uint _2191 = _1705 + 3u;
        uint _2195 = _1705 + 11u;
        float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _496) * 0.949999988079071044921875);
        float _2210 = _2209 * _2209;
        float _2211 = cbLight._m0[_2191].x + _573;
        float _2212 = cbLight._m0[_2191].y + _574;
        float _2213 = cbLight._m0[_2191].z + _575;
        float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
        float _2218 = _2217 * _2211;
        float _2219 = _2217 * _2212;
        float _2220 = _2217 * _2213;
        float _2221 = dot(vec3(_493, _494, _495), vec3(cbLight._m0[_2191].xyz));
        float _4080 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2225 = dot(vec3(_493, _494, _495), vec3(_2218, _2219, _2220));
        float _4091 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2229 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2218, _2219, _2220));
        float _4102 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2233 = _2210 * _2210;
        float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
        float _2244 = exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0);
        float _2251 = 1.0 - _2210;
        float _2261 = (0.5 / (((_1871 * ((_2224 * _2251) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _2251) + _2210) * _2224))) * _2224;
        float _4113 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2263 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
        float _2264 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _2180 = (((((_2244 * _1893) + _646) * cbLight._m0[_2195].x) * _2263) * _2264) + _2066;
        _2182 = (((((_2244 * _1895) + _648) * cbLight._m0[_2195].y) * _2263) * _2264) + _2068;
        _2184 = (((((_2244 * _1896) + _649) * cbLight._m0[_2195].z) * _2263) * _2264) + _2070;
    }
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    if (_1703.y == 0u)
    {
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2339;
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2339;
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2339;
        uvec4 _2354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2355 = _2354.x;
        uint _2366 = uint((float(_2354.y) * floor(float(uint(cbSceneParam._m0[85u].y * _582) / _2355))) + floor(float(uint(cbSceneParam._m0[85u].x * _581) / _2355)));
        float _2376 = (log2(_2342 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2377 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        uint _2380 = uint(isnan(14.0) ? _2377 : (isnan(_2377) ? 14.0 : min(_2377, 14.0)));
        uvec4 _2385 = texelFetch(g_lightClusterGridBuffer, int(((_2380 << 2u) + (_2366 << 6u)) >> 2u));
        uint _2386 = _2385.x;
        uint _2387 = _2354.z;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        if (((((1u << ((_2387 >> 4u) & 15u)) + 4294967295u) & _2386) == 0u) || ((_2387 & 240u) == 0u))
        {
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
            _2493 = 0.0;
            _2495 = 0.0;
            _2497 = 0.0;
        }
        else
        {
            float _2488;
            float _2490;
            float _2492;
            float _2494;
            float _2496;
            float _2498;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            uint _2638 = 0u;
            uint _2647;
            bool _2648;
            for (;;)
            {
                _2647 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2638 << 2u)) >> 2u)).x;
                _2648 = _2647 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2648)
                {
                    frontier_phi_61_pred = _2632;
                    frontier_phi_61_pred_1 = _2637;
                    frontier_phi_61_pred_2 = _2636;
                    frontier_phi_61_pred_3 = _2635;
                    frontier_phi_61_pred_4 = _2634;
                    frontier_phi_61_pred_5 = _2633;
                }
                else
                {
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    uint _2762;
                    _2756 = _2632;
                    _2757 = _2633;
                    _2758 = _2634;
                    _2759 = _2635;
                    _2760 = _2636;
                    _2761 = _2637;
                    _2762 = _2647;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    for (;;)
                    {
                        uint _2766 = uint(findLSB(_2762)) + (_2638 << 5u);
                        uint _2763 = (_2762 + 4294967295u) & _2762;
                        uint _2768 = _2766 * 48u;
                        vec4 _2782 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 3u)).x));
                        uint _2788 = (_2766 * 48u) + 4u;
                        vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2788)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 3u)).x));
                        uint _2807 = (_2766 * 48u) + 8u;
                        vec3 _2818 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x));
                        float _2822 = _2782.x - _2340;
                        float _2823 = _2782.y - _2341;
                        float _2824 = _2782.z - _2342;
                        float _2825 = dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824));
                        float _2828 = inversesqrt(_2825);
                        float _2829 = _2828 * _2822;
                        float _2830 = _2828 * _2823;
                        float _2831 = _2828 * _2824;
                        float _2832 = dot(vec3(_603, _606, _609), vec3(_2829, _2830, _2831));
                        float _2837 = 1.0 - (_2825 * _2782.w);
                        float _4139 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2838 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                        float _2839 = sqrt(_2825) * _2801.w;
                        float _2842 = 1.39999997615814208984375 / (_2839 + 1.39999997615814208984375);
                        float _2843 = _2842 * _2842;
                        float _2846 = ((1.0 - _2843) * _2832) + _2843;
                        float _2849 = _2839 * _2839;
                        float _2853 = ((isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0))) * _2838) / ((_2849 * 0.699999988079071044921875) + 1.0);
                        float _2857 = (-0.0) - _2340;
                        float _2858 = (-0.0) - _2341;
                        float _2859 = (-0.0) - _2342;
                        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
                        float _2864 = _2863 * _2857;
                        float _2865 = _2863 * _2858;
                        float _2866 = _2863 * _2859;
                        float _2874 = exp2(log2(1.0 / ((_2849 * 3.5) + 5.0)) * 0.25);
                        float _2875 = 1.0 - _678;
                        float _2882 = sqrt(1.0 - ((1.0 - (_2875 * _2875)) * (1.0 - (_2874 * _2874))));
                        float _2883 = _2882 * _2882;
                        float _2884 = _2883 * _2883;
                        float _2885 = _2864 + _2829;
                        float _2886 = _2865 + _2830;
                        float _2887 = _2866 + _2831;
                        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
                        float _2895 = dot(vec3(_603, _606, _609), vec3(_2864, _2865, _2866));
                        float _4155 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2899 = dot(vec3(_603, _606, _609), vec3(_2891 * _2885, _2891 * _2886, _2891 * _2887));
                        float _4166 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2906 = ((_2902 * _2902) * (_2884 + (-1.0))) + 1.0;
                        float _2907 = _2842 * _2883;
                        float _2908 = _2907 * _2907;
                        float _2911 = ((1.0 - _2908) * _2832) + _2908;
                        float _4177 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2912 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2913 = 1.0 - _2883;
                        float _2923 = (0.5 / (((_2912 * ((_2898 * _2913) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2912 * _2913) + _2883) * _2898))) * _2912;
                        float _4188 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2934 = (((_2884 * 3.1415927410125732421875) * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) / ((_2906 * _2906) * ((_2849 * 2.1991131305694580078125) + 3.141590118408203125))) * _2838;
                        _2691 = (_2853 * _2801.x) + _2759;
                        _2692 = (_2853 * _2801.y) + _2760;
                        _2693 = (_2853 * _2801.z) + _2761;
                        _2688 = (_2934 * _2818.x) + _2756;
                        _2689 = (_2934 * _2818.y) + _2757;
                        _2690 = (_2934 * _2818.z) + _2758;
                        if (_2763 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2756 = _2688;
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2763;
                        }
                    }
                    frontier_phi_61_pred = _2688;
                    frontier_phi_61_pred_1 = _2693;
                    frontier_phi_61_pred_2 = _2692;
                    frontier_phi_61_pred_3 = _2691;
                    frontier_phi_61_pred_4 = _2690;
                    frontier_phi_61_pred_5 = _2689;
                }
                _2488 = frontier_phi_61_pred;
                _2498 = frontier_phi_61_pred_1;
                _2496 = frontier_phi_61_pred_2;
                _2494 = frontier_phi_61_pred_3;
                _2492 = frontier_phi_61_pred_4;
                _2490 = frontier_phi_61_pred_5;
                uint _2639 = _2638 + 1u;
                if (_2639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2632 = _2488;
                    _2633 = _2490;
                    _2634 = _2492;
                    _2635 = _2494;
                    _2636 = _2496;
                    _2637 = _2498;
                    _2638 = _2639;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
            _2493 = _2494;
            _2495 = _2496;
            _2497 = _2498;
        }
        uvec4 _2501 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2502 = _2501.z;
        uint _2504 = (_2502 >> 8u) & 15u;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((4294967295u << _2504) & _2386) == 0u)
        {
            _2600 = _2487;
            _2602 = _2489;
            _2604 = _2491;
            _2606 = _2493;
            _2608 = _2495;
            _2610 = _2497;
        }
        else
        {
            float _2625 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
            float _2626 = _2625 * _2340;
            float _2627 = _2625 * _2341;
            float _2628 = _2625 * _2342;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2504 < ((_2502 >> 12u) & 15u))
            {
                float _2601;
                float _2603;
                float _2605;
                float _2607;
                float _2609;
                float _2611;
                float _2739 = _2487;
                float _2740 = _2489;
                float _2741 = _2491;
                float _2742 = _2493;
                float _2743 = _2495;
                float _2744 = _2497;
                uint _2745 = _2504;
                uint _2754;
                bool _2755;
                for (;;)
                {
                    _2754 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2745 << 2u)) >> 2u)).x;
                    _2755 = _2754 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2755)
                    {
                        frontier_phi_67_pred = _2742;
                        frontier_phi_67_pred_1 = _2743;
                        frontier_phi_67_pred_2 = _2744;
                        frontier_phi_67_pred_3 = _2741;
                        frontier_phi_67_pred_4 = _2740;
                        frontier_phi_67_pred_5 = _2739;
                    }
                    else
                    {
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _2952 = _2739;
                        float _2953 = _2740;
                        float _2954 = _2741;
                        float _2955 = _2742;
                        float _2956 = _2743;
                        float _2957 = _2744;
                        uint _2958 = _2754;
                        uint _2959;
                        vec4 _2984;
                        float _2985;
                        vec4 _3000;
                        vec3 _3012;
                        vec4 _3028;
                        vec4 _3043;
                        float _3089;
                        bool _3090;
                        for (;;)
                        {
                            uint _2969 = ((_2745 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2958));
                            _2959 = (_2958 + 4294967295u) & _2958;
                            uint _2971 = _2969 * 40u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            _2985 = _2984.w;
                            uint _2987 = (_2969 * 40u) + 4u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3002 = (_2969 * 40u) + 8u;
                            _3012 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x));
                            uint _3015 = (_2969 * 40u) + 16u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3030 = (_2969 * 40u) + 20u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3045 = (_2969 * 40u) + 24u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3064 = (_2969 * 40u) + 28u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            _3089 = fma(_2342, _3077.z, fma(_2341, _3077.y, _3077.x * _2340)) + _3077.w;
                            _3090 = !((fma(_2342, _3058.z, fma(_2341, _3058.y, _3058.x * _2340)) + _3058.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3090)
                            {
                                float _3117 = _2984.x - _2340;
                                float _3118 = _2984.y - _2341;
                                float _3119 = _2984.z - _2342;
                                float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                                float _3123 = inversesqrt(_3120);
                                float _3124 = _3123 * _3117;
                                float _3125 = _3123 * _3118;
                                float _3126 = _3123 * _3119;
                                float _3130 = 1.0 - (_3120 / (_2985 * _2985));
                                float _4199 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3135 = sqrt(_3120) * _3000.w;
                                float _3137 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                                float _3138 = _3137 * _3137;
                                float _3141 = ((1.0 - _3138) * dot(vec3(_3124, _3125, _3126), vec3(_603, _606, _609))) + _3138;
                                float _3144 = _3135 * _3135;
                                float _3148 = (fma(_2342, _3028.z, fma(_2341, _3028.y, _3028.x * _2340)) + _3028.w) / _3089;
                                float _3149 = (fma(_2342, _3043.z, fma(_2341, _3043.y, _3043.x * _2340)) + _3043.w) / _3089;
                                float _3153 = 1.0 - dot(vec2(_3148, _3149), vec2(_3148, _3149));
                                float _4215 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3155 = _3154 * (((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3131) / ((_3144 * 0.699999988079071044921875) + 1.0));
                                float _3167 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                                float _3168 = 1.0 - _678;
                                float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                                float _3176 = _3175 * _3175;
                                float _3177 = _3176 * _3176;
                                float _3178 = _3124 - _2626;
                                float _3179 = _3125 - _2627;
                                float _3180 = _3126 - _2628;
                                float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                                float _3188 = dot(vec3(_603, _606, _609), vec3((-0.0) - _2626, (-0.0) - _2627, (-0.0) - _2628));
                                float _4226 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3191 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3192 = dot(vec3(_603, _606, _609), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                                float _4237 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3195 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                                float _3200 = _3137 * _3176;
                                float _3201 = _3200 * _3200;
                                float _3207 = ((1.0 - _3201) * dot(vec3(_603, _606, _609), vec3(_3124, _3125, _3126))) + _3201;
                                float _4248 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3209 = 1.0 - _3176;
                                float _3219 = (0.5 / (((_3208 * ((_3191 * _3209) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3176) * _3191))) * _3208;
                                float _4259 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3229 = (_3154 * _3131) * (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) / ((_3199 * _3199) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3229 * _3012.x;
                                frontier_phi_73_pred_1 = _3229 * _3012.y;
                                frontier_phi_73_pred_2 = _3155 * _3000.z;
                                frontier_phi_73_pred_3 = _3155 * _3000.y;
                                frontier_phi_73_pred_4 = _3155 * _3000.x;
                                frontier_phi_73_pred_5 = _3229 * _3012.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3233 = frontier_phi_73_pred;
                            _3234 = frontier_phi_73_pred_1;
                            _3238 = frontier_phi_73_pred_2;
                            _3237 = frontier_phi_73_pred_3;
                            _3236 = frontier_phi_73_pred_4;
                            _3235 = frontier_phi_73_pred_5;
                            _2942 = _3236 + _2955;
                            _2943 = _3237 + _2956;
                            _2944 = _3238 + _2957;
                            _2939 = _3233 + _2952;
                            _2940 = _3234 + _2953;
                            _2941 = _3235 + _2954;
                            if (_2959 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2959;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2942;
                        frontier_phi_67_pred_1 = _2943;
                        frontier_phi_67_pred_2 = _2944;
                        frontier_phi_67_pred_3 = _2941;
                        frontier_phi_67_pred_4 = _2940;
                        frontier_phi_67_pred_5 = _2939;
                    }
                    _2607 = frontier_phi_67_pred;
                    _2609 = frontier_phi_67_pred_1;
                    _2611 = frontier_phi_67_pred_2;
                    _2605 = frontier_phi_67_pred_3;
                    _2603 = frontier_phi_67_pred_4;
                    _2601 = frontier_phi_67_pred_5;
                    uint _2746 = _2745 + 1u;
                    if (_2746 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2739 = _2601;
                        _2740 = _2603;
                        _2741 = _2605;
                        _2742 = _2607;
                        _2743 = _2609;
                        _2744 = _2611;
                        _2745 = _2746;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2609;
                frontier_phi_55_56_ladder_1 = _2611;
                frontier_phi_55_56_ladder_2 = _2607;
                frontier_phi_55_56_ladder_3 = _2605;
                frontier_phi_55_56_ladder_4 = _2603;
                frontier_phi_55_56_ladder_5 = _2601;
            }
            else
            {
                frontier_phi_55_56_ladder = _2495;
                frontier_phi_55_56_ladder_1 = _2497;
                frontier_phi_55_56_ladder_2 = _2493;
                frontier_phi_55_56_ladder_3 = _2491;
                frontier_phi_55_56_ladder_4 = _2489;
                frontier_phi_55_56_ladder_5 = _2487;
            }
            _2600 = frontier_phi_55_56_ladder_5;
            _2602 = frontier_phi_55_56_ladder_4;
            _2604 = frontier_phi_55_56_ladder_3;
            _2606 = frontier_phi_55_56_ladder_2;
            _2608 = frontier_phi_55_56_ladder;
            _2610 = frontier_phi_55_56_ladder_1;
        }
        float _2615 = isnan(1.0) ? _662 : (isnan(_662) ? 1.0 : min(_662, 1.0));
        _2399 = (_2615 * _2606) + _1835;
        _2401 = (_2615 * _2608) + _1837;
        _2403 = (_2615 * _2610) + _1839;
        _2405 = ((_2600 * _646) * _2615) + _2180;
        _2407 = ((_2602 * _648) * _2615) + _2182;
        _2409 = ((_2604 * _649) * _2615) + _2184;
    }
    else
    {
        _2399 = _1835;
        _2401 = _1837;
        _2403 = _1839;
        _2405 = _2180;
        _2407 = _2182;
        _2409 = _2184;
    }
    float _4275 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4286 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4297 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    uint _2429 = _235 + 6u;
    float _2437 = _581 / cbSceneParam._m0[86u].x;
    float _2438 = _582 / cbSceneParam._m0[86u].y;
    vec4 _2452 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2437, _2438, (log2((isnan(cbSceneParam._m0[77u].w) ? _515 : (isnan(_515) ? cbSceneParam._m0[77u].w : min(_515, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2454 = _2452.x;
    float _2455 = _2452.y;
    float _2456 = _2452.z;
    float _2457 = _2452.w;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    if (_515 > cbSceneParam._m0[78u].w)
    {
        float _2512 = isnan(_515) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _515 : min(cbSceneParam._m0[80u].w, _515));
        float _2513 = _2512 / _515;
        float _2524 = _2513 * _566;
        float _2525 = _567 * _2513;
        float _2526 = (-0.0) - _2525;
        float _2528 = _2513 * _568;
        float _2530 = (cbSceneParam._m0[77u].w * _2526) / _2512;
        float _2531 = _2530 + cbSceneParam._m0[79u].w;
        float _2532 = cbSceneParam._m0[79u].w - _2525;
        float _2538 = sqrt(((_2524 * _2524) + (_2525 * _2525)) + (_2528 * _2528));
        float _2541 = (1.0 - (cbSceneParam._m0[77u].w / _2512)) * _2538;
        float _2546 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2548 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2701;
        if (abs((_2526 - _2530) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2701 = ((((_2531 > 0.0) ? exp2(_2546 * _2531) : (2.0 - exp2(_2548 * _2531))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2541;
        }
        else
        {
            float _2661 = 1.0 / cbSceneParam._m0[80u].x;
            float _2662 = isnan(_2532) ? _2531 : (isnan(_2531) ? _2532 : max(_2531, _2532));
            float _2663 = isnan(_2532) ? _2531 : (isnan(_2531) ? _2532 : min(_2531, _2532));
            float _2672 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : min(_2662, 0.0));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            _2701 = ((abs(_2538 / _2526) * cbSceneParam._m0[80u].y) * ((((_2672 - _2673) * 2.0) - ((exp2(_2546 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0)))) - exp2(_2546 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0))))) * _2661)) - ((exp2(_2548 * _2672) - exp2(_2548 * _2673)) * _2661))) + (_2541 * cbSceneParam._m0[80u].z);
        }
        vec4 _2703 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2437, _2438, 1.0), 0.0);
        float _2712 = exp2((_2701 * (-1.44269502162933349609375)) * (1.0 - _2703.w));
        float _2713 = log2(_2712);
        float _2729 = log2(_2457);
        _2550 = (exp2(_2729 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].x)) * _2703.x) / cbSceneParam._m0[78u].x)) + _2454;
        _2552 = (exp2(_2729 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].y)) * _2703.y) / cbSceneParam._m0[78u].y)) + _2455;
        _2554 = (exp2(_2729 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].z)) * _2703.z) / cbSceneParam._m0[78u].z)) + _2456;
        _2556 = _2712 * _2457;
    }
    else
    {
        _2550 = _2454;
        _2552 = _2455;
        _2554 = _2456;
        _2556 = _2457;
    }
    float _2568 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2569 = _2568 == 3.0;
    float _2570 = log2(_2556);
    float _2577 = exp2(_2570 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2399 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _662))) + ((_2405 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1470)) * cbPerFrame._m0[3u].x));
    float _2578 = exp2(_2570 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2401 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _662))) + ((_2407 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1470)) * cbPerFrame._m0[3u].x));
    float _2579 = exp2(_2570 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2403 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _662))) + ((_2409 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1470)) * cbPerFrame._m0[3u].x));
    float _2588 = (_2568 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2588 * (_2569 ? _2577 : (_2577 + (cbSceneParam._m0[72u].w * _2550)));
    SV_Target.y = _2588 * (_2569 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2552)));
    SV_Target.z = _2588 * (_2569 ? _2579 : (_2579 + (cbSceneParam._m0[72u].w * _2554)));
    SV_Target.w = cbInstanceData._m0[_2429].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2429].w;
}


