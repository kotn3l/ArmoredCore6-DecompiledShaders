#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1356;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3966 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3977 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3988 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].y) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3999 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _437 = (_430 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _438 = (_430 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _439 = (_430 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) + _449;
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    float _526 = ((_496.z - _517) * _430) + _517;
    float _529 = ((((_496.x - _515) * _430) + _515) * 2.0) + (-1.0);
    float _530 = ((((_496.y - _516) * _430) + _516) * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _4010 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))));
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _570 = (_529 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_471.x * 2.0) + (-1.0)))) + (((_558.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _571 = (_530 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_471.y * 2.0) + (-1.0)))) + (((_558.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _585 = _583.x;
    float _586 = 1.0 - _585;
    float _612 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_585 - _586) * cbMtdParam._m0[24u].w) + _586) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4021 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _621 = ((((cbMtdParam._m0[10u].x - _456) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _613) + _456;
    float _622 = ((((cbMtdParam._m0[10u].y - _457) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _613) + _457;
    float _623 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _458)) * _613) + _458;
    vec4 _635 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _651 = _649.x;
    float _669 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _298) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _299) + cbTextureTilingScale._m0[9u].w)).x - _651) * _430) + _651;
    float _673 = ((_635.x - _669) * cbMtdParam._m0[19u].z) + _669;
    float _675 = _673 - (_673 * _613);
    float _680 = (((_471.z - _526) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _526;
    float _684 = ((_558.z - _680) * cbMtdParam._m0[19u].w) + _680;
    float _688 = ((cbMtdParam._m0[23u].y - _684) * _613) + _684;
    vec4 _707 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _709 = _707.x;
    float _710 = _707.y;
    float _714 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_248, _249, _250, 0.0));
    vec4 _729 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _298) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _299) + cbTextureTilingScale._m0[18u].w));
    float _731 = _729.x;
    float _736 = fract(_729.w + cbPerFrame._m0[22u].x);
    float _738 = (1.0 - _736) * _731;
    float _743 = ((_736 + (-1.0)) + _731) * 9.0;
    float _745 = ((_731 + (-1.0)) + _736) * 9.0;
    float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _747 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _761 = (_738 * ((_729.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _746 : (isnan(_746) ? 3.0 : min(_746, 3.0))) * 3.1415927410125732421875);
    float _763 = (_738 * ((_729.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _747 : (isnan(_747) ? 3.0 : min(_747, 3.0))) * 3.1415927410125732421875);
    float _767 = inversesqrt(dot(vec3(_761, _763, 1.0), vec3(_761, _763, 1.0)));
    float _783 = (((((0.5 - _709) + ((_761 * 0.5) * _767)) * _714) + _709) * 2.0) + (-1.0);
    float _784 = (((((0.5 - _710) + ((_767 * 0.5) * _763)) * _714) + _710) * 2.0) + (-1.0);
    float _785 = dot(vec2(_783, _784), vec2(_783, _784));
    float _4052 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _801 = ((((cbMtdParam._m0[22u].z * _570) - _570) + _783) * _613) + _570;
    float _802 = ((((cbMtdParam._m0[22u].z * _571) - _571) + _784) * _613) + _571;
    float _803 = (_613 * (sqrt(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) - _536)) + _536;
    float _805 = cbMtdParam._m0[22u].x + _558.w;
    float _808 = fma(_803, _248, fma(_802, _254 * TANGENT.x, (_240 * _232) * _801));
    float _811 = fma(_803, _249, fma(_802, _254 * TANGENT.y, (_240 * _233) * _801));
    float _814 = fma(_803, _250, fma(_802, _254 * TANGENT.z, (_240 * _234) * _801));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    float _819 = _818 * _808;
    float _820 = _818 * _811;
    float _821 = _818 * _814;
    float _4063 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _822 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4085 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4096 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4107 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4118 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _827 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _841 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _891 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _881);
    float _892 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _881);
    float _893 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _881);
    float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
    float _898 = _891 * _897;
    float _899 = _892 * _897;
    float _900 = _893 * _897;
    float _906 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _907 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _925 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _819));
    float _928 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _819));
    float _931 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _819));
    uint _945 = (_279 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _951 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * cbInstanceData._m0[_945].x;
    float _952 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * cbInstanceData._m0[_945].y;
    float _953 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * cbInstanceData._m0[_945].z;
    float _4129 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _957 = 1.0 - _827;
    float _958 = _954 * _957;
    float _959 = _955 * _957;
    float _960 = _956 * _957;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _827;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _827;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _827;
    float _968 = _965 + 0.039999999105930328369140625;
    float _970 = _966 + 0.039999999105930328369140625;
    float _971 = _967 + 0.039999999105930328369140625;
    vec4 _980 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _906, cbSceneParam._m0[86u].y * _907));
    float _984 = ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * TEXCOORD_5.w) * _980.x;
    float _985 = dot(vec3(_819, _820, _821), vec3(_898, _899, _900));
    float _988 = _985 * 2.0;
    float _992 = (_988 * _819) - _898;
    float _993 = (_988 * _820) - _899;
    float _994 = (_988 * _821) - _900;
    float _998 = abs(dot(vec3(_898, _899, _900), vec3(_819, _820, _821)));
    float _4162 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1000 = sqrt(_822);
    float _1012 = exp2((_1000 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1000 * 3.0));
    float _1018 = (1.0 - _1012) * ((_1000 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1019 = _1012 * _1000;
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1355;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1081 = fma(_1055, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047));
        float _1085 = fma(_1055, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047));
        float _1089 = fma(_1055, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047));
        float _1113 = _1047 + _819;
        float _1114 = _1051 + _820;
        float _1115 = _1055 + _821;
        float _1125 = fma(_1115, cbModelParam._m0[26u].z, fma(_1114, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1113)) - _1081;
        float _1126 = fma(_1115, cbModelParam._m0[27u].z, fma(_1114, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1113)) - _1085;
        float _1127 = fma(_1115, cbModelParam._m0[28u].z, fma(_1114, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1113)) - _1089;
        float _1131 = inversesqrt(dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127)));
        float _1144 = ((_1131 * _1125) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1081 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1131 * _1126) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1085 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1131 * _1127) / cbModelParam._m0[34u].z) + ((((((_1089 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        float _1183 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1149.x + (-0.5));
        float _1185 = _1183 * (_1149.y + (-0.5));
        float _1186 = _1183 * (_1149.z + (-0.5));
        float _1193 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1156.x + (-0.5));
        float _1195 = _1193 * (_1156.y + (-0.5));
        float _1196 = _1193 * (_1156.z + (-0.5));
        float _1203 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1163.x + (-0.5));
        float _1205 = _1203 * (_1163.y + (-0.5));
        float _1206 = _1203 * (_1163.z + (-0.5));
        float _1213 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1170.x + (-0.5));
        float _1215 = _1213 * (_1170.y + (-0.5));
        float _1216 = _1213 * (_1170.z + (-0.5));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = _1184 * 0.5;
        float _1221 = _1194 * 0.5;
        float _1222 = _1204 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1237 = (dot(vec3(_819, _820, _821), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1247 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _4210 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1249 + 1.0))) + _1254) * _1217;
        float _1264 = _1185 * 0.5;
        float _1265 = _1195 * 0.5;
        float _1266 = _1205 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_819, _820, _821), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4243 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1291 + 1.0))) + _1296) * _1218;
        float _1306 = _1186 * 0.5;
        float _1307 = _1196 * 0.5;
        float _1308 = _1206 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_819, _820, _821), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4276 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1333 + 1.0))) + _1338) * _1219;
        _1355 = _1186;
        _1357 = _1185;
        _1358 = _1184;
        _1359 = _1196;
        _1360 = _1195;
        _1361 = _1194;
        _1362 = _1206;
        _1363 = _1205;
        _1364 = _1204;
        _1365 = _1219;
        _1366 = _1218;
        _1367 = _1217;
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1356;
        _1357 = _1356;
        _1358 = _1356;
        _1359 = _1356;
        _1360 = _1356;
        _1361 = _1356;
        _1362 = _1356;
        _1363 = _1356;
        _1364 = _1356;
        _1365 = _1356;
        _1366 = _1356;
        _1367 = _1356;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1395 = fma(_1055, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047));
        float _1399 = fma(_1055, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047));
        float _1403 = fma(_1055, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047));
        float _1426 = _1047 + _819;
        float _1427 = _1051 + _820;
        float _1428 = _1055 + _821;
        float _1438 = fma(_1428, cbModelParam._m0[30u].z, fma(_1427, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1426)) - _1395;
        float _1439 = fma(_1428, cbModelParam._m0[31u].z, fma(_1427, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1426)) - _1399;
        float _1440 = fma(_1428, cbModelParam._m0[32u].z, fma(_1427, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1426)) - _1403;
        float _1444 = inversesqrt(dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440)));
        float _1457 = ((_1444 * _1438) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1395 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1444 * _1439) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1399 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1444 * _1440) / cbModelParam._m0[35u].z) + ((((((_1403 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        float _1494 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1461.x + (-0.5));
        float _1496 = _1494 * (_1461.y + (-0.5));
        float _1497 = _1494 * (_1461.z + (-0.5));
        float _1504 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1468.x + (-0.5));
        float _1506 = _1504 * (_1468.y + (-0.5));
        float _1507 = _1504 * (_1468.z + (-0.5));
        float _1514 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1475.x + (-0.5));
        float _1516 = _1514 * (_1475.y + (-0.5));
        float _1517 = _1514 * (_1475.z + (-0.5));
        float _1524 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1482.x + (-0.5));
        float _1526 = _1524 * (_1482.y + (-0.5));
        float _1527 = _1524 * (_1482.z + (-0.5));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = _1495 * 0.5;
        float _1532 = _1505 * 0.5;
        float _1533 = _1515 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_819, _820, _821), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4339 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1558 + 1.0))) + _1563) * _1528;
        float _1573 = _1496 * 0.5;
        float _1574 = _1506 * 0.5;
        float _1575 = _1516 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_819, _820, _821), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4372 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1600 + 1.0))) + _1605) * _1529;
        float _1615 = _1497 * 0.5;
        float _1616 = _1507 * 0.5;
        float _1617 = _1517 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_819, _820, _821), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4405 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1642 + 1.0))) + _1647) * _1530;
        _1664 = _1497;
        _1665 = _1496;
        _1666 = _1495;
        _1667 = _1507;
        _1668 = _1506;
        _1669 = _1505;
        _1670 = _1517;
        _1671 = _1516;
        _1672 = _1515;
        _1673 = _1530;
        _1674 = _1529;
        _1675 = _1528;
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
    }
    else
    {
        _1664 = _1356;
        _1665 = _1356;
        _1666 = _1356;
        _1667 = _1356;
        _1668 = _1356;
        _1669 = _1356;
        _1670 = _1356;
        _1671 = _1356;
        _1672 = _1356;
        _1673 = _1356;
        _1674 = _1356;
        _1675 = _1356;
        _1676 = 0.0;
        _1677 = 0.0;
        _1678 = 0.0;
    }
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1368)) + _1368;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1369)) + _1369;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1370)) + _1370;
    float _1711 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1689, cbSceneParam._m0[89u].y, _1688 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1689, cbSceneParam._m0[90u].y, _1688 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1689, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1688));
    float _1732 = _992 * 0.5;
    float _1733 = _993 * 0.5;
    float _1734 = _994 * 0.5;
    float _1735 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1738 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1741 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1775;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1748 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1355, _1359, _1362, _1365));
        float _1752 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1357, _1360, _1363, _1366));
        float _1756 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1763 = dot(vec4(cbModelParam._m0[39u]), vec4(_1732, _1733, _1734, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1763) ? 0.0 : (isnan(0.0) ? _1763 : max(0.0, _1763))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1786;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1777 = dot(vec4(cbModelParam._m0[40u]), vec4(_1732, _1733, _1734, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1790 = (_1786 * cbModelParam._m0[1u].x) + (_1775 * (1.0 - cbModelParam._m0[1u].x));
    float _1800 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1800 : min(cbModelParam._m0[25u].z, _1800));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1850 = fma(_1055, cbModelParam._m0[13u].z, fma(_1051, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047)) + cbModelParam._m0[13u].w;
        float _1854 = fma(_1055, cbModelParam._m0[14u].z, fma(_1051, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047)) + cbModelParam._m0[14u].w;
        float _1858 = fma(_1055, cbModelParam._m0[15u].z, fma(_1051, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047)) + cbModelParam._m0[15u].w;
        float _1861 = fma(_994, cbModelParam._m0[13u].z, fma(_993, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992));
        float _1864 = fma(_994, cbModelParam._m0[14u].z, fma(_993, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992));
        float _1867 = fma(_994, cbModelParam._m0[15u].z, fma(_993, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992));
        float _1895;
        if (_1861 > 0.0)
        {
            _1895 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1895 = frontier_phi_14_12_ladder;
        }
        float _2067;
        if (_1864 > 0.0)
        {
            _2067 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2067 = frontier_phi_23_19_ladder;
        }
        float _2362;
        if (_1867 > 0.0)
        {
            _2362 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2362 = frontier_phi_35_30_ladder;
        }
        float _2364 = isnan(_2067) ? _1895 : (isnan(_1895) ? _2067 : min(_1895, _2067));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1861) + _1850;
        float _2370 = (_2365 * _1864) + _1854;
        float _2371 = (_2365 * _1867) + _1858;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2372;
        float _2376 = _2372 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 > _2376) || ((_2370 < _2374) || ((_2369 < _2374) || (_2369 > _2376))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2516 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2371, cbModelParam._m0[9u].z, fma(_2370, cbModelParam._m0[9u].y, _2369 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2371, cbModelParam._m0[10u].z, fma(_2370, cbModelParam._m0[10u].y, _2369 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2371, cbModelParam._m0[11u].z, fma(_2370, cbModelParam._m0[11u].y, _2369 * cbModelParam._m0[11u].x))), _1801);
            frontier_phi_13_35_ladder = _2516.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2516.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2516.x * cbModelParam._m0[1u].y;
        }
        _1883 = frontier_phi_13_35_ladder_2;
        _1885 = frontier_phi_13_35_ladder_1;
        _1887 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_992, _993, _994), _1801);
        _1883 = _1871.x * cbModelParam._m0[1u].y;
        _1885 = _1871.y * cbModelParam._m0[1u].y;
        _1887 = _1871.z * cbModelParam._m0[1u].y;
    }
    float _1891 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1892 = isnan(_1891) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1891 : min(cbModelParam._m0[25u].w, _1891));
    float _1982;
    float _1984;
    float _1986;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1946 = fma(_1055, cbModelParam._m0[21u].z, fma(_1051, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047)) + cbModelParam._m0[21u].w;
        float _1950 = fma(_1055, cbModelParam._m0[22u].z, fma(_1051, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047)) + cbModelParam._m0[22u].w;
        float _1954 = fma(_1055, cbModelParam._m0[23u].z, fma(_1051, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047)) + cbModelParam._m0[23u].w;
        float _1957 = fma(_994, cbModelParam._m0[21u].z, fma(_993, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992));
        float _1960 = fma(_994, cbModelParam._m0[22u].z, fma(_993, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992));
        float _1963 = fma(_994, cbModelParam._m0[23u].z, fma(_993, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992));
        float _2072;
        if (_1957 > 0.0)
        {
            _2072 = abs((1.0 - _1946) / _1957);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1946 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2072 = frontier_phi_25_21_ladder;
        }
        float _2389;
        if (_1960 > 0.0)
        {
            _2389 = abs((1.0 - _1950) / _1960);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1950 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2389 = frontier_phi_37_32_ladder;
        }
        float _2727;
        if (_1963 > 0.0)
        {
            _2727 = abs((1.0 - _1954) / _1963);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1954 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2727 = frontier_phi_47_44_ladder;
        }
        float _2729 = isnan(_2389) ? _2072 : (isnan(_2072) ? _2389 : min(_2072, _2389));
        float _2730 = isnan(_2727) ? _2729 : (isnan(_2729) ? _2727 : min(_2729, _2727));
        float _2734 = (_2730 * _1957) + _1946;
        float _2735 = (_2730 * _1960) + _1950;
        float _2736 = (_2730 * _1963) + _1954;
        float _2737 = _2730 * 9.9999997473787516355514526367188e-05;
        float _2738 = (-1.0) - _2737;
        float _2740 = _2737 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2736 > _2740) || ((_2736 < _2738) || ((_2735 > _2740) || ((_2735 < _2738) || ((_2734 < _2738) || (_2734 > _2740))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2858 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2736, cbModelParam._m0[17u].z, fma(_2735, cbModelParam._m0[17u].y, _2734 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2736, cbModelParam._m0[18u].z, fma(_2735, cbModelParam._m0[18u].y, _2734 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2736, cbModelParam._m0[19u].z, fma(_2735, cbModelParam._m0[19u].y, _2734 * cbModelParam._m0[19u].x))), _1892);
            frontier_phi_22_47_ladder = _2858.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2858.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2858.x * cbModelParam._m0[1u].z;
        }
        _1982 = frontier_phi_22_47_ladder_2;
        _1984 = frontier_phi_22_47_ladder_1;
        _1986 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1966 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_992, _993, _994), _1892);
        _1982 = _1966.x * cbModelParam._m0[1u].z;
        _1984 = _1966.y * cbModelParam._m0[1u].z;
        _1986 = _1966.z * cbModelParam._m0[1u].z;
    }
    float _1999 = (((_1018 * _968) + _1019) * _984) * ((cbModelParam._m0[1u].w * (_1982 - _1883)) + _1883);
    float _2001 = (((_1018 * _970) + _1019) * _984) * ((cbModelParam._m0[1u].w * (_1984 - _1885)) + _1885);
    float _2003 = (((_1018 * _971) + _1019) * _984) * ((cbModelParam._m0[1u].w * (_1986 - _1887)) + _1887);
    float _2006 = fma(_2003, cbSceneParam._m0[89u].z, fma(_2001, cbSceneParam._m0[89u].y, _1999 * cbSceneParam._m0[89u].x));
    float _2009 = fma(_2003, cbSceneParam._m0[90u].z, fma(_2001, cbSceneParam._m0[90u].y, _1999 * cbSceneParam._m0[90u].x));
    float _2012 = fma(_2003, cbSceneParam._m0[91u].z, fma(_2001, cbSceneParam._m0[91u].y, _1999 * cbSceneParam._m0[91u].x));
    float _2046 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2050 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2059 = _2046 / _2058;
    float _2060 = _2050 / _2058;
    float _2061 = _2054 / _2058;
    float _2208;
    float _2209;
    float _2210;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2088 = ((uint(_2061 > cbSceneParam._m0[59u].y) + uint(_2061 > cbSceneParam._m0[59u].x)) + uint(_2061 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2089 = _2088 + 43u;
        uint _2097 = _2088 + 44u;
        uint _2105 = _2088 + 45u;
        uint _2113 = _2088 + 46u;
        float _2124 = fma(_2058, cbSceneParam._m0[_2089].w, fma(_2054, cbSceneParam._m0[_2089].z, fma(_2050, cbSceneParam._m0[_2089].y, _2046 * cbSceneParam._m0[_2089].x)));
        float _2128 = fma(_2058, cbSceneParam._m0[_2097].w, fma(_2054, cbSceneParam._m0[_2097].z, fma(_2050, cbSceneParam._m0[_2097].y, _2046 * cbSceneParam._m0[_2097].x)));
        float _2136 = fma(_2058, cbSceneParam._m0[_2113].w, fma(_2054, cbSceneParam._m0[_2113].z, fma(_2050, cbSceneParam._m0[_2113].y, _2046 * cbSceneParam._m0[_2113].x)));
        float _2141 = cbSceneParam._m0[33u].z * _2136;
        float _2143 = cbSceneParam._m0[33u].w * _2136;
        float _2146 = fma(_2058, cbSceneParam._m0[_2105].w, fma(_2054, cbSceneParam._m0[_2105].z, fma(_2050, cbSceneParam._m0[_2105].y, _2046 * cbSceneParam._m0[_2105].x))) / _2136;
        float _2194 = (cbSceneParam._m0[33u].x - sqrt(((_2060 * _2060) + (_2059 * _2059)) + (_2061 * _2061))) * cbSceneParam._m0[33u].y;
        float _4531 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2201 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 + _2124) / _2136, (_2143 + _2128) / _2136), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 + _2124) / _2136, (_2128 - _2141) / _2136), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 - _2141) / _2136, (_2128 - _2143) / _2136), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 - _2143) / _2136, (_2141 + _2128) / _2136), _2146), 0.0)).x), vec4(0.25)));
        _2208 = 1.0 - (_2201 * cbSceneParam._m0[34u].x);
        _2209 = 1.0 - (_2201 * cbSceneParam._m0[34u].y);
        _2210 = 1.0 - (_2201 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2208 = 1.0;
        _2209 = 1.0;
        _2210 = 1.0;
    }
    float _2274;
    float _2276;
    float _2278;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2262 = fma(_2058, cbSceneParam._m0[63u].w, fma(_2054, cbSceneParam._m0[63u].z, fma(_2050, cbSceneParam._m0[63u].y, _2046 * cbSceneParam._m0[63u].x)));
        float _2263 = fma(_2058, cbSceneParam._m0[60u].w, fma(_2054, cbSceneParam._m0[60u].z, fma(_2050, cbSceneParam._m0[60u].y, _2046 * cbSceneParam._m0[60u].x))) / _2262;
        float _2264 = fma(_2058, cbSceneParam._m0[61u].w, fma(_2054, cbSceneParam._m0[61u].z, fma(_2050, cbSceneParam._m0[61u].y, _2046 * cbSceneParam._m0[61u].x))) / _2262;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2263 >= cbSceneParam._m0[64u].x) && (_2264 >= cbSceneParam._m0[64u].y)) && (_2263 <= cbSceneParam._m0[64u].z)) && (_2264 <= cbSceneParam._m0[64u].w))
        {
            float _2402 = fma(_2058, cbSceneParam._m0[62u].w, fma(_2054, cbSceneParam._m0[62u].z, fma(_2050, cbSceneParam._m0[62u].y, _2046 * cbSceneParam._m0[62u].x))) / _2262;
            float _2406 = isnan(cbSceneParam._m0[41u].w) ? _2402 : (isnan(_2402) ? cbSceneParam._m0[41u].w : max(_2402, cbSceneParam._m0[41u].w));
            float _2449 = (cbSceneParam._m0[33u].x - sqrt(((_2060 * _2060) + (_2059 * _2059)) + (_2061 * _2061))) * cbSceneParam._m0[33u].y;
            float _4547 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
            float _2456 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2263, cbSceneParam._m0[33u].w + _2264), _2406), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2263, _2264 - cbSceneParam._m0[33u].z), _2406), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2263 - cbSceneParam._m0[33u].z, _2264 - cbSceneParam._m0[33u].w), _2406), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2263 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2264), _2406), 0.0)).x), vec4(0.25)));
            float _2460 = 1.0 - (_2456 * cbSceneParam._m0[34u].x);
            float _2461 = 1.0 - (_2456 * cbSceneParam._m0[34u].y);
            float _2462 = 1.0 - (_2456 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2462) ? _2210 : (isnan(_2210) ? _2462 : min(_2210, _2462));
            frontier_phi_34_33_ladder_1 = isnan(_2461) ? _2209 : (isnan(_2209) ? _2461 : min(_2209, _2461));
            frontier_phi_34_33_ladder_2 = isnan(_2460) ? _2208 : (isnan(_2208) ? _2460 : min(_2208, _2460));
        }
        else
        {
            frontier_phi_34_33_ladder = _2210;
            frontier_phi_34_33_ladder_1 = _2209;
            frontier_phi_34_33_ladder_2 = _2208;
        }
        _2274 = frontier_phi_34_33_ladder_2;
        _2276 = frontier_phi_34_33_ladder_1;
        _2278 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2274 = _2208;
        _2276 = _2209;
        _2278 = _2210;
    }
    uvec4 _2283 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2285 = _2283.x * 14u;
    uint _2286 = _2285 + 13u;
    float _2293 = _984 + (-1.0);
    float _2298 = (cbLight._m0[_2286].x * _2293) + 1.0;
    float _2299 = (cbLight._m0[_2286].y * _2293) + 1.0;
    float _2300 = (cbLight._m0[_2286].z * _2293) + 1.0;
    float _2301 = (cbLight._m0[_2286].w * _2293) + 1.0;
    uint _2302 = _2285 + 5u;
    float _2308 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
    uint _2312 = _2285 + 4u;
    float _2321 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
    uint _2325 = _2285 | 1u;
    float _2336 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_819, _820, _821));
    float _2339 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_819, _820, _821));
    float _4583 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _4594 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2344 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * 0.3183098733425140380859375;
    float _2346 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * 0.3183098733425140380859375;
    float _2353 = ((cbLight._m0[_2302].x * _2308) * _2346) + (((cbLight._m0[_2312].x * _2274) * _2321) * _2344);
    float _2354 = ((_2308 * cbLight._m0[_2302].y) * _2346) + (((cbLight._m0[_2312].y * _2276) * _2321) * _2344);
    float _2355 = ((_2308 * cbLight._m0[_2302].z) * _2346) + (((cbLight._m0[_2312].z * _2278) * _2321) * _2344);
    uvec4 _2359 = floatBitsToUint(cbLight._m0[_2285 + 12u]);
    bool _2361 = _2359.x == 0u;
    float _2463;
    float _2465;
    float _2467;
    if (_2361)
    {
        _2463 = _2353;
        _2465 = _2354;
        _2467 = _2355;
    }
    else
    {
        uint _2471 = _2285 + 6u;
        float _2487 = (dot(vec3(cbLight._m0[_2285 + 2u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2488 = _2487 * _2487;
        float _4605 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2489 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2490 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2463 = (((cbLight._m0[_2471].x * 0.3183098733425140380859375) * _2489) * _2490) + _2353;
        _2465 = (((cbLight._m0[_2471].y * 0.3183098733425140380859375) * _2489) * _2490) + _2354;
        _2467 = (((cbLight._m0[_2471].z * 0.3183098733425140380859375) * _2489) * _2490) + _2355;
    }
    bool _2470 = _2359.y == 0u;
    float _2525;
    float _2527;
    float _2529;
    if (_2470)
    {
        _2525 = _2463;
        _2527 = _2465;
        _2529 = _2467;
    }
    else
    {
        uint _2698 = _2285 + 7u;
        float _2714 = (dot(vec3(cbLight._m0[_2285 + 3u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2715 = _2714 * _2714;
        float _4621 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2716 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2717 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2525 = (((cbLight._m0[_2698].x * 0.3183098733425140380859375) * _2716) * _2717) + _2463;
        _2527 = (((cbLight._m0[_2698].y * 0.3183098733425140380859375) * _2716) * _2717) + _2465;
        _2529 = (((cbLight._m0[_2698].z * 0.3183098733425140380859375) * _2716) * _2717) + _2467;
    }
    uint _2532 = _2285 + 8u;
    float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _822) * 0.949999988079071044921875);
    float _2546 = _2545 * _2545;
    float _2547 = cbLight._m0[_2285].x + _898;
    float _2548 = cbLight._m0[_2285].y + _899;
    float _2549 = cbLight._m0[_2285].z + _900;
    float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
    float _2554 = _2553 * _2547;
    float _2555 = _2553 * _2548;
    float _2556 = _2553 * _2549;
    float _2557 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2285].xyz));
    float _4637 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _4648 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _2561 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2562 = dot(vec3(_819, _820, _821), vec3(_2554, _2555, _2556));
    float _4659 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _2566 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2554, _2555, _2556));
    float _4670 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2570 = _2546 * _2546;
    float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
    float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
    float _2583 = 0.959999978542327880859375 - _965;
    float _2585 = 0.959999978542327880859375 - _966;
    float _2586 = 0.959999978542327880859375 - _967;
    float _2593 = 1.0 - _2546;
    float _2604 = (0.5 / (((_2561 * ((_2560 * _2593) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2561 * _2593) + _2546) * _2560))) * _2560;
    float _4681 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2606 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
    uint _2620 = _2285 + 9u;
    float _2631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _822) * 0.949999988079071044921875);
    float _2632 = _2631 * _2631;
    float _2633 = cbLight._m0[_2325].x + _898;
    float _2634 = cbLight._m0[_2325].y + _899;
    float _2635 = cbLight._m0[_2325].z + _900;
    float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
    float _2640 = _2639 * _2633;
    float _2641 = _2639 * _2634;
    float _2642 = _2639 * _2635;
    float _2643 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2325].xyz));
    float _4692 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2646 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2647 = dot(vec3(_819, _820, _821), vec3(_2640, _2641, _2642));
    float _4703 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2650 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _2651 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2640, _2641, _2642));
    float _4714 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2655 = _2632 * _2632;
    float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
    float _2666 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
    float _2673 = 1.0 - _2632;
    float _2683 = (0.5 / (((_2561 * ((_2646 * _2673) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2561 * _2673) + _2632) * _2646))) * _2646;
    float _4725 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2685 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
    float _2695 = (((((_2666 * _2583) + _968) * cbLight._m0[_2620].x) * _2685) * _2308) + ((((cbLight._m0[_2532].x * _2274) * ((_2582 * _2583) + _968)) * _2606) * _2321);
    float _2696 = (((((_2666 * _2585) + _970) * cbLight._m0[_2620].y) * _2685) * _2308) + ((((cbLight._m0[_2532].y * _2276) * ((_2582 * _2585) + _970)) * _2606) * _2321);
    float _2697 = (((((_2666 * _2586) + _971) * cbLight._m0[_2620].z) * _2685) * _2308) + ((((cbLight._m0[_2532].z * _2278) * ((_2582 * _2586) + _971)) * _2606) * _2321);
    float _2753;
    float _2755;
    float _2757;
    if (_2361)
    {
        _2753 = _2695;
        _2755 = _2696;
        _2757 = _2697;
    }
    else
    {
        uint _2759 = _2285 + 2u;
        uint _2763 = _2285 + 10u;
        float _2777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2759].w)) * _822) * 0.949999988079071044921875);
        float _2778 = _2777 * _2777;
        float _2779 = cbLight._m0[_2759].x + _898;
        float _2780 = cbLight._m0[_2759].y + _899;
        float _2781 = cbLight._m0[_2759].z + _900;
        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
        float _2786 = _2785 * _2779;
        float _2787 = _2785 * _2780;
        float _2788 = _2785 * _2781;
        float _2789 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2759].xyz));
        float _4736 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2793 = dot(vec3(_819, _820, _821), vec3(_2786, _2787, _2788));
        float _4747 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2797 = dot(vec3(cbLight._m0[_2759].xyz), vec3(_2786, _2787, _2788));
        float _4758 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2801 = _2778 * _2778;
        float _2805 = ((_2796 * _2796) * (_2801 + (-1.0))) + 1.0;
        float _2812 = exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0);
        float _2819 = 1.0 - _2778;
        float _2829 = (0.5 / (((_2561 * ((_2792 * _2819) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2561 * _2819) + _2778) * _2792))) * _2792;
        float _4769 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2831 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2801 / ((_2805 * _2805) * 3.141590118408203125));
        float _2832 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2753 = (((((_2812 * _2583) + _968) * cbLight._m0[_2763].x) * _2831) * _2832) + _2695;
        _2755 = (((((_2812 * _2585) + _970) * cbLight._m0[_2763].y) * _2831) * _2832) + _2696;
        _2757 = (((((_2812 * _2586) + _971) * cbLight._m0[_2763].z) * _2831) * _2832) + _2697;
    }
    float _2863;
    float _2865;
    float _2867;
    if (_2470)
    {
        _2863 = _2753;
        _2865 = _2755;
        _2867 = _2757;
    }
    else
    {
        uint _2874 = _2285 + 3u;
        uint _2878 = _2285 + 11u;
        float _2892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2874].w)) * _822) * 0.949999988079071044921875);
        float _2893 = _2892 * _2892;
        float _2894 = cbLight._m0[_2874].x + _898;
        float _2895 = cbLight._m0[_2874].y + _899;
        float _2896 = cbLight._m0[_2874].z + _900;
        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
        float _2901 = _2900 * _2894;
        float _2902 = _2900 * _2895;
        float _2903 = _2900 * _2896;
        float _2904 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2874].xyz));
        float _4785 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2907 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2908 = dot(vec3(_819, _820, _821), vec3(_2901, _2902, _2903));
        float _4796 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2911 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
        float _2912 = dot(vec3(cbLight._m0[_2874].xyz), vec3(_2901, _2902, _2903));
        float _4807 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2916 = _2893 * _2893;
        float _2920 = ((_2911 * _2911) * (_2916 + (-1.0))) + 1.0;
        float _2927 = exp2(log2(1.0 - (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) * 5.0);
        float _2934 = 1.0 - _2893;
        float _2944 = (0.5 / (((_2561 * ((_2907 * _2934) + _2893)) + 9.9999999392252902907785028219223e-09) + (((_2561 * _2934) + _2893) * _2907))) * _2907;
        float _4818 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2946 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2916 / ((_2920 * _2920) * 3.141590118408203125));
        float _2947 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2863 = (((((_2927 * _2583) + _968) * cbLight._m0[_2878].x) * _2946) * _2947) + _2753;
        _2865 = (((((_2927 * _2585) + _970) * cbLight._m0[_2878].y) * _2946) * _2947) + _2755;
        _2867 = (((((_2927 * _2586) + _971) * cbLight._m0[_2878].z) * _2946) * _2947) + _2757;
    }
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    float _3023;
    if (_2283.y == 0u)
    {
        uvec4 _2968 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2969 = _2968.x;
        uint _2980 = uint((float(_2968.y) * floor(float(uint(cbSceneParam._m0[85u].y * _907) / _2969))) + floor(float(uint(cbSceneParam._m0[85u].x * _906) / _2969)));
        float _2990 = (log2(_2061 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2991 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        uint _2994 = uint(isnan(14.0) ? _2991 : (isnan(_2991) ? 14.0 : min(_2991, 14.0)));
        uvec4 _2999 = texelFetch(g_lightClusterGridBuffer, int(((_2994 << 2u) + (_2980 << 6u)) >> 2u));
        uint _3000 = _2999.x;
        uint _3001 = _2968.z;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        if (((((1u << ((_3001 >> 4u) & 15u)) + 4294967295u) & _3000) == 0u) || ((_3001 & 240u) == 0u))
        {
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
            _3090 = 0.0;
        }
        else
        {
            float _3081;
            float _3083;
            float _3085;
            float _3087;
            float _3089;
            float _3091;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            uint _3231 = 0u;
            uint _3240;
            bool _3241;
            for (;;)
            {
                _3240 = texelFetch(g_lightClassification, int((((_2994 << 5u) + (_2980 << 9u)) + (_3231 << 2u)) >> 2u)).x;
                _3241 = _3240 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3241)
                {
                    frontier_phi_66_pred = _3230;
                    frontier_phi_66_pred_1 = _3229;
                    frontier_phi_66_pred_2 = _3228;
                    frontier_phi_66_pred_3 = _3227;
                    frontier_phi_66_pred_4 = _3226;
                    frontier_phi_66_pred_5 = _3225;
                }
                else
                {
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    uint _3355;
                    _3349 = _3225;
                    _3350 = _3226;
                    _3351 = _3227;
                    _3352 = _3228;
                    _3353 = _3229;
                    _3354 = _3230;
                    _3355 = _3240;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    for (;;)
                    {
                        uint _3359 = uint(findLSB(_3355)) + (_3231 << 5u);
                        uint _3356 = (_3355 + 4294967295u) & _3355;
                        uint _3361 = _3359 * 48u;
                        vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 3u)).x));
                        uint _3381 = (_3359 * 48u) + 4u;
                        vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3381)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 3u)).x));
                        uint _3400 = (_3359 * 48u) + 8u;
                        vec3 _3411 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x));
                        float _3415 = _3375.x - _2059;
                        float _3416 = _3375.y - _2060;
                        float _3417 = _3375.z - _2061;
                        float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                        float _3421 = inversesqrt(_3418);
                        float _3422 = _3421 * _3415;
                        float _3423 = _3421 * _3416;
                        float _3424 = _3421 * _3417;
                        float _3425 = dot(vec3(_925, _928, _931), vec3(_3422, _3423, _3424));
                        float _3430 = 1.0 - (_3418 * _3375.w);
                        float _4844 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3431 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                        float _3432 = sqrt(_3418) * _3394.w;
                        float _3435 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                        float _3436 = _3435 * _3435;
                        float _3439 = ((1.0 - _3436) * _3425) + _3436;
                        float _3442 = _3432 * _3432;
                        float _3446 = ((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3431) / ((_3442 * 0.699999988079071044921875) + 1.0);
                        float _3450 = (-0.0) - _2059;
                        float _3451 = (-0.0) - _2060;
                        float _3452 = (-0.0) - _2061;
                        float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                        float _3457 = _3456 * _3450;
                        float _3458 = _3456 * _3451;
                        float _3459 = _3456 * _3452;
                        float _3466 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                        float _3467 = 1.0 - _1000;
                        float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                        float _3475 = _3474 * _3474;
                        float _3476 = _3475 * _3475;
                        float _3477 = _3457 + _3422;
                        float _3478 = _3458 + _3423;
                        float _3479 = _3459 + _3424;
                        float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                        float _3487 = dot(vec3(_925, _928, _931), vec3(_3457, _3458, _3459));
                        float _4860 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3490 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                        float _3491 = dot(vec3(_925, _928, _931), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                        float _4871 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3494 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                        float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                        float _3499 = _3435 * _3475;
                        float _3500 = _3499 * _3499;
                        float _3503 = ((1.0 - _3500) * _3425) + _3500;
                        float _4882 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3504 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                        float _3505 = 1.0 - _3475;
                        float _3515 = (0.5 / (((_3504 * ((_3490 * _3505) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3504 * _3505) + _3475) * _3490))) * _3504;
                        float _4893 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3525 = (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) / ((_3498 * _3498) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125))) * _3431;
                        _3284 = (_3446 * _3394.x) + _3352;
                        _3285 = (_3446 * _3394.y) + _3353;
                        _3286 = (_3446 * _3394.z) + _3354;
                        _3281 = (_3525 * _3411.x) + _3349;
                        _3282 = (_3525 * _3411.y) + _3350;
                        _3283 = (_3525 * _3411.z) + _3351;
                        if (_3356 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3349 = _3281;
                            _3350 = _3282;
                            _3351 = _3283;
                            _3352 = _3284;
                            _3353 = _3285;
                            _3354 = _3286;
                            _3355 = _3356;
                        }
                    }
                    frontier_phi_66_pred = _3286;
                    frontier_phi_66_pred_1 = _3285;
                    frontier_phi_66_pred_2 = _3284;
                    frontier_phi_66_pred_3 = _3283;
                    frontier_phi_66_pred_4 = _3282;
                    frontier_phi_66_pred_5 = _3281;
                }
                _3091 = frontier_phi_66_pred;
                _3089 = frontier_phi_66_pred_1;
                _3087 = frontier_phi_66_pred_2;
                _3085 = frontier_phi_66_pred_3;
                _3083 = frontier_phi_66_pred_4;
                _3081 = frontier_phi_66_pred_5;
                uint _3232 = _3231 + 1u;
                if (_3232 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3225 = _3081;
                    _3226 = _3083;
                    _3227 = _3085;
                    _3228 = _3087;
                    _3229 = _3089;
                    _3230 = _3091;
                    _3231 = _3232;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
            _3090 = _3091;
        }
        uvec4 _3094 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3095 = _3094.z;
        uint _3097 = (_3095 >> 8u) & 15u;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        if (((4294967295u << _3097) & _3000) == 0u)
        {
            _3193 = _3080;
            _3195 = _3082;
            _3197 = _3084;
            _3199 = _3086;
            _3201 = _3088;
            _3203 = _3090;
        }
        else
        {
            float _3218 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
            float _3219 = _3218 * _2059;
            float _3220 = _3218 * _2060;
            float _3221 = _3218 * _2061;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3097 < ((_3095 >> 12u) & 15u))
            {
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3202;
                float _3204;
                float _3332 = _3080;
                float _3333 = _3082;
                float _3334 = _3084;
                float _3335 = _3086;
                float _3336 = _3088;
                float _3337 = _3090;
                uint _3338 = _3097;
                uint _3347;
                bool _3348;
                for (;;)
                {
                    _3347 = texelFetch(g_lightClassification, int((((_2994 << 5u) + (_2980 << 9u)) + (_3338 << 2u)) >> 2u)).x;
                    _3348 = _3347 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3348)
                    {
                        frontier_phi_72_pred = _3337;
                        frontier_phi_72_pred_1 = _3336;
                        frontier_phi_72_pred_2 = _3335;
                        frontier_phi_72_pred_3 = _3334;
                        frontier_phi_72_pred_4 = _3333;
                        frontier_phi_72_pred_5 = _3332;
                    }
                    else
                    {
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3543 = _3332;
                        float _3544 = _3333;
                        float _3545 = _3334;
                        float _3546 = _3335;
                        float _3547 = _3336;
                        float _3548 = _3337;
                        uint _3549 = _3347;
                        uint _3550;
                        vec4 _3575;
                        float _3576;
                        vec4 _3591;
                        vec3 _3603;
                        vec4 _3618;
                        vec4 _3633;
                        float _3679;
                        bool _3680;
                        for (;;)
                        {
                            uint _3560 = ((_3338 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3549));
                            _3550 = (_3549 + 4294967295u) & _3549;
                            uint _3562 = _3560 * 40u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            _3576 = _3575.w;
                            uint _3578 = (_3560 * 40u) + 4u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3560 * 40u) + 8u;
                            _3603 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x));
                            uint _3605 = (_3560 * 40u) + 16u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3620 = (_3560 * 40u) + 20u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3635 = (_3560 * 40u) + 24u;
                            vec4 _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            uint _3654 = (_3560 * 40u) + 28u;
                            vec4 _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            _3679 = fma(_2061, _3667.z, fma(_2060, _3667.y, _3667.x * _2059)) + _3667.w;
                            _3680 = !((fma(_2061, _3648.z, fma(_2060, _3648.y, _3648.x * _2059)) + _3648.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3680)
                            {
                                float _3707 = _3575.x - _2059;
                                float _3708 = _3575.y - _2060;
                                float _3709 = _3575.z - _2061;
                                float _3710 = dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709));
                                float _3713 = inversesqrt(_3710);
                                float _3714 = _3713 * _3707;
                                float _3715 = _3713 * _3708;
                                float _3716 = _3713 * _3709;
                                float _3720 = 1.0 - (_3710 / (_3576 * _3576));
                                float _4904 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3721 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3725 = sqrt(_3710) * _3591.w;
                                float _3727 = 1.39999997615814208984375 / (_3725 + 1.39999997615814208984375);
                                float _3728 = _3727 * _3727;
                                float _3731 = ((1.0 - _3728) * dot(vec3(_3714, _3715, _3716), vec3(_925, _928, _931))) + _3728;
                                float _3734 = _3725 * _3725;
                                float _3738 = (fma(_2061, _3618.z, fma(_2060, _3618.y, _3618.x * _2059)) + _3618.w) / _3679;
                                float _3739 = (fma(_2061, _3633.z, fma(_2060, _3633.y, _3633.x * _2059)) + _3633.w) / _3679;
                                float _3743 = 1.0 - dot(vec2(_3738, _3739), vec2(_3738, _3739));
                                float _4920 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3745 = _3744 * (((isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0))) * _3721) / ((_3734 * 0.699999988079071044921875) + 1.0));
                                float _3757 = exp2(log2(1.0 / ((_3734 * 3.5) + 5.0)) * 0.25);
                                float _3758 = 1.0 - _1000;
                                float _3765 = sqrt(1.0 - ((1.0 - (_3758 * _3758)) * (1.0 - (_3757 * _3757))));
                                float _3766 = _3765 * _3765;
                                float _3767 = _3766 * _3766;
                                float _3768 = _3714 - _3219;
                                float _3769 = _3715 - _3220;
                                float _3770 = _3716 - _3221;
                                float _3774 = inversesqrt(dot(vec3(_3768, _3769, _3770), vec3(_3768, _3769, _3770)));
                                float _3778 = dot(vec3(_925, _928, _931), vec3((-0.0) - _3219, (-0.0) - _3220, (-0.0) - _3221));
                                float _4931 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3781 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                                float _3782 = dot(vec3(_925, _928, _931), vec3(_3774 * _3768, _3774 * _3769, _3774 * _3770));
                                float _4942 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3785 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                                float _3789 = ((_3785 * _3785) * (_3767 + (-1.0))) + 1.0;
                                float _3790 = _3727 * _3766;
                                float _3791 = _3790 * _3790;
                                float _3797 = ((1.0 - _3791) * dot(vec3(_925, _928, _931), vec3(_3714, _3715, _3716))) + _3791;
                                float _4953 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3798 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3799 = 1.0 - _3766;
                                float _3809 = (0.5 / (((_3798 * ((_3781 * _3799) + _3766)) + 9.9999999392252902907785028219223e-09) + (((_3798 * _3799) + _3766) * _3781))) * _3798;
                                float _4964 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3819 = (_3744 * _3721) * (((_3767 * 3.1415927410125732421875) * (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0)))) / ((_3789 * _3789) * ((_3734 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3745 * _3591.y;
                                frontier_phi_78_pred_1 = _3745 * _3591.x;
                                frontier_phi_78_pred_2 = _3819 * _3603.z;
                                frontier_phi_78_pred_3 = _3819 * _3603.y;
                                frontier_phi_78_pred_4 = _3819 * _3603.x;
                                frontier_phi_78_pred_5 = _3745 * _3591.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3827 = frontier_phi_78_pred;
                            _3826 = frontier_phi_78_pred_1;
                            _3825 = frontier_phi_78_pred_2;
                            _3824 = frontier_phi_78_pred_3;
                            _3823 = frontier_phi_78_pred_4;
                            _3828 = frontier_phi_78_pred_5;
                            _3533 = _3826 + _3546;
                            _3534 = _3827 + _3547;
                            _3535 = _3828 + _3548;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            _3532 = _3825 + _3545;
                            if (_3550 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3550;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3535;
                        frontier_phi_72_pred_1 = _3534;
                        frontier_phi_72_pred_2 = _3533;
                        frontier_phi_72_pred_3 = _3532;
                        frontier_phi_72_pred_4 = _3531;
                        frontier_phi_72_pred_5 = _3530;
                    }
                    _3204 = frontier_phi_72_pred;
                    _3202 = frontier_phi_72_pred_1;
                    _3200 = frontier_phi_72_pred_2;
                    _3198 = frontier_phi_72_pred_3;
                    _3196 = frontier_phi_72_pred_4;
                    _3194 = frontier_phi_72_pred_5;
                    uint _3339 = _3338 + 1u;
                    if (_3339 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3332 = _3194;
                        _3333 = _3196;
                        _3334 = _3198;
                        _3335 = _3200;
                        _3336 = _3202;
                        _3337 = _3204;
                        _3338 = _3339;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3204;
                frontier_phi_60_61_ladder_1 = _3202;
                frontier_phi_60_61_ladder_2 = _3198;
                frontier_phi_60_61_ladder_3 = _3196;
                frontier_phi_60_61_ladder_4 = _3194;
                frontier_phi_60_61_ladder_5 = _3200;
            }
            else
            {
                frontier_phi_60_61_ladder = _3090;
                frontier_phi_60_61_ladder_1 = _3088;
                frontier_phi_60_61_ladder_2 = _3084;
                frontier_phi_60_61_ladder_3 = _3082;
                frontier_phi_60_61_ladder_4 = _3080;
                frontier_phi_60_61_ladder_5 = _3086;
            }
            _3193 = frontier_phi_60_61_ladder_4;
            _3195 = frontier_phi_60_61_ladder_3;
            _3197 = frontier_phi_60_61_ladder_2;
            _3199 = frontier_phi_60_61_ladder_5;
            _3201 = frontier_phi_60_61_ladder_1;
            _3203 = frontier_phi_60_61_ladder;
        }
        float _3208 = isnan(1.0) ? _984 : (isnan(_984) ? 1.0 : min(_984, 1.0));
        _3013 = (_3208 * _3199) + _2525;
        _3015 = (_3208 * _3201) + _2527;
        _3017 = (_3208 * _3203) + _2529;
        _3019 = ((_3193 * _968) * _3208) + _2863;
        _3021 = ((_3195 * _970) * _3208) + _2865;
        _3023 = ((_3197 * _971) * _3208) + _2867;
    }
    else
    {
        _3013 = _2525;
        _3015 = _2527;
        _3017 = _2529;
        _3019 = _2863;
        _3021 = _2865;
        _3023 = _2867;
    }
    float _4980 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4991 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _5002 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    uint _3043 = _279 + 6u;
    float _3051 = _906 / cbSceneParam._m0[86u].x;
    float _3052 = _907 / cbSceneParam._m0[86u].y;
    vec4 _3066 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3051, _3052, (log2((isnan(cbSceneParam._m0[77u].w) ? _841 : (isnan(_841) ? cbSceneParam._m0[77u].w : min(_841, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3068 = _3066.x;
    float _3069 = _3066.y;
    float _3070 = _3066.z;
    float _3071 = _3066.w;
    float _3143;
    float _3145;
    float _3147;
    float _3149;
    if (_841 > cbSceneParam._m0[78u].w)
    {
        float _3105 = isnan(_841) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _841 : min(cbSceneParam._m0[80u].w, _841));
        float _3106 = _3105 / _841;
        float _3117 = _3106 * _891;
        float _3118 = _892 * _3106;
        float _3119 = (-0.0) - _3118;
        float _3121 = _3106 * _893;
        float _3123 = (cbSceneParam._m0[77u].w * _3119) / _3105;
        float _3124 = _3123 + cbSceneParam._m0[79u].w;
        float _3125 = cbSceneParam._m0[79u].w - _3118;
        float _3131 = sqrt(((_3117 * _3117) + (_3118 * _3118)) + (_3121 * _3121));
        float _3134 = (1.0 - (cbSceneParam._m0[77u].w / _3105)) * _3131;
        float _3139 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3141 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3294;
        if (abs((_3119 - _3123) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3294 = ((((_3124 > 0.0) ? exp2(_3139 * _3124) : (2.0 - exp2(_3141 * _3124))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3134;
        }
        else
        {
            float _3254 = 1.0 / cbSceneParam._m0[80u].x;
            float _3255 = isnan(_3125) ? _3124 : (isnan(_3124) ? _3125 : max(_3124, _3125));
            float _3256 = isnan(_3125) ? _3124 : (isnan(_3124) ? _3125 : min(_3124, _3125));
            float _3265 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : min(_3255, 0.0));
            float _3266 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : min(_3256, 0.0));
            _3294 = ((abs(_3131 / _3119) * cbSceneParam._m0[80u].y) * ((((_3265 - _3266) * 2.0) - ((exp2(_3139 * (isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0)))) - exp2(_3139 * (isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))))) * _3254)) - ((exp2(_3141 * _3265) - exp2(_3141 * _3266)) * _3254))) + (_3134 * cbSceneParam._m0[80u].z);
        }
        vec4 _3296 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3051, _3052, 1.0), 0.0);
        float _3305 = exp2((_3294 * (-1.44269502162933349609375)) * (1.0 - _3296.w));
        float _3306 = log2(_3305);
        float _3322 = log2(_3071);
        _3143 = (exp2(_3322 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3306 * cbSceneParam._m0[78u].x)) * _3296.x) / cbSceneParam._m0[78u].x)) + _3068;
        _3145 = (exp2(_3322 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3306 * cbSceneParam._m0[78u].y)) * _3296.y) / cbSceneParam._m0[78u].y)) + _3069;
        _3147 = (exp2(_3322 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3306 * cbSceneParam._m0[78u].z)) * _3296.z) / cbSceneParam._m0[78u].z)) + _3070;
        _3149 = _3305 * _3071;
    }
    else
    {
        _3143 = _3068;
        _3145 = _3069;
        _3147 = _3070;
        _3149 = _3071;
    }
    float _3161 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3162 = _3161 == 3.0;
    float _3163 = log2(_3149);
    float _3170 = exp2(_3163 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_3013 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _984))) + ((_3019 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1790)) * cbPerFrame._m0[3u].x));
    float _3171 = exp2(_3163 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0))) * (_3015 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _984))) + ((_3021 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1790)) * cbPerFrame._m0[3u].x));
    float _3172 = exp2(_3163 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0))) * (_3017 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _984))) + ((_3023 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1790)) * cbPerFrame._m0[3u].x));
    float _3181 = (_3161 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3181 * (_3162 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3143)));
    SV_Target.y = _3181 * (_3162 ? _3171 : (_3171 + (cbSceneParam._m0[72u].w * _3145)));
    SV_Target.z = _3181 * (_3162 ? _3172 : (_3172 + (cbSceneParam._m0[72u].w * _3147)));
    SV_Target.w = cbInstanceData._m0[_3043].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3043].w;
}


