#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1414;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4022 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4033 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4044 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].y) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4055 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _443 = (_436 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _444 = (_436 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _445 = (_436 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) + _455;
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _304) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _305) + cbTextureTilingScale._m0[14u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _549 = _545.z;
    float _558 = ((_528.z - _549) * _436) + _549;
    float _561 = ((((_528.x - _547) * _436) + _547) * 2.0) + (-1.0);
    float _562 = ((((_528.y - _548) * _436) + _548) * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _4066 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _618 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _621 = ((isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : min(_618, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _630 = (_621 - ((((((_611 - _612) * cbMtdParam._m0[24u].z) + _612) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _621))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4087 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _638 = (_631 * ((_483.x * cbMtdParam._m0[18u].x) - _462)) + _462;
    float _639 = (_631 * ((_483.y * cbMtdParam._m0[18u].y) - _463)) + _463;
    float _640 = (_631 * ((_483.z * cbMtdParam._m0[18u].z) - _464)) + _464;
    vec4 _652 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _654 = _652.x;
    float _655 = 1.0 - _654;
    float _680 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_654 - _655) * cbMtdParam._m0[24u].w) + _655) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4098 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _689 = ((((cbMtdParam._m0[10u].x - _638) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _681) + _638;
    float _690 = ((((cbMtdParam._m0[10u].y - _639) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _681) + _639;
    float _691 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _640)) * _681) + _640;
    vec4 _717 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _719 = _717.x;
    float _737 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _719) * _436) + _719;
    float _741 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _737) * cbMtdParam._m0[19u].z) + _737;
    float _743 = _741 - (_741 * _631);
    float _745 = _743 - (_743 * _681);
    float _750 = (((_503.z - _558) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _558;
    float _754 = ((_584.z - _750) * cbMtdParam._m0[19u].w) + _750;
    vec4 _768 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _775 = (_768.x * 2.0) + (-1.0);
    float _776 = (_768.y * 2.0) + (-1.0);
    float _777 = dot(vec2(_775, _776), vec2(_775, _776));
    float _4109 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _785 = (_631 * (_768.z - _754)) + _754;
    float _788 = ((cbMtdParam._m0[23u].y - _785) * _681) + _785;
    vec4 _807 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _813 = (_807.x * 2.0) + (-1.0);
    float _814 = (_807.y * 2.0) + (-1.0);
    float _815 = dot(vec2(_813, _814), vec2(_813, _814));
    float _4120 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _829 = (_561 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_503.x * 2.0) + (-1.0)))) + (((_584.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _830 = (_562 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_503.y * 2.0) + (-1.0)))) + (((_584.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _842 = (((_775 - _829) + (cbMtdParam._m0[21u].x * _829)) * _631) + _829;
    float _843 = (((_776 - _830) + (cbMtdParam._m0[21u].x * _830)) * _631) + _830;
    float _844 = (_631 * (sqrt(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) - _568)) + _568;
    float _855 = (((_813 - _842) + (_842 * cbMtdParam._m0[22u].z)) * _681) + _842;
    float _856 = (((_814 - _843) + (_843 * cbMtdParam._m0[22u].z)) * _681) + _843;
    float _857 = ((sqrt(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) - _844) * _681) + _844;
    float _861 = cbMtdParam._m0[22u].x + _584.w;
    float _864 = fma(_857, _253 * NORMAL.x, fma(_856, _260 * TANGENT.x, (_246 * _238) * _855));
    float _867 = fma(_857, _253 * NORMAL.y, fma(_856, _260 * TANGENT.y, (_246 * _239) * _855));
    float _870 = fma(_857, _253 * NORMAL.z, fma(_856, _260 * TANGENT.z, (_246 * _240) * _855));
    float _874 = inversesqrt(dot(vec3(_864, _867, _870), vec3(_864, _867, _870)));
    float _875 = _874 * _864;
    float _876 = _874 * _867;
    float _877 = _874 * _870;
    float _4131 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _878 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4153 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4164 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4175 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4186 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _883 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _897 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _947 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _937);
    float _948 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _937);
    float _949 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _937);
    float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
    float _954 = _947 * _953;
    float _955 = _948 * _953;
    float _956 = _949 * _953;
    float _962 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _963 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _981 = fma(_877, cbSceneParam._m0[5u].z, fma(_876, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _875));
    float _984 = fma(_877, cbSceneParam._m0[6u].z, fma(_876, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _875));
    float _987 = fma(_877, cbSceneParam._m0[7u].z, fma(_876, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _875));
    uint _1001 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1007 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * cbInstanceData._m0[_1001].x;
    float _1008 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * cbInstanceData._m0[_1001].y;
    float _1009 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * cbInstanceData._m0[_1001].z;
    float _4197 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _4219 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _1013 = 1.0 - _883;
    float _1014 = _1010 * _1013;
    float _1015 = _1011 * _1013;
    float _1016 = _1012 * _1013;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _883;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _883;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _883;
    float _1024 = _1021 + 0.039999999105930328369140625;
    float _1026 = _1022 + 0.039999999105930328369140625;
    float _1027 = _1023 + 0.039999999105930328369140625;
    vec4 _1036 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _962, cbSceneParam._m0[86u].y * _963));
    float _1040 = ((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * TEXCOORD_5.w) * _1036.x;
    float _1041 = dot(vec3(_875, _876, _877), vec3(_954, _955, _956));
    float _1044 = _1041 * 2.0;
    float _1048 = (_1044 * _875) - _954;
    float _1049 = (_1044 * _876) - _955;
    float _1050 = (_1044 * _877) - _956;
    float _1054 = abs(dot(vec3(_954, _955, _956), vec3(_875, _876, _877)));
    float _4230 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1056 = sqrt(_878);
    float _1069 = exp2((_1056 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1056 * 3.0));
    float _1075 = (1.0 - _1069) * ((_1056 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1076 = _1069 * _1056;
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1413;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1138 = fma(_1112, cbModelParam._m0[26u].z, fma(_1108, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104));
        float _1142 = fma(_1112, cbModelParam._m0[27u].z, fma(_1108, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104));
        float _1146 = fma(_1112, cbModelParam._m0[28u].z, fma(_1108, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104));
        float _1171 = _1104 + _875;
        float _1172 = _1108 + _876;
        float _1173 = _1112 + _877;
        float _1183 = fma(_1173, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171)) - _1138;
        float _1184 = fma(_1173, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171)) - _1142;
        float _1185 = fma(_1173, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171)) - _1146;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1138 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1142 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[34u].z) + ((((((_1146 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1241 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1207.x + (-0.5));
        float _1243 = _1241 * (_1207.y + (-0.5));
        float _1244 = _1241 * (_1207.z + (-0.5));
        float _1251 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1214.x + (-0.5));
        float _1253 = _1251 * (_1214.y + (-0.5));
        float _1254 = _1251 * (_1214.z + (-0.5));
        float _1261 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1221.x + (-0.5));
        float _1263 = _1261 * (_1221.y + (-0.5));
        float _1264 = _1261 * (_1221.z + (-0.5));
        float _1271 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1228.x + (-0.5));
        float _1273 = _1271 * (_1228.y + (-0.5));
        float _1274 = _1271 * (_1228.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1295 = (dot(vec3(_875, _876, _877), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1305 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4278 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1307 + 1.0))) + _1312) * _1275;
        float _1322 = _1243 * 0.5;
        float _1323 = _1253 * 0.5;
        float _1324 = _1263 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_875, _876, _877), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4311 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1349 + 1.0))) + _1354) * _1276;
        float _1364 = _1244 * 0.5;
        float _1365 = _1254 * 0.5;
        float _1366 = _1264 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_875, _876, _877), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4344 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1391 + 1.0))) + _1396) * _1277;
        _1413 = _1244;
        _1415 = _1243;
        _1416 = _1242;
        _1417 = _1254;
        _1418 = _1253;
        _1419 = _1252;
        _1420 = _1264;
        _1421 = _1263;
        _1422 = _1262;
        _1423 = _1277;
        _1424 = _1276;
        _1425 = _1275;
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1414;
        _1415 = _1414;
        _1416 = _1414;
        _1417 = _1414;
        _1418 = _1414;
        _1419 = _1414;
        _1420 = _1414;
        _1421 = _1414;
        _1422 = _1414;
        _1423 = _1414;
        _1424 = _1414;
        _1425 = _1414;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1453 = fma(_1112, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1104));
        float _1457 = fma(_1112, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1104));
        float _1461 = fma(_1112, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1104));
        float _1484 = _1104 + _875;
        float _1485 = _1108 + _876;
        float _1486 = _1112 + _877;
        float _1496 = fma(_1486, cbModelParam._m0[30u].z, fma(_1485, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1484)) - _1453;
        float _1497 = fma(_1486, cbModelParam._m0[31u].z, fma(_1485, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1484)) - _1457;
        float _1498 = fma(_1486, cbModelParam._m0[32u].z, fma(_1485, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1484)) - _1461;
        float _1502 = inversesqrt(dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498)));
        float _1515 = ((_1502 * _1496) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1453 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1502 * _1497) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1457 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1502 * _1498) / cbModelParam._m0[35u].z) + ((((((_1461 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        float _1552 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1519.x + (-0.5));
        float _1554 = _1552 * (_1519.y + (-0.5));
        float _1555 = _1552 * (_1519.z + (-0.5));
        float _1562 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1526.x + (-0.5));
        float _1564 = _1562 * (_1526.y + (-0.5));
        float _1565 = _1562 * (_1526.z + (-0.5));
        float _1572 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1533.x + (-0.5));
        float _1574 = _1572 * (_1533.y + (-0.5));
        float _1575 = _1572 * (_1533.z + (-0.5));
        float _1582 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1540.x + (-0.5));
        float _1584 = _1582 * (_1540.y + (-0.5));
        float _1585 = _1582 * (_1540.z + (-0.5));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = _1553 * 0.5;
        float _1590 = _1563 * 0.5;
        float _1591 = _1573 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_875, _876, _877), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4385 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4396 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4407 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_1616 + 1.0))) + _1621) * _1586;
        float _1631 = _1554 * 0.5;
        float _1632 = _1564 * 0.5;
        float _1633 = _1574 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_875, _876, _877), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4418 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4429 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4440 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_1658 + 1.0))) + _1663) * _1587;
        float _1673 = _1555 * 0.5;
        float _1674 = _1565 * 0.5;
        float _1675 = _1575 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_875, _876, _877), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4451 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4462 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4473 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_1700 + 1.0))) + _1705) * _1588;
        _1722 = _1555;
        _1723 = _1554;
        _1724 = _1553;
        _1725 = _1565;
        _1726 = _1564;
        _1727 = _1563;
        _1728 = _1575;
        _1729 = _1574;
        _1730 = _1573;
        _1731 = _1588;
        _1732 = _1587;
        _1733 = _1586;
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
    }
    else
    {
        _1722 = _1414;
        _1723 = _1414;
        _1724 = _1414;
        _1725 = _1414;
        _1726 = _1414;
        _1727 = _1414;
        _1728 = _1414;
        _1729 = _1414;
        _1730 = _1414;
        _1731 = _1414;
        _1732 = _1414;
        _1733 = _1414;
        _1734 = 0.0;
        _1735 = 0.0;
        _1736 = 0.0;
    }
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1426)) + _1426;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1427)) + _1427;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1428)) + _1428;
    float _1769 = fma(_1748, cbSceneParam._m0[89u].z, fma(_1747, cbSceneParam._m0[89u].y, _1746 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1748, cbSceneParam._m0[90u].z, fma(_1747, cbSceneParam._m0[90u].y, _1746 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1748, cbSceneParam._m0[91u].z, fma(_1747, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1746));
    float _1790 = _1048 * 0.5;
    float _1791 = _1049 * 0.5;
    float _1792 = _1050 * 0.5;
    float _1793 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1796 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1799 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1833;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1806 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1413, _1417, _1420, _1423));
        float _1810 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1415, _1418, _1421, _1424));
        float _1814 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1821 = dot(vec4(cbModelParam._m0[39u]), vec4(_1790, _1791, _1792, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1821) ? 0.0 : (isnan(0.0) ? _1821 : max(0.0, _1821))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1844;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1835 = dot(vec4(cbModelParam._m0[40u]), vec4(_1790, _1791, _1792, 1.0));
        _1844 = dot(vec3(isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1835) ? 0.0 : (isnan(0.0) ? _1835 : max(0.0, _1835))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1844 = 1.0;
    }
    float _1848 = (_1844 * cbModelParam._m0[1u].x) + (_1833 * (1.0 - cbModelParam._m0[1u].x));
    float _1858 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _878);
    float _1859 = isnan(_1858) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1858 : min(cbModelParam._m0[25u].z, _1858));
    float _1939;
    float _1941;
    float _1943;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1906 = fma(_1112, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1104)) + cbModelParam._m0[13u].w;
        float _1910 = fma(_1112, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1104)) + cbModelParam._m0[14u].w;
        float _1914 = fma(_1112, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1104)) + cbModelParam._m0[15u].w;
        float _1917 = fma(_1050, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048));
        float _1920 = fma(_1050, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048));
        float _1923 = fma(_1050, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048));
        float _1951;
        if (_1917 > 0.0)
        {
            _1951 = abs((1.0 - _1906) / _1917);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1906 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1951 = frontier_phi_14_12_ladder;
        }
        float _2122;
        if (_1920 > 0.0)
        {
            _2122 = abs((1.0 - _1910) / _1920);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1910 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2122 = frontier_phi_23_19_ladder;
        }
        float _2417;
        if (_1923 > 0.0)
        {
            _2417 = abs((1.0 - _1914) / _1923);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1914 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2417 = frontier_phi_35_30_ladder;
        }
        float _2419 = isnan(_2122) ? _1951 : (isnan(_1951) ? _2122 : min(_1951, _2122));
        float _2420 = isnan(_2417) ? _2419 : (isnan(_2419) ? _2417 : min(_2419, _2417));
        float _2424 = (_2420 * _1917) + _1906;
        float _2425 = (_2420 * _1920) + _1910;
        float _2426 = (_2420 * _1923) + _1914;
        float _2427 = _2420 * 9.9999997473787516355514526367188e-05;
        float _2429 = (-1.0) - _2427;
        float _2431 = _2427 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2426 > _2431) || ((_2426 < _2429) || ((_2425 > _2431) || ((_2425 < _2429) || ((_2424 < _2429) || (_2424 > _2431))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2571 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2426, cbModelParam._m0[9u].z, fma(_2425, cbModelParam._m0[9u].y, _2424 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2426, cbModelParam._m0[10u].z, fma(_2425, cbModelParam._m0[10u].y, _2424 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2426, cbModelParam._m0[11u].z, fma(_2425, cbModelParam._m0[11u].y, _2424 * cbModelParam._m0[11u].x))), _1859);
            frontier_phi_13_35_ladder = _2571.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2571.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2571.x * cbModelParam._m0[1u].y;
        }
        _1939 = frontier_phi_13_35_ladder_2;
        _1941 = frontier_phi_13_35_ladder_1;
        _1943 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1048, _1049, _1050), _1859);
        _1939 = _1927.x * cbModelParam._m0[1u].y;
        _1941 = _1927.y * cbModelParam._m0[1u].y;
        _1943 = _1927.z * cbModelParam._m0[1u].y;
    }
    float _1947 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _878);
    float _1948 = isnan(_1947) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1947 : min(cbModelParam._m0[25u].w, _1947));
    float _2037;
    float _2039;
    float _2041;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2001 = fma(_1112, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1104)) + cbModelParam._m0[21u].w;
        float _2005 = fma(_1112, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1104)) + cbModelParam._m0[22u].w;
        float _2009 = fma(_1112, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1104)) + cbModelParam._m0[23u].w;
        float _2012 = fma(_1050, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048));
        float _2015 = fma(_1050, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048));
        float _2018 = fma(_1050, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048));
        float _2127;
        if (_2012 > 0.0)
        {
            _2127 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2127 = frontier_phi_25_21_ladder;
        }
        float _2444;
        if (_2015 > 0.0)
        {
            _2444 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2444 = frontier_phi_37_32_ladder;
        }
        float _2782;
        if (_2018 > 0.0)
        {
            _2782 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2782 = frontier_phi_47_44_ladder;
        }
        float _2784 = isnan(_2444) ? _2127 : (isnan(_2127) ? _2444 : min(_2127, _2444));
        float _2785 = isnan(_2782) ? _2784 : (isnan(_2784) ? _2782 : min(_2784, _2782));
        float _2789 = (_2785 * _2012) + _2001;
        float _2790 = (_2785 * _2015) + _2005;
        float _2791 = (_2785 * _2018) + _2009;
        float _2792 = _2785 * 9.9999997473787516355514526367188e-05;
        float _2793 = (-1.0) - _2792;
        float _2795 = _2792 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2791 > _2795) || ((_2791 < _2793) || ((_2790 > _2795) || ((_2790 < _2793) || ((_2789 < _2793) || (_2789 > _2795))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2791, cbModelParam._m0[17u].z, fma(_2790, cbModelParam._m0[17u].y, _2789 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2791, cbModelParam._m0[18u].z, fma(_2790, cbModelParam._m0[18u].y, _2789 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2791, cbModelParam._m0[19u].z, fma(_2790, cbModelParam._m0[19u].y, _2789 * cbModelParam._m0[19u].x))), _1948);
            frontier_phi_22_47_ladder = _2913.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2913.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2913.x * cbModelParam._m0[1u].z;
        }
        _2037 = frontier_phi_22_47_ladder_2;
        _2039 = frontier_phi_22_47_ladder_1;
        _2041 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1048, _1049, _1050), _1948);
        _2037 = _2021.x * cbModelParam._m0[1u].z;
        _2039 = _2021.y * cbModelParam._m0[1u].z;
        _2041 = _2021.z * cbModelParam._m0[1u].z;
    }
    float _2054 = (((_1075 * _1024) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2037 - _1939)) + _1939);
    float _2056 = (((_1075 * _1026) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2039 - _1941)) + _1941);
    float _2058 = (((_1075 * _1027) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2041 - _1943)) + _1943);
    float _2061 = fma(_2058, cbSceneParam._m0[89u].z, fma(_2056, cbSceneParam._m0[89u].y, _2054 * cbSceneParam._m0[89u].x));
    float _2064 = fma(_2058, cbSceneParam._m0[90u].z, fma(_2056, cbSceneParam._m0[90u].y, _2054 * cbSceneParam._m0[90u].x));
    float _2067 = fma(_2058, cbSceneParam._m0[91u].z, fma(_2056, cbSceneParam._m0[91u].y, _2054 * cbSceneParam._m0[91u].x));
    float _2101 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2105 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2109 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2113 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2114 = _2101 / _2113;
    float _2115 = _2105 / _2113;
    float _2116 = _2109 / _2113;
    float _2263;
    float _2264;
    float _2265;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2143 = ((uint(_2116 > cbSceneParam._m0[59u].y) + uint(_2116 > cbSceneParam._m0[59u].x)) + uint(_2116 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2144 = _2143 + 43u;
        uint _2152 = _2143 + 44u;
        uint _2160 = _2143 + 45u;
        uint _2168 = _2143 + 46u;
        float _2179 = fma(_2113, cbSceneParam._m0[_2144].w, fma(_2109, cbSceneParam._m0[_2144].z, fma(_2105, cbSceneParam._m0[_2144].y, _2101 * cbSceneParam._m0[_2144].x)));
        float _2183 = fma(_2113, cbSceneParam._m0[_2152].w, fma(_2109, cbSceneParam._m0[_2152].z, fma(_2105, cbSceneParam._m0[_2152].y, _2101 * cbSceneParam._m0[_2152].x)));
        float _2191 = fma(_2113, cbSceneParam._m0[_2168].w, fma(_2109, cbSceneParam._m0[_2168].z, fma(_2105, cbSceneParam._m0[_2168].y, _2101 * cbSceneParam._m0[_2168].x)));
        float _2196 = cbSceneParam._m0[33u].z * _2191;
        float _2198 = cbSceneParam._m0[33u].w * _2191;
        float _2201 = fma(_2113, cbSceneParam._m0[_2160].w, fma(_2109, cbSceneParam._m0[_2160].z, fma(_2105, cbSceneParam._m0[_2160].y, _2101 * cbSceneParam._m0[_2160].x))) / _2191;
        float _2249 = (cbSceneParam._m0[33u].x - sqrt(((_2115 * _2115) + (_2114 * _2114)) + (_2116 * _2116))) * cbSceneParam._m0[33u].y;
        float _4599 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2256 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 + _2179) / _2191, (_2198 + _2183) / _2191), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 + _2179) / _2191, (_2183 - _2196) / _2191), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 - _2196) / _2191, (_2183 - _2198) / _2191), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 - _2198) / _2191, (_2196 + _2183) / _2191), _2201), 0.0)).x), vec4(0.25)));
        _2263 = 1.0 - (_2256 * cbSceneParam._m0[34u].x);
        _2264 = 1.0 - (_2256 * cbSceneParam._m0[34u].y);
        _2265 = 1.0 - (_2256 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2263 = 1.0;
        _2264 = 1.0;
        _2265 = 1.0;
    }
    float _2329;
    float _2331;
    float _2333;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2317 = fma(_2113, cbSceneParam._m0[63u].w, fma(_2109, cbSceneParam._m0[63u].z, fma(_2105, cbSceneParam._m0[63u].y, _2101 * cbSceneParam._m0[63u].x)));
        float _2318 = fma(_2113, cbSceneParam._m0[60u].w, fma(_2109, cbSceneParam._m0[60u].z, fma(_2105, cbSceneParam._m0[60u].y, _2101 * cbSceneParam._m0[60u].x))) / _2317;
        float _2319 = fma(_2113, cbSceneParam._m0[61u].w, fma(_2109, cbSceneParam._m0[61u].z, fma(_2105, cbSceneParam._m0[61u].y, _2101 * cbSceneParam._m0[61u].x))) / _2317;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2318 >= cbSceneParam._m0[64u].x) && (_2319 >= cbSceneParam._m0[64u].y)) && (_2318 <= cbSceneParam._m0[64u].z)) && (_2319 <= cbSceneParam._m0[64u].w))
        {
            float _2457 = fma(_2113, cbSceneParam._m0[62u].w, fma(_2109, cbSceneParam._m0[62u].z, fma(_2105, cbSceneParam._m0[62u].y, _2101 * cbSceneParam._m0[62u].x))) / _2317;
            float _2461 = isnan(cbSceneParam._m0[41u].w) ? _2457 : (isnan(_2457) ? cbSceneParam._m0[41u].w : max(_2457, cbSceneParam._m0[41u].w));
            float _2504 = (cbSceneParam._m0[33u].x - sqrt(((_2115 * _2115) + (_2114 * _2114)) + (_2116 * _2116))) * cbSceneParam._m0[33u].y;
            float _4615 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
            float _2511 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2318, cbSceneParam._m0[33u].w + _2319), _2461), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2318, _2319 - cbSceneParam._m0[33u].z), _2461), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2318 - cbSceneParam._m0[33u].z, _2319 - cbSceneParam._m0[33u].w), _2461), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2318 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2319), _2461), 0.0)).x), vec4(0.25)));
            float _2515 = 1.0 - (_2511 * cbSceneParam._m0[34u].x);
            float _2516 = 1.0 - (_2511 * cbSceneParam._m0[34u].y);
            float _2517 = 1.0 - (_2511 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2517) ? _2265 : (isnan(_2265) ? _2517 : min(_2265, _2517));
            frontier_phi_34_33_ladder_1 = isnan(_2516) ? _2264 : (isnan(_2264) ? _2516 : min(_2264, _2516));
            frontier_phi_34_33_ladder_2 = isnan(_2515) ? _2263 : (isnan(_2263) ? _2515 : min(_2263, _2515));
        }
        else
        {
            frontier_phi_34_33_ladder = _2265;
            frontier_phi_34_33_ladder_1 = _2264;
            frontier_phi_34_33_ladder_2 = _2263;
        }
        _2329 = frontier_phi_34_33_ladder_2;
        _2331 = frontier_phi_34_33_ladder_1;
        _2333 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2329 = _2263;
        _2331 = _2264;
        _2333 = _2265;
    }
    uvec4 _2338 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2340 = _2338.x * 14u;
    uint _2341 = _2340 + 13u;
    float _2348 = _1040 + (-1.0);
    float _2353 = (cbLight._m0[_2341].x * _2348) + 1.0;
    float _2354 = (cbLight._m0[_2341].y * _2348) + 1.0;
    float _2355 = (cbLight._m0[_2341].z * _2348) + 1.0;
    float _2356 = (cbLight._m0[_2341].w * _2348) + 1.0;
    uint _2357 = _2340 + 5u;
    float _2363 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
    uint _2367 = _2340 + 4u;
    float _2376 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
    uint _2380 = _2340 | 1u;
    float _2391 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_875, _876, _877));
    float _2394 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_875, _876, _877));
    float _4651 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _4662 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2399 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * 0.3183098733425140380859375;
    float _2401 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * 0.3183098733425140380859375;
    float _2408 = ((cbLight._m0[_2357].x * _2363) * _2401) + (((cbLight._m0[_2367].x * _2329) * _2376) * _2399);
    float _2409 = ((_2363 * cbLight._m0[_2357].y) * _2401) + (((cbLight._m0[_2367].y * _2331) * _2376) * _2399);
    float _2410 = ((_2363 * cbLight._m0[_2357].z) * _2401) + (((cbLight._m0[_2367].z * _2333) * _2376) * _2399);
    uvec4 _2414 = floatBitsToUint(cbLight._m0[_2340 + 12u]);
    bool _2416 = _2414.x == 0u;
    float _2518;
    float _2520;
    float _2522;
    if (_2416)
    {
        _2518 = _2408;
        _2520 = _2409;
        _2522 = _2410;
    }
    else
    {
        uint _2526 = _2340 + 6u;
        float _2542 = (dot(vec3(cbLight._m0[_2340 + 2u].xyz), vec3(_875, _876, _877)) * 0.5) + 0.5;
        float _2543 = _2542 * _2542;
        float _4673 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2544 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2545 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2518 = (((cbLight._m0[_2526].x * 0.3183098733425140380859375) * _2544) * _2545) + _2408;
        _2520 = (((cbLight._m0[_2526].y * 0.3183098733425140380859375) * _2544) * _2545) + _2409;
        _2522 = (((cbLight._m0[_2526].z * 0.3183098733425140380859375) * _2544) * _2545) + _2410;
    }
    bool _2525 = _2414.y == 0u;
    float _2580;
    float _2582;
    float _2584;
    if (_2525)
    {
        _2580 = _2518;
        _2582 = _2520;
        _2584 = _2522;
    }
    else
    {
        uint _2753 = _2340 + 7u;
        float _2769 = (dot(vec3(cbLight._m0[_2340 + 3u].xyz), vec3(_875, _876, _877)) * 0.5) + 0.5;
        float _2770 = _2769 * _2769;
        float _4689 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2771 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2772 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
        _2580 = (((cbLight._m0[_2753].x * 0.3183098733425140380859375) * _2771) * _2772) + _2518;
        _2582 = (((cbLight._m0[_2753].y * 0.3183098733425140380859375) * _2771) * _2772) + _2520;
        _2584 = (((cbLight._m0[_2753].z * 0.3183098733425140380859375) * _2771) * _2772) + _2522;
    }
    uint _2587 = _2340 + 8u;
    float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _878) * 0.949999988079071044921875);
    float _2601 = _2600 * _2600;
    float _2602 = cbLight._m0[_2340].x + _954;
    float _2603 = cbLight._m0[_2340].y + _955;
    float _2604 = cbLight._m0[_2340].z + _956;
    float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
    float _2609 = _2608 * _2602;
    float _2610 = _2608 * _2603;
    float _2611 = _2608 * _2604;
    float _2612 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2340].xyz));
    float _4705 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _4716 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _2616 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2617 = dot(vec3(_875, _876, _877), vec3(_2609, _2610, _2611));
    float _4727 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2620 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    float _2621 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2609, _2610, _2611));
    float _4738 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2625 = _2601 * _2601;
    float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
    float _2637 = exp2(log2(1.0 - (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) * 5.0);
    float _2638 = 0.959999978542327880859375 - _1021;
    float _2640 = 0.959999978542327880859375 - _1022;
    float _2641 = 0.959999978542327880859375 - _1023;
    float _2648 = 1.0 - _2601;
    float _2659 = (0.5 / (((_2616 * ((_2615 * _2648) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2648) + _2601) * _2615))) * _2615;
    float _4749 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2661 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
    uint _2675 = _2340 + 9u;
    float _2686 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _878) * 0.949999988079071044921875);
    float _2687 = _2686 * _2686;
    float _2688 = cbLight._m0[_2380].x + _954;
    float _2689 = cbLight._m0[_2380].y + _955;
    float _2690 = cbLight._m0[_2380].z + _956;
    float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
    float _2695 = _2694 * _2688;
    float _2696 = _2694 * _2689;
    float _2697 = _2694 * _2690;
    float _2698 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2380].xyz));
    float _4760 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2701 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    float _2702 = dot(vec3(_875, _876, _877), vec3(_2695, _2696, _2697));
    float _4771 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2705 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _2706 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2695, _2696, _2697));
    float _4782 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2710 = _2687 * _2687;
    float _2714 = ((_2705 * _2705) * (_2710 + (-1.0))) + 1.0;
    float _2721 = exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0);
    float _2728 = 1.0 - _2687;
    float _2738 = (0.5 / (((_2616 * ((_2701 * _2728) + _2687)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2728) + _2687) * _2701))) * _2701;
    float _4793 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2740 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2710 / ((_2714 * _2714) * 3.141590118408203125));
    float _2750 = (((((_2721 * _2638) + _1024) * cbLight._m0[_2675].x) * _2740) * _2363) + ((((cbLight._m0[_2587].x * _2329) * ((_2637 * _2638) + _1024)) * _2661) * _2376);
    float _2751 = (((((_2721 * _2640) + _1026) * cbLight._m0[_2675].y) * _2740) * _2363) + ((((cbLight._m0[_2587].y * _2331) * ((_2637 * _2640) + _1026)) * _2661) * _2376);
    float _2752 = (((((_2721 * _2641) + _1027) * cbLight._m0[_2675].z) * _2740) * _2363) + ((((cbLight._m0[_2587].z * _2333) * ((_2637 * _2641) + _1027)) * _2661) * _2376);
    float _2808;
    float _2810;
    float _2812;
    if (_2416)
    {
        _2808 = _2750;
        _2810 = _2751;
        _2812 = _2752;
    }
    else
    {
        uint _2814 = _2340 + 2u;
        uint _2818 = _2340 + 10u;
        float _2832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2814].w)) * _878) * 0.949999988079071044921875);
        float _2833 = _2832 * _2832;
        float _2834 = cbLight._m0[_2814].x + _954;
        float _2835 = cbLight._m0[_2814].y + _955;
        float _2836 = cbLight._m0[_2814].z + _956;
        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
        float _2841 = _2840 * _2834;
        float _2842 = _2840 * _2835;
        float _2843 = _2840 * _2836;
        float _2844 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2814].xyz));
        float _4804 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2847 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2848 = dot(vec3(_875, _876, _877), vec3(_2841, _2842, _2843));
        float _4815 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2852 = dot(vec3(cbLight._m0[_2814].xyz), vec3(_2841, _2842, _2843));
        float _4826 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2856 = _2833 * _2833;
        float _2860 = ((_2851 * _2851) * (_2856 + (-1.0))) + 1.0;
        float _2867 = exp2(log2(1.0 - (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0)))) * 5.0);
        float _2874 = 1.0 - _2833;
        float _2884 = (0.5 / (((_2616 * ((_2847 * _2874) + _2833)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2874) + _2833) * _2847))) * _2847;
        float _4837 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2886 = (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2856 / ((_2860 * _2860) * 3.141590118408203125));
        float _2887 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2808 = (((((_2867 * _2638) + _1024) * cbLight._m0[_2818].x) * _2886) * _2887) + _2750;
        _2810 = (((((_2867 * _2640) + _1026) * cbLight._m0[_2818].y) * _2886) * _2887) + _2751;
        _2812 = (((((_2867 * _2641) + _1027) * cbLight._m0[_2818].z) * _2886) * _2887) + _2752;
    }
    float _2918;
    float _2920;
    float _2922;
    if (_2525)
    {
        _2918 = _2808;
        _2920 = _2810;
        _2922 = _2812;
    }
    else
    {
        uint _2929 = _2340 + 3u;
        uint _2933 = _2340 + 11u;
        float _2947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2929].w)) * _878) * 0.949999988079071044921875);
        float _2948 = _2947 * _2947;
        float _2949 = cbLight._m0[_2929].x + _954;
        float _2950 = cbLight._m0[_2929].y + _955;
        float _2951 = cbLight._m0[_2929].z + _956;
        float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
        float _2956 = _2955 * _2949;
        float _2957 = _2955 * _2950;
        float _2958 = _2955 * _2951;
        float _2959 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2929].xyz));
        float _4853 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2962 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
        float _2963 = dot(vec3(_875, _876, _877), vec3(_2956, _2957, _2958));
        float _4864 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2966 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2967 = dot(vec3(cbLight._m0[_2929].xyz), vec3(_2956, _2957, _2958));
        float _4875 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2971 = _2948 * _2948;
        float _2975 = ((_2966 * _2966) * (_2971 + (-1.0))) + 1.0;
        float _2982 = exp2(log2(1.0 - (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) * 5.0);
        float _2989 = 1.0 - _2948;
        float _2999 = (0.5 / (((_2616 * ((_2962 * _2989) + _2948)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2989) + _2948) * _2962))) * _2962;
        float _4886 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        float _3001 = (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2971 / ((_2975 * _2975) * 3.141590118408203125));
        float _3002 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
        _2918 = (((((_2982 * _2638) + _1024) * cbLight._m0[_2933].x) * _3001) * _3002) + _2808;
        _2920 = (((((_2982 * _2640) + _1026) * cbLight._m0[_2933].y) * _3001) * _3002) + _2810;
        _2922 = (((((_2982 * _2641) + _1027) * cbLight._m0[_2933].z) * _3001) * _3002) + _2812;
    }
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    float _3078;
    if (_2338.y == 0u)
    {
        uvec4 _3023 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3024 = _3023.x;
        uint _3035 = uint((float(_3023.y) * floor(float(uint(cbSceneParam._m0[85u].y * _963) / _3024))) + floor(float(uint(cbSceneParam._m0[85u].x * _962) / _3024)));
        float _3045 = (log2(_2116 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3046 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
        uint _3049 = uint(isnan(14.0) ? _3046 : (isnan(_3046) ? 14.0 : min(_3046, 14.0)));
        uvec4 _3054 = texelFetch(g_lightClusterGridBuffer, int(((_3049 << 2u) + (_3035 << 6u)) >> 2u));
        uint _3055 = _3054.x;
        uint _3056 = _3023.z;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        if (((((1u << ((_3056 >> 4u) & 15u)) + 4294967295u) & _3055) == 0u) || ((_3056 & 240u) == 0u))
        {
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
            _3141 = 0.0;
            _3143 = 0.0;
            _3145 = 0.0;
        }
        else
        {
            float _3136;
            float _3138;
            float _3140;
            float _3142;
            float _3144;
            float _3146;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            uint _3286 = 0u;
            uint _3295;
            bool _3296;
            for (;;)
            {
                _3295 = texelFetch(g_lightClassification, int((((_3049 << 5u) + (_3035 << 9u)) + (_3286 << 2u)) >> 2u)).x;
                _3296 = _3295 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3296)
                {
                    frontier_phi_66_pred = _3285;
                    frontier_phi_66_pred_1 = _3284;
                    frontier_phi_66_pred_2 = _3283;
                    frontier_phi_66_pred_3 = _3282;
                    frontier_phi_66_pred_4 = _3281;
                    frontier_phi_66_pred_5 = _3280;
                }
                else
                {
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    uint _3410;
                    _3404 = _3280;
                    _3405 = _3281;
                    _3406 = _3282;
                    _3407 = _3283;
                    _3408 = _3284;
                    _3409 = _3285;
                    _3410 = _3295;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    for (;;)
                    {
                        uint _3414 = uint(findLSB(_3410)) + (_3286 << 5u);
                        uint _3411 = (_3410 + 4294967295u) & _3410;
                        uint _3416 = _3414 * 48u;
                        vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 3u)).x));
                        uint _3436 = (_3414 * 48u) + 4u;
                        vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 3u)).x));
                        uint _3455 = (_3414 * 48u) + 8u;
                        vec3 _3466 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3455)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 2u)).x));
                        float _3470 = _3430.x - _2114;
                        float _3471 = _3430.y - _2115;
                        float _3472 = _3430.z - _2116;
                        float _3473 = dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472));
                        float _3476 = inversesqrt(_3473);
                        float _3477 = _3476 * _3470;
                        float _3478 = _3476 * _3471;
                        float _3479 = _3476 * _3472;
                        float _3480 = dot(vec3(_981, _984, _987), vec3(_3477, _3478, _3479));
                        float _3485 = 1.0 - (_3473 * _3430.w);
                        float _4912 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3486 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3487 = sqrt(_3473) * _3449.w;
                        float _3490 = 1.39999997615814208984375 / (_3487 + 1.39999997615814208984375);
                        float _3491 = _3490 * _3490;
                        float _3494 = ((1.0 - _3491) * _3480) + _3491;
                        float _3497 = _3487 * _3487;
                        float _3501 = ((isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0))) * _3486) / ((_3497 * 0.699999988079071044921875) + 1.0);
                        float _3505 = (-0.0) - _2114;
                        float _3506 = (-0.0) - _2115;
                        float _3507 = (-0.0) - _2116;
                        float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                        float _3512 = _3511 * _3505;
                        float _3513 = _3511 * _3506;
                        float _3514 = _3511 * _3507;
                        float _3521 = exp2(log2(1.0 / ((_3497 * 3.5) + 5.0)) * 0.25);
                        float _3522 = 1.0 - _1056;
                        float _3529 = sqrt(1.0 - ((1.0 - (_3522 * _3522)) * (1.0 - (_3521 * _3521))));
                        float _3530 = _3529 * _3529;
                        float _3531 = _3530 * _3530;
                        float _3532 = _3512 + _3477;
                        float _3533 = _3513 + _3478;
                        float _3534 = _3514 + _3479;
                        float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                        float _3542 = dot(vec3(_981, _984, _987), vec3(_3512, _3513, _3514));
                        float _4928 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3545 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3546 = dot(vec3(_981, _984, _987), vec3(_3538 * _3532, _3538 * _3533, _3538 * _3534));
                        float _4939 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3549 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                        float _3553 = ((_3549 * _3549) * (_3531 + (-1.0))) + 1.0;
                        float _3554 = _3490 * _3530;
                        float _3555 = _3554 * _3554;
                        float _3558 = ((1.0 - _3555) * _3480) + _3555;
                        float _4950 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3559 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                        float _3560 = 1.0 - _3530;
                        float _3570 = (0.5 / (((_3559 * ((_3545 * _3560) + _3530)) + 9.9999999392252902907785028219223e-09) + (((_3559 * _3560) + _3530) * _3545))) * _3559;
                        float _4961 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3581 = (((_3531 * 3.1415927410125732421875) * (isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0)))) / ((_3553 * _3553) * ((_3497 * 2.1991131305694580078125) + 3.141590118408203125))) * _3486;
                        _3339 = (_3501 * _3449.x) + _3407;
                        _3340 = (_3501 * _3449.y) + _3408;
                        _3341 = (_3501 * _3449.z) + _3409;
                        _3336 = (_3581 * _3466.x) + _3404;
                        _3337 = (_3581 * _3466.y) + _3405;
                        _3338 = (_3581 * _3466.z) + _3406;
                        if (_3411 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3404 = _3336;
                            _3405 = _3337;
                            _3406 = _3338;
                            _3407 = _3339;
                            _3408 = _3340;
                            _3409 = _3341;
                            _3410 = _3411;
                        }
                    }
                    frontier_phi_66_pred = _3341;
                    frontier_phi_66_pred_1 = _3340;
                    frontier_phi_66_pred_2 = _3339;
                    frontier_phi_66_pred_3 = _3338;
                    frontier_phi_66_pred_4 = _3337;
                    frontier_phi_66_pred_5 = _3336;
                }
                _3146 = frontier_phi_66_pred;
                _3144 = frontier_phi_66_pred_1;
                _3142 = frontier_phi_66_pred_2;
                _3140 = frontier_phi_66_pred_3;
                _3138 = frontier_phi_66_pred_4;
                _3136 = frontier_phi_66_pred_5;
                uint _3287 = _3286 + 1u;
                if (_3287 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3280 = _3136;
                    _3281 = _3138;
                    _3282 = _3140;
                    _3283 = _3142;
                    _3284 = _3144;
                    _3285 = _3146;
                    _3286 = _3287;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
            _3141 = _3142;
            _3143 = _3144;
            _3145 = _3146;
        }
        uvec4 _3149 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3150 = _3149.z;
        uint _3152 = (_3150 >> 8u) & 15u;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        if (((4294967295u << _3152) & _3055) == 0u)
        {
            _3248 = _3135;
            _3250 = _3137;
            _3252 = _3139;
            _3254 = _3141;
            _3256 = _3143;
            _3258 = _3145;
        }
        else
        {
            float _3273 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
            float _3274 = _3273 * _2114;
            float _3275 = _3273 * _2115;
            float _3276 = _3273 * _2116;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3152 < ((_3150 >> 12u) & 15u))
            {
                float _3249;
                float _3251;
                float _3253;
                float _3255;
                float _3257;
                float _3259;
                float _3387 = _3135;
                float _3388 = _3137;
                float _3389 = _3139;
                float _3390 = _3141;
                float _3391 = _3143;
                float _3392 = _3145;
                uint _3393 = _3152;
                uint _3402;
                bool _3403;
                for (;;)
                {
                    _3402 = texelFetch(g_lightClassification, int((((_3049 << 5u) + (_3035 << 9u)) + (_3393 << 2u)) >> 2u)).x;
                    _3403 = _3402 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3403)
                    {
                        frontier_phi_72_pred = _3392;
                        frontier_phi_72_pred_1 = _3391;
                        frontier_phi_72_pred_2 = _3390;
                        frontier_phi_72_pred_3 = _3389;
                        frontier_phi_72_pred_4 = _3388;
                        frontier_phi_72_pred_5 = _3387;
                    }
                    else
                    {
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3599 = _3387;
                        float _3600 = _3388;
                        float _3601 = _3389;
                        float _3602 = _3390;
                        float _3603 = _3391;
                        float _3604 = _3392;
                        uint _3605 = _3402;
                        uint _3606;
                        vec4 _3631;
                        float _3632;
                        vec4 _3647;
                        vec3 _3659;
                        vec4 _3674;
                        vec4 _3689;
                        float _3735;
                        bool _3736;
                        for (;;)
                        {
                            uint _3616 = ((_3393 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3605));
                            _3606 = (_3605 + 4294967295u) & _3605;
                            uint _3618 = _3616 * 40u;
                            _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            _3632 = _3631.w;
                            uint _3634 = (_3616 * 40u) + 4u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3649 = (_3616 * 40u) + 8u;
                            _3659 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x));
                            uint _3661 = (_3616 * 40u) + 16u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3616 * 40u) + 20u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3691 = (_3616 * 40u) + 24u;
                            vec4 _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            uint _3710 = (_3616 * 40u) + 28u;
                            vec4 _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            _3735 = fma(_2116, _3723.z, fma(_2115, _3723.y, _3723.x * _2114)) + _3723.w;
                            _3736 = !((fma(_2116, _3704.z, fma(_2115, _3704.y, _3704.x * _2114)) + _3704.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3736)
                            {
                                float _3763 = _3631.x - _2114;
                                float _3764 = _3631.y - _2115;
                                float _3765 = _3631.z - _2116;
                                float _3766 = dot(vec3(_3763, _3764, _3765), vec3(_3763, _3764, _3765));
                                float _3769 = inversesqrt(_3766);
                                float _3770 = _3769 * _3763;
                                float _3771 = _3769 * _3764;
                                float _3772 = _3769 * _3765;
                                float _3776 = 1.0 - (_3766 / (_3632 * _3632));
                                float _4972 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3781 = sqrt(_3766) * _3647.w;
                                float _3783 = 1.39999997615814208984375 / (_3781 + 1.39999997615814208984375);
                                float _3784 = _3783 * _3783;
                                float _3787 = ((1.0 - _3784) * dot(vec3(_3770, _3771, _3772), vec3(_981, _984, _987))) + _3784;
                                float _3790 = _3781 * _3781;
                                float _3794 = (fma(_2116, _3674.z, fma(_2115, _3674.y, _3674.x * _2114)) + _3674.w) / _3735;
                                float _3795 = (fma(_2116, _3689.z, fma(_2115, _3689.y, _3689.x * _2114)) + _3689.w) / _3735;
                                float _3799 = 1.0 - dot(vec2(_3794, _3795), vec2(_3794, _3795));
                                float _4988 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3800 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3801 = _3800 * (((isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0))) * _3777) / ((_3790 * 0.699999988079071044921875) + 1.0));
                                float _3813 = exp2(log2(1.0 / ((_3790 * 3.5) + 5.0)) * 0.25);
                                float _3814 = 1.0 - _1056;
                                float _3821 = sqrt(1.0 - ((1.0 - (_3814 * _3814)) * (1.0 - (_3813 * _3813))));
                                float _3822 = _3821 * _3821;
                                float _3823 = _3822 * _3822;
                                float _3824 = _3770 - _3274;
                                float _3825 = _3771 - _3275;
                                float _3826 = _3772 - _3276;
                                float _3830 = inversesqrt(dot(vec3(_3824, _3825, _3826), vec3(_3824, _3825, _3826)));
                                float _3834 = dot(vec3(_981, _984, _987), vec3((-0.0) - _3274, (-0.0) - _3275, (-0.0) - _3276));
                                float _4999 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3837 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3838 = dot(vec3(_981, _984, _987), vec3(_3830 * _3824, _3830 * _3825, _3830 * _3826));
                                float _5010 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3841 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                                float _3845 = ((_3841 * _3841) * (_3823 + (-1.0))) + 1.0;
                                float _3846 = _3783 * _3822;
                                float _3847 = _3846 * _3846;
                                float _3853 = ((1.0 - _3847) * dot(vec3(_981, _984, _987), vec3(_3770, _3771, _3772))) + _3847;
                                float _5021 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3854 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                                float _3855 = 1.0 - _3822;
                                float _3865 = (0.5 / (((_3854 * ((_3837 * _3855) + _3822)) + 9.9999999392252902907785028219223e-09) + (((_3854 * _3855) + _3822) * _3837))) * _3854;
                                float _5032 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3875 = (_3800 * _3777) * (((_3823 * 3.1415927410125732421875) * (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0)))) / ((_3845 * _3845) * ((_3790 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3801 * _3647.y;
                                frontier_phi_78_pred_1 = _3801 * _3647.x;
                                frontier_phi_78_pred_2 = _3875 * _3659.z;
                                frontier_phi_78_pred_3 = _3875 * _3659.y;
                                frontier_phi_78_pred_4 = _3875 * _3659.x;
                                frontier_phi_78_pred_5 = _3801 * _3647.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3883 = frontier_phi_78_pred;
                            _3882 = frontier_phi_78_pred_1;
                            _3881 = frontier_phi_78_pred_2;
                            _3880 = frontier_phi_78_pred_3;
                            _3879 = frontier_phi_78_pred_4;
                            _3884 = frontier_phi_78_pred_5;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            _3588 = _3881 + _3601;
                            if (_3606 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3606;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3591;
                        frontier_phi_72_pred_1 = _3590;
                        frontier_phi_72_pred_2 = _3589;
                        frontier_phi_72_pred_3 = _3588;
                        frontier_phi_72_pred_4 = _3587;
                        frontier_phi_72_pred_5 = _3586;
                    }
                    _3259 = frontier_phi_72_pred;
                    _3257 = frontier_phi_72_pred_1;
                    _3255 = frontier_phi_72_pred_2;
                    _3253 = frontier_phi_72_pred_3;
                    _3251 = frontier_phi_72_pred_4;
                    _3249 = frontier_phi_72_pred_5;
                    uint _3394 = _3393 + 1u;
                    if (_3394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3387 = _3249;
                        _3388 = _3251;
                        _3389 = _3253;
                        _3390 = _3255;
                        _3391 = _3257;
                        _3392 = _3259;
                        _3393 = _3394;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3259;
                frontier_phi_60_61_ladder_1 = _3257;
                frontier_phi_60_61_ladder_2 = _3253;
                frontier_phi_60_61_ladder_3 = _3251;
                frontier_phi_60_61_ladder_4 = _3249;
                frontier_phi_60_61_ladder_5 = _3255;
            }
            else
            {
                frontier_phi_60_61_ladder = _3145;
                frontier_phi_60_61_ladder_1 = _3143;
                frontier_phi_60_61_ladder_2 = _3139;
                frontier_phi_60_61_ladder_3 = _3137;
                frontier_phi_60_61_ladder_4 = _3135;
                frontier_phi_60_61_ladder_5 = _3141;
            }
            _3248 = frontier_phi_60_61_ladder_4;
            _3250 = frontier_phi_60_61_ladder_3;
            _3252 = frontier_phi_60_61_ladder_2;
            _3254 = frontier_phi_60_61_ladder_5;
            _3256 = frontier_phi_60_61_ladder_1;
            _3258 = frontier_phi_60_61_ladder;
        }
        float _3263 = isnan(1.0) ? _1040 : (isnan(_1040) ? 1.0 : min(_1040, 1.0));
        _3068 = (_3263 * _3254) + _2580;
        _3070 = (_3263 * _3256) + _2582;
        _3072 = (_3263 * _3258) + _2584;
        _3074 = ((_3248 * _1024) * _3263) + _2918;
        _3076 = ((_3250 * _1026) * _3263) + _2920;
        _3078 = ((_3252 * _1027) * _3263) + _2922;
    }
    else
    {
        _3068 = _2580;
        _3070 = _2582;
        _3072 = _2584;
        _3074 = _2918;
        _3076 = _2920;
        _3078 = _2922;
    }
    float _5048 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _5059 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _5070 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    uint _3098 = _285 + 6u;
    float _3106 = _962 / cbSceneParam._m0[86u].x;
    float _3107 = _963 / cbSceneParam._m0[86u].y;
    vec4 _3121 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3106, _3107, (log2((isnan(cbSceneParam._m0[77u].w) ? _897 : (isnan(_897) ? cbSceneParam._m0[77u].w : min(_897, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3123 = _3121.x;
    float _3124 = _3121.y;
    float _3125 = _3121.z;
    float _3126 = _3121.w;
    float _3198;
    float _3200;
    float _3202;
    float _3204;
    if (_897 > cbSceneParam._m0[78u].w)
    {
        float _3160 = isnan(_897) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _897 : min(cbSceneParam._m0[80u].w, _897));
        float _3161 = _3160 / _897;
        float _3172 = _3161 * _947;
        float _3173 = _948 * _3161;
        float _3174 = (-0.0) - _3173;
        float _3176 = _3161 * _949;
        float _3178 = (cbSceneParam._m0[77u].w * _3174) / _3160;
        float _3179 = _3178 + cbSceneParam._m0[79u].w;
        float _3180 = cbSceneParam._m0[79u].w - _3173;
        float _3186 = sqrt(((_3172 * _3172) + (_3173 * _3173)) + (_3176 * _3176));
        float _3189 = (1.0 - (cbSceneParam._m0[77u].w / _3160)) * _3186;
        float _3194 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3196 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3349;
        if (abs((_3174 - _3178) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3349 = ((((_3179 > 0.0) ? exp2(_3194 * _3179) : (2.0 - exp2(_3196 * _3179))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3189;
        }
        else
        {
            float _3309 = 1.0 / cbSceneParam._m0[80u].x;
            float _3310 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : max(_3179, _3180));
            float _3311 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : min(_3179, _3180));
            float _3320 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : min(_3310, 0.0));
            float _3321 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : min(_3311, 0.0));
            _3349 = ((abs(_3186 / _3174) * cbSceneParam._m0[80u].y) * ((((_3320 - _3321) * 2.0) - ((exp2(_3194 * (isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0)))) - exp2(_3194 * (isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0))))) * _3309)) - ((exp2(_3196 * _3320) - exp2(_3196 * _3321)) * _3309))) + (_3189 * cbSceneParam._m0[80u].z);
        }
        vec4 _3351 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3106, _3107, 1.0), 0.0);
        float _3360 = exp2((_3349 * (-1.44269502162933349609375)) * (1.0 - _3351.w));
        float _3361 = log2(_3360);
        float _3377 = log2(_3126);
        _3198 = (exp2(_3377 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].x)) * _3351.x) / cbSceneParam._m0[78u].x)) + _3123;
        _3200 = (exp2(_3377 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].y)) * _3351.y) / cbSceneParam._m0[78u].y)) + _3124;
        _3202 = (exp2(_3377 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].z)) * _3351.z) / cbSceneParam._m0[78u].z)) + _3125;
        _3204 = _3360 * _3126;
    }
    else
    {
        _3198 = _3123;
        _3200 = _3124;
        _3202 = _3125;
        _3204 = _3126;
    }
    float _3216 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3217 = _3216 == 3.0;
    float _3218 = log2(_3204);
    float _3225 = exp2(_3218 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_3068 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1040))) + ((_3074 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1848)) * cbPerFrame._m0[3u].x));
    float _3226 = exp2(_3218 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0))) * (_3070 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1040))) + ((_3076 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1848)) * cbPerFrame._m0[3u].x));
    float _3227 = exp2(_3218 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0))) * (_3072 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1040))) + ((_3078 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1848)) * cbPerFrame._m0[3u].x));
    float _3236 = (_3216 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3236 * (_3217 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3198)));
    SV_Target.y = _3236 * (_3217 ? _3226 : (_3226 + (cbSceneParam._m0[72u].w * _3200)));
    SV_Target.z = _3236 * (_3217 ? _3227 : (_3227 + (cbSceneParam._m0[72u].w * _3202)));
    SV_Target.w = cbInstanceData._m0[_3098].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3098].w;
}


