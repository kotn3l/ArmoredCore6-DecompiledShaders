#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1015;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _292 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _246) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _247) + cbTextureTilingScale._m0[20u].w));
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _322 = _318.z;
    float _326 = (_318.x * 2.0) + (-1.0);
    float _327 = (_318.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_326, _327), vec2(_326, _327));
    float _3345 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _334 = sqrt(1.0 - (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))));
    float _339 = _326 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_292.x * 2.0) + (-1.0)));
    float _340 = _327 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_292.y * 2.0) + (-1.0)));
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _359 = _357.x;
    float _360 = 1.0 - _359;
    float _376 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_359 - _360) * cbMtdParam._m0[24u].z) + _360) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3356 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _384 = (_377 * (cbMtdParam._m0[17u].x - _272)) + _272;
    float _385 = (_377 * (cbMtdParam._m0[17u].y - _273)) + _273;
    float _386 = (_377 * (cbMtdParam._m0[17u].z - _274)) + _274;
    vec4 _399 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _401 = _399.x;
    float _403 = _401 - (_401 * _377);
    float _408 = (((_292.z - _322) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _322;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _428 = (_421.x * 2.0) + (-1.0);
    float _429 = (_421.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_428, _429), vec2(_428, _429));
    float _3367 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _438 = (_377 * (_421.z - _408)) + _408;
    float _450 = (((_428 - _339) + (cbMtdParam._m0[21u].x * _339)) * _377) + _339;
    float _451 = (((_429 - _340) + (cbMtdParam._m0[21u].x * _340)) * _377) + _340;
    float _452 = (_377 * (sqrt(1.0 - (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) - _334)) + _334;
    float _457 = cbMtdParam._m0[22u].x + _318.w;
    float _460 = fma(_452, _213 * NORMAL.x, fma(_451, _220 * TANGENT.x, (_206 * _198) * _450));
    float _463 = fma(_452, _213 * NORMAL.y, fma(_451, _220 * TANGENT.y, (_206 * _199) * _450));
    float _466 = fma(_452, _213 * NORMAL.z, fma(_451, _220 * TANGENT.z, (_206 * _200) * _450));
    float _470 = inversesqrt(dot(vec3(_460, _463, _466), vec3(_460, _463, _466)));
    float _471 = _470 * _460;
    float _472 = _470 * _463;
    float _473 = _470 * _466;
    float _3378 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _474 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _3389 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3400 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3411 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3422 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3433 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _479 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _493 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _544 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _534);
    float _545 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _534);
    float _546 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _534);
    float _550 = inversesqrt(dot(vec3(_544, _545, _546), vec3(_544, _545, _546)));
    float _551 = _544 * _550;
    float _552 = _545 * _550;
    float _553 = _546 * _550;
    float _559 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _560 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _581 = fma(_473, cbSceneParam._m0[5u].z, fma(_472, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _471));
    float _584 = fma(_473, cbSceneParam._m0[6u].z, fma(_472, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _471));
    float _587 = fma(_473, cbSceneParam._m0[7u].z, fma(_472, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _471));
    uint _601 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _607 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * cbInstanceData._m0[_601].x;
    float _608 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * cbInstanceData._m0[_601].y;
    float _609 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_601].z;
    float _3444 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _3466 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _613 = 1.0 - _479;
    float _614 = _610 * _613;
    float _615 = _611 * _613;
    float _616 = _612 * _613;
    float _621 = (_610 + (-0.039999999105930328369140625)) * _479;
    float _622 = (_611 + (-0.039999999105930328369140625)) * _479;
    float _623 = (_612 + (-0.039999999105930328369140625)) * _479;
    float _624 = _621 + 0.039999999105930328369140625;
    float _626 = _622 + 0.039999999105930328369140625;
    float _627 = _623 + 0.039999999105930328369140625;
    vec4 _636 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _559, cbSceneParam._m0[86u].y * _560));
    float _640 = ((isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * TEXCOORD_5.w) * _636.x;
    float _641 = dot(vec3(_471, _472, _473), vec3(_551, _552, _553));
    float _644 = _641 * 2.0;
    float _648 = (_644 * _471) - _551;
    float _649 = (_644 * _472) - _552;
    float _650 = (_644 * _473) - _553;
    float _654 = abs(dot(vec3(_551, _552, _553), vec3(_471, _472, _473)));
    float _3477 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _656 = sqrt(_474);
    float _669 = exp2((_656 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_656 * 3.0));
    float _675 = (1.0 - _669) * ((_656 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _676 = _669 * _656;
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1014;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _739 = fma(_712, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _704));
        float _743 = fma(_712, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _704));
        float _747 = fma(_712, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _704));
        float _772 = _704 + _471;
        float _773 = _708 + _472;
        float _774 = _712 + _473;
        float _784 = fma(_774, cbModelParam._m0[26u].z, fma(_773, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _772)) - _739;
        float _785 = fma(_774, cbModelParam._m0[27u].z, fma(_773, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _772)) - _743;
        float _786 = fma(_774, cbModelParam._m0[28u].z, fma(_773, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _772)) - _747;
        float _790 = inversesqrt(dot(vec3(_784, _785, _786), vec3(_784, _785, _786)));
        float _803 = ((_790 * _784) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_739 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _804 = ((_790 * _785) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_743 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_790 * _786) / cbModelParam._m0[34u].z) + ((((((_747 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_803, _804, _805), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_803, _804, _805), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_803, _804, _805), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_803, _804, _805), 0.0);
        float _842 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_808.x + (-0.5));
        float _844 = _842 * (_808.y + (-0.5));
        float _845 = _842 * (_808.z + (-0.5));
        float _852 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_815.x + (-0.5));
        float _854 = _852 * (_815.y + (-0.5));
        float _855 = _852 * (_815.z + (-0.5));
        float _862 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_822.x + (-0.5));
        float _864 = _862 * (_822.y + (-0.5));
        float _865 = _862 * (_822.z + (-0.5));
        float _872 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_829.x + (-0.5));
        float _874 = _872 * (_829.y + (-0.5));
        float _875 = _872 * (_829.z + (-0.5));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = _843 * 0.5;
        float _880 = _853 * 0.5;
        float _881 = _863 * 0.5;
        float _882 = dot(vec3(_879, _880, _881), vec3(_879, _880, _881));
        float _887 = (_882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_882);
        float _896 = (dot(vec3(_471, _472, _473), vec3(_887 * _879, _887 * _880, _887 * _881)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _906 = sqrt(((_880 * _880) + (_879 * _879)) + (_881 * _881)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _908 = _907 * 2.0;
        float _912 = (1.0 - _907) / (_907 + 1.0);
        float _3525 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _922 = ((((1.0 - _913) * (_908 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_908 + 1.0))) + _913) * _876;
        float _923 = _844 * 0.5;
        float _924 = _854 * 0.5;
        float _925 = _864 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _939 = (dot(vec3(_471, _472, _473), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _948 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3558 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_950 + 1.0))) + _955) * _877;
        float _965 = _845 * 0.5;
        float _966 = _855 * 0.5;
        float _967 = _865 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_471, _472, _473), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3591 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_992 + 1.0))) + _997) * _878;
        _1014 = _845;
        _1016 = _844;
        _1017 = _843;
        _1018 = _855;
        _1019 = _854;
        _1020 = _853;
        _1021 = _865;
        _1022 = _864;
        _1023 = _863;
        _1024 = _878;
        _1025 = _877;
        _1026 = _876;
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0)));
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
    }
    else
    {
        _1014 = _1015;
        _1016 = _1015;
        _1017 = _1015;
        _1018 = _1015;
        _1019 = _1015;
        _1020 = _1015;
        _1021 = _1015;
        _1022 = _1015;
        _1023 = _1015;
        _1024 = _1015;
        _1025 = _1015;
        _1026 = _1015;
        _1027 = 0.0;
        _1028 = 0.0;
        _1029 = 0.0;
    }
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1054 = fma(_712, cbModelParam._m0[30u].z, fma(_708, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _704));
        float _1058 = fma(_712, cbModelParam._m0[31u].z, fma(_708, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _704));
        float _1062 = fma(_712, cbModelParam._m0[32u].z, fma(_708, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _704));
        float _1085 = _704 + _471;
        float _1086 = _708 + _472;
        float _1087 = _712 + _473;
        float _1097 = fma(_1087, cbModelParam._m0[30u].z, fma(_1086, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1085)) - _1054;
        float _1098 = fma(_1087, cbModelParam._m0[31u].z, fma(_1086, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1085)) - _1058;
        float _1099 = fma(_1087, cbModelParam._m0[32u].z, fma(_1086, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1085)) - _1062;
        float _1103 = inversesqrt(dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099)));
        float _1116 = ((_1103 * _1097) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1054 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1103 * _1098) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1058 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1103 * _1099) / cbModelParam._m0[35u].z) + ((((((_1062 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        float _1153 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1120.x + (-0.5));
        float _1155 = _1153 * (_1120.y + (-0.5));
        float _1156 = _1153 * (_1120.z + (-0.5));
        float _1163 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1127.x + (-0.5));
        float _1165 = _1163 * (_1127.y + (-0.5));
        float _1166 = _1163 * (_1127.z + (-0.5));
        float _1173 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1134.x + (-0.5));
        float _1175 = _1173 * (_1134.y + (-0.5));
        float _1176 = _1173 * (_1134.z + (-0.5));
        float _1183 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1141.x + (-0.5));
        float _1185 = _1183 * (_1141.y + (-0.5));
        float _1186 = _1183 * (_1141.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_471, _472, _473), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3654 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1217 + 1.0))) + _1222) * _1187;
        float _1232 = _1155 * 0.5;
        float _1233 = _1165 * 0.5;
        float _1234 = _1175 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_471, _472, _473), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3687 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1259 + 1.0))) + _1264) * _1188;
        float _1274 = _1156 * 0.5;
        float _1275 = _1166 * 0.5;
        float _1276 = _1176 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_471, _472, _473), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3720 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1301 + 1.0))) + _1306) * _1189;
        _1323 = _1156;
        _1324 = _1155;
        _1325 = _1154;
        _1326 = _1166;
        _1327 = _1165;
        _1328 = _1164;
        _1329 = _1176;
        _1330 = _1175;
        _1331 = _1174;
        _1332 = _1189;
        _1333 = _1188;
        _1334 = _1187;
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
    }
    else
    {
        _1323 = _1015;
        _1324 = _1015;
        _1325 = _1015;
        _1326 = _1015;
        _1327 = _1015;
        _1328 = _1015;
        _1329 = _1015;
        _1330 = _1015;
        _1331 = _1015;
        _1332 = _1015;
        _1333 = _1015;
        _1334 = _1015;
        _1335 = 0.0;
        _1336 = 0.0;
        _1337 = 0.0;
    }
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1027)) + _1027;
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1028)) + _1028;
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1029)) + _1029;
    float _1370 = fma(_1349, cbSceneParam._m0[89u].z, fma(_1348, cbSceneParam._m0[89u].y, _1347 * cbSceneParam._m0[89u].x));
    float _1373 = fma(_1349, cbSceneParam._m0[90u].z, fma(_1348, cbSceneParam._m0[90u].y, _1347 * cbSceneParam._m0[90u].x));
    float _1376 = fma(_1349, cbSceneParam._m0[91u].z, fma(_1348, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1347));
    float _1391 = _648 * 0.5;
    float _1392 = _649 * 0.5;
    float _1393 = _650 * 0.5;
    float _1394 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1397 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1400 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1434;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1407 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1014, _1018, _1021, _1024));
        float _1411 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1016, _1019, _1022, _1025));
        float _1415 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1017, _1020, _1023, _1026));
        float _1422 = dot(vec4(cbModelParam._m0[39u]), vec4(_1391, _1392, _1393, 1.0));
        _1434 = dot(vec3(isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1422) ? 0.0 : (isnan(0.0) ? _1422 : max(0.0, _1422))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1434 = 1.0;
    }
    float _1445;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1436 = dot(vec4(cbModelParam._m0[40u]), vec4(_1391, _1392, _1393, 1.0));
        _1445 = dot(vec3(isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1436) ? 0.0 : (isnan(0.0) ? _1436 : max(0.0, _1436))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1445 = 1.0;
    }
    float _1449 = (_1445 * cbModelParam._m0[1u].x) + (_1434 * (1.0 - cbModelParam._m0[1u].x));
    float _1459 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _474);
    float _1460 = isnan(_1459) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1459 : min(cbModelParam._m0[25u].z, _1459));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1508 = fma(_712, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704)) + cbModelParam._m0[13u].w;
        float _1512 = fma(_712, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704)) + cbModelParam._m0[14u].w;
        float _1516 = fma(_712, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704)) + cbModelParam._m0[15u].w;
        float _1519 = fma(_650, cbModelParam._m0[13u].z, fma(_649, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _648));
        float _1522 = fma(_650, cbModelParam._m0[14u].z, fma(_649, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _648));
        float _1525 = fma(_650, cbModelParam._m0[15u].z, fma(_649, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _648));
        float _1553;
        if (_1519 > 0.0)
        {
            _1553 = abs((1.0 - _1508) / _1519);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1508 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1553 = frontier_phi_14_12_ladder;
        }
        float _1758;
        if (_1522 > 0.0)
        {
            _1758 = abs((1.0 - _1512) / _1522);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1512 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1758 = frontier_phi_23_19_ladder;
        }
        float _2012;
        if (_1525 > 0.0)
        {
            _2012 = abs((1.0 - _1516) / _1525);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1516 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2012 = frontier_phi_35_30_ladder;
        }
        float _2014 = isnan(_1758) ? _1553 : (isnan(_1553) ? _1758 : min(_1553, _1758));
        float _2015 = isnan(_2012) ? _2014 : (isnan(_2014) ? _2012 : min(_2014, _2012));
        float _2019 = (_2015 * _1519) + _1508;
        float _2020 = (_2015 * _1522) + _1512;
        float _2021 = (_2015 * _1525) + _1516;
        float _2022 = _2015 * 9.9999997473787516355514526367188e-05;
        float _2024 = (-1.0) - _2022;
        float _2026 = _2022 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2021 > _2026) || ((_2021 < _2024) || ((_2020 > _2026) || ((_2020 < _2024) || ((_2019 < _2024) || (_2019 > _2026))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2149 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2021, cbModelParam._m0[9u].z, fma(_2020, cbModelParam._m0[9u].y, _2019 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2021, cbModelParam._m0[10u].z, fma(_2020, cbModelParam._m0[10u].y, _2019 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2021, cbModelParam._m0[11u].z, fma(_2020, cbModelParam._m0[11u].y, _2019 * cbModelParam._m0[11u].x))), _1460);
            frontier_phi_13_35_ladder = _2149.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2149.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2149.x * cbModelParam._m0[1u].y;
        }
        _1541 = frontier_phi_13_35_ladder_2;
        _1543 = frontier_phi_13_35_ladder_1;
        _1545 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_648, _649, _650), _1460);
        _1541 = _1529.x * cbModelParam._m0[1u].y;
        _1543 = _1529.y * cbModelParam._m0[1u].y;
        _1545 = _1529.z * cbModelParam._m0[1u].y;
    }
    float _1549 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _474);
    float _1550 = isnan(_1549) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1549 : min(cbModelParam._m0[25u].w, _1549));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1605 = fma(_712, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704)) + cbModelParam._m0[21u].w;
        float _1609 = fma(_712, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704)) + cbModelParam._m0[22u].w;
        float _1613 = fma(_712, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704)) + cbModelParam._m0[23u].w;
        float _1616 = fma(_650, cbModelParam._m0[21u].z, fma(_649, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _648));
        float _1619 = fma(_650, cbModelParam._m0[22u].z, fma(_649, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _648));
        float _1622 = fma(_650, cbModelParam._m0[23u].z, fma(_649, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _648));
        float _1763;
        if (_1616 > 0.0)
        {
            _1763 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1763 = frontier_phi_25_21_ladder;
        }
        float _2039;
        if (_1619 > 0.0)
        {
            _2039 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2039 = frontier_phi_37_32_ladder;
        }
        float _2252;
        if (_1622 > 0.0)
        {
            _2252 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2252 = frontier_phi_46_43_ladder;
        }
        float _2254 = isnan(_2039) ? _1763 : (isnan(_1763) ? _2039 : min(_1763, _2039));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1616) + _1605;
        float _2260 = (_2255 * _1619) + _1609;
        float _2261 = (_2255 * _1622) + _1613;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2262;
        float _2265 = _2262 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2261 > _2265) || ((_2261 < _2263) || ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 < _2263) || (_2259 > _2265))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2261, cbModelParam._m0[17u].z, fma(_2260, cbModelParam._m0[17u].y, _2259 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2261, cbModelParam._m0[18u].z, fma(_2260, cbModelParam._m0[18u].y, _2259 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2261, cbModelParam._m0[19u].z, fma(_2260, cbModelParam._m0[19u].y, _2259 * cbModelParam._m0[19u].x))), _1550);
            frontier_phi_22_46_ladder = _2460.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2460.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2460.x * cbModelParam._m0[1u].z;
        }
        _1641 = frontier_phi_22_46_ladder_2;
        _1643 = frontier_phi_22_46_ladder_1;
        _1645 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1625 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_648, _649, _650), _1550);
        _1641 = _1625.x * cbModelParam._m0[1u].z;
        _1643 = _1625.y * cbModelParam._m0[1u].z;
        _1645 = _1625.z * cbModelParam._m0[1u].z;
    }
    float _1658 = (((_675 * _624) + _676) * _640) * ((cbModelParam._m0[1u].w * (_1641 - _1541)) + _1541);
    float _1660 = (((_675 * _626) + _676) * _640) * ((cbModelParam._m0[1u].w * (_1643 - _1543)) + _1543);
    float _1662 = (((_675 * _627) + _676) * _640) * ((cbModelParam._m0[1u].w * (_1645 - _1545)) + _1545);
    float _1665 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, _1658 * cbSceneParam._m0[91u].x));
    uvec4 _1681 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1683 = _1681.x * 14u;
    uint _1684 = _1683 + 13u;
    float _1691 = _640 + (-1.0);
    float _1696 = (cbLight._m0[_1684].x * _1691) + 1.0;
    float _1697 = (cbLight._m0[_1684].y * _1691) + 1.0;
    float _1698 = (cbLight._m0[_1684].z * _1691) + 1.0;
    float _1699 = (cbLight._m0[_1684].w * _1691) + 1.0;
    uint _1700 = _1683 + 5u;
    float _1706 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1710 = _1683 + 4u;
    float _1717 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1721 = _1683 | 1u;
    float _1732 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_471, _472, _473));
    float _1735 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_471, _472, _473));
    float _3856 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _3867 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1740 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.3183098733425140380859375;
    float _1742 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.3183098733425140380859375;
    float _1749 = ((cbLight._m0[_1700].x * _1706) * _1742) + ((cbLight._m0[_1710].x * _1717) * _1740);
    float _1750 = ((_1706 * cbLight._m0[_1700].y) * _1742) + ((_1717 * cbLight._m0[_1710].y) * _1740);
    float _1751 = ((_1706 * cbLight._m0[_1700].z) * _1742) + ((_1717 * cbLight._m0[_1710].z) * _1740);
    uvec4 _1755 = floatBitsToUint(cbLight._m0[_1683 + 12u]);
    bool _1757 = _1755.x == 0u;
    float _1768;
    float _1770;
    float _1772;
    if (_1757)
    {
        _1768 = _1749;
        _1770 = _1750;
        _1772 = _1751;
    }
    else
    {
        uint _1776 = _1683 + 6u;
        float _1792 = (dot(vec3(cbLight._m0[_1683 + 2u].xyz), vec3(_471, _472, _473)) * 0.5) + 0.5;
        float _1793 = _1792 * _1792;
        float _3878 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1795 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1768 = (((cbLight._m0[_1776].x * 0.3183098733425140380859375) * _1794) * _1795) + _1749;
        _1770 = (((cbLight._m0[_1776].y * 0.3183098733425140380859375) * _1794) * _1795) + _1750;
        _1772 = (((cbLight._m0[_1776].z * 0.3183098733425140380859375) * _1794) * _1795) + _1751;
    }
    bool _1775 = _1755.y == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1775)
    {
        _1813 = _1768;
        _1815 = _1770;
        _1817 = _1772;
    }
    else
    {
        uint _1983 = _1683 + 7u;
        float _1999 = (dot(vec3(cbLight._m0[_1683 + 3u].xyz), vec3(_471, _472, _473)) * 0.5) + 0.5;
        float _2000 = _1999 * _1999;
        float _3894 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2001 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _2002 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1813 = (((cbLight._m0[_1983].x * 0.3183098733425140380859375) * _2001) * _2002) + _1768;
        _1815 = (((cbLight._m0[_1983].y * 0.3183098733425140380859375) * _2001) * _2002) + _1770;
        _1817 = (((cbLight._m0[_1983].z * 0.3183098733425140380859375) * _2001) * _2002) + _1772;
    }
    uint _1820 = _1683 + 8u;
    float _1833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1683].w)) * _474) * 0.949999988079071044921875);
    float _1834 = _1833 * _1833;
    float _1835 = cbLight._m0[_1683].x + _551;
    float _1836 = cbLight._m0[_1683].y + _552;
    float _1837 = cbLight._m0[_1683].z + _553;
    float _1841 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
    float _1842 = _1841 * _1835;
    float _1843 = _1841 * _1836;
    float _1844 = _1841 * _1837;
    float _1845 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_1683].xyz));
    float _3910 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _1849 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1850 = dot(vec3(_471, _472, _473), vec3(_1842, _1843, _1844));
    float _3932 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1854 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1842, _1843, _1844));
    float _3943 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1858 = _1834 * _1834;
    float _1862 = ((_1853 * _1853) * (_1858 + (-1.0))) + 1.0;
    float _1870 = exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0);
    float _1871 = 0.959999978542327880859375 - _621;
    float _1873 = 0.959999978542327880859375 - _622;
    float _1874 = 0.959999978542327880859375 - _623;
    float _1881 = 1.0 - _1834;
    float _1892 = (0.5 / (((_1849 * ((_1848 * _1881) + _1834)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _1881) + _1834) * _1848))) * _1848;
    float _3954 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1858 / ((_1862 * _1862) * 3.141590118408203125));
    uint _1905 = _1683 + 9u;
    float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1721].w)) * _474) * 0.949999988079071044921875);
    float _1917 = _1916 * _1916;
    float _1918 = cbLight._m0[_1721].x + _551;
    float _1919 = cbLight._m0[_1721].y + _552;
    float _1920 = cbLight._m0[_1721].z + _553;
    float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
    float _1925 = _1924 * _1918;
    float _1926 = _1924 * _1919;
    float _1927 = _1924 * _1920;
    float _1928 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_1721].xyz));
    float _3965 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1932 = dot(vec3(_471, _472, _473), vec3(_1925, _1926, _1927));
    float _3976 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_1925, _1926, _1927));
    float _3987 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1917 * _1917;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1951 = exp2(log2(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * 5.0);
    float _1958 = 1.0 - _1917;
    float _1968 = (0.5 / (((_1849 * ((_1931 * _1958) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _1958) + _1917) * _1931))) * _1931;
    float _3998 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1970 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    float _1980 = (((((_1951 * _1871) + _624) * cbLight._m0[_1905].x) * _1970) * _1706) + (((((_1870 * _1871) + _624) * cbLight._m0[_1820].x) * _1894) * _1717);
    float _1981 = (((((_1951 * _1873) + _626) * cbLight._m0[_1905].y) * _1970) * _1706) + (((((_1870 * _1873) + _626) * cbLight._m0[_1820].y) * _1894) * _1717);
    float _1982 = (((((_1951 * _1874) + _627) * cbLight._m0[_1905].z) * _1970) * _1706) + (((((_1870 * _1874) + _627) * cbLight._m0[_1820].z) * _1894) * _1717);
    float _2044;
    float _2046;
    float _2048;
    if (_1757)
    {
        _2044 = _1980;
        _2046 = _1981;
        _2048 = _1982;
    }
    else
    {
        uint _2050 = _1683 + 2u;
        uint _2054 = _1683 + 10u;
        float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _474) * 0.949999988079071044921875);
        float _2069 = _2068 * _2068;
        float _2070 = cbLight._m0[_2050].x + _551;
        float _2071 = cbLight._m0[_2050].y + _552;
        float _2072 = cbLight._m0[_2050].z + _553;
        float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
        float _2077 = _2076 * _2070;
        float _2078 = _2076 * _2071;
        float _2079 = _2076 * _2072;
        float _2080 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_2050].xyz));
        float _4009 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _2084 = dot(vec3(_471, _472, _473), vec3(_2077, _2078, _2079));
        float _4020 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _2088 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2077, _2078, _2079));
        float _4031 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2069 * _2069;
        float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
        float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * 5.0);
        float _2110 = 1.0 - _2069;
        float _2120 = (0.5 / (((_1849 * ((_2083 * _2110) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _2110) + _2069) * _2083))) * _2083;
        float _4042 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2122 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
        float _2123 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2044 = (((((_2103 * _1871) + _624) * cbLight._m0[_2054].x) * _2122) * _2123) + _1980;
        _2046 = (((((_2103 * _1873) + _626) * cbLight._m0[_2054].y) * _2122) * _2123) + _1981;
        _2048 = (((((_2103 * _1874) + _627) * cbLight._m0[_2054].z) * _2122) * _2123) + _1982;
    }
    float _2158;
    float _2160;
    float _2162;
    if (_1775)
    {
        _2158 = _2044;
        _2160 = _2046;
        _2162 = _2048;
    }
    else
    {
        uint _2169 = _1683 + 3u;
        uint _2173 = _1683 + 11u;
        float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _474) * 0.949999988079071044921875);
        float _2188 = _2187 * _2187;
        float _2189 = cbLight._m0[_2169].x + _551;
        float _2190 = cbLight._m0[_2169].y + _552;
        float _2191 = cbLight._m0[_2169].z + _553;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2196 = _2195 * _2189;
        float _2197 = _2195 * _2190;
        float _2198 = _2195 * _2191;
        float _2199 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_2169].xyz));
        float _4058 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2203 = dot(vec3(_471, _472, _473), vec3(_2196, _2197, _2198));
        float _4069 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2207 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2196, _2197, _2198));
        float _4080 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2211 = _2188 * _2188;
        float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
        float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0);
        float _2229 = 1.0 - _2188;
        float _2239 = (0.5 / (((_1849 * ((_2202 * _2229) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _2229) + _2188) * _2202))) * _2202;
        float _4091 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2241 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
        float _2242 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2158 = (((((_2222 * _1871) + _624) * cbLight._m0[_2173].x) * _2241) * _2242) + _2044;
        _2160 = (((((_2222 * _1873) + _626) * cbLight._m0[_2173].y) * _2241) * _2242) + _2046;
        _2162 = (((((_2222 * _1874) + _627) * cbLight._m0[_2173].z) * _2241) * _2242) + _2048;
    }
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    if (_1681.y == 0u)
    {
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2317;
        float _2319 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2317;
        float _2320 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2317;
        uvec4 _2332 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2333 = _2332.x;
        uint _2344 = uint((float(_2332.y) * floor(float(uint(cbSceneParam._m0[85u].y * _560) / _2333))) + floor(float(uint(cbSceneParam._m0[85u].x * _559) / _2333)));
        float _2354 = (log2(_2320 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2355 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        uint _2358 = uint(isnan(14.0) ? _2355 : (isnan(_2355) ? 14.0 : min(_2355, 14.0)));
        uvec4 _2363 = texelFetch(g_lightClusterGridBuffer, int(((_2358 << 2u) + (_2344 << 6u)) >> 2u));
        uint _2364 = _2363.x;
        uint _2365 = _2332.z;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        if (((((1u << ((_2365 >> 4u) & 15u)) + 4294967295u) & _2364) == 0u) || ((_2365 & 240u) == 0u))
        {
            _2465 = 0.0;
            _2467 = 0.0;
            _2469 = 0.0;
            _2471 = 0.0;
            _2473 = 0.0;
            _2475 = 0.0;
        }
        else
        {
            float _2466;
            float _2468;
            float _2470;
            float _2472;
            float _2474;
            float _2476;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            float _2614 = 0.0;
            float _2615 = 0.0;
            uint _2616 = 0u;
            uint _2625;
            bool _2626;
            for (;;)
            {
                _2625 = texelFetch(g_lightClassification, int((((_2358 << 5u) + (_2344 << 9u)) + (_2616 << 2u)) >> 2u)).x;
                _2626 = _2625 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2626)
                {
                    frontier_phi_61_pred = _2610;
                    frontier_phi_61_pred_1 = _2615;
                    frontier_phi_61_pred_2 = _2614;
                    frontier_phi_61_pred_3 = _2613;
                    frontier_phi_61_pred_4 = _2612;
                    frontier_phi_61_pred_5 = _2611;
                }
                else
                {
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    uint _2740;
                    _2734 = _2610;
                    _2735 = _2611;
                    _2736 = _2612;
                    _2737 = _2613;
                    _2738 = _2614;
                    _2739 = _2615;
                    _2740 = _2625;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    for (;;)
                    {
                        uint _2744 = uint(findLSB(_2740)) + (_2616 << 5u);
                        uint _2741 = (_2740 + 4294967295u) & _2740;
                        uint _2746 = _2744 * 48u;
                        vec4 _2760 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2746)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 3u)).x));
                        uint _2766 = (_2744 * 48u) + 4u;
                        vec4 _2779 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2766)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 3u)).x));
                        uint _2785 = (_2744 * 48u) + 8u;
                        vec3 _2796 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2785)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 2u)).x));
                        float _2800 = _2760.x - _2318;
                        float _2801 = _2760.y - _2319;
                        float _2802 = _2760.z - _2320;
                        float _2803 = dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802));
                        float _2806 = inversesqrt(_2803);
                        float _2807 = _2806 * _2800;
                        float _2808 = _2806 * _2801;
                        float _2809 = _2806 * _2802;
                        float _2810 = dot(vec3(_581, _584, _587), vec3(_2807, _2808, _2809));
                        float _2815 = 1.0 - (_2803 * _2760.w);
                        float _4117 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2816 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2817 = sqrt(_2803) * _2779.w;
                        float _2820 = 1.39999997615814208984375 / (_2817 + 1.39999997615814208984375);
                        float _2821 = _2820 * _2820;
                        float _2824 = ((1.0 - _2821) * _2810) + _2821;
                        float _2827 = _2817 * _2817;
                        float _2831 = ((isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0))) * _2816) / ((_2827 * 0.699999988079071044921875) + 1.0);
                        float _2835 = (-0.0) - _2318;
                        float _2836 = (-0.0) - _2319;
                        float _2837 = (-0.0) - _2320;
                        float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
                        float _2842 = _2841 * _2835;
                        float _2843 = _2841 * _2836;
                        float _2844 = _2841 * _2837;
                        float _2852 = exp2(log2(1.0 / ((_2827 * 3.5) + 5.0)) * 0.25);
                        float _2853 = 1.0 - _656;
                        float _2860 = sqrt(1.0 - ((1.0 - (_2853 * _2853)) * (1.0 - (_2852 * _2852))));
                        float _2861 = _2860 * _2860;
                        float _2862 = _2861 * _2861;
                        float _2863 = _2842 + _2807;
                        float _2864 = _2843 + _2808;
                        float _2865 = _2844 + _2809;
                        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
                        float _2873 = dot(vec3(_581, _584, _587), vec3(_2842, _2843, _2844));
                        float _4133 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2876 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2877 = dot(vec3(_581, _584, _587), vec3(_2869 * _2863, _2869 * _2864, _2869 * _2865));
                        float _4144 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2880 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2884 = ((_2880 * _2880) * (_2862 + (-1.0))) + 1.0;
                        float _2885 = _2820 * _2861;
                        float _2886 = _2885 * _2885;
                        float _2889 = ((1.0 - _2886) * _2810) + _2886;
                        float _4155 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2890 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2891 = 1.0 - _2861;
                        float _2901 = (0.5 / (((_2890 * ((_2876 * _2891) + _2861)) + 9.9999999392252902907785028219223e-09) + (((_2890 * _2891) + _2861) * _2876))) * _2890;
                        float _4166 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2912 = (((_2862 * 3.1415927410125732421875) * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) / ((_2884 * _2884) * ((_2827 * 2.1991131305694580078125) + 3.141590118408203125))) * _2816;
                        _2669 = (_2831 * _2779.x) + _2737;
                        _2670 = (_2831 * _2779.y) + _2738;
                        _2671 = (_2831 * _2779.z) + _2739;
                        _2666 = (_2912 * _2796.x) + _2734;
                        _2667 = (_2912 * _2796.y) + _2735;
                        _2668 = (_2912 * _2796.z) + _2736;
                        if (_2741 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2734 = _2666;
                            _2735 = _2667;
                            _2736 = _2668;
                            _2737 = _2669;
                            _2738 = _2670;
                            _2739 = _2671;
                            _2740 = _2741;
                        }
                    }
                    frontier_phi_61_pred = _2666;
                    frontier_phi_61_pred_1 = _2671;
                    frontier_phi_61_pred_2 = _2670;
                    frontier_phi_61_pred_3 = _2669;
                    frontier_phi_61_pred_4 = _2668;
                    frontier_phi_61_pred_5 = _2667;
                }
                _2466 = frontier_phi_61_pred;
                _2476 = frontier_phi_61_pred_1;
                _2474 = frontier_phi_61_pred_2;
                _2472 = frontier_phi_61_pred_3;
                _2470 = frontier_phi_61_pred_4;
                _2468 = frontier_phi_61_pred_5;
                uint _2617 = _2616 + 1u;
                if (_2617 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2610 = _2466;
                    _2611 = _2468;
                    _2612 = _2470;
                    _2613 = _2472;
                    _2614 = _2474;
                    _2615 = _2476;
                    _2616 = _2617;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2465 = _2466;
            _2467 = _2468;
            _2469 = _2470;
            _2471 = _2472;
            _2473 = _2474;
            _2475 = _2476;
        }
        uvec4 _2479 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2480 = _2479.z;
        uint _2482 = (_2480 >> 8u) & 15u;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        if (((4294967295u << _2482) & _2364) == 0u)
        {
            _2578 = _2465;
            _2580 = _2467;
            _2582 = _2469;
            _2584 = _2471;
            _2586 = _2473;
            _2588 = _2475;
        }
        else
        {
            float _2603 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
            float _2604 = _2603 * _2318;
            float _2605 = _2603 * _2319;
            float _2606 = _2603 * _2320;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2482 < ((_2480 >> 12u) & 15u))
            {
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2587;
                float _2589;
                float _2717 = _2465;
                float _2718 = _2467;
                float _2719 = _2469;
                float _2720 = _2471;
                float _2721 = _2473;
                float _2722 = _2475;
                uint _2723 = _2482;
                uint _2732;
                bool _2733;
                for (;;)
                {
                    _2732 = texelFetch(g_lightClassification, int((((_2358 << 5u) + (_2344 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                    _2733 = _2732 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2733)
                    {
                        frontier_phi_67_pred = _2720;
                        frontier_phi_67_pred_1 = _2721;
                        frontier_phi_67_pred_2 = _2722;
                        frontier_phi_67_pred_3 = _2719;
                        frontier_phi_67_pred_4 = _2718;
                        frontier_phi_67_pred_5 = _2717;
                    }
                    else
                    {
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _2930 = _2717;
                        float _2931 = _2718;
                        float _2932 = _2719;
                        float _2933 = _2720;
                        float _2934 = _2721;
                        float _2935 = _2722;
                        uint _2936 = _2732;
                        uint _2937;
                        vec4 _2962;
                        float _2963;
                        vec4 _2978;
                        vec3 _2990;
                        vec4 _3006;
                        vec4 _3021;
                        float _3067;
                        bool _3068;
                        for (;;)
                        {
                            uint _2947 = ((_2723 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2936));
                            _2937 = (_2936 + 4294967295u) & _2936;
                            uint _2949 = _2947 * 40u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            _2963 = _2962.w;
                            uint _2965 = (_2947 * 40u) + 4u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2980 = (_2947 * 40u) + 8u;
                            _2990 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x));
                            uint _2993 = (_2947 * 40u) + 16u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3008 = (_2947 * 40u) + 20u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3023 = (_2947 * 40u) + 24u;
                            vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            uint _3042 = (_2947 * 40u) + 28u;
                            vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3067 = fma(_2320, _3055.z, fma(_2319, _3055.y, _3055.x * _2318)) + _3055.w;
                            _3068 = !((fma(_2320, _3036.z, fma(_2319, _3036.y, _3036.x * _2318)) + _3036.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3068)
                            {
                                float _3095 = _2962.x - _2318;
                                float _3096 = _2962.y - _2319;
                                float _3097 = _2962.z - _2320;
                                float _3098 = dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097));
                                float _3101 = inversesqrt(_3098);
                                float _3102 = _3101 * _3095;
                                float _3103 = _3101 * _3096;
                                float _3104 = _3101 * _3097;
                                float _3108 = 1.0 - (_3098 / (_2963 * _2963));
                                float _4177 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3109 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3113 = sqrt(_3098) * _2978.w;
                                float _3115 = 1.39999997615814208984375 / (_3113 + 1.39999997615814208984375);
                                float _3116 = _3115 * _3115;
                                float _3119 = ((1.0 - _3116) * dot(vec3(_3102, _3103, _3104), vec3(_581, _584, _587))) + _3116;
                                float _3122 = _3113 * _3113;
                                float _3126 = (fma(_2320, _3006.z, fma(_2319, _3006.y, _3006.x * _2318)) + _3006.w) / _3067;
                                float _3127 = (fma(_2320, _3021.z, fma(_2319, _3021.y, _3021.x * _2318)) + _3021.w) / _3067;
                                float _3131 = 1.0 - dot(vec2(_3126, _3127), vec2(_3126, _3127));
                                float _4193 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3133 = _3132 * (((isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))) * _3109) / ((_3122 * 0.699999988079071044921875) + 1.0));
                                float _3145 = exp2(log2(1.0 / ((_3122 * 3.5) + 5.0)) * 0.25);
                                float _3146 = 1.0 - _656;
                                float _3153 = sqrt(1.0 - ((1.0 - (_3146 * _3146)) * (1.0 - (_3145 * _3145))));
                                float _3154 = _3153 * _3153;
                                float _3155 = _3154 * _3154;
                                float _3156 = _3102 - _2604;
                                float _3157 = _3103 - _2605;
                                float _3158 = _3104 - _2606;
                                float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                                float _3166 = dot(vec3(_581, _584, _587), vec3((-0.0) - _2604, (-0.0) - _2605, (-0.0) - _2606));
                                float _4204 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3169 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3170 = dot(vec3(_581, _584, _587), vec3(_3162 * _3156, _3162 * _3157, _3162 * _3158));
                                float _4215 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3173 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3177 = ((_3173 * _3173) * (_3155 + (-1.0))) + 1.0;
                                float _3178 = _3115 * _3154;
                                float _3179 = _3178 * _3178;
                                float _3185 = ((1.0 - _3179) * dot(vec3(_581, _584, _587), vec3(_3102, _3103, _3104))) + _3179;
                                float _4226 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3186 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3187 = 1.0 - _3154;
                                float _3197 = (0.5 / (((_3186 * ((_3169 * _3187) + _3154)) + 9.9999999392252902907785028219223e-09) + (((_3186 * _3187) + _3154) * _3169))) * _3186;
                                float _4237 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3207 = (_3132 * _3109) * (((_3155 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_3177 * _3177) * ((_3122 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3207 * _2990.x;
                                frontier_phi_73_pred_1 = _3207 * _2990.y;
                                frontier_phi_73_pred_2 = _3133 * _2978.z;
                                frontier_phi_73_pred_3 = _3133 * _2978.y;
                                frontier_phi_73_pred_4 = _3133 * _2978.x;
                                frontier_phi_73_pred_5 = _3207 * _2990.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3211 = frontier_phi_73_pred;
                            _3212 = frontier_phi_73_pred_1;
                            _3216 = frontier_phi_73_pred_2;
                            _3215 = frontier_phi_73_pred_3;
                            _3214 = frontier_phi_73_pred_4;
                            _3213 = frontier_phi_73_pred_5;
                            _2920 = _3214 + _2933;
                            _2921 = _3215 + _2934;
                            _2922 = _3216 + _2935;
                            _2917 = _3211 + _2930;
                            _2918 = _3212 + _2931;
                            _2919 = _3213 + _2932;
                            if (_2937 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2937;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2920;
                        frontier_phi_67_pred_1 = _2921;
                        frontier_phi_67_pred_2 = _2922;
                        frontier_phi_67_pred_3 = _2919;
                        frontier_phi_67_pred_4 = _2918;
                        frontier_phi_67_pred_5 = _2917;
                    }
                    _2585 = frontier_phi_67_pred;
                    _2587 = frontier_phi_67_pred_1;
                    _2589 = frontier_phi_67_pred_2;
                    _2583 = frontier_phi_67_pred_3;
                    _2581 = frontier_phi_67_pred_4;
                    _2579 = frontier_phi_67_pred_5;
                    uint _2724 = _2723 + 1u;
                    if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2717 = _2579;
                        _2718 = _2581;
                        _2719 = _2583;
                        _2720 = _2585;
                        _2721 = _2587;
                        _2722 = _2589;
                        _2723 = _2724;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2587;
                frontier_phi_55_56_ladder_1 = _2589;
                frontier_phi_55_56_ladder_2 = _2585;
                frontier_phi_55_56_ladder_3 = _2583;
                frontier_phi_55_56_ladder_4 = _2581;
                frontier_phi_55_56_ladder_5 = _2579;
            }
            else
            {
                frontier_phi_55_56_ladder = _2473;
                frontier_phi_55_56_ladder_1 = _2475;
                frontier_phi_55_56_ladder_2 = _2471;
                frontier_phi_55_56_ladder_3 = _2469;
                frontier_phi_55_56_ladder_4 = _2467;
                frontier_phi_55_56_ladder_5 = _2465;
            }
            _2578 = frontier_phi_55_56_ladder_5;
            _2580 = frontier_phi_55_56_ladder_4;
            _2582 = frontier_phi_55_56_ladder_3;
            _2584 = frontier_phi_55_56_ladder_2;
            _2586 = frontier_phi_55_56_ladder;
            _2588 = frontier_phi_55_56_ladder_1;
        }
        float _2593 = isnan(1.0) ? _640 : (isnan(_640) ? 1.0 : min(_640, 1.0));
        _2377 = (_2593 * _2584) + _1813;
        _2379 = (_2593 * _2586) + _1815;
        _2381 = (_2593 * _2588) + _1817;
        _2383 = ((_2578 * _624) * _2593) + _2158;
        _2385 = ((_2580 * _626) * _2593) + _2160;
        _2387 = ((_2582 * _627) * _2593) + _2162;
    }
    else
    {
        _2377 = _1813;
        _2379 = _1815;
        _2381 = _1817;
        _2383 = _2158;
        _2385 = _2160;
        _2387 = _2162;
    }
    float _4253 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4264 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4275 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    uint _2407 = _226 + 6u;
    float _2415 = _559 / cbSceneParam._m0[86u].x;
    float _2416 = _560 / cbSceneParam._m0[86u].y;
    vec4 _2430 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2415, _2416, (log2((isnan(cbSceneParam._m0[77u].w) ? _493 : (isnan(_493) ? cbSceneParam._m0[77u].w : min(_493, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2432 = _2430.x;
    float _2433 = _2430.y;
    float _2434 = _2430.z;
    float _2435 = _2430.w;
    float _2528;
    float _2530;
    float _2532;
    float _2534;
    if (_493 > cbSceneParam._m0[78u].w)
    {
        float _2490 = isnan(_493) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _493 : min(cbSceneParam._m0[80u].w, _493));
        float _2491 = _2490 / _493;
        float _2502 = _2491 * _544;
        float _2503 = _545 * _2491;
        float _2504 = (-0.0) - _2503;
        float _2506 = _2491 * _546;
        float _2508 = (cbSceneParam._m0[77u].w * _2504) / _2490;
        float _2509 = _2508 + cbSceneParam._m0[79u].w;
        float _2510 = cbSceneParam._m0[79u].w - _2503;
        float _2516 = sqrt(((_2502 * _2502) + (_2503 * _2503)) + (_2506 * _2506));
        float _2519 = (1.0 - (cbSceneParam._m0[77u].w / _2490)) * _2516;
        float _2524 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2526 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2679;
        if (abs((_2504 - _2508) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2679 = ((((_2509 > 0.0) ? exp2(_2524 * _2509) : (2.0 - exp2(_2526 * _2509))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2519;
        }
        else
        {
            float _2639 = 1.0 / cbSceneParam._m0[80u].x;
            float _2640 = isnan(_2510) ? _2509 : (isnan(_2509) ? _2510 : max(_2509, _2510));
            float _2641 = isnan(_2510) ? _2509 : (isnan(_2509) ? _2510 : min(_2509, _2510));
            float _2650 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : min(_2640, 0.0));
            float _2651 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : min(_2641, 0.0));
            _2679 = ((abs(_2516 / _2504) * cbSceneParam._m0[80u].y) * ((((_2650 - _2651) * 2.0) - ((exp2(_2524 * (isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0)))) - exp2(_2524 * (isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0))))) * _2639)) - ((exp2(_2526 * _2650) - exp2(_2526 * _2651)) * _2639))) + (_2519 * cbSceneParam._m0[80u].z);
        }
        vec4 _2681 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2415, _2416, 1.0), 0.0);
        float _2690 = exp2((_2679 * (-1.44269502162933349609375)) * (1.0 - _2681.w));
        float _2691 = log2(_2690);
        float _2707 = log2(_2435);
        _2528 = (exp2(_2707 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2691 * cbSceneParam._m0[78u].x)) * _2681.x) / cbSceneParam._m0[78u].x)) + _2432;
        _2530 = (exp2(_2707 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2691 * cbSceneParam._m0[78u].y)) * _2681.y) / cbSceneParam._m0[78u].y)) + _2433;
        _2532 = (exp2(_2707 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2691 * cbSceneParam._m0[78u].z)) * _2681.z) / cbSceneParam._m0[78u].z)) + _2434;
        _2534 = _2690 * _2435;
    }
    else
    {
        _2528 = _2432;
        _2530 = _2433;
        _2532 = _2434;
        _2534 = _2435;
    }
    float _2546 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2547 = _2546 == 3.0;
    float _2548 = log2(_2534);
    float _2555 = exp2(_2548 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2377 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _640))) + ((_2383 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1449)) * cbPerFrame._m0[3u].x));
    float _2556 = exp2(_2548 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2379 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _640))) + ((_2385 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1449)) * cbPerFrame._m0[3u].x));
    float _2557 = exp2(_2548 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2381 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _640))) + ((_2387 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1449)) * cbPerFrame._m0[3u].x));
    float _2566 = (_2546 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2566 * (_2547 ? _2555 : (_2555 + (cbSceneParam._m0[72u].w * _2528)));
    SV_Target.y = _2566 * (_2547 ? _2556 : (_2556 + (cbSceneParam._m0[72u].w * _2530)));
    SV_Target.z = _2566 * (_2547 ? _2557 : (_2557 + (cbSceneParam._m0[72u].w * _2532)));
    SV_Target.w = cbInstanceData._m0[_2407].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2407].w;
}


