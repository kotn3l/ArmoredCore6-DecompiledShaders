#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1398;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4007 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4018 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4029 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4040 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _439 = (_432 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _440 = (_432 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _441 = (_432 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) + _451;
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    float _535 = ((_505.z - _526) * _432) + _526;
    float _538 = ((((_505.x - _524) * _432) + _524) * 2.0) + (-1.0);
    float _539 = ((((_505.y - _525) * _432) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _4051 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))));
    float _548 = _538 + ((((_478.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _549 = _539 + ((((_478.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _552 = fma(_545, _250, fma(_549, _257, _548 * _243));
    float _555 = fma(_545, _251, fma(_549, _258, _548 * _244));
    float _558 = fma(_545, _252, fma(_549, _259, _548 * _245));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _604 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _613 = (cbMtdParam._m0[19u].x + dot(vec4(_562 * _552, _562 * _555, _562 * _558, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_606 - _607) * cbMtdParam._m0[24u].z) + _607) * cbMtdParam._m0[21u].z);
    float _4062 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _616 = (-0.0) - cbMtdParam._m0[24u].x;
    float _618 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _618 : (isnan(_618) ? 1.0 : min(_618, 1.0));
    float _626 = _614 - ((_614 * TEXCOORD_8.x) * _619);
    float _627 = _614 - ((_614 * TEXCOORD_8.y) * _619);
    float _628 = _614 - ((_614 * TEXCOORD_8.z) * _619);
    float _635 = (_626 * (cbMtdParam._m0[17u].x - _458)) + _458;
    float _636 = (_627 * (cbMtdParam._m0[17u].y - _459)) + _459;
    float _637 = (_628 * (cbMtdParam._m0[17u].z - _460)) + _460;
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _651 = _649.x;
    float _652 = 1.0 - _651;
    float _678 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_651 - _652) * cbMtdParam._m0[24u].w) + _652) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4083 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _687 = ((((cbMtdParam._m0[10u].x - _635) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _679) + _635;
    float _688 = ((((cbMtdParam._m0[10u].y - _636) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _679) + _636;
    float _689 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _637)) * _679) + _637;
    vec4 _715 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _717 = _715.x;
    float _735 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _717) * _432) + _717;
    float _739 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _735) * cbMtdParam._m0[19u].z) + _735;
    float _741 = _739 - (_739 * _626);
    float _743 = _741 - (_741 * _679);
    float _748 = (((_478.z - _535) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _535;
    vec4 _762 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _769 = (_762.x * 2.0) + (-1.0);
    float _770 = (_762.y * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _4094 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _779 = ((_762.z - _748) * _626) + _748;
    float _782 = ((cbMtdParam._m0[23u].y - _779) * _679) + _779;
    vec4 _801 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _807 = (_801.x * 2.0) + (-1.0);
    float _808 = (_801.y * 2.0) + (-1.0);
    float _809 = dot(vec2(_807, _808), vec2(_807, _808));
    float _4105 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _824 = ((sqrt(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) - _545) * _628) + _545;
    float _827 = (((_769 - _548) * _626) + _548) + (cbMtdParam._m0[21u].x * _548);
    float _828 = (((_770 - _549) * _627) + _549) + (cbMtdParam._m0[21u].x * _549);
    float _839 = (((_807 - _827) + (_827 * cbMtdParam._m0[22u].z)) * _679) + _827;
    float _840 = (((_808 - _828) + (_828 * cbMtdParam._m0[22u].z)) * _679) + _828;
    float _841 = (_679 * (sqrt(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) - _824)) + _824;
    float _845 = cbMtdParam._m0[22u].x + _578.w;
    float _848 = fma(_841, _250, fma(_840, _257, _839 * _243));
    float _851 = fma(_841, _251, fma(_840, _258, _839 * _244));
    float _854 = fma(_841, _252, fma(_840, _259, _839 * _245));
    float _858 = inversesqrt(dot(vec3(_848, _851, _854), vec3(_848, _851, _854)));
    float _859 = _858 * _848;
    float _860 = _858 * _851;
    float _861 = _858 * _854;
    float _4116 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _862 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4138 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4149 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4160 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4171 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _867 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _881 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _931 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _921);
    float _932 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _921);
    float _933 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _921);
    float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
    float _938 = _931 * _937;
    float _939 = _932 * _937;
    float _940 = _933 * _937;
    float _946 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _947 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _965 = fma(_861, cbSceneParam._m0[5u].z, fma(_860, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _859));
    float _968 = fma(_861, cbSceneParam._m0[6u].z, fma(_860, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _859));
    float _971 = fma(_861, cbSceneParam._m0[7u].z, fma(_860, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _859));
    uint _985 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _991 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * cbInstanceData._m0[_985].x;
    float _992 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * cbInstanceData._m0[_985].y;
    float _993 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * cbInstanceData._m0[_985].z;
    float _4182 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _4193 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _997 = 1.0 - _867;
    float _998 = _994 * _997;
    float _999 = _995 * _997;
    float _1000 = _996 * _997;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _867;
    float _1006 = (_995 + (-0.039999999105930328369140625)) * _867;
    float _1007 = (_996 + (-0.039999999105930328369140625)) * _867;
    float _1008 = _1005 + 0.039999999105930328369140625;
    float _1010 = _1006 + 0.039999999105930328369140625;
    float _1011 = _1007 + 0.039999999105930328369140625;
    vec4 _1020 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _946, cbSceneParam._m0[86u].y * _947));
    float _1024 = ((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * TEXCOORD_5.w) * _1020.x;
    float _1025 = dot(vec3(_859, _860, _861), vec3(_938, _939, _940));
    float _1028 = _1025 * 2.0;
    float _1032 = (_1028 * _859) - _938;
    float _1033 = (_1028 * _860) - _939;
    float _1034 = (_1028 * _861) - _940;
    float _1038 = abs(dot(vec3(_938, _939, _940), vec3(_859, _860, _861)));
    float _4215 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1040 = sqrt(_862);
    float _1053 = exp2((_1040 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1040 * 3.0));
    float _1059 = (1.0 - _1053) * ((_1040 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1060 = _1053 * _1040;
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1397;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1122 = fma(_1096, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1088));
        float _1126 = fma(_1096, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1088));
        float _1130 = fma(_1096, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1088));
        float _1155 = _1088 + _859;
        float _1156 = _1092 + _860;
        float _1157 = _1096 + _861;
        float _1167 = fma(_1157, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1155)) - _1122;
        float _1168 = fma(_1157, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1155)) - _1126;
        float _1169 = fma(_1157, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1155)) - _1130;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1186 = ((_1173 * _1167) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1122 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1168) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1126 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1173 * _1169) / cbModelParam._m0[34u].z) + ((((((_1130 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        float _1225 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1191.x + (-0.5));
        float _1227 = _1225 * (_1191.y + (-0.5));
        float _1228 = _1225 * (_1191.z + (-0.5));
        float _1235 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1198.x + (-0.5));
        float _1237 = _1235 * (_1198.y + (-0.5));
        float _1238 = _1235 * (_1198.z + (-0.5));
        float _1245 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1205.x + (-0.5));
        float _1247 = _1245 * (_1205.y + (-0.5));
        float _1248 = _1245 * (_1205.z + (-0.5));
        float _1255 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1212.x + (-0.5));
        float _1257 = _1255 * (_1212.y + (-0.5));
        float _1258 = _1255 * (_1212.z + (-0.5));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = _1226 * 0.5;
        float _1263 = _1236 * 0.5;
        float _1264 = _1246 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1279 = (dot(vec3(_859, _860, _861), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1289 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4263 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1291 + 1.0))) + _1296) * _1259;
        float _1306 = _1227 * 0.5;
        float _1307 = _1237 * 0.5;
        float _1308 = _1247 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_859, _860, _861), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4296 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1333 + 1.0))) + _1338) * _1260;
        float _1348 = _1228 * 0.5;
        float _1349 = _1238 * 0.5;
        float _1350 = _1248 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_859, _860, _861), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4329 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1375 + 1.0))) + _1380) * _1261;
        _1397 = _1228;
        _1399 = _1227;
        _1400 = _1226;
        _1401 = _1238;
        _1402 = _1237;
        _1403 = _1236;
        _1404 = _1248;
        _1405 = _1247;
        _1406 = _1246;
        _1407 = _1261;
        _1408 = _1260;
        _1409 = _1259;
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
    }
    else
    {
        _1397 = _1398;
        _1399 = _1398;
        _1400 = _1398;
        _1401 = _1398;
        _1402 = _1398;
        _1403 = _1398;
        _1404 = _1398;
        _1405 = _1398;
        _1406 = _1398;
        _1407 = _1398;
        _1408 = _1398;
        _1409 = _1398;
        _1410 = 0.0;
        _1411 = 0.0;
        _1412 = 0.0;
    }
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1437 = fma(_1096, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088));
        float _1441 = fma(_1096, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088));
        float _1445 = fma(_1096, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088));
        float _1468 = _1088 + _859;
        float _1469 = _1092 + _860;
        float _1470 = _1096 + _861;
        float _1480 = fma(_1470, cbModelParam._m0[30u].z, fma(_1469, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1468)) - _1437;
        float _1481 = fma(_1470, cbModelParam._m0[31u].z, fma(_1469, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1468)) - _1441;
        float _1482 = fma(_1470, cbModelParam._m0[32u].z, fma(_1469, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1468)) - _1445;
        float _1486 = inversesqrt(dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482)));
        float _1499 = ((_1486 * _1480) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1437 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1486 * _1481) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1441 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1501 = ((_1486 * _1482) / cbModelParam._m0[35u].z) + ((((((_1445 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        float _1536 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1503.x + (-0.5));
        float _1538 = _1536 * (_1503.y + (-0.5));
        float _1539 = _1536 * (_1503.z + (-0.5));
        float _1546 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1510.x + (-0.5));
        float _1548 = _1546 * (_1510.y + (-0.5));
        float _1549 = _1546 * (_1510.z + (-0.5));
        float _1556 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1517.x + (-0.5));
        float _1558 = _1556 * (_1517.y + (-0.5));
        float _1559 = _1556 * (_1517.z + (-0.5));
        float _1566 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1524.x + (-0.5));
        float _1568 = _1566 * (_1524.y + (-0.5));
        float _1569 = _1566 * (_1524.z + (-0.5));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = _1537 * 0.5;
        float _1574 = _1547 * 0.5;
        float _1575 = _1557 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_859, _860, _861), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4392 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1600 + 1.0))) + _1605) * _1570;
        float _1615 = _1538 * 0.5;
        float _1616 = _1548 * 0.5;
        float _1617 = _1558 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_859, _860, _861), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4403 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4414 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4425 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_1642 + 1.0))) + _1647) * _1571;
        float _1657 = _1539 * 0.5;
        float _1658 = _1549 * 0.5;
        float _1659 = _1559 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_859, _860, _861), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4458 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1684 + 1.0))) + _1689) * _1572;
        _1706 = _1539;
        _1707 = _1538;
        _1708 = _1537;
        _1709 = _1549;
        _1710 = _1548;
        _1711 = _1547;
        _1712 = _1559;
        _1713 = _1558;
        _1714 = _1557;
        _1715 = _1572;
        _1716 = _1571;
        _1717 = _1570;
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
    }
    else
    {
        _1706 = _1398;
        _1707 = _1398;
        _1708 = _1398;
        _1709 = _1398;
        _1710 = _1398;
        _1711 = _1398;
        _1712 = _1398;
        _1713 = _1398;
        _1714 = _1398;
        _1715 = _1398;
        _1716 = _1398;
        _1717 = _1398;
        _1718 = 0.0;
        _1719 = 0.0;
        _1720 = 0.0;
    }
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1410)) + _1410;
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1411)) + _1411;
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1412)) + _1412;
    float _1753 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1731, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1756 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1731, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1759 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1731, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1730));
    float _1774 = _1032 * 0.5;
    float _1775 = _1033 * 0.5;
    float _1776 = _1034 * 0.5;
    float _1777 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1780 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1783 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1817;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1790 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1397, _1401, _1404, _1407));
        float _1794 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1798 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1400, _1403, _1406, _1409));
        float _1805 = dot(vec4(cbModelParam._m0[39u]), vec4(_1774, _1775, _1776, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1828;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1819 = dot(vec4(cbModelParam._m0[40u]), vec4(_1774, _1775, _1776, 1.0));
        _1828 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1819) ? 0.0 : (isnan(0.0) ? _1819 : max(0.0, _1819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1828 = 1.0;
    }
    float _1832 = (_1828 * cbModelParam._m0[1u].x) + (_1817 * (1.0 - cbModelParam._m0[1u].x));
    float _1842 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _862);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1842 : min(cbModelParam._m0[25u].z, _1842));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1891 = fma(_1096, cbModelParam._m0[13u].z, fma(_1092, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1088)) + cbModelParam._m0[13u].w;
        float _1895 = fma(_1096, cbModelParam._m0[14u].z, fma(_1092, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1088)) + cbModelParam._m0[14u].w;
        float _1899 = fma(_1096, cbModelParam._m0[15u].z, fma(_1092, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1088)) + cbModelParam._m0[15u].w;
        float _1902 = fma(_1034, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032));
        float _1905 = fma(_1034, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032));
        float _1908 = fma(_1034, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032));
        float _1936;
        if (_1902 > 0.0)
        {
            _1936 = abs((1.0 - _1891) / _1902);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1891 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1936 = frontier_phi_14_12_ladder;
        }
        float _2108;
        if (_1905 > 0.0)
        {
            _2108 = abs((1.0 - _1895) / _1905);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1895 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2108 = frontier_phi_23_19_ladder;
        }
        float _2403;
        if (_1908 > 0.0)
        {
            _2403 = abs((1.0 - _1899) / _1908);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1899 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2403 = frontier_phi_35_30_ladder;
        }
        float _2405 = isnan(_2108) ? _1936 : (isnan(_1936) ? _2108 : min(_1936, _2108));
        float _2406 = isnan(_2403) ? _2405 : (isnan(_2405) ? _2403 : min(_2405, _2403));
        float _2410 = (_2406 * _1902) + _1891;
        float _2411 = (_2406 * _1905) + _1895;
        float _2412 = (_2406 * _1908) + _1899;
        float _2413 = _2406 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2413;
        float _2417 = _2413 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 > _2417) || ((_2411 < _2415) || ((_2410 < _2415) || (_2410 > _2417))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2412, cbModelParam._m0[9u].z, fma(_2411, cbModelParam._m0[9u].y, _2410 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2412, cbModelParam._m0[10u].z, fma(_2411, cbModelParam._m0[10u].y, _2410 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2412, cbModelParam._m0[11u].z, fma(_2411, cbModelParam._m0[11u].y, _2410 * cbModelParam._m0[11u].x))), _1843);
            frontier_phi_13_35_ladder = _2557.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2557.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2557.x * cbModelParam._m0[1u].y;
        }
        _1924 = frontier_phi_13_35_ladder_2;
        _1926 = frontier_phi_13_35_ladder_1;
        _1928 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1032, _1033, _1034), _1843);
        _1924 = _1912.x * cbModelParam._m0[1u].y;
        _1926 = _1912.y * cbModelParam._m0[1u].y;
        _1928 = _1912.z * cbModelParam._m0[1u].y;
    }
    float _1932 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _862);
    float _1933 = isnan(_1932) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1932 : min(cbModelParam._m0[25u].w, _1932));
    float _2023;
    float _2025;
    float _2027;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1987 = fma(_1096, cbModelParam._m0[21u].z, fma(_1092, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1088)) + cbModelParam._m0[21u].w;
        float _1991 = fma(_1096, cbModelParam._m0[22u].z, fma(_1092, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1088)) + cbModelParam._m0[22u].w;
        float _1995 = fma(_1096, cbModelParam._m0[23u].z, fma(_1092, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1088)) + cbModelParam._m0[23u].w;
        float _1998 = fma(_1034, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032));
        float _2001 = fma(_1034, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032));
        float _2004 = fma(_1034, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032));
        float _2113;
        if (_1998 > 0.0)
        {
            _2113 = abs((1.0 - _1987) / _1998);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1987 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2113 = frontier_phi_25_21_ladder;
        }
        float _2430;
        if (_2001 > 0.0)
        {
            _2430 = abs((1.0 - _1991) / _2001);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1991 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2430 = frontier_phi_37_32_ladder;
        }
        float _2768;
        if (_2004 > 0.0)
        {
            _2768 = abs((1.0 - _1995) / _2004);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1995 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2768 = frontier_phi_47_44_ladder;
        }
        float _2770 = isnan(_2430) ? _2113 : (isnan(_2113) ? _2430 : min(_2113, _2430));
        float _2771 = isnan(_2768) ? _2770 : (isnan(_2770) ? _2768 : min(_2770, _2768));
        float _2775 = (_2771 * _1998) + _1987;
        float _2776 = (_2771 * _2001) + _1991;
        float _2777 = (_2771 * _2004) + _1995;
        float _2778 = _2771 * 9.9999997473787516355514526367188e-05;
        float _2779 = (-1.0) - _2778;
        float _2781 = _2778 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2777 > _2781) || ((_2777 < _2779) || ((_2776 > _2781) || ((_2776 < _2779) || ((_2775 < _2779) || (_2775 > _2781))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2777, cbModelParam._m0[17u].z, fma(_2776, cbModelParam._m0[17u].y, _2775 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2777, cbModelParam._m0[18u].z, fma(_2776, cbModelParam._m0[18u].y, _2775 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2777, cbModelParam._m0[19u].z, fma(_2776, cbModelParam._m0[19u].y, _2775 * cbModelParam._m0[19u].x))), _1933);
            frontier_phi_22_47_ladder = _2899.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2899.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2899.x * cbModelParam._m0[1u].z;
        }
        _2023 = frontier_phi_22_47_ladder_2;
        _2025 = frontier_phi_22_47_ladder_1;
        _2027 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2007 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1032, _1033, _1034), _1933);
        _2023 = _2007.x * cbModelParam._m0[1u].z;
        _2025 = _2007.y * cbModelParam._m0[1u].z;
        _2027 = _2007.z * cbModelParam._m0[1u].z;
    }
    float _2040 = (((_1059 * _1008) + _1060) * _1024) * ((cbModelParam._m0[1u].w * (_2023 - _1924)) + _1924);
    float _2042 = (((_1059 * _1010) + _1060) * _1024) * ((cbModelParam._m0[1u].w * (_2025 - _1926)) + _1926);
    float _2044 = (((_1059 * _1011) + _1060) * _1024) * ((cbModelParam._m0[1u].w * (_2027 - _1928)) + _1928);
    float _2047 = fma(_2044, cbSceneParam._m0[89u].z, fma(_2042, cbSceneParam._m0[89u].y, _2040 * cbSceneParam._m0[89u].x));
    float _2050 = fma(_2044, cbSceneParam._m0[90u].z, fma(_2042, cbSceneParam._m0[90u].y, _2040 * cbSceneParam._m0[90u].x));
    float _2053 = fma(_2044, cbSceneParam._m0[91u].z, fma(_2042, cbSceneParam._m0[91u].y, _2040 * cbSceneParam._m0[91u].x));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2091 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2100 = _2087 / _2099;
    float _2101 = _2091 / _2099;
    float _2102 = _2095 / _2099;
    float _2249;
    float _2250;
    float _2251;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2129 = ((uint(_2102 > cbSceneParam._m0[59u].y) + uint(_2102 > cbSceneParam._m0[59u].x)) + uint(_2102 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2130 = _2129 + 43u;
        uint _2138 = _2129 + 44u;
        uint _2146 = _2129 + 45u;
        uint _2154 = _2129 + 46u;
        float _2165 = fma(_2099, cbSceneParam._m0[_2130].w, fma(_2095, cbSceneParam._m0[_2130].z, fma(_2091, cbSceneParam._m0[_2130].y, _2087 * cbSceneParam._m0[_2130].x)));
        float _2169 = fma(_2099, cbSceneParam._m0[_2138].w, fma(_2095, cbSceneParam._m0[_2138].z, fma(_2091, cbSceneParam._m0[_2138].y, _2087 * cbSceneParam._m0[_2138].x)));
        float _2177 = fma(_2099, cbSceneParam._m0[_2154].w, fma(_2095, cbSceneParam._m0[_2154].z, fma(_2091, cbSceneParam._m0[_2154].y, _2087 * cbSceneParam._m0[_2154].x)));
        float _2182 = cbSceneParam._m0[33u].z * _2177;
        float _2184 = cbSceneParam._m0[33u].w * _2177;
        float _2187 = fma(_2099, cbSceneParam._m0[_2146].w, fma(_2095, cbSceneParam._m0[_2146].z, fma(_2091, cbSceneParam._m0[_2146].y, _2087 * cbSceneParam._m0[_2146].x))) / _2177;
        float _2235 = (cbSceneParam._m0[33u].x - sqrt(((_2101 * _2101) + (_2100 * _2100)) + (_2102 * _2102))) * cbSceneParam._m0[33u].y;
        float _4584 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2242 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2182 + _2165) / _2177, (_2184 + _2169) / _2177), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2184 + _2165) / _2177, (_2169 - _2182) / _2177), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 - _2182) / _2177, (_2169 - _2184) / _2177), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 - _2184) / _2177, (_2182 + _2169) / _2177), _2187), 0.0)).x), vec4(0.25)));
        _2249 = 1.0 - (_2242 * cbSceneParam._m0[34u].x);
        _2250 = 1.0 - (_2242 * cbSceneParam._m0[34u].y);
        _2251 = 1.0 - (_2242 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2249 = 1.0;
        _2250 = 1.0;
        _2251 = 1.0;
    }
    float _2315;
    float _2317;
    float _2319;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2303 = fma(_2099, cbSceneParam._m0[63u].w, fma(_2095, cbSceneParam._m0[63u].z, fma(_2091, cbSceneParam._m0[63u].y, _2087 * cbSceneParam._m0[63u].x)));
        float _2304 = fma(_2099, cbSceneParam._m0[60u].w, fma(_2095, cbSceneParam._m0[60u].z, fma(_2091, cbSceneParam._m0[60u].y, _2087 * cbSceneParam._m0[60u].x))) / _2303;
        float _2305 = fma(_2099, cbSceneParam._m0[61u].w, fma(_2095, cbSceneParam._m0[61u].z, fma(_2091, cbSceneParam._m0[61u].y, _2087 * cbSceneParam._m0[61u].x))) / _2303;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2304 >= cbSceneParam._m0[64u].x) && (_2305 >= cbSceneParam._m0[64u].y)) && (_2304 <= cbSceneParam._m0[64u].z)) && (_2305 <= cbSceneParam._m0[64u].w))
        {
            float _2443 = fma(_2099, cbSceneParam._m0[62u].w, fma(_2095, cbSceneParam._m0[62u].z, fma(_2091, cbSceneParam._m0[62u].y, _2087 * cbSceneParam._m0[62u].x))) / _2303;
            float _2447 = isnan(cbSceneParam._m0[41u].w) ? _2443 : (isnan(_2443) ? cbSceneParam._m0[41u].w : max(_2443, cbSceneParam._m0[41u].w));
            float _2490 = (cbSceneParam._m0[33u].x - sqrt(((_2101 * _2101) + (_2100 * _2100)) + (_2102 * _2102))) * cbSceneParam._m0[33u].y;
            float _4600 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
            float _2497 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2304, cbSceneParam._m0[33u].w + _2305), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2304, _2305 - cbSceneParam._m0[33u].z), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2304 - cbSceneParam._m0[33u].z, _2305 - cbSceneParam._m0[33u].w), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2304 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2305), _2447), 0.0)).x), vec4(0.25)));
            float _2501 = 1.0 - (_2497 * cbSceneParam._m0[34u].x);
            float _2502 = 1.0 - (_2497 * cbSceneParam._m0[34u].y);
            float _2503 = 1.0 - (_2497 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2503) ? _2251 : (isnan(_2251) ? _2503 : min(_2251, _2503));
            frontier_phi_34_33_ladder_1 = isnan(_2502) ? _2250 : (isnan(_2250) ? _2502 : min(_2250, _2502));
            frontier_phi_34_33_ladder_2 = isnan(_2501) ? _2249 : (isnan(_2249) ? _2501 : min(_2249, _2501));
        }
        else
        {
            frontier_phi_34_33_ladder = _2251;
            frontier_phi_34_33_ladder_1 = _2250;
            frontier_phi_34_33_ladder_2 = _2249;
        }
        _2315 = frontier_phi_34_33_ladder_2;
        _2317 = frontier_phi_34_33_ladder_1;
        _2319 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2315 = _2249;
        _2317 = _2250;
        _2319 = _2251;
    }
    uvec4 _2324 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2326 = _2324.x * 14u;
    uint _2327 = _2326 + 13u;
    float _2334 = _1024 + (-1.0);
    float _2339 = (cbLight._m0[_2327].x * _2334) + 1.0;
    float _2340 = (cbLight._m0[_2327].y * _2334) + 1.0;
    float _2341 = (cbLight._m0[_2327].z * _2334) + 1.0;
    float _2342 = (cbLight._m0[_2327].w * _2334) + 1.0;
    uint _2343 = _2326 + 5u;
    float _2349 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
    uint _2353 = _2326 + 4u;
    float _2362 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
    uint _2366 = _2326 | 1u;
    float _2377 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_859, _860, _861));
    float _2380 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_859, _860, _861));
    float _4636 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _4647 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2385 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * 0.3183098733425140380859375;
    float _2387 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * 0.3183098733425140380859375;
    float _2394 = ((cbLight._m0[_2343].x * _2349) * _2387) + (((cbLight._m0[_2353].x * _2315) * _2362) * _2385);
    float _2395 = ((_2349 * cbLight._m0[_2343].y) * _2387) + (((cbLight._m0[_2353].y * _2317) * _2362) * _2385);
    float _2396 = ((_2349 * cbLight._m0[_2343].z) * _2387) + (((cbLight._m0[_2353].z * _2319) * _2362) * _2385);
    uvec4 _2400 = floatBitsToUint(cbLight._m0[_2326 + 12u]);
    bool _2402 = _2400.x == 0u;
    float _2504;
    float _2506;
    float _2508;
    if (_2402)
    {
        _2504 = _2394;
        _2506 = _2395;
        _2508 = _2396;
    }
    else
    {
        uint _2512 = _2326 + 6u;
        float _2528 = (dot(vec3(cbLight._m0[_2326 + 2u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2529 = _2528 * _2528;
        float _4658 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2530 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2531 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        _2504 = (((cbLight._m0[_2512].x * 0.3183098733425140380859375) * _2530) * _2531) + _2394;
        _2506 = (((cbLight._m0[_2512].y * 0.3183098733425140380859375) * _2530) * _2531) + _2395;
        _2508 = (((cbLight._m0[_2512].z * 0.3183098733425140380859375) * _2530) * _2531) + _2396;
    }
    bool _2511 = _2400.y == 0u;
    float _2566;
    float _2568;
    float _2570;
    if (_2511)
    {
        _2566 = _2504;
        _2568 = _2506;
        _2570 = _2508;
    }
    else
    {
        uint _2739 = _2326 + 7u;
        float _2755 = (dot(vec3(cbLight._m0[_2326 + 3u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2756 = _2755 * _2755;
        float _4674 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2757 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2758 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2566 = (((cbLight._m0[_2739].x * 0.3183098733425140380859375) * _2757) * _2758) + _2504;
        _2568 = (((cbLight._m0[_2739].y * 0.3183098733425140380859375) * _2757) * _2758) + _2506;
        _2570 = (((cbLight._m0[_2739].z * 0.3183098733425140380859375) * _2757) * _2758) + _2508;
    }
    uint _2573 = _2326 + 8u;
    float _2586 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _862) * 0.949999988079071044921875);
    float _2587 = _2586 * _2586;
    float _2588 = cbLight._m0[_2326].x + _938;
    float _2589 = cbLight._m0[_2326].y + _939;
    float _2590 = cbLight._m0[_2326].z + _940;
    float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
    float _2595 = _2594 * _2588;
    float _2596 = _2594 * _2589;
    float _2597 = _2594 * _2590;
    float _2598 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2326].xyz));
    float _4690 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2601 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _4701 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2602 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
    float _2603 = dot(vec3(_859, _860, _861), vec3(_2595, _2596, _2597));
    float _4712 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
    float _2607 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2595, _2596, _2597));
    float _4723 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2611 = _2587 * _2587;
    float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
    float _2623 = exp2(log2(1.0 - (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) * 5.0);
    float _2624 = 0.959999978542327880859375 - _1005;
    float _2626 = 0.959999978542327880859375 - _1006;
    float _2627 = 0.959999978542327880859375 - _1007;
    float _2634 = 1.0 - _2587;
    float _2645 = (0.5 / (((_2602 * ((_2601 * _2634) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2634) + _2587) * _2601))) * _2601;
    float _4734 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2647 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
    uint _2661 = _2326 + 9u;
    float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _862) * 0.949999988079071044921875);
    float _2673 = _2672 * _2672;
    float _2674 = cbLight._m0[_2366].x + _938;
    float _2675 = cbLight._m0[_2366].y + _939;
    float _2676 = cbLight._m0[_2366].z + _940;
    float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
    float _2681 = _2680 * _2674;
    float _2682 = _2680 * _2675;
    float _2683 = _2680 * _2676;
    float _2684 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2366].xyz));
    float _4745 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2687 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _2688 = dot(vec3(_859, _860, _861), vec3(_2681, _2682, _2683));
    float _4756 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2691 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _2692 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2681, _2682, _2683));
    float _4767 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2696 = _2673 * _2673;
    float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
    float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) * 5.0);
    float _2714 = 1.0 - _2673;
    float _2724 = (0.5 / (((_2602 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2714) + _2673) * _2687))) * _2687;
    float _4778 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2726 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
    float _2736 = (((((_2707 * _2624) + _1008) * cbLight._m0[_2661].x) * _2726) * _2349) + ((((cbLight._m0[_2573].x * _2315) * ((_2623 * _2624) + _1008)) * _2647) * _2362);
    float _2737 = (((((_2707 * _2626) + _1010) * cbLight._m0[_2661].y) * _2726) * _2349) + ((((cbLight._m0[_2573].y * _2317) * ((_2623 * _2626) + _1010)) * _2647) * _2362);
    float _2738 = (((((_2707 * _2627) + _1011) * cbLight._m0[_2661].z) * _2726) * _2349) + ((((cbLight._m0[_2573].z * _2319) * ((_2623 * _2627) + _1011)) * _2647) * _2362);
    float _2794;
    float _2796;
    float _2798;
    if (_2402)
    {
        _2794 = _2736;
        _2796 = _2737;
        _2798 = _2738;
    }
    else
    {
        uint _2800 = _2326 + 2u;
        uint _2804 = _2326 + 10u;
        float _2818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2800].w)) * _862) * 0.949999988079071044921875);
        float _2819 = _2818 * _2818;
        float _2820 = cbLight._m0[_2800].x + _938;
        float _2821 = cbLight._m0[_2800].y + _939;
        float _2822 = cbLight._m0[_2800].z + _940;
        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
        float _2827 = _2826 * _2820;
        float _2828 = _2826 * _2821;
        float _2829 = _2826 * _2822;
        float _2830 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2800].xyz));
        float _4789 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _2834 = dot(vec3(_859, _860, _861), vec3(_2827, _2828, _2829));
        float _4800 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2838 = dot(vec3(cbLight._m0[_2800].xyz), vec3(_2827, _2828, _2829));
        float _4811 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2842 = _2819 * _2819;
        float _2846 = ((_2837 * _2837) * (_2842 + (-1.0))) + 1.0;
        float _2853 = exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0);
        float _2860 = 1.0 - _2819;
        float _2870 = (0.5 / (((_2602 * ((_2833 * _2860) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2860) + _2819) * _2833))) * _2833;
        float _4822 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2872 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2842 / ((_2846 * _2846) * 3.141590118408203125));
        float _2873 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        _2794 = (((((_2853 * _2624) + _1008) * cbLight._m0[_2804].x) * _2872) * _2873) + _2736;
        _2796 = (((((_2853 * _2626) + _1010) * cbLight._m0[_2804].y) * _2872) * _2873) + _2737;
        _2798 = (((((_2853 * _2627) + _1011) * cbLight._m0[_2804].z) * _2872) * _2873) + _2738;
    }
    float _2904;
    float _2906;
    float _2908;
    if (_2511)
    {
        _2904 = _2794;
        _2906 = _2796;
        _2908 = _2798;
    }
    else
    {
        uint _2915 = _2326 + 3u;
        uint _2919 = _2326 + 11u;
        float _2933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2915].w)) * _862) * 0.949999988079071044921875);
        float _2934 = _2933 * _2933;
        float _2935 = cbLight._m0[_2915].x + _938;
        float _2936 = cbLight._m0[_2915].y + _939;
        float _2937 = cbLight._m0[_2915].z + _940;
        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
        float _2942 = _2941 * _2935;
        float _2943 = _2941 * _2936;
        float _2944 = _2941 * _2937;
        float _2945 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2915].xyz));
        float _4838 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2948 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2949 = dot(vec3(_859, _860, _861), vec3(_2942, _2943, _2944));
        float _4849 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2952 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2953 = dot(vec3(cbLight._m0[_2915].xyz), vec3(_2942, _2943, _2944));
        float _4860 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2957 = _2934 * _2934;
        float _2961 = ((_2952 * _2952) * (_2957 + (-1.0))) + 1.0;
        float _2968 = exp2(log2(1.0 - (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) * 5.0);
        float _2975 = 1.0 - _2934;
        float _2985 = (0.5 / (((_2602 * ((_2948 * _2975) + _2934)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2975) + _2934) * _2948))) * _2948;
        float _4871 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2987 = (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2957 / ((_2961 * _2961) * 3.141590118408203125));
        float _2988 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2904 = (((((_2968 * _2624) + _1008) * cbLight._m0[_2919].x) * _2987) * _2988) + _2794;
        _2906 = (((((_2968 * _2626) + _1010) * cbLight._m0[_2919].y) * _2987) * _2988) + _2796;
        _2908 = (((((_2968 * _2627) + _1011) * cbLight._m0[_2919].z) * _2987) * _2988) + _2798;
    }
    float _3054;
    float _3056;
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    if (_2324.y == 0u)
    {
        uvec4 _3009 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3010 = _3009.x;
        uint _3021 = uint((float(_3009.y) * floor(float(uint(cbSceneParam._m0[85u].y * _947) / _3010))) + floor(float(uint(cbSceneParam._m0[85u].x * _946) / _3010)));
        float _3031 = (log2(_2102 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3032 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
        uint _3035 = uint(isnan(14.0) ? _3032 : (isnan(_3032) ? 14.0 : min(_3032, 14.0)));
        uvec4 _3040 = texelFetch(g_lightClusterGridBuffer, int(((_3035 << 2u) + (_3021 << 6u)) >> 2u));
        uint _3041 = _3040.x;
        uint _3042 = _3009.z;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        if (((((1u << ((_3042 >> 4u) & 15u)) + 4294967295u) & _3041) == 0u) || ((_3042 & 240u) == 0u))
        {
            _3121 = 0.0;
            _3123 = 0.0;
            _3125 = 0.0;
            _3127 = 0.0;
            _3129 = 0.0;
            _3131 = 0.0;
        }
        else
        {
            float _3122;
            float _3124;
            float _3126;
            float _3128;
            float _3130;
            float _3132;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            float _3270 = 0.0;
            uint _3271 = 0u;
            uint _3280;
            bool _3281;
            for (;;)
            {
                _3280 = texelFetch(g_lightClassification, int((((_3035 << 5u) + (_3021 << 9u)) + (_3271 << 2u)) >> 2u)).x;
                _3281 = _3280 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3281)
                {
                    frontier_phi_66_pred = _3270;
                    frontier_phi_66_pred_1 = _3269;
                    frontier_phi_66_pred_2 = _3268;
                    frontier_phi_66_pred_3 = _3267;
                    frontier_phi_66_pred_4 = _3266;
                    frontier_phi_66_pred_5 = _3265;
                }
                else
                {
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    uint _3395;
                    _3389 = _3265;
                    _3390 = _3266;
                    _3391 = _3267;
                    _3392 = _3268;
                    _3393 = _3269;
                    _3394 = _3270;
                    _3395 = _3280;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    for (;;)
                    {
                        uint _3399 = uint(findLSB(_3395)) + (_3271 << 5u);
                        uint _3396 = (_3395 + 4294967295u) & _3395;
                        uint _3401 = _3399 * 48u;
                        vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3401)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 3u)).x));
                        uint _3421 = (_3399 * 48u) + 4u;
                        vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 3u)).x));
                        uint _3440 = (_3399 * 48u) + 8u;
                        vec3 _3451 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3440)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 2u)).x));
                        float _3455 = _3415.x - _2100;
                        float _3456 = _3415.y - _2101;
                        float _3457 = _3415.z - _2102;
                        float _3458 = dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457));
                        float _3461 = inversesqrt(_3458);
                        float _3462 = _3461 * _3455;
                        float _3463 = _3461 * _3456;
                        float _3464 = _3461 * _3457;
                        float _3465 = dot(vec3(_965, _968, _971), vec3(_3462, _3463, _3464));
                        float _3470 = 1.0 - (_3458 * _3415.w);
                        float _4897 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3471 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3472 = sqrt(_3458) * _3434.w;
                        float _3475 = 1.39999997615814208984375 / (_3472 + 1.39999997615814208984375);
                        float _3476 = _3475 * _3475;
                        float _3479 = ((1.0 - _3476) * _3465) + _3476;
                        float _3482 = _3472 * _3472;
                        float _3486 = ((isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0))) * _3471) / ((_3482 * 0.699999988079071044921875) + 1.0);
                        float _3490 = (-0.0) - _2100;
                        float _3491 = (-0.0) - _2101;
                        float _3492 = (-0.0) - _2102;
                        float _3496 = inversesqrt(dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492)));
                        float _3497 = _3496 * _3490;
                        float _3498 = _3496 * _3491;
                        float _3499 = _3496 * _3492;
                        float _3506 = exp2(log2(1.0 / ((_3482 * 3.5) + 5.0)) * 0.25);
                        float _3507 = 1.0 - _1040;
                        float _3514 = sqrt(1.0 - ((1.0 - (_3507 * _3507)) * (1.0 - (_3506 * _3506))));
                        float _3515 = _3514 * _3514;
                        float _3516 = _3515 * _3515;
                        float _3517 = _3497 + _3462;
                        float _3518 = _3498 + _3463;
                        float _3519 = _3499 + _3464;
                        float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                        float _3527 = dot(vec3(_965, _968, _971), vec3(_3497, _3498, _3499));
                        float _4913 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3530 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3531 = dot(vec3(_965, _968, _971), vec3(_3523 * _3517, _3523 * _3518, _3523 * _3519));
                        float _4924 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3534 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3538 = ((_3534 * _3534) * (_3516 + (-1.0))) + 1.0;
                        float _3539 = _3475 * _3515;
                        float _3540 = _3539 * _3539;
                        float _3543 = ((1.0 - _3540) * _3465) + _3540;
                        float _4935 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3544 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3545 = 1.0 - _3515;
                        float _3555 = (0.5 / (((_3544 * ((_3530 * _3545) + _3515)) + 9.9999999392252902907785028219223e-09) + (((_3544 * _3545) + _3515) * _3530))) * _3544;
                        float _4946 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3566 = (((_3516 * 3.1415927410125732421875) * (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0)))) / ((_3538 * _3538) * ((_3482 * 2.1991131305694580078125) + 3.141590118408203125))) * _3471;
                        _3324 = (_3486 * _3434.x) + _3392;
                        _3325 = (_3486 * _3434.y) + _3393;
                        _3326 = (_3486 * _3434.z) + _3394;
                        _3321 = (_3566 * _3451.x) + _3389;
                        _3322 = (_3566 * _3451.y) + _3390;
                        _3323 = (_3566 * _3451.z) + _3391;
                        if (_3396 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3389 = _3321;
                            _3390 = _3322;
                            _3391 = _3323;
                            _3392 = _3324;
                            _3393 = _3325;
                            _3394 = _3326;
                            _3395 = _3396;
                        }
                    }
                    frontier_phi_66_pred = _3326;
                    frontier_phi_66_pred_1 = _3325;
                    frontier_phi_66_pred_2 = _3324;
                    frontier_phi_66_pred_3 = _3323;
                    frontier_phi_66_pred_4 = _3322;
                    frontier_phi_66_pred_5 = _3321;
                }
                _3132 = frontier_phi_66_pred;
                _3130 = frontier_phi_66_pred_1;
                _3128 = frontier_phi_66_pred_2;
                _3126 = frontier_phi_66_pred_3;
                _3124 = frontier_phi_66_pred_4;
                _3122 = frontier_phi_66_pred_5;
                uint _3272 = _3271 + 1u;
                if (_3272 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3265 = _3122;
                    _3266 = _3124;
                    _3267 = _3126;
                    _3268 = _3128;
                    _3269 = _3130;
                    _3270 = _3132;
                    _3271 = _3272;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3121 = _3122;
            _3123 = _3124;
            _3125 = _3126;
            _3127 = _3128;
            _3129 = _3130;
            _3131 = _3132;
        }
        uvec4 _3135 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3136 = _3135.z;
        uint _3138 = (_3136 >> 8u) & 15u;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        if (((4294967295u << _3138) & _3041) == 0u)
        {
            _3233 = _3121;
            _3235 = _3123;
            _3237 = _3125;
            _3239 = _3127;
            _3241 = _3129;
            _3243 = _3131;
        }
        else
        {
            float _3258 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
            float _3259 = _3258 * _2100;
            float _3260 = _3258 * _2101;
            float _3261 = _3258 * _2102;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3138 < ((_3136 >> 12u) & 15u))
            {
                float _3234;
                float _3236;
                float _3238;
                float _3240;
                float _3242;
                float _3244;
                float _3372 = _3121;
                float _3373 = _3123;
                float _3374 = _3125;
                float _3375 = _3127;
                float _3376 = _3129;
                float _3377 = _3131;
                uint _3378 = _3138;
                uint _3387;
                bool _3388;
                for (;;)
                {
                    _3387 = texelFetch(g_lightClassification, int((((_3035 << 5u) + (_3021 << 9u)) + (_3378 << 2u)) >> 2u)).x;
                    _3388 = _3387 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3388)
                    {
                        frontier_phi_72_pred = _3377;
                        frontier_phi_72_pred_1 = _3376;
                        frontier_phi_72_pred_2 = _3375;
                        frontier_phi_72_pred_3 = _3374;
                        frontier_phi_72_pred_4 = _3373;
                        frontier_phi_72_pred_5 = _3372;
                    }
                    else
                    {
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3584 = _3372;
                        float _3585 = _3373;
                        float _3586 = _3374;
                        float _3587 = _3375;
                        float _3588 = _3376;
                        float _3589 = _3377;
                        uint _3590 = _3387;
                        uint _3591;
                        vec4 _3616;
                        float _3617;
                        vec4 _3632;
                        vec3 _3644;
                        vec4 _3659;
                        vec4 _3674;
                        float _3720;
                        bool _3721;
                        for (;;)
                        {
                            uint _3601 = ((_3378 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3590));
                            _3591 = (_3590 + 4294967295u) & _3590;
                            uint _3603 = _3601 * 40u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            _3617 = _3616.w;
                            uint _3619 = (_3601 * 40u) + 4u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3601 * 40u) + 8u;
                            _3644 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x));
                            uint _3646 = (_3601 * 40u) + 16u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3661 = (_3601 * 40u) + 20u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3601 * 40u) + 24u;
                            vec4 _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3695 = (_3601 * 40u) + 28u;
                            vec4 _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            _3720 = fma(_2102, _3708.z, fma(_2101, _3708.y, _3708.x * _2100)) + _3708.w;
                            _3721 = !((fma(_2102, _3689.z, fma(_2101, _3689.y, _3689.x * _2100)) + _3689.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3721)
                            {
                                float _3748 = _3616.x - _2100;
                                float _3749 = _3616.y - _2101;
                                float _3750 = _3616.z - _2102;
                                float _3751 = dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750));
                                float _3754 = inversesqrt(_3751);
                                float _3755 = _3754 * _3748;
                                float _3756 = _3754 * _3749;
                                float _3757 = _3754 * _3750;
                                float _3761 = 1.0 - (_3751 / (_3617 * _3617));
                                float _4957 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3766 = sqrt(_3751) * _3632.w;
                                float _3768 = 1.39999997615814208984375 / (_3766 + 1.39999997615814208984375);
                                float _3769 = _3768 * _3768;
                                float _3772 = ((1.0 - _3769) * dot(vec3(_3755, _3756, _3757), vec3(_965, _968, _971))) + _3769;
                                float _3775 = _3766 * _3766;
                                float _3779 = (fma(_2102, _3659.z, fma(_2101, _3659.y, _3659.x * _2100)) + _3659.w) / _3720;
                                float _3780 = (fma(_2102, _3674.z, fma(_2101, _3674.y, _3674.x * _2100)) + _3674.w) / _3720;
                                float _3784 = 1.0 - dot(vec2(_3779, _3780), vec2(_3779, _3780));
                                float _4973 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3786 = _3785 * (((isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0))) * _3762) / ((_3775 * 0.699999988079071044921875) + 1.0));
                                float _3798 = exp2(log2(1.0 / ((_3775 * 3.5) + 5.0)) * 0.25);
                                float _3799 = 1.0 - _1040;
                                float _3806 = sqrt(1.0 - ((1.0 - (_3799 * _3799)) * (1.0 - (_3798 * _3798))));
                                float _3807 = _3806 * _3806;
                                float _3808 = _3807 * _3807;
                                float _3809 = _3755 - _3259;
                                float _3810 = _3756 - _3260;
                                float _3811 = _3757 - _3261;
                                float _3815 = inversesqrt(dot(vec3(_3809, _3810, _3811), vec3(_3809, _3810, _3811)));
                                float _3819 = dot(vec3(_965, _968, _971), vec3((-0.0) - _3259, (-0.0) - _3260, (-0.0) - _3261));
                                float _4984 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3822 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3823 = dot(vec3(_965, _968, _971), vec3(_3815 * _3809, _3815 * _3810, _3815 * _3811));
                                float _4995 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3826 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3830 = ((_3826 * _3826) * (_3808 + (-1.0))) + 1.0;
                                float _3831 = _3768 * _3807;
                                float _3832 = _3831 * _3831;
                                float _3838 = ((1.0 - _3832) * dot(vec3(_965, _968, _971), vec3(_3755, _3756, _3757))) + _3832;
                                float _5006 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3839 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3840 = 1.0 - _3807;
                                float _3850 = (0.5 / (((_3839 * ((_3822 * _3840) + _3807)) + 9.9999999392252902907785028219223e-09) + (((_3839 * _3840) + _3807) * _3822))) * _3839;
                                float _5017 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3860 = (_3785 * _3762) * (((_3808 * 3.1415927410125732421875) * (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0)))) / ((_3830 * _3830) * ((_3775 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3786 * _3632.y;
                                frontier_phi_78_pred_1 = _3786 * _3632.x;
                                frontier_phi_78_pred_2 = _3860 * _3644.z;
                                frontier_phi_78_pred_3 = _3860 * _3644.y;
                                frontier_phi_78_pred_4 = _3860 * _3644.x;
                                frontier_phi_78_pred_5 = _3786 * _3632.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3868 = frontier_phi_78_pred;
                            _3867 = frontier_phi_78_pred_1;
                            _3866 = frontier_phi_78_pred_2;
                            _3865 = frontier_phi_78_pred_3;
                            _3864 = frontier_phi_78_pred_4;
                            _3869 = frontier_phi_78_pred_5;
                            _3574 = _3867 + _3587;
                            _3575 = _3868 + _3588;
                            _3576 = _3869 + _3589;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            if (_3591 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3591;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3576;
                        frontier_phi_72_pred_1 = _3575;
                        frontier_phi_72_pred_2 = _3574;
                        frontier_phi_72_pred_3 = _3573;
                        frontier_phi_72_pred_4 = _3572;
                        frontier_phi_72_pred_5 = _3571;
                    }
                    _3244 = frontier_phi_72_pred;
                    _3242 = frontier_phi_72_pred_1;
                    _3240 = frontier_phi_72_pred_2;
                    _3238 = frontier_phi_72_pred_3;
                    _3236 = frontier_phi_72_pred_4;
                    _3234 = frontier_phi_72_pred_5;
                    uint _3379 = _3378 + 1u;
                    if (_3379 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3372 = _3234;
                        _3373 = _3236;
                        _3374 = _3238;
                        _3375 = _3240;
                        _3376 = _3242;
                        _3377 = _3244;
                        _3378 = _3379;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3244;
                frontier_phi_60_61_ladder_1 = _3242;
                frontier_phi_60_61_ladder_2 = _3238;
                frontier_phi_60_61_ladder_3 = _3236;
                frontier_phi_60_61_ladder_4 = _3234;
                frontier_phi_60_61_ladder_5 = _3240;
            }
            else
            {
                frontier_phi_60_61_ladder = _3131;
                frontier_phi_60_61_ladder_1 = _3129;
                frontier_phi_60_61_ladder_2 = _3125;
                frontier_phi_60_61_ladder_3 = _3123;
                frontier_phi_60_61_ladder_4 = _3121;
                frontier_phi_60_61_ladder_5 = _3127;
            }
            _3233 = frontier_phi_60_61_ladder_4;
            _3235 = frontier_phi_60_61_ladder_3;
            _3237 = frontier_phi_60_61_ladder_2;
            _3239 = frontier_phi_60_61_ladder_5;
            _3241 = frontier_phi_60_61_ladder_1;
            _3243 = frontier_phi_60_61_ladder;
        }
        float _3248 = isnan(1.0) ? _1024 : (isnan(_1024) ? 1.0 : min(_1024, 1.0));
        _3054 = (_3248 * _3239) + _2566;
        _3056 = (_3248 * _3241) + _2568;
        _3058 = (_3248 * _3243) + _2570;
        _3060 = ((_3233 * _1008) * _3248) + _2904;
        _3062 = ((_3235 * _1010) * _3248) + _2906;
        _3064 = ((_3237 * _1011) * _3248) + _2908;
    }
    else
    {
        _3054 = _2566;
        _3056 = _2568;
        _3058 = _2570;
        _3060 = _2904;
        _3062 = _2906;
        _3064 = _2908;
    }
    float _5033 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _5044 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _5055 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    uint _3084 = _281 + 6u;
    float _3092 = _946 / cbSceneParam._m0[86u].x;
    float _3093 = _947 / cbSceneParam._m0[86u].y;
    vec4 _3107 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3092, _3093, (log2((isnan(cbSceneParam._m0[77u].w) ? _881 : (isnan(_881) ? cbSceneParam._m0[77u].w : min(_881, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3109 = _3107.x;
    float _3110 = _3107.y;
    float _3111 = _3107.z;
    float _3112 = _3107.w;
    float _3183;
    float _3185;
    float _3187;
    float _3189;
    if (_881 > cbSceneParam._m0[78u].w)
    {
        float _3146 = isnan(_881) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _881 : min(cbSceneParam._m0[80u].w, _881));
        float _3147 = _3146 / _881;
        float _3158 = _3147 * _931;
        float _3159 = _932 * _3147;
        float _3160 = (-0.0) - _3159;
        float _3161 = _3147 * _933;
        float _3163 = (cbSceneParam._m0[77u].w * _3160) / _3146;
        float _3164 = _3163 + cbSceneParam._m0[79u].w;
        float _3165 = cbSceneParam._m0[79u].w - _3159;
        float _3171 = sqrt(((_3158 * _3158) + (_3159 * _3159)) + (_3161 * _3161));
        float _3174 = (1.0 - (cbSceneParam._m0[77u].w / _3146)) * _3171;
        float _3179 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3181 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3334;
        if (abs((_3160 - _3163) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3334 = ((((_3164 > 0.0) ? exp2(_3179 * _3164) : (2.0 - exp2(_3181 * _3164))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3174;
        }
        else
        {
            float _3294 = 1.0 / cbSceneParam._m0[80u].x;
            float _3295 = isnan(_3165) ? _3164 : (isnan(_3164) ? _3165 : max(_3164, _3165));
            float _3296 = isnan(_3165) ? _3164 : (isnan(_3164) ? _3165 : min(_3164, _3165));
            float _3305 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : min(_3295, 0.0));
            float _3306 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : min(_3296, 0.0));
            _3334 = ((abs(_3171 / _3160) * cbSceneParam._m0[80u].y) * ((((_3305 - _3306) * 2.0) - ((exp2(_3179 * (isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0)))) - exp2(_3179 * (isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0))))) * _3294)) - ((exp2(_3181 * _3305) - exp2(_3181 * _3306)) * _3294))) + (_3174 * cbSceneParam._m0[80u].z);
        }
        vec4 _3336 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3092, _3093, 1.0), 0.0);
        float _3345 = exp2((_3334 * (-1.44269502162933349609375)) * (1.0 - _3336.w));
        float _3346 = log2(_3345);
        float _3362 = log2(_3112);
        _3183 = (exp2(_3362 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3346 * cbSceneParam._m0[78u].x)) * _3336.x) / cbSceneParam._m0[78u].x)) + _3109;
        _3185 = (exp2(_3362 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3346 * cbSceneParam._m0[78u].y)) * _3336.y) / cbSceneParam._m0[78u].y)) + _3110;
        _3187 = (exp2(_3362 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3346 * cbSceneParam._m0[78u].z)) * _3336.z) / cbSceneParam._m0[78u].z)) + _3111;
        _3189 = _3345 * _3112;
    }
    else
    {
        _3183 = _3109;
        _3185 = _3110;
        _3187 = _3111;
        _3189 = _3112;
    }
    float _3201 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3202 = _3201 == 3.0;
    float _3203 = log2(_3189);
    float _3210 = exp2(_3203 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_3054 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1024))) + ((_3060 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1832)) * cbPerFrame._m0[3u].x));
    float _3211 = exp2(_3203 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0))) * (_3056 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1024))) + ((_3062 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1832)) * cbPerFrame._m0[3u].x));
    float _3212 = exp2(_3203 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0))) * (_3058 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1024))) + ((_3064 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1832)) * cbPerFrame._m0[3u].x));
    float _3221 = (_3201 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3221 * (_3202 ? _3210 : (_3210 + (cbSceneParam._m0[72u].w * _3183)));
    SV_Target.y = _3221 * (_3202 ? _3211 : (_3211 + (cbSceneParam._m0[72u].w * _3185)));
    SV_Target.z = _3221 * (_3202 ? _3212 : (_3212 + (cbSceneParam._m0[72u].w * _3187)));
    SV_Target.w = cbInstanceData._m0[_3084].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3084].w;
}


