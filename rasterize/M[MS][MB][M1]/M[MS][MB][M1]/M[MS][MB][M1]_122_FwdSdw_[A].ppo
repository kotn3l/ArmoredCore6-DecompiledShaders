#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1483;
float _4146;
float _4147;
float _4148;
float _4149;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4158 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4169 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4180 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _408 = _406.x;
    float _420 = dot(vec4(_408, _406.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _437 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_408 - _420) * cbMtdParam._m0[24u].y) + _420) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4191 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _445 = (_438 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _446 = (_438 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _447 = (_438 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    float _451 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _445;
    float _454 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _446;
    float _457 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _447;
    float _464 = ((_445 - _451) * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) + _451;
    float _465 = ((_446 - _454) * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) + _454;
    float _466 = ((_447 - _457) * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) + _457;
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _530 = _528.x;
    float _531 = _528.y;
    float _532 = _528.z;
    float _541 = ((_511.z - _532) * _438) + _532;
    float _544 = ((((_511.x - _530) * _438) + _530) * 2.0) + (-1.0);
    float _545 = ((((_511.y - _531) * _438) + _531) * 2.0) + (-1.0);
    float _546 = dot(vec2(_544, _545), vec2(_544, _545));
    float _4202 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _583 = (_544 + ((((_484.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_571.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _584 = (_545 + ((((_484.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_571.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _587 = fma(_551, _256, fma(_584, _263, _583 * _249));
    float _590 = fma(_551, _257, fma(_584, _264, _583 * _250));
    float _593 = fma(_551, _258, fma(_584, _265, _583 * _251));
    float _597 = inversesqrt(dot(vec3(_587, _590, _593), vec3(_587, _590, _593)));
    vec4 _624 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _626 = _624.x;
    float _627 = 1.0 - _626;
    float _631 = ((_626 - _627) * cbMtdParam._m0[24u].z) + _627;
    float _633 = (cbMtdParam._m0[19u].x + dot(vec4(_597 * _587, _597 * _590, _597 * _593, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_631 * cbMtdParam._m0[21u].z);
    float _4213 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _636 = (-0.0) - cbMtdParam._m0[24u].x;
    float _638 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _638 : (isnan(_638) ? 1.0 : min(_638, 1.0));
    float _646 = _634 - ((_634 * TEXCOORD_8.x) * _639);
    float _647 = _634 - ((_634 * TEXCOORD_8.y) * _639);
    float _648 = _634 - ((_634 * TEXCOORD_8.z) * _639);
    float _655 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _659 = ((isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : min(_655, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _667 = (_659 - (((_631 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _659))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4244 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _668 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _672 = ((_646 * (cbMtdParam._m0[17u].x - _464)) * _668) + _464;
    float _673 = ((_647 * (cbMtdParam._m0[17u].y - _465)) * _668) + _465;
    float _674 = ((_648 * (cbMtdParam._m0[17u].z - _466)) * _668) + _466;
    vec4 _686 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _688 = _686.x;
    float _689 = 1.0 - _688;
    float _714 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_688 - _689) * cbMtdParam._m0[24u].w) + _689) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4255 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _715 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _723 = ((((cbMtdParam._m0[10u].x - _672) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _715) + _672;
    float _724 = ((((cbMtdParam._m0[10u].y - _673) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _715) + _673;
    float _725 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _674)) * _715) + _674;
    vec4 _751 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _753 = _751.x;
    float _771 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _753) * _438) + _753;
    float _775 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _771) * cbMtdParam._m0[19u].z) + _771;
    float _778 = _775 - ((_668 * _646) * _775);
    float _780 = _778 - (_778 * _715);
    float _785 = (((_484.z - _541) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _541;
    float _789 = ((_571.z - _785) * cbMtdParam._m0[19u].w) + _785;
    vec4 _803 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _810 = (_803.x * 2.0) + (-1.0);
    float _811 = (_803.y * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _4266 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _821 = (((_803.z - _789) * _646) * _668) + _789;
    float _824 = ((cbMtdParam._m0[23u].y - _821) * _715) + _821;
    vec4 _843 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _849 = (_843.x * 2.0) + (-1.0);
    float _850 = (_843.y * 2.0) + (-1.0);
    float _851 = dot(vec2(_849, _850), vec2(_849, _850));
    float _4277 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _871 = (((cbMtdParam._m0[21u].x * _583) + ((_810 - _583) * _646)) * _668) + _583;
    float _872 = (((cbMtdParam._m0[21u].x * _584) + ((_811 - _584) * _647)) * _668) + _584;
    float _873 = (((sqrt(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) - _551) * _648) * _668) + _551;
    float _884 = (((_849 - _871) + (_871 * cbMtdParam._m0[22u].z)) * _715) + _871;
    float _885 = (((_850 - _872) + (_872 * cbMtdParam._m0[22u].z)) * _715) + _872;
    float _886 = ((sqrt(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) - _873) * _715) + _873;
    float _890 = cbMtdParam._m0[22u].x + _571.w;
    float _893 = fma(_886, _256, fma(_885, _263, _884 * _249));
    float _896 = fma(_886, _257, fma(_885, _264, _884 * _250));
    float _899 = fma(_886, _258, fma(_885, _265, _884 * _251));
    float _903 = inversesqrt(dot(vec3(_893, _896, _899), vec3(_893, _896, _899)));
    float _904 = _903 * _893;
    float _905 = _903 * _896;
    float _906 = _903 * _899;
    float _4288 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _907 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4310 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4321 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4332 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4343 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _912 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _926 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _976 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _966);
    float _977 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _966);
    float _978 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _966);
    float _982 = inversesqrt(dot(vec3(_976, _977, _978), vec3(_976, _977, _978)));
    float _983 = _976 * _982;
    float _984 = _977 * _982;
    float _985 = _978 * _982;
    vec4 _990 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _992 = _990.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1164 = sqrt(((_976 * _976) + (_977 * _977)) + (_978 * _978));
        float _1170 = (cbMatDynParam._m0[5u].x * _1164) + cbMatDynParam._m0[5u].y;
        float _4354 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1175 = (cbMatDynParam._m0[5u].z * _1164) + cbMatDynParam._m0[5u].w;
        float _4365 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) - _1171)) + _1171) < ((_992 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1003 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1004 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1022 = fma(_906, cbSceneParam._m0[5u].z, fma(_905, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _904));
    float _1025 = fma(_906, cbSceneParam._m0[6u].z, fma(_905, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _904));
    float _1028 = fma(_906, cbSceneParam._m0[7u].z, fma(_905, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _904));
    uint _1041 = _287 + 9u;
    uint _1042 = _1041 + uint(cbMatDynParam._m0[0u].w);
    float _1048 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * cbInstanceData._m0[_1042].x;
    float _1049 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * cbInstanceData._m0[_1042].y;
    float _1050 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * cbInstanceData._m0[_1042].z;
    float _4376 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _4387 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _4398 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _1054 = 1.0 - _912;
    float _1055 = _1051 * _1054;
    float _1056 = _1052 * _1054;
    float _1057 = _1053 * _1054;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _912;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _912;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _912;
    float _1065 = _1062 + 0.039999999105930328369140625;
    float _1067 = _1063 + 0.039999999105930328369140625;
    float _1068 = _1064 + 0.039999999105930328369140625;
    vec4 _1077 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1003, cbSceneParam._m0[86u].y * _1004));
    float _1081 = ((isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * TEXCOORD_5.w) * _1077.x;
    float _1082 = dot(vec3(_904, _905, _906), vec3(_983, _984, _985));
    float _1085 = _1082 * 2.0;
    float _1089 = (_1085 * _904) - _983;
    float _1090 = (_1085 * _905) - _984;
    float _1091 = (_1085 * _906) - _985;
    float _1095 = abs(dot(vec3(_983, _984, _985), vec3(_904, _905, _906)));
    float _4409 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1097 = sqrt(_907);
    float _1110 = exp2((_1097 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1097 * 3.0));
    float _1116 = (1.0 - _1110) * ((_1097 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1117 = _1110 * _1097;
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1153 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1482;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1207 = fma(_1153, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1145));
        float _1211 = fma(_1153, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1145));
        float _1215 = fma(_1153, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1145));
        float _1240 = _1145 + _904;
        float _1241 = _1149 + _905;
        float _1242 = _1153 + _906;
        float _1252 = fma(_1242, cbModelParam._m0[26u].z, fma(_1241, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1240)) - _1207;
        float _1253 = fma(_1242, cbModelParam._m0[27u].z, fma(_1241, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1240)) - _1211;
        float _1254 = fma(_1242, cbModelParam._m0[28u].z, fma(_1241, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1240)) - _1215;
        float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
        float _1271 = ((_1258 * _1252) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1207 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1258 * _1253) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1211 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1258 * _1254) / cbModelParam._m0[34u].z) + ((((((_1215 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        float _1310 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1276.x + (-0.5));
        float _1312 = _1310 * (_1276.y + (-0.5));
        float _1313 = _1310 * (_1276.z + (-0.5));
        float _1320 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1283.x + (-0.5));
        float _1322 = _1320 * (_1283.y + (-0.5));
        float _1323 = _1320 * (_1283.z + (-0.5));
        float _1330 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1290.x + (-0.5));
        float _1332 = _1330 * (_1290.y + (-0.5));
        float _1333 = _1330 * (_1290.z + (-0.5));
        float _1340 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1297.x + (-0.5));
        float _1342 = _1340 * (_1297.y + (-0.5));
        float _1343 = _1340 * (_1297.z + (-0.5));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = _1311 * 0.5;
        float _1348 = _1321 * 0.5;
        float _1349 = _1331 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1364 = (dot(vec3(_904, _905, _906), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1374 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4457 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1376 + 1.0))) + _1381) * _1344;
        float _1391 = _1312 * 0.5;
        float _1392 = _1322 * 0.5;
        float _1393 = _1332 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_904, _905, _906), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4490 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1418 + 1.0))) + _1423) * _1345;
        float _1433 = _1313 * 0.5;
        float _1434 = _1323 * 0.5;
        float _1435 = _1333 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_904, _905, _906), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4501 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4512 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4523 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_1460 + 1.0))) + _1465) * _1346;
        _1482 = _1313;
        _1484 = _1312;
        _1485 = _1311;
        _1486 = _1323;
        _1487 = _1322;
        _1488 = _1321;
        _1489 = _1333;
        _1490 = _1332;
        _1491 = _1331;
        _1492 = _1346;
        _1493 = _1345;
        _1494 = _1344;
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1483;
        _1484 = _1483;
        _1485 = _1483;
        _1486 = _1483;
        _1487 = _1483;
        _1488 = _1483;
        _1489 = _1483;
        _1490 = _1483;
        _1491 = _1483;
        _1492 = _1483;
        _1493 = _1483;
        _1494 = _1483;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1525 = fma(_1153, cbModelParam._m0[30u].z, fma(_1149, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145));
        float _1529 = fma(_1153, cbModelParam._m0[31u].z, fma(_1149, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145));
        float _1533 = fma(_1153, cbModelParam._m0[32u].z, fma(_1149, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145));
        float _1556 = _1145 + _904;
        float _1557 = _1149 + _905;
        float _1558 = _1153 + _906;
        float _1568 = fma(_1558, cbModelParam._m0[30u].z, fma(_1557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1556)) - _1525;
        float _1569 = fma(_1558, cbModelParam._m0[31u].z, fma(_1557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1556)) - _1529;
        float _1570 = fma(_1558, cbModelParam._m0[32u].z, fma(_1557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1556)) - _1533;
        float _1574 = inversesqrt(dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570)));
        float _1587 = ((_1574 * _1568) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1525 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1574 * _1569) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1529 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1574 * _1570) / cbModelParam._m0[35u].z) + ((((((_1533 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        float _1624 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1591.x + (-0.5));
        float _1626 = _1624 * (_1591.y + (-0.5));
        float _1627 = _1624 * (_1591.z + (-0.5));
        float _1634 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1598.x + (-0.5));
        float _1636 = _1634 * (_1598.y + (-0.5));
        float _1637 = _1634 * (_1598.z + (-0.5));
        float _1644 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1605.x + (-0.5));
        float _1646 = _1644 * (_1605.y + (-0.5));
        float _1647 = _1644 * (_1605.z + (-0.5));
        float _1654 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1612.x + (-0.5));
        float _1656 = _1654 * (_1612.y + (-0.5));
        float _1657 = _1654 * (_1612.z + (-0.5));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = _1625 * 0.5;
        float _1662 = _1635 * 0.5;
        float _1663 = _1645 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_904, _905, _906), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4564 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4575 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4586 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_1688 + 1.0))) + _1693) * _1658;
        float _1703 = _1626 * 0.5;
        float _1704 = _1636 * 0.5;
        float _1705 = _1646 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_904, _905, _906), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4597 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4608 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4619 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_1730 + 1.0))) + _1735) * _1659;
        float _1745 = _1627 * 0.5;
        float _1746 = _1637 * 0.5;
        float _1747 = _1647 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_904, _905, _906), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4630 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4641 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4652 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_1772 + 1.0))) + _1777) * _1660;
        _1794 = _1627;
        _1795 = _1626;
        _1796 = _1625;
        _1797 = _1637;
        _1798 = _1636;
        _1799 = _1635;
        _1800 = _1647;
        _1801 = _1646;
        _1802 = _1645;
        _1803 = _1660;
        _1804 = _1659;
        _1805 = _1658;
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
    }
    else
    {
        _1794 = _1483;
        _1795 = _1483;
        _1796 = _1483;
        _1797 = _1483;
        _1798 = _1483;
        _1799 = _1483;
        _1800 = _1483;
        _1801 = _1483;
        _1802 = _1483;
        _1803 = _1483;
        _1804 = _1483;
        _1805 = _1483;
        _1806 = 0.0;
        _1807 = 0.0;
        _1808 = 0.0;
    }
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1495)) + _1495;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1496)) + _1496;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1497)) + _1497;
    float _1841 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1844 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1847 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1818));
    float _1862 = _1089 * 0.5;
    float _1863 = _1090 * 0.5;
    float _1864 = _1091 * 0.5;
    float _1865 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1868 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1871 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1905;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1878 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1482, _1486, _1489, _1492));
        float _1882 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1484, _1487, _1490, _1493));
        float _1886 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1893 = dot(vec4(cbModelParam._m0[39u]), vec4(_1862, _1863, _1864, 1.0));
        _1905 = dot(vec3(isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1893) ? 0.0 : (isnan(0.0) ? _1893 : max(0.0, _1893))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1905 = 1.0;
    }
    float _1916;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1907 = dot(vec4(cbModelParam._m0[40u]), vec4(_1862, _1863, _1864, 1.0));
        _1916 = dot(vec3(isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1907) ? 0.0 : (isnan(0.0) ? _1907 : max(0.0, _1907))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1916 = 1.0;
    }
    float _1920 = (_1916 * cbModelParam._m0[1u].x) + (_1905 * (1.0 - cbModelParam._m0[1u].x));
    float _1930 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _907);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1930 : min(cbModelParam._m0[25u].z, _1930));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1979 = fma(_1153, cbModelParam._m0[13u].z, fma(_1149, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1145)) + cbModelParam._m0[13u].w;
        float _1983 = fma(_1153, cbModelParam._m0[14u].z, fma(_1149, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1145)) + cbModelParam._m0[14u].w;
        float _1987 = fma(_1153, cbModelParam._m0[15u].z, fma(_1149, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1145)) + cbModelParam._m0[15u].w;
        float _1990 = fma(_1091, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089));
        float _1993 = fma(_1091, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089));
        float _1996 = fma(_1091, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089));
        float _2024;
        if (_1990 > 0.0)
        {
            _2024 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2024 = frontier_phi_17_15_ladder;
        }
        float _2196;
        if (_1993 > 0.0)
        {
            _2196 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2196 = frontier_phi_26_22_ladder;
        }
        float _2491;
        if (_1996 > 0.0)
        {
            _2491 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2491 = frontier_phi_38_33_ladder;
        }
        float _2493 = isnan(_2196) ? _2024 : (isnan(_2024) ? _2196 : min(_2024, _2196));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1990) + _1979;
        float _2499 = (_2494 * _1993) + _1983;
        float _2500 = (_2494 * _1996) + _1987;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2501;
        float _2505 = _2501 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 > _2505) || ((_2499 < _2503) || ((_2498 < _2503) || (_2498 > _2505))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2500, cbModelParam._m0[9u].z, fma(_2499, cbModelParam._m0[9u].y, _2498 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2500, cbModelParam._m0[10u].z, fma(_2499, cbModelParam._m0[10u].y, _2498 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2500, cbModelParam._m0[11u].z, fma(_2499, cbModelParam._m0[11u].y, _2498 * cbModelParam._m0[11u].x))), _1931);
            frontier_phi_16_38_ladder = _2645.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2645.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2645.x * cbModelParam._m0[1u].y;
        }
        _2012 = frontier_phi_16_38_ladder_2;
        _2014 = frontier_phi_16_38_ladder_1;
        _2016 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2000 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1089, _1090, _1091), _1931);
        _2012 = _2000.x * cbModelParam._m0[1u].y;
        _2014 = _2000.y * cbModelParam._m0[1u].y;
        _2016 = _2000.z * cbModelParam._m0[1u].y;
    }
    float _2020 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _907);
    float _2021 = isnan(_2020) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2020 : min(cbModelParam._m0[25u].w, _2020));
    float _2111;
    float _2113;
    float _2115;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2075 = fma(_1153, cbModelParam._m0[21u].z, fma(_1149, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1145)) + cbModelParam._m0[21u].w;
        float _2079 = fma(_1153, cbModelParam._m0[22u].z, fma(_1149, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1145)) + cbModelParam._m0[22u].w;
        float _2083 = fma(_1153, cbModelParam._m0[23u].z, fma(_1149, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1145)) + cbModelParam._m0[23u].w;
        float _2086 = fma(_1091, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089));
        float _2089 = fma(_1091, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089));
        float _2092 = fma(_1091, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089));
        float _2201;
        if (_2086 > 0.0)
        {
            _2201 = abs((1.0 - _2075) / _2086);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2075 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2201 = frontier_phi_28_24_ladder;
        }
        float _2518;
        if (_2089 > 0.0)
        {
            _2518 = abs((1.0 - _2079) / _2089);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2079 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2518 = frontier_phi_40_35_ladder;
        }
        float _2856;
        if (_2092 > 0.0)
        {
            _2856 = abs((1.0 - _2083) / _2092);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2083 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2856 = frontier_phi_50_47_ladder;
        }
        float _2858 = isnan(_2518) ? _2201 : (isnan(_2201) ? _2518 : min(_2201, _2518));
        float _2859 = isnan(_2856) ? _2858 : (isnan(_2858) ? _2856 : min(_2858, _2856));
        float _2863 = (_2859 * _2086) + _2075;
        float _2864 = (_2859 * _2089) + _2079;
        float _2865 = (_2859 * _2092) + _2083;
        float _2866 = _2859 * 9.9999997473787516355514526367188e-05;
        float _2867 = (-1.0) - _2866;
        float _2869 = _2866 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2865 > _2869) || ((_2865 < _2867) || ((_2864 > _2869) || ((_2864 < _2867) || ((_2863 < _2867) || (_2863 > _2869))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2865, cbModelParam._m0[17u].z, fma(_2864, cbModelParam._m0[17u].y, _2863 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2865, cbModelParam._m0[18u].z, fma(_2864, cbModelParam._m0[18u].y, _2863 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2865, cbModelParam._m0[19u].z, fma(_2864, cbModelParam._m0[19u].y, _2863 * cbModelParam._m0[19u].x))), _2021);
            frontier_phi_25_50_ladder = _2987.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2987.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2987.x * cbModelParam._m0[1u].z;
        }
        _2111 = frontier_phi_25_50_ladder_2;
        _2113 = frontier_phi_25_50_ladder_1;
        _2115 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2095 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1089, _1090, _1091), _2021);
        _2111 = _2095.x * cbModelParam._m0[1u].z;
        _2113 = _2095.y * cbModelParam._m0[1u].z;
        _2115 = _2095.z * cbModelParam._m0[1u].z;
    }
    float _2128 = (((_1116 * _1065) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2111 - _2012)) + _2012);
    float _2130 = (((_1116 * _1067) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2113 - _2014)) + _2014);
    float _2132 = (((_1116 * _1068) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2115 - _2016)) + _2016);
    float _2135 = fma(_2132, cbSceneParam._m0[89u].z, fma(_2130, cbSceneParam._m0[89u].y, _2128 * cbSceneParam._m0[89u].x));
    float _2138 = fma(_2132, cbSceneParam._m0[90u].z, fma(_2130, cbSceneParam._m0[90u].y, _2128 * cbSceneParam._m0[90u].x));
    float _2141 = fma(_2132, cbSceneParam._m0[91u].z, fma(_2130, cbSceneParam._m0[91u].y, _2128 * cbSceneParam._m0[91u].x));
    float _2175 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2179 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2183 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2187 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2188 = _2175 / _2187;
    float _2189 = _2179 / _2187;
    float _2190 = _2183 / _2187;
    float _2337;
    float _2338;
    float _2339;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2217 = ((uint(_2190 > cbSceneParam._m0[59u].y) + uint(_2190 > cbSceneParam._m0[59u].x)) + uint(_2190 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2218 = _2217 + 43u;
        uint _2226 = _2217 + 44u;
        uint _2234 = _2217 + 45u;
        uint _2242 = _2217 + 46u;
        float _2253 = fma(_2187, cbSceneParam._m0[_2218].w, fma(_2183, cbSceneParam._m0[_2218].z, fma(_2179, cbSceneParam._m0[_2218].y, _2175 * cbSceneParam._m0[_2218].x)));
        float _2257 = fma(_2187, cbSceneParam._m0[_2226].w, fma(_2183, cbSceneParam._m0[_2226].z, fma(_2179, cbSceneParam._m0[_2226].y, _2175 * cbSceneParam._m0[_2226].x)));
        float _2265 = fma(_2187, cbSceneParam._m0[_2242].w, fma(_2183, cbSceneParam._m0[_2242].z, fma(_2179, cbSceneParam._m0[_2242].y, _2175 * cbSceneParam._m0[_2242].x)));
        float _2270 = cbSceneParam._m0[33u].z * _2265;
        float _2272 = cbSceneParam._m0[33u].w * _2265;
        float _2275 = fma(_2187, cbSceneParam._m0[_2234].w, fma(_2183, cbSceneParam._m0[_2234].z, fma(_2179, cbSceneParam._m0[_2234].y, _2175 * cbSceneParam._m0[_2234].x))) / _2265;
        float _2323 = (cbSceneParam._m0[33u].x - sqrt(((_2189 * _2189) + (_2188 * _2188)) + (_2190 * _2190))) * cbSceneParam._m0[33u].y;
        float _4778 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2330 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2270 + _2253) / _2265, (_2272 + _2257) / _2265), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2272 + _2253) / _2265, (_2257 - _2270) / _2265), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2253 - _2270) / _2265, (_2257 - _2272) / _2265), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2253 - _2272) / _2265, (_2270 + _2257) / _2265), _2275), 0.0)).x), vec4(0.25)));
        _2337 = 1.0 - (_2330 * cbSceneParam._m0[34u].x);
        _2338 = 1.0 - (_2330 * cbSceneParam._m0[34u].y);
        _2339 = 1.0 - (_2330 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2337 = 1.0;
        _2338 = 1.0;
        _2339 = 1.0;
    }
    float _2403;
    float _2405;
    float _2407;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2391 = fma(_2187, cbSceneParam._m0[63u].w, fma(_2183, cbSceneParam._m0[63u].z, fma(_2179, cbSceneParam._m0[63u].y, _2175 * cbSceneParam._m0[63u].x)));
        float _2392 = fma(_2187, cbSceneParam._m0[60u].w, fma(_2183, cbSceneParam._m0[60u].z, fma(_2179, cbSceneParam._m0[60u].y, _2175 * cbSceneParam._m0[60u].x))) / _2391;
        float _2393 = fma(_2187, cbSceneParam._m0[61u].w, fma(_2183, cbSceneParam._m0[61u].z, fma(_2179, cbSceneParam._m0[61u].y, _2175 * cbSceneParam._m0[61u].x))) / _2391;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2392 >= cbSceneParam._m0[64u].x) && (_2393 >= cbSceneParam._m0[64u].y)) && (_2392 <= cbSceneParam._m0[64u].z)) && (_2393 <= cbSceneParam._m0[64u].w))
        {
            float _2531 = fma(_2187, cbSceneParam._m0[62u].w, fma(_2183, cbSceneParam._m0[62u].z, fma(_2179, cbSceneParam._m0[62u].y, _2175 * cbSceneParam._m0[62u].x))) / _2391;
            float _2535 = isnan(cbSceneParam._m0[41u].w) ? _2531 : (isnan(_2531) ? cbSceneParam._m0[41u].w : max(_2531, cbSceneParam._m0[41u].w));
            float _2578 = (cbSceneParam._m0[33u].x - sqrt(((_2189 * _2189) + (_2188 * _2188)) + (_2190 * _2190))) * cbSceneParam._m0[33u].y;
            float _4794 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
            float _2585 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2392, cbSceneParam._m0[33u].w + _2393), _2535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2392, _2393 - cbSceneParam._m0[33u].z), _2535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2392 - cbSceneParam._m0[33u].z, _2393 - cbSceneParam._m0[33u].w), _2535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2392 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2393), _2535), 0.0)).x), vec4(0.25)));
            float _2589 = 1.0 - (_2585 * cbSceneParam._m0[34u].x);
            float _2590 = 1.0 - (_2585 * cbSceneParam._m0[34u].y);
            float _2591 = 1.0 - (_2585 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2591) ? _2339 : (isnan(_2339) ? _2591 : min(_2339, _2591));
            frontier_phi_37_36_ladder_1 = isnan(_2590) ? _2338 : (isnan(_2338) ? _2590 : min(_2338, _2590));
            frontier_phi_37_36_ladder_2 = isnan(_2589) ? _2337 : (isnan(_2337) ? _2589 : min(_2337, _2589));
        }
        else
        {
            frontier_phi_37_36_ladder = _2339;
            frontier_phi_37_36_ladder_1 = _2338;
            frontier_phi_37_36_ladder_2 = _2337;
        }
        _2403 = frontier_phi_37_36_ladder_2;
        _2405 = frontier_phi_37_36_ladder_1;
        _2407 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2403 = _2337;
        _2405 = _2338;
        _2407 = _2339;
    }
    uvec4 _2412 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2414 = _2412.x * 14u;
    uint _2415 = _2414 + 13u;
    float _2422 = _1081 + (-1.0);
    float _2427 = (cbLight._m0[_2415].x * _2422) + 1.0;
    float _2428 = (cbLight._m0[_2415].y * _2422) + 1.0;
    float _2429 = (cbLight._m0[_2415].z * _2422) + 1.0;
    float _2430 = (cbLight._m0[_2415].w * _2422) + 1.0;
    uint _2431 = _2414 + 5u;
    float _2437 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
    uint _2441 = _2414 + 4u;
    float _2450 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
    uint _2454 = _2414 | 1u;
    float _2465 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_904, _905, _906));
    float _2468 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_904, _905, _906));
    float _4830 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _4841 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2473 = (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * 0.3183098733425140380859375;
    float _2475 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * 0.3183098733425140380859375;
    float _2482 = ((cbLight._m0[_2431].x * _2437) * _2475) + (((cbLight._m0[_2441].x * _2403) * _2450) * _2473);
    float _2483 = ((_2437 * cbLight._m0[_2431].y) * _2475) + (((cbLight._m0[_2441].y * _2405) * _2450) * _2473);
    float _2484 = ((_2437 * cbLight._m0[_2431].z) * _2475) + (((cbLight._m0[_2441].z * _2407) * _2450) * _2473);
    uvec4 _2488 = floatBitsToUint(cbLight._m0[_2414 + 12u]);
    bool _2490 = _2488.x == 0u;
    float _2592;
    float _2594;
    float _2596;
    if (_2490)
    {
        _2592 = _2482;
        _2594 = _2483;
        _2596 = _2484;
    }
    else
    {
        uint _2600 = _2414 + 6u;
        float _2616 = (dot(vec3(cbLight._m0[_2414 + 2u].xyz), vec3(_904, _905, _906)) * 0.5) + 0.5;
        float _2617 = _2616 * _2616;
        float _4852 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2618 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2619 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2592 = (((cbLight._m0[_2600].x * 0.3183098733425140380859375) * _2618) * _2619) + _2482;
        _2594 = (((cbLight._m0[_2600].y * 0.3183098733425140380859375) * _2618) * _2619) + _2483;
        _2596 = (((cbLight._m0[_2600].z * 0.3183098733425140380859375) * _2618) * _2619) + _2484;
    }
    bool _2599 = _2488.y == 0u;
    float _2654;
    float _2656;
    float _2658;
    if (_2599)
    {
        _2654 = _2592;
        _2656 = _2594;
        _2658 = _2596;
    }
    else
    {
        uint _2827 = _2414 + 7u;
        float _2843 = (dot(vec3(cbLight._m0[_2414 + 3u].xyz), vec3(_904, _905, _906)) * 0.5) + 0.5;
        float _2844 = _2843 * _2843;
        float _4868 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2845 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
        float _2846 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2654 = (((cbLight._m0[_2827].x * 0.3183098733425140380859375) * _2845) * _2846) + _2592;
        _2656 = (((cbLight._m0[_2827].y * 0.3183098733425140380859375) * _2845) * _2846) + _2594;
        _2658 = (((cbLight._m0[_2827].z * 0.3183098733425140380859375) * _2845) * _2846) + _2596;
    }
    uint _2661 = _2414 + 8u;
    float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2414].w)) * _907) * 0.949999988079071044921875);
    float _2675 = _2674 * _2674;
    float _2676 = cbLight._m0[_2414].x + _983;
    float _2677 = cbLight._m0[_2414].y + _984;
    float _2678 = cbLight._m0[_2414].z + _985;
    float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
    float _2683 = _2682 * _2676;
    float _2684 = _2682 * _2677;
    float _2685 = _2682 * _2678;
    float _2686 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2414].xyz));
    float _4884 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
    float _4895 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _2690 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
    float _2691 = dot(vec3(_904, _905, _906), vec3(_2683, _2684, _2685));
    float _4906 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2694 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
    float _2695 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_2683, _2684, _2685));
    float _4917 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2699 = _2675 * _2675;
    float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
    float _2711 = exp2(log2(1.0 - (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) * 5.0);
    float _2712 = 0.959999978542327880859375 - _1062;
    float _2714 = 0.959999978542327880859375 - _1063;
    float _2715 = 0.959999978542327880859375 - _1064;
    float _2722 = 1.0 - _2675;
    float _2733 = (0.5 / (((_2690 * ((_2689 * _2722) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _2722) + _2675) * _2689))) * _2689;
    float _4928 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2735 = (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
    uint _2749 = _2414 + 9u;
    float _2760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2454].w)) * _907) * 0.949999988079071044921875);
    float _2761 = _2760 * _2760;
    float _2762 = cbLight._m0[_2454].x + _983;
    float _2763 = cbLight._m0[_2454].y + _984;
    float _2764 = cbLight._m0[_2454].z + _985;
    float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
    float _2769 = _2768 * _2762;
    float _2770 = _2768 * _2763;
    float _2771 = _2768 * _2764;
    float _2772 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2454].xyz));
    float _4939 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
    float _2775 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
    float _2776 = dot(vec3(_904, _905, _906), vec3(_2769, _2770, _2771));
    float _4950 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2779 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
    float _2780 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_2769, _2770, _2771));
    float _4961 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2784 = _2761 * _2761;
    float _2788 = ((_2779 * _2779) * (_2784 + (-1.0))) + 1.0;
    float _2795 = exp2(log2(1.0 - (isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0)))) * 5.0);
    float _2802 = 1.0 - _2761;
    float _2812 = (0.5 / (((_2690 * ((_2775 * _2802) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _2802) + _2761) * _2775))) * _2775;
    float _4972 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
    float _2814 = (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_2784 / ((_2788 * _2788) * 3.141590118408203125));
    float _2824 = (((((_2795 * _2712) + _1065) * cbLight._m0[_2749].x) * _2814) * _2437) + ((((cbLight._m0[_2661].x * _2403) * ((_2711 * _2712) + _1065)) * _2735) * _2450);
    float _2825 = (((((_2795 * _2714) + _1067) * cbLight._m0[_2749].y) * _2814) * _2437) + ((((cbLight._m0[_2661].y * _2405) * ((_2711 * _2714) + _1067)) * _2735) * _2450);
    float _2826 = (((((_2795 * _2715) + _1068) * cbLight._m0[_2749].z) * _2814) * _2437) + ((((cbLight._m0[_2661].z * _2407) * ((_2711 * _2715) + _1068)) * _2735) * _2450);
    float _2882;
    float _2884;
    float _2886;
    if (_2490)
    {
        _2882 = _2824;
        _2884 = _2825;
        _2886 = _2826;
    }
    else
    {
        uint _2888 = _2414 + 2u;
        uint _2892 = _2414 + 10u;
        float _2906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2888].w)) * _907) * 0.949999988079071044921875);
        float _2907 = _2906 * _2906;
        float _2908 = cbLight._m0[_2888].x + _983;
        float _2909 = cbLight._m0[_2888].y + _984;
        float _2910 = cbLight._m0[_2888].z + _985;
        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
        float _2915 = _2914 * _2908;
        float _2916 = _2914 * _2909;
        float _2917 = _2914 * _2910;
        float _2918 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2888].xyz));
        float _4983 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
        float _2922 = dot(vec3(_904, _905, _906), vec3(_2915, _2916, _2917));
        float _4994 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
        float _2926 = dot(vec3(cbLight._m0[_2888].xyz), vec3(_2915, _2916, _2917));
        float _5005 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2930 = _2907 * _2907;
        float _2934 = ((_2925 * _2925) * (_2930 + (-1.0))) + 1.0;
        float _2941 = exp2(log2(1.0 - (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0)))) * 5.0);
        float _2948 = 1.0 - _2907;
        float _2958 = (0.5 / (((_2690 * ((_2921 * _2948) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _2948) + _2907) * _2921))) * _2921;
        float _5016 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2960 = (isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0))) * (_2930 / ((_2934 * _2934) * 3.141590118408203125));
        float _2961 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2882 = (((((_2941 * _2712) + _1065) * cbLight._m0[_2892].x) * _2960) * _2961) + _2824;
        _2884 = (((((_2941 * _2714) + _1067) * cbLight._m0[_2892].y) * _2960) * _2961) + _2825;
        _2886 = (((((_2941 * _2715) + _1068) * cbLight._m0[_2892].z) * _2960) * _2961) + _2826;
    }
    float _2992;
    float _2994;
    float _2996;
    if (_2599)
    {
        _2992 = _2882;
        _2994 = _2884;
        _2996 = _2886;
    }
    else
    {
        uint _3003 = _2414 + 3u;
        uint _3007 = _2414 + 11u;
        float _3021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3003].w)) * _907) * 0.949999988079071044921875);
        float _3022 = _3021 * _3021;
        float _3023 = cbLight._m0[_3003].x + _983;
        float _3024 = cbLight._m0[_3003].y + _984;
        float _3025 = cbLight._m0[_3003].z + _985;
        float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
        float _3030 = _3029 * _3023;
        float _3031 = _3029 * _3024;
        float _3032 = _3029 * _3025;
        float _3033 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_3003].xyz));
        float _5032 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3036 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
        float _3037 = dot(vec3(_904, _905, _906), vec3(_3030, _3031, _3032));
        float _5043 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        float _3040 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
        float _3041 = dot(vec3(cbLight._m0[_3003].xyz), vec3(_3030, _3031, _3032));
        float _5054 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
        float _3045 = _3022 * _3022;
        float _3049 = ((_3040 * _3040) * (_3045 + (-1.0))) + 1.0;
        float _3056 = exp2(log2(1.0 - (isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0)))) * 5.0);
        float _3063 = 1.0 - _3022;
        float _3073 = (0.5 / (((_2690 * ((_3036 * _3063) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _3063) + _3022) * _3036))) * _3036;
        float _5065 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
        float _3075 = (isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0))) * (_3045 / ((_3049 * _3049) * 3.141590118408203125));
        float _3076 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2992 = (((((_3056 * _2712) + _1065) * cbLight._m0[_3007].x) * _3075) * _3076) + _2882;
        _2994 = (((((_3056 * _2714) + _1067) * cbLight._m0[_3007].y) * _3075) * _3076) + _2884;
        _2996 = (((((_3056 * _2715) + _1068) * cbLight._m0[_3007].z) * _3075) * _3076) + _2886;
    }
    float _3142;
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    float _3152;
    if (_2412.y == 0u)
    {
        uvec4 _3097 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3098 = _3097.x;
        uint _3109 = uint((float(_3097.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1004) / _3098))) + floor(float(uint(cbSceneParam._m0[85u].x * _1003) / _3098)));
        float _3119 = (log2(_2190 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3120 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
        uint _3123 = uint(isnan(14.0) ? _3120 : (isnan(_3120) ? 14.0 : min(_3120, 14.0)));
        uvec4 _3128 = texelFetch(g_lightClusterGridBuffer, int(((_3123 << 2u) + (_3109 << 6u)) >> 2u));
        uint _3129 = _3128.x;
        uint _3130 = _3097.z;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        if (((((1u << ((_3130 >> 4u) & 15u)) + 4294967295u) & _3129) == 0u) || ((_3130 & 240u) == 0u))
        {
            _3209 = 0.0;
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
            _3217 = 0.0;
            _3219 = 0.0;
        }
        else
        {
            float _3210;
            float _3212;
            float _3214;
            float _3216;
            float _3218;
            float _3220;
            float _3361 = 0.0;
            float _3362 = 0.0;
            float _3363 = 0.0;
            float _3364 = 0.0;
            float _3365 = 0.0;
            float _3366 = 0.0;
            uint _3367 = 0u;
            uint _3376;
            bool _3377;
            for (;;)
            {
                _3376 = texelFetch(g_lightClassification, int((((_3123 << 5u) + (_3109 << 9u)) + (_3367 << 2u)) >> 2u)).x;
                _3377 = _3376 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3377)
                {
                    frontier_phi_71_pred = _3366;
                    frontier_phi_71_pred_1 = _3365;
                    frontier_phi_71_pred_2 = _3364;
                    frontier_phi_71_pred_3 = _3363;
                    frontier_phi_71_pred_4 = _3362;
                    frontier_phi_71_pred_5 = _3361;
                }
                else
                {
                    float _3506;
                    float _3507;
                    float _3508;
                    float _3509;
                    float _3510;
                    float _3511;
                    uint _3512;
                    _3506 = _3361;
                    _3507 = _3362;
                    _3508 = _3363;
                    _3509 = _3364;
                    _3510 = _3365;
                    _3511 = _3366;
                    _3512 = _3376;
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    for (;;)
                    {
                        uint _3516 = uint(findLSB(_3512)) + (_3367 << 5u);
                        uint _3513 = (_3512 + 4294967295u) & _3512;
                        uint _3518 = _3516 * 48u;
                        vec4 _3532 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3518)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 3u)).x));
                        uint _3538 = (_3516 * 48u) + 4u;
                        vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3538)).x, texelFetch(g_PointLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3538 + 3u)).x));
                        uint _3557 = (_3516 * 48u) + 8u;
                        vec3 _3568 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3557)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 2u)).x));
                        float _3572 = _3532.x - _2188;
                        float _3573 = _3532.y - _2189;
                        float _3574 = _3532.z - _2190;
                        float _3575 = dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574));
                        float _3578 = inversesqrt(_3575);
                        float _3579 = _3578 * _3572;
                        float _3580 = _3578 * _3573;
                        float _3581 = _3578 * _3574;
                        float _3582 = dot(vec3(_1022, _1025, _1028), vec3(_3579, _3580, _3581));
                        float _3587 = 1.0 - (_3575 * _3532.w);
                        float _5091 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3588 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
                        float _3589 = sqrt(_3575) * _3551.w;
                        float _3592 = 1.39999997615814208984375 / (_3589 + 1.39999997615814208984375);
                        float _3593 = _3592 * _3592;
                        float _3596 = ((1.0 - _3593) * _3582) + _3593;
                        float _3599 = _3589 * _3589;
                        float _3603 = ((isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0))) * _3588) / ((_3599 * 0.699999988079071044921875) + 1.0);
                        float _3607 = (-0.0) - _2188;
                        float _3608 = (-0.0) - _2189;
                        float _3609 = (-0.0) - _2190;
                        float _3613 = inversesqrt(dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609)));
                        float _3614 = _3613 * _3607;
                        float _3615 = _3613 * _3608;
                        float _3616 = _3613 * _3609;
                        float _3623 = exp2(log2(1.0 / ((_3599 * 3.5) + 5.0)) * 0.25);
                        float _3624 = 1.0 - _1097;
                        float _3631 = sqrt(1.0 - ((1.0 - (_3624 * _3624)) * (1.0 - (_3623 * _3623))));
                        float _3632 = _3631 * _3631;
                        float _3633 = _3632 * _3632;
                        float _3634 = _3614 + _3579;
                        float _3635 = _3615 + _3580;
                        float _3636 = _3616 + _3581;
                        float _3640 = inversesqrt(dot(vec3(_3634, _3635, _3636), vec3(_3634, _3635, _3636)));
                        float _3644 = dot(vec3(_1022, _1025, _1028), vec3(_3614, _3615, _3616));
                        float _5107 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                        float _3647 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                        float _3648 = dot(vec3(_1022, _1025, _1028), vec3(_3640 * _3634, _3640 * _3635, _3640 * _3636));
                        float _5118 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                        float _3651 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
                        float _3655 = ((_3651 * _3651) * (_3633 + (-1.0))) + 1.0;
                        float _3656 = _3592 * _3632;
                        float _3657 = _3656 * _3656;
                        float _3660 = ((1.0 - _3657) * _3582) + _3657;
                        float _5129 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                        float _3661 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
                        float _3662 = 1.0 - _3632;
                        float _3672 = (0.5 / (((_3661 * ((_3647 * _3662) + _3632)) + 9.9999999392252902907785028219223e-09) + (((_3661 * _3662) + _3632) * _3647))) * _3661;
                        float _5140 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                        float _3683 = (((_3633 * 3.1415927410125732421875) * (isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0)))) / ((_3655 * _3655) * ((_3599 * 2.1991131305694580078125) + 3.141590118408203125))) * _3588;
                        _3436 = (_3603 * _3551.x) + _3509;
                        _3437 = (_3603 * _3551.y) + _3510;
                        _3438 = (_3603 * _3551.z) + _3511;
                        _3433 = (_3683 * _3568.x) + _3506;
                        _3434 = (_3683 * _3568.y) + _3507;
                        _3435 = (_3683 * _3568.z) + _3508;
                        if (_3513 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3506 = _3433;
                            _3507 = _3434;
                            _3508 = _3435;
                            _3509 = _3436;
                            _3510 = _3437;
                            _3511 = _3438;
                            _3512 = _3513;
                        }
                    }
                    frontier_phi_71_pred = _3438;
                    frontier_phi_71_pred_1 = _3437;
                    frontier_phi_71_pred_2 = _3436;
                    frontier_phi_71_pred_3 = _3435;
                    frontier_phi_71_pred_4 = _3434;
                    frontier_phi_71_pred_5 = _3433;
                }
                _3220 = frontier_phi_71_pred;
                _3218 = frontier_phi_71_pred_1;
                _3216 = frontier_phi_71_pred_2;
                _3214 = frontier_phi_71_pred_3;
                _3212 = frontier_phi_71_pred_4;
                _3210 = frontier_phi_71_pred_5;
                uint _3368 = _3367 + 1u;
                if (_3368 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3361 = _3210;
                    _3362 = _3212;
                    _3363 = _3214;
                    _3364 = _3216;
                    _3365 = _3218;
                    _3366 = _3220;
                    _3367 = _3368;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3209 = _3210;
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
            _3217 = _3218;
            _3219 = _3220;
        }
        uvec4 _3223 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3224 = _3223.z;
        uint _3226 = (_3224 >> 8u) & 15u;
        float _3329;
        float _3331;
        float _3333;
        float _3335;
        float _3337;
        float _3339;
        if (((4294967295u << _3226) & _3129) == 0u)
        {
            _3329 = _3209;
            _3331 = _3211;
            _3333 = _3213;
            _3335 = _3215;
            _3337 = _3217;
            _3339 = _3219;
        }
        else
        {
            float _3354 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
            float _3355 = _3354 * _2188;
            float _3356 = _3354 * _2189;
            float _3357 = _3354 * _2190;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3226 < ((_3224 >> 12u) & 15u))
            {
                float _3330;
                float _3332;
                float _3334;
                float _3336;
                float _3338;
                float _3340;
                float _3489 = _3209;
                float _3490 = _3211;
                float _3491 = _3213;
                float _3492 = _3215;
                float _3493 = _3217;
                float _3494 = _3219;
                uint _3495 = _3226;
                uint _3504;
                bool _3505;
                for (;;)
                {
                    _3504 = texelFetch(g_lightClassification, int((((_3123 << 5u) + (_3109 << 9u)) + (_3495 << 2u)) >> 2u)).x;
                    _3505 = _3504 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3505)
                    {
                        frontier_phi_82_pred = _3494;
                        frontier_phi_82_pred_1 = _3493;
                        frontier_phi_82_pred_2 = _3492;
                        frontier_phi_82_pred_3 = _3491;
                        frontier_phi_82_pred_4 = _3490;
                        frontier_phi_82_pred_5 = _3489;
                    }
                    else
                    {
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3990;
                        float _3991;
                        float _3992;
                        float _3993;
                        float _3994;
                        float _3995;
                        float _3710 = _3489;
                        float _3711 = _3490;
                        float _3712 = _3491;
                        float _3713 = _3492;
                        float _3714 = _3493;
                        float _3715 = _3494;
                        uint _3716 = _3504;
                        uint _3717;
                        vec4 _3742;
                        float _3743;
                        vec4 _3758;
                        vec3 _3770;
                        vec4 _3785;
                        vec4 _3800;
                        float _3846;
                        bool _3847;
                        for (;;)
                        {
                            uint _3727 = ((_3495 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3716));
                            _3717 = (_3716 + 4294967295u) & _3716;
                            uint _3729 = _3727 * 40u;
                            _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            _3743 = _3742.w;
                            uint _3745 = (_3727 * 40u) + 4u;
                            _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            uint _3760 = (_3727 * 40u) + 8u;
                            _3770 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 2u)).x));
                            uint _3772 = (_3727 * 40u) + 16u;
                            _3785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 3u)).x));
                            uint _3787 = (_3727 * 40u) + 20u;
                            _3800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 3u)).x));
                            uint _3802 = (_3727 * 40u) + 24u;
                            vec4 _3815 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 3u)).x));
                            uint _3821 = (_3727 * 40u) + 28u;
                            vec4 _3834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 3u)).x));
                            _3846 = fma(_2190, _3834.z, fma(_2189, _3834.y, _3834.x * _2188)) + _3834.w;
                            _3847 = !((fma(_2190, _3815.z, fma(_2189, _3815.y, _3815.x * _2188)) + _3815.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3847)
                            {
                                float _3874 = _3742.x - _2188;
                                float _3875 = _3742.y - _2189;
                                float _3876 = _3742.z - _2190;
                                float _3877 = dot(vec3(_3874, _3875, _3876), vec3(_3874, _3875, _3876));
                                float _3880 = inversesqrt(_3877);
                                float _3881 = _3880 * _3874;
                                float _3882 = _3880 * _3875;
                                float _3883 = _3880 * _3876;
                                float _3887 = 1.0 - (_3877 / (_3743 * _3743));
                                float _5151 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3888 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
                                float _3892 = sqrt(_3877) * _3758.w;
                                float _3894 = 1.39999997615814208984375 / (_3892 + 1.39999997615814208984375);
                                float _3895 = _3894 * _3894;
                                float _3898 = ((1.0 - _3895) * dot(vec3(_3881, _3882, _3883), vec3(_1022, _1025, _1028))) + _3895;
                                float _3901 = _3892 * _3892;
                                float _3905 = (fma(_2190, _3785.z, fma(_2189, _3785.y, _3785.x * _2188)) + _3785.w) / _3846;
                                float _3906 = (fma(_2190, _3800.z, fma(_2189, _3800.y, _3800.x * _2188)) + _3800.w) / _3846;
                                float _3910 = 1.0 - dot(vec2(_3905, _3906), vec2(_3905, _3906));
                                float _5167 = isnan(0.0) ? _3910 : (isnan(_3910) ? 0.0 : max(_3910, 0.0));
                                float _3911 = isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0));
                                float _3912 = _3911 * (((isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0))) * _3888) / ((_3901 * 0.699999988079071044921875) + 1.0));
                                float _3924 = exp2(log2(1.0 / ((_3901 * 3.5) + 5.0)) * 0.25);
                                float _3925 = 1.0 - _1097;
                                float _3932 = sqrt(1.0 - ((1.0 - (_3925 * _3925)) * (1.0 - (_3924 * _3924))));
                                float _3933 = _3932 * _3932;
                                float _3934 = _3933 * _3933;
                                float _3935 = _3881 - _3355;
                                float _3936 = _3882 - _3356;
                                float _3937 = _3883 - _3357;
                                float _3941 = inversesqrt(dot(vec3(_3935, _3936, _3937), vec3(_3935, _3936, _3937)));
                                float _3945 = dot(vec3(_1022, _1025, _1028), vec3((-0.0) - _3355, (-0.0) - _3356, (-0.0) - _3357));
                                float _5178 = isnan(0.0) ? _3945 : (isnan(_3945) ? 0.0 : max(_3945, 0.0));
                                float _3948 = isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0));
                                float _3949 = dot(vec3(_1022, _1025, _1028), vec3(_3941 * _3935, _3941 * _3936, _3941 * _3937));
                                float _5189 = isnan(0.0) ? _3949 : (isnan(_3949) ? 0.0 : max(_3949, 0.0));
                                float _3952 = isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0));
                                float _3956 = ((_3952 * _3952) * (_3934 + (-1.0))) + 1.0;
                                float _3957 = _3894 * _3933;
                                float _3958 = _3957 * _3957;
                                float _3964 = ((1.0 - _3958) * dot(vec3(_1022, _1025, _1028), vec3(_3881, _3882, _3883))) + _3958;
                                float _5200 = isnan(0.0) ? _3964 : (isnan(_3964) ? 0.0 : max(_3964, 0.0));
                                float _3965 = isnan(1.0) ? _5200 : (isnan(_5200) ? 1.0 : min(_5200, 1.0));
                                float _3966 = 1.0 - _3933;
                                float _3976 = (0.5 / (((_3965 * ((_3948 * _3966) + _3933)) + 9.9999999392252902907785028219223e-09) + (((_3965 * _3966) + _3933) * _3948))) * _3965;
                                float _5211 = isnan(0.0) ? _3976 : (isnan(_3976) ? 0.0 : max(_3976, 0.0));
                                float _3986 = (_3911 * _3888) * (((_3934 * 3.1415927410125732421875) * (isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0)))) / ((_3956 * _3956) * ((_3901 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3912 * _3758.z;
                                frontier_phi_88_pred_1 = _3912 * _3758.y;
                                frontier_phi_88_pred_2 = _3912 * _3758.x;
                                frontier_phi_88_pred_3 = _3986 * _3770.z;
                                frontier_phi_88_pred_4 = _3986 * _3770.y;
                                frontier_phi_88_pred_5 = _3986 * _3770.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3995 = frontier_phi_88_pred;
                            _3994 = frontier_phi_88_pred_1;
                            _3993 = frontier_phi_88_pred_2;
                            _3992 = frontier_phi_88_pred_3;
                            _3991 = frontier_phi_88_pred_4;
                            _3990 = frontier_phi_88_pred_5;
                            _3700 = _3993 + _3713;
                            _3701 = _3994 + _3714;
                            _3702 = _3995 + _3715;
                            _3697 = _3990 + _3710;
                            _3698 = _3991 + _3711;
                            _3699 = _3992 + _3712;
                            if (_3717 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3710 = _3697;
                                _3711 = _3698;
                                _3712 = _3699;
                                _3713 = _3700;
                                _3714 = _3701;
                                _3715 = _3702;
                                _3716 = _3717;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3702;
                        frontier_phi_82_pred_1 = _3701;
                        frontier_phi_82_pred_2 = _3700;
                        frontier_phi_82_pred_3 = _3699;
                        frontier_phi_82_pred_4 = _3698;
                        frontier_phi_82_pred_5 = _3697;
                    }
                    _3340 = frontier_phi_82_pred;
                    _3338 = frontier_phi_82_pred_1;
                    _3336 = frontier_phi_82_pred_2;
                    _3334 = frontier_phi_82_pred_3;
                    _3332 = frontier_phi_82_pred_4;
                    _3330 = frontier_phi_82_pred_5;
                    uint _3496 = _3495 + 1u;
                    if (_3496 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3489 = _3330;
                        _3490 = _3332;
                        _3491 = _3334;
                        _3492 = _3336;
                        _3493 = _3338;
                        _3494 = _3340;
                        _3495 = _3496;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3336;
                frontier_phi_63_64_ladder_1 = _3340;
                frontier_phi_63_64_ladder_2 = _3338;
                frontier_phi_63_64_ladder_3 = _3334;
                frontier_phi_63_64_ladder_4 = _3332;
                frontier_phi_63_64_ladder_5 = _3330;
            }
            else
            {
                frontier_phi_63_64_ladder = _3215;
                frontier_phi_63_64_ladder_1 = _3219;
                frontier_phi_63_64_ladder_2 = _3217;
                frontier_phi_63_64_ladder_3 = _3213;
                frontier_phi_63_64_ladder_4 = _3211;
                frontier_phi_63_64_ladder_5 = _3209;
            }
            _3329 = frontier_phi_63_64_ladder_5;
            _3331 = frontier_phi_63_64_ladder_4;
            _3333 = frontier_phi_63_64_ladder_3;
            _3335 = frontier_phi_63_64_ladder;
            _3337 = frontier_phi_63_64_ladder_2;
            _3339 = frontier_phi_63_64_ladder_1;
        }
        float _3344 = isnan(1.0) ? _1081 : (isnan(_1081) ? 1.0 : min(_1081, 1.0));
        _3142 = (_3344 * _3335) + _2654;
        _3144 = (_3344 * _3337) + _2656;
        _3146 = (_3344 * _3339) + _2658;
        _3148 = ((_3329 * _1065) * _3344) + _2992;
        _3150 = ((_3331 * _1067) * _3344) + _2994;
        _3152 = ((_3333 * _1068) * _3344) + _2996;
    }
    else
    {
        _3142 = _2654;
        _3144 = _2656;
        _3146 = _2658;
        _3148 = _2992;
        _3150 = _2994;
        _3152 = _2996;
    }
    float _5227 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _5238 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _5249 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _3169 = ((isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0))) * (_3142 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1081))) + ((_3148 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1920)) * cbPerFrame._m0[3u].x);
    float _3170 = ((isnan(1.0) ? _5238 : (isnan(_5238) ? 1.0 : min(_5238, 1.0))) * (_3144 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1081))) + ((_3150 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1920)) * cbPerFrame._m0[3u].x);
    float _3171 = ((isnan(1.0) ? _5249 : (isnan(_5249) ? 1.0 : min(_5249, 1.0))) * (_3146 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1081))) + ((_3152 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1920)) * cbPerFrame._m0[3u].x);
    uint _3172 = _287 + 6u;
    float _3180 = _1003 / cbSceneParam._m0[86u].x;
    float _3181 = _1004 / cbSceneParam._m0[86u].y;
    vec4 _3195 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3180, _3181, (log2((isnan(cbSceneParam._m0[77u].w) ? _926 : (isnan(_926) ? cbSceneParam._m0[77u].w : min(_926, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3197 = _3195.x;
    float _3198 = _3195.y;
    float _3199 = _3195.z;
    float _3200 = _3195.w;
    float _3271;
    float _3273;
    float _3275;
    float _3277;
    if (_926 > cbSceneParam._m0[78u].w)
    {
        float _3234 = isnan(_926) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _926 : min(cbSceneParam._m0[80u].w, _926));
        float _3235 = _3234 / _926;
        float _3246 = _3235 * _976;
        float _3247 = _977 * _3235;
        float _3248 = (-0.0) - _3247;
        float _3249 = _3235 * _978;
        float _3251 = (cbSceneParam._m0[77u].w * _3248) / _3234;
        float _3252 = _3251 + cbSceneParam._m0[79u].w;
        float _3253 = cbSceneParam._m0[79u].w - _3247;
        float _3259 = sqrt(((_3246 * _3246) + (_3247 * _3247)) + (_3249 * _3249));
        float _3262 = (1.0 - (cbSceneParam._m0[77u].w / _3234)) * _3259;
        float _3267 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3269 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3446;
        if (abs((_3248 - _3251) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3446 = ((((_3252 > 0.0) ? exp2(_3267 * _3252) : (2.0 - exp2(_3269 * _3252))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3262;
        }
        else
        {
            float _3390 = 1.0 / cbSceneParam._m0[80u].x;
            float _3391 = isnan(_3253) ? _3252 : (isnan(_3252) ? _3253 : max(_3252, _3253));
            float _3392 = isnan(_3253) ? _3252 : (isnan(_3252) ? _3253 : min(_3252, _3253));
            float _3401 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : min(_3391, 0.0));
            float _3402 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : min(_3392, 0.0));
            _3446 = ((abs(_3259 / _3248) * cbSceneParam._m0[80u].y) * ((((_3401 - _3402) * 2.0) - ((exp2(_3267 * (isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0)))) - exp2(_3267 * (isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0))))) * _3390)) - ((exp2(_3269 * _3401) - exp2(_3269 * _3402)) * _3390))) + (_3262 * cbSceneParam._m0[80u].z);
        }
        vec4 _3448 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3180, _3181, 1.0), 0.0);
        float _3457 = exp2((_3446 * (-1.44269502162933349609375)) * (1.0 - _3448.w));
        float _3458 = log2(_3457);
        float _3474 = log2(_3200);
        _3271 = (exp2(_3474 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3458 * cbSceneParam._m0[78u].x)) * _3448.x) / cbSceneParam._m0[78u].x)) + _3197;
        _3273 = (exp2(_3474 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3458 * cbSceneParam._m0[78u].y)) * _3448.y) / cbSceneParam._m0[78u].y)) + _3198;
        _3275 = (exp2(_3474 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3458 * cbSceneParam._m0[78u].z)) * _3448.z) / cbSceneParam._m0[78u].z)) + _3199;
        _3277 = _3457 * _3200;
    }
    else
    {
        _3271 = _3197;
        _3273 = _3198;
        _3275 = _3199;
        _3277 = _3200;
    }
    bool _3484;
    vec4 _3287;
    vec4 _3309;
    float _3311;
    float _3315;
    float _3316;
    float _3317;
    float _3318;
    bool _3328;
    for (;;)
    {
        _3287 = cbMatDynParam._m0[0u];
        float _3289 = roundEven(_3287.y);
        bool _3290 = _3289 == 3.0;
        float _3291 = log2(_3277);
        float _3298 = exp2(_3291 * cbSceneParam._m0[78u].x) * _3169;
        float _3299 = exp2(_3291 * cbSceneParam._m0[78u].y) * _3170;
        float _3300 = exp2(_3291 * cbSceneParam._m0[78u].z) * _3171;
        float _3307 = _992 + (-0.5);
        _3309 = cbMtdParam._m0[1u];
        _3311 = _3309.y * _3307;
        float _3314 = (_3289 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3315 = _3314 * (_3290 ? _3298 : (_3298 + (cbSceneParam._m0[72u].w * _3271)));
        _3316 = _3314 * (_3290 ? _3299 : (_3299 + (cbSceneParam._m0[72u].w * _3273)));
        _3317 = _3314 * (_3290 ? _3300 : (_3300 + (cbSceneParam._m0[72u].w * _3275)));
        _3318 = _3307 * 0.999000012874603271484375;
        _3328 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3328)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3318) < 0.5)
            {
                _3484 = true;
                break;
            }
        }
        uint _3425 = _1041 + uint(_3287.w);
        if ((cbInstanceData._m0[_3425].w < 1.0) && ((cbInstanceData._m0[_3425].w + _3318) < 0.5))
        {
            _3484 = true;
            break;
        }
        if ((_3311 + 1.0) < _3309.x)
        {
            _3484 = true;
            break;
        }
        _3484 = false;
        break;
    }
    float _3688;
    if (_3484)
    {
        discard_state = true;
        _3688 = 0.0;
    }
    else
    {
        _3688 = cbInstanceData._m0[_3172].w;
    }
    SV_Target.x = _3315;
    SV_Target.y = _3316;
    SV_Target.z = _3317;
    SV_Target.w = _3688;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3172].w;
    discard_exit();
}


