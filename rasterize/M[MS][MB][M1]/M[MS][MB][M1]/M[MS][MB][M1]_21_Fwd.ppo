#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _996;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    uint _218 = uint(roundEven(NORMAL.w)) * 13u;
    uint _224 = _218 + 1u;
    uint _228 = _218 + 2u;
    float _237 = sqrt(((cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x) + (cbInstanceData._m0[_218].x * cbInstanceData._m0[_218].x)) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x));
    float _238 = _237 * TEXCOORD.z;
    float _239 = _237 * TEXCOORD.w;
    vec4 _258 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _264 = _258.x * cbMtdParam._m0[9u].x;
    float _265 = _258.y * cbMtdParam._m0[9u].y;
    float _266 = _258.z * cbMtdParam._m0[9u].z;
    vec4 _284 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _288 = _284.z;
    float _293 = (_284.x * 2.0) + (-1.0);
    float _295 = (_284.y * 2.0) + (-1.0);
    float _296 = dot(vec2(_293, _295), vec2(_293, _295));
    float _3326 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _302 = sqrt(1.0 - (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))));
    float _305 = fma(_302, _206, fma(_295, _213, _293 * _199));
    float _308 = fma(_302, _207, fma(_295, _214, _293 * _200));
    float _311 = fma(_302, _208, fma(_295, _215, _293 * _201));
    float _315 = inversesqrt(dot(vec3(_305, _308, _311), vec3(_305, _308, _311)));
    vec4 _351 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _238) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _239) + cbTextureTilingScale._m0[11u].w));
    float _353 = _351.x;
    float _354 = 1.0 - _353;
    float _363 = (cbMtdParam._m0[19u].x + dot(vec4(_315 * _305, _315 * _308, _315 * _311, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_353 - _354) * cbMtdParam._m0[24u].z) + _354) * cbMtdParam._m0[21u].z);
    float _3337 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _371 = (_364 * (cbMtdParam._m0[17u].x - _264)) + _264;
    float _372 = (_364 * (cbMtdParam._m0[17u].y - _265)) + _265;
    float _373 = (_364 * (cbMtdParam._m0[17u].z - _266)) + _266;
    vec4 _386 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _388 = _386.x;
    float _390 = _388 - (_388 * _364);
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _238) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _239) + cbTextureTilingScale._m0[15u].w));
    float _410 = (_403.x * 2.0) + (-1.0);
    float _411 = (_403.y * 2.0) + (-1.0);
    float _412 = dot(vec2(_410, _411), vec2(_410, _411));
    float _3348 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _420 = ((_403.z - _288) * _364) + _288;
    float _430 = ((sqrt(1.0 - (isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0)))) - _302) * _364) + _302;
    float _433 = (((_410 - _293) * _364) + _293) + (cbMtdParam._m0[21u].x * _293);
    float _434 = (((_411 - _295) * _364) + _295) + (cbMtdParam._m0[21u].x * _295);
    float _439 = cbMtdParam._m0[22u].x + _284.w;
    float _442 = fma(_430, _206, fma(_434, _213, _433 * _199));
    float _445 = fma(_430, _207, fma(_434, _214, _433 * _200));
    float _448 = fma(_430, _208, fma(_434, _215, _433 * _201));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    float _453 = _452 * _442;
    float _454 = _452 * _445;
    float _455 = _452 * _448;
    float _3359 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _456 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    float _3370 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3381 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3392 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3403 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3414 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _461 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _475 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _526 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _516);
    float _527 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _516);
    float _528 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _516);
    float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
    float _533 = _526 * _532;
    float _534 = _527 * _532;
    float _535 = _528 * _532;
    float _541 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _542 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _563 = fma(_455, cbSceneParam._m0[5u].z, fma(_454, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _453));
    float _566 = fma(_455, cbSceneParam._m0[6u].z, fma(_454, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _453));
    float _569 = fma(_455, cbSceneParam._m0[7u].z, fma(_454, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _453));
    uint _583 = (_218 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _589 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)))) * cbInstanceData._m0[_583].x;
    float _590 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0)))) * cbInstanceData._m0[_583].y;
    float _591 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0)))) * cbInstanceData._m0[_583].z;
    float _3425 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _3436 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _3447 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _595 = 1.0 - _461;
    float _596 = _592 * _595;
    float _597 = _593 * _595;
    float _598 = _594 * _595;
    float _603 = (_592 + (-0.039999999105930328369140625)) * _461;
    float _604 = (_593 + (-0.039999999105930328369140625)) * _461;
    float _605 = (_594 + (-0.039999999105930328369140625)) * _461;
    float _606 = _603 + 0.039999999105930328369140625;
    float _608 = _604 + 0.039999999105930328369140625;
    float _609 = _605 + 0.039999999105930328369140625;
    vec4 _618 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _541, cbSceneParam._m0[86u].y * _542));
    float _622 = ((isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * TEXCOORD_5.w) * _618.x;
    float _623 = dot(vec3(_453, _454, _455), vec3(_533, _534, _535));
    float _626 = _623 * 2.0;
    float _630 = (_626 * _453) - _533;
    float _631 = (_626 * _454) - _534;
    float _632 = (_626 * _455) - _535;
    float _636 = abs(dot(vec3(_533, _534, _535), vec3(_453, _454, _455)));
    float _3458 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _638 = sqrt(_456);
    float _651 = exp2((_638 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_638 * 3.0));
    float _657 = (1.0 - _651) * ((_638 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _658 = _651 * _638;
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _995;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _720 = fma(_694, cbModelParam._m0[26u].z, fma(_690, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _686));
        float _724 = fma(_694, cbModelParam._m0[27u].z, fma(_690, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _686));
        float _728 = fma(_694, cbModelParam._m0[28u].z, fma(_690, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _686));
        float _753 = _686 + _453;
        float _754 = _690 + _454;
        float _755 = _694 + _455;
        float _765 = fma(_755, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _753)) - _720;
        float _766 = fma(_755, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _753)) - _724;
        float _767 = fma(_755, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _753)) - _728;
        float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
        float _784 = ((_771 * _765) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_720 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _785 = ((_771 * _766) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_724 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _786 = ((_771 * _767) / cbModelParam._m0[34u].z) + ((((((_728 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        float _823 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_789.x + (-0.5));
        float _825 = _823 * (_789.y + (-0.5));
        float _826 = _823 * (_789.z + (-0.5));
        float _833 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_796.x + (-0.5));
        float _835 = _833 * (_796.y + (-0.5));
        float _836 = _833 * (_796.z + (-0.5));
        float _843 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_803.x + (-0.5));
        float _845 = _843 * (_803.y + (-0.5));
        float _846 = _843 * (_803.z + (-0.5));
        float _853 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_810.x + (-0.5));
        float _855 = _853 * (_810.y + (-0.5));
        float _856 = _853 * (_810.z + (-0.5));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = _824 * 0.5;
        float _861 = _834 * 0.5;
        float _862 = _844 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _877 = (dot(vec3(_453, _454, _455), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _887 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3506 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_889 + 1.0))) + _894) * _857;
        float _904 = _825 * 0.5;
        float _905 = _835 * 0.5;
        float _906 = _845 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_453, _454, _455), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3539 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_931 + 1.0))) + _936) * _858;
        float _946 = _826 * 0.5;
        float _947 = _836 * 0.5;
        float _948 = _846 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_453, _454, _455), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3572 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_973 + 1.0))) + _978) * _859;
        _995 = _826;
        _997 = _825;
        _998 = _824;
        _999 = _836;
        _1000 = _835;
        _1001 = _834;
        _1002 = _846;
        _1003 = _845;
        _1004 = _844;
        _1005 = _859;
        _1006 = _858;
        _1007 = _857;
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
    }
    else
    {
        _995 = _996;
        _997 = _996;
        _998 = _996;
        _999 = _996;
        _1000 = _996;
        _1001 = _996;
        _1002 = _996;
        _1003 = _996;
        _1004 = _996;
        _1005 = _996;
        _1006 = _996;
        _1007 = _996;
        _1008 = 0.0;
        _1009 = 0.0;
        _1010 = 0.0;
    }
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1035 = fma(_694, cbModelParam._m0[30u].z, fma(_690, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _686));
        float _1039 = fma(_694, cbModelParam._m0[31u].z, fma(_690, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _686));
        float _1043 = fma(_694, cbModelParam._m0[32u].z, fma(_690, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _686));
        float _1066 = _686 + _453;
        float _1067 = _690 + _454;
        float _1068 = _694 + _455;
        float _1078 = fma(_1068, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066)) - _1035;
        float _1079 = fma(_1068, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066)) - _1039;
        float _1080 = fma(_1068, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066)) - _1043;
        float _1084 = inversesqrt(dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080)));
        float _1097 = ((_1084 * _1078) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1035 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1084 * _1079) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1039 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1084 * _1080) / cbModelParam._m0[35u].z) + ((((((_1043 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        float _1134 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1101.x + (-0.5));
        float _1136 = _1134 * (_1101.y + (-0.5));
        float _1137 = _1134 * (_1101.z + (-0.5));
        float _1144 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1108.x + (-0.5));
        float _1146 = _1144 * (_1108.y + (-0.5));
        float _1147 = _1144 * (_1108.z + (-0.5));
        float _1154 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1115.x + (-0.5));
        float _1156 = _1154 * (_1115.y + (-0.5));
        float _1157 = _1154 * (_1115.z + (-0.5));
        float _1164 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1122.x + (-0.5));
        float _1166 = _1164 * (_1122.y + (-0.5));
        float _1167 = _1164 * (_1122.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_453, _454, _455), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3635 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1198 + 1.0))) + _1203) * _1168;
        float _1213 = _1136 * 0.5;
        float _1214 = _1146 * 0.5;
        float _1215 = _1156 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_453, _454, _455), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3668 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1240 + 1.0))) + _1245) * _1169;
        float _1255 = _1137 * 0.5;
        float _1256 = _1147 * 0.5;
        float _1257 = _1157 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_453, _454, _455), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3701 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1282 + 1.0))) + _1287) * _1170;
        _1304 = _1137;
        _1305 = _1136;
        _1306 = _1135;
        _1307 = _1147;
        _1308 = _1146;
        _1309 = _1145;
        _1310 = _1157;
        _1311 = _1156;
        _1312 = _1155;
        _1313 = _1170;
        _1314 = _1169;
        _1315 = _1168;
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
    }
    else
    {
        _1304 = _996;
        _1305 = _996;
        _1306 = _996;
        _1307 = _996;
        _1308 = _996;
        _1309 = _996;
        _1310 = _996;
        _1311 = _996;
        _1312 = _996;
        _1313 = _996;
        _1314 = _996;
        _1315 = _996;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1008)) + _1008;
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1009)) + _1009;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1010)) + _1010;
    float _1351 = fma(_1330, cbSceneParam._m0[89u].z, fma(_1329, cbSceneParam._m0[89u].y, _1328 * cbSceneParam._m0[89u].x));
    float _1354 = fma(_1330, cbSceneParam._m0[90u].z, fma(_1329, cbSceneParam._m0[90u].y, _1328 * cbSceneParam._m0[90u].x));
    float _1357 = fma(_1330, cbSceneParam._m0[91u].z, fma(_1329, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1328));
    float _1372 = _630 * 0.5;
    float _1373 = _631 * 0.5;
    float _1374 = _632 * 0.5;
    float _1375 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1378 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1381 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1415;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1388 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_995, _999, _1002, _1005));
        float _1392 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1396 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_998, _1001, _1004, _1007));
        float _1403 = dot(vec4(cbModelParam._m0[39u]), vec4(_1372, _1373, _1374, 1.0));
        _1415 = dot(vec3(isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1403) ? 0.0 : (isnan(0.0) ? _1403 : max(0.0, _1403))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1415 = 1.0;
    }
    float _1426;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1417 = dot(vec4(cbModelParam._m0[40u]), vec4(_1372, _1373, _1374, 1.0));
        _1426 = dot(vec3(isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1417) ? 0.0 : (isnan(0.0) ? _1417 : max(0.0, _1417))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1426 = 1.0;
    }
    float _1430 = (_1426 * cbModelParam._m0[1u].x) + (_1415 * (1.0 - cbModelParam._m0[1u].x));
    float _1440 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _456);
    float _1441 = isnan(_1440) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1440 : min(cbModelParam._m0[25u].z, _1440));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1489 = fma(_694, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686)) + cbModelParam._m0[13u].w;
        float _1493 = fma(_694, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686)) + cbModelParam._m0[14u].w;
        float _1497 = fma(_694, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686)) + cbModelParam._m0[15u].w;
        float _1500 = fma(_632, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _630));
        float _1503 = fma(_632, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _630));
        float _1506 = fma(_632, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _630));
        float _1534;
        if (_1500 > 0.0)
        {
            _1534 = abs((1.0 - _1489) / _1500);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1489 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1534 = frontier_phi_14_12_ladder;
        }
        float _1738;
        if (_1503 > 0.0)
        {
            _1738 = abs((1.0 - _1493) / _1503);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1493 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1738 = frontier_phi_23_19_ladder;
        }
        float _1992;
        if (_1506 > 0.0)
        {
            _1992 = abs((1.0 - _1497) / _1506);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1497 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1992 = frontier_phi_35_30_ladder;
        }
        float _1994 = isnan(_1738) ? _1534 : (isnan(_1534) ? _1738 : min(_1534, _1738));
        float _1995 = isnan(_1992) ? _1994 : (isnan(_1994) ? _1992 : min(_1994, _1992));
        float _1999 = (_1995 * _1500) + _1489;
        float _2000 = (_1995 * _1503) + _1493;
        float _2001 = (_1995 * _1506) + _1497;
        float _2002 = _1995 * 9.9999997473787516355514526367188e-05;
        float _2004 = (-1.0) - _2002;
        float _2006 = _2002 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2001 > _2006) || ((_2001 < _2004) || ((_2000 > _2006) || ((_2000 < _2004) || ((_1999 < _2004) || (_1999 > _2006))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2129 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2001, cbModelParam._m0[9u].z, fma(_2000, cbModelParam._m0[9u].y, _1999 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2001, cbModelParam._m0[10u].z, fma(_2000, cbModelParam._m0[10u].y, _1999 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2001, cbModelParam._m0[11u].z, fma(_2000, cbModelParam._m0[11u].y, _1999 * cbModelParam._m0[11u].x))), _1441);
            frontier_phi_13_35_ladder = _2129.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2129.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2129.x * cbModelParam._m0[1u].y;
        }
        _1522 = frontier_phi_13_35_ladder_2;
        _1524 = frontier_phi_13_35_ladder_1;
        _1526 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_630, _631, _632), _1441);
        _1522 = _1510.x * cbModelParam._m0[1u].y;
        _1524 = _1510.y * cbModelParam._m0[1u].y;
        _1526 = _1510.z * cbModelParam._m0[1u].y;
    }
    float _1530 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _456);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1530 : min(cbModelParam._m0[25u].w, _1530));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1585 = fma(_694, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686)) + cbModelParam._m0[21u].w;
        float _1589 = fma(_694, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686)) + cbModelParam._m0[22u].w;
        float _1593 = fma(_694, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686)) + cbModelParam._m0[23u].w;
        float _1596 = fma(_632, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _630));
        float _1599 = fma(_632, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _630));
        float _1602 = fma(_632, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _630));
        float _1743;
        if (_1596 > 0.0)
        {
            _1743 = abs((1.0 - _1585) / _1596);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1585 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1743 = frontier_phi_25_21_ladder;
        }
        float _2019;
        if (_1599 > 0.0)
        {
            _2019 = abs((1.0 - _1589) / _1599);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1589 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2019 = frontier_phi_37_32_ladder;
        }
        float _2232;
        if (_1602 > 0.0)
        {
            _2232 = abs((1.0 - _1593) / _1602);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1593 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2232 = frontier_phi_46_43_ladder;
        }
        float _2234 = isnan(_2019) ? _1743 : (isnan(_1743) ? _2019 : min(_1743, _2019));
        float _2235 = isnan(_2232) ? _2234 : (isnan(_2234) ? _2232 : min(_2234, _2232));
        float _2239 = (_2235 * _1596) + _1585;
        float _2240 = (_2235 * _1599) + _1589;
        float _2241 = (_2235 * _1602) + _1593;
        float _2242 = _2235 * 9.9999997473787516355514526367188e-05;
        float _2243 = (-1.0) - _2242;
        float _2245 = _2242 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2241 > _2245) || ((_2241 < _2243) || ((_2240 > _2245) || ((_2240 < _2243) || ((_2239 < _2243) || (_2239 > _2245))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2440 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2241, cbModelParam._m0[17u].z, fma(_2240, cbModelParam._m0[17u].y, _2239 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2241, cbModelParam._m0[18u].z, fma(_2240, cbModelParam._m0[18u].y, _2239 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2241, cbModelParam._m0[19u].z, fma(_2240, cbModelParam._m0[19u].y, _2239 * cbModelParam._m0[19u].x))), _1531);
            frontier_phi_22_46_ladder = _2440.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2440.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2440.x * cbModelParam._m0[1u].z;
        }
        _1621 = frontier_phi_22_46_ladder_2;
        _1623 = frontier_phi_22_46_ladder_1;
        _1625 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1605 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_630, _631, _632), _1531);
        _1621 = _1605.x * cbModelParam._m0[1u].z;
        _1623 = _1605.y * cbModelParam._m0[1u].z;
        _1625 = _1605.z * cbModelParam._m0[1u].z;
    }
    float _1638 = (((_657 * _606) + _658) * _622) * ((cbModelParam._m0[1u].w * (_1621 - _1522)) + _1522);
    float _1640 = (((_657 * _608) + _658) * _622) * ((cbModelParam._m0[1u].w * (_1623 - _1524)) + _1524);
    float _1642 = (((_657 * _609) + _658) * _622) * ((cbModelParam._m0[1u].w * (_1625 - _1526)) + _1526);
    float _1645 = fma(_1642, cbSceneParam._m0[89u].z, fma(_1640, cbSceneParam._m0[89u].y, _1638 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1642, cbSceneParam._m0[90u].z, fma(_1640, cbSceneParam._m0[90u].y, _1638 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1642, cbSceneParam._m0[91u].z, fma(_1640, cbSceneParam._m0[91u].y, _1638 * cbSceneParam._m0[91u].x));
    uvec4 _1661 = floatBitsToUint(cbInstanceData._m0[_218 + 5u]);
    uint _1663 = _1661.x * 14u;
    uint _1664 = _1663 + 13u;
    float _1671 = _622 + (-1.0);
    float _1676 = (cbLight._m0[_1664].x * _1671) + 1.0;
    float _1677 = (cbLight._m0[_1664].y * _1671) + 1.0;
    float _1678 = (cbLight._m0[_1664].z * _1671) + 1.0;
    float _1679 = (cbLight._m0[_1664].w * _1671) + 1.0;
    uint _1680 = _1663 + 5u;
    float _1686 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1690 = _1663 + 4u;
    float _1697 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1701 = _1663 | 1u;
    float _1712 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_453, _454, _455));
    float _1715 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_453, _454, _455));
    float _3837 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _3848 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1720 = (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * 0.3183098733425140380859375;
    float _1722 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * 0.3183098733425140380859375;
    float _1729 = ((cbLight._m0[_1680].x * _1686) * _1722) + ((cbLight._m0[_1690].x * _1697) * _1720);
    float _1730 = ((_1686 * cbLight._m0[_1680].y) * _1722) + ((_1697 * cbLight._m0[_1690].y) * _1720);
    float _1731 = ((_1686 * cbLight._m0[_1680].z) * _1722) + ((_1697 * cbLight._m0[_1690].z) * _1720);
    uvec4 _1735 = floatBitsToUint(cbLight._m0[_1663 + 12u]);
    bool _1737 = _1735.x == 0u;
    float _1748;
    float _1750;
    float _1752;
    if (_1737)
    {
        _1748 = _1729;
        _1750 = _1730;
        _1752 = _1731;
    }
    else
    {
        uint _1756 = _1663 + 6u;
        float _1772 = (dot(vec3(cbLight._m0[_1663 + 2u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _1773 = _1772 * _1772;
        float _3859 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1775 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1748 = (((cbLight._m0[_1756].x * 0.3183098733425140380859375) * _1774) * _1775) + _1729;
        _1750 = (((cbLight._m0[_1756].y * 0.3183098733425140380859375) * _1774) * _1775) + _1730;
        _1752 = (((cbLight._m0[_1756].z * 0.3183098733425140380859375) * _1774) * _1775) + _1731;
    }
    bool _1755 = _1735.y == 0u;
    float _1793;
    float _1795;
    float _1797;
    if (_1755)
    {
        _1793 = _1748;
        _1795 = _1750;
        _1797 = _1752;
    }
    else
    {
        uint _1963 = _1663 + 7u;
        float _1979 = (dot(vec3(cbLight._m0[_1663 + 3u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _1980 = _1979 * _1979;
        float _3875 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1981 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1982 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _1793 = (((cbLight._m0[_1963].x * 0.3183098733425140380859375) * _1981) * _1982) + _1748;
        _1795 = (((cbLight._m0[_1963].y * 0.3183098733425140380859375) * _1981) * _1982) + _1750;
        _1797 = (((cbLight._m0[_1963].z * 0.3183098733425140380859375) * _1981) * _1982) + _1752;
    }
    uint _1800 = _1663 + 8u;
    float _1813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1663].w)) * _456) * 0.949999988079071044921875);
    float _1814 = _1813 * _1813;
    float _1815 = cbLight._m0[_1663].x + _533;
    float _1816 = cbLight._m0[_1663].y + _534;
    float _1817 = cbLight._m0[_1663].z + _535;
    float _1821 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
    float _1822 = _1821 * _1815;
    float _1823 = _1821 * _1816;
    float _1824 = _1821 * _1817;
    float _1825 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1663].xyz));
    float _3891 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _1829 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _1830 = dot(vec3(_453, _454, _455), vec3(_1822, _1823, _1824));
    float _3913 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_1822, _1823, _1824));
    float _3924 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1838 = _1814 * _1814;
    float _1842 = ((_1833 * _1833) * (_1838 + (-1.0))) + 1.0;
    float _1850 = exp2(log2(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * 5.0);
    float _1851 = 0.959999978542327880859375 - _603;
    float _1853 = 0.959999978542327880859375 - _604;
    float _1854 = 0.959999978542327880859375 - _605;
    float _1861 = 1.0 - _1814;
    float _1872 = (0.5 / (((_1829 * ((_1828 * _1861) + _1814)) + 9.9999999392252902907785028219223e-09) + (((_1829 * _1861) + _1814) * _1828))) * _1828;
    float _3935 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1874 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1838 / ((_1842 * _1842) * 3.141590118408203125));
    uint _1885 = _1663 + 9u;
    float _1896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1701].w)) * _456) * 0.949999988079071044921875);
    float _1897 = _1896 * _1896;
    float _1898 = cbLight._m0[_1701].x + _533;
    float _1899 = cbLight._m0[_1701].y + _534;
    float _1900 = cbLight._m0[_1701].z + _535;
    float _1904 = inversesqrt(dot(vec3(_1898, _1899, _1900), vec3(_1898, _1899, _1900)));
    float _1905 = _1904 * _1898;
    float _1906 = _1904 * _1899;
    float _1907 = _1904 * _1900;
    float _1908 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1701].xyz));
    float _3946 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _1912 = dot(vec3(_453, _454, _455), vec3(_1905, _1906, _1907));
    float _3957 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _1916 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_1905, _1906, _1907));
    float _3968 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1920 = _1897 * _1897;
    float _1924 = ((_1915 * _1915) * (_1920 + (-1.0))) + 1.0;
    float _1931 = exp2(log2(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * 5.0);
    float _1938 = 1.0 - _1897;
    float _1948 = (0.5 / (((_1829 * ((_1911 * _1938) + _1897)) + 9.9999999392252902907785028219223e-09) + (((_1829 * _1938) + _1897) * _1911))) * _1911;
    float _3979 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1950 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1920 / ((_1924 * _1924) * 3.141590118408203125));
    float _1960 = (((((_1931 * _1851) + _606) * cbLight._m0[_1885].x) * _1950) * _1686) + (((((_1850 * _1851) + _606) * cbLight._m0[_1800].x) * _1874) * _1697);
    float _1961 = (((((_1931 * _1853) + _608) * cbLight._m0[_1885].y) * _1950) * _1686) + (((((_1850 * _1853) + _608) * cbLight._m0[_1800].y) * _1874) * _1697);
    float _1962 = (((((_1931 * _1854) + _609) * cbLight._m0[_1885].z) * _1950) * _1686) + (((((_1850 * _1854) + _609) * cbLight._m0[_1800].z) * _1874) * _1697);
    float _2024;
    float _2026;
    float _2028;
    if (_1737)
    {
        _2024 = _1960;
        _2026 = _1961;
        _2028 = _1962;
    }
    else
    {
        uint _2030 = _1663 + 2u;
        uint _2034 = _1663 + 10u;
        float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _456) * 0.949999988079071044921875);
        float _2049 = _2048 * _2048;
        float _2050 = cbLight._m0[_2030].x + _533;
        float _2051 = cbLight._m0[_2030].y + _534;
        float _2052 = cbLight._m0[_2030].z + _535;
        float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
        float _2057 = _2056 * _2050;
        float _2058 = _2056 * _2051;
        float _2059 = _2056 * _2052;
        float _2060 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2030].xyz));
        float _3990 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2063 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2064 = dot(vec3(_453, _454, _455), vec3(_2057, _2058, _2059));
        float _4001 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2067 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _2068 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2057, _2058, _2059));
        float _4012 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2072 = _2049 * _2049;
        float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
        float _2083 = exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0);
        float _2090 = 1.0 - _2049;
        float _2100 = (0.5 / (((_1829 * ((_2063 * _2090) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1829 * _2090) + _2049) * _2063))) * _2063;
        float _4023 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2102 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
        float _2103 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2024 = (((((_2083 * _1851) + _606) * cbLight._m0[_2034].x) * _2102) * _2103) + _1960;
        _2026 = (((((_2083 * _1853) + _608) * cbLight._m0[_2034].y) * _2102) * _2103) + _1961;
        _2028 = (((((_2083 * _1854) + _609) * cbLight._m0[_2034].z) * _2102) * _2103) + _1962;
    }
    float _2138;
    float _2140;
    float _2142;
    if (_1755)
    {
        _2138 = _2024;
        _2140 = _2026;
        _2142 = _2028;
    }
    else
    {
        uint _2149 = _1663 + 3u;
        uint _2153 = _1663 + 11u;
        float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _456) * 0.949999988079071044921875);
        float _2168 = _2167 * _2167;
        float _2169 = cbLight._m0[_2149].x + _533;
        float _2170 = cbLight._m0[_2149].y + _534;
        float _2171 = cbLight._m0[_2149].z + _535;
        float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
        float _2176 = _2175 * _2169;
        float _2177 = _2175 * _2170;
        float _2178 = _2175 * _2171;
        float _2179 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2149].xyz));
        float _4039 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2182 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _2183 = dot(vec3(_453, _454, _455), vec3(_2176, _2177, _2178));
        float _4050 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2187 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2176, _2177, _2178));
        float _4061 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2191 = _2168 * _2168;
        float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
        float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0);
        float _2209 = 1.0 - _2168;
        float _2219 = (0.5 / (((_1829 * ((_2182 * _2209) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_1829 * _2209) + _2168) * _2182))) * _2182;
        float _4072 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2221 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
        float _2222 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _2138 = (((((_2202 * _1851) + _606) * cbLight._m0[_2153].x) * _2221) * _2222) + _2024;
        _2140 = (((((_2202 * _1853) + _608) * cbLight._m0[_2153].y) * _2221) * _2222) + _2026;
        _2142 = (((((_2202 * _1854) + _609) * cbLight._m0[_2153].z) * _2221) * _2222) + _2028;
    }
    float _2357;
    float _2359;
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    if (_1661.y == 0u)
    {
        float _2297 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2298 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2297;
        float _2299 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2297;
        float _2300 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2297;
        uvec4 _2312 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2313 = _2312.x;
        uint _2324 = uint((float(_2312.y) * floor(float(uint(cbSceneParam._m0[85u].y * _542) / _2313))) + floor(float(uint(cbSceneParam._m0[85u].x * _541) / _2313)));
        float _2334 = (log2(_2300 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2335 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        uint _2338 = uint(isnan(14.0) ? _2335 : (isnan(_2335) ? 14.0 : min(_2335, 14.0)));
        uvec4 _2343 = texelFetch(g_lightClusterGridBuffer, int(((_2338 << 2u) + (_2324 << 6u)) >> 2u));
        uint _2344 = _2343.x;
        uint _2345 = _2312.z;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        if (((((1u << ((_2345 >> 4u) & 15u)) + 4294967295u) & _2344) == 0u) || ((_2345 & 240u) == 0u))
        {
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
        }
        else
        {
            float _2446;
            float _2448;
            float _2450;
            float _2452;
            float _2454;
            float _2456;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            uint _2596 = 0u;
            uint _2605;
            bool _2606;
            for (;;)
            {
                _2605 = texelFetch(g_lightClassification, int((((_2338 << 5u) + (_2324 << 9u)) + (_2596 << 2u)) >> 2u)).x;
                _2606 = _2605 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2606)
                {
                    frontier_phi_61_pred = _2590;
                    frontier_phi_61_pred_1 = _2595;
                    frontier_phi_61_pred_2 = _2594;
                    frontier_phi_61_pred_3 = _2593;
                    frontier_phi_61_pred_4 = _2592;
                    frontier_phi_61_pred_5 = _2591;
                }
                else
                {
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    uint _2720;
                    _2714 = _2590;
                    _2715 = _2591;
                    _2716 = _2592;
                    _2717 = _2593;
                    _2718 = _2594;
                    _2719 = _2595;
                    _2720 = _2605;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    for (;;)
                    {
                        uint _2724 = uint(findLSB(_2720)) + (_2596 << 5u);
                        uint _2721 = (_2720 + 4294967295u) & _2720;
                        uint _2726 = _2724 * 48u;
                        vec4 _2740 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 3u)).x));
                        uint _2746 = (_2724 * 48u) + 4u;
                        vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2746)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 3u)).x));
                        uint _2765 = (_2724 * 48u) + 8u;
                        vec3 _2776 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x));
                        float _2780 = _2740.x - _2298;
                        float _2781 = _2740.y - _2299;
                        float _2782 = _2740.z - _2300;
                        float _2783 = dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782));
                        float _2786 = inversesqrt(_2783);
                        float _2787 = _2786 * _2780;
                        float _2788 = _2786 * _2781;
                        float _2789 = _2786 * _2782;
                        float _2790 = dot(vec3(_563, _566, _569), vec3(_2787, _2788, _2789));
                        float _2795 = 1.0 - (_2783 * _2740.w);
                        float _4098 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2796 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                        float _2797 = sqrt(_2783) * _2759.w;
                        float _2800 = 1.39999997615814208984375 / (_2797 + 1.39999997615814208984375);
                        float _2801 = _2800 * _2800;
                        float _2804 = ((1.0 - _2801) * _2790) + _2801;
                        float _2807 = _2797 * _2797;
                        float _2811 = ((isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0))) * _2796) / ((_2807 * 0.699999988079071044921875) + 1.0);
                        float _2815 = (-0.0) - _2298;
                        float _2816 = (-0.0) - _2299;
                        float _2817 = (-0.0) - _2300;
                        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
                        float _2822 = _2821 * _2815;
                        float _2823 = _2821 * _2816;
                        float _2824 = _2821 * _2817;
                        float _2832 = exp2(log2(1.0 / ((_2807 * 3.5) + 5.0)) * 0.25);
                        float _2833 = 1.0 - _638;
                        float _2840 = sqrt(1.0 - ((1.0 - (_2833 * _2833)) * (1.0 - (_2832 * _2832))));
                        float _2841 = _2840 * _2840;
                        float _2842 = _2841 * _2841;
                        float _2843 = _2822 + _2787;
                        float _2844 = _2823 + _2788;
                        float _2845 = _2824 + _2789;
                        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
                        float _2853 = dot(vec3(_563, _566, _569), vec3(_2822, _2823, _2824));
                        float _4114 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2856 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2857 = dot(vec3(_563, _566, _569), vec3(_2849 * _2843, _2849 * _2844, _2849 * _2845));
                        float _4125 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2860 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                        float _2864 = ((_2860 * _2860) * (_2842 + (-1.0))) + 1.0;
                        float _2865 = _2800 * _2841;
                        float _2866 = _2865 * _2865;
                        float _2869 = ((1.0 - _2866) * _2790) + _2866;
                        float _4136 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2870 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2871 = 1.0 - _2841;
                        float _2881 = (0.5 / (((_2870 * ((_2856 * _2871) + _2841)) + 9.9999999392252902907785028219223e-09) + (((_2870 * _2871) + _2841) * _2856))) * _2870;
                        float _4147 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2892 = (((_2842 * 3.1415927410125732421875) * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) / ((_2864 * _2864) * ((_2807 * 2.1991131305694580078125) + 3.141590118408203125))) * _2796;
                        _2649 = (_2811 * _2759.x) + _2717;
                        _2650 = (_2811 * _2759.y) + _2718;
                        _2651 = (_2811 * _2759.z) + _2719;
                        _2646 = (_2892 * _2776.x) + _2714;
                        _2647 = (_2892 * _2776.y) + _2715;
                        _2648 = (_2892 * _2776.z) + _2716;
                        if (_2721 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2714 = _2646;
                            _2715 = _2647;
                            _2716 = _2648;
                            _2717 = _2649;
                            _2718 = _2650;
                            _2719 = _2651;
                            _2720 = _2721;
                        }
                    }
                    frontier_phi_61_pred = _2646;
                    frontier_phi_61_pred_1 = _2651;
                    frontier_phi_61_pred_2 = _2650;
                    frontier_phi_61_pred_3 = _2649;
                    frontier_phi_61_pred_4 = _2648;
                    frontier_phi_61_pred_5 = _2647;
                }
                _2446 = frontier_phi_61_pred;
                _2456 = frontier_phi_61_pred_1;
                _2454 = frontier_phi_61_pred_2;
                _2452 = frontier_phi_61_pred_3;
                _2450 = frontier_phi_61_pred_4;
                _2448 = frontier_phi_61_pred_5;
                uint _2597 = _2596 + 1u;
                if (_2597 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2590 = _2446;
                    _2591 = _2448;
                    _2592 = _2450;
                    _2593 = _2452;
                    _2594 = _2454;
                    _2595 = _2456;
                    _2596 = _2597;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
        }
        uvec4 _2459 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2460 = _2459.z;
        uint _2462 = (_2460 >> 8u) & 15u;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        if (((4294967295u << _2462) & _2344) == 0u)
        {
            _2558 = _2445;
            _2560 = _2447;
            _2562 = _2449;
            _2564 = _2451;
            _2566 = _2453;
            _2568 = _2455;
        }
        else
        {
            float _2583 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
            float _2584 = _2583 * _2298;
            float _2585 = _2583 * _2299;
            float _2586 = _2583 * _2300;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2462 < ((_2460 >> 12u) & 15u))
            {
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2697 = _2445;
                float _2698 = _2447;
                float _2699 = _2449;
                float _2700 = _2451;
                float _2701 = _2453;
                float _2702 = _2455;
                uint _2703 = _2462;
                uint _2712;
                bool _2713;
                for (;;)
                {
                    _2712 = texelFetch(g_lightClassification, int((((_2338 << 5u) + (_2324 << 9u)) + (_2703 << 2u)) >> 2u)).x;
                    _2713 = _2712 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2713)
                    {
                        frontier_phi_67_pred = _2700;
                        frontier_phi_67_pred_1 = _2701;
                        frontier_phi_67_pred_2 = _2702;
                        frontier_phi_67_pred_3 = _2699;
                        frontier_phi_67_pred_4 = _2698;
                        frontier_phi_67_pred_5 = _2697;
                    }
                    else
                    {
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _2910 = _2697;
                        float _2911 = _2698;
                        float _2912 = _2699;
                        float _2913 = _2700;
                        float _2914 = _2701;
                        float _2915 = _2702;
                        uint _2916 = _2712;
                        uint _2917;
                        vec4 _2942;
                        float _2943;
                        vec4 _2958;
                        vec3 _2970;
                        vec4 _2986;
                        vec4 _3002;
                        float _3048;
                        bool _3049;
                        for (;;)
                        {
                            uint _2927 = ((_2703 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2916));
                            _2917 = (_2916 + 4294967295u) & _2916;
                            uint _2929 = _2927 * 40u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            _2943 = _2942.w;
                            uint _2945 = (_2927 * 40u) + 4u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2960 = (_2927 * 40u) + 8u;
                            _2970 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x));
                            uint _2973 = (_2927 * 40u) + 16u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2989 = (_2927 * 40u) + 20u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3004 = (_2927 * 40u) + 24u;
                            vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            uint _3023 = (_2927 * 40u) + 28u;
                            vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            _3048 = fma(_2300, _3036.z, fma(_2299, _3036.y, _3036.x * _2298)) + _3036.w;
                            _3049 = !((fma(_2300, _3017.z, fma(_2299, _3017.y, _3017.x * _2298)) + _3017.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3049)
                            {
                                float _3076 = _2942.x - _2298;
                                float _3077 = _2942.y - _2299;
                                float _3078 = _2942.z - _2300;
                                float _3079 = dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078));
                                float _3082 = inversesqrt(_3079);
                                float _3083 = _3082 * _3076;
                                float _3084 = _3082 * _3077;
                                float _3085 = _3082 * _3078;
                                float _3089 = 1.0 - (_3079 / (_2943 * _2943));
                                float _4158 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3094 = sqrt(_3079) * _2958.w;
                                float _3096 = 1.39999997615814208984375 / (_3094 + 1.39999997615814208984375);
                                float _3097 = _3096 * _3096;
                                float _3100 = ((1.0 - _3097) * dot(vec3(_3083, _3084, _3085), vec3(_563, _566, _569))) + _3097;
                                float _3103 = _3094 * _3094;
                                float _3107 = (fma(_2300, _2986.z, fma(_2299, _2986.y, _2986.x * _2298)) + _2986.w) / _3048;
                                float _3108 = (fma(_2300, _3002.z, fma(_2299, _3002.y, _3002.x * _2298)) + _3002.w) / _3048;
                                float _3112 = 1.0 - dot(vec2(_3107, _3108), vec2(_3107, _3108));
                                float _4174 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3113 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3114 = _3113 * (((isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))) * _3090) / ((_3103 * 0.699999988079071044921875) + 1.0));
                                float _3126 = exp2(log2(1.0 / ((_3103 * 3.5) + 5.0)) * 0.25);
                                float _3127 = 1.0 - _638;
                                float _3134 = sqrt(1.0 - ((1.0 - (_3127 * _3127)) * (1.0 - (_3126 * _3126))));
                                float _3135 = _3134 * _3134;
                                float _3136 = _3135 * _3135;
                                float _3137 = _3083 - _2584;
                                float _3138 = _3084 - _2585;
                                float _3139 = _3085 - _2586;
                                float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                                float _3147 = dot(vec3(_563, _566, _569), vec3((-0.0) - _2584, (-0.0) - _2585, (-0.0) - _2586));
                                float _4185 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3150 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3151 = dot(vec3(_563, _566, _569), vec3(_3143 * _3137, _3143 * _3138, _3143 * _3139));
                                float _4196 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3154 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3158 = ((_3154 * _3154) * (_3136 + (-1.0))) + 1.0;
                                float _3159 = _3096 * _3135;
                                float _3160 = _3159 * _3159;
                                float _3166 = ((1.0 - _3160) * dot(vec3(_563, _566, _569), vec3(_3083, _3084, _3085))) + _3160;
                                float _4207 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3168 = 1.0 - _3135;
                                float _3178 = (0.5 / (((_3167 * ((_3150 * _3168) + _3135)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3168) + _3135) * _3150))) * _3167;
                                float _4218 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3188 = (_3113 * _3090) * (((_3136 * 3.1415927410125732421875) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) / ((_3158 * _3158) * ((_3103 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3188 * _2970.x;
                                frontier_phi_73_pred_1 = _3188 * _2970.y;
                                frontier_phi_73_pred_2 = _3114 * _2958.z;
                                frontier_phi_73_pred_3 = _3114 * _2958.y;
                                frontier_phi_73_pred_4 = _3114 * _2958.x;
                                frontier_phi_73_pred_5 = _3188 * _2970.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3192 = frontier_phi_73_pred;
                            _3193 = frontier_phi_73_pred_1;
                            _3197 = frontier_phi_73_pred_2;
                            _3196 = frontier_phi_73_pred_3;
                            _3195 = frontier_phi_73_pred_4;
                            _3194 = frontier_phi_73_pred_5;
                            _2900 = _3195 + _2913;
                            _2901 = _3196 + _2914;
                            _2902 = _3197 + _2915;
                            _2897 = _3192 + _2910;
                            _2898 = _3193 + _2911;
                            _2899 = _3194 + _2912;
                            if (_2917 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2917;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2900;
                        frontier_phi_67_pred_1 = _2901;
                        frontier_phi_67_pred_2 = _2902;
                        frontier_phi_67_pred_3 = _2899;
                        frontier_phi_67_pred_4 = _2898;
                        frontier_phi_67_pred_5 = _2897;
                    }
                    _2565 = frontier_phi_67_pred;
                    _2567 = frontier_phi_67_pred_1;
                    _2569 = frontier_phi_67_pred_2;
                    _2563 = frontier_phi_67_pred_3;
                    _2561 = frontier_phi_67_pred_4;
                    _2559 = frontier_phi_67_pred_5;
                    uint _2704 = _2703 + 1u;
                    if (_2704 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2697 = _2559;
                        _2698 = _2561;
                        _2699 = _2563;
                        _2700 = _2565;
                        _2701 = _2567;
                        _2702 = _2569;
                        _2703 = _2704;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2567;
                frontier_phi_55_56_ladder_1 = _2569;
                frontier_phi_55_56_ladder_2 = _2565;
                frontier_phi_55_56_ladder_3 = _2563;
                frontier_phi_55_56_ladder_4 = _2561;
                frontier_phi_55_56_ladder_5 = _2559;
            }
            else
            {
                frontier_phi_55_56_ladder = _2453;
                frontier_phi_55_56_ladder_1 = _2455;
                frontier_phi_55_56_ladder_2 = _2451;
                frontier_phi_55_56_ladder_3 = _2449;
                frontier_phi_55_56_ladder_4 = _2447;
                frontier_phi_55_56_ladder_5 = _2445;
            }
            _2558 = frontier_phi_55_56_ladder_5;
            _2560 = frontier_phi_55_56_ladder_4;
            _2562 = frontier_phi_55_56_ladder_3;
            _2564 = frontier_phi_55_56_ladder_2;
            _2566 = frontier_phi_55_56_ladder;
            _2568 = frontier_phi_55_56_ladder_1;
        }
        float _2573 = isnan(1.0) ? _622 : (isnan(_622) ? 1.0 : min(_622, 1.0));
        _2357 = (_2573 * _2564) + _1793;
        _2359 = (_2573 * _2566) + _1795;
        _2361 = (_2573 * _2568) + _1797;
        _2363 = ((_2558 * _606) * _2573) + _2138;
        _2365 = ((_2560 * _608) * _2573) + _2140;
        _2367 = ((_2562 * _609) * _2573) + _2142;
    }
    else
    {
        _2357 = _1793;
        _2359 = _1795;
        _2361 = _1797;
        _2363 = _2138;
        _2365 = _2140;
        _2367 = _2142;
    }
    float _4234 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4245 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4256 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    uint _2387 = _218 + 6u;
    float _2395 = _541 / cbSceneParam._m0[86u].x;
    float _2396 = _542 / cbSceneParam._m0[86u].y;
    vec4 _2410 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2395, _2396, (log2((isnan(cbSceneParam._m0[77u].w) ? _475 : (isnan(_475) ? cbSceneParam._m0[77u].w : min(_475, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2412 = _2410.x;
    float _2413 = _2410.y;
    float _2414 = _2410.z;
    float _2415 = _2410.w;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    if (_475 > cbSceneParam._m0[78u].w)
    {
        float _2470 = isnan(_475) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _475 : min(cbSceneParam._m0[80u].w, _475));
        float _2471 = _2470 / _475;
        float _2482 = _2471 * _526;
        float _2483 = _527 * _2471;
        float _2484 = (-0.0) - _2483;
        float _2486 = _2471 * _528;
        float _2488 = (cbSceneParam._m0[77u].w * _2484) / _2470;
        float _2489 = _2488 + cbSceneParam._m0[79u].w;
        float _2490 = cbSceneParam._m0[79u].w - _2483;
        float _2496 = sqrt(((_2482 * _2482) + (_2483 * _2483)) + (_2486 * _2486));
        float _2499 = (1.0 - (cbSceneParam._m0[77u].w / _2470)) * _2496;
        float _2504 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2506 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2659;
        if (abs((_2484 - _2488) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2659 = ((((_2489 > 0.0) ? exp2(_2504 * _2489) : (2.0 - exp2(_2506 * _2489))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2499;
        }
        else
        {
            float _2619 = 1.0 / cbSceneParam._m0[80u].x;
            float _2620 = isnan(_2490) ? _2489 : (isnan(_2489) ? _2490 : max(_2489, _2490));
            float _2621 = isnan(_2490) ? _2489 : (isnan(_2489) ? _2490 : min(_2489, _2490));
            float _2630 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : min(_2620, 0.0));
            float _2631 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : min(_2621, 0.0));
            _2659 = ((abs(_2496 / _2484) * cbSceneParam._m0[80u].y) * ((((_2630 - _2631) * 2.0) - ((exp2(_2504 * (isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0)))) - exp2(_2504 * (isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0))))) * _2619)) - ((exp2(_2506 * _2630) - exp2(_2506 * _2631)) * _2619))) + (_2499 * cbSceneParam._m0[80u].z);
        }
        vec4 _2661 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2395, _2396, 1.0), 0.0);
        float _2670 = exp2((_2659 * (-1.44269502162933349609375)) * (1.0 - _2661.w));
        float _2671 = log2(_2670);
        float _2687 = log2(_2415);
        _2508 = (exp2(_2687 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].x)) * _2661.x) / cbSceneParam._m0[78u].x)) + _2412;
        _2510 = (exp2(_2687 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].y)) * _2661.y) / cbSceneParam._m0[78u].y)) + _2413;
        _2512 = (exp2(_2687 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].z)) * _2661.z) / cbSceneParam._m0[78u].z)) + _2414;
        _2514 = _2670 * _2415;
    }
    else
    {
        _2508 = _2412;
        _2510 = _2413;
        _2512 = _2414;
        _2514 = _2415;
    }
    float _2526 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2527 = _2526 == 3.0;
    float _2528 = log2(_2514);
    float _2535 = exp2(_2528 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2357 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _622))) + ((_2363 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1430)) * cbPerFrame._m0[3u].x));
    float _2536 = exp2(_2528 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2359 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _622))) + ((_2365 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1430)) * cbPerFrame._m0[3u].x));
    float _2537 = exp2(_2528 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2361 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _622))) + ((_2367 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1430)) * cbPerFrame._m0[3u].x));
    float _2546 = (_2526 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2546 * (_2527 ? _2535 : (_2535 + (cbSceneParam._m0[72u].w * _2508)));
    SV_Target.y = _2546 * (_2527 ? _2536 : (_2536 + (cbSceneParam._m0[72u].w * _2510)));
    SV_Target.z = _2546 * (_2527 ? _2537 : (_2537 + (cbSceneParam._m0[72u].w * _2512)));
    SV_Target.w = cbInstanceData._m0[_2387].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2387].w;
}


