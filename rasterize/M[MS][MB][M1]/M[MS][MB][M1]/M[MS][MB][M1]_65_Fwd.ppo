#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1167;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3496 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3507 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3518 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _393 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_381 - _393) * cbMtdParam._m0[24u].y) + _393) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3529 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _418 = (_411 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _419 = (_411 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _420 = (_411 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _424 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _418;
    float _427 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _419;
    float _430 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _420;
    float _437 = ((_418 - _424) * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) + _424;
    float _438 = ((_419 - _427) * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) + _427;
    float _439 = ((_420 - _430) * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) + _430;
    vec4 _452 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _477 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _496 = _494.x;
    float _497 = _494.y;
    float _498 = _494.z;
    float _507 = ((_477.z - _498) * _411) + _498;
    float _510 = ((((_477.x - _496) * _411) + _496) * 2.0) + (-1.0);
    float _511 = ((((_477.y - _497) * _411) + _497) * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _3540 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _517 = sqrt(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))));
    vec4 _539 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _551 = (_510 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_452.x * 2.0) + (-1.0)))) + (((_539.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _552 = (_511 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_452.y * 2.0) + (-1.0)))) + (((_539.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _564 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _580 = _578.x;
    float _598 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _279) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _280) + cbTextureTilingScale._m0[9u].w)).x - _580) * _411) + _580;
    float _602 = ((_564.x - _598) * cbMtdParam._m0[19u].z) + _598;
    float _607 = (((_452.z - _507) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _507;
    float _611 = ((_539.z - _607) * cbMtdParam._m0[19u].w) + _607;
    float _613 = cbMtdParam._m0[22u].x + _539.w;
    float _616 = fma(_517, _226 * NORMAL.x, fma(_552, _233 * TANGENT.x, (_219 * _211) * _551));
    float _619 = fma(_517, _226 * NORMAL.y, fma(_552, _233 * TANGENT.y, (_219 * _212) * _551));
    float _622 = fma(_517, _226 * NORMAL.z, fma(_552, _233 * TANGENT.z, (_219 * _213) * _551));
    float _626 = inversesqrt(dot(vec3(_616, _619, _622), vec3(_616, _619, _622)));
    float _627 = _626 * _616;
    float _628 = _626 * _619;
    float _629 = _626 * _622;
    float _3551 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _630 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3573 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3584 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3595 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3606 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _635 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _649 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _700 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _690);
    float _701 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _690);
    float _702 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _690);
    float _706 = inversesqrt(dot(vec3(_700, _701, _702), vec3(_700, _701, _702)));
    float _707 = _700 * _706;
    float _708 = _701 * _706;
    float _709 = _702 * _706;
    float _715 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _716 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _734 = fma(_629, cbSceneParam._m0[5u].z, fma(_628, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _627));
    float _737 = fma(_629, cbSceneParam._m0[6u].z, fma(_628, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _627));
    float _740 = fma(_629, cbSceneParam._m0[7u].z, fma(_628, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _627));
    uint _754 = (_260 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _760 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_754].x;
    float _761 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_754].y;
    float _762 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_754].z;
    float _3617 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _766 = 1.0 - _635;
    float _767 = _763 * _766;
    float _768 = _764 * _766;
    float _769 = _765 * _766;
    float _774 = (_763 + (-0.039999999105930328369140625)) * _635;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _635;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _635;
    float _777 = _774 + 0.039999999105930328369140625;
    float _779 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    vec4 _789 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _715, cbSceneParam._m0[86u].y * _716));
    float _793 = ((isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * TEXCOORD_5.w) * _789.x;
    float _794 = dot(vec3(_627, _628, _629), vec3(_707, _708, _709));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _627) - _707;
    float _802 = (_797 * _628) - _708;
    float _803 = (_797 * _629) - _709;
    float _807 = abs(dot(vec3(_707, _708, _709), vec3(_627, _628, _629)));
    float _3650 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_630);
    float _822 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _828 = (1.0 - _822) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _829 = _822 * _809;
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _891 = fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857));
        float _895 = fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857));
        float _899 = fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857));
        float _924 = _857 + _627;
        float _925 = _861 + _628;
        float _926 = _865 + _629;
        float _936 = fma(_926, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924)) - _891;
        float _937 = fma(_926, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924)) - _895;
        float _938 = fma(_926, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924)) - _899;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_891 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_895 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[34u].z) + ((((((_899 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _994 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_960.x + (-0.5));
        float _996 = _994 * (_960.y + (-0.5));
        float _997 = _994 * (_960.z + (-0.5));
        float _1004 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_967.x + (-0.5));
        float _1006 = _1004 * (_967.y + (-0.5));
        float _1007 = _1004 * (_967.z + (-0.5));
        float _1014 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_974.x + (-0.5));
        float _1016 = _1014 * (_974.y + (-0.5));
        float _1017 = _1014 * (_974.z + (-0.5));
        float _1024 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_981.x + (-0.5));
        float _1026 = _1024 * (_981.y + (-0.5));
        float _1027 = _1024 * (_981.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1048 = (dot(vec3(_627, _628, _629), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1058 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3698 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1060 + 1.0))) + _1065) * _1028;
        float _1075 = _996 * 0.5;
        float _1076 = _1006 * 0.5;
        float _1077 = _1016 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_627, _628, _629), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3731 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1102 + 1.0))) + _1107) * _1029;
        float _1117 = _997 * 0.5;
        float _1118 = _1007 * 0.5;
        float _1119 = _1017 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_627, _628, _629), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3764 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1144 + 1.0))) + _1149) * _1030;
        _1166 = _997;
        _1168 = _996;
        _1169 = _995;
        _1170 = _1007;
        _1171 = _1006;
        _1172 = _1005;
        _1173 = _1017;
        _1174 = _1016;
        _1175 = _1015;
        _1176 = _1030;
        _1177 = _1029;
        _1178 = _1028;
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1206 = fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857));
        float _1210 = fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857));
        float _1214 = fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857));
        float _1237 = _857 + _627;
        float _1238 = _861 + _628;
        float _1239 = _865 + _629;
        float _1249 = fma(_1239, cbModelParam._m0[30u].z, fma(_1238, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1237)) - _1206;
        float _1250 = fma(_1239, cbModelParam._m0[31u].z, fma(_1238, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1237)) - _1210;
        float _1251 = fma(_1239, cbModelParam._m0[32u].z, fma(_1238, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1237)) - _1214;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1206 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1210 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[35u].z) + ((((((_1214 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1305 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1272.x + (-0.5));
        float _1307 = _1305 * (_1272.y + (-0.5));
        float _1308 = _1305 * (_1272.z + (-0.5));
        float _1315 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1279.x + (-0.5));
        float _1317 = _1315 * (_1279.y + (-0.5));
        float _1318 = _1315 * (_1279.z + (-0.5));
        float _1325 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1286.x + (-0.5));
        float _1327 = _1325 * (_1286.y + (-0.5));
        float _1328 = _1325 * (_1286.z + (-0.5));
        float _1335 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1293.x + (-0.5));
        float _1337 = _1335 * (_1293.y + (-0.5));
        float _1338 = _1335 * (_1293.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_627, _628, _629), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3827 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1369 + 1.0))) + _1374) * _1339;
        float _1384 = _1307 * 0.5;
        float _1385 = _1317 * 0.5;
        float _1386 = _1327 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_627, _628, _629), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3860 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1411 + 1.0))) + _1416) * _1340;
        float _1426 = _1308 * 0.5;
        float _1427 = _1318 * 0.5;
        float _1428 = _1328 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_627, _628, _629), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _3893 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1453 + 1.0))) + _1458) * _1341;
        _1475 = _1308;
        _1476 = _1307;
        _1477 = _1306;
        _1478 = _1318;
        _1479 = _1317;
        _1480 = _1316;
        _1481 = _1328;
        _1482 = _1327;
        _1483 = _1326;
        _1484 = _1341;
        _1485 = _1340;
        _1486 = _1339;
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1167;
        _1476 = _1167;
        _1477 = _1167;
        _1478 = _1167;
        _1479 = _1167;
        _1480 = _1167;
        _1481 = _1167;
        _1482 = _1167;
        _1483 = _1167;
        _1484 = _1167;
        _1485 = _1167;
        _1486 = _1167;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1179)) + _1179;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1180)) + _1180;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1181)) + _1181;
    float _1522 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1500, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1525 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1500, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1528 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1500, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1499));
    float _1543 = _801 * 0.5;
    float _1544 = _802 * 0.5;
    float _1545 = _803 * 0.5;
    float _1546 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1549 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1552 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1586;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1559 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1563 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1567 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1574 = dot(vec4(cbModelParam._m0[39u]), vec4(_1543, _1544, _1545, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1597;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1588 = dot(vec4(cbModelParam._m0[40u]), vec4(_1543, _1544, _1545, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1601 = (_1597 * cbModelParam._m0[1u].x) + (_1586 * (1.0 - cbModelParam._m0[1u].x));
    float _1611 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _630);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1611 : min(cbModelParam._m0[25u].z, _1611));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1661 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1665 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1669 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1672 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1675 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1678 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1706;
        if (_1672 > 0.0)
        {
            _1706 = abs((1.0 - _1661) / _1672);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1661 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1706 = frontier_phi_14_12_ladder;
        }
        float _1910;
        if (_1675 > 0.0)
        {
            _1910 = abs((1.0 - _1665) / _1675);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1665 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1910 = frontier_phi_23_19_ladder;
        }
        float _2164;
        if (_1678 > 0.0)
        {
            _2164 = abs((1.0 - _1669) / _1678);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1669 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2164 = frontier_phi_35_30_ladder;
        }
        float _2166 = isnan(_1910) ? _1706 : (isnan(_1706) ? _1910 : min(_1706, _1910));
        float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
        float _2171 = (_2167 * _1672) + _1661;
        float _2172 = (_2167 * _1675) + _1665;
        float _2173 = (_2167 * _1678) + _1669;
        float _2174 = _2167 * 9.9999997473787516355514526367188e-05;
        float _2176 = (-1.0) - _2174;
        float _2178 = _2174 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2173 > _2178) || ((_2173 < _2176) || ((_2172 > _2178) || ((_2172 < _2176) || ((_2171 < _2176) || (_2171 > _2178))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2301 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2173, cbModelParam._m0[9u].z, fma(_2172, cbModelParam._m0[9u].y, _2171 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2173, cbModelParam._m0[10u].z, fma(_2172, cbModelParam._m0[10u].y, _2171 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2173, cbModelParam._m0[11u].z, fma(_2172, cbModelParam._m0[11u].y, _2171 * cbModelParam._m0[11u].x))), _1612);
            frontier_phi_13_35_ladder = _2301.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2301.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2301.x * cbModelParam._m0[1u].y;
        }
        _1694 = frontier_phi_13_35_ladder_2;
        _1696 = frontier_phi_13_35_ladder_1;
        _1698 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1682 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1612);
        _1694 = _1682.x * cbModelParam._m0[1u].y;
        _1696 = _1682.y * cbModelParam._m0[1u].y;
        _1698 = _1682.z * cbModelParam._m0[1u].y;
    }
    float _1702 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _630);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1702 : min(cbModelParam._m0[25u].w, _1702));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1758 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1762 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1766 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1769 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1772 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1775 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1915;
        if (_1769 > 0.0)
        {
            _1915 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1915 = frontier_phi_25_21_ladder;
        }
        float _2191;
        if (_1772 > 0.0)
        {
            _2191 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2191 = frontier_phi_37_32_ladder;
        }
        float _2404;
        if (_1775 > 0.0)
        {
            _2404 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2404 = frontier_phi_46_43_ladder;
        }
        float _2406 = isnan(_2191) ? _1915 : (isnan(_1915) ? _2191 : min(_1915, _2191));
        float _2407 = isnan(_2404) ? _2406 : (isnan(_2406) ? _2404 : min(_2406, _2404));
        float _2411 = (_2407 * _1769) + _1758;
        float _2412 = (_2407 * _1772) + _1762;
        float _2413 = (_2407 * _1775) + _1766;
        float _2414 = _2407 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2414;
        float _2417 = _2414 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2413 > _2417) || ((_2413 < _2415) || ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 < _2415) || (_2411 > _2417))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2413, cbModelParam._m0[17u].z, fma(_2412, cbModelParam._m0[17u].y, _2411 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2413, cbModelParam._m0[18u].z, fma(_2412, cbModelParam._m0[18u].y, _2411 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2413, cbModelParam._m0[19u].z, fma(_2412, cbModelParam._m0[19u].y, _2411 * cbModelParam._m0[19u].x))), _1703);
            frontier_phi_22_46_ladder = _2612.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2612.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2612.x * cbModelParam._m0[1u].z;
        }
        _1794 = frontier_phi_22_46_ladder_2;
        _1796 = frontier_phi_22_46_ladder_1;
        _1798 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1703);
        _1794 = _1778.x * cbModelParam._m0[1u].z;
        _1796 = _1778.y * cbModelParam._m0[1u].z;
        _1798 = _1778.z * cbModelParam._m0[1u].z;
    }
    float _1811 = (((_828 * _777) + _829) * _793) * ((cbModelParam._m0[1u].w * (_1794 - _1694)) + _1694);
    float _1813 = (((_828 * _779) + _829) * _793) * ((cbModelParam._m0[1u].w * (_1796 - _1696)) + _1696);
    float _1815 = (((_828 * _780) + _829) * _793) * ((cbModelParam._m0[1u].w * (_1798 - _1698)) + _1698);
    float _1818 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1813, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1813, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1813, cbSceneParam._m0[91u].y, _1811 * cbSceneParam._m0[91u].x));
    uvec4 _1834 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1836 = _1834.x * 14u;
    uint _1837 = _1836 + 13u;
    float _1844 = _793 + (-1.0);
    float _1849 = (cbLight._m0[_1837].x * _1844) + 1.0;
    float _1850 = (cbLight._m0[_1837].y * _1844) + 1.0;
    float _1851 = (cbLight._m0[_1837].z * _1844) + 1.0;
    float _1852 = (cbLight._m0[_1837].w * _1844) + 1.0;
    uint _1853 = _1836 + 5u;
    float _1859 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
    uint _1863 = _1836 + 4u;
    float _1869 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1873 = _1836 | 1u;
    float _1884 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_627, _628, _629));
    float _1887 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_627, _628, _629));
    float _4029 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _4040 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1892 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1894 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _1901 = ((cbLight._m0[_1853].x * _1859) * _1894) + ((cbLight._m0[_1863].x * _1869) * _1892);
    float _1902 = ((_1859 * cbLight._m0[_1853].y) * _1894) + ((_1869 * cbLight._m0[_1863].y) * _1892);
    float _1903 = ((_1859 * cbLight._m0[_1853].z) * _1894) + ((_1869 * cbLight._m0[_1863].z) * _1892);
    uvec4 _1907 = floatBitsToUint(cbLight._m0[_1836 + 12u]);
    bool _1909 = _1907.x == 0u;
    float _1920;
    float _1922;
    float _1924;
    if (_1909)
    {
        _1920 = _1901;
        _1922 = _1902;
        _1924 = _1903;
    }
    else
    {
        uint _1928 = _1836 + 6u;
        float _1944 = (dot(vec3(cbLight._m0[_1836 + 2u].xyz), vec3(_627, _628, _629)) * 0.5) + 0.5;
        float _1945 = _1944 * _1944;
        float _4051 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1947 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _1920 = (((cbLight._m0[_1928].x * 0.3183098733425140380859375) * _1946) * _1947) + _1901;
        _1922 = (((cbLight._m0[_1928].y * 0.3183098733425140380859375) * _1946) * _1947) + _1902;
        _1924 = (((cbLight._m0[_1928].z * 0.3183098733425140380859375) * _1946) * _1947) + _1903;
    }
    bool _1927 = _1907.y == 0u;
    float _1965;
    float _1967;
    float _1969;
    if (_1927)
    {
        _1965 = _1920;
        _1967 = _1922;
        _1969 = _1924;
    }
    else
    {
        uint _2135 = _1836 + 7u;
        float _2151 = (dot(vec3(cbLight._m0[_1836 + 3u].xyz), vec3(_627, _628, _629)) * 0.5) + 0.5;
        float _2152 = _2151 * _2151;
        float _4067 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2153 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2154 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _1965 = (((cbLight._m0[_2135].x * 0.3183098733425140380859375) * _2153) * _2154) + _1920;
        _1967 = (((cbLight._m0[_2135].y * 0.3183098733425140380859375) * _2153) * _2154) + _1922;
        _1969 = (((cbLight._m0[_2135].z * 0.3183098733425140380859375) * _2153) * _2154) + _1924;
    }
    uint _1972 = _1836 + 8u;
    float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1836].w)) * _630) * 0.949999988079071044921875);
    float _1986 = _1985 * _1985;
    float _1987 = cbLight._m0[_1836].x + _707;
    float _1988 = cbLight._m0[_1836].y + _708;
    float _1989 = cbLight._m0[_1836].z + _709;
    float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
    float _1994 = _1993 * _1987;
    float _1995 = _1993 * _1988;
    float _1996 = _1993 * _1989;
    float _1997 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_1836].xyz));
    float _4083 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2001 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _2002 = dot(vec3(_627, _628, _629), vec3(_1994, _1995, _1996));
    float _4105 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _2006 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_1994, _1995, _1996));
    float _4116 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2010 = _1986 * _1986;
    float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
    float _2022 = exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0);
    float _2023 = 0.959999978542327880859375 - _774;
    float _2025 = 0.959999978542327880859375 - _775;
    float _2026 = 0.959999978542327880859375 - _776;
    float _2033 = 1.0 - _1986;
    float _2044 = (0.5 / (((_2001 * ((_2000 * _2033) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2033) + _1986) * _2000))) * _2000;
    float _4127 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2046 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
    uint _2057 = _1836 + 9u;
    float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1873].w)) * _630) * 0.949999988079071044921875);
    float _2069 = _2068 * _2068;
    float _2070 = cbLight._m0[_1873].x + _707;
    float _2071 = cbLight._m0[_1873].y + _708;
    float _2072 = cbLight._m0[_1873].z + _709;
    float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
    float _2077 = _2076 * _2070;
    float _2078 = _2076 * _2071;
    float _2079 = _2076 * _2072;
    float _2080 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_1873].xyz));
    float _4138 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2084 = dot(vec3(_627, _628, _629), vec3(_2077, _2078, _2079));
    float _4149 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_2077, _2078, _2079));
    float _4160 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = _2069 * _2069;
    float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
    float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0);
    float _2110 = 1.0 - _2069;
    float _2120 = (0.5 / (((_2001 * ((_2083 * _2110) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2110) + _2069) * _2083))) * _2083;
    float _4171 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
    float _2132 = (((((_2103 * _2023) + _777) * cbLight._m0[_2057].x) * _2122) * _1859) + (((((_2022 * _2023) + _777) * cbLight._m0[_1972].x) * _2046) * _1869);
    float _2133 = (((((_2103 * _2025) + _779) * cbLight._m0[_2057].y) * _2122) * _1859) + (((((_2022 * _2025) + _779) * cbLight._m0[_1972].y) * _2046) * _1869);
    float _2134 = (((((_2103 * _2026) + _780) * cbLight._m0[_2057].z) * _2122) * _1859) + (((((_2022 * _2026) + _780) * cbLight._m0[_1972].z) * _2046) * _1869);
    float _2196;
    float _2198;
    float _2200;
    if (_1909)
    {
        _2196 = _2132;
        _2198 = _2133;
        _2200 = _2134;
    }
    else
    {
        uint _2202 = _1836 + 2u;
        uint _2206 = _1836 + 10u;
        float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _630) * 0.949999988079071044921875);
        float _2221 = _2220 * _2220;
        float _2222 = cbLight._m0[_2202].x + _707;
        float _2223 = cbLight._m0[_2202].y + _708;
        float _2224 = cbLight._m0[_2202].z + _709;
        float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
        float _2229 = _2228 * _2222;
        float _2230 = _2228 * _2223;
        float _2231 = _2228 * _2224;
        float _2232 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2202].xyz));
        float _4182 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2236 = dot(vec3(_627, _628, _629), vec3(_2229, _2230, _2231));
        float _4193 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2240 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2229, _2230, _2231));
        float _4204 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2244 = _2221 * _2221;
        float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
        float _2255 = exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0);
        float _2262 = 1.0 - _2221;
        float _2272 = (0.5 / (((_2001 * ((_2235 * _2262) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2262) + _2221) * _2235))) * _2235;
        float _4215 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2274 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
        float _2275 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2196 = (((((_2255 * _2023) + _777) * cbLight._m0[_2206].x) * _2274) * _2275) + _2132;
        _2198 = (((((_2255 * _2025) + _779) * cbLight._m0[_2206].y) * _2274) * _2275) + _2133;
        _2200 = (((((_2255 * _2026) + _780) * cbLight._m0[_2206].z) * _2274) * _2275) + _2134;
    }
    float _2310;
    float _2312;
    float _2314;
    if (_1927)
    {
        _2310 = _2196;
        _2312 = _2198;
        _2314 = _2200;
    }
    else
    {
        uint _2321 = _1836 + 3u;
        uint _2325 = _1836 + 11u;
        float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _630) * 0.949999988079071044921875);
        float _2340 = _2339 * _2339;
        float _2341 = cbLight._m0[_2321].x + _707;
        float _2342 = cbLight._m0[_2321].y + _708;
        float _2343 = cbLight._m0[_2321].z + _709;
        float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
        float _2348 = _2347 * _2341;
        float _2349 = _2347 * _2342;
        float _2350 = _2347 * _2343;
        float _2351 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2321].xyz));
        float _4231 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2355 = dot(vec3(_627, _628, _629), vec3(_2348, _2349, _2350));
        float _4242 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2359 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2348, _2349, _2350));
        float _4253 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2363 = _2340 * _2340;
        float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
        float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
        float _2381 = 1.0 - _2340;
        float _2391 = (0.5 / (((_2001 * ((_2354 * _2381) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2381) + _2340) * _2354))) * _2354;
        float _4264 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2393 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
        float _2394 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _2310 = (((((_2374 * _2023) + _777) * cbLight._m0[_2325].x) * _2393) * _2394) + _2196;
        _2312 = (((((_2374 * _2025) + _779) * cbLight._m0[_2325].y) * _2393) * _2394) + _2198;
        _2314 = (((((_2374 * _2026) + _780) * cbLight._m0[_2325].z) * _2393) * _2394) + _2200;
    }
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    if (_1834.y == 0u)
    {
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2469;
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2469;
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2469;
        uvec4 _2484 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2485 = _2484.x;
        uint _2496 = uint((float(_2484.y) * floor(float(uint(cbSceneParam._m0[85u].y * _716) / _2485))) + floor(float(uint(cbSceneParam._m0[85u].x * _715) / _2485)));
        float _2506 = (log2(_2472 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2507 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        uint _2510 = uint(isnan(14.0) ? _2507 : (isnan(_2507) ? 14.0 : min(_2507, 14.0)));
        uvec4 _2515 = texelFetch(g_lightClusterGridBuffer, int(((_2510 << 2u) + (_2496 << 6u)) >> 2u));
        uint _2516 = _2515.x;
        uint _2517 = _2484.z;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        if (((((1u << ((_2517 >> 4u) & 15u)) + 4294967295u) & _2516) == 0u) || ((_2517 & 240u) == 0u))
        {
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
        }
        else
        {
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            uint _2768 = 0u;
            uint _2777;
            bool _2778;
            for (;;)
            {
                _2777 = texelFetch(g_lightClassification, int((((_2510 << 5u) + (_2496 << 9u)) + (_2768 << 2u)) >> 2u)).x;
                _2778 = _2777 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2778)
                {
                    frontier_phi_61_pred = _2762;
                    frontier_phi_61_pred_1 = _2767;
                    frontier_phi_61_pred_2 = _2766;
                    frontier_phi_61_pred_3 = _2765;
                    frontier_phi_61_pred_4 = _2764;
                    frontier_phi_61_pred_5 = _2763;
                }
                else
                {
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    uint _2892;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2777;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    for (;;)
                    {
                        uint _2896 = uint(findLSB(_2892)) + (_2768 << 5u);
                        uint _2893 = (_2892 + 4294967295u) & _2892;
                        uint _2898 = _2896 * 48u;
                        vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 3u)).x));
                        uint _2918 = (_2896 * 48u) + 4u;
                        vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 3u)).x));
                        uint _2937 = (_2896 * 48u) + 8u;
                        vec3 _2948 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x));
                        float _2952 = _2912.x - _2470;
                        float _2953 = _2912.y - _2471;
                        float _2954 = _2912.z - _2472;
                        float _2955 = dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954));
                        float _2958 = inversesqrt(_2955);
                        float _2959 = _2958 * _2952;
                        float _2960 = _2958 * _2953;
                        float _2961 = _2958 * _2954;
                        float _2962 = dot(vec3(_734, _737, _740), vec3(_2959, _2960, _2961));
                        float _2967 = 1.0 - (_2955 * _2912.w);
                        float _4290 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2968 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _2969 = sqrt(_2955) * _2931.w;
                        float _2972 = 1.39999997615814208984375 / (_2969 + 1.39999997615814208984375);
                        float _2973 = _2972 * _2972;
                        float _2976 = ((1.0 - _2973) * _2962) + _2973;
                        float _2979 = _2969 * _2969;
                        float _2983 = ((isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0))) * _2968) / ((_2979 * 0.699999988079071044921875) + 1.0);
                        float _2987 = (-0.0) - _2470;
                        float _2988 = (-0.0) - _2471;
                        float _2989 = (-0.0) - _2472;
                        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
                        float _2994 = _2993 * _2987;
                        float _2995 = _2993 * _2988;
                        float _2996 = _2993 * _2989;
                        float _3004 = exp2(log2(1.0 / ((_2979 * 3.5) + 5.0)) * 0.25);
                        float _3005 = 1.0 - _809;
                        float _3012 = sqrt(1.0 - ((1.0 - (_3005 * _3005)) * (1.0 - (_3004 * _3004))));
                        float _3013 = _3012 * _3012;
                        float _3014 = _3013 * _3013;
                        float _3015 = _2994 + _2959;
                        float _3016 = _2995 + _2960;
                        float _3017 = _2996 + _2961;
                        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                        float _3025 = dot(vec3(_734, _737, _740), vec3(_2994, _2995, _2996));
                        float _4306 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3028 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3029 = dot(vec3(_734, _737, _740), vec3(_3021 * _3015, _3021 * _3016, _3021 * _3017));
                        float _4317 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3036 = ((_3032 * _3032) * (_3014 + (-1.0))) + 1.0;
                        float _3037 = _2972 * _3013;
                        float _3038 = _3037 * _3037;
                        float _3041 = ((1.0 - _3038) * _2962) + _3038;
                        float _4328 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3042 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3043 = 1.0 - _3013;
                        float _3053 = (0.5 / (((_3042 * ((_3028 * _3043) + _3013)) + 9.9999999392252902907785028219223e-09) + (((_3042 * _3043) + _3013) * _3028))) * _3042;
                        float _4339 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3064 = (((_3014 * 3.1415927410125732421875) * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) / ((_3036 * _3036) * ((_2979 * 2.1991131305694580078125) + 3.141590118408203125))) * _2968;
                        _2821 = (_2983 * _2931.x) + _2889;
                        _2822 = (_2983 * _2931.y) + _2890;
                        _2823 = (_2983 * _2931.z) + _2891;
                        _2818 = (_3064 * _2948.x) + _2886;
                        _2819 = (_3064 * _2948.y) + _2887;
                        _2820 = (_3064 * _2948.z) + _2888;
                        if (_2893 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2893;
                        }
                    }
                    frontier_phi_61_pred = _2818;
                    frontier_phi_61_pred_1 = _2823;
                    frontier_phi_61_pred_2 = _2822;
                    frontier_phi_61_pred_3 = _2821;
                    frontier_phi_61_pred_4 = _2820;
                    frontier_phi_61_pred_5 = _2819;
                }
                _2618 = frontier_phi_61_pred;
                _2628 = frontier_phi_61_pred_1;
                _2626 = frontier_phi_61_pred_2;
                _2624 = frontier_phi_61_pred_3;
                _2622 = frontier_phi_61_pred_4;
                _2620 = frontier_phi_61_pred_5;
                uint _2769 = _2768 + 1u;
                if (_2769 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2762 = _2618;
                    _2763 = _2620;
                    _2764 = _2622;
                    _2765 = _2624;
                    _2766 = _2626;
                    _2767 = _2628;
                    _2768 = _2769;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
        }
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.z;
        uint _2634 = (_2632 >> 8u) & 15u;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        if (((4294967295u << _2634) & _2516) == 0u)
        {
            _2730 = _2617;
            _2732 = _2619;
            _2734 = _2621;
            _2736 = _2623;
            _2738 = _2625;
            _2740 = _2627;
        }
        else
        {
            float _2755 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
            float _2756 = _2755 * _2470;
            float _2757 = _2755 * _2471;
            float _2758 = _2755 * _2472;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2634 < ((_2632 >> 12u) & 15u))
            {
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2869 = _2617;
                float _2870 = _2619;
                float _2871 = _2621;
                float _2872 = _2623;
                float _2873 = _2625;
                float _2874 = _2627;
                uint _2875 = _2634;
                uint _2884;
                bool _2885;
                for (;;)
                {
                    _2884 = texelFetch(g_lightClassification, int((((_2510 << 5u) + (_2496 << 9u)) + (_2875 << 2u)) >> 2u)).x;
                    _2885 = _2884 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2885)
                    {
                        frontier_phi_67_pred = _2872;
                        frontier_phi_67_pred_1 = _2873;
                        frontier_phi_67_pred_2 = _2874;
                        frontier_phi_67_pred_3 = _2871;
                        frontier_phi_67_pred_4 = _2870;
                        frontier_phi_67_pred_5 = _2869;
                    }
                    else
                    {
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3082 = _2869;
                        float _3083 = _2870;
                        float _3084 = _2871;
                        float _3085 = _2872;
                        float _3086 = _2873;
                        float _3087 = _2874;
                        uint _3088 = _2884;
                        uint _3089;
                        vec4 _3114;
                        float _3115;
                        vec4 _3130;
                        vec3 _3142;
                        vec4 _3157;
                        vec4 _3172;
                        float _3218;
                        bool _3219;
                        for (;;)
                        {
                            uint _3099 = ((_2875 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3088));
                            _3089 = (_3088 + 4294967295u) & _3088;
                            uint _3101 = _3099 * 40u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            _3115 = _3114.w;
                            uint _3117 = (_3099 * 40u) + 4u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3132 = (_3099 * 40u) + 8u;
                            _3142 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x));
                            uint _3144 = (_3099 * 40u) + 16u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3159 = (_3099 * 40u) + 20u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3174 = (_3099 * 40u) + 24u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3193 = (_3099 * 40u) + 28u;
                            vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            _3218 = fma(_2472, _3206.z, fma(_2471, _3206.y, _3206.x * _2470)) + _3206.w;
                            _3219 = !((fma(_2472, _3187.z, fma(_2471, _3187.y, _3187.x * _2470)) + _3187.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3219)
                            {
                                float _3246 = _3114.x - _2470;
                                float _3247 = _3114.y - _2471;
                                float _3248 = _3114.z - _2472;
                                float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                                float _3252 = inversesqrt(_3249);
                                float _3253 = _3252 * _3246;
                                float _3254 = _3252 * _3247;
                                float _3255 = _3252 * _3248;
                                float _3259 = 1.0 - (_3249 / (_3115 * _3115));
                                float _4350 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3260 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3264 = sqrt(_3249) * _3130.w;
                                float _3266 = 1.39999997615814208984375 / (_3264 + 1.39999997615814208984375);
                                float _3267 = _3266 * _3266;
                                float _3270 = ((1.0 - _3267) * dot(vec3(_3253, _3254, _3255), vec3(_734, _737, _740))) + _3267;
                                float _3273 = _3264 * _3264;
                                float _3277 = (fma(_2472, _3157.z, fma(_2471, _3157.y, _3157.x * _2470)) + _3157.w) / _3218;
                                float _3278 = (fma(_2472, _3172.z, fma(_2471, _3172.y, _3172.x * _2470)) + _3172.w) / _3218;
                                float _3282 = 1.0 - dot(vec2(_3277, _3278), vec2(_3277, _3278));
                                float _4366 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3284 = _3283 * (((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3260) / ((_3273 * 0.699999988079071044921875) + 1.0));
                                float _3296 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                                float _3297 = 1.0 - _809;
                                float _3304 = sqrt(1.0 - ((1.0 - (_3297 * _3297)) * (1.0 - (_3296 * _3296))));
                                float _3305 = _3304 * _3304;
                                float _3306 = _3305 * _3305;
                                float _3307 = _3253 - _2756;
                                float _3308 = _3254 - _2757;
                                float _3309 = _3255 - _2758;
                                float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                                float _3317 = dot(vec3(_734, _737, _740), vec3((-0.0) - _2756, (-0.0) - _2757, (-0.0) - _2758));
                                float _4377 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3320 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3321 = dot(vec3(_734, _737, _740), vec3(_3313 * _3307, _3313 * _3308, _3313 * _3309));
                                float _4388 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3324 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3328 = ((_3324 * _3324) * (_3306 + (-1.0))) + 1.0;
                                float _3329 = _3266 * _3305;
                                float _3330 = _3329 * _3329;
                                float _3336 = ((1.0 - _3330) * dot(vec3(_734, _737, _740), vec3(_3253, _3254, _3255))) + _3330;
                                float _4399 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3338 = 1.0 - _3305;
                                float _3348 = (0.5 / (((_3337 * ((_3320 * _3338) + _3305)) + 9.9999999392252902907785028219223e-09) + (((_3337 * _3338) + _3305) * _3320))) * _3337;
                                float _4410 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3358 = (_3283 * _3260) * (((_3306 * 3.1415927410125732421875) * (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) / ((_3328 * _3328) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3358 * _3142.x;
                                frontier_phi_73_pred_1 = _3358 * _3142.y;
                                frontier_phi_73_pred_2 = _3284 * _3130.z;
                                frontier_phi_73_pred_3 = _3284 * _3130.y;
                                frontier_phi_73_pred_4 = _3284 * _3130.x;
                                frontier_phi_73_pred_5 = _3358 * _3142.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3362 = frontier_phi_73_pred;
                            _3363 = frontier_phi_73_pred_1;
                            _3367 = frontier_phi_73_pred_2;
                            _3366 = frontier_phi_73_pred_3;
                            _3365 = frontier_phi_73_pred_4;
                            _3364 = frontier_phi_73_pred_5;
                            _3072 = _3365 + _3085;
                            _3073 = _3366 + _3086;
                            _3074 = _3367 + _3087;
                            _3069 = _3362 + _3082;
                            _3070 = _3363 + _3083;
                            _3071 = _3364 + _3084;
                            if (_3089 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3089;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3072;
                        frontier_phi_67_pred_1 = _3073;
                        frontier_phi_67_pred_2 = _3074;
                        frontier_phi_67_pred_3 = _3071;
                        frontier_phi_67_pred_4 = _3070;
                        frontier_phi_67_pred_5 = _3069;
                    }
                    _2737 = frontier_phi_67_pred;
                    _2739 = frontier_phi_67_pred_1;
                    _2741 = frontier_phi_67_pred_2;
                    _2735 = frontier_phi_67_pred_3;
                    _2733 = frontier_phi_67_pred_4;
                    _2731 = frontier_phi_67_pred_5;
                    uint _2876 = _2875 + 1u;
                    if (_2876 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2869 = _2731;
                        _2870 = _2733;
                        _2871 = _2735;
                        _2872 = _2737;
                        _2873 = _2739;
                        _2874 = _2741;
                        _2875 = _2876;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2739;
                frontier_phi_55_56_ladder_1 = _2741;
                frontier_phi_55_56_ladder_2 = _2737;
                frontier_phi_55_56_ladder_3 = _2735;
                frontier_phi_55_56_ladder_4 = _2733;
                frontier_phi_55_56_ladder_5 = _2731;
            }
            else
            {
                frontier_phi_55_56_ladder = _2625;
                frontier_phi_55_56_ladder_1 = _2627;
                frontier_phi_55_56_ladder_2 = _2623;
                frontier_phi_55_56_ladder_3 = _2621;
                frontier_phi_55_56_ladder_4 = _2619;
                frontier_phi_55_56_ladder_5 = _2617;
            }
            _2730 = frontier_phi_55_56_ladder_5;
            _2732 = frontier_phi_55_56_ladder_4;
            _2734 = frontier_phi_55_56_ladder_3;
            _2736 = frontier_phi_55_56_ladder_2;
            _2738 = frontier_phi_55_56_ladder;
            _2740 = frontier_phi_55_56_ladder_1;
        }
        float _2745 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2529 = (_2745 * _2736) + _1965;
        _2531 = (_2745 * _2738) + _1967;
        _2533 = (_2745 * _2740) + _1969;
        _2535 = ((_2730 * _777) * _2745) + _2310;
        _2537 = ((_2732 * _779) * _2745) + _2312;
        _2539 = ((_2734 * _780) * _2745) + _2314;
    }
    else
    {
        _2529 = _1965;
        _2531 = _1967;
        _2533 = _1969;
        _2535 = _2310;
        _2537 = _2312;
        _2539 = _2314;
    }
    float _4426 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4437 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4448 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    uint _2559 = _260 + 6u;
    float _2567 = _715 / cbSceneParam._m0[86u].x;
    float _2568 = _716 / cbSceneParam._m0[86u].y;
    vec4 _2582 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2567, _2568, (log2((isnan(cbSceneParam._m0[77u].w) ? _649 : (isnan(_649) ? cbSceneParam._m0[77u].w : min(_649, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2584 = _2582.x;
    float _2585 = _2582.y;
    float _2586 = _2582.z;
    float _2587 = _2582.w;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    if (_649 > cbSceneParam._m0[78u].w)
    {
        float _2642 = isnan(_649) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _649 : min(cbSceneParam._m0[80u].w, _649));
        float _2643 = _2642 / _649;
        float _2654 = _2643 * _700;
        float _2655 = _701 * _2643;
        float _2656 = (-0.0) - _2655;
        float _2658 = _2643 * _702;
        float _2660 = (cbSceneParam._m0[77u].w * _2656) / _2642;
        float _2661 = _2660 + cbSceneParam._m0[79u].w;
        float _2662 = cbSceneParam._m0[79u].w - _2655;
        float _2668 = sqrt(((_2654 * _2654) + (_2655 * _2655)) + (_2658 * _2658));
        float _2671 = (1.0 - (cbSceneParam._m0[77u].w / _2642)) * _2668;
        float _2676 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2678 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2831;
        if (abs((_2656 - _2660) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2831 = ((((_2661 > 0.0) ? exp2(_2676 * _2661) : (2.0 - exp2(_2678 * _2661))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2671;
        }
        else
        {
            float _2791 = 1.0 / cbSceneParam._m0[80u].x;
            float _2792 = isnan(_2662) ? _2661 : (isnan(_2661) ? _2662 : max(_2661, _2662));
            float _2793 = isnan(_2662) ? _2661 : (isnan(_2661) ? _2662 : min(_2661, _2662));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            float _2803 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : min(_2793, 0.0));
            _2831 = ((abs(_2668 / _2656) * cbSceneParam._m0[80u].y) * ((((_2802 - _2803) * 2.0) - ((exp2(_2676 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0)))) - exp2(_2676 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))))) * _2791)) - ((exp2(_2678 * _2802) - exp2(_2678 * _2803)) * _2791))) + (_2671 * cbSceneParam._m0[80u].z);
        }
        vec4 _2833 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2567, _2568, 1.0), 0.0);
        float _2842 = exp2((_2831 * (-1.44269502162933349609375)) * (1.0 - _2833.w));
        float _2843 = log2(_2842);
        float _2859 = log2(_2587);
        _2680 = (exp2(_2859 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].x)) * _2833.x) / cbSceneParam._m0[78u].x)) + _2584;
        _2682 = (exp2(_2859 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].y)) * _2833.y) / cbSceneParam._m0[78u].y)) + _2585;
        _2684 = (exp2(_2859 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].z)) * _2833.z) / cbSceneParam._m0[78u].z)) + _2586;
        _2686 = _2842 * _2587;
    }
    else
    {
        _2680 = _2584;
        _2682 = _2585;
        _2684 = _2586;
        _2686 = _2587;
    }
    float _2698 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2699 = _2698 == 3.0;
    float _2700 = log2(_2686);
    float _2707 = exp2(_2700 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2529 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _793))) + ((_2535 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1601)) * cbPerFrame._m0[3u].x));
    float _2708 = exp2(_2700 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2531 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _793))) + ((_2537 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1601)) * cbPerFrame._m0[3u].x));
    float _2709 = exp2(_2700 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2533 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _793))) + ((_2539 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1601)) * cbPerFrame._m0[3u].x));
    float _2718 = (_2698 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2718 * (_2699 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2680)));
    SV_Target.y = _2718 * (_2699 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2682)));
    SV_Target.z = _2718 * (_2699 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2684)));
    SV_Target.w = cbInstanceData._m0[_2559].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2559].w;
}


