#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1385;
float _4047;
float _4048;
float _4049;
float _4050;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4059 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _442 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _461 = _459.x;
    float _462 = _459.y;
    float _463 = _459.z;
    float _472 = ((_442.z - _463) * _394) + _463;
    float _475 = ((((_442.x - _461) * _394) + _461) * 2.0) + (-1.0);
    float _477 = ((((_442.y - _462) * _394) + _462) * 2.0) + (-1.0);
    float _478 = dot(vec2(_475, _477), vec2(_475, _477));
    float _4070 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _483 = sqrt(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))));
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _511 = (((_499.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _475;
    float _512 = (((_499.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _477;
    float _515 = fma(_483, _245, fma(_512, _252, _511 * _238));
    float _518 = fma(_483, _246, fma(_512, _253, _511 * _239));
    float _521 = fma(_483, _247, fma(_512, _254, _511 * _240));
    float _525 = inversesqrt(dot(vec3(_515, _518, _521), vec3(_515, _518, _521)));
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _554 = _552.x;
    float _555 = 1.0 - _554;
    float _561 = (cbMtdParam._m0[19u].x + dot(vec4(_525 * _515, _525 * _518, _525 * _521, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_554 - _555) * cbMtdParam._m0[24u].z) + _555) * cbMtdParam._m0[21u].z);
    float _4081 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _564 = (-0.0) - cbMtdParam._m0[24u].x;
    float _566 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _566 : (isnan(_566) ? 1.0 : min(_566, 1.0));
    float _574 = _562 - ((_562 * TEXCOORD_8.x) * _567);
    float _575 = _562 - ((_562 * TEXCOORD_8.y) * _567);
    float _576 = _562 - ((_562 * TEXCOORD_8.z) * _567);
    float _583 = (_574 * ((_422.x * cbMtdParam._m0[18u].x) - _401)) + _401;
    float _584 = (_575 * ((_422.y * cbMtdParam._m0[18u].y) - _402)) + _402;
    float _585 = (_576 * ((_422.z * cbMtdParam._m0[18u].z) - _403)) + _403;
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _599 = _597.x;
    float _600 = 1.0 - _599;
    float _628 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_599 - _600) * cbMtdParam._m0[24u].w) + _600) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4102 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _637 = ((((cbMtdParam._m0[10u].x - _583) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _629) + _583;
    float _638 = ((((cbMtdParam._m0[10u].y - _584) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _629) + _584;
    float _639 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _585)) * _629) + _585;
    vec4 _665 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _667 = _665.x;
    float _685 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _667) * _394) + _667;
    float _689 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _685) * cbMtdParam._m0[19u].z) + _685;
    float _691 = _689 - (_689 * _574);
    float _693 = _691 - (_691 * _629);
    float _697 = (cbMtdParam._m0[19u].w * (_499.z - _472)) + _472;
    vec4 _711 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _718 = (_711.x * 2.0) + (-1.0);
    float _719 = (_711.y * 2.0) + (-1.0);
    float _720 = dot(vec2(_718, _719), vec2(_718, _719));
    float _4113 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _728 = ((_711.z - _697) * _574) + _697;
    float _731 = ((cbMtdParam._m0[23u].y - _728) * _629) + _728;
    vec4 _750 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _756 = (_750.x * 2.0) + (-1.0);
    float _757 = (_750.y * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _4124 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _773 = ((sqrt(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) - _483) * _576) + _483;
    float _776 = (((_718 - _511) * _574) + _511) + (cbMtdParam._m0[21u].x * _511);
    float _777 = (((_719 - _512) * _575) + _512) + (cbMtdParam._m0[21u].x * _512);
    float _788 = (((_756 - _776) + (_776 * cbMtdParam._m0[22u].z)) * _629) + _776;
    float _789 = (((_757 - _777) + (_777 * cbMtdParam._m0[22u].z)) * _629) + _777;
    float _790 = (_629 * (sqrt(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) - _773)) + _773;
    float _792 = cbMtdParam._m0[22u].x + _499.w;
    float _795 = fma(_790, _245, fma(_789, _252, _788 * _238));
    float _798 = fma(_790, _246, fma(_789, _253, _788 * _239));
    float _801 = fma(_790, _247, fma(_789, _254, _788 * _240));
    float _805 = inversesqrt(dot(vec3(_795, _798, _801), vec3(_795, _798, _801)));
    float _806 = _805 * _795;
    float _807 = _805 * _798;
    float _808 = _805 * _801;
    float _4135 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _809 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4157 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4168 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4179 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4190 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _814 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _828 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _878 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _868);
    float _879 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _868);
    float _880 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _868);
    float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
    float _885 = _878 * _884;
    float _886 = _879 * _884;
    float _887 = _880 * _884;
    vec4 _892 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _894 = _892.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1066 = sqrt(((_878 * _878) + (_879 * _879)) + (_880 * _880));
        float _1072 = (cbMatDynParam._m0[5u].x * _1066) + cbMatDynParam._m0[5u].y;
        float _4201 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1077 = (cbMatDynParam._m0[5u].z * _1066) + cbMatDynParam._m0[5u].w;
        float _4212 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) - _1073)) + _1073) < ((_894 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _905 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _906 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _924 = fma(_808, cbSceneParam._m0[5u].z, fma(_807, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _806));
    float _927 = fma(_808, cbSceneParam._m0[6u].z, fma(_807, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _806));
    float _930 = fma(_808, cbSceneParam._m0[7u].z, fma(_807, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _806));
    uint _943 = _257 + 9u;
    uint _944 = _943 + uint(cbMatDynParam._m0[0u].w);
    float _950 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_944].x;
    float _951 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_944].y;
    float _952 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_944].z;
    float _4223 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _4245 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _956 = 1.0 - _814;
    float _957 = _953 * _956;
    float _958 = _954 * _956;
    float _959 = _955 * _956;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _814;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _814;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _814;
    float _967 = _964 + 0.039999999105930328369140625;
    float _969 = _965 + 0.039999999105930328369140625;
    float _970 = _966 + 0.039999999105930328369140625;
    vec4 _979 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _905, cbSceneParam._m0[86u].y * _906));
    float _983 = ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * TEXCOORD_5.w) * _979.x;
    float _984 = dot(vec3(_806, _807, _808), vec3(_885, _886, _887));
    float _987 = _984 * 2.0;
    float _991 = (_987 * _806) - _885;
    float _992 = (_987 * _807) - _886;
    float _993 = (_987 * _808) - _887;
    float _997 = abs(dot(vec3(_885, _886, _887), vec3(_806, _807, _808)));
    float _4256 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _999 = sqrt(_809);
    float _1012 = exp2((_999 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_999 * 3.0));
    float _1018 = (1.0 - _1012) * ((_999 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1019 = _1012 * _999;
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1384;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1109 = fma(_1055, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047));
        float _1113 = fma(_1055, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047));
        float _1117 = fma(_1055, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047));
        float _1142 = _1047 + _806;
        float _1143 = _1051 + _807;
        float _1144 = _1055 + _808;
        float _1154 = fma(_1144, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1142)) - _1109;
        float _1155 = fma(_1144, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1142)) - _1113;
        float _1156 = fma(_1144, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1142)) - _1117;
        float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
        float _1173 = ((_1160 * _1154) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1109 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1160 * _1155) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1113 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1160 * _1156) / cbModelParam._m0[34u].z) + ((((((_1117 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        float _1212 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1178.x + (-0.5));
        float _1214 = _1212 * (_1178.y + (-0.5));
        float _1215 = _1212 * (_1178.z + (-0.5));
        float _1222 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1185.x + (-0.5));
        float _1224 = _1222 * (_1185.y + (-0.5));
        float _1225 = _1222 * (_1185.z + (-0.5));
        float _1232 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1192.x + (-0.5));
        float _1234 = _1232 * (_1192.y + (-0.5));
        float _1235 = _1232 * (_1192.z + (-0.5));
        float _1242 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1199.x + (-0.5));
        float _1244 = _1242 * (_1199.y + (-0.5));
        float _1245 = _1242 * (_1199.z + (-0.5));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = _1213 * 0.5;
        float _1250 = _1223 * 0.5;
        float _1251 = _1233 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1266 = (dot(vec3(_806, _807, _808), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1276 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4304 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1278 + 1.0))) + _1283) * _1246;
        float _1293 = _1214 * 0.5;
        float _1294 = _1224 * 0.5;
        float _1295 = _1234 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_806, _807, _808), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4337 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1320 + 1.0))) + _1325) * _1247;
        float _1335 = _1215 * 0.5;
        float _1336 = _1225 * 0.5;
        float _1337 = _1235 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_806, _807, _808), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4370 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1362 + 1.0))) + _1367) * _1248;
        _1384 = _1215;
        _1386 = _1214;
        _1387 = _1213;
        _1388 = _1225;
        _1389 = _1224;
        _1390 = _1223;
        _1391 = _1235;
        _1392 = _1234;
        _1393 = _1233;
        _1394 = _1248;
        _1395 = _1247;
        _1396 = _1246;
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
    }
    else
    {
        _1384 = _1385;
        _1386 = _1385;
        _1387 = _1385;
        _1388 = _1385;
        _1389 = _1385;
        _1390 = _1385;
        _1391 = _1385;
        _1392 = _1385;
        _1393 = _1385;
        _1394 = _1385;
        _1395 = _1385;
        _1396 = _1385;
        _1397 = 0.0;
        _1398 = 0.0;
        _1399 = 0.0;
    }
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1427 = fma(_1055, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047));
        float _1431 = fma(_1055, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047));
        float _1435 = fma(_1055, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047));
        float _1458 = _1047 + _806;
        float _1459 = _1051 + _807;
        float _1460 = _1055 + _808;
        float _1470 = fma(_1460, cbModelParam._m0[30u].z, fma(_1459, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1458)) - _1427;
        float _1471 = fma(_1460, cbModelParam._m0[31u].z, fma(_1459, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1458)) - _1431;
        float _1472 = fma(_1460, cbModelParam._m0[32u].z, fma(_1459, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1458)) - _1435;
        float _1476 = inversesqrt(dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472)));
        float _1489 = ((_1476 * _1470) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1427 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1476 * _1471) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1431 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1491 = ((_1476 * _1472) / cbModelParam._m0[35u].z) + ((((((_1435 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        float _1526 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1493.x + (-0.5));
        float _1528 = _1526 * (_1493.y + (-0.5));
        float _1529 = _1526 * (_1493.z + (-0.5));
        float _1536 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1500.x + (-0.5));
        float _1538 = _1536 * (_1500.y + (-0.5));
        float _1539 = _1536 * (_1500.z + (-0.5));
        float _1546 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1507.x + (-0.5));
        float _1548 = _1546 * (_1507.y + (-0.5));
        float _1549 = _1546 * (_1507.z + (-0.5));
        float _1556 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1514.x + (-0.5));
        float _1558 = _1556 * (_1514.y + (-0.5));
        float _1559 = _1556 * (_1514.z + (-0.5));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = _1527 * 0.5;
        float _1564 = _1537 * 0.5;
        float _1565 = _1547 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_806, _807, _808), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4433 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1590 + 1.0))) + _1595) * _1560;
        float _1605 = _1528 * 0.5;
        float _1606 = _1538 * 0.5;
        float _1607 = _1548 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_806, _807, _808), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4466 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1632 + 1.0))) + _1637) * _1561;
        float _1647 = _1529 * 0.5;
        float _1648 = _1539 * 0.5;
        float _1649 = _1549 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_806, _807, _808), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4499 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1674 + 1.0))) + _1679) * _1562;
        _1696 = _1529;
        _1697 = _1528;
        _1698 = _1527;
        _1699 = _1539;
        _1700 = _1538;
        _1701 = _1537;
        _1702 = _1549;
        _1703 = _1548;
        _1704 = _1547;
        _1705 = _1562;
        _1706 = _1561;
        _1707 = _1560;
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
    }
    else
    {
        _1696 = _1385;
        _1697 = _1385;
        _1698 = _1385;
        _1699 = _1385;
        _1700 = _1385;
        _1701 = _1385;
        _1702 = _1385;
        _1703 = _1385;
        _1704 = _1385;
        _1705 = _1385;
        _1706 = _1385;
        _1707 = _1385;
        _1708 = 0.0;
        _1709 = 0.0;
        _1710 = 0.0;
    }
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1397)) + _1397;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1398)) + _1398;
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1399)) + _1399;
    float _1743 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1746 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1749 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1720));
    float _1764 = _991 * 0.5;
    float _1765 = _992 * 0.5;
    float _1766 = _993 * 0.5;
    float _1767 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1770 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1773 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1807;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1780 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1384, _1388, _1391, _1394));
        float _1784 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1386, _1389, _1392, _1395));
        float _1788 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1387, _1390, _1393, _1396));
        float _1795 = dot(vec4(cbModelParam._m0[39u]), vec4(_1764, _1765, _1766, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1795) ? 0.0 : (isnan(0.0) ? _1795 : max(0.0, _1795))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1818;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1809 = dot(vec4(cbModelParam._m0[40u]), vec4(_1764, _1765, _1766, 1.0));
        _1818 = dot(vec3(isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1809) ? 0.0 : (isnan(0.0) ? _1809 : max(0.0, _1809))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1818 = 1.0;
    }
    float _1822 = (_1818 * cbModelParam._m0[1u].x) + (_1807 * (1.0 - cbModelParam._m0[1u].x));
    float _1832 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _809);
    float _1833 = isnan(_1832) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1832 : min(cbModelParam._m0[25u].z, _1832));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1880 = fma(_1055, cbModelParam._m0[13u].z, fma(_1051, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047)) + cbModelParam._m0[13u].w;
        float _1884 = fma(_1055, cbModelParam._m0[14u].z, fma(_1051, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047)) + cbModelParam._m0[14u].w;
        float _1888 = fma(_1055, cbModelParam._m0[15u].z, fma(_1051, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047)) + cbModelParam._m0[15u].w;
        float _1891 = fma(_993, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991));
        float _1894 = fma(_993, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991));
        float _1897 = fma(_993, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991));
        float _1925;
        if (_1891 > 0.0)
        {
            _1925 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1925 = frontier_phi_17_15_ladder;
        }
        float _2096;
        if (_1894 > 0.0)
        {
            _2096 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2096 = frontier_phi_26_22_ladder;
        }
        float _2391;
        if (_1897 > 0.0)
        {
            _2391 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2391 = frontier_phi_38_33_ladder;
        }
        float _2393 = isnan(_2096) ? _1925 : (isnan(_1925) ? _2096 : min(_1925, _2096));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1891) + _1880;
        float _2399 = (_2394 * _1894) + _1884;
        float _2400 = (_2394 * _1897) + _1888;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2403 = (-1.0) - _2401;
        float _2405 = _2401 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2400 > _2405) || ((_2400 < _2403) || ((_2399 > _2405) || ((_2399 < _2403) || ((_2398 < _2403) || (_2398 > _2405))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2545 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2400, cbModelParam._m0[9u].z, fma(_2399, cbModelParam._m0[9u].y, _2398 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2400, cbModelParam._m0[10u].z, fma(_2399, cbModelParam._m0[10u].y, _2398 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2400, cbModelParam._m0[11u].z, fma(_2399, cbModelParam._m0[11u].y, _2398 * cbModelParam._m0[11u].x))), _1833);
            frontier_phi_16_38_ladder = _2545.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2545.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2545.x * cbModelParam._m0[1u].y;
        }
        _1913 = frontier_phi_16_38_ladder_2;
        _1915 = frontier_phi_16_38_ladder_1;
        _1917 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_991, _992, _993), _1833);
        _1913 = _1901.x * cbModelParam._m0[1u].y;
        _1915 = _1901.y * cbModelParam._m0[1u].y;
        _1917 = _1901.z * cbModelParam._m0[1u].y;
    }
    float _1921 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _809);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1921 : min(cbModelParam._m0[25u].w, _1921));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1975 = fma(_1055, cbModelParam._m0[21u].z, fma(_1051, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047)) + cbModelParam._m0[21u].w;
        float _1979 = fma(_1055, cbModelParam._m0[22u].z, fma(_1051, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047)) + cbModelParam._m0[22u].w;
        float _1983 = fma(_1055, cbModelParam._m0[23u].z, fma(_1051, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047)) + cbModelParam._m0[23u].w;
        float _1986 = fma(_993, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991));
        float _1989 = fma(_993, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991));
        float _1992 = fma(_993, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991));
        float _2101;
        if (_1986 > 0.0)
        {
            _2101 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2101 = frontier_phi_28_24_ladder;
        }
        float _2418;
        if (_1989 > 0.0)
        {
            _2418 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2418 = frontier_phi_40_35_ladder;
        }
        float _2756;
        if (_1992 > 0.0)
        {
            _2756 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2756 = frontier_phi_50_47_ladder;
        }
        float _2758 = isnan(_2418) ? _2101 : (isnan(_2101) ? _2418 : min(_2101, _2418));
        float _2759 = isnan(_2756) ? _2758 : (isnan(_2758) ? _2756 : min(_2758, _2756));
        float _2763 = (_2759 * _1986) + _1975;
        float _2764 = (_2759 * _1989) + _1979;
        float _2765 = (_2759 * _1992) + _1983;
        float _2766 = _2759 * 9.9999997473787516355514526367188e-05;
        float _2767 = (-1.0) - _2766;
        float _2769 = _2766 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2765 > _2769) || ((_2765 < _2767) || ((_2764 > _2769) || ((_2764 < _2767) || ((_2763 < _2767) || (_2763 > _2769))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2765, cbModelParam._m0[17u].z, fma(_2764, cbModelParam._m0[17u].y, _2763 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2765, cbModelParam._m0[18u].z, fma(_2764, cbModelParam._m0[18u].y, _2763 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2765, cbModelParam._m0[19u].z, fma(_2764, cbModelParam._m0[19u].y, _2763 * cbModelParam._m0[19u].x))), _1922);
            frontier_phi_25_50_ladder = _2887.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2887.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2887.x * cbModelParam._m0[1u].z;
        }
        _2011 = frontier_phi_25_50_ladder_2;
        _2013 = frontier_phi_25_50_ladder_1;
        _2015 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_991, _992, _993), _1922);
        _2011 = _1995.x * cbModelParam._m0[1u].z;
        _2013 = _1995.y * cbModelParam._m0[1u].z;
        _2015 = _1995.z * cbModelParam._m0[1u].z;
    }
    float _2028 = (((_1018 * _967) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_2011 - _1913)) + _1913);
    float _2030 = (((_1018 * _969) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_2013 - _1915)) + _1915);
    float _2032 = (((_1018 * _970) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_2015 - _1917)) + _1917);
    float _2035 = fma(_2032, cbSceneParam._m0[89u].z, fma(_2030, cbSceneParam._m0[89u].y, _2028 * cbSceneParam._m0[89u].x));
    float _2038 = fma(_2032, cbSceneParam._m0[90u].z, fma(_2030, cbSceneParam._m0[90u].y, _2028 * cbSceneParam._m0[90u].x));
    float _2041 = fma(_2032, cbSceneParam._m0[91u].z, fma(_2030, cbSceneParam._m0[91u].y, _2028 * cbSceneParam._m0[91u].x));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2088 = _2075 / _2087;
    float _2089 = _2079 / _2087;
    float _2090 = _2083 / _2087;
    float _2237;
    float _2238;
    float _2239;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2117 = ((uint(_2090 > cbSceneParam._m0[59u].y) + uint(_2090 > cbSceneParam._m0[59u].x)) + uint(_2090 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2118 = _2117 + 43u;
        uint _2126 = _2117 + 44u;
        uint _2134 = _2117 + 45u;
        uint _2142 = _2117 + 46u;
        float _2153 = fma(_2087, cbSceneParam._m0[_2118].w, fma(_2083, cbSceneParam._m0[_2118].z, fma(_2079, cbSceneParam._m0[_2118].y, _2075 * cbSceneParam._m0[_2118].x)));
        float _2157 = fma(_2087, cbSceneParam._m0[_2126].w, fma(_2083, cbSceneParam._m0[_2126].z, fma(_2079, cbSceneParam._m0[_2126].y, _2075 * cbSceneParam._m0[_2126].x)));
        float _2165 = fma(_2087, cbSceneParam._m0[_2142].w, fma(_2083, cbSceneParam._m0[_2142].z, fma(_2079, cbSceneParam._m0[_2142].y, _2075 * cbSceneParam._m0[_2142].x)));
        float _2170 = cbSceneParam._m0[33u].z * _2165;
        float _2172 = cbSceneParam._m0[33u].w * _2165;
        float _2175 = fma(_2087, cbSceneParam._m0[_2134].w, fma(_2083, cbSceneParam._m0[_2134].z, fma(_2079, cbSceneParam._m0[_2134].y, _2075 * cbSceneParam._m0[_2134].x))) / _2165;
        float _2223 = (cbSceneParam._m0[33u].x - sqrt(((_2089 * _2089) + (_2088 * _2088)) + (_2090 * _2090))) * cbSceneParam._m0[33u].y;
        float _4625 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2230 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 + _2153) / _2165, (_2172 + _2157) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2172 + _2153) / _2165, (_2157 - _2170) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 - _2170) / _2165, (_2157 - _2172) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 - _2172) / _2165, (_2170 + _2157) / _2165), _2175), 0.0)).x), vec4(0.25)));
        _2237 = 1.0 - (_2230 * cbSceneParam._m0[34u].x);
        _2238 = 1.0 - (_2230 * cbSceneParam._m0[34u].y);
        _2239 = 1.0 - (_2230 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2237 = 1.0;
        _2238 = 1.0;
        _2239 = 1.0;
    }
    float _2303;
    float _2305;
    float _2307;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2291 = fma(_2087, cbSceneParam._m0[63u].w, fma(_2083, cbSceneParam._m0[63u].z, fma(_2079, cbSceneParam._m0[63u].y, _2075 * cbSceneParam._m0[63u].x)));
        float _2292 = fma(_2087, cbSceneParam._m0[60u].w, fma(_2083, cbSceneParam._m0[60u].z, fma(_2079, cbSceneParam._m0[60u].y, _2075 * cbSceneParam._m0[60u].x))) / _2291;
        float _2293 = fma(_2087, cbSceneParam._m0[61u].w, fma(_2083, cbSceneParam._m0[61u].z, fma(_2079, cbSceneParam._m0[61u].y, _2075 * cbSceneParam._m0[61u].x))) / _2291;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2292 >= cbSceneParam._m0[64u].x) && (_2293 >= cbSceneParam._m0[64u].y)) && (_2292 <= cbSceneParam._m0[64u].z)) && (_2293 <= cbSceneParam._m0[64u].w))
        {
            float _2431 = fma(_2087, cbSceneParam._m0[62u].w, fma(_2083, cbSceneParam._m0[62u].z, fma(_2079, cbSceneParam._m0[62u].y, _2075 * cbSceneParam._m0[62u].x))) / _2291;
            float _2435 = isnan(cbSceneParam._m0[41u].w) ? _2431 : (isnan(_2431) ? cbSceneParam._m0[41u].w : max(_2431, cbSceneParam._m0[41u].w));
            float _2478 = (cbSceneParam._m0[33u].x - sqrt(((_2089 * _2089) + (_2088 * _2088)) + (_2090 * _2090))) * cbSceneParam._m0[33u].y;
            float _4641 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
            float _2485 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2292, cbSceneParam._m0[33u].w + _2293), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2292, _2293 - cbSceneParam._m0[33u].z), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2292 - cbSceneParam._m0[33u].z, _2293 - cbSceneParam._m0[33u].w), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2292 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2293), _2435), 0.0)).x), vec4(0.25)));
            float _2489 = 1.0 - (_2485 * cbSceneParam._m0[34u].x);
            float _2490 = 1.0 - (_2485 * cbSceneParam._m0[34u].y);
            float _2491 = 1.0 - (_2485 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2491) ? _2239 : (isnan(_2239) ? _2491 : min(_2239, _2491));
            frontier_phi_37_36_ladder_1 = isnan(_2490) ? _2238 : (isnan(_2238) ? _2490 : min(_2238, _2490));
            frontier_phi_37_36_ladder_2 = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
        }
        else
        {
            frontier_phi_37_36_ladder = _2239;
            frontier_phi_37_36_ladder_1 = _2238;
            frontier_phi_37_36_ladder_2 = _2237;
        }
        _2303 = frontier_phi_37_36_ladder_2;
        _2305 = frontier_phi_37_36_ladder_1;
        _2307 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2303 = _2237;
        _2305 = _2238;
        _2307 = _2239;
    }
    uvec4 _2312 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2314 = _2312.x * 14u;
    uint _2315 = _2314 + 13u;
    float _2322 = _983 + (-1.0);
    float _2327 = (cbLight._m0[_2315].x * _2322) + 1.0;
    float _2328 = (cbLight._m0[_2315].y * _2322) + 1.0;
    float _2329 = (cbLight._m0[_2315].z * _2322) + 1.0;
    float _2330 = (cbLight._m0[_2315].w * _2322) + 1.0;
    uint _2331 = _2314 + 5u;
    float _2337 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
    uint _2341 = _2314 + 4u;
    float _2350 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
    uint _2354 = _2314 | 1u;
    float _2365 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_806, _807, _808));
    float _2368 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_806, _807, _808));
    float _4677 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _4688 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2373 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * 0.3183098733425140380859375;
    float _2375 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * 0.3183098733425140380859375;
    float _2382 = ((cbLight._m0[_2331].x * _2337) * _2375) + (((cbLight._m0[_2341].x * _2303) * _2350) * _2373);
    float _2383 = ((_2337 * cbLight._m0[_2331].y) * _2375) + (((cbLight._m0[_2341].y * _2305) * _2350) * _2373);
    float _2384 = ((_2337 * cbLight._m0[_2331].z) * _2375) + (((cbLight._m0[_2341].z * _2307) * _2350) * _2373);
    uvec4 _2388 = floatBitsToUint(cbLight._m0[_2314 + 12u]);
    bool _2390 = _2388.x == 0u;
    float _2492;
    float _2494;
    float _2496;
    if (_2390)
    {
        _2492 = _2382;
        _2494 = _2383;
        _2496 = _2384;
    }
    else
    {
        uint _2500 = _2314 + 6u;
        float _2516 = (dot(vec3(cbLight._m0[_2314 + 2u].xyz), vec3(_806, _807, _808)) * 0.5) + 0.5;
        float _2517 = _2516 * _2516;
        float _4699 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2518 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2519 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2492 = (((cbLight._m0[_2500].x * 0.3183098733425140380859375) * _2518) * _2519) + _2382;
        _2494 = (((cbLight._m0[_2500].y * 0.3183098733425140380859375) * _2518) * _2519) + _2383;
        _2496 = (((cbLight._m0[_2500].z * 0.3183098733425140380859375) * _2518) * _2519) + _2384;
    }
    bool _2499 = _2388.y == 0u;
    float _2554;
    float _2556;
    float _2558;
    if (_2499)
    {
        _2554 = _2492;
        _2556 = _2494;
        _2558 = _2496;
    }
    else
    {
        uint _2727 = _2314 + 7u;
        float _2743 = (dot(vec3(cbLight._m0[_2314 + 3u].xyz), vec3(_806, _807, _808)) * 0.5) + 0.5;
        float _2744 = _2743 * _2743;
        float _4715 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2745 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2746 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2554 = (((cbLight._m0[_2727].x * 0.3183098733425140380859375) * _2745) * _2746) + _2492;
        _2556 = (((cbLight._m0[_2727].y * 0.3183098733425140380859375) * _2745) * _2746) + _2494;
        _2558 = (((cbLight._m0[_2727].z * 0.3183098733425140380859375) * _2745) * _2746) + _2496;
    }
    uint _2561 = _2314 + 8u;
    float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _809) * 0.949999988079071044921875);
    float _2575 = _2574 * _2574;
    float _2576 = cbLight._m0[_2314].x + _885;
    float _2577 = cbLight._m0[_2314].y + _886;
    float _2578 = cbLight._m0[_2314].z + _887;
    float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
    float _2583 = _2582 * _2576;
    float _2584 = _2582 * _2577;
    float _2585 = _2582 * _2578;
    float _2586 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2314].xyz));
    float _4731 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _4742 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _2590 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2591 = dot(vec3(_806, _807, _808), vec3(_2583, _2584, _2585));
    float _4753 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2594 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2595 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2583, _2584, _2585));
    float _4764 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2599 = _2575 * _2575;
    float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
    float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0);
    float _2612 = 0.959999978542327880859375 - _964;
    float _2614 = 0.959999978542327880859375 - _965;
    float _2615 = 0.959999978542327880859375 - _966;
    float _2622 = 1.0 - _2575;
    float _2633 = (0.5 / (((_2590 * ((_2589 * _2622) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2622) + _2575) * _2589))) * _2589;
    float _4775 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2635 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
    uint _2649 = _2314 + 9u;
    float _2660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _809) * 0.949999988079071044921875);
    float _2661 = _2660 * _2660;
    float _2662 = cbLight._m0[_2354].x + _885;
    float _2663 = cbLight._m0[_2354].y + _886;
    float _2664 = cbLight._m0[_2354].z + _887;
    float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
    float _2669 = _2668 * _2662;
    float _2670 = _2668 * _2663;
    float _2671 = _2668 * _2664;
    float _2672 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2354].xyz));
    float _4786 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2675 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
    float _2676 = dot(vec3(_806, _807, _808), vec3(_2669, _2670, _2671));
    float _4797 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2679 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
    float _2680 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2669, _2670, _2671));
    float _4808 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2684 = _2661 * _2661;
    float _2688 = ((_2679 * _2679) * (_2684 + (-1.0))) + 1.0;
    float _2695 = exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0);
    float _2702 = 1.0 - _2661;
    float _2712 = (0.5 / (((_2590 * ((_2675 * _2702) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2702) + _2661) * _2675))) * _2675;
    float _4819 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2714 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2684 / ((_2688 * _2688) * 3.141590118408203125));
    float _2724 = (((((_2695 * _2612) + _967) * cbLight._m0[_2649].x) * _2714) * _2337) + ((((cbLight._m0[_2561].x * _2303) * ((_2611 * _2612) + _967)) * _2635) * _2350);
    float _2725 = (((((_2695 * _2614) + _969) * cbLight._m0[_2649].y) * _2714) * _2337) + ((((cbLight._m0[_2561].y * _2305) * ((_2611 * _2614) + _969)) * _2635) * _2350);
    float _2726 = (((((_2695 * _2615) + _970) * cbLight._m0[_2649].z) * _2714) * _2337) + ((((cbLight._m0[_2561].z * _2307) * ((_2611 * _2615) + _970)) * _2635) * _2350);
    float _2782;
    float _2784;
    float _2786;
    if (_2390)
    {
        _2782 = _2724;
        _2784 = _2725;
        _2786 = _2726;
    }
    else
    {
        uint _2788 = _2314 + 2u;
        uint _2792 = _2314 + 10u;
        float _2806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2788].w)) * _809) * 0.949999988079071044921875);
        float _2807 = _2806 * _2806;
        float _2808 = cbLight._m0[_2788].x + _885;
        float _2809 = cbLight._m0[_2788].y + _886;
        float _2810 = cbLight._m0[_2788].z + _887;
        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
        float _2815 = _2814 * _2808;
        float _2816 = _2814 * _2809;
        float _2817 = _2814 * _2810;
        float _2818 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2788].xyz));
        float _4830 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2822 = dot(vec3(_806, _807, _808), vec3(_2815, _2816, _2817));
        float _4841 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2825 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2826 = dot(vec3(cbLight._m0[_2788].xyz), vec3(_2815, _2816, _2817));
        float _4852 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2830 = _2807 * _2807;
        float _2834 = ((_2825 * _2825) * (_2830 + (-1.0))) + 1.0;
        float _2841 = exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0);
        float _2848 = 1.0 - _2807;
        float _2858 = (0.5 / (((_2590 * ((_2821 * _2848) + _2807)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2848) + _2807) * _2821))) * _2821;
        float _4863 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2860 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2830 / ((_2834 * _2834) * 3.141590118408203125));
        float _2861 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2782 = (((((_2841 * _2612) + _967) * cbLight._m0[_2792].x) * _2860) * _2861) + _2724;
        _2784 = (((((_2841 * _2614) + _969) * cbLight._m0[_2792].y) * _2860) * _2861) + _2725;
        _2786 = (((((_2841 * _2615) + _970) * cbLight._m0[_2792].z) * _2860) * _2861) + _2726;
    }
    float _2892;
    float _2894;
    float _2896;
    if (_2499)
    {
        _2892 = _2782;
        _2894 = _2784;
        _2896 = _2786;
    }
    else
    {
        uint _2903 = _2314 + 3u;
        uint _2907 = _2314 + 11u;
        float _2921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2903].w)) * _809) * 0.949999988079071044921875);
        float _2922 = _2921 * _2921;
        float _2923 = cbLight._m0[_2903].x + _885;
        float _2924 = cbLight._m0[_2903].y + _886;
        float _2925 = cbLight._m0[_2903].z + _887;
        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
        float _2930 = _2929 * _2923;
        float _2931 = _2929 * _2924;
        float _2932 = _2929 * _2925;
        float _2933 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2903].xyz));
        float _4879 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _2937 = dot(vec3(_806, _807, _808), vec3(_2930, _2931, _2932));
        float _4890 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2940 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
        float _2941 = dot(vec3(cbLight._m0[_2903].xyz), vec3(_2930, _2931, _2932));
        float _4901 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2945 = _2922 * _2922;
        float _2949 = ((_2940 * _2940) * (_2945 + (-1.0))) + 1.0;
        float _2956 = exp2(log2(1.0 - (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) * 5.0);
        float _2963 = 1.0 - _2922;
        float _2973 = (0.5 / (((_2590 * ((_2936 * _2963) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2963) + _2922) * _2936))) * _2936;
        float _4912 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        float _2975 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2945 / ((_2949 * _2949) * 3.141590118408203125));
        float _2976 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2892 = (((((_2956 * _2612) + _967) * cbLight._m0[_2907].x) * _2975) * _2976) + _2782;
        _2894 = (((((_2956 * _2614) + _969) * cbLight._m0[_2907].y) * _2975) * _2976) + _2784;
        _2896 = (((((_2956 * _2615) + _970) * cbLight._m0[_2907].z) * _2975) * _2976) + _2786;
    }
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    if (_2312.y == 0u)
    {
        uvec4 _2997 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2998 = _2997.x;
        uint _3009 = uint((float(_2997.y) * floor(float(uint(cbSceneParam._m0[85u].y * _906) / _2998))) + floor(float(uint(cbSceneParam._m0[85u].x * _905) / _2998)));
        float _3019 = (log2(_2090 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3020 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        uint _3023 = uint(isnan(14.0) ? _3020 : (isnan(_3020) ? 14.0 : min(_3020, 14.0)));
        uvec4 _3028 = texelFetch(g_lightClusterGridBuffer, int(((_3023 << 2u) + (_3009 << 6u)) >> 2u));
        uint _3029 = _3028.x;
        uint _3030 = _2997.z;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        if (((((1u << ((_3030 >> 4u) & 15u)) + 4294967295u) & _3029) == 0u) || ((_3030 & 240u) == 0u))
        {
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
        }
        else
        {
            float _3110;
            float _3112;
            float _3114;
            float _3116;
            float _3118;
            float _3120;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            uint _3267 = 0u;
            uint _3276;
            bool _3277;
            for (;;)
            {
                _3276 = texelFetch(g_lightClassification, int((((_3023 << 5u) + (_3009 << 9u)) + (_3267 << 2u)) >> 2u)).x;
                _3277 = _3276 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3277)
                {
                    frontier_phi_71_pred = _3266;
                    frontier_phi_71_pred_1 = _3265;
                    frontier_phi_71_pred_2 = _3264;
                    frontier_phi_71_pred_3 = _3263;
                    frontier_phi_71_pred_4 = _3262;
                    frontier_phi_71_pred_5 = _3261;
                }
                else
                {
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    uint _3412;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3266;
                    _3412 = _3276;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    for (;;)
                    {
                        uint _3416 = uint(findLSB(_3412)) + (_3267 << 5u);
                        uint _3413 = (_3412 + 4294967295u) & _3412;
                        uint _3418 = _3416 * 48u;
                        vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 3u)).x));
                        uint _3438 = (_3416 * 48u) + 4u;
                        vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3438)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 3u)).x));
                        uint _3457 = (_3416 * 48u) + 8u;
                        vec3 _3468 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3457)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 2u)).x));
                        float _3472 = _3432.x - _2088;
                        float _3473 = _3432.y - _2089;
                        float _3474 = _3432.z - _2090;
                        float _3475 = dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474));
                        float _3478 = inversesqrt(_3475);
                        float _3479 = _3478 * _3472;
                        float _3480 = _3478 * _3473;
                        float _3481 = _3478 * _3474;
                        float _3482 = dot(vec3(_924, _927, _930), vec3(_3479, _3480, _3481));
                        float _3487 = 1.0 - (_3475 * _3432.w);
                        float _4938 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3488 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3489 = sqrt(_3475) * _3451.w;
                        float _3492 = 1.39999997615814208984375 / (_3489 + 1.39999997615814208984375);
                        float _3493 = _3492 * _3492;
                        float _3496 = ((1.0 - _3493) * _3482) + _3493;
                        float _3499 = _3489 * _3489;
                        float _3503 = ((isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0))) * _3488) / ((_3499 * 0.699999988079071044921875) + 1.0);
                        float _3507 = (-0.0) - _2088;
                        float _3508 = (-0.0) - _2089;
                        float _3509 = (-0.0) - _2090;
                        float _3513 = inversesqrt(dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509)));
                        float _3514 = _3513 * _3507;
                        float _3515 = _3513 * _3508;
                        float _3516 = _3513 * _3509;
                        float _3523 = exp2(log2(1.0 / ((_3499 * 3.5) + 5.0)) * 0.25);
                        float _3524 = 1.0 - _999;
                        float _3531 = sqrt(1.0 - ((1.0 - (_3524 * _3524)) * (1.0 - (_3523 * _3523))));
                        float _3532 = _3531 * _3531;
                        float _3533 = _3532 * _3532;
                        float _3534 = _3514 + _3479;
                        float _3535 = _3515 + _3480;
                        float _3536 = _3516 + _3481;
                        float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                        float _3544 = dot(vec3(_924, _927, _930), vec3(_3514, _3515, _3516));
                        float _4954 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3547 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                        float _3548 = dot(vec3(_924, _927, _930), vec3(_3540 * _3534, _3540 * _3535, _3540 * _3536));
                        float _4965 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3551 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                        float _3555 = ((_3551 * _3551) * (_3533 + (-1.0))) + 1.0;
                        float _3556 = _3492 * _3532;
                        float _3557 = _3556 * _3556;
                        float _3560 = ((1.0 - _3557) * _3482) + _3557;
                        float _4976 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3561 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                        float _3562 = 1.0 - _3532;
                        float _3572 = (0.5 / (((_3561 * ((_3547 * _3562) + _3532)) + 9.9999999392252902907785028219223e-09) + (((_3561 * _3562) + _3532) * _3547))) * _3561;
                        float _4987 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3583 = (((_3533 * 3.1415927410125732421875) * (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) / ((_3555 * _3555) * ((_3499 * 2.1991131305694580078125) + 3.141590118408203125))) * _3488;
                        _3336 = (_3503 * _3451.x) + _3409;
                        _3337 = (_3503 * _3451.y) + _3410;
                        _3338 = (_3503 * _3451.z) + _3411;
                        _3333 = (_3583 * _3468.x) + _3406;
                        _3334 = (_3583 * _3468.y) + _3407;
                        _3335 = (_3583 * _3468.z) + _3408;
                        if (_3413 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3338;
                            _3412 = _3413;
                        }
                    }
                    frontier_phi_71_pred = _3338;
                    frontier_phi_71_pred_1 = _3337;
                    frontier_phi_71_pred_2 = _3336;
                    frontier_phi_71_pred_3 = _3335;
                    frontier_phi_71_pred_4 = _3334;
                    frontier_phi_71_pred_5 = _3333;
                }
                _3120 = frontier_phi_71_pred;
                _3118 = frontier_phi_71_pred_1;
                _3116 = frontier_phi_71_pred_2;
                _3114 = frontier_phi_71_pred_3;
                _3112 = frontier_phi_71_pred_4;
                _3110 = frontier_phi_71_pred_5;
                uint _3268 = _3267 + 1u;
                if (_3268 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3261 = _3110;
                    _3262 = _3112;
                    _3263 = _3114;
                    _3264 = _3116;
                    _3265 = _3118;
                    _3266 = _3120;
                    _3267 = _3268;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
        }
        uvec4 _3123 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3124 = _3123.z;
        uint _3126 = (_3124 >> 8u) & 15u;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        if (((4294967295u << _3126) & _3029) == 0u)
        {
            _3229 = _3109;
            _3231 = _3111;
            _3233 = _3113;
            _3235 = _3115;
            _3237 = _3117;
            _3239 = _3119;
        }
        else
        {
            float _3254 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
            float _3255 = _3254 * _2088;
            float _3256 = _3254 * _2089;
            float _3257 = _3254 * _2090;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3126 < ((_3124 >> 12u) & 15u))
            {
                float _3230;
                float _3232;
                float _3234;
                float _3236;
                float _3238;
                float _3240;
                float _3389 = _3109;
                float _3390 = _3111;
                float _3391 = _3113;
                float _3392 = _3115;
                float _3393 = _3117;
                float _3394 = _3119;
                uint _3395 = _3126;
                uint _3404;
                bool _3405;
                for (;;)
                {
                    _3404 = texelFetch(g_lightClassification, int((((_3023 << 5u) + (_3009 << 9u)) + (_3395 << 2u)) >> 2u)).x;
                    _3405 = _3404 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3405)
                    {
                        frontier_phi_82_pred = _3394;
                        frontier_phi_82_pred_1 = _3393;
                        frontier_phi_82_pred_2 = _3392;
                        frontier_phi_82_pred_3 = _3391;
                        frontier_phi_82_pred_4 = _3390;
                        frontier_phi_82_pred_5 = _3389;
                    }
                    else
                    {
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3610 = _3389;
                        float _3611 = _3390;
                        float _3612 = _3391;
                        float _3613 = _3392;
                        float _3614 = _3393;
                        float _3615 = _3394;
                        uint _3616 = _3404;
                        uint _3617;
                        vec4 _3642;
                        float _3643;
                        vec4 _3658;
                        vec3 _3670;
                        vec4 _3685;
                        vec4 _3701;
                        float _3747;
                        bool _3748;
                        for (;;)
                        {
                            uint _3627 = ((_3395 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3616));
                            _3617 = (_3616 + 4294967295u) & _3616;
                            uint _3629 = _3627 * 40u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            _3643 = _3642.w;
                            uint _3645 = (_3627 * 40u) + 4u;
                            _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3660 = (_3627 * 40u) + 8u;
                            _3670 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x));
                            uint _3672 = (_3627 * 40u) + 16u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3688 = (_3627 * 40u) + 20u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3703 = (_3627 * 40u) + 24u;
                            vec4 _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            uint _3722 = (_3627 * 40u) + 28u;
                            vec4 _3735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 3u)).x));
                            _3747 = fma(_2090, _3735.z, fma(_2089, _3735.y, _3735.x * _2088)) + _3735.w;
                            _3748 = !((fma(_2090, _3716.z, fma(_2089, _3716.y, _3716.x * _2088)) + _3716.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3748)
                            {
                                float _3775 = _3642.x - _2088;
                                float _3776 = _3642.y - _2089;
                                float _3777 = _3642.z - _2090;
                                float _3778 = dot(vec3(_3775, _3776, _3777), vec3(_3775, _3776, _3777));
                                float _3781 = inversesqrt(_3778);
                                float _3782 = _3781 * _3775;
                                float _3783 = _3781 * _3776;
                                float _3784 = _3781 * _3777;
                                float _3788 = 1.0 - (_3778 / (_3643 * _3643));
                                float _4998 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3793 = sqrt(_3778) * _3658.w;
                                float _3795 = 1.39999997615814208984375 / (_3793 + 1.39999997615814208984375);
                                float _3796 = _3795 * _3795;
                                float _3799 = ((1.0 - _3796) * dot(vec3(_3782, _3783, _3784), vec3(_924, _927, _930))) + _3796;
                                float _3802 = _3793 * _3793;
                                float _3806 = (fma(_2090, _3685.z, fma(_2089, _3685.y, _3685.x * _2088)) + _3685.w) / _3747;
                                float _3807 = (fma(_2090, _3701.z, fma(_2089, _3701.y, _3701.x * _2088)) + _3701.w) / _3747;
                                float _3811 = 1.0 - dot(vec2(_3806, _3807), vec2(_3806, _3807));
                                float _5014 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3812 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3813 = _3812 * (((isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0))) * _3789) / ((_3802 * 0.699999988079071044921875) + 1.0));
                                float _3825 = exp2(log2(1.0 / ((_3802 * 3.5) + 5.0)) * 0.25);
                                float _3826 = 1.0 - _999;
                                float _3833 = sqrt(1.0 - ((1.0 - (_3826 * _3826)) * (1.0 - (_3825 * _3825))));
                                float _3834 = _3833 * _3833;
                                float _3835 = _3834 * _3834;
                                float _3836 = _3782 - _3255;
                                float _3837 = _3783 - _3256;
                                float _3838 = _3784 - _3257;
                                float _3842 = inversesqrt(dot(vec3(_3836, _3837, _3838), vec3(_3836, _3837, _3838)));
                                float _3846 = dot(vec3(_924, _927, _930), vec3((-0.0) - _3255, (-0.0) - _3256, (-0.0) - _3257));
                                float _5025 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3849 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3850 = dot(vec3(_924, _927, _930), vec3(_3842 * _3836, _3842 * _3837, _3842 * _3838));
                                float _5036 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3853 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3857 = ((_3853 * _3853) * (_3835 + (-1.0))) + 1.0;
                                float _3858 = _3795 * _3834;
                                float _3859 = _3858 * _3858;
                                float _3865 = ((1.0 - _3859) * dot(vec3(_924, _927, _930), vec3(_3782, _3783, _3784))) + _3859;
                                float _5047 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3866 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3867 = 1.0 - _3834;
                                float _3877 = (0.5 / (((_3866 * ((_3849 * _3867) + _3834)) + 9.9999999392252902907785028219223e-09) + (((_3866 * _3867) + _3834) * _3849))) * _3866;
                                float _5058 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3887 = (_3812 * _3789) * (((_3835 * 3.1415927410125732421875) * (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0)))) / ((_3857 * _3857) * ((_3802 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3813 * _3658.z;
                                frontier_phi_88_pred_1 = _3813 * _3658.y;
                                frontier_phi_88_pred_2 = _3813 * _3658.x;
                                frontier_phi_88_pred_3 = _3887 * _3670.z;
                                frontier_phi_88_pred_4 = _3887 * _3670.y;
                                frontier_phi_88_pred_5 = _3887 * _3670.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3896 = frontier_phi_88_pred;
                            _3895 = frontier_phi_88_pred_1;
                            _3894 = frontier_phi_88_pred_2;
                            _3893 = frontier_phi_88_pred_3;
                            _3892 = frontier_phi_88_pred_4;
                            _3891 = frontier_phi_88_pred_5;
                            _3600 = _3894 + _3613;
                            _3601 = _3895 + _3614;
                            _3602 = _3896 + _3615;
                            _3597 = _3891 + _3610;
                            _3598 = _3892 + _3611;
                            _3599 = _3893 + _3612;
                            if (_3617 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3617;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3602;
                        frontier_phi_82_pred_1 = _3601;
                        frontier_phi_82_pred_2 = _3600;
                        frontier_phi_82_pred_3 = _3599;
                        frontier_phi_82_pred_4 = _3598;
                        frontier_phi_82_pred_5 = _3597;
                    }
                    _3240 = frontier_phi_82_pred;
                    _3238 = frontier_phi_82_pred_1;
                    _3236 = frontier_phi_82_pred_2;
                    _3234 = frontier_phi_82_pred_3;
                    _3232 = frontier_phi_82_pred_4;
                    _3230 = frontier_phi_82_pred_5;
                    uint _3396 = _3395 + 1u;
                    if (_3396 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3389 = _3230;
                        _3390 = _3232;
                        _3391 = _3234;
                        _3392 = _3236;
                        _3393 = _3238;
                        _3394 = _3240;
                        _3395 = _3396;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3236;
                frontier_phi_63_64_ladder_1 = _3240;
                frontier_phi_63_64_ladder_2 = _3238;
                frontier_phi_63_64_ladder_3 = _3234;
                frontier_phi_63_64_ladder_4 = _3232;
                frontier_phi_63_64_ladder_5 = _3230;
            }
            else
            {
                frontier_phi_63_64_ladder = _3115;
                frontier_phi_63_64_ladder_1 = _3119;
                frontier_phi_63_64_ladder_2 = _3117;
                frontier_phi_63_64_ladder_3 = _3113;
                frontier_phi_63_64_ladder_4 = _3111;
                frontier_phi_63_64_ladder_5 = _3109;
            }
            _3229 = frontier_phi_63_64_ladder_5;
            _3231 = frontier_phi_63_64_ladder_4;
            _3233 = frontier_phi_63_64_ladder_3;
            _3235 = frontier_phi_63_64_ladder;
            _3237 = frontier_phi_63_64_ladder_2;
            _3239 = frontier_phi_63_64_ladder_1;
        }
        float _3244 = isnan(1.0) ? _983 : (isnan(_983) ? 1.0 : min(_983, 1.0));
        _3042 = (_3244 * _3235) + _2554;
        _3044 = (_3244 * _3237) + _2556;
        _3046 = (_3244 * _3239) + _2558;
        _3048 = ((_3229 * _967) * _3244) + _2892;
        _3050 = ((_3231 * _969) * _3244) + _2894;
        _3052 = ((_3233 * _970) * _3244) + _2896;
    }
    else
    {
        _3042 = _2554;
        _3044 = _2556;
        _3046 = _2558;
        _3048 = _2892;
        _3050 = _2894;
        _3052 = _2896;
    }
    float _5074 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _5085 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _5096 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _3069 = ((isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_3042 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _983))) + ((_3048 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1822)) * cbPerFrame._m0[3u].x);
    float _3070 = ((isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_3044 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _983))) + ((_3050 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1822)) * cbPerFrame._m0[3u].x);
    float _3071 = ((isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * (_3046 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _983))) + ((_3052 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1822)) * cbPerFrame._m0[3u].x);
    uint _3072 = _257 + 6u;
    float _3080 = _905 / cbSceneParam._m0[86u].x;
    float _3081 = _906 / cbSceneParam._m0[86u].y;
    vec4 _3095 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3080, _3081, (log2((isnan(cbSceneParam._m0[77u].w) ? _828 : (isnan(_828) ? cbSceneParam._m0[77u].w : min(_828, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3097 = _3095.x;
    float _3098 = _3095.y;
    float _3099 = _3095.z;
    float _3100 = _3095.w;
    float _3171;
    float _3173;
    float _3175;
    float _3177;
    if (_828 > cbSceneParam._m0[78u].w)
    {
        float _3134 = isnan(_828) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _828 : min(cbSceneParam._m0[80u].w, _828));
        float _3135 = _3134 / _828;
        float _3146 = _3135 * _878;
        float _3147 = _879 * _3135;
        float _3148 = (-0.0) - _3147;
        float _3149 = _3135 * _880;
        float _3151 = (cbSceneParam._m0[77u].w * _3148) / _3134;
        float _3152 = _3151 + cbSceneParam._m0[79u].w;
        float _3153 = cbSceneParam._m0[79u].w - _3147;
        float _3159 = sqrt(((_3146 * _3146) + (_3147 * _3147)) + (_3149 * _3149));
        float _3162 = (1.0 - (cbSceneParam._m0[77u].w / _3134)) * _3159;
        float _3167 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3169 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3346;
        if (abs((_3148 - _3151) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3346 = ((((_3152 > 0.0) ? exp2(_3167 * _3152) : (2.0 - exp2(_3169 * _3152))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3162;
        }
        else
        {
            float _3290 = 1.0 / cbSceneParam._m0[80u].x;
            float _3291 = isnan(_3153) ? _3152 : (isnan(_3152) ? _3153 : max(_3152, _3153));
            float _3292 = isnan(_3153) ? _3152 : (isnan(_3152) ? _3153 : min(_3152, _3153));
            float _3301 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : min(_3291, 0.0));
            float _3302 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : min(_3292, 0.0));
            _3346 = ((abs(_3159 / _3148) * cbSceneParam._m0[80u].y) * ((((_3301 - _3302) * 2.0) - ((exp2(_3167 * (isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0)))) - exp2(_3167 * (isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))))) * _3290)) - ((exp2(_3169 * _3301) - exp2(_3169 * _3302)) * _3290))) + (_3162 * cbSceneParam._m0[80u].z);
        }
        vec4 _3348 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3080, _3081, 1.0), 0.0);
        float _3357 = exp2((_3346 * (-1.44269502162933349609375)) * (1.0 - _3348.w));
        float _3358 = log2(_3357);
        float _3374 = log2(_3100);
        _3171 = (exp2(_3374 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3358 * cbSceneParam._m0[78u].x)) * _3348.x) / cbSceneParam._m0[78u].x)) + _3097;
        _3173 = (exp2(_3374 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3358 * cbSceneParam._m0[78u].y)) * _3348.y) / cbSceneParam._m0[78u].y)) + _3098;
        _3175 = (exp2(_3374 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3358 * cbSceneParam._m0[78u].z)) * _3348.z) / cbSceneParam._m0[78u].z)) + _3099;
        _3177 = _3357 * _3100;
    }
    else
    {
        _3171 = _3097;
        _3173 = _3098;
        _3175 = _3099;
        _3177 = _3100;
    }
    bool _3384;
    vec4 _3187;
    vec4 _3209;
    float _3211;
    float _3215;
    float _3216;
    float _3217;
    float _3218;
    bool _3228;
    for (;;)
    {
        _3187 = cbMatDynParam._m0[0u];
        float _3189 = roundEven(_3187.y);
        bool _3190 = _3189 == 3.0;
        float _3191 = log2(_3177);
        float _3198 = exp2(_3191 * cbSceneParam._m0[78u].x) * _3069;
        float _3199 = exp2(_3191 * cbSceneParam._m0[78u].y) * _3070;
        float _3200 = exp2(_3191 * cbSceneParam._m0[78u].z) * _3071;
        float _3207 = _894 + (-0.5);
        _3209 = cbMtdParam._m0[1u];
        _3211 = _3209.y * _3207;
        float _3214 = (_3189 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3215 = _3214 * (_3190 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3171)));
        _3216 = _3214 * (_3190 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3173)));
        _3217 = _3214 * (_3190 ? _3200 : (_3200 + (cbSceneParam._m0[72u].w * _3175)));
        _3218 = _3207 * 0.999000012874603271484375;
        _3228 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3228)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3218) < 0.5)
            {
                _3384 = true;
                break;
            }
        }
        uint _3325 = _943 + uint(_3187.w);
        if ((cbInstanceData._m0[_3325].w < 1.0) && ((cbInstanceData._m0[_3325].w + _3218) < 0.5))
        {
            _3384 = true;
            break;
        }
        if ((_3211 + 1.0) < _3209.x)
        {
            _3384 = true;
            break;
        }
        _3384 = false;
        break;
    }
    float _3588;
    if (_3384)
    {
        discard_state = true;
        _3588 = 0.0;
    }
    else
    {
        _3588 = cbInstanceData._m0[_3072].w;
    }
    SV_Target.x = _3215;
    SV_Target.y = _3216;
    SV_Target.z = _3217;
    SV_Target.w = _3588;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3072].w;
    discard_exit();
}


