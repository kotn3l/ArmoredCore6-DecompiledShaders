#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1243;
float _3908;
float _3909;
float _3910;
float _3911;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3920 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3931 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3942 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _334 = _329.x * cbMtdParam._m0[9u].x;
    float _335 = _329.y * cbMtdParam._m0[9u].y;
    float _336 = _329.z * cbMtdParam._m0[9u].z;
    float _340 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _334;
    float _343 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _335;
    float _346 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _336;
    float _353 = ((_334 - _340) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) + _340;
    float _354 = ((_335 - _343) * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) + _343;
    float _355 = ((_336 - _346) * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) + _346;
    vec4 _373 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _399 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _403 = _399.z;
    float _407 = (_399.x * 2.0) + (-1.0);
    float _408 = (_399.y * 2.0) + (-1.0);
    float _409 = dot(vec2(_407, _408), vec2(_407, _408));
    float _3953 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _414 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    float _419 = _407 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_373.x * 2.0) + (-1.0)));
    float _420 = _408 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_373.y * 2.0) + (-1.0)));
    vec4 _437 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _439 = _437.x;
    float _440 = 1.0 - _439;
    float _449 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _452 = ((isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : min(_449, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _461 = (_452 - ((((((_439 - _440) * cbMtdParam._m0[24u].z) + _440) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _452))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3974 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _469 = (_462 * (cbMtdParam._m0[17u].x - _353)) + _353;
    float _470 = (_462 * (cbMtdParam._m0[17u].y - _354)) + _354;
    float _471 = (_462 * (cbMtdParam._m0[17u].z - _355)) + _355;
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _486 = _484.x;
    float _487 = 1.0 - _486;
    float _514 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_486 - _487) * cbMtdParam._m0[24u].w) + _487) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3985 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _523 = ((((cbMtdParam._m0[10u].x - _469) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _515) + _469;
    float _524 = ((((cbMtdParam._m0[10u].y - _470) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _515) + _470;
    float _525 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _471)) * _515) + _471;
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _540 = _538.x;
    float _542 = _540 - (_540 * _462);
    float _544 = _542 - (_542 * _515);
    float _549 = (((_373.z - _403) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _403;
    vec4 _563 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _570 = (_563.x * 2.0) + (-1.0);
    float _571 = (_563.y * 2.0) + (-1.0);
    float _572 = dot(vec2(_570, _571), vec2(_570, _571));
    float _3996 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _580 = (_462 * (_563.z - _549)) + _549;
    float _583 = ((cbMtdParam._m0[23u].y - _580) * _515) + _580;
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _611 = (_605.x * 2.0) + (-1.0);
    float _612 = (_605.y * 2.0) + (-1.0);
    float _613 = dot(vec2(_611, _612), vec2(_611, _612));
    float _4007 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _630 = (((_570 - _419) + (cbMtdParam._m0[21u].x * _419)) * _462) + _419;
    float _631 = (((_571 - _420) + (cbMtdParam._m0[21u].x * _420)) * _462) + _420;
    float _632 = (_462 * (sqrt(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) - _414)) + _414;
    float _643 = (((_611 - _630) + (_630 * cbMtdParam._m0[22u].z)) * _515) + _630;
    float _644 = (((_612 - _631) + (_631 * cbMtdParam._m0[22u].z)) * _515) + _631;
    float _645 = ((sqrt(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) - _632) * _515) + _632;
    float _647 = cbMtdParam._m0[22u].x + _399.w;
    float _650 = fma(_645, _241 * NORMAL.x, fma(_644, _248 * TANGENT.x, (_234 * _226) * _643));
    float _653 = fma(_645, _241 * NORMAL.y, fma(_644, _248 * TANGENT.y, (_234 * _227) * _643));
    float _656 = fma(_645, _241 * NORMAL.z, fma(_644, _248 * TANGENT.z, (_234 * _228) * _643));
    float _660 = inversesqrt(dot(vec3(_650, _653, _656), vec3(_650, _653, _656)));
    float _661 = _660 * _650;
    float _662 = _660 * _653;
    float _663 = _660 * _656;
    float _4018 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _664 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4040 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4051 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _4062 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4073 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _669 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _683 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _733 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _723);
    float _734 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _723);
    float _735 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _723);
    float _739 = inversesqrt(dot(vec3(_733, _734, _735), vec3(_733, _734, _735)));
    float _740 = _733 * _739;
    float _741 = _734 * _739;
    float _742 = _735 * _739;
    vec4 _747 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _749 = _747.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _924 = sqrt(((_733 * _733) + (_734 * _734)) + (_735 * _735));
        float _930 = (cbMatDynParam._m0[5u].x * _924) + cbMatDynParam._m0[5u].y;
        float _4084 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _935 = (cbMatDynParam._m0[5u].z * _924) + cbMatDynParam._m0[5u].w;
        float _4095 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) - _931)) + _931) < ((_749 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _761 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _762 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _782 = fma(_663, cbSceneParam._m0[5u].z, fma(_662, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _661));
    float _785 = fma(_663, cbSceneParam._m0[6u].z, fma(_662, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _661));
    float _788 = fma(_663, cbSceneParam._m0[7u].z, fma(_662, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _661));
    uint _801 = _273 + 9u;
    uint _802 = _801 + uint(cbMatDynParam._m0[0u].w);
    float _808 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * cbInstanceData._m0[_802].x;
    float _809 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_802].y;
    float _810 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * cbInstanceData._m0[_802].z;
    float _4106 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _814 = 1.0 - _669;
    float _815 = _811 * _814;
    float _816 = _812 * _814;
    float _817 = _813 * _814;
    float _822 = (_811 + (-0.039999999105930328369140625)) * _669;
    float _823 = (_812 + (-0.039999999105930328369140625)) * _669;
    float _824 = (_813 + (-0.039999999105930328369140625)) * _669;
    float _825 = _822 + 0.039999999105930328369140625;
    float _827 = _823 + 0.039999999105930328369140625;
    float _828 = _824 + 0.039999999105930328369140625;
    vec4 _837 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _761, cbSceneParam._m0[86u].y * _762));
    float _841 = ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * TEXCOORD_5.w) * _837.x;
    float _842 = dot(vec3(_661, _662, _663), vec3(_740, _741, _742));
    float _845 = _842 * 2.0;
    float _849 = (_845 * _661) - _740;
    float _850 = (_845 * _662) - _741;
    float _851 = (_845 * _663) - _742;
    float _855 = abs(dot(vec3(_740, _741, _742), vec3(_661, _662, _663)));
    float _4139 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _857 = sqrt(_664);
    float _870 = exp2((_857 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_857 * 3.0));
    float _876 = (1.0 - _870) * ((_857 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _877 = _870 * _857;
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1242;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _967 = fma(_913, cbModelParam._m0[26u].z, fma(_909, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _905));
        float _971 = fma(_913, cbModelParam._m0[27u].z, fma(_909, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _905));
        float _975 = fma(_913, cbModelParam._m0[28u].z, fma(_909, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _905));
        float _1000 = _905 + _661;
        float _1001 = _909 + _662;
        float _1002 = _913 + _663;
        float _1012 = fma(_1002, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1000)) - _967;
        float _1013 = fma(_1002, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1000)) - _971;
        float _1014 = fma(_1002, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1000)) - _975;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_967 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_971 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[34u].z) + ((((((_975 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1070 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1036.x + (-0.5));
        float _1072 = _1070 * (_1036.y + (-0.5));
        float _1073 = _1070 * (_1036.z + (-0.5));
        float _1080 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1043.x + (-0.5));
        float _1082 = _1080 * (_1043.y + (-0.5));
        float _1083 = _1080 * (_1043.z + (-0.5));
        float _1090 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1050.x + (-0.5));
        float _1092 = _1090 * (_1050.y + (-0.5));
        float _1093 = _1090 * (_1050.z + (-0.5));
        float _1100 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1057.x + (-0.5));
        float _1102 = _1100 * (_1057.y + (-0.5));
        float _1103 = _1100 * (_1057.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1124 = (dot(vec3(_661, _662, _663), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1134 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _4187 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1136 + 1.0))) + _1141) * _1104;
        float _1151 = _1072 * 0.5;
        float _1152 = _1082 * 0.5;
        float _1153 = _1092 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_661, _662, _663), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4220 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1178 + 1.0))) + _1183) * _1105;
        float _1193 = _1073 * 0.5;
        float _1194 = _1083 * 0.5;
        float _1195 = _1093 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_661, _662, _663), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4253 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1220 + 1.0))) + _1225) * _1106;
        _1242 = _1073;
        _1244 = _1072;
        _1245 = _1071;
        _1246 = _1083;
        _1247 = _1082;
        _1248 = _1081;
        _1249 = _1093;
        _1250 = _1092;
        _1251 = _1091;
        _1252 = _1106;
        _1253 = _1105;
        _1254 = _1104;
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _1243;
        _1244 = _1243;
        _1245 = _1243;
        _1246 = _1243;
        _1247 = _1243;
        _1248 = _1243;
        _1249 = _1243;
        _1250 = _1243;
        _1251 = _1243;
        _1252 = _1243;
        _1253 = _1243;
        _1254 = _1243;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1285 = fma(_913, cbModelParam._m0[30u].z, fma(_909, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _905));
        float _1289 = fma(_913, cbModelParam._m0[31u].z, fma(_909, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _905));
        float _1293 = fma(_913, cbModelParam._m0[32u].z, fma(_909, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _905));
        float _1316 = _905 + _661;
        float _1317 = _909 + _662;
        float _1318 = _913 + _663;
        float _1328 = fma(_1318, cbModelParam._m0[30u].z, fma(_1317, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1316)) - _1285;
        float _1329 = fma(_1318, cbModelParam._m0[31u].z, fma(_1317, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1316)) - _1289;
        float _1330 = fma(_1318, cbModelParam._m0[32u].z, fma(_1317, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1316)) - _1293;
        float _1334 = inversesqrt(dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330)));
        float _1347 = ((_1334 * _1328) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1285 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1334 * _1329) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1289 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1334 * _1330) / cbModelParam._m0[35u].z) + ((((((_1293 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        float _1384 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1351.x + (-0.5));
        float _1386 = _1384 * (_1351.y + (-0.5));
        float _1387 = _1384 * (_1351.z + (-0.5));
        float _1394 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1358.x + (-0.5));
        float _1396 = _1394 * (_1358.y + (-0.5));
        float _1397 = _1394 * (_1358.z + (-0.5));
        float _1404 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1365.x + (-0.5));
        float _1406 = _1404 * (_1365.y + (-0.5));
        float _1407 = _1404 * (_1365.z + (-0.5));
        float _1414 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1372.x + (-0.5));
        float _1416 = _1414 * (_1372.y + (-0.5));
        float _1417 = _1414 * (_1372.z + (-0.5));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = _1385 * 0.5;
        float _1422 = _1395 * 0.5;
        float _1423 = _1405 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_661, _662, _663), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4316 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1448 + 1.0))) + _1453) * _1418;
        float _1463 = _1386 * 0.5;
        float _1464 = _1396 * 0.5;
        float _1465 = _1406 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_661, _662, _663), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4349 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1490 + 1.0))) + _1495) * _1419;
        float _1505 = _1387 * 0.5;
        float _1506 = _1397 * 0.5;
        float _1507 = _1407 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_661, _662, _663), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4382 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1532 + 1.0))) + _1537) * _1420;
        _1554 = _1387;
        _1555 = _1386;
        _1556 = _1385;
        _1557 = _1397;
        _1558 = _1396;
        _1559 = _1395;
        _1560 = _1407;
        _1561 = _1406;
        _1562 = _1405;
        _1563 = _1420;
        _1564 = _1419;
        _1565 = _1418;
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
    }
    else
    {
        _1554 = _1243;
        _1555 = _1243;
        _1556 = _1243;
        _1557 = _1243;
        _1558 = _1243;
        _1559 = _1243;
        _1560 = _1243;
        _1561 = _1243;
        _1562 = _1243;
        _1563 = _1243;
        _1564 = _1243;
        _1565 = _1243;
        _1566 = 0.0;
        _1567 = 0.0;
        _1568 = 0.0;
    }
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1255)) + _1255;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1256)) + _1256;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1257)) + _1257;
    float _1601 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1579, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1604 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1579, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1607 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1579, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1578));
    float _1622 = _849 * 0.5;
    float _1623 = _850 * 0.5;
    float _1624 = _851 * 0.5;
    float _1625 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1628 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1631 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1665;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1638 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1242, _1246, _1249, _1252));
        float _1642 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1646 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1653 = dot(vec4(cbModelParam._m0[39u]), vec4(_1622, _1623, _1624, 1.0));
        _1665 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1665 = 1.0;
    }
    float _1676;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1667 = dot(vec4(cbModelParam._m0[40u]), vec4(_1622, _1623, _1624, 1.0));
        _1676 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1676 = 1.0;
    }
    float _1680 = (_1676 * cbModelParam._m0[1u].x) + (_1665 * (1.0 - cbModelParam._m0[1u].x));
    float _1690 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _664);
    float _1691 = isnan(_1690) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1690 : min(cbModelParam._m0[25u].z, _1690));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1739 = fma(_913, cbModelParam._m0[13u].z, fma(_909, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905)) + cbModelParam._m0[13u].w;
        float _1743 = fma(_913, cbModelParam._m0[14u].z, fma(_909, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905)) + cbModelParam._m0[14u].w;
        float _1747 = fma(_913, cbModelParam._m0[15u].z, fma(_909, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905)) + cbModelParam._m0[15u].w;
        float _1750 = fma(_851, cbModelParam._m0[13u].z, fma(_850, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _849));
        float _1753 = fma(_851, cbModelParam._m0[14u].z, fma(_850, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _849));
        float _1756 = fma(_851, cbModelParam._m0[15u].z, fma(_850, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _849));
        float _1784;
        if (_1750 > 0.0)
        {
            _1784 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1784 = frontier_phi_17_15_ladder;
        }
        float _1956;
        if (_1753 > 0.0)
        {
            _1956 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1956 = frontier_phi_26_22_ladder;
        }
        float _2252;
        if (_1756 > 0.0)
        {
            _2252 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2252 = frontier_phi_38_33_ladder;
        }
        float _2254 = isnan(_1956) ? _1784 : (isnan(_1784) ? _1956 : min(_1784, _1956));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1750) + _1739;
        float _2260 = (_2255 * _1753) + _1743;
        float _2261 = (_2255 * _1756) + _1747;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2264 = (-1.0) - _2262;
        float _2266 = _2262 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2261 > _2266) || ((_2261 < _2264) || ((_2260 > _2266) || ((_2260 < _2264) || ((_2259 < _2264) || (_2259 > _2266))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2261, cbModelParam._m0[9u].z, fma(_2260, cbModelParam._m0[9u].y, _2259 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2261, cbModelParam._m0[10u].z, fma(_2260, cbModelParam._m0[10u].y, _2259 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2261, cbModelParam._m0[11u].z, fma(_2260, cbModelParam._m0[11u].y, _2259 * cbModelParam._m0[11u].x))), _1691);
            frontier_phi_16_38_ladder = _2406.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2406.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2406.x * cbModelParam._m0[1u].y;
        }
        _1772 = frontier_phi_16_38_ladder_2;
        _1774 = frontier_phi_16_38_ladder_1;
        _1776 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_849, _850, _851), _1691);
        _1772 = _1760.x * cbModelParam._m0[1u].y;
        _1774 = _1760.y * cbModelParam._m0[1u].y;
        _1776 = _1760.z * cbModelParam._m0[1u].y;
    }
    float _1780 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _664);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1780 : min(cbModelParam._m0[25u].w, _1780));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1835 = fma(_913, cbModelParam._m0[21u].z, fma(_909, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905)) + cbModelParam._m0[21u].w;
        float _1839 = fma(_913, cbModelParam._m0[22u].z, fma(_909, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905)) + cbModelParam._m0[22u].w;
        float _1843 = fma(_913, cbModelParam._m0[23u].z, fma(_909, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905)) + cbModelParam._m0[23u].w;
        float _1846 = fma(_851, cbModelParam._m0[21u].z, fma(_850, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _849));
        float _1849 = fma(_851, cbModelParam._m0[22u].z, fma(_850, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _849));
        float _1852 = fma(_851, cbModelParam._m0[23u].z, fma(_850, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _849));
        float _1961;
        if (_1846 > 0.0)
        {
            _1961 = abs((1.0 - _1835) / _1846);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1835 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1961 = frontier_phi_28_24_ladder;
        }
        float _2279;
        if (_1849 > 0.0)
        {
            _2279 = abs((1.0 - _1839) / _1849);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1839 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2279 = frontier_phi_40_35_ladder;
        }
        float _2617;
        if (_1852 > 0.0)
        {
            _2617 = abs((1.0 - _1843) / _1852);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1843 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2617 = frontier_phi_50_47_ladder;
        }
        float _2619 = isnan(_2279) ? _1961 : (isnan(_1961) ? _2279 : min(_1961, _2279));
        float _2620 = isnan(_2617) ? _2619 : (isnan(_2619) ? _2617 : min(_2619, _2617));
        float _2624 = (_2620 * _1846) + _1835;
        float _2625 = (_2620 * _1849) + _1839;
        float _2626 = (_2620 * _1852) + _1843;
        float _2627 = _2620 * 9.9999997473787516355514526367188e-05;
        float _2628 = (-1.0) - _2627;
        float _2630 = _2627 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2626 > _2630) || ((_2626 < _2628) || ((_2625 > _2630) || ((_2625 < _2628) || ((_2624 < _2628) || (_2624 > _2630))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2748 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2626, cbModelParam._m0[17u].z, fma(_2625, cbModelParam._m0[17u].y, _2624 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2626, cbModelParam._m0[18u].z, fma(_2625, cbModelParam._m0[18u].y, _2624 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2626, cbModelParam._m0[19u].z, fma(_2625, cbModelParam._m0[19u].y, _2624 * cbModelParam._m0[19u].x))), _1781);
            frontier_phi_25_50_ladder = _2748.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2748.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2748.x * cbModelParam._m0[1u].z;
        }
        _1871 = frontier_phi_25_50_ladder_2;
        _1873 = frontier_phi_25_50_ladder_1;
        _1875 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_849, _850, _851), _1781);
        _1871 = _1855.x * cbModelParam._m0[1u].z;
        _1873 = _1855.y * cbModelParam._m0[1u].z;
        _1875 = _1855.z * cbModelParam._m0[1u].z;
    }
    float _1888 = (((_876 * _825) + _877) * _841) * ((cbModelParam._m0[1u].w * (_1871 - _1772)) + _1772);
    float _1890 = (((_876 * _827) + _877) * _841) * ((cbModelParam._m0[1u].w * (_1873 - _1774)) + _1774);
    float _1892 = (((_876 * _828) + _877) * _841) * ((cbModelParam._m0[1u].w * (_1875 - _1776)) + _1776);
    float _1895 = fma(_1892, cbSceneParam._m0[89u].z, fma(_1890, cbSceneParam._m0[89u].y, _1888 * cbSceneParam._m0[89u].x));
    float _1898 = fma(_1892, cbSceneParam._m0[90u].z, fma(_1890, cbSceneParam._m0[90u].y, _1888 * cbSceneParam._m0[90u].x));
    float _1901 = fma(_1892, cbSceneParam._m0[91u].z, fma(_1890, cbSceneParam._m0[91u].y, _1888 * cbSceneParam._m0[91u].x));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1943 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1947 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1948 = _1935 / _1947;
    float _1949 = _1939 / _1947;
    float _1950 = _1943 / _1947;
    float _2097;
    float _2098;
    float _2099;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1977 = ((uint(_1950 > cbSceneParam._m0[59u].y) + uint(_1950 > cbSceneParam._m0[59u].x)) + uint(_1950 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1978 = _1977 + 43u;
        uint _1986 = _1977 + 44u;
        uint _1994 = _1977 + 45u;
        uint _2002 = _1977 + 46u;
        float _2013 = fma(_1947, cbSceneParam._m0[_1978].w, fma(_1943, cbSceneParam._m0[_1978].z, fma(_1939, cbSceneParam._m0[_1978].y, _1935 * cbSceneParam._m0[_1978].x)));
        float _2017 = fma(_1947, cbSceneParam._m0[_1986].w, fma(_1943, cbSceneParam._m0[_1986].z, fma(_1939, cbSceneParam._m0[_1986].y, _1935 * cbSceneParam._m0[_1986].x)));
        float _2025 = fma(_1947, cbSceneParam._m0[_2002].w, fma(_1943, cbSceneParam._m0[_2002].z, fma(_1939, cbSceneParam._m0[_2002].y, _1935 * cbSceneParam._m0[_2002].x)));
        float _2030 = cbSceneParam._m0[33u].z * _2025;
        float _2032 = cbSceneParam._m0[33u].w * _2025;
        float _2035 = fma(_1947, cbSceneParam._m0[_1994].w, fma(_1943, cbSceneParam._m0[_1994].z, fma(_1939, cbSceneParam._m0[_1994].y, _1935 * cbSceneParam._m0[_1994].x))) / _2025;
        float _2083 = (cbSceneParam._m0[33u].x - sqrt(((_1949 * _1949) + (_1948 * _1948)) + (_1950 * _1950))) * cbSceneParam._m0[33u].y;
        float _4508 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2090 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2030 + _2013) / _2025, (_2032 + _2017) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2032 + _2013) / _2025, (_2017 - _2030) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 - _2030) / _2025, (_2017 - _2032) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 - _2032) / _2025, (_2030 + _2017) / _2025), _2035), 0.0)).x), vec4(0.25)));
        _2097 = 1.0 - (_2090 * cbSceneParam._m0[34u].x);
        _2098 = 1.0 - (_2090 * cbSceneParam._m0[34u].y);
        _2099 = 1.0 - (_2090 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2097 = 1.0;
        _2098 = 1.0;
        _2099 = 1.0;
    }
    float _2163;
    float _2165;
    float _2167;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2151 = fma(_1947, cbSceneParam._m0[63u].w, fma(_1943, cbSceneParam._m0[63u].z, fma(_1939, cbSceneParam._m0[63u].y, _1935 * cbSceneParam._m0[63u].x)));
        float _2152 = fma(_1947, cbSceneParam._m0[60u].w, fma(_1943, cbSceneParam._m0[60u].z, fma(_1939, cbSceneParam._m0[60u].y, _1935 * cbSceneParam._m0[60u].x))) / _2151;
        float _2153 = fma(_1947, cbSceneParam._m0[61u].w, fma(_1943, cbSceneParam._m0[61u].z, fma(_1939, cbSceneParam._m0[61u].y, _1935 * cbSceneParam._m0[61u].x))) / _2151;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2152 >= cbSceneParam._m0[64u].x) && (_2153 >= cbSceneParam._m0[64u].y)) && (_2152 <= cbSceneParam._m0[64u].z)) && (_2153 <= cbSceneParam._m0[64u].w))
        {
            float _2292 = fma(_1947, cbSceneParam._m0[62u].w, fma(_1943, cbSceneParam._m0[62u].z, fma(_1939, cbSceneParam._m0[62u].y, _1935 * cbSceneParam._m0[62u].x))) / _2151;
            float _2296 = isnan(cbSceneParam._m0[41u].w) ? _2292 : (isnan(_2292) ? cbSceneParam._m0[41u].w : max(_2292, cbSceneParam._m0[41u].w));
            float _2339 = (cbSceneParam._m0[33u].x - sqrt(((_1949 * _1949) + (_1948 * _1948)) + (_1950 * _1950))) * cbSceneParam._m0[33u].y;
            float _4524 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
            float _2346 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2152, cbSceneParam._m0[33u].w + _2153), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2152, _2153 - cbSceneParam._m0[33u].z), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2152 - cbSceneParam._m0[33u].z, _2153 - cbSceneParam._m0[33u].w), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2152 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2153), _2296), 0.0)).x), vec4(0.25)));
            float _2350 = 1.0 - (_2346 * cbSceneParam._m0[34u].x);
            float _2351 = 1.0 - (_2346 * cbSceneParam._m0[34u].y);
            float _2352 = 1.0 - (_2346 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2352) ? _2099 : (isnan(_2099) ? _2352 : min(_2099, _2352));
            frontier_phi_37_36_ladder_1 = isnan(_2351) ? _2098 : (isnan(_2098) ? _2351 : min(_2098, _2351));
            frontier_phi_37_36_ladder_2 = isnan(_2350) ? _2097 : (isnan(_2097) ? _2350 : min(_2097, _2350));
        }
        else
        {
            frontier_phi_37_36_ladder = _2099;
            frontier_phi_37_36_ladder_1 = _2098;
            frontier_phi_37_36_ladder_2 = _2097;
        }
        _2163 = frontier_phi_37_36_ladder_2;
        _2165 = frontier_phi_37_36_ladder_1;
        _2167 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2163 = _2097;
        _2165 = _2098;
        _2167 = _2099;
    }
    uvec4 _2172 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2174 = _2172.x * 14u;
    uint _2175 = _2174 + 13u;
    float _2182 = _841 + (-1.0);
    float _2187 = (cbLight._m0[_2175].x * _2182) + 1.0;
    float _2188 = (cbLight._m0[_2175].y * _2182) + 1.0;
    float _2189 = (cbLight._m0[_2175].z * _2182) + 1.0;
    float _2190 = (cbLight._m0[_2175].w * _2182) + 1.0;
    uint _2191 = _2174 + 5u;
    float _2197 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
    uint _2201 = _2174 + 4u;
    float _2211 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
    uint _2215 = _2174 | 1u;
    float _2226 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_661, _662, _663));
    float _2229 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_661, _662, _663));
    float _4560 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _4571 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2234 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * 0.3183098733425140380859375;
    float _2236 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * 0.3183098733425140380859375;
    float _2243 = ((cbLight._m0[_2191].x * _2197) * _2236) + (((cbLight._m0[_2201].x * _2163) * _2211) * _2234);
    float _2244 = ((_2197 * cbLight._m0[_2191].y) * _2236) + (((cbLight._m0[_2201].y * _2165) * _2211) * _2234);
    float _2245 = ((_2197 * cbLight._m0[_2191].z) * _2236) + (((cbLight._m0[_2201].z * _2167) * _2211) * _2234);
    uvec4 _2249 = floatBitsToUint(cbLight._m0[_2174 + 12u]);
    bool _2251 = _2249.x == 0u;
    float _2353;
    float _2355;
    float _2357;
    if (_2251)
    {
        _2353 = _2243;
        _2355 = _2244;
        _2357 = _2245;
    }
    else
    {
        uint _2361 = _2174 + 6u;
        float _2377 = (dot(vec3(cbLight._m0[_2174 + 2u].xyz), vec3(_661, _662, _663)) * 0.5) + 0.5;
        float _2378 = _2377 * _2377;
        float _4582 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2379 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2380 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2353 = (((cbLight._m0[_2361].x * 0.3183098733425140380859375) * _2379) * _2380) + _2243;
        _2355 = (((cbLight._m0[_2361].y * 0.3183098733425140380859375) * _2379) * _2380) + _2244;
        _2357 = (((cbLight._m0[_2361].z * 0.3183098733425140380859375) * _2379) * _2380) + _2245;
    }
    bool _2360 = _2249.y == 0u;
    float _2415;
    float _2417;
    float _2419;
    if (_2360)
    {
        _2415 = _2353;
        _2417 = _2355;
        _2419 = _2357;
    }
    else
    {
        uint _2588 = _2174 + 7u;
        float _2604 = (dot(vec3(cbLight._m0[_2174 + 3u].xyz), vec3(_661, _662, _663)) * 0.5) + 0.5;
        float _2605 = _2604 * _2604;
        float _4598 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2606 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2607 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2415 = (((cbLight._m0[_2588].x * 0.3183098733425140380859375) * _2606) * _2607) + _2353;
        _2417 = (((cbLight._m0[_2588].y * 0.3183098733425140380859375) * _2606) * _2607) + _2355;
        _2419 = (((cbLight._m0[_2588].z * 0.3183098733425140380859375) * _2606) * _2607) + _2357;
    }
    uint _2422 = _2174 + 8u;
    float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _664) * 0.949999988079071044921875);
    float _2436 = _2435 * _2435;
    float _2437 = cbLight._m0[_2174].x + _740;
    float _2438 = cbLight._m0[_2174].y + _741;
    float _2439 = cbLight._m0[_2174].z + _742;
    float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
    float _2444 = _2443 * _2437;
    float _2445 = _2443 * _2438;
    float _2446 = _2443 * _2439;
    float _2447 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2174].xyz));
    float _4614 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _4625 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _2451 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2452 = dot(vec3(_661, _662, _663), vec3(_2444, _2445, _2446));
    float _4636 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2456 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2444, _2445, _2446));
    float _4647 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2460 = _2436 * _2436;
    float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
    float _2472 = exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0);
    float _2473 = 0.959999978542327880859375 - _822;
    float _2475 = 0.959999978542327880859375 - _823;
    float _2476 = 0.959999978542327880859375 - _824;
    float _2483 = 1.0 - _2436;
    float _2494 = (0.5 / (((_2451 * ((_2450 * _2483) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2483) + _2436) * _2450))) * _2450;
    float _4658 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2496 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
    uint _2510 = _2174 + 9u;
    float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _664) * 0.949999988079071044921875);
    float _2522 = _2521 * _2521;
    float _2523 = cbLight._m0[_2215].x + _740;
    float _2524 = cbLight._m0[_2215].y + _741;
    float _2525 = cbLight._m0[_2215].z + _742;
    float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
    float _2530 = _2529 * _2523;
    float _2531 = _2529 * _2524;
    float _2532 = _2529 * _2525;
    float _2533 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2215].xyz));
    float _4669 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2537 = dot(vec3(_661, _662, _663), vec3(_2530, _2531, _2532));
    float _4680 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2540 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _2541 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2530, _2531, _2532));
    float _4691 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2545 = _2522 * _2522;
    float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
    float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * 5.0);
    float _2563 = 1.0 - _2522;
    float _2573 = (0.5 / (((_2451 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2563) + _2522) * _2536))) * _2536;
    float _4702 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2575 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
    float _2585 = (((((_2556 * _2473) + _825) * cbLight._m0[_2510].x) * _2575) * _2197) + ((((cbLight._m0[_2422].x * _2163) * ((_2472 * _2473) + _825)) * _2496) * _2211);
    float _2586 = (((((_2556 * _2475) + _827) * cbLight._m0[_2510].y) * _2575) * _2197) + ((((cbLight._m0[_2422].y * _2165) * ((_2472 * _2475) + _827)) * _2496) * _2211);
    float _2587 = (((((_2556 * _2476) + _828) * cbLight._m0[_2510].z) * _2575) * _2197) + ((((cbLight._m0[_2422].z * _2167) * ((_2472 * _2476) + _828)) * _2496) * _2211);
    float _2643;
    float _2645;
    float _2647;
    if (_2251)
    {
        _2643 = _2585;
        _2645 = _2586;
        _2647 = _2587;
    }
    else
    {
        uint _2649 = _2174 + 2u;
        uint _2653 = _2174 + 10u;
        float _2667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2649].w)) * _664) * 0.949999988079071044921875);
        float _2668 = _2667 * _2667;
        float _2669 = cbLight._m0[_2649].x + _740;
        float _2670 = cbLight._m0[_2649].y + _741;
        float _2671 = cbLight._m0[_2649].z + _742;
        float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
        float _2676 = _2675 * _2669;
        float _2677 = _2675 * _2670;
        float _2678 = _2675 * _2671;
        float _2679 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2649].xyz));
        float _4713 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2683 = dot(vec3(_661, _662, _663), vec3(_2676, _2677, _2678));
        float _4724 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2687 = dot(vec3(cbLight._m0[_2649].xyz), vec3(_2676, _2677, _2678));
        float _4735 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2691 = _2668 * _2668;
        float _2695 = ((_2686 * _2686) * (_2691 + (-1.0))) + 1.0;
        float _2702 = exp2(log2(1.0 - (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) * 5.0);
        float _2709 = 1.0 - _2668;
        float _2719 = (0.5 / (((_2451 * ((_2682 * _2709) + _2668)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2709) + _2668) * _2682))) * _2682;
        float _4746 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2721 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2691 / ((_2695 * _2695) * 3.141590118408203125));
        float _2722 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2643 = (((((_2702 * _2473) + _825) * cbLight._m0[_2653].x) * _2721) * _2722) + _2585;
        _2645 = (((((_2702 * _2475) + _827) * cbLight._m0[_2653].y) * _2721) * _2722) + _2586;
        _2647 = (((((_2702 * _2476) + _828) * cbLight._m0[_2653].z) * _2721) * _2722) + _2587;
    }
    float _2753;
    float _2755;
    float _2757;
    if (_2360)
    {
        _2753 = _2643;
        _2755 = _2645;
        _2757 = _2647;
    }
    else
    {
        uint _2764 = _2174 + 3u;
        uint _2768 = _2174 + 11u;
        float _2782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2764].w)) * _664) * 0.949999988079071044921875);
        float _2783 = _2782 * _2782;
        float _2784 = cbLight._m0[_2764].x + _740;
        float _2785 = cbLight._m0[_2764].y + _741;
        float _2786 = cbLight._m0[_2764].z + _742;
        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
        float _2791 = _2790 * _2784;
        float _2792 = _2790 * _2785;
        float _2793 = _2790 * _2786;
        float _2794 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2764].xyz));
        float _4762 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2798 = dot(vec3(_661, _662, _663), vec3(_2791, _2792, _2793));
        float _4773 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2801 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2802 = dot(vec3(cbLight._m0[_2764].xyz), vec3(_2791, _2792, _2793));
        float _4784 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2806 = _2783 * _2783;
        float _2810 = ((_2801 * _2801) * (_2806 + (-1.0))) + 1.0;
        float _2817 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
        float _2824 = 1.0 - _2783;
        float _2834 = (0.5 / (((_2451 * ((_2797 * _2824) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2824) + _2783) * _2797))) * _2797;
        float _4795 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2836 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2806 / ((_2810 * _2810) * 3.141590118408203125));
        float _2837 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2753 = (((((_2817 * _2473) + _825) * cbLight._m0[_2768].x) * _2836) * _2837) + _2643;
        _2755 = (((((_2817 * _2475) + _827) * cbLight._m0[_2768].y) * _2836) * _2837) + _2645;
        _2757 = (((((_2817 * _2476) + _828) * cbLight._m0[_2768].z) * _2836) * _2837) + _2647;
    }
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    if (_2172.y == 0u)
    {
        uvec4 _2858 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2859 = _2858.x;
        uint _2870 = uint((float(_2858.y) * floor(float(uint(cbSceneParam._m0[85u].y * _762) / _2859))) + floor(float(uint(cbSceneParam._m0[85u].x * _761) / _2859)));
        float _2880 = (log2(_1950 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2881 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        uint _2884 = uint(isnan(14.0) ? _2881 : (isnan(_2881) ? 14.0 : min(_2881, 14.0)));
        uvec4 _2889 = texelFetch(g_lightClusterGridBuffer, int(((_2884 << 2u) + (_2870 << 6u)) >> 2u));
        uint _2890 = _2889.x;
        uint _2891 = _2858.z;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        if (((((1u << ((_2891 >> 4u) & 15u)) + 4294967295u) & _2890) == 0u) || ((_2891 & 240u) == 0u))
        {
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
        }
        else
        {
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            uint _3129 = 0u;
            uint _3138;
            bool _3139;
            for (;;)
            {
                _3138 = texelFetch(g_lightClassification, int((((_2884 << 5u) + (_2870 << 9u)) + (_3129 << 2u)) >> 2u)).x;
                _3139 = _3138 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3139)
                {
                    frontier_phi_71_pred = _3128;
                    frontier_phi_71_pred_1 = _3127;
                    frontier_phi_71_pred_2 = _3126;
                    frontier_phi_71_pred_3 = _3125;
                    frontier_phi_71_pred_4 = _3124;
                    frontier_phi_71_pred_5 = _3123;
                }
                else
                {
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    uint _3274;
                    _3268 = _3123;
                    _3269 = _3124;
                    _3270 = _3125;
                    _3271 = _3126;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3138;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    for (;;)
                    {
                        uint _3278 = uint(findLSB(_3274)) + (_3129 << 5u);
                        uint _3275 = (_3274 + 4294967295u) & _3274;
                        uint _3280 = _3278 * 48u;
                        vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 3u)).x));
                        uint _3300 = (_3278 * 48u) + 4u;
                        vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 3u)).x));
                        uint _3319 = (_3278 * 48u) + 8u;
                        vec3 _3330 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3319)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 2u)).x));
                        float _3334 = _3294.x - _1948;
                        float _3335 = _3294.y - _1949;
                        float _3336 = _3294.z - _1950;
                        float _3337 = dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336));
                        float _3340 = inversesqrt(_3337);
                        float _3341 = _3340 * _3334;
                        float _3342 = _3340 * _3335;
                        float _3343 = _3340 * _3336;
                        float _3344 = dot(vec3(_782, _785, _788), vec3(_3341, _3342, _3343));
                        float _3349 = 1.0 - (_3337 * _3294.w);
                        float _4821 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3350 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3351 = sqrt(_3337) * _3313.w;
                        float _3354 = 1.39999997615814208984375 / (_3351 + 1.39999997615814208984375);
                        float _3355 = _3354 * _3354;
                        float _3358 = ((1.0 - _3355) * _3344) + _3355;
                        float _3361 = _3351 * _3351;
                        float _3365 = ((isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0))) * _3350) / ((_3361 * 0.699999988079071044921875) + 1.0);
                        float _3369 = (-0.0) - _1948;
                        float _3370 = (-0.0) - _1949;
                        float _3371 = (-0.0) - _1950;
                        float _3375 = inversesqrt(dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371)));
                        float _3376 = _3375 * _3369;
                        float _3377 = _3375 * _3370;
                        float _3378 = _3375 * _3371;
                        float _3385 = exp2(log2(1.0 / ((_3361 * 3.5) + 5.0)) * 0.25);
                        float _3386 = 1.0 - _857;
                        float _3393 = sqrt(1.0 - ((1.0 - (_3386 * _3386)) * (1.0 - (_3385 * _3385))));
                        float _3394 = _3393 * _3393;
                        float _3395 = _3394 * _3394;
                        float _3396 = _3376 + _3341;
                        float _3397 = _3377 + _3342;
                        float _3398 = _3378 + _3343;
                        float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                        float _3406 = dot(vec3(_782, _785, _788), vec3(_3376, _3377, _3378));
                        float _4837 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3409 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3410 = dot(vec3(_782, _785, _788), vec3(_3402 * _3396, _3402 * _3397, _3402 * _3398));
                        float _4848 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3413 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3417 = ((_3413 * _3413) * (_3395 + (-1.0))) + 1.0;
                        float _3418 = _3354 * _3394;
                        float _3419 = _3418 * _3418;
                        float _3422 = ((1.0 - _3419) * _3344) + _3419;
                        float _4859 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3423 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3424 = 1.0 - _3394;
                        float _3434 = (0.5 / (((_3423 * ((_3409 * _3424) + _3394)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3394) * _3409))) * _3423;
                        float _4870 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3445 = (((_3395 * 3.1415927410125732421875) * (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) / ((_3417 * _3417) * ((_3361 * 2.1991131305694580078125) + 3.141590118408203125))) * _3350;
                        _3198 = (_3365 * _3313.x) + _3271;
                        _3199 = (_3365 * _3313.y) + _3272;
                        _3200 = (_3365 * _3313.z) + _3273;
                        _3195 = (_3445 * _3330.x) + _3268;
                        _3196 = (_3445 * _3330.y) + _3269;
                        _3197 = (_3445 * _3330.z) + _3270;
                        if (_3275 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3268 = _3195;
                            _3269 = _3196;
                            _3270 = _3197;
                            _3271 = _3198;
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3275;
                        }
                    }
                    frontier_phi_71_pred = _3200;
                    frontier_phi_71_pred_1 = _3199;
                    frontier_phi_71_pred_2 = _3198;
                    frontier_phi_71_pred_3 = _3197;
                    frontier_phi_71_pred_4 = _3196;
                    frontier_phi_71_pred_5 = _3195;
                }
                _2981 = frontier_phi_71_pred;
                _2979 = frontier_phi_71_pred_1;
                _2977 = frontier_phi_71_pred_2;
                _2975 = frontier_phi_71_pred_3;
                _2973 = frontier_phi_71_pred_4;
                _2971 = frontier_phi_71_pred_5;
                uint _3130 = _3129 + 1u;
                if (_3130 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3123 = _2971;
                    _3124 = _2973;
                    _3125 = _2975;
                    _3126 = _2977;
                    _3127 = _2979;
                    _3128 = _2981;
                    _3129 = _3130;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
        }
        uvec4 _2984 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2985 = _2984.z;
        uint _2987 = (_2985 >> 8u) & 15u;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        if (((4294967295u << _2987) & _2890) == 0u)
        {
            _3091 = _2970;
            _3093 = _2972;
            _3095 = _2974;
            _3097 = _2976;
            _3099 = _2978;
            _3101 = _2980;
        }
        else
        {
            float _3116 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
            float _3117 = _3116 * _1948;
            float _3118 = _3116 * _1949;
            float _3119 = _3116 * _1950;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2987 < ((_2985 >> 12u) & 15u))
            {
                float _3092;
                float _3094;
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3251 = _2970;
                float _3252 = _2972;
                float _3253 = _2974;
                float _3254 = _2976;
                float _3255 = _2978;
                float _3256 = _2980;
                uint _3257 = _2987;
                uint _3266;
                bool _3267;
                for (;;)
                {
                    _3266 = texelFetch(g_lightClassification, int((((_2884 << 5u) + (_2870 << 9u)) + (_3257 << 2u)) >> 2u)).x;
                    _3267 = _3266 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3267)
                    {
                        frontier_phi_82_pred = _3256;
                        frontier_phi_82_pred_1 = _3255;
                        frontier_phi_82_pred_2 = _3254;
                        frontier_phi_82_pred_3 = _3253;
                        frontier_phi_82_pred_4 = _3252;
                        frontier_phi_82_pred_5 = _3251;
                    }
                    else
                    {
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3472 = _3251;
                        float _3473 = _3252;
                        float _3474 = _3253;
                        float _3475 = _3254;
                        float _3476 = _3255;
                        float _3477 = _3256;
                        uint _3478 = _3266;
                        uint _3479;
                        vec4 _3504;
                        float _3505;
                        vec4 _3520;
                        vec3 _3532;
                        vec4 _3547;
                        vec4 _3562;
                        float _3608;
                        bool _3609;
                        for (;;)
                        {
                            uint _3489 = ((_3257 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3478));
                            _3479 = (_3478 + 4294967295u) & _3478;
                            uint _3491 = _3489 * 40u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            _3505 = _3504.w;
                            uint _3507 = (_3489 * 40u) + 4u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3489 * 40u) + 8u;
                            _3532 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x));
                            uint _3534 = (_3489 * 40u) + 16u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3489 * 40u) + 20u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3489 * 40u) + 24u;
                            vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3583 = (_3489 * 40u) + 28u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            _3608 = fma(_1950, _3596.z, fma(_1949, _3596.y, _3596.x * _1948)) + _3596.w;
                            _3609 = !((fma(_1950, _3577.z, fma(_1949, _3577.y, _3577.x * _1948)) + _3577.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3609)
                            {
                                float _3636 = _3504.x - _1948;
                                float _3637 = _3504.y - _1949;
                                float _3638 = _3504.z - _1950;
                                float _3639 = dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638));
                                float _3642 = inversesqrt(_3639);
                                float _3643 = _3642 * _3636;
                                float _3644 = _3642 * _3637;
                                float _3645 = _3642 * _3638;
                                float _3649 = 1.0 - (_3639 / (_3505 * _3505));
                                float _4881 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3654 = sqrt(_3639) * _3520.w;
                                float _3656 = 1.39999997615814208984375 / (_3654 + 1.39999997615814208984375);
                                float _3657 = _3656 * _3656;
                                float _3660 = ((1.0 - _3657) * dot(vec3(_3643, _3644, _3645), vec3(_782, _785, _788))) + _3657;
                                float _3663 = _3654 * _3654;
                                float _3667 = (fma(_1950, _3547.z, fma(_1949, _3547.y, _3547.x * _1948)) + _3547.w) / _3608;
                                float _3668 = (fma(_1950, _3562.z, fma(_1949, _3562.y, _3562.x * _1948)) + _3562.w) / _3608;
                                float _3672 = 1.0 - dot(vec2(_3667, _3668), vec2(_3667, _3668));
                                float _4897 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3674 = _3673 * (((isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0))) * _3650) / ((_3663 * 0.699999988079071044921875) + 1.0));
                                float _3686 = exp2(log2(1.0 / ((_3663 * 3.5) + 5.0)) * 0.25);
                                float _3687 = 1.0 - _857;
                                float _3694 = sqrt(1.0 - ((1.0 - (_3687 * _3687)) * (1.0 - (_3686 * _3686))));
                                float _3695 = _3694 * _3694;
                                float _3696 = _3695 * _3695;
                                float _3697 = _3643 - _3117;
                                float _3698 = _3644 - _3118;
                                float _3699 = _3645 - _3119;
                                float _3703 = inversesqrt(dot(vec3(_3697, _3698, _3699), vec3(_3697, _3698, _3699)));
                                float _3707 = dot(vec3(_782, _785, _788), vec3((-0.0) - _3117, (-0.0) - _3118, (-0.0) - _3119));
                                float _4908 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3710 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3711 = dot(vec3(_782, _785, _788), vec3(_3703 * _3697, _3703 * _3698, _3703 * _3699));
                                float _4919 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3714 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3718 = ((_3714 * _3714) * (_3696 + (-1.0))) + 1.0;
                                float _3719 = _3656 * _3695;
                                float _3720 = _3719 * _3719;
                                float _3726 = ((1.0 - _3720) * dot(vec3(_782, _785, _788), vec3(_3643, _3644, _3645))) + _3720;
                                float _4930 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3728 = 1.0 - _3695;
                                float _3738 = (0.5 / (((_3727 * ((_3710 * _3728) + _3695)) + 9.9999999392252902907785028219223e-09) + (((_3727 * _3728) + _3695) * _3710))) * _3727;
                                float _4941 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3748 = (_3673 * _3650) * (((_3696 * 3.1415927410125732421875) * (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0)))) / ((_3718 * _3718) * ((_3663 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3674 * _3520.z;
                                frontier_phi_88_pred_1 = _3674 * _3520.y;
                                frontier_phi_88_pred_2 = _3674 * _3520.x;
                                frontier_phi_88_pred_3 = _3748 * _3532.z;
                                frontier_phi_88_pred_4 = _3748 * _3532.y;
                                frontier_phi_88_pred_5 = _3748 * _3532.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3757 = frontier_phi_88_pred;
                            _3756 = frontier_phi_88_pred_1;
                            _3755 = frontier_phi_88_pred_2;
                            _3754 = frontier_phi_88_pred_3;
                            _3753 = frontier_phi_88_pred_4;
                            _3752 = frontier_phi_88_pred_5;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            _3464 = _3757 + _3477;
                            _3459 = _3752 + _3472;
                            _3460 = _3753 + _3473;
                            _3461 = _3754 + _3474;
                            if (_3479 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3479;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3464;
                        frontier_phi_82_pred_1 = _3463;
                        frontier_phi_82_pred_2 = _3462;
                        frontier_phi_82_pred_3 = _3461;
                        frontier_phi_82_pred_4 = _3460;
                        frontier_phi_82_pred_5 = _3459;
                    }
                    _3102 = frontier_phi_82_pred;
                    _3100 = frontier_phi_82_pred_1;
                    _3098 = frontier_phi_82_pred_2;
                    _3096 = frontier_phi_82_pred_3;
                    _3094 = frontier_phi_82_pred_4;
                    _3092 = frontier_phi_82_pred_5;
                    uint _3258 = _3257 + 1u;
                    if (_3258 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3251 = _3092;
                        _3252 = _3094;
                        _3253 = _3096;
                        _3254 = _3098;
                        _3255 = _3100;
                        _3256 = _3102;
                        _3257 = _3258;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3098;
                frontier_phi_63_64_ladder_1 = _3102;
                frontier_phi_63_64_ladder_2 = _3100;
                frontier_phi_63_64_ladder_3 = _3096;
                frontier_phi_63_64_ladder_4 = _3094;
                frontier_phi_63_64_ladder_5 = _3092;
            }
            else
            {
                frontier_phi_63_64_ladder = _2976;
                frontier_phi_63_64_ladder_1 = _2980;
                frontier_phi_63_64_ladder_2 = _2978;
                frontier_phi_63_64_ladder_3 = _2974;
                frontier_phi_63_64_ladder_4 = _2972;
                frontier_phi_63_64_ladder_5 = _2970;
            }
            _3091 = frontier_phi_63_64_ladder_5;
            _3093 = frontier_phi_63_64_ladder_4;
            _3095 = frontier_phi_63_64_ladder_3;
            _3097 = frontier_phi_63_64_ladder;
            _3099 = frontier_phi_63_64_ladder_2;
            _3101 = frontier_phi_63_64_ladder_1;
        }
        float _3106 = isnan(1.0) ? _841 : (isnan(_841) ? 1.0 : min(_841, 1.0));
        _2903 = (_3106 * _3097) + _2415;
        _2905 = (_3106 * _3099) + _2417;
        _2907 = (_3106 * _3101) + _2419;
        _2909 = ((_3091 * _825) * _3106) + _2753;
        _2911 = ((_3093 * _827) * _3106) + _2755;
        _2913 = ((_3095 * _828) * _3106) + _2757;
    }
    else
    {
        _2903 = _2415;
        _2905 = _2417;
        _2907 = _2419;
        _2909 = _2753;
        _2911 = _2755;
        _2913 = _2757;
    }
    float _4957 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4968 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4979 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _2930 = ((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2903 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _841))) + ((_2909 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1680)) * cbPerFrame._m0[3u].x);
    float _2931 = ((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2905 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _841))) + ((_2911 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1680)) * cbPerFrame._m0[3u].x);
    float _2932 = ((isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_2907 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _841))) + ((_2913 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1680)) * cbPerFrame._m0[3u].x);
    uint _2933 = _273 + 6u;
    float _2941 = _761 / cbSceneParam._m0[86u].x;
    float _2942 = _762 / cbSceneParam._m0[86u].y;
    vec4 _2956 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2941, _2942, (log2((isnan(cbSceneParam._m0[77u].w) ? _683 : (isnan(_683) ? cbSceneParam._m0[77u].w : min(_683, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2958 = _2956.x;
    float _2959 = _2956.y;
    float _2960 = _2956.z;
    float _2961 = _2956.w;
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    if (_683 > cbSceneParam._m0[78u].w)
    {
        float _2995 = isnan(_683) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _683 : min(cbSceneParam._m0[80u].w, _683));
        float _2996 = _2995 / _683;
        float _3007 = _2996 * _733;
        float _3008 = _734 * _2996;
        float _3009 = (-0.0) - _3008;
        float _3011 = _2996 * _735;
        float _3013 = (cbSceneParam._m0[77u].w * _3009) / _2995;
        float _3014 = _3013 + cbSceneParam._m0[79u].w;
        float _3015 = cbSceneParam._m0[79u].w - _3008;
        float _3021 = sqrt(((_3007 * _3007) + (_3008 * _3008)) + (_3011 * _3011));
        float _3024 = (1.0 - (cbSceneParam._m0[77u].w / _2995)) * _3021;
        float _3029 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3031 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3208;
        if (abs((_3009 - _3013) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3208 = ((((_3014 > 0.0) ? exp2(_3029 * _3014) : (2.0 - exp2(_3031 * _3014))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3024;
        }
        else
        {
            float _3152 = 1.0 / cbSceneParam._m0[80u].x;
            float _3153 = isnan(_3015) ? _3014 : (isnan(_3014) ? _3015 : max(_3014, _3015));
            float _3154 = isnan(_3015) ? _3014 : (isnan(_3014) ? _3015 : min(_3014, _3015));
            float _3163 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : min(_3153, 0.0));
            float _3164 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : min(_3154, 0.0));
            _3208 = ((abs(_3021 / _3009) * cbSceneParam._m0[80u].y) * ((((_3163 - _3164) * 2.0) - ((exp2(_3029 * (isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0)))) - exp2(_3029 * (isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))))) * _3152)) - ((exp2(_3031 * _3163) - exp2(_3031 * _3164)) * _3152))) + (_3024 * cbSceneParam._m0[80u].z);
        }
        vec4 _3210 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2941, _2942, 1.0), 0.0);
        float _3219 = exp2((_3208 * (-1.44269502162933349609375)) * (1.0 - _3210.w));
        float _3220 = log2(_3219);
        float _3236 = log2(_2961);
        _3033 = (exp2(_3236 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].x)) * _3210.x) / cbSceneParam._m0[78u].x)) + _2958;
        _3035 = (exp2(_3236 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].y)) * _3210.y) / cbSceneParam._m0[78u].y)) + _2959;
        _3037 = (exp2(_3236 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].z)) * _3210.z) / cbSceneParam._m0[78u].z)) + _2960;
        _3039 = _3219 * _2961;
    }
    else
    {
        _3033 = _2958;
        _3035 = _2959;
        _3037 = _2960;
        _3039 = _2961;
    }
    bool _3246;
    vec4 _3049;
    vec4 _3071;
    float _3073;
    float _3077;
    float _3078;
    float _3079;
    float _3080;
    bool _3090;
    for (;;)
    {
        _3049 = cbMatDynParam._m0[0u];
        float _3051 = roundEven(_3049.y);
        bool _3052 = _3051 == 3.0;
        float _3053 = log2(_3039);
        float _3060 = exp2(_3053 * cbSceneParam._m0[78u].x) * _2930;
        float _3061 = exp2(_3053 * cbSceneParam._m0[78u].y) * _2931;
        float _3062 = exp2(_3053 * cbSceneParam._m0[78u].z) * _2932;
        float _3069 = _749 + (-0.5);
        _3071 = cbMtdParam._m0[1u];
        _3073 = _3071.y * _3069;
        float _3076 = (_3051 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3077 = _3076 * (_3052 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3033)));
        _3078 = _3076 * (_3052 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3035)));
        _3079 = _3076 * (_3052 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3037)));
        _3080 = _3069 * 0.999000012874603271484375;
        _3090 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3090)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _3080) < 0.5)
            {
                _3246 = true;
                break;
            }
        }
        uint _3187 = _801 + uint(_3049.w);
        if ((cbInstanceData._m0[_3187].w < 1.0) && ((cbInstanceData._m0[_3187].w + _3080) < 0.5))
        {
            _3246 = true;
            break;
        }
        if ((_3073 + 1.0) < _3071.x)
        {
            _3246 = true;
            break;
        }
        _3246 = false;
        break;
    }
    float _3450;
    if (_3246)
    {
        discard_state = true;
        _3450 = 0.0;
    }
    else
    {
        _3450 = cbInstanceData._m0[_2933].w;
    }
    SV_Target.x = _3077;
    SV_Target.y = _3078;
    SV_Target.z = _3079;
    SV_Target.w = _3450;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2933].w;
    discard_exit();
}


