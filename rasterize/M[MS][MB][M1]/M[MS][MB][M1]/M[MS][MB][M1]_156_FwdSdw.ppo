#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1273;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _366 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _366) * cbMtdParam._m0[24u].y) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3881 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _391 = (_384 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _392 = (_384 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _393 = (_384 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _412 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _478 = _476.x;
    float _479 = _476.y;
    float _480 = _476.z;
    float _489 = ((_459.z - _480) * _384) + _480;
    float _492 = ((((_459.x - _478) * _384) + _478) * 2.0) + (-1.0);
    float _493 = ((((_459.y - _479) * _384) + _479) * 2.0) + (-1.0);
    float _494 = dot(vec2(_492, _493), vec2(_492, _493));
    float _3892 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _499 = sqrt(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))));
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _531 = (_492 + ((((_432.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_519.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _532 = (_493 + ((((_432.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_519.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _535 = fma(_499, _234, fma(_532, _241, _531 * _227));
    float _538 = fma(_499, _235, fma(_532, _242, _531 * _228));
    float _541 = fma(_499, _236, fma(_532, _243, _531 * _229));
    float _545 = inversesqrt(dot(vec3(_535, _538, _541), vec3(_535, _538, _541)));
    vec4 _572 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _574 = _572.x;
    float _575 = 1.0 - _574;
    float _579 = ((_574 - _575) * cbMtdParam._m0[24u].z) + _575;
    float _581 = (cbMtdParam._m0[19u].x + dot(vec4(_545 * _535, _545 * _538, _545 * _541, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_579 * cbMtdParam._m0[21u].z);
    float _3903 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _597 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_579 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3914 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _602 = ((_582 * ((_412.x * cbMtdParam._m0[18u].x) - _391)) * _598) + _391;
    float _603 = ((_582 * ((_412.y * cbMtdParam._m0[18u].y) - _392)) * _598) + _392;
    float _604 = ((_582 * ((_412.z * cbMtdParam._m0[18u].z) - _393)) * _598) + _393;
    vec4 _616 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _632 = _630.x;
    float _650 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _632) * _384) + _632;
    float _654 = ((_616.x - _650) * cbMtdParam._m0[19u].z) + _650;
    float _657 = _654 - ((_598 * _582) * _654);
    float _662 = (((_432.z - _489) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _489;
    float _666 = ((_519.z - _662) * cbMtdParam._m0[19u].w) + _662;
    vec4 _679 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _686 = (_679.x * 2.0) + (-1.0);
    float _687 = (_679.y * 2.0) + (-1.0);
    float _688 = dot(vec2(_686, _687), vec2(_686, _687));
    float _3925 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _697 = (((_679.z - _666) * _582) * _598) + _666;
    float _712 = (((cbMtdParam._m0[21u].x * _531) + ((_686 - _531) * _582)) * _598) + _531;
    float _713 = (((cbMtdParam._m0[21u].x * _532) + ((_687 - _532) * _582)) * _598) + _532;
    float _714 = (((sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) - _499) * _582) * _598) + _499;
    float _719 = cbMtdParam._m0[22u].x + _519.w;
    float _722 = fma(_714, _234, fma(_713, _241, _712 * _227));
    float _725 = fma(_714, _235, fma(_713, _242, _712 * _228));
    float _728 = fma(_714, _236, fma(_713, _243, _712 * _229));
    float _732 = inversesqrt(dot(vec3(_722, _725, _728), vec3(_722, _725, _728)));
    float _733 = _732 * _722;
    float _734 = _732 * _725;
    float _735 = _732 * _728;
    float _3936 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _736 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _3958 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3969 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3980 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3991 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _741 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _755 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _806 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _796);
    float _807 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _796);
    float _808 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _796);
    float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
    float _813 = _806 * _812;
    float _814 = _807 * _812;
    float _815 = _808 * _812;
    float _821 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _822 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _840 = fma(_735, cbSceneParam._m0[5u].z, fma(_734, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _733));
    float _843 = fma(_735, cbSceneParam._m0[6u].z, fma(_734, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _733));
    float _846 = fma(_735, cbSceneParam._m0[7u].z, fma(_734, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _733));
    uint _860 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _866 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * cbInstanceData._m0[_860].x;
    float _867 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * cbInstanceData._m0[_860].y;
    float _868 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_860].z;
    float _4002 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _4024 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _872 = 1.0 - _741;
    float _873 = _869 * _872;
    float _874 = _870 * _872;
    float _875 = _871 * _872;
    float _880 = (_869 + (-0.039999999105930328369140625)) * _741;
    float _881 = (_870 + (-0.039999999105930328369140625)) * _741;
    float _882 = (_871 + (-0.039999999105930328369140625)) * _741;
    float _883 = _880 + 0.039999999105930328369140625;
    float _885 = _881 + 0.039999999105930328369140625;
    float _886 = _882 + 0.039999999105930328369140625;
    vec4 _895 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _821, cbSceneParam._m0[86u].y * _822));
    float _899 = ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * TEXCOORD_5.w) * _895.x;
    float _900 = dot(vec3(_733, _734, _735), vec3(_813, _814, _815));
    float _903 = _900 * 2.0;
    float _907 = (_903 * _733) - _813;
    float _908 = (_903 * _734) - _814;
    float _909 = (_903 * _735) - _815;
    float _913 = abs(dot(vec3(_813, _814, _815), vec3(_733, _734, _735)));
    float _4035 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _915 = sqrt(_736);
    float _928 = exp2((_915 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_915 * 3.0));
    float _934 = (1.0 - _928) * ((_915 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _935 = _928 * _915;
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1272;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _997 = fma(_971, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963));
        float _1001 = fma(_971, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963));
        float _1005 = fma(_971, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963));
        float _1030 = _963 + _733;
        float _1031 = _967 + _734;
        float _1032 = _971 + _735;
        float _1042 = fma(_1032, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030)) - _997;
        float _1043 = fma(_1032, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030)) - _1001;
        float _1044 = fma(_1032, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030)) - _1005;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_997 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1001 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[34u].z) + ((((((_1005 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1100 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1066.x + (-0.5));
        float _1102 = _1100 * (_1066.y + (-0.5));
        float _1103 = _1100 * (_1066.z + (-0.5));
        float _1110 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1073.x + (-0.5));
        float _1112 = _1110 * (_1073.y + (-0.5));
        float _1113 = _1110 * (_1073.z + (-0.5));
        float _1120 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1080.x + (-0.5));
        float _1122 = _1120 * (_1080.y + (-0.5));
        float _1123 = _1120 * (_1080.z + (-0.5));
        float _1130 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1087.x + (-0.5));
        float _1132 = _1130 * (_1087.y + (-0.5));
        float _1133 = _1130 * (_1087.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1154 = (dot(vec3(_733, _734, _735), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1164 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _4083 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1166 + 1.0))) + _1171) * _1134;
        float _1181 = _1102 * 0.5;
        float _1182 = _1112 * 0.5;
        float _1183 = _1122 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_733, _734, _735), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _4116 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1208 + 1.0))) + _1213) * _1135;
        float _1223 = _1103 * 0.5;
        float _1224 = _1113 * 0.5;
        float _1225 = _1123 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_733, _734, _735), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4149 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1250 + 1.0))) + _1255) * _1136;
        _1272 = _1103;
        _1274 = _1102;
        _1275 = _1101;
        _1276 = _1113;
        _1277 = _1112;
        _1278 = _1111;
        _1279 = _1123;
        _1280 = _1122;
        _1281 = _1121;
        _1282 = _1136;
        _1283 = _1135;
        _1284 = _1134;
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
    }
    else
    {
        _1272 = _1273;
        _1274 = _1273;
        _1275 = _1273;
        _1276 = _1273;
        _1277 = _1273;
        _1278 = _1273;
        _1279 = _1273;
        _1280 = _1273;
        _1281 = _1273;
        _1282 = _1273;
        _1283 = _1273;
        _1284 = _1273;
        _1285 = 0.0;
        _1286 = 0.0;
        _1287 = 0.0;
    }
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1312 = fma(_971, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963));
        float _1316 = fma(_971, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963));
        float _1320 = fma(_971, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963));
        float _1343 = _963 + _733;
        float _1344 = _967 + _734;
        float _1345 = _971 + _735;
        float _1355 = fma(_1345, cbModelParam._m0[30u].z, fma(_1344, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1343)) - _1312;
        float _1356 = fma(_1345, cbModelParam._m0[31u].z, fma(_1344, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1343)) - _1316;
        float _1357 = fma(_1345, cbModelParam._m0[32u].z, fma(_1344, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1343)) - _1320;
        float _1361 = inversesqrt(dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357)));
        float _1374 = ((_1361 * _1355) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1312 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1361 * _1356) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1316 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1361 * _1357) / cbModelParam._m0[35u].z) + ((((((_1320 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        float _1411 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1378.x + (-0.5));
        float _1413 = _1411 * (_1378.y + (-0.5));
        float _1414 = _1411 * (_1378.z + (-0.5));
        float _1421 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1385.x + (-0.5));
        float _1423 = _1421 * (_1385.y + (-0.5));
        float _1424 = _1421 * (_1385.z + (-0.5));
        float _1431 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1392.x + (-0.5));
        float _1433 = _1431 * (_1392.y + (-0.5));
        float _1434 = _1431 * (_1392.z + (-0.5));
        float _1441 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1399.x + (-0.5));
        float _1443 = _1441 * (_1399.y + (-0.5));
        float _1444 = _1441 * (_1399.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_733, _734, _735), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4212 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1475 + 1.0))) + _1480) * _1445;
        float _1490 = _1413 * 0.5;
        float _1491 = _1423 * 0.5;
        float _1492 = _1433 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_733, _734, _735), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4245 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1517 + 1.0))) + _1522) * _1446;
        float _1532 = _1414 * 0.5;
        float _1533 = _1424 * 0.5;
        float _1534 = _1434 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_733, _734, _735), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4278 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1559 + 1.0))) + _1564) * _1447;
        _1581 = _1414;
        _1582 = _1413;
        _1583 = _1412;
        _1584 = _1424;
        _1585 = _1423;
        _1586 = _1422;
        _1587 = _1434;
        _1588 = _1433;
        _1589 = _1432;
        _1590 = _1447;
        _1591 = _1446;
        _1592 = _1445;
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1273;
        _1582 = _1273;
        _1583 = _1273;
        _1584 = _1273;
        _1585 = _1273;
        _1586 = _1273;
        _1587 = _1273;
        _1588 = _1273;
        _1589 = _1273;
        _1590 = _1273;
        _1591 = _1273;
        _1592 = _1273;
        _1593 = 0.0;
        _1594 = 0.0;
        _1595 = 0.0;
    }
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1285)) + _1285;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1286)) + _1286;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1287)) + _1287;
    float _1628 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1605 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1605 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1605));
    float _1649 = _907 * 0.5;
    float _1650 = _908 * 0.5;
    float _1651 = _909 * 0.5;
    float _1652 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1655 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1658 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1692;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1665 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1272, _1276, _1279, _1282));
        float _1669 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1673 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1680 = dot(vec4(cbModelParam._m0[39u]), vec4(_1649, _1650, _1651, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1703;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1694 = dot(vec4(cbModelParam._m0[40u]), vec4(_1649, _1650, _1651, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1707 = (_1703 * cbModelParam._m0[1u].x) + (_1692 * (1.0 - cbModelParam._m0[1u].x));
    float _1717 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _736);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1717 : min(cbModelParam._m0[25u].z, _1717));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1765 = fma(_971, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963)) + cbModelParam._m0[13u].w;
        float _1769 = fma(_971, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963)) + cbModelParam._m0[14u].w;
        float _1773 = fma(_971, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963)) + cbModelParam._m0[15u].w;
        float _1776 = fma(_909, cbModelParam._m0[13u].z, fma(_908, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907));
        float _1779 = fma(_909, cbModelParam._m0[14u].z, fma(_908, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907));
        float _1782 = fma(_909, cbModelParam._m0[15u].z, fma(_908, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907));
        float _1810;
        if (_1776 > 0.0)
        {
            _1810 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1810 = frontier_phi_14_12_ladder;
        }
        float _1981;
        if (_1779 > 0.0)
        {
            _1981 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1981 = frontier_phi_23_19_ladder;
        }
        float _2276;
        if (_1782 > 0.0)
        {
            _2276 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2276 = frontier_phi_35_30_ladder;
        }
        float _2278 = isnan(_1981) ? _1810 : (isnan(_1810) ? _1981 : min(_1810, _1981));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1776) + _1765;
        float _2284 = (_2279 * _1779) + _1769;
        float _2285 = (_2279 * _1782) + _1773;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2288 = (-1.0) - _2286;
        float _2290 = _2286 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2285 > _2290) || ((_2285 < _2288) || ((_2284 > _2290) || ((_2284 < _2288) || ((_2283 < _2288) || (_2283 > _2290))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2285, cbModelParam._m0[9u].z, fma(_2284, cbModelParam._m0[9u].y, _2283 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2285, cbModelParam._m0[10u].z, fma(_2284, cbModelParam._m0[10u].y, _2283 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2285, cbModelParam._m0[11u].z, fma(_2284, cbModelParam._m0[11u].y, _2283 * cbModelParam._m0[11u].x))), _1718);
            frontier_phi_13_35_ladder = _2430.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2430.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2430.x * cbModelParam._m0[1u].y;
        }
        _1798 = frontier_phi_13_35_ladder_2;
        _1800 = frontier_phi_13_35_ladder_1;
        _1802 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_907, _908, _909), _1718);
        _1798 = _1786.x * cbModelParam._m0[1u].y;
        _1800 = _1786.y * cbModelParam._m0[1u].y;
        _1802 = _1786.z * cbModelParam._m0[1u].y;
    }
    float _1806 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _736);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1806 : min(cbModelParam._m0[25u].w, _1806));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1860 = fma(_971, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963)) + cbModelParam._m0[21u].w;
        float _1864 = fma(_971, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963)) + cbModelParam._m0[22u].w;
        float _1868 = fma(_971, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963)) + cbModelParam._m0[23u].w;
        float _1871 = fma(_909, cbModelParam._m0[21u].z, fma(_908, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907));
        float _1874 = fma(_909, cbModelParam._m0[22u].z, fma(_908, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907));
        float _1877 = fma(_909, cbModelParam._m0[23u].z, fma(_908, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907));
        float _1986;
        if (_1871 > 0.0)
        {
            _1986 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1986 = frontier_phi_25_21_ladder;
        }
        float _2303;
        if (_1874 > 0.0)
        {
            _2303 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2303 = frontier_phi_37_32_ladder;
        }
        float _2641;
        if (_1877 > 0.0)
        {
            _2641 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2641 = frontier_phi_47_44_ladder;
        }
        float _2643 = isnan(_2303) ? _1986 : (isnan(_1986) ? _2303 : min(_1986, _2303));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _1871) + _1860;
        float _2649 = (_2644 * _1874) + _1864;
        float _2650 = (_2644 * _1877) + _1868;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2652 = (-1.0) - _2651;
        float _2654 = _2651 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2650 > _2654) || ((_2650 < _2652) || ((_2649 > _2654) || ((_2649 < _2652) || ((_2648 < _2652) || (_2648 > _2654))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2772 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2650, cbModelParam._m0[17u].z, fma(_2649, cbModelParam._m0[17u].y, _2648 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2650, cbModelParam._m0[18u].z, fma(_2649, cbModelParam._m0[18u].y, _2648 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2650, cbModelParam._m0[19u].z, fma(_2649, cbModelParam._m0[19u].y, _2648 * cbModelParam._m0[19u].x))), _1807);
            frontier_phi_22_47_ladder = _2772.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2772.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2772.x * cbModelParam._m0[1u].z;
        }
        _1896 = frontier_phi_22_47_ladder_2;
        _1898 = frontier_phi_22_47_ladder_1;
        _1900 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_907, _908, _909), _1807);
        _1896 = _1880.x * cbModelParam._m0[1u].z;
        _1898 = _1880.y * cbModelParam._m0[1u].z;
        _1900 = _1880.z * cbModelParam._m0[1u].z;
    }
    float _1913 = (((_934 * _883) + _935) * _899) * ((cbModelParam._m0[1u].w * (_1896 - _1798)) + _1798);
    float _1915 = (((_934 * _885) + _935) * _899) * ((cbModelParam._m0[1u].w * (_1898 - _1800)) + _1800);
    float _1917 = (((_934 * _886) + _935) * _899) * ((cbModelParam._m0[1u].w * (_1900 - _1802)) + _1802);
    float _1920 = fma(_1917, cbSceneParam._m0[89u].z, fma(_1915, cbSceneParam._m0[89u].y, _1913 * cbSceneParam._m0[89u].x));
    float _1923 = fma(_1917, cbSceneParam._m0[90u].z, fma(_1915, cbSceneParam._m0[90u].y, _1913 * cbSceneParam._m0[90u].x));
    float _1926 = fma(_1917, cbSceneParam._m0[91u].z, fma(_1915, cbSceneParam._m0[91u].y, _1913 * cbSceneParam._m0[91u].x));
    float _1960 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1964 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1973 = _1960 / _1972;
    float _1974 = _1964 / _1972;
    float _1975 = _1968 / _1972;
    float _2122;
    float _2123;
    float _2124;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2002 = ((uint(_1975 > cbSceneParam._m0[59u].y) + uint(_1975 > cbSceneParam._m0[59u].x)) + uint(_1975 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2003 = _2002 + 43u;
        uint _2011 = _2002 + 44u;
        uint _2019 = _2002 + 45u;
        uint _2027 = _2002 + 46u;
        float _2038 = fma(_1972, cbSceneParam._m0[_2003].w, fma(_1968, cbSceneParam._m0[_2003].z, fma(_1964, cbSceneParam._m0[_2003].y, _1960 * cbSceneParam._m0[_2003].x)));
        float _2042 = fma(_1972, cbSceneParam._m0[_2011].w, fma(_1968, cbSceneParam._m0[_2011].z, fma(_1964, cbSceneParam._m0[_2011].y, _1960 * cbSceneParam._m0[_2011].x)));
        float _2050 = fma(_1972, cbSceneParam._m0[_2027].w, fma(_1968, cbSceneParam._m0[_2027].z, fma(_1964, cbSceneParam._m0[_2027].y, _1960 * cbSceneParam._m0[_2027].x)));
        float _2055 = cbSceneParam._m0[33u].z * _2050;
        float _2057 = cbSceneParam._m0[33u].w * _2050;
        float _2060 = fma(_1972, cbSceneParam._m0[_2019].w, fma(_1968, cbSceneParam._m0[_2019].z, fma(_1964, cbSceneParam._m0[_2019].y, _1960 * cbSceneParam._m0[_2019].x))) / _2050;
        float _2108 = (cbSceneParam._m0[33u].x - sqrt(((_1974 * _1974) + (_1973 * _1973)) + (_1975 * _1975))) * cbSceneParam._m0[33u].y;
        float _4404 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2115 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 + _2038) / _2050, (_2057 + _2042) / _2050), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2057 + _2038) / _2050, (_2042 - _2055) / _2050), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2038 - _2055) / _2050, (_2042 - _2057) / _2050), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2038 - _2057) / _2050, (_2055 + _2042) / _2050), _2060), 0.0)).x), vec4(0.25)));
        _2122 = 1.0 - (_2115 * cbSceneParam._m0[34u].x);
        _2123 = 1.0 - (_2115 * cbSceneParam._m0[34u].y);
        _2124 = 1.0 - (_2115 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2122 = 1.0;
        _2123 = 1.0;
        _2124 = 1.0;
    }
    float _2188;
    float _2190;
    float _2192;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2176 = fma(_1972, cbSceneParam._m0[63u].w, fma(_1968, cbSceneParam._m0[63u].z, fma(_1964, cbSceneParam._m0[63u].y, _1960 * cbSceneParam._m0[63u].x)));
        float _2177 = fma(_1972, cbSceneParam._m0[60u].w, fma(_1968, cbSceneParam._m0[60u].z, fma(_1964, cbSceneParam._m0[60u].y, _1960 * cbSceneParam._m0[60u].x))) / _2176;
        float _2178 = fma(_1972, cbSceneParam._m0[61u].w, fma(_1968, cbSceneParam._m0[61u].z, fma(_1964, cbSceneParam._m0[61u].y, _1960 * cbSceneParam._m0[61u].x))) / _2176;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2177 >= cbSceneParam._m0[64u].x) && (_2178 >= cbSceneParam._m0[64u].y)) && (_2177 <= cbSceneParam._m0[64u].z)) && (_2178 <= cbSceneParam._m0[64u].w))
        {
            float _2316 = fma(_1972, cbSceneParam._m0[62u].w, fma(_1968, cbSceneParam._m0[62u].z, fma(_1964, cbSceneParam._m0[62u].y, _1960 * cbSceneParam._m0[62u].x))) / _2176;
            float _2320 = isnan(cbSceneParam._m0[41u].w) ? _2316 : (isnan(_2316) ? cbSceneParam._m0[41u].w : max(_2316, cbSceneParam._m0[41u].w));
            float _2363 = (cbSceneParam._m0[33u].x - sqrt(((_1974 * _1974) + (_1973 * _1973)) + (_1975 * _1975))) * cbSceneParam._m0[33u].y;
            float _4420 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
            float _2370 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2177, cbSceneParam._m0[33u].w + _2178), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2177, _2178 - cbSceneParam._m0[33u].z), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2177 - cbSceneParam._m0[33u].z, _2178 - cbSceneParam._m0[33u].w), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2177 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2178), _2320), 0.0)).x), vec4(0.25)));
            float _2374 = 1.0 - (_2370 * cbSceneParam._m0[34u].x);
            float _2375 = 1.0 - (_2370 * cbSceneParam._m0[34u].y);
            float _2376 = 1.0 - (_2370 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2376) ? _2124 : (isnan(_2124) ? _2376 : min(_2124, _2376));
            frontier_phi_34_33_ladder_1 = isnan(_2375) ? _2123 : (isnan(_2123) ? _2375 : min(_2123, _2375));
            frontier_phi_34_33_ladder_2 = isnan(_2374) ? _2122 : (isnan(_2122) ? _2374 : min(_2122, _2374));
        }
        else
        {
            frontier_phi_34_33_ladder = _2124;
            frontier_phi_34_33_ladder_1 = _2123;
            frontier_phi_34_33_ladder_2 = _2122;
        }
        _2188 = frontier_phi_34_33_ladder_2;
        _2190 = frontier_phi_34_33_ladder_1;
        _2192 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2188 = _2122;
        _2190 = _2123;
        _2192 = _2124;
    }
    uvec4 _2197 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2199 = _2197.x * 14u;
    uint _2200 = _2199 + 13u;
    float _2207 = _899 + (-1.0);
    float _2212 = (cbLight._m0[_2200].x * _2207) + 1.0;
    float _2213 = (cbLight._m0[_2200].y * _2207) + 1.0;
    float _2214 = (cbLight._m0[_2200].z * _2207) + 1.0;
    float _2215 = (cbLight._m0[_2200].w * _2207) + 1.0;
    uint _2216 = _2199 + 5u;
    float _2222 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
    uint _2226 = _2199 + 4u;
    float _2235 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    uint _2239 = _2199 | 1u;
    float _2250 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_733, _734, _735));
    float _2253 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_733, _734, _735));
    float _4456 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _4467 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2258 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * 0.3183098733425140380859375;
    float _2260 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * 0.3183098733425140380859375;
    float _2267 = ((cbLight._m0[_2216].x * _2222) * _2260) + (((cbLight._m0[_2226].x * _2188) * _2235) * _2258);
    float _2268 = ((_2222 * cbLight._m0[_2216].y) * _2260) + (((cbLight._m0[_2226].y * _2190) * _2235) * _2258);
    float _2269 = ((_2222 * cbLight._m0[_2216].z) * _2260) + (((cbLight._m0[_2226].z * _2192) * _2235) * _2258);
    uvec4 _2273 = floatBitsToUint(cbLight._m0[_2199 + 12u]);
    bool _2275 = _2273.x == 0u;
    float _2377;
    float _2379;
    float _2381;
    if (_2275)
    {
        _2377 = _2267;
        _2379 = _2268;
        _2381 = _2269;
    }
    else
    {
        uint _2385 = _2199 + 6u;
        float _2401 = (dot(vec3(cbLight._m0[_2199 + 2u].xyz), vec3(_733, _734, _735)) * 0.5) + 0.5;
        float _2402 = _2401 * _2401;
        float _4478 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2403 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2404 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2377 = (((cbLight._m0[_2385].x * 0.3183098733425140380859375) * _2403) * _2404) + _2267;
        _2379 = (((cbLight._m0[_2385].y * 0.3183098733425140380859375) * _2403) * _2404) + _2268;
        _2381 = (((cbLight._m0[_2385].z * 0.3183098733425140380859375) * _2403) * _2404) + _2269;
    }
    bool _2384 = _2273.y == 0u;
    float _2439;
    float _2441;
    float _2443;
    if (_2384)
    {
        _2439 = _2377;
        _2441 = _2379;
        _2443 = _2381;
    }
    else
    {
        uint _2612 = _2199 + 7u;
        float _2628 = (dot(vec3(cbLight._m0[_2199 + 3u].xyz), vec3(_733, _734, _735)) * 0.5) + 0.5;
        float _2629 = _2628 * _2628;
        float _4494 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2630 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2631 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2439 = (((cbLight._m0[_2612].x * 0.3183098733425140380859375) * _2630) * _2631) + _2377;
        _2441 = (((cbLight._m0[_2612].y * 0.3183098733425140380859375) * _2630) * _2631) + _2379;
        _2443 = (((cbLight._m0[_2612].z * 0.3183098733425140380859375) * _2630) * _2631) + _2381;
    }
    uint _2446 = _2199 + 8u;
    float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _736) * 0.949999988079071044921875);
    float _2460 = _2459 * _2459;
    float _2461 = cbLight._m0[_2199].x + _813;
    float _2462 = cbLight._m0[_2199].y + _814;
    float _2463 = cbLight._m0[_2199].z + _815;
    float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
    float _2468 = _2467 * _2461;
    float _2469 = _2467 * _2462;
    float _2470 = _2467 * _2463;
    float _2471 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2199].xyz));
    float _4510 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _4521 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _2475 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2476 = dot(vec3(_733, _734, _735), vec3(_2468, _2469, _2470));
    float _4532 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2480 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2468, _2469, _2470));
    float _4543 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2484 = _2460 * _2460;
    float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
    float _2496 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
    float _2497 = 0.959999978542327880859375 - _880;
    float _2499 = 0.959999978542327880859375 - _881;
    float _2500 = 0.959999978542327880859375 - _882;
    float _2507 = 1.0 - _2460;
    float _2518 = (0.5 / (((_2475 * ((_2474 * _2507) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2507) + _2460) * _2474))) * _2474;
    float _4554 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2520 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
    uint _2534 = _2199 + 9u;
    float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _736) * 0.949999988079071044921875);
    float _2546 = _2545 * _2545;
    float _2547 = cbLight._m0[_2239].x + _813;
    float _2548 = cbLight._m0[_2239].y + _814;
    float _2549 = cbLight._m0[_2239].z + _815;
    float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
    float _2554 = _2553 * _2547;
    float _2555 = _2553 * _2548;
    float _2556 = _2553 * _2549;
    float _2557 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2239].xyz));
    float _4565 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2561 = dot(vec3(_733, _734, _735), vec3(_2554, _2555, _2556));
    float _4576 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2565 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2554, _2555, _2556));
    float _4587 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2569 = _2546 * _2546;
    float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
    float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
    float _2587 = 1.0 - _2546;
    float _2597 = (0.5 / (((_2475 * ((_2560 * _2587) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2587) + _2546) * _2560))) * _2560;
    float _4598 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2599 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
    float _2609 = (((((_2580 * _2497) + _883) * cbLight._m0[_2534].x) * _2599) * _2222) + ((((cbLight._m0[_2446].x * _2188) * ((_2496 * _2497) + _883)) * _2520) * _2235);
    float _2610 = (((((_2580 * _2499) + _885) * cbLight._m0[_2534].y) * _2599) * _2222) + ((((cbLight._m0[_2446].y * _2190) * ((_2496 * _2499) + _885)) * _2520) * _2235);
    float _2611 = (((((_2580 * _2500) + _886) * cbLight._m0[_2534].z) * _2599) * _2222) + ((((cbLight._m0[_2446].z * _2192) * ((_2496 * _2500) + _886)) * _2520) * _2235);
    float _2667;
    float _2669;
    float _2671;
    if (_2275)
    {
        _2667 = _2609;
        _2669 = _2610;
        _2671 = _2611;
    }
    else
    {
        uint _2673 = _2199 + 2u;
        uint _2677 = _2199 + 10u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _736) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _813;
        float _2694 = cbLight._m0[_2673].y + _814;
        float _2695 = cbLight._m0[_2673].z + _815;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2673].xyz));
        float _4609 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2707 = dot(vec3(_733, _734, _735), vec3(_2700, _2701, _2702));
        float _4620 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4631 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2726 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
        float _2733 = 1.0 - _2692;
        float _2743 = (0.5 / (((_2475 * ((_2706 * _2733) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2733) + _2692) * _2706))) * _2706;
        float _4642 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2745 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2746 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2667 = (((((_2726 * _2497) + _883) * cbLight._m0[_2677].x) * _2745) * _2746) + _2609;
        _2669 = (((((_2726 * _2499) + _885) * cbLight._m0[_2677].y) * _2745) * _2746) + _2610;
        _2671 = (((((_2726 * _2500) + _886) * cbLight._m0[_2677].z) * _2745) * _2746) + _2611;
    }
    float _2777;
    float _2779;
    float _2781;
    if (_2384)
    {
        _2777 = _2667;
        _2779 = _2669;
        _2781 = _2671;
    }
    else
    {
        uint _2788 = _2199 + 3u;
        uint _2792 = _2199 + 11u;
        float _2806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2788].w)) * _736) * 0.949999988079071044921875);
        float _2807 = _2806 * _2806;
        float _2808 = cbLight._m0[_2788].x + _813;
        float _2809 = cbLight._m0[_2788].y + _814;
        float _2810 = cbLight._m0[_2788].z + _815;
        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
        float _2815 = _2814 * _2808;
        float _2816 = _2814 * _2809;
        float _2817 = _2814 * _2810;
        float _2818 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2788].xyz));
        float _4658 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2822 = dot(vec3(_733, _734, _735), vec3(_2815, _2816, _2817));
        float _4669 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2825 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2826 = dot(vec3(cbLight._m0[_2788].xyz), vec3(_2815, _2816, _2817));
        float _4680 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2830 = _2807 * _2807;
        float _2834 = ((_2825 * _2825) * (_2830 + (-1.0))) + 1.0;
        float _2841 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
        float _2848 = 1.0 - _2807;
        float _2858 = (0.5 / (((_2475 * ((_2821 * _2848) + _2807)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2848) + _2807) * _2821))) * _2821;
        float _4691 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2860 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2830 / ((_2834 * _2834) * 3.141590118408203125));
        float _2861 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2777 = (((((_2841 * _2497) + _883) * cbLight._m0[_2792].x) * _2860) * _2861) + _2667;
        _2779 = (((((_2841 * _2499) + _885) * cbLight._m0[_2792].y) * _2860) * _2861) + _2669;
        _2781 = (((((_2841 * _2500) + _886) * cbLight._m0[_2792].z) * _2860) * _2861) + _2671;
    }
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    if (_2197.y == 0u)
    {
        uvec4 _2882 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2883 = _2882.x;
        uint _2894 = uint((float(_2882.y) * floor(float(uint(cbSceneParam._m0[85u].y * _822) / _2883))) + floor(float(uint(cbSceneParam._m0[85u].x * _821) / _2883)));
        float _2904 = (log2(_1975 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2905 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        uint _2908 = uint(isnan(14.0) ? _2905 : (isnan(_2905) ? 14.0 : min(_2905, 14.0)));
        uvec4 _2913 = texelFetch(g_lightClusterGridBuffer, int(((_2908 << 2u) + (_2894 << 6u)) >> 2u));
        uint _2914 = _2913.x;
        uint _2915 = _2882.z;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        if (((((1u << ((_2915 >> 4u) & 15u)) + 4294967295u) & _2914) == 0u) || ((_2915 & 240u) == 0u))
        {
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
        }
        else
        {
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            uint _3145 = 0u;
            uint _3154;
            bool _3155;
            for (;;)
            {
                _3154 = texelFetch(g_lightClassification, int((((_2908 << 5u) + (_2894 << 9u)) + (_3145 << 2u)) >> 2u)).x;
                _3155 = _3154 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3155)
                {
                    frontier_phi_66_pred = _3144;
                    frontier_phi_66_pred_1 = _3143;
                    frontier_phi_66_pred_2 = _3142;
                    frontier_phi_66_pred_3 = _3141;
                    frontier_phi_66_pred_4 = _3140;
                    frontier_phi_66_pred_5 = _3139;
                }
                else
                {
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    uint _3269;
                    _3263 = _3139;
                    _3264 = _3140;
                    _3265 = _3141;
                    _3266 = _3142;
                    _3267 = _3143;
                    _3268 = _3144;
                    _3269 = _3154;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    for (;;)
                    {
                        uint _3273 = uint(findLSB(_3269)) + (_3145 << 5u);
                        uint _3270 = (_3269 + 4294967295u) & _3269;
                        uint _3275 = _3273 * 48u;
                        vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 3u)).x));
                        uint _3295 = (_3273 * 48u) + 4u;
                        vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3314 = (_3273 * 48u) + 8u;
                        vec3 _3325 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x));
                        float _3329 = _3289.x - _1973;
                        float _3330 = _3289.y - _1974;
                        float _3331 = _3289.z - _1975;
                        float _3332 = dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331));
                        float _3335 = inversesqrt(_3332);
                        float _3336 = _3335 * _3329;
                        float _3337 = _3335 * _3330;
                        float _3338 = _3335 * _3331;
                        float _3339 = dot(vec3(_840, _843, _846), vec3(_3336, _3337, _3338));
                        float _3344 = 1.0 - (_3332 * _3289.w);
                        float _4717 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3345 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3346 = sqrt(_3332) * _3308.w;
                        float _3349 = 1.39999997615814208984375 / (_3346 + 1.39999997615814208984375);
                        float _3350 = _3349 * _3349;
                        float _3353 = ((1.0 - _3350) * _3339) + _3350;
                        float _3356 = _3346 * _3346;
                        float _3360 = ((isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0))) * _3345) / ((_3356 * 0.699999988079071044921875) + 1.0);
                        float _3364 = (-0.0) - _1973;
                        float _3365 = (-0.0) - _1974;
                        float _3366 = (-0.0) - _1975;
                        float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                        float _3371 = _3370 * _3364;
                        float _3372 = _3370 * _3365;
                        float _3373 = _3370 * _3366;
                        float _3380 = exp2(log2(1.0 / ((_3356 * 3.5) + 5.0)) * 0.25);
                        float _3381 = 1.0 - _915;
                        float _3388 = sqrt(1.0 - ((1.0 - (_3381 * _3381)) * (1.0 - (_3380 * _3380))));
                        float _3389 = _3388 * _3388;
                        float _3390 = _3389 * _3389;
                        float _3391 = _3371 + _3336;
                        float _3392 = _3372 + _3337;
                        float _3393 = _3373 + _3338;
                        float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                        float _3401 = dot(vec3(_840, _843, _846), vec3(_3371, _3372, _3373));
                        float _4733 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3404 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3405 = dot(vec3(_840, _843, _846), vec3(_3397 * _3391, _3397 * _3392, _3397 * _3393));
                        float _4744 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3408 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3412 = ((_3408 * _3408) * (_3390 + (-1.0))) + 1.0;
                        float _3413 = _3349 * _3389;
                        float _3414 = _3413 * _3413;
                        float _3417 = ((1.0 - _3414) * _3339) + _3414;
                        float _4755 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3419 = 1.0 - _3389;
                        float _3429 = (0.5 / (((_3418 * ((_3404 * _3419) + _3389)) + 9.9999999392252902907785028219223e-09) + (((_3418 * _3419) + _3389) * _3404))) * _3418;
                        float _4766 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3440 = (((_3390 * 3.1415927410125732421875) * (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) / ((_3412 * _3412) * ((_3356 * 2.1991131305694580078125) + 3.141590118408203125))) * _3345;
                        _3198 = (_3360 * _3308.x) + _3266;
                        _3199 = (_3360 * _3308.y) + _3267;
                        _3200 = (_3360 * _3308.z) + _3268;
                        _3195 = (_3440 * _3325.x) + _3263;
                        _3196 = (_3440 * _3325.y) + _3264;
                        _3197 = (_3440 * _3325.z) + _3265;
                        if (_3270 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3263 = _3195;
                            _3264 = _3196;
                            _3265 = _3197;
                            _3266 = _3198;
                            _3267 = _3199;
                            _3268 = _3200;
                            _3269 = _3270;
                        }
                    }
                    frontier_phi_66_pred = _3200;
                    frontier_phi_66_pred_1 = _3199;
                    frontier_phi_66_pred_2 = _3198;
                    frontier_phi_66_pred_3 = _3197;
                    frontier_phi_66_pred_4 = _3196;
                    frontier_phi_66_pred_5 = _3195;
                }
                _3005 = frontier_phi_66_pred;
                _3003 = frontier_phi_66_pred_1;
                _3001 = frontier_phi_66_pred_2;
                _2999 = frontier_phi_66_pred_3;
                _2997 = frontier_phi_66_pred_4;
                _2995 = frontier_phi_66_pred_5;
                uint _3146 = _3145 + 1u;
                if (_3146 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3139 = _2995;
                    _3140 = _2997;
                    _3141 = _2999;
                    _3142 = _3001;
                    _3143 = _3003;
                    _3144 = _3005;
                    _3145 = _3146;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
        }
        uvec4 _3008 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3009 = _3008.z;
        uint _3011 = (_3009 >> 8u) & 15u;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        if (((4294967295u << _3011) & _2914) == 0u)
        {
            _3107 = _2994;
            _3109 = _2996;
            _3111 = _2998;
            _3113 = _3000;
            _3115 = _3002;
            _3117 = _3004;
        }
        else
        {
            float _3132 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
            float _3133 = _3132 * _1973;
            float _3134 = _3132 * _1974;
            float _3135 = _3132 * _1975;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3011 < ((_3009 >> 12u) & 15u))
            {
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3246 = _2994;
                float _3247 = _2996;
                float _3248 = _2998;
                float _3249 = _3000;
                float _3250 = _3002;
                float _3251 = _3004;
                uint _3252 = _3011;
                uint _3261;
                bool _3262;
                for (;;)
                {
                    _3261 = texelFetch(g_lightClassification, int((((_2908 << 5u) + (_2894 << 9u)) + (_3252 << 2u)) >> 2u)).x;
                    _3262 = _3261 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3262)
                    {
                        frontier_phi_72_pred = _3251;
                        frontier_phi_72_pred_1 = _3250;
                        frontier_phi_72_pred_2 = _3249;
                        frontier_phi_72_pred_3 = _3248;
                        frontier_phi_72_pred_4 = _3247;
                        frontier_phi_72_pred_5 = _3246;
                    }
                    else
                    {
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3458 = _3246;
                        float _3459 = _3247;
                        float _3460 = _3248;
                        float _3461 = _3249;
                        float _3462 = _3250;
                        float _3463 = _3251;
                        uint _3464 = _3261;
                        uint _3465;
                        vec4 _3490;
                        float _3491;
                        vec4 _3506;
                        vec3 _3518;
                        vec4 _3533;
                        vec4 _3548;
                        float _3594;
                        bool _3595;
                        for (;;)
                        {
                            uint _3475 = ((_3252 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3464));
                            _3465 = (_3464 + 4294967295u) & _3464;
                            uint _3477 = _3475 * 40u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3491 = _3490.w;
                            uint _3493 = (_3475 * 40u) + 4u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3508 = (_3475 * 40u) + 8u;
                            _3518 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x));
                            uint _3520 = (_3475 * 40u) + 16u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3475 * 40u) + 20u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3550 = (_3475 * 40u) + 24u;
                            vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3569 = (_3475 * 40u) + 28u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            _3594 = fma(_1975, _3582.z, fma(_1974, _3582.y, _3582.x * _1973)) + _3582.w;
                            _3595 = !((fma(_1975, _3563.z, fma(_1974, _3563.y, _3563.x * _1973)) + _3563.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3595)
                            {
                                float _3622 = _3490.x - _1973;
                                float _3623 = _3490.y - _1974;
                                float _3624 = _3490.z - _1975;
                                float _3625 = dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624));
                                float _3628 = inversesqrt(_3625);
                                float _3629 = _3628 * _3622;
                                float _3630 = _3628 * _3623;
                                float _3631 = _3628 * _3624;
                                float _3635 = 1.0 - (_3625 / (_3491 * _3491));
                                float _4777 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3640 = sqrt(_3625) * _3506.w;
                                float _3642 = 1.39999997615814208984375 / (_3640 + 1.39999997615814208984375);
                                float _3643 = _3642 * _3642;
                                float _3646 = ((1.0 - _3643) * dot(vec3(_3629, _3630, _3631), vec3(_840, _843, _846))) + _3643;
                                float _3649 = _3640 * _3640;
                                float _3653 = (fma(_1975, _3533.z, fma(_1974, _3533.y, _3533.x * _1973)) + _3533.w) / _3594;
                                float _3654 = (fma(_1975, _3548.z, fma(_1974, _3548.y, _3548.x * _1973)) + _3548.w) / _3594;
                                float _3658 = 1.0 - dot(vec2(_3653, _3654), vec2(_3653, _3654));
                                float _4793 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3660 = _3659 * (((isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0))) * _3636) / ((_3649 * 0.699999988079071044921875) + 1.0));
                                float _3672 = exp2(log2(1.0 / ((_3649 * 3.5) + 5.0)) * 0.25);
                                float _3673 = 1.0 - _915;
                                float _3680 = sqrt(1.0 - ((1.0 - (_3673 * _3673)) * (1.0 - (_3672 * _3672))));
                                float _3681 = _3680 * _3680;
                                float _3682 = _3681 * _3681;
                                float _3683 = _3629 - _3133;
                                float _3684 = _3630 - _3134;
                                float _3685 = _3631 - _3135;
                                float _3689 = inversesqrt(dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685)));
                                float _3693 = dot(vec3(_840, _843, _846), vec3((-0.0) - _3133, (-0.0) - _3134, (-0.0) - _3135));
                                float _4804 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3696 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3697 = dot(vec3(_840, _843, _846), vec3(_3689 * _3683, _3689 * _3684, _3689 * _3685));
                                float _4815 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3700 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3704 = ((_3700 * _3700) * (_3682 + (-1.0))) + 1.0;
                                float _3705 = _3642 * _3681;
                                float _3706 = _3705 * _3705;
                                float _3712 = ((1.0 - _3706) * dot(vec3(_840, _843, _846), vec3(_3629, _3630, _3631))) + _3706;
                                float _4826 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3713 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3714 = 1.0 - _3681;
                                float _3724 = (0.5 / (((_3713 * ((_3696 * _3714) + _3681)) + 9.9999999392252902907785028219223e-09) + (((_3713 * _3714) + _3681) * _3696))) * _3713;
                                float _4837 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3734 = (_3659 * _3636) * (((_3682 * 3.1415927410125732421875) * (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) / ((_3704 * _3704) * ((_3649 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3660 * _3506.y;
                                frontier_phi_78_pred_1 = _3660 * _3506.x;
                                frontier_phi_78_pred_2 = _3734 * _3518.z;
                                frontier_phi_78_pred_3 = _3734 * _3518.y;
                                frontier_phi_78_pred_4 = _3734 * _3518.x;
                                frontier_phi_78_pred_5 = _3660 * _3506.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3742 = frontier_phi_78_pred;
                            _3741 = frontier_phi_78_pred_1;
                            _3740 = frontier_phi_78_pred_2;
                            _3739 = frontier_phi_78_pred_3;
                            _3738 = frontier_phi_78_pred_4;
                            _3743 = frontier_phi_78_pred_5;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            if (_3465 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3465;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3450;
                        frontier_phi_72_pred_1 = _3449;
                        frontier_phi_72_pred_2 = _3448;
                        frontier_phi_72_pred_3 = _3447;
                        frontier_phi_72_pred_4 = _3446;
                        frontier_phi_72_pred_5 = _3445;
                    }
                    _3118 = frontier_phi_72_pred;
                    _3116 = frontier_phi_72_pred_1;
                    _3114 = frontier_phi_72_pred_2;
                    _3112 = frontier_phi_72_pred_3;
                    _3110 = frontier_phi_72_pred_4;
                    _3108 = frontier_phi_72_pred_5;
                    uint _3253 = _3252 + 1u;
                    if (_3253 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3246 = _3108;
                        _3247 = _3110;
                        _3248 = _3112;
                        _3249 = _3114;
                        _3250 = _3116;
                        _3251 = _3118;
                        _3252 = _3253;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3118;
                frontier_phi_60_61_ladder_1 = _3116;
                frontier_phi_60_61_ladder_2 = _3112;
                frontier_phi_60_61_ladder_3 = _3110;
                frontier_phi_60_61_ladder_4 = _3108;
                frontier_phi_60_61_ladder_5 = _3114;
            }
            else
            {
                frontier_phi_60_61_ladder = _3004;
                frontier_phi_60_61_ladder_1 = _3002;
                frontier_phi_60_61_ladder_2 = _2998;
                frontier_phi_60_61_ladder_3 = _2996;
                frontier_phi_60_61_ladder_4 = _2994;
                frontier_phi_60_61_ladder_5 = _3000;
            }
            _3107 = frontier_phi_60_61_ladder_4;
            _3109 = frontier_phi_60_61_ladder_3;
            _3111 = frontier_phi_60_61_ladder_2;
            _3113 = frontier_phi_60_61_ladder_5;
            _3115 = frontier_phi_60_61_ladder_1;
            _3117 = frontier_phi_60_61_ladder;
        }
        float _3122 = isnan(1.0) ? _899 : (isnan(_899) ? 1.0 : min(_899, 1.0));
        _2927 = (_3122 * _3113) + _2439;
        _2929 = (_3122 * _3115) + _2441;
        _2931 = (_3122 * _3117) + _2443;
        _2933 = ((_3107 * _883) * _3122) + _2777;
        _2935 = ((_3109 * _885) * _3122) + _2779;
        _2937 = ((_3111 * _886) * _3122) + _2781;
    }
    else
    {
        _2927 = _2439;
        _2929 = _2441;
        _2931 = _2443;
        _2933 = _2777;
        _2935 = _2779;
        _2937 = _2781;
    }
    float _4853 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4864 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4875 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    uint _2957 = _246 + 6u;
    float _2965 = _821 / cbSceneParam._m0[86u].x;
    float _2966 = _822 / cbSceneParam._m0[86u].y;
    vec4 _2980 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2965, _2966, (log2((isnan(cbSceneParam._m0[77u].w) ? _755 : (isnan(_755) ? cbSceneParam._m0[77u].w : min(_755, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2982 = _2980.x;
    float _2983 = _2980.y;
    float _2984 = _2980.z;
    float _2985 = _2980.w;
    float _3057;
    float _3059;
    float _3061;
    float _3063;
    if (_755 > cbSceneParam._m0[78u].w)
    {
        float _3019 = isnan(_755) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _755 : min(cbSceneParam._m0[80u].w, _755));
        float _3020 = _3019 / _755;
        float _3031 = _3020 * _806;
        float _3032 = _807 * _3020;
        float _3033 = (-0.0) - _3032;
        float _3035 = _3020 * _808;
        float _3037 = (cbSceneParam._m0[77u].w * _3033) / _3019;
        float _3038 = _3037 + cbSceneParam._m0[79u].w;
        float _3039 = cbSceneParam._m0[79u].w - _3032;
        float _3045 = sqrt(((_3031 * _3031) + (_3032 * _3032)) + (_3035 * _3035));
        float _3048 = (1.0 - (cbSceneParam._m0[77u].w / _3019)) * _3045;
        float _3053 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3055 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3208;
        if (abs((_3033 - _3037) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3208 = ((((_3038 > 0.0) ? exp2(_3053 * _3038) : (2.0 - exp2(_3055 * _3038))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3048;
        }
        else
        {
            float _3168 = 1.0 / cbSceneParam._m0[80u].x;
            float _3169 = isnan(_3039) ? _3038 : (isnan(_3038) ? _3039 : max(_3038, _3039));
            float _3170 = isnan(_3039) ? _3038 : (isnan(_3038) ? _3039 : min(_3038, _3039));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            float _3180 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : min(_3170, 0.0));
            _3208 = ((abs(_3045 / _3033) * cbSceneParam._m0[80u].y) * ((((_3179 - _3180) * 2.0) - ((exp2(_3053 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0)))) - exp2(_3053 * (isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))))) * _3168)) - ((exp2(_3055 * _3179) - exp2(_3055 * _3180)) * _3168))) + (_3048 * cbSceneParam._m0[80u].z);
        }
        vec4 _3210 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2965, _2966, 1.0), 0.0);
        float _3219 = exp2((_3208 * (-1.44269502162933349609375)) * (1.0 - _3210.w));
        float _3220 = log2(_3219);
        float _3236 = log2(_2985);
        _3057 = (exp2(_3236 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].x)) * _3210.x) / cbSceneParam._m0[78u].x)) + _2982;
        _3059 = (exp2(_3236 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].y)) * _3210.y) / cbSceneParam._m0[78u].y)) + _2983;
        _3061 = (exp2(_3236 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].z)) * _3210.z) / cbSceneParam._m0[78u].z)) + _2984;
        _3063 = _3219 * _2985;
    }
    else
    {
        _3057 = _2982;
        _3059 = _2983;
        _3061 = _2984;
        _3063 = _2985;
    }
    float _3075 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3076 = _3075 == 3.0;
    float _3077 = log2(_3063);
    float _3084 = exp2(_3077 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2927 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _899))) + ((_2933 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1707)) * cbPerFrame._m0[3u].x));
    float _3085 = exp2(_3077 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2929 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _899))) + ((_2935 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1707)) * cbPerFrame._m0[3u].x));
    float _3086 = exp2(_3077 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2931 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _899))) + ((_2937 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1707)) * cbPerFrame._m0[3u].x));
    float _3095 = (_3075 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3095 * (_3076 ? _3084 : (_3084 + (cbSceneParam._m0[72u].w * _3057)));
    SV_Target.y = _3095 * (_3076 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3059)));
    SV_Target.z = _3095 * (_3076 ? _3086 : (_3086 + (cbSceneParam._m0[72u].w * _3061)));
    SV_Target.w = cbInstanceData._m0[_2957].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2957].w;
}


