#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1341;
float _4005;
float _4006;
float _4007;
float _4008;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _379 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _396 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_367 - _379) * cbMtdParam._m0[24u].y) + _379) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4017 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _404 = (_397 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _405 = (_397 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _406 = (_397 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _455 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _469 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_445 - _455) * cbMtdParam._m0[24u].y) + _455) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4028 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _477 = (_470 * ((_423.x * cbMtdParam._m0[13u].x) - _404)) + _404;
    float _478 = (_470 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _479 = (_470 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _520 = ((_492.x - _511) * _397) + _511;
    float _521 = ((_492.y - _512) * _397) + _512;
    float _522 = ((_492.z - _513) * _397) + _513;
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _547 = ((_534.z - _522) * _470) + _522;
    float _550 = ((((_534.x - _520) * _470) + _520) * 2.0) + (-1.0);
    float _552 = ((((_534.y - _521) * _470) + _521) * 2.0) + (-1.0);
    float _553 = dot(vec2(_550, _552), vec2(_550, _552));
    float _4039 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _558 = sqrt(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _585 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _587 = _585.x;
    float _588 = 1.0 - _587;
    float _616 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_587 - _588) * cbMtdParam._m0[24u].w) + _588) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4050 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _625 = ((((cbMtdParam._m0[10u].x - _477) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _617) + _477;
    float _626 = ((((cbMtdParam._m0[10u].y - _478) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _617) + _478;
    float _627 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _479)) * _617) + _479;
    vec4 _639 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _653 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _655 = _653.x;
    float _673 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _655) * _397) + _655;
    float _691 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _673) * _470) + _673;
    float _695 = ((_639.x - _691) * cbMtdParam._m0[19u].z) + _691;
    float _697 = _695 - (_695 * _617);
    float _701 = ((cbMtdParam._m0[23u].y - _547) * _617) + _547;
    vec4 _720 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _726 = (_720.x * 2.0) + (-1.0);
    float _727 = (_720.y * 2.0) + (-1.0);
    float _728 = dot(vec2(_726, _727), vec2(_726, _727));
    float _4061 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _744 = (_617 * (((cbMtdParam._m0[22u].z * _550) - _550) + _726)) + _550;
    float _745 = (_617 * (((cbMtdParam._m0[22u].z * _552) - _552) + _727)) + _552;
    float _746 = (_617 * (sqrt(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) - _558)) + _558;
    float _748 = cbMtdParam._m0[22u].x + _571.w;
    float _751 = fma(_746, _246 * NORMAL.x, fma(_745, _253 * TANGENT.x, (_239 * _231) * _744));
    float _754 = fma(_746, _246 * NORMAL.y, fma(_745, _253 * TANGENT.y, (_239 * _232) * _744));
    float _757 = fma(_746, _246 * NORMAL.z, fma(_745, _253 * TANGENT.z, (_239 * _233) * _744));
    float _761 = inversesqrt(dot(vec3(_751, _754, _757), vec3(_751, _754, _757)));
    float _762 = _761 * _751;
    float _763 = _761 * _754;
    float _764 = _761 * _757;
    float _4072 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _765 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4094 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4105 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4116 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _4127 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _770 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _784 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _834 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _824);
    float _835 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _824);
    float _836 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _824);
    float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
    float _841 = _834 * _840;
    float _842 = _835 * _840;
    float _843 = _836 * _840;
    vec4 _848 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _850 = _848.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1022 = sqrt(((_834 * _834) + (_835 * _835)) + (_836 * _836));
        float _1028 = (cbMatDynParam._m0[5u].x * _1022) + cbMatDynParam._m0[5u].y;
        float _4138 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1033 = (cbMatDynParam._m0[5u].z * _1022) + cbMatDynParam._m0[5u].w;
        float _4149 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) - _1029)) + _1029) < ((_850 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _861 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _862 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _880 = fma(_764, cbSceneParam._m0[5u].z, fma(_763, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _762));
    float _883 = fma(_764, cbSceneParam._m0[6u].z, fma(_763, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _762));
    float _886 = fma(_764, cbSceneParam._m0[7u].z, fma(_763, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _762));
    uint _899 = _259 + 9u;
    uint _900 = _899 + uint(cbMatDynParam._m0[0u].w);
    float _906 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * cbInstanceData._m0[_900].x;
    float _907 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * cbInstanceData._m0[_900].y;
    float _908 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * cbInstanceData._m0[_900].z;
    float _4160 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _912 = 1.0 - _770;
    float _913 = _909 * _912;
    float _914 = _910 * _912;
    float _915 = _911 * _912;
    float _920 = (_909 + (-0.039999999105930328369140625)) * _770;
    float _921 = (_910 + (-0.039999999105930328369140625)) * _770;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _770;
    float _923 = _920 + 0.039999999105930328369140625;
    float _925 = _921 + 0.039999999105930328369140625;
    float _926 = _922 + 0.039999999105930328369140625;
    vec4 _935 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _861, cbSceneParam._m0[86u].y * _862));
    float _939 = ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * TEXCOORD_5.w) * _935.x;
    float _940 = dot(vec3(_762, _763, _764), vec3(_841, _842, _843));
    float _943 = _940 * 2.0;
    float _947 = (_943 * _762) - _841;
    float _948 = (_943 * _763) - _842;
    float _949 = (_943 * _764) - _843;
    float _953 = abs(dot(vec3(_841, _842, _843), vec3(_762, _763, _764)));
    float _4193 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _955 = sqrt(_765);
    float _968 = exp2((_955 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_955 * 3.0));
    float _974 = (1.0 - _968) * ((_955 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _975 = _968 * _955;
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1340;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1065 = fma(_1011, cbModelParam._m0[26u].z, fma(_1007, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1003));
        float _1069 = fma(_1011, cbModelParam._m0[27u].z, fma(_1007, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1003));
        float _1073 = fma(_1011, cbModelParam._m0[28u].z, fma(_1007, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1003));
        float _1098 = _1003 + _762;
        float _1099 = _1007 + _763;
        float _1100 = _1011 + _764;
        float _1110 = fma(_1100, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1098)) - _1065;
        float _1111 = fma(_1100, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1098)) - _1069;
        float _1112 = fma(_1100, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1098)) - _1073;
        float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
        float _1129 = ((_1116 * _1110) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1065 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1116 * _1111) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1069 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1116 * _1112) / cbModelParam._m0[34u].z) + ((((((_1073 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1168 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1134.x + (-0.5));
        float _1170 = _1168 * (_1134.y + (-0.5));
        float _1171 = _1168 * (_1134.z + (-0.5));
        float _1178 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1141.x + (-0.5));
        float _1180 = _1178 * (_1141.y + (-0.5));
        float _1181 = _1178 * (_1141.z + (-0.5));
        float _1188 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1148.x + (-0.5));
        float _1190 = _1188 * (_1148.y + (-0.5));
        float _1191 = _1188 * (_1148.z + (-0.5));
        float _1198 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1155.x + (-0.5));
        float _1200 = _1198 * (_1155.y + (-0.5));
        float _1201 = _1198 * (_1155.z + (-0.5));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = _1169 * 0.5;
        float _1206 = _1179 * 0.5;
        float _1207 = _1189 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1222 = (dot(vec3(_762, _763, _764), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1232 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _4241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1234 + 1.0))) + _1239) * _1202;
        float _1249 = _1170 * 0.5;
        float _1250 = _1180 * 0.5;
        float _1251 = _1190 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_762, _763, _764), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4274 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1276 + 1.0))) + _1281) * _1203;
        float _1291 = _1171 * 0.5;
        float _1292 = _1181 * 0.5;
        float _1293 = _1191 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_762, _763, _764), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4307 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1318 + 1.0))) + _1323) * _1204;
        _1340 = _1171;
        _1342 = _1170;
        _1343 = _1169;
        _1344 = _1181;
        _1345 = _1180;
        _1346 = _1179;
        _1347 = _1191;
        _1348 = _1190;
        _1349 = _1189;
        _1350 = _1204;
        _1351 = _1203;
        _1352 = _1202;
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _1341;
        _1342 = _1341;
        _1343 = _1341;
        _1344 = _1341;
        _1345 = _1341;
        _1346 = _1341;
        _1347 = _1341;
        _1348 = _1341;
        _1349 = _1341;
        _1350 = _1341;
        _1351 = _1341;
        _1352 = _1341;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1382 = fma(_1011, cbModelParam._m0[30u].z, fma(_1007, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1003));
        float _1386 = fma(_1011, cbModelParam._m0[31u].z, fma(_1007, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1003));
        float _1390 = fma(_1011, cbModelParam._m0[32u].z, fma(_1007, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1003));
        float _1413 = _1003 + _762;
        float _1414 = _1007 + _763;
        float _1415 = _1011 + _764;
        float _1425 = fma(_1415, cbModelParam._m0[30u].z, fma(_1414, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1413)) - _1382;
        float _1426 = fma(_1415, cbModelParam._m0[31u].z, fma(_1414, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1413)) - _1386;
        float _1427 = fma(_1415, cbModelParam._m0[32u].z, fma(_1414, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1413)) - _1390;
        float _1431 = inversesqrt(dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427)));
        float _1444 = ((_1431 * _1425) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1382 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1445 = ((_1431 * _1426) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1386 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1446 = ((_1431 * _1427) / cbModelParam._m0[35u].z) + ((((((_1390 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        float _1481 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1448.x + (-0.5));
        float _1483 = _1481 * (_1448.y + (-0.5));
        float _1484 = _1481 * (_1448.z + (-0.5));
        float _1491 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1455.x + (-0.5));
        float _1493 = _1491 * (_1455.y + (-0.5));
        float _1494 = _1491 * (_1455.z + (-0.5));
        float _1501 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1462.x + (-0.5));
        float _1503 = _1501 * (_1462.y + (-0.5));
        float _1504 = _1501 * (_1462.z + (-0.5));
        float _1511 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1469.x + (-0.5));
        float _1513 = _1511 * (_1469.y + (-0.5));
        float _1514 = _1511 * (_1469.z + (-0.5));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = _1482 * 0.5;
        float _1519 = _1492 * 0.5;
        float _1520 = _1502 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_762, _763, _764), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4370 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1545 + 1.0))) + _1550) * _1515;
        float _1560 = _1483 * 0.5;
        float _1561 = _1493 * 0.5;
        float _1562 = _1503 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_762, _763, _764), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4403 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1587 + 1.0))) + _1592) * _1516;
        float _1602 = _1484 * 0.5;
        float _1603 = _1494 * 0.5;
        float _1604 = _1504 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_762, _763, _764), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4436 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1629 + 1.0))) + _1634) * _1517;
        _1651 = _1484;
        _1652 = _1483;
        _1653 = _1482;
        _1654 = _1494;
        _1655 = _1493;
        _1656 = _1492;
        _1657 = _1504;
        _1658 = _1503;
        _1659 = _1502;
        _1660 = _1517;
        _1661 = _1516;
        _1662 = _1515;
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
    }
    else
    {
        _1651 = _1341;
        _1652 = _1341;
        _1653 = _1341;
        _1654 = _1341;
        _1655 = _1341;
        _1656 = _1341;
        _1657 = _1341;
        _1658 = _1341;
        _1659 = _1341;
        _1660 = _1341;
        _1661 = _1341;
        _1662 = _1341;
        _1663 = 0.0;
        _1664 = 0.0;
        _1665 = 0.0;
    }
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1353)) + _1353;
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1354)) + _1354;
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1355)) + _1355;
    float _1698 = fma(_1677, cbSceneParam._m0[89u].z, fma(_1676, cbSceneParam._m0[89u].y, _1675 * cbSceneParam._m0[89u].x));
    float _1701 = fma(_1677, cbSceneParam._m0[90u].z, fma(_1676, cbSceneParam._m0[90u].y, _1675 * cbSceneParam._m0[90u].x));
    float _1704 = fma(_1677, cbSceneParam._m0[91u].z, fma(_1676, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1675));
    float _1719 = _947 * 0.5;
    float _1720 = _948 * 0.5;
    float _1721 = _949 * 0.5;
    float _1722 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1725 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1728 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1762;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1735 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1340, _1344, _1347, _1350));
        float _1739 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1342, _1345, _1348, _1351));
        float _1743 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1750 = dot(vec4(cbModelParam._m0[39u]), vec4(_1719, _1720, _1721, 1.0));
        _1762 = dot(vec3(isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1750) ? 0.0 : (isnan(0.0) ? _1750 : max(0.0, _1750))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1762 = 1.0;
    }
    float _1773;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1764 = dot(vec4(cbModelParam._m0[40u]), vec4(_1719, _1720, _1721, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1764) ? 0.0 : (isnan(0.0) ? _1764 : max(0.0, _1764))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1777 = (_1773 * cbModelParam._m0[1u].x) + (_1762 * (1.0 - cbModelParam._m0[1u].x));
    float _1787 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _765);
    float _1788 = isnan(_1787) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1787 : min(cbModelParam._m0[25u].z, _1787));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1837 = fma(_1011, cbModelParam._m0[13u].z, fma(_1007, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1003)) + cbModelParam._m0[13u].w;
        float _1841 = fma(_1011, cbModelParam._m0[14u].z, fma(_1007, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1003)) + cbModelParam._m0[14u].w;
        float _1845 = fma(_1011, cbModelParam._m0[15u].z, fma(_1007, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1003)) + cbModelParam._m0[15u].w;
        float _1848 = fma(_949, cbModelParam._m0[13u].z, fma(_948, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _947));
        float _1851 = fma(_949, cbModelParam._m0[14u].z, fma(_948, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _947));
        float _1854 = fma(_949, cbModelParam._m0[15u].z, fma(_948, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _947));
        float _1882;
        if (_1848 > 0.0)
        {
            _1882 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1882 = frontier_phi_17_15_ladder;
        }
        float _2054;
        if (_1851 > 0.0)
        {
            _2054 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2054 = frontier_phi_26_22_ladder;
        }
        float _2349;
        if (_1854 > 0.0)
        {
            _2349 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2349 = frontier_phi_38_33_ladder;
        }
        float _2351 = isnan(_2054) ? _1882 : (isnan(_1882) ? _2054 : min(_1882, _2054));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1848) + _1837;
        float _2357 = (_2352 * _1851) + _1841;
        float _2358 = (_2352 * _1854) + _1845;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2359;
        float _2363 = _2359 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 > _2363) || ((_2357 < _2361) || ((_2356 < _2361) || (_2356 > _2363))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2503 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2358, cbModelParam._m0[9u].z, fma(_2357, cbModelParam._m0[9u].y, _2356 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2358, cbModelParam._m0[10u].z, fma(_2357, cbModelParam._m0[10u].y, _2356 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2358, cbModelParam._m0[11u].z, fma(_2357, cbModelParam._m0[11u].y, _2356 * cbModelParam._m0[11u].x))), _1788);
            frontier_phi_16_38_ladder = _2503.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2503.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2503.x * cbModelParam._m0[1u].y;
        }
        _1870 = frontier_phi_16_38_ladder_2;
        _1872 = frontier_phi_16_38_ladder_1;
        _1874 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_947, _948, _949), _1788);
        _1870 = _1858.x * cbModelParam._m0[1u].y;
        _1872 = _1858.y * cbModelParam._m0[1u].y;
        _1874 = _1858.z * cbModelParam._m0[1u].y;
    }
    float _1878 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _765);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1878 : min(cbModelParam._m0[25u].w, _1878));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1933 = fma(_1011, cbModelParam._m0[21u].z, fma(_1007, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1003)) + cbModelParam._m0[21u].w;
        float _1937 = fma(_1011, cbModelParam._m0[22u].z, fma(_1007, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1003)) + cbModelParam._m0[22u].w;
        float _1941 = fma(_1011, cbModelParam._m0[23u].z, fma(_1007, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1003)) + cbModelParam._m0[23u].w;
        float _1944 = fma(_949, cbModelParam._m0[21u].z, fma(_948, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _947));
        float _1947 = fma(_949, cbModelParam._m0[22u].z, fma(_948, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _947));
        float _1950 = fma(_949, cbModelParam._m0[23u].z, fma(_948, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _947));
        float _2059;
        if (_1944 > 0.0)
        {
            _2059 = abs((1.0 - _1933) / _1944);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1933 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2059 = frontier_phi_28_24_ladder;
        }
        float _2376;
        if (_1947 > 0.0)
        {
            _2376 = abs((1.0 - _1937) / _1947);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1937 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2376 = frontier_phi_40_35_ladder;
        }
        float _2714;
        if (_1950 > 0.0)
        {
            _2714 = abs((1.0 - _1941) / _1950);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1941 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2714 = frontier_phi_50_47_ladder;
        }
        float _2716 = isnan(_2376) ? _2059 : (isnan(_2059) ? _2376 : min(_2059, _2376));
        float _2717 = isnan(_2714) ? _2716 : (isnan(_2716) ? _2714 : min(_2716, _2714));
        float _2721 = (_2717 * _1944) + _1933;
        float _2722 = (_2717 * _1947) + _1937;
        float _2723 = (_2717 * _1950) + _1941;
        float _2724 = _2717 * 9.9999997473787516355514526367188e-05;
        float _2725 = (-1.0) - _2724;
        float _2727 = _2724 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2723 > _2727) || ((_2723 < _2725) || ((_2722 > _2727) || ((_2722 < _2725) || ((_2721 < _2725) || (_2721 > _2727))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2723, cbModelParam._m0[17u].z, fma(_2722, cbModelParam._m0[17u].y, _2721 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2723, cbModelParam._m0[18u].z, fma(_2722, cbModelParam._m0[18u].y, _2721 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2723, cbModelParam._m0[19u].z, fma(_2722, cbModelParam._m0[19u].y, _2721 * cbModelParam._m0[19u].x))), _1879);
            frontier_phi_25_50_ladder = _2845.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2845.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2845.x * cbModelParam._m0[1u].z;
        }
        _1969 = frontier_phi_25_50_ladder_2;
        _1971 = frontier_phi_25_50_ladder_1;
        _1973 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_947, _948, _949), _1879);
        _1969 = _1953.x * cbModelParam._m0[1u].z;
        _1971 = _1953.y * cbModelParam._m0[1u].z;
        _1973 = _1953.z * cbModelParam._m0[1u].z;
    }
    float _1986 = (((_974 * _923) + _975) * _939) * ((cbModelParam._m0[1u].w * (_1969 - _1870)) + _1870);
    float _1988 = (((_974 * _925) + _975) * _939) * ((cbModelParam._m0[1u].w * (_1971 - _1872)) + _1872);
    float _1990 = (((_974 * _926) + _975) * _939) * ((cbModelParam._m0[1u].w * (_1973 - _1874)) + _1874);
    float _1993 = fma(_1990, cbSceneParam._m0[89u].z, fma(_1988, cbSceneParam._m0[89u].y, _1986 * cbSceneParam._m0[89u].x));
    float _1996 = fma(_1990, cbSceneParam._m0[90u].z, fma(_1988, cbSceneParam._m0[90u].y, _1986 * cbSceneParam._m0[90u].x));
    float _1999 = fma(_1990, cbSceneParam._m0[91u].z, fma(_1988, cbSceneParam._m0[91u].y, _1986 * cbSceneParam._m0[91u].x));
    float _2033 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2046 = _2033 / _2045;
    float _2047 = _2037 / _2045;
    float _2048 = _2041 / _2045;
    float _2195;
    float _2196;
    float _2197;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2075 = ((uint(_2048 > cbSceneParam._m0[59u].y) + uint(_2048 > cbSceneParam._m0[59u].x)) + uint(_2048 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2076 = _2075 + 43u;
        uint _2084 = _2075 + 44u;
        uint _2092 = _2075 + 45u;
        uint _2100 = _2075 + 46u;
        float _2111 = fma(_2045, cbSceneParam._m0[_2076].w, fma(_2041, cbSceneParam._m0[_2076].z, fma(_2037, cbSceneParam._m0[_2076].y, _2033 * cbSceneParam._m0[_2076].x)));
        float _2115 = fma(_2045, cbSceneParam._m0[_2084].w, fma(_2041, cbSceneParam._m0[_2084].z, fma(_2037, cbSceneParam._m0[_2084].y, _2033 * cbSceneParam._m0[_2084].x)));
        float _2123 = fma(_2045, cbSceneParam._m0[_2100].w, fma(_2041, cbSceneParam._m0[_2100].z, fma(_2037, cbSceneParam._m0[_2100].y, _2033 * cbSceneParam._m0[_2100].x)));
        float _2128 = cbSceneParam._m0[33u].z * _2123;
        float _2130 = cbSceneParam._m0[33u].w * _2123;
        float _2133 = fma(_2045, cbSceneParam._m0[_2092].w, fma(_2041, cbSceneParam._m0[_2092].z, fma(_2037, cbSceneParam._m0[_2092].y, _2033 * cbSceneParam._m0[_2092].x))) / _2123;
        float _2181 = (cbSceneParam._m0[33u].x - sqrt(((_2047 * _2047) + (_2046 * _2046)) + (_2048 * _2048))) * cbSceneParam._m0[33u].y;
        float _4562 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2188 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 + _2111) / _2123, (_2130 + _2115) / _2123), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2130 + _2111) / _2123, (_2115 - _2128) / _2123), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2111 - _2128) / _2123, (_2115 - _2130) / _2123), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2111 - _2130) / _2123, (_2128 + _2115) / _2123), _2133), 0.0)).x), vec4(0.25)));
        _2195 = 1.0 - (_2188 * cbSceneParam._m0[34u].x);
        _2196 = 1.0 - (_2188 * cbSceneParam._m0[34u].y);
        _2197 = 1.0 - (_2188 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2195 = 1.0;
        _2196 = 1.0;
        _2197 = 1.0;
    }
    float _2261;
    float _2263;
    float _2265;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2249 = fma(_2045, cbSceneParam._m0[63u].w, fma(_2041, cbSceneParam._m0[63u].z, fma(_2037, cbSceneParam._m0[63u].y, _2033 * cbSceneParam._m0[63u].x)));
        float _2250 = fma(_2045, cbSceneParam._m0[60u].w, fma(_2041, cbSceneParam._m0[60u].z, fma(_2037, cbSceneParam._m0[60u].y, _2033 * cbSceneParam._m0[60u].x))) / _2249;
        float _2251 = fma(_2045, cbSceneParam._m0[61u].w, fma(_2041, cbSceneParam._m0[61u].z, fma(_2037, cbSceneParam._m0[61u].y, _2033 * cbSceneParam._m0[61u].x))) / _2249;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2250 >= cbSceneParam._m0[64u].x) && (_2251 >= cbSceneParam._m0[64u].y)) && (_2250 <= cbSceneParam._m0[64u].z)) && (_2251 <= cbSceneParam._m0[64u].w))
        {
            float _2389 = fma(_2045, cbSceneParam._m0[62u].w, fma(_2041, cbSceneParam._m0[62u].z, fma(_2037, cbSceneParam._m0[62u].y, _2033 * cbSceneParam._m0[62u].x))) / _2249;
            float _2393 = isnan(cbSceneParam._m0[41u].w) ? _2389 : (isnan(_2389) ? cbSceneParam._m0[41u].w : max(_2389, cbSceneParam._m0[41u].w));
            float _2436 = (cbSceneParam._m0[33u].x - sqrt(((_2047 * _2047) + (_2046 * _2046)) + (_2048 * _2048))) * cbSceneParam._m0[33u].y;
            float _4578 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
            float _2443 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2250, cbSceneParam._m0[33u].w + _2251), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2250, _2251 - cbSceneParam._m0[33u].z), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2250 - cbSceneParam._m0[33u].z, _2251 - cbSceneParam._m0[33u].w), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2250 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2251), _2393), 0.0)).x), vec4(0.25)));
            float _2447 = 1.0 - (_2443 * cbSceneParam._m0[34u].x);
            float _2448 = 1.0 - (_2443 * cbSceneParam._m0[34u].y);
            float _2449 = 1.0 - (_2443 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2449) ? _2197 : (isnan(_2197) ? _2449 : min(_2197, _2449));
            frontier_phi_37_36_ladder_1 = isnan(_2448) ? _2196 : (isnan(_2196) ? _2448 : min(_2196, _2448));
            frontier_phi_37_36_ladder_2 = isnan(_2447) ? _2195 : (isnan(_2195) ? _2447 : min(_2195, _2447));
        }
        else
        {
            frontier_phi_37_36_ladder = _2197;
            frontier_phi_37_36_ladder_1 = _2196;
            frontier_phi_37_36_ladder_2 = _2195;
        }
        _2261 = frontier_phi_37_36_ladder_2;
        _2263 = frontier_phi_37_36_ladder_1;
        _2265 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2261 = _2195;
        _2263 = _2196;
        _2265 = _2197;
    }
    uvec4 _2270 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2272 = _2270.x * 14u;
    uint _2273 = _2272 + 13u;
    float _2280 = _939 + (-1.0);
    float _2285 = (cbLight._m0[_2273].x * _2280) + 1.0;
    float _2286 = (cbLight._m0[_2273].y * _2280) + 1.0;
    float _2287 = (cbLight._m0[_2273].z * _2280) + 1.0;
    float _2288 = (cbLight._m0[_2273].w * _2280) + 1.0;
    uint _2289 = _2272 + 5u;
    float _2295 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
    uint _2299 = _2272 + 4u;
    float _2308 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
    uint _2312 = _2272 | 1u;
    float _2323 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_762, _763, _764));
    float _2326 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_762, _763, _764));
    float _4614 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _4625 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2331 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * 0.3183098733425140380859375;
    float _2333 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * 0.3183098733425140380859375;
    float _2340 = ((cbLight._m0[_2289].x * _2295) * _2333) + (((cbLight._m0[_2299].x * _2261) * _2308) * _2331);
    float _2341 = ((_2295 * cbLight._m0[_2289].y) * _2333) + (((cbLight._m0[_2299].y * _2263) * _2308) * _2331);
    float _2342 = ((_2295 * cbLight._m0[_2289].z) * _2333) + (((cbLight._m0[_2299].z * _2265) * _2308) * _2331);
    uvec4 _2346 = floatBitsToUint(cbLight._m0[_2272 + 12u]);
    bool _2348 = _2346.x == 0u;
    float _2450;
    float _2452;
    float _2454;
    if (_2348)
    {
        _2450 = _2340;
        _2452 = _2341;
        _2454 = _2342;
    }
    else
    {
        uint _2458 = _2272 + 6u;
        float _2474 = (dot(vec3(cbLight._m0[_2272 + 2u].xyz), vec3(_762, _763, _764)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4636 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2477 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2450 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2340;
        _2452 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2341;
        _2454 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2342;
    }
    bool _2457 = _2346.y == 0u;
    float _2512;
    float _2514;
    float _2516;
    if (_2457)
    {
        _2512 = _2450;
        _2514 = _2452;
        _2516 = _2454;
    }
    else
    {
        uint _2685 = _2272 + 7u;
        float _2701 = (dot(vec3(cbLight._m0[_2272 + 3u].xyz), vec3(_762, _763, _764)) * 0.5) + 0.5;
        float _2702 = _2701 * _2701;
        float _4652 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2703 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2704 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2512 = (((cbLight._m0[_2685].x * 0.3183098733425140380859375) * _2703) * _2704) + _2450;
        _2514 = (((cbLight._m0[_2685].y * 0.3183098733425140380859375) * _2703) * _2704) + _2452;
        _2516 = (((cbLight._m0[_2685].z * 0.3183098733425140380859375) * _2703) * _2704) + _2454;
    }
    uint _2519 = _2272 + 8u;
    float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _765) * 0.949999988079071044921875);
    float _2533 = _2532 * _2532;
    float _2534 = cbLight._m0[_2272].x + _841;
    float _2535 = cbLight._m0[_2272].y + _842;
    float _2536 = cbLight._m0[_2272].z + _843;
    float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
    float _2541 = _2540 * _2534;
    float _2542 = _2540 * _2535;
    float _2543 = _2540 * _2536;
    float _2544 = dot(vec3(_762, _763, _764), vec3(cbLight._m0[_2272].xyz));
    float _4668 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _4679 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _2548 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2549 = dot(vec3(_762, _763, _764), vec3(_2541, _2542, _2543));
    float _4690 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2552 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2553 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2541, _2542, _2543));
    float _4701 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2557 = _2533 * _2533;
    float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
    float _2569 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
    float _2570 = 0.959999978542327880859375 - _920;
    float _2572 = 0.959999978542327880859375 - _921;
    float _2573 = 0.959999978542327880859375 - _922;
    float _2580 = 1.0 - _2533;
    float _2591 = (0.5 / (((_2548 * ((_2547 * _2580) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2580) + _2533) * _2547))) * _2547;
    float _4712 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2593 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
    uint _2607 = _2272 + 9u;
    float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _765) * 0.949999988079071044921875);
    float _2619 = _2618 * _2618;
    float _2620 = cbLight._m0[_2312].x + _841;
    float _2621 = cbLight._m0[_2312].y + _842;
    float _2622 = cbLight._m0[_2312].z + _843;
    float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
    float _2627 = _2626 * _2620;
    float _2628 = _2626 * _2621;
    float _2629 = _2626 * _2622;
    float _2630 = dot(vec3(_762, _763, _764), vec3(cbLight._m0[_2312].xyz));
    float _4723 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2633 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2634 = dot(vec3(_762, _763, _764), vec3(_2627, _2628, _2629));
    float _4734 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2638 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2627, _2628, _2629));
    float _4745 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2642 = _2619 * _2619;
    float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
    float _2653 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
    float _2660 = 1.0 - _2619;
    float _2670 = (0.5 / (((_2548 * ((_2633 * _2660) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2660) + _2619) * _2633))) * _2633;
    float _4756 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2672 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
    float _2682 = (((((_2653 * _2570) + _923) * cbLight._m0[_2607].x) * _2672) * _2295) + ((((cbLight._m0[_2519].x * _2261) * ((_2569 * _2570) + _923)) * _2593) * _2308);
    float _2683 = (((((_2653 * _2572) + _925) * cbLight._m0[_2607].y) * _2672) * _2295) + ((((cbLight._m0[_2519].y * _2263) * ((_2569 * _2572) + _925)) * _2593) * _2308);
    float _2684 = (((((_2653 * _2573) + _926) * cbLight._m0[_2607].z) * _2672) * _2295) + ((((cbLight._m0[_2519].z * _2265) * ((_2569 * _2573) + _926)) * _2593) * _2308);
    float _2740;
    float _2742;
    float _2744;
    if (_2348)
    {
        _2740 = _2682;
        _2742 = _2683;
        _2744 = _2684;
    }
    else
    {
        uint _2746 = _2272 + 2u;
        uint _2750 = _2272 + 10u;
        float _2764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2746].w)) * _765) * 0.949999988079071044921875);
        float _2765 = _2764 * _2764;
        float _2766 = cbLight._m0[_2746].x + _841;
        float _2767 = cbLight._m0[_2746].y + _842;
        float _2768 = cbLight._m0[_2746].z + _843;
        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
        float _2773 = _2772 * _2766;
        float _2774 = _2772 * _2767;
        float _2775 = _2772 * _2768;
        float _2776 = dot(vec3(_762, _763, _764), vec3(cbLight._m0[_2746].xyz));
        float _4767 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2780 = dot(vec3(_762, _763, _764), vec3(_2773, _2774, _2775));
        float _4778 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2783 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2784 = dot(vec3(cbLight._m0[_2746].xyz), vec3(_2773, _2774, _2775));
        float _4789 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2788 = _2765 * _2765;
        float _2792 = ((_2783 * _2783) * (_2788 + (-1.0))) + 1.0;
        float _2799 = exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0);
        float _2806 = 1.0 - _2765;
        float _2816 = (0.5 / (((_2548 * ((_2779 * _2806) + _2765)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2806) + _2765) * _2779))) * _2779;
        float _4800 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2818 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2788 / ((_2792 * _2792) * 3.141590118408203125));
        float _2819 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2740 = (((((_2799 * _2570) + _923) * cbLight._m0[_2750].x) * _2818) * _2819) + _2682;
        _2742 = (((((_2799 * _2572) + _925) * cbLight._m0[_2750].y) * _2818) * _2819) + _2683;
        _2744 = (((((_2799 * _2573) + _926) * cbLight._m0[_2750].z) * _2818) * _2819) + _2684;
    }
    float _2850;
    float _2852;
    float _2854;
    if (_2457)
    {
        _2850 = _2740;
        _2852 = _2742;
        _2854 = _2744;
    }
    else
    {
        uint _2861 = _2272 + 3u;
        uint _2865 = _2272 + 11u;
        float _2879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2861].w)) * _765) * 0.949999988079071044921875);
        float _2880 = _2879 * _2879;
        float _2881 = cbLight._m0[_2861].x + _841;
        float _2882 = cbLight._m0[_2861].y + _842;
        float _2883 = cbLight._m0[_2861].z + _843;
        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
        float _2888 = _2887 * _2881;
        float _2889 = _2887 * _2882;
        float _2890 = _2887 * _2883;
        float _2891 = dot(vec3(_762, _763, _764), vec3(cbLight._m0[_2861].xyz));
        float _4816 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2894 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2895 = dot(vec3(_762, _763, _764), vec3(_2888, _2889, _2890));
        float _4827 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2898 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2899 = dot(vec3(cbLight._m0[_2861].xyz), vec3(_2888, _2889, _2890));
        float _4838 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2903 = _2880 * _2880;
        float _2907 = ((_2898 * _2898) * (_2903 + (-1.0))) + 1.0;
        float _2914 = exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0);
        float _2921 = 1.0 - _2880;
        float _2931 = (0.5 / (((_2548 * ((_2894 * _2921) + _2880)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2921) + _2880) * _2894))) * _2894;
        float _4849 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2933 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2903 / ((_2907 * _2907) * 3.141590118408203125));
        float _2934 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2850 = (((((_2914 * _2570) + _923) * cbLight._m0[_2865].x) * _2933) * _2934) + _2740;
        _2852 = (((((_2914 * _2572) + _925) * cbLight._m0[_2865].y) * _2933) * _2934) + _2742;
        _2854 = (((((_2914 * _2573) + _926) * cbLight._m0[_2865].z) * _2933) * _2934) + _2744;
    }
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    if (_2270.y == 0u)
    {
        uvec4 _2955 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2956 = _2955.x;
        uint _2967 = uint((float(_2955.y) * floor(float(uint(cbSceneParam._m0[85u].y * _862) / _2956))) + floor(float(uint(cbSceneParam._m0[85u].x * _861) / _2956)));
        float _2977 = (log2(_2048 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2978 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        uint _2981 = uint(isnan(14.0) ? _2978 : (isnan(_2978) ? 14.0 : min(_2978, 14.0)));
        uvec4 _2986 = texelFetch(g_lightClusterGridBuffer, int(((_2981 << 2u) + (_2967 << 6u)) >> 2u));
        uint _2987 = _2986.x;
        uint _2988 = _2955.z;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        if (((((1u << ((_2988 >> 4u) & 15u)) + 4294967295u) & _2987) == 0u) || ((_2988 & 240u) == 0u))
        {
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
        }
        else
        {
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3078;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            uint _3226 = 0u;
            uint _3235;
            bool _3236;
            for (;;)
            {
                _3235 = texelFetch(g_lightClassification, int((((_2981 << 5u) + (_2967 << 9u)) + (_3226 << 2u)) >> 2u)).x;
                _3236 = _3235 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3236)
                {
                    frontier_phi_71_pred = _3225;
                    frontier_phi_71_pred_1 = _3224;
                    frontier_phi_71_pred_2 = _3223;
                    frontier_phi_71_pred_3 = _3222;
                    frontier_phi_71_pred_4 = _3221;
                    frontier_phi_71_pred_5 = _3220;
                }
                else
                {
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    uint _3371;
                    _3365 = _3220;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3235;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    for (;;)
                    {
                        uint _3375 = uint(findLSB(_3371)) + (_3226 << 5u);
                        uint _3372 = (_3371 + 4294967295u) & _3371;
                        uint _3377 = _3375 * 48u;
                        vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3377)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 3u)).x));
                        uint _3397 = (_3375 * 48u) + 4u;
                        vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 3u)).x));
                        uint _3416 = (_3375 * 48u) + 8u;
                        vec3 _3427 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x));
                        float _3431 = _3391.x - _2046;
                        float _3432 = _3391.y - _2047;
                        float _3433 = _3391.z - _2048;
                        float _3434 = dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433));
                        float _3437 = inversesqrt(_3434);
                        float _3438 = _3437 * _3431;
                        float _3439 = _3437 * _3432;
                        float _3440 = _3437 * _3433;
                        float _3441 = dot(vec3(_880, _883, _886), vec3(_3438, _3439, _3440));
                        float _3446 = 1.0 - (_3434 * _3391.w);
                        float _4875 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3447 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3448 = sqrt(_3434) * _3410.w;
                        float _3451 = 1.39999997615814208984375 / (_3448 + 1.39999997615814208984375);
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3441) + _3452;
                        float _3458 = _3448 * _3448;
                        float _3462 = ((isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0))) * _3447) / ((_3458 * 0.699999988079071044921875) + 1.0);
                        float _3466 = (-0.0) - _2046;
                        float _3467 = (-0.0) - _2047;
                        float _3468 = (-0.0) - _2048;
                        float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                        float _3473 = _3472 * _3466;
                        float _3474 = _3472 * _3467;
                        float _3475 = _3472 * _3468;
                        float _3482 = exp2(log2(1.0 / ((_3458 * 3.5) + 5.0)) * 0.25);
                        float _3483 = 1.0 - _955;
                        float _3490 = sqrt(1.0 - ((1.0 - (_3483 * _3483)) * (1.0 - (_3482 * _3482))));
                        float _3491 = _3490 * _3490;
                        float _3492 = _3491 * _3491;
                        float _3493 = _3473 + _3438;
                        float _3494 = _3474 + _3439;
                        float _3495 = _3475 + _3440;
                        float _3499 = inversesqrt(dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495)));
                        float _3503 = dot(vec3(_880, _883, _886), vec3(_3473, _3474, _3475));
                        float _4891 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3506 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3507 = dot(vec3(_880, _883, _886), vec3(_3499 * _3493, _3499 * _3494, _3499 * _3495));
                        float _4902 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3510 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                        float _3514 = ((_3510 * _3510) * (_3492 + (-1.0))) + 1.0;
                        float _3515 = _3451 * _3491;
                        float _3516 = _3515 * _3515;
                        float _3519 = ((1.0 - _3516) * _3441) + _3516;
                        float _4913 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3520 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3521 = 1.0 - _3491;
                        float _3531 = (0.5 / (((_3520 * ((_3506 * _3521) + _3491)) + 9.9999999392252902907785028219223e-09) + (((_3520 * _3521) + _3491) * _3506))) * _3520;
                        float _4924 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3542 = (((_3492 * 3.1415927410125732421875) * (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) / ((_3514 * _3514) * ((_3458 * 2.1991131305694580078125) + 3.141590118408203125))) * _3447;
                        _3295 = (_3462 * _3410.x) + _3368;
                        _3296 = (_3462 * _3410.y) + _3369;
                        _3297 = (_3462 * _3410.z) + _3370;
                        _3292 = (_3542 * _3427.x) + _3365;
                        _3293 = (_3542 * _3427.y) + _3366;
                        _3294 = (_3542 * _3427.z) + _3367;
                        if (_3372 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3365 = _3292;
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3372;
                        }
                    }
                    frontier_phi_71_pred = _3297;
                    frontier_phi_71_pred_1 = _3296;
                    frontier_phi_71_pred_2 = _3295;
                    frontier_phi_71_pred_3 = _3294;
                    frontier_phi_71_pred_4 = _3293;
                    frontier_phi_71_pred_5 = _3292;
                }
                _3078 = frontier_phi_71_pred;
                _3076 = frontier_phi_71_pred_1;
                _3074 = frontier_phi_71_pred_2;
                _3072 = frontier_phi_71_pred_3;
                _3070 = frontier_phi_71_pred_4;
                _3068 = frontier_phi_71_pred_5;
                uint _3227 = _3226 + 1u;
                if (_3227 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3220 = _3068;
                    _3221 = _3070;
                    _3222 = _3072;
                    _3223 = _3074;
                    _3224 = _3076;
                    _3225 = _3078;
                    _3226 = _3227;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
        }
        uvec4 _3081 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3082 = _3081.z;
        uint _3084 = (_3082 >> 8u) & 15u;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        if (((4294967295u << _3084) & _2987) == 0u)
        {
            _3188 = _3067;
            _3190 = _3069;
            _3192 = _3071;
            _3194 = _3073;
            _3196 = _3075;
            _3198 = _3077;
        }
        else
        {
            float _3213 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
            float _3214 = _3213 * _2046;
            float _3215 = _3213 * _2047;
            float _3216 = _3213 * _2048;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3084 < ((_3082 >> 12u) & 15u))
            {
                float _3189;
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3199;
                float _3348 = _3067;
                float _3349 = _3069;
                float _3350 = _3071;
                float _3351 = _3073;
                float _3352 = _3075;
                float _3353 = _3077;
                uint _3354 = _3084;
                uint _3363;
                bool _3364;
                for (;;)
                {
                    _3363 = texelFetch(g_lightClassification, int((((_2981 << 5u) + (_2967 << 9u)) + (_3354 << 2u)) >> 2u)).x;
                    _3364 = _3363 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3364)
                    {
                        frontier_phi_82_pred = _3353;
                        frontier_phi_82_pred_1 = _3352;
                        frontier_phi_82_pred_2 = _3351;
                        frontier_phi_82_pred_3 = _3350;
                        frontier_phi_82_pred_4 = _3349;
                        frontier_phi_82_pred_5 = _3348;
                    }
                    else
                    {
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3569 = _3348;
                        float _3570 = _3349;
                        float _3571 = _3350;
                        float _3572 = _3351;
                        float _3573 = _3352;
                        float _3574 = _3353;
                        uint _3575 = _3363;
                        uint _3576;
                        vec4 _3601;
                        float _3602;
                        vec4 _3617;
                        vec3 _3629;
                        vec4 _3644;
                        vec4 _3659;
                        float _3705;
                        bool _3706;
                        for (;;)
                        {
                            uint _3586 = ((_3354 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3575));
                            _3576 = (_3575 + 4294967295u) & _3575;
                            uint _3588 = _3586 * 40u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            _3602 = _3601.w;
                            uint _3604 = (_3586 * 40u) + 4u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3619 = (_3586 * 40u) + 8u;
                            _3629 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x));
                            uint _3631 = (_3586 * 40u) + 16u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3646 = (_3586 * 40u) + 20u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3661 = (_3586 * 40u) + 24u;
                            vec4 _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3680 = (_3586 * 40u) + 28u;
                            vec4 _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            _3705 = fma(_2048, _3693.z, fma(_2047, _3693.y, _3693.x * _2046)) + _3693.w;
                            _3706 = !((fma(_2048, _3674.z, fma(_2047, _3674.y, _3674.x * _2046)) + _3674.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3706)
                            {
                                float _3733 = _3601.x - _2046;
                                float _3734 = _3601.y - _2047;
                                float _3735 = _3601.z - _2048;
                                float _3736 = dot(vec3(_3733, _3734, _3735), vec3(_3733, _3734, _3735));
                                float _3739 = inversesqrt(_3736);
                                float _3740 = _3739 * _3733;
                                float _3741 = _3739 * _3734;
                                float _3742 = _3739 * _3735;
                                float _3746 = 1.0 - (_3736 / (_3602 * _3602));
                                float _4935 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3747 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3751 = sqrt(_3736) * _3617.w;
                                float _3753 = 1.39999997615814208984375 / (_3751 + 1.39999997615814208984375);
                                float _3754 = _3753 * _3753;
                                float _3757 = ((1.0 - _3754) * dot(vec3(_3740, _3741, _3742), vec3(_880, _883, _886))) + _3754;
                                float _3760 = _3751 * _3751;
                                float _3764 = (fma(_2048, _3644.z, fma(_2047, _3644.y, _3644.x * _2046)) + _3644.w) / _3705;
                                float _3765 = (fma(_2048, _3659.z, fma(_2047, _3659.y, _3659.x * _2046)) + _3659.w) / _3705;
                                float _3769 = 1.0 - dot(vec2(_3764, _3765), vec2(_3764, _3765));
                                float _4951 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3770 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3771 = _3770 * (((isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0))) * _3747) / ((_3760 * 0.699999988079071044921875) + 1.0));
                                float _3783 = exp2(log2(1.0 / ((_3760 * 3.5) + 5.0)) * 0.25);
                                float _3784 = 1.0 - _955;
                                float _3791 = sqrt(1.0 - ((1.0 - (_3784 * _3784)) * (1.0 - (_3783 * _3783))));
                                float _3792 = _3791 * _3791;
                                float _3793 = _3792 * _3792;
                                float _3794 = _3740 - _3214;
                                float _3795 = _3741 - _3215;
                                float _3796 = _3742 - _3216;
                                float _3800 = inversesqrt(dot(vec3(_3794, _3795, _3796), vec3(_3794, _3795, _3796)));
                                float _3804 = dot(vec3(_880, _883, _886), vec3((-0.0) - _3214, (-0.0) - _3215, (-0.0) - _3216));
                                float _4962 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3807 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                                float _3808 = dot(vec3(_880, _883, _886), vec3(_3800 * _3794, _3800 * _3795, _3800 * _3796));
                                float _4973 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3811 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3815 = ((_3811 * _3811) * (_3793 + (-1.0))) + 1.0;
                                float _3816 = _3753 * _3792;
                                float _3817 = _3816 * _3816;
                                float _3823 = ((1.0 - _3817) * dot(vec3(_880, _883, _886), vec3(_3740, _3741, _3742))) + _3817;
                                float _4984 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3824 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3825 = 1.0 - _3792;
                                float _3835 = (0.5 / (((_3824 * ((_3807 * _3825) + _3792)) + 9.9999999392252902907785028219223e-09) + (((_3824 * _3825) + _3792) * _3807))) * _3824;
                                float _4995 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3845 = (_3770 * _3747) * (((_3793 * 3.1415927410125732421875) * (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0)))) / ((_3815 * _3815) * ((_3760 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3771 * _3617.z;
                                frontier_phi_88_pred_1 = _3771 * _3617.y;
                                frontier_phi_88_pred_2 = _3771 * _3617.x;
                                frontier_phi_88_pred_3 = _3845 * _3629.z;
                                frontier_phi_88_pred_4 = _3845 * _3629.y;
                                frontier_phi_88_pred_5 = _3845 * _3629.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3854 = frontier_phi_88_pred;
                            _3853 = frontier_phi_88_pred_1;
                            _3852 = frontier_phi_88_pred_2;
                            _3851 = frontier_phi_88_pred_3;
                            _3850 = frontier_phi_88_pred_4;
                            _3849 = frontier_phi_88_pred_5;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            _3561 = _3854 + _3574;
                            _3556 = _3849 + _3569;
                            _3557 = _3850 + _3570;
                            _3558 = _3851 + _3571;
                            if (_3576 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3576;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3561;
                        frontier_phi_82_pred_1 = _3560;
                        frontier_phi_82_pred_2 = _3559;
                        frontier_phi_82_pred_3 = _3558;
                        frontier_phi_82_pred_4 = _3557;
                        frontier_phi_82_pred_5 = _3556;
                    }
                    _3199 = frontier_phi_82_pred;
                    _3197 = frontier_phi_82_pred_1;
                    _3195 = frontier_phi_82_pred_2;
                    _3193 = frontier_phi_82_pred_3;
                    _3191 = frontier_phi_82_pred_4;
                    _3189 = frontier_phi_82_pred_5;
                    uint _3355 = _3354 + 1u;
                    if (_3355 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3348 = _3189;
                        _3349 = _3191;
                        _3350 = _3193;
                        _3351 = _3195;
                        _3352 = _3197;
                        _3353 = _3199;
                        _3354 = _3355;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3195;
                frontier_phi_63_64_ladder_1 = _3199;
                frontier_phi_63_64_ladder_2 = _3197;
                frontier_phi_63_64_ladder_3 = _3193;
                frontier_phi_63_64_ladder_4 = _3191;
                frontier_phi_63_64_ladder_5 = _3189;
            }
            else
            {
                frontier_phi_63_64_ladder = _3073;
                frontier_phi_63_64_ladder_1 = _3077;
                frontier_phi_63_64_ladder_2 = _3075;
                frontier_phi_63_64_ladder_3 = _3071;
                frontier_phi_63_64_ladder_4 = _3069;
                frontier_phi_63_64_ladder_5 = _3067;
            }
            _3188 = frontier_phi_63_64_ladder_5;
            _3190 = frontier_phi_63_64_ladder_4;
            _3192 = frontier_phi_63_64_ladder_3;
            _3194 = frontier_phi_63_64_ladder;
            _3196 = frontier_phi_63_64_ladder_2;
            _3198 = frontier_phi_63_64_ladder_1;
        }
        float _3203 = isnan(1.0) ? _939 : (isnan(_939) ? 1.0 : min(_939, 1.0));
        _3000 = (_3203 * _3194) + _2512;
        _3002 = (_3203 * _3196) + _2514;
        _3004 = (_3203 * _3198) + _2516;
        _3006 = ((_3188 * _923) * _3203) + _2850;
        _3008 = ((_3190 * _925) * _3203) + _2852;
        _3010 = ((_3192 * _926) * _3203) + _2854;
    }
    else
    {
        _3000 = _2512;
        _3002 = _2514;
        _3004 = _2516;
        _3006 = _2850;
        _3008 = _2852;
        _3010 = _2854;
    }
    float _5011 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _5022 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _5033 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _3027 = ((isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * (_3000 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _939))) + ((_3006 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1777)) * cbPerFrame._m0[3u].x);
    float _3028 = ((isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * (_3002 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _939))) + ((_3008 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1777)) * cbPerFrame._m0[3u].x);
    float _3029 = ((isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_3004 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _939))) + ((_3010 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1777)) * cbPerFrame._m0[3u].x);
    uint _3030 = _259 + 6u;
    float _3038 = _861 / cbSceneParam._m0[86u].x;
    float _3039 = _862 / cbSceneParam._m0[86u].y;
    vec4 _3053 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3038, _3039, (log2((isnan(cbSceneParam._m0[77u].w) ? _784 : (isnan(_784) ? cbSceneParam._m0[77u].w : min(_784, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3055 = _3053.x;
    float _3056 = _3053.y;
    float _3057 = _3053.z;
    float _3058 = _3053.w;
    float _3130;
    float _3132;
    float _3134;
    float _3136;
    if (_784 > cbSceneParam._m0[78u].w)
    {
        float _3092 = isnan(_784) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _784 : min(cbSceneParam._m0[80u].w, _784));
        float _3093 = _3092 / _784;
        float _3104 = _3093 * _834;
        float _3105 = _835 * _3093;
        float _3106 = (-0.0) - _3105;
        float _3108 = _3093 * _836;
        float _3110 = (cbSceneParam._m0[77u].w * _3106) / _3092;
        float _3111 = _3110 + cbSceneParam._m0[79u].w;
        float _3112 = cbSceneParam._m0[79u].w - _3105;
        float _3118 = sqrt(((_3104 * _3104) + (_3105 * _3105)) + (_3108 * _3108));
        float _3121 = (1.0 - (cbSceneParam._m0[77u].w / _3092)) * _3118;
        float _3126 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3128 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3305;
        if (abs((_3106 - _3110) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3305 = ((((_3111 > 0.0) ? exp2(_3126 * _3111) : (2.0 - exp2(_3128 * _3111))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3121;
        }
        else
        {
            float _3249 = 1.0 / cbSceneParam._m0[80u].x;
            float _3250 = isnan(_3112) ? _3111 : (isnan(_3111) ? _3112 : max(_3111, _3112));
            float _3251 = isnan(_3112) ? _3111 : (isnan(_3111) ? _3112 : min(_3111, _3112));
            float _3260 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : min(_3250, 0.0));
            float _3261 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : min(_3251, 0.0));
            _3305 = ((abs(_3118 / _3106) * cbSceneParam._m0[80u].y) * ((((_3260 - _3261) * 2.0) - ((exp2(_3126 * (isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0)))) - exp2(_3126 * (isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))))) * _3249)) - ((exp2(_3128 * _3260) - exp2(_3128 * _3261)) * _3249))) + (_3121 * cbSceneParam._m0[80u].z);
        }
        vec4 _3307 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3038, _3039, 1.0), 0.0);
        float _3316 = exp2((_3305 * (-1.44269502162933349609375)) * (1.0 - _3307.w));
        float _3317 = log2(_3316);
        float _3333 = log2(_3058);
        _3130 = (exp2(_3333 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3317 * cbSceneParam._m0[78u].x)) * _3307.x) / cbSceneParam._m0[78u].x)) + _3055;
        _3132 = (exp2(_3333 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3317 * cbSceneParam._m0[78u].y)) * _3307.y) / cbSceneParam._m0[78u].y)) + _3056;
        _3134 = (exp2(_3333 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3317 * cbSceneParam._m0[78u].z)) * _3307.z) / cbSceneParam._m0[78u].z)) + _3057;
        _3136 = _3316 * _3058;
    }
    else
    {
        _3130 = _3055;
        _3132 = _3056;
        _3134 = _3057;
        _3136 = _3058;
    }
    bool _3343;
    vec4 _3146;
    vec4 _3168;
    float _3170;
    float _3174;
    float _3175;
    float _3176;
    float _3177;
    bool _3187;
    for (;;)
    {
        _3146 = cbMatDynParam._m0[0u];
        float _3148 = roundEven(_3146.y);
        bool _3149 = _3148 == 3.0;
        float _3150 = log2(_3136);
        float _3157 = exp2(_3150 * cbSceneParam._m0[78u].x) * _3027;
        float _3158 = exp2(_3150 * cbSceneParam._m0[78u].y) * _3028;
        float _3159 = exp2(_3150 * cbSceneParam._m0[78u].z) * _3029;
        float _3166 = _850 + (-0.5);
        _3168 = cbMtdParam._m0[1u];
        _3170 = _3168.y * _3166;
        float _3173 = (_3148 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3174 = _3173 * (_3149 ? _3157 : (_3157 + (cbSceneParam._m0[72u].w * _3130)));
        _3175 = _3173 * (_3149 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3132)));
        _3176 = _3173 * (_3149 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3134)));
        _3177 = _3166 * 0.999000012874603271484375;
        _3187 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3187)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3177) < 0.5)
            {
                _3343 = true;
                break;
            }
        }
        uint _3284 = _899 + uint(_3146.w);
        if ((cbInstanceData._m0[_3284].w < 1.0) && ((cbInstanceData._m0[_3284].w + _3177) < 0.5))
        {
            _3343 = true;
            break;
        }
        if ((_3170 + 1.0) < _3168.x)
        {
            _3343 = true;
            break;
        }
        _3343 = false;
        break;
    }
    float _3547;
    if (_3343)
    {
        discard_state = true;
        _3547 = 0.0;
    }
    else
    {
        _3547 = cbInstanceData._m0[_3030].w;
    }
    SV_Target.x = _3174;
    SV_Target.y = _3175;
    SV_Target.z = _3176;
    SV_Target.w = _3547;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3030].w;
    discard_exit();
}


