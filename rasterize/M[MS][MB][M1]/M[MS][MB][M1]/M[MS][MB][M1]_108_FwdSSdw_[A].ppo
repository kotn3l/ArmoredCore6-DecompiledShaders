#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1458;
float _3862;
float _3863;
float _3864;
float _3865;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3874 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3885 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3896 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3907 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) + _453;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    float _537 = ((_507.z - _528) * _434) + _528;
    float _540 = ((((_507.x - _526) * _434) + _526) * 2.0) + (-1.0);
    float _541 = ((((_507.y - _527) * _434) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3918 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _579 = (_540 + ((((_480.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_567.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _580 = (_541 + ((((_480.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_567.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _583 = fma(_547, _252, fma(_580, _259, _579 * _245));
    float _586 = fma(_547, _253, fma(_580, _260, _579 * _246));
    float _589 = fma(_547, _254, fma(_580, _261, _579 * _247));
    float _593 = inversesqrt(dot(vec3(_583, _586, _589), vec3(_583, _586, _589)));
    vec4 _620 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _622 = _620.x;
    float _623 = 1.0 - _622;
    float _629 = (cbMtdParam._m0[19u].x + dot(vec4(_593 * _583, _593 * _586, _593 * _589, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_622 - _623) * cbMtdParam._m0[24u].z) + _623) * cbMtdParam._m0[21u].z);
    float _3929 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _632 = (-0.0) - cbMtdParam._m0[24u].x;
    float _634 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _634 : (isnan(_634) ? 1.0 : min(_634, 1.0));
    float _642 = _630 - ((_630 * TEXCOORD_8.x) * _635);
    float _643 = _630 - ((_630 * TEXCOORD_8.y) * _635);
    float _644 = _630 - ((_630 * TEXCOORD_8.z) * _635);
    float _651 = (_642 * (cbMtdParam._m0[17u].x - _460)) + _460;
    float _652 = (_643 * (cbMtdParam._m0[17u].y - _461)) + _461;
    float _653 = (_644 * (cbMtdParam._m0[17u].z - _462)) + _462;
    vec4 _665 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _667 = _665.x;
    float _668 = 1.0 - _667;
    float _694 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_667 - _668) * cbMtdParam._m0[24u].w) + _668) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3950 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _703 = ((((cbMtdParam._m0[10u].x - _651) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _695) + _651;
    float _704 = ((((cbMtdParam._m0[10u].y - _652) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _695) + _652;
    float _705 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _653)) * _695) + _653;
    vec4 _731 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _733 = _731.x;
    float _751 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _733) * _434) + _733;
    float _755 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _751) * cbMtdParam._m0[19u].z) + _751;
    float _757 = _755 - (_755 * _642);
    float _759 = _757 - (_757 * _695);
    float _764 = (((_480.z - _537) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _537;
    float _768 = ((_567.z - _764) * cbMtdParam._m0[19u].w) + _764;
    vec4 _782 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _789 = (_782.x * 2.0) + (-1.0);
    float _790 = (_782.y * 2.0) + (-1.0);
    float _791 = dot(vec2(_789, _790), vec2(_789, _790));
    float _3961 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _799 = ((_782.z - _768) * _642) + _768;
    float _802 = ((cbMtdParam._m0[23u].y - _799) * _695) + _799;
    vec4 _821 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _827 = (_821.x * 2.0) + (-1.0);
    float _828 = (_821.y * 2.0) + (-1.0);
    float _829 = dot(vec2(_827, _828), vec2(_827, _828));
    float _3972 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _844 = ((sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) - _547) * _644) + _547;
    float _847 = (((_789 - _579) * _642) + _579) + (cbMtdParam._m0[21u].x * _579);
    float _848 = (((_790 - _580) * _643) + _580) + (cbMtdParam._m0[21u].x * _580);
    float _859 = (((_827 - _847) + (_847 * cbMtdParam._m0[22u].z)) * _695) + _847;
    float _860 = (((_828 - _848) + (_848 * cbMtdParam._m0[22u].z)) * _695) + _848;
    float _861 = (_695 * (sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) - _844)) + _844;
    float _865 = cbMtdParam._m0[22u].x + _567.w;
    float _868 = fma(_861, _252, fma(_860, _259, _859 * _245));
    float _871 = fma(_861, _253, fma(_860, _260, _859 * _246));
    float _874 = fma(_861, _254, fma(_860, _261, _859 * _247));
    float _878 = inversesqrt(dot(vec3(_868, _871, _874), vec3(_868, _871, _874)));
    float _879 = _878 * _868;
    float _880 = _878 * _871;
    float _881 = _878 * _874;
    float _3983 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _882 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4005 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4016 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4027 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4038 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _887 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _901 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _951 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _941);
    float _952 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _941);
    float _953 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _941);
    float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
    float _958 = _951 * _957;
    float _959 = _952 * _957;
    float _960 = _953 * _957;
    vec4 _965 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _967 = _965.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1139 = sqrt(((_951 * _951) + (_952 * _952)) + (_953 * _953));
        float _1145 = (cbMatDynParam._m0[5u].x * _1139) + cbMatDynParam._m0[5u].y;
        float _4049 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1150 = (cbMatDynParam._m0[5u].z * _1139) + cbMatDynParam._m0[5u].w;
        float _4060 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) - _1146)) + _1146) < ((_967 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _978 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _979 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _997 = fma(_881, cbSceneParam._m0[5u].z, fma(_880, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _879));
    float _1000 = fma(_881, cbSceneParam._m0[6u].z, fma(_880, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _879));
    float _1003 = fma(_881, cbSceneParam._m0[7u].z, fma(_880, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _879));
    uint _1016 = _283 + 9u;
    uint _1017 = _1016 + uint(cbMatDynParam._m0[0u].w);
    float _1023 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_1017].x;
    float _1024 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_1017].y;
    float _1025 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_1017].z;
    float _4071 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1028 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _1029 = 1.0 - _887;
    float _1030 = _1026 * _1029;
    float _1031 = _1027 * _1029;
    float _1032 = _1028 * _1029;
    float _1037 = (_1026 + (-0.039999999105930328369140625)) * _887;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _887;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _887;
    float _1040 = _1037 + 0.039999999105930328369140625;
    float _1042 = _1038 + 0.039999999105930328369140625;
    float _1043 = _1039 + 0.039999999105930328369140625;
    vec4 _1052 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _978, cbSceneParam._m0[86u].y * _979));
    float _1056 = ((isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * TEXCOORD_5.w) * _1052.x;
    float _1057 = dot(vec3(_879, _880, _881), vec3(_958, _959, _960));
    float _1060 = _1057 * 2.0;
    float _1064 = (_1060 * _879) - _958;
    float _1065 = (_1060 * _880) - _959;
    float _1066 = (_1060 * _881) - _960;
    float _1070 = abs(dot(vec3(_958, _959, _960), vec3(_879, _880, _881)));
    float _4104 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1072 = sqrt(_882);
    float _1085 = exp2((_1072 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1072 * 3.0));
    float _1091 = (1.0 - _1085) * ((_1072 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1092 = _1085 * _1072;
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1457;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1182 = fma(_1128, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120));
        float _1186 = fma(_1128, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120));
        float _1190 = fma(_1128, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120));
        float _1215 = _1120 + _879;
        float _1216 = _1124 + _880;
        float _1217 = _1128 + _881;
        float _1227 = fma(_1217, cbModelParam._m0[26u].z, fma(_1216, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1215)) - _1182;
        float _1228 = fma(_1217, cbModelParam._m0[27u].z, fma(_1216, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1215)) - _1186;
        float _1229 = fma(_1217, cbModelParam._m0[28u].z, fma(_1216, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1215)) - _1190;
        float _1233 = inversesqrt(dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229)));
        float _1246 = ((_1233 * _1227) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1182 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1233 * _1228) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1186 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1233 * _1229) / cbModelParam._m0[34u].z) + ((((((_1190 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        float _1285 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1251.x + (-0.5));
        float _1287 = _1285 * (_1251.y + (-0.5));
        float _1288 = _1285 * (_1251.z + (-0.5));
        float _1295 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1258.x + (-0.5));
        float _1297 = _1295 * (_1258.y + (-0.5));
        float _1298 = _1295 * (_1258.z + (-0.5));
        float _1305 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1265.x + (-0.5));
        float _1307 = _1305 * (_1265.y + (-0.5));
        float _1308 = _1305 * (_1265.z + (-0.5));
        float _1315 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1272.x + (-0.5));
        float _1317 = _1315 * (_1272.y + (-0.5));
        float _1318 = _1315 * (_1272.z + (-0.5));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = _1286 * 0.5;
        float _1323 = _1296 * 0.5;
        float _1324 = _1306 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1339 = (dot(vec3(_879, _880, _881), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1349 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4152 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1351 + 1.0))) + _1356) * _1319;
        float _1366 = _1287 * 0.5;
        float _1367 = _1297 * 0.5;
        float _1368 = _1307 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_879, _880, _881), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4185 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1393 + 1.0))) + _1398) * _1320;
        float _1408 = _1288 * 0.5;
        float _1409 = _1298 * 0.5;
        float _1410 = _1308 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_879, _880, _881), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4218 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1435 + 1.0))) + _1440) * _1321;
        _1457 = _1288;
        _1459 = _1287;
        _1460 = _1286;
        _1461 = _1298;
        _1462 = _1297;
        _1463 = _1296;
        _1464 = _1308;
        _1465 = _1307;
        _1466 = _1306;
        _1467 = _1321;
        _1468 = _1320;
        _1469 = _1319;
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
    }
    else
    {
        _1457 = _1458;
        _1459 = _1458;
        _1460 = _1458;
        _1461 = _1458;
        _1462 = _1458;
        _1463 = _1458;
        _1464 = _1458;
        _1465 = _1458;
        _1466 = _1458;
        _1467 = _1458;
        _1468 = _1458;
        _1469 = _1458;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1500 = fma(_1128, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120));
        float _1504 = fma(_1128, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120));
        float _1508 = fma(_1128, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120));
        float _1531 = _1120 + _879;
        float _1532 = _1124 + _880;
        float _1533 = _1128 + _881;
        float _1543 = fma(_1533, cbModelParam._m0[30u].z, fma(_1532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1531)) - _1500;
        float _1544 = fma(_1533, cbModelParam._m0[31u].z, fma(_1532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1531)) - _1504;
        float _1545 = fma(_1533, cbModelParam._m0[32u].z, fma(_1532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1531)) - _1508;
        float _1549 = inversesqrt(dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545)));
        float _1562 = ((_1549 * _1543) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1500 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1549 * _1544) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1504 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1564 = ((_1549 * _1545) / cbModelParam._m0[35u].z) + ((((((_1508 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        float _1599 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1566.x + (-0.5));
        float _1601 = _1599 * (_1566.y + (-0.5));
        float _1602 = _1599 * (_1566.z + (-0.5));
        float _1609 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1573.x + (-0.5));
        float _1611 = _1609 * (_1573.y + (-0.5));
        float _1612 = _1609 * (_1573.z + (-0.5));
        float _1619 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1580.x + (-0.5));
        float _1621 = _1619 * (_1580.y + (-0.5));
        float _1622 = _1619 * (_1580.z + (-0.5));
        float _1629 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1587.x + (-0.5));
        float _1631 = _1629 * (_1587.y + (-0.5));
        float _1632 = _1629 * (_1587.z + (-0.5));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = _1600 * 0.5;
        float _1637 = _1610 * 0.5;
        float _1638 = _1620 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_879, _880, _881), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4281 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1663 + 1.0))) + _1668) * _1633;
        float _1678 = _1601 * 0.5;
        float _1679 = _1611 * 0.5;
        float _1680 = _1621 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_879, _880, _881), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4314 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1705 + 1.0))) + _1710) * _1634;
        float _1720 = _1602 * 0.5;
        float _1721 = _1612 * 0.5;
        float _1722 = _1622 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_879, _880, _881), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4347 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1747 + 1.0))) + _1752) * _1635;
        _1769 = _1602;
        _1770 = _1601;
        _1771 = _1600;
        _1772 = _1612;
        _1773 = _1611;
        _1774 = _1610;
        _1775 = _1622;
        _1776 = _1621;
        _1777 = _1620;
        _1778 = _1635;
        _1779 = _1634;
        _1780 = _1633;
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
    }
    else
    {
        _1769 = _1458;
        _1770 = _1458;
        _1771 = _1458;
        _1772 = _1458;
        _1773 = _1458;
        _1774 = _1458;
        _1775 = _1458;
        _1776 = _1458;
        _1777 = _1458;
        _1778 = _1458;
        _1779 = _1458;
        _1780 = _1458;
        _1781 = 0.0;
        _1782 = 0.0;
        _1783 = 0.0;
    }
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1470)) + _1470;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1471)) + _1471;
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1472)) + _1472;
    float _1816 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1793));
    float _1837 = _1064 * 0.5;
    float _1838 = _1065 * 0.5;
    float _1839 = _1066 * 0.5;
    float _1840 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1843 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1846 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1880;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1853 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1457, _1461, _1464, _1467));
        float _1857 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1459, _1462, _1465, _1468));
        float _1861 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1460, _1463, _1466, _1469));
        float _1868 = dot(vec4(cbModelParam._m0[39u]), vec4(_1837, _1838, _1839, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1868) ? 0.0 : (isnan(0.0) ? _1868 : max(0.0, _1868))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1891;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1882 = dot(vec4(cbModelParam._m0[40u]), vec4(_1837, _1838, _1839, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1895 = (_1891 * cbModelParam._m0[1u].x) + (_1880 * (1.0 - cbModelParam._m0[1u].x));
    float _1905 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _882);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1905 : min(cbModelParam._m0[25u].z, _1905));
    float _1987;
    float _1989;
    float _1991;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1954 = fma(_1128, cbModelParam._m0[13u].z, fma(_1124, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120)) + cbModelParam._m0[13u].w;
        float _1958 = fma(_1128, cbModelParam._m0[14u].z, fma(_1124, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120)) + cbModelParam._m0[14u].w;
        float _1962 = fma(_1128, cbModelParam._m0[15u].z, fma(_1124, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120)) + cbModelParam._m0[15u].w;
        float _1965 = fma(_1066, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1064));
        float _1968 = fma(_1066, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1064));
        float _1971 = fma(_1066, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1064));
        float _1999;
        if (_1965 > 0.0)
        {
            _1999 = abs((1.0 - _1954) / _1965);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1954 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1999 = frontier_phi_17_15_ladder;
        }
        float _2223;
        if (_1968 > 0.0)
        {
            _2223 = abs((1.0 - _1958) / _1968);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1958 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2223 = frontier_phi_26_22_ladder;
        }
        float _2480;
        if (_1971 > 0.0)
        {
            _2480 = abs((1.0 - _1962) / _1971);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1962 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2480 = frontier_phi_38_33_ladder;
        }
        float _2482 = isnan(_2223) ? _1999 : (isnan(_1999) ? _2223 : min(_1999, _2223));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1965) + _1954;
        float _2488 = (_2483 * _1968) + _1958;
        float _2489 = (_2483 * _1971) + _1962;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2492 = (-1.0) - _2490;
        float _2494 = _2490 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2489 > _2494) || ((_2489 < _2492) || ((_2488 > _2494) || ((_2488 < _2492) || ((_2487 < _2492) || (_2487 > _2494))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2489, cbModelParam._m0[9u].z, fma(_2488, cbModelParam._m0[9u].y, _2487 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2489, cbModelParam._m0[10u].z, fma(_2488, cbModelParam._m0[10u].y, _2487 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2489, cbModelParam._m0[11u].z, fma(_2488, cbModelParam._m0[11u].y, _2487 * cbModelParam._m0[11u].x))), _1906);
            frontier_phi_16_38_ladder = _2617.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2617.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2617.x * cbModelParam._m0[1u].y;
        }
        _1987 = frontier_phi_16_38_ladder_2;
        _1989 = frontier_phi_16_38_ladder_1;
        _1991 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1975 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1064, _1065, _1066), _1906);
        _1987 = _1975.x * cbModelParam._m0[1u].y;
        _1989 = _1975.y * cbModelParam._m0[1u].y;
        _1991 = _1975.z * cbModelParam._m0[1u].y;
    }
    float _1995 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _882);
    float _1996 = isnan(_1995) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1995 : min(cbModelParam._m0[25u].w, _1995));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2050 = fma(_1128, cbModelParam._m0[21u].z, fma(_1124, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120)) + cbModelParam._m0[21u].w;
        float _2054 = fma(_1128, cbModelParam._m0[22u].z, fma(_1124, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120)) + cbModelParam._m0[22u].w;
        float _2058 = fma(_1128, cbModelParam._m0[23u].z, fma(_1124, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120)) + cbModelParam._m0[23u].w;
        float _2061 = fma(_1066, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1064));
        float _2064 = fma(_1066, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1064));
        float _2067 = fma(_1066, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1064));
        float _2228;
        if (_2061 > 0.0)
        {
            _2228 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2228 = frontier_phi_28_24_ladder;
        }
        float _2507;
        if (_2064 > 0.0)
        {
            _2507 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2507 = frontier_phi_40_35_ladder;
        }
        float _2720;
        if (_2067 > 0.0)
        {
            _2720 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2720 = frontier_phi_49_46_ladder;
        }
        float _2722 = isnan(_2507) ? _2228 : (isnan(_2228) ? _2507 : min(_2228, _2507));
        float _2723 = isnan(_2720) ? _2722 : (isnan(_2722) ? _2720 : min(_2722, _2720));
        float _2727 = (_2723 * _2061) + _2050;
        float _2728 = (_2723 * _2064) + _2054;
        float _2729 = (_2723 * _2067) + _2058;
        float _2730 = _2723 * 9.9999997473787516355514526367188e-05;
        float _2731 = (-1.0) - _2730;
        float _2733 = _2730 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2729 > _2733) || ((_2729 < _2731) || ((_2728 > _2733) || ((_2728 < _2731) || ((_2727 < _2731) || (_2727 > _2733))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2729, cbModelParam._m0[17u].z, fma(_2728, cbModelParam._m0[17u].y, _2727 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2729, cbModelParam._m0[18u].z, fma(_2728, cbModelParam._m0[18u].y, _2727 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2729, cbModelParam._m0[19u].z, fma(_2728, cbModelParam._m0[19u].y, _2727 * cbModelParam._m0[19u].x))), _1996);
            frontier_phi_25_49_ladder = _2928.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2928.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2928.x * cbModelParam._m0[1u].z;
        }
        _2086 = frontier_phi_25_49_ladder_2;
        _2088 = frontier_phi_25_49_ladder_1;
        _2090 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1064, _1065, _1066), _1996);
        _2086 = _2070.x * cbModelParam._m0[1u].z;
        _2088 = _2070.y * cbModelParam._m0[1u].z;
        _2090 = _2070.z * cbModelParam._m0[1u].z;
    }
    float _2103 = (((_1091 * _1040) + _1092) * _1056) * ((cbModelParam._m0[1u].w * (_2086 - _1987)) + _1987);
    float _2105 = (((_1091 * _1042) + _1092) * _1056) * ((cbModelParam._m0[1u].w * (_2088 - _1989)) + _1989);
    float _2107 = (((_1091 * _1043) + _1092) * _1056) * ((cbModelParam._m0[1u].w * (_2090 - _1991)) + _1991);
    float _2110 = fma(_2107, cbSceneParam._m0[89u].z, fma(_2105, cbSceneParam._m0[89u].y, _2103 * cbSceneParam._m0[89u].x));
    float _2113 = fma(_2107, cbSceneParam._m0[90u].z, fma(_2105, cbSceneParam._m0[90u].y, _2103 * cbSceneParam._m0[90u].x));
    float _2116 = fma(_2107, cbSceneParam._m0[91u].z, fma(_2105, cbSceneParam._m0[91u].y, _2103 * cbSceneParam._m0[91u].x));
    vec4 _2124 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_978, _979));
    float _2126 = _2124.w;
    float _2138 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2126);
    float _2139 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2126);
    float _2140 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2126);
    uvec4 _2144 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2146 = _2144.x * 14u;
    uint _2147 = _2146 + 13u;
    float _2154 = _1056 + (-1.0);
    float _2159 = (cbLight._m0[_2147].x * _2154) + 1.0;
    float _2160 = (cbLight._m0[_2147].y * _2154) + 1.0;
    float _2161 = (cbLight._m0[_2147].z * _2154) + 1.0;
    float _2162 = (cbLight._m0[_2147].w * _2154) + 1.0;
    uint _2163 = _2146 + 5u;
    float _2169 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
    uint _2173 = _2146 + 4u;
    float _2182 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
    uint _2186 = _2146 | 1u;
    float _2197 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_879, _880, _881));
    float _2200 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_879, _880, _881));
    float _4483 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _4494 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2205 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * 0.3183098733425140380859375;
    float _2207 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * 0.3183098733425140380859375;
    float _2214 = ((cbLight._m0[_2163].x * _2169) * _2207) + (((cbLight._m0[_2173].x * _2138) * _2182) * _2205);
    float _2215 = ((_2169 * cbLight._m0[_2163].y) * _2207) + (((cbLight._m0[_2173].y * _2139) * _2182) * _2205);
    float _2216 = ((_2169 * cbLight._m0[_2163].z) * _2207) + (((cbLight._m0[_2173].z * _2140) * _2182) * _2205);
    uvec4 _2220 = floatBitsToUint(cbLight._m0[_2146 + 12u]);
    bool _2222 = _2220.x == 0u;
    float _2233;
    float _2235;
    float _2237;
    if (_2222)
    {
        _2233 = _2214;
        _2235 = _2215;
        _2237 = _2216;
    }
    else
    {
        uint _2241 = _2146 + 6u;
        float _2257 = (dot(vec3(cbLight._m0[_2146 + 2u].xyz), vec3(_879, _880, _881)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4505 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2260 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2233 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2214;
        _2235 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2215;
        _2237 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2216;
    }
    bool _2240 = _2220.y == 0u;
    float _2278;
    float _2280;
    float _2282;
    if (_2240)
    {
        _2278 = _2233;
        _2280 = _2235;
        _2282 = _2237;
    }
    else
    {
        uint _2451 = _2146 + 7u;
        float _2467 = (dot(vec3(cbLight._m0[_2146 + 3u].xyz), vec3(_879, _880, _881)) * 0.5) + 0.5;
        float _2468 = _2467 * _2467;
        float _4521 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2469 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2470 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2278 = (((cbLight._m0[_2451].x * 0.3183098733425140380859375) * _2469) * _2470) + _2233;
        _2280 = (((cbLight._m0[_2451].y * 0.3183098733425140380859375) * _2469) * _2470) + _2235;
        _2282 = (((cbLight._m0[_2451].z * 0.3183098733425140380859375) * _2469) * _2470) + _2237;
    }
    uint _2285 = _2146 + 8u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _882) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_2146].x + _958;
    float _2301 = cbLight._m0[_2146].y + _959;
    float _2302 = cbLight._m0[_2146].z + _960;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2146].xyz));
    float _4537 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _4548 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _2314 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2315 = dot(vec3(_879, _880, _881), vec3(_2307, _2308, _2309));
    float _4559 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2319 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2307, _2308, _2309));
    float _4570 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2323 = _2299 * _2299;
    float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
    float _2335 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
    float _2336 = 0.959999978542327880859375 - _1037;
    float _2338 = 0.959999978542327880859375 - _1038;
    float _2339 = 0.959999978542327880859375 - _1039;
    float _2346 = 1.0 - _2299;
    float _2357 = (0.5 / (((_2314 * ((_2313 * _2346) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2346) + _2299) * _2313))) * _2313;
    float _4581 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2359 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
    uint _2373 = _2146 + 9u;
    float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _882) * 0.949999988079071044921875);
    float _2385 = _2384 * _2384;
    float _2386 = cbLight._m0[_2186].x + _958;
    float _2387 = cbLight._m0[_2186].y + _959;
    float _2388 = cbLight._m0[_2186].z + _960;
    float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
    float _2393 = _2392 * _2386;
    float _2394 = _2392 * _2387;
    float _2395 = _2392 * _2388;
    float _2396 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2186].xyz));
    float _4592 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2400 = dot(vec3(_879, _880, _881), vec3(_2393, _2394, _2395));
    float _4603 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2404 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2393, _2394, _2395));
    float _4614 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2408 = _2385 * _2385;
    float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
    float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
    float _2426 = 1.0 - _2385;
    float _2436 = (0.5 / (((_2314 * ((_2399 * _2426) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2426) + _2385) * _2399))) * _2399;
    float _4625 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2438 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
    float _2448 = (((((_2419 * _2336) + _1040) * cbLight._m0[_2373].x) * _2438) * _2169) + ((((cbLight._m0[_2285].x * _2138) * ((_2335 * _2336) + _1040)) * _2359) * _2182);
    float _2449 = (((((_2419 * _2338) + _1042) * cbLight._m0[_2373].y) * _2438) * _2169) + ((((cbLight._m0[_2285].y * _2139) * ((_2335 * _2338) + _1042)) * _2359) * _2182);
    float _2450 = (((((_2419 * _2339) + _1043) * cbLight._m0[_2373].z) * _2438) * _2169) + ((((cbLight._m0[_2285].z * _2140) * ((_2335 * _2339) + _1043)) * _2359) * _2182);
    float _2512;
    float _2514;
    float _2516;
    if (_2222)
    {
        _2512 = _2448;
        _2514 = _2449;
        _2516 = _2450;
    }
    else
    {
        uint _2518 = _2146 + 2u;
        uint _2522 = _2146 + 10u;
        float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _882) * 0.949999988079071044921875);
        float _2537 = _2536 * _2536;
        float _2538 = cbLight._m0[_2518].x + _958;
        float _2539 = cbLight._m0[_2518].y + _959;
        float _2540 = cbLight._m0[_2518].z + _960;
        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
        float _2545 = _2544 * _2538;
        float _2546 = _2544 * _2539;
        float _2547 = _2544 * _2540;
        float _2548 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2518].xyz));
        float _4636 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2552 = dot(vec3(_879, _880, _881), vec3(_2545, _2546, _2547));
        float _4647 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2556 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2545, _2546, _2547));
        float _4658 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2560 = _2537 * _2537;
        float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
        float _2571 = exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0);
        float _2578 = 1.0 - _2537;
        float _2588 = (0.5 / (((_2314 * ((_2551 * _2578) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2578) + _2537) * _2551))) * _2551;
        float _4669 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2590 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
        float _2591 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2512 = (((((_2571 * _2336) + _1040) * cbLight._m0[_2522].x) * _2590) * _2591) + _2448;
        _2514 = (((((_2571 * _2338) + _1042) * cbLight._m0[_2522].y) * _2590) * _2591) + _2449;
        _2516 = (((((_2571 * _2339) + _1043) * cbLight._m0[_2522].z) * _2590) * _2591) + _2450;
    }
    float _2626;
    float _2628;
    float _2630;
    if (_2240)
    {
        _2626 = _2512;
        _2628 = _2514;
        _2630 = _2516;
    }
    else
    {
        uint _2637 = _2146 + 3u;
        uint _2641 = _2146 + 11u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _882) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _958;
        float _2658 = cbLight._m0[_2637].y + _959;
        float _2659 = cbLight._m0[_2637].z + _960;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2637].xyz));
        float _4685 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2671 = dot(vec3(_879, _880, _881), vec3(_2664, _2665, _2666));
        float _4696 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4707 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2314 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2697) + _2656) * _2670))) * _2670;
        float _4718 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2626 = (((((_2690 * _2336) + _1040) * cbLight._m0[_2641].x) * _2709) * _2710) + _2512;
        _2628 = (((((_2690 * _2338) + _1042) * cbLight._m0[_2641].y) * _2709) * _2710) + _2514;
        _2630 = (((((_2690 * _2339) + _1043) * cbLight._m0[_2641].z) * _2709) * _2710) + _2516;
    }
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    if (_2144.y == 0u)
    {
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2785;
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2785;
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2785;
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.x;
        uint _2812 = uint((float(_2800.y) * floor(float(uint(cbSceneParam._m0[85u].y * _979) / _2801))) + floor(float(uint(cbSceneParam._m0[85u].x * _978) / _2801)));
        float _2822 = (log2(_2788 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2823 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        uint _2826 = uint(isnan(14.0) ? _2823 : (isnan(_2823) ? 14.0 : min(_2823, 14.0)));
        uvec4 _2831 = texelFetch(g_lightClusterGridBuffer, int(((_2826 << 2u) + (_2812 << 6u)) >> 2u));
        uint _2832 = _2831.x;
        uint _2833 = _2800.z;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        if (((((1u << ((_2833 >> 4u) & 15u)) + 4294967295u) & _2832) == 0u) || ((_2833 & 240u) == 0u))
        {
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
        }
        else
        {
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            uint _3091 = 0u;
            uint _3100;
            bool _3101;
            for (;;)
            {
                _3100 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3091 << 2u)) >> 2u)).x;
                _3101 = _3100 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3101)
                {
                    frontier_phi_66_pred = _3085;
                    frontier_phi_66_pred_1 = _3090;
                    frontier_phi_66_pred_2 = _3089;
                    frontier_phi_66_pred_3 = _3088;
                    frontier_phi_66_pred_4 = _3087;
                    frontier_phi_66_pred_5 = _3086;
                }
                else
                {
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    uint _3236;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3100;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    for (;;)
                    {
                        uint _3240 = uint(findLSB(_3236)) + (_3091 << 5u);
                        uint _3237 = (_3236 + 4294967295u) & _3236;
                        uint _3242 = _3240 * 48u;
                        vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 3u)).x));
                        uint _3262 = (_3240 * 48u) + 4u;
                        vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 3u)).x));
                        uint _3281 = (_3240 * 48u) + 8u;
                        vec3 _3292 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3281)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 2u)).x));
                        float _3296 = _3256.x - _2786;
                        float _3297 = _3256.y - _2787;
                        float _3298 = _3256.z - _2788;
                        float _3299 = dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298));
                        float _3302 = inversesqrt(_3299);
                        float _3303 = _3302 * _3296;
                        float _3304 = _3302 * _3297;
                        float _3305 = _3302 * _3298;
                        float _3306 = dot(vec3(_997, _1000, _1003), vec3(_3303, _3304, _3305));
                        float _3311 = 1.0 - (_3299 * _3256.w);
                        float _4744 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3312 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3313 = sqrt(_3299) * _3275.w;
                        float _3316 = 1.39999997615814208984375 / (_3313 + 1.39999997615814208984375);
                        float _3317 = _3316 * _3316;
                        float _3320 = ((1.0 - _3317) * _3306) + _3317;
                        float _3323 = _3313 * _3313;
                        float _3327 = ((isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0))) * _3312) / ((_3323 * 0.699999988079071044921875) + 1.0);
                        float _3331 = (-0.0) - _2786;
                        float _3332 = (-0.0) - _2787;
                        float _3333 = (-0.0) - _2788;
                        float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                        float _3338 = _3337 * _3331;
                        float _3339 = _3337 * _3332;
                        float _3340 = _3337 * _3333;
                        float _3348 = exp2(log2(1.0 / ((_3323 * 3.5) + 5.0)) * 0.25);
                        float _3349 = 1.0 - _1072;
                        float _3356 = sqrt(1.0 - ((1.0 - (_3349 * _3349)) * (1.0 - (_3348 * _3348))));
                        float _3357 = _3356 * _3356;
                        float _3358 = _3357 * _3357;
                        float _3359 = _3338 + _3303;
                        float _3360 = _3339 + _3304;
                        float _3361 = _3340 + _3305;
                        float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                        float _3369 = dot(vec3(_997, _1000, _1003), vec3(_3338, _3339, _3340));
                        float _4760 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3373 = dot(vec3(_997, _1000, _1003), vec3(_3365 * _3359, _3365 * _3360, _3365 * _3361));
                        float _4771 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3376 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3380 = ((_3376 * _3376) * (_3358 + (-1.0))) + 1.0;
                        float _3381 = _3316 * _3357;
                        float _3382 = _3381 * _3381;
                        float _3385 = ((1.0 - _3382) * _3306) + _3382;
                        float _4782 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3386 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3387 = 1.0 - _3357;
                        float _3397 = (0.5 / (((_3386 * ((_3372 * _3387) + _3357)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3357) * _3372))) * _3386;
                        float _4793 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3408 = (((_3358 * 3.1415927410125732421875) * (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) / ((_3380 * _3380) * ((_3323 * 2.1991131305694580078125) + 3.141590118408203125))) * _3312;
                        _3160 = (_3327 * _3275.x) + _3233;
                        _3161 = (_3327 * _3275.y) + _3234;
                        _3162 = (_3327 * _3275.z) + _3235;
                        _3157 = (_3408 * _3292.x) + _3230;
                        _3158 = (_3408 * _3292.y) + _3231;
                        _3159 = (_3408 * _3292.z) + _3232;
                        if (_3237 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3237;
                        }
                    }
                    frontier_phi_66_pred = _3157;
                    frontier_phi_66_pred_1 = _3162;
                    frontier_phi_66_pred_2 = _3161;
                    frontier_phi_66_pred_3 = _3160;
                    frontier_phi_66_pred_4 = _3159;
                    frontier_phi_66_pred_5 = _3158;
                }
                _2934 = frontier_phi_66_pred;
                _2944 = frontier_phi_66_pred_1;
                _2942 = frontier_phi_66_pred_2;
                _2940 = frontier_phi_66_pred_3;
                _2938 = frontier_phi_66_pred_4;
                _2936 = frontier_phi_66_pred_5;
                uint _3092 = _3091 + 1u;
                if (_3092 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3085 = _2934;
                    _3086 = _2936;
                    _3087 = _2938;
                    _3088 = _2940;
                    _3089 = _2942;
                    _3090 = _2944;
                    _3091 = _3092;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
        }
        uvec4 _2947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2948 = _2947.z;
        uint _2950 = (_2948 >> 8u) & 15u;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        if (((4294967295u << _2950) & _2832) == 0u)
        {
            _3053 = _2933;
            _3055 = _2935;
            _3057 = _2937;
            _3059 = _2939;
            _3061 = _2941;
            _3063 = _2943;
        }
        else
        {
            float _3078 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
            float _3079 = _3078 * _2786;
            float _3080 = _3078 * _2787;
            float _3081 = _3078 * _2788;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2950 < ((_2948 >> 12u) & 15u))
            {
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3064;
                float _3213 = _2933;
                float _3214 = _2935;
                float _3215 = _2937;
                float _3216 = _2939;
                float _3217 = _2941;
                float _3218 = _2943;
                uint _3219 = _2950;
                uint _3228;
                bool _3229;
                for (;;)
                {
                    _3228 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3219 << 2u)) >> 2u)).x;
                    _3229 = _3228 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3229)
                    {
                        frontier_phi_77_pred = _3218;
                        frontier_phi_77_pred_1 = _3217;
                        frontier_phi_77_pred_2 = _3216;
                        frontier_phi_77_pred_3 = _3215;
                        frontier_phi_77_pred_4 = _3214;
                        frontier_phi_77_pred_5 = _3213;
                    }
                    else
                    {
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        float _3438 = _3216;
                        float _3439 = _3217;
                        float _3440 = _3218;
                        uint _3441 = _3228;
                        uint _3442;
                        vec4 _3467;
                        float _3468;
                        vec4 _3483;
                        vec3 _3495;
                        vec4 _3510;
                        vec4 _3525;
                        float _3571;
                        bool _3572;
                        for (;;)
                        {
                            uint _3452 = ((_3219 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3441));
                            _3442 = (_3441 + 4294967295u) & _3441;
                            uint _3454 = _3452 * 40u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            _3468 = _3467.w;
                            uint _3470 = (_3452 * 40u) + 4u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3485 = (_3452 * 40u) + 8u;
                            _3495 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x));
                            uint _3497 = (_3452 * 40u) + 16u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3452 * 40u) + 20u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3527 = (_3452 * 40u) + 24u;
                            vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3546 = (_3452 * 40u) + 28u;
                            vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            _3571 = fma(_2788, _3559.z, fma(_2787, _3559.y, _3559.x * _2786)) + _3559.w;
                            _3572 = !((fma(_2788, _3540.z, fma(_2787, _3540.y, _3540.x * _2786)) + _3540.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3572)
                            {
                                float _3599 = _3467.x - _2786;
                                float _3600 = _3467.y - _2787;
                                float _3601 = _3467.z - _2788;
                                float _3602 = dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601));
                                float _3605 = inversesqrt(_3602);
                                float _3606 = _3605 * _3599;
                                float _3607 = _3605 * _3600;
                                float _3608 = _3605 * _3601;
                                float _3612 = 1.0 - (_3602 / (_3468 * _3468));
                                float _4804 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3617 = sqrt(_3602) * _3483.w;
                                float _3619 = 1.39999997615814208984375 / (_3617 + 1.39999997615814208984375);
                                float _3620 = _3619 * _3619;
                                float _3623 = ((1.0 - _3620) * dot(vec3(_3606, _3607, _3608), vec3(_997, _1000, _1003))) + _3620;
                                float _3626 = _3617 * _3617;
                                float _3630 = (fma(_2788, _3510.z, fma(_2787, _3510.y, _3510.x * _2786)) + _3510.w) / _3571;
                                float _3631 = (fma(_2788, _3525.z, fma(_2787, _3525.y, _3525.x * _2786)) + _3525.w) / _3571;
                                float _3635 = 1.0 - dot(vec2(_3630, _3631), vec2(_3630, _3631));
                                float _4820 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3637 = _3636 * (((isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0))) * _3613) / ((_3626 * 0.699999988079071044921875) + 1.0));
                                float _3649 = exp2(log2(1.0 / ((_3626 * 3.5) + 5.0)) * 0.25);
                                float _3650 = 1.0 - _1072;
                                float _3657 = sqrt(1.0 - ((1.0 - (_3650 * _3650)) * (1.0 - (_3649 * _3649))));
                                float _3658 = _3657 * _3657;
                                float _3659 = _3658 * _3658;
                                float _3660 = _3606 - _3079;
                                float _3661 = _3607 - _3080;
                                float _3662 = _3608 - _3081;
                                float _3666 = inversesqrt(dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662)));
                                float _3670 = dot(vec3(_997, _1000, _1003), vec3((-0.0) - _3079, (-0.0) - _3080, (-0.0) - _3081));
                                float _4831 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3673 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3674 = dot(vec3(_997, _1000, _1003), vec3(_3666 * _3660, _3666 * _3661, _3666 * _3662));
                                float _4842 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3677 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3681 = ((_3677 * _3677) * (_3659 + (-1.0))) + 1.0;
                                float _3682 = _3619 * _3658;
                                float _3683 = _3682 * _3682;
                                float _3689 = ((1.0 - _3683) * dot(vec3(_997, _1000, _1003), vec3(_3606, _3607, _3608))) + _3683;
                                float _4853 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3691 = 1.0 - _3658;
                                float _3701 = (0.5 / (((_3690 * ((_3673 * _3691) + _3658)) + 9.9999999392252902907785028219223e-09) + (((_3690 * _3691) + _3658) * _3673))) * _3690;
                                float _4864 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3711 = (_3636 * _3613) * (((_3659 * 3.1415927410125732421875) * (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0)))) / ((_3681 * _3681) * ((_3626 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3637 * _3483.y;
                                frontier_phi_83_pred_1 = _3637 * _3483.x;
                                frontier_phi_83_pred_2 = _3711 * _3495.z;
                                frontier_phi_83_pred_3 = _3711 * _3495.y;
                                frontier_phi_83_pred_4 = _3711 * _3495.x;
                                frontier_phi_83_pred_5 = _3637 * _3483.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3719 = frontier_phi_83_pred;
                            _3718 = frontier_phi_83_pred_1;
                            _3717 = frontier_phi_83_pred_2;
                            _3716 = frontier_phi_83_pred_3;
                            _3715 = frontier_phi_83_pred_4;
                            _3720 = frontier_phi_83_pred_5;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            if (_3442 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3442;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3427;
                        frontier_phi_77_pred_1 = _3426;
                        frontier_phi_77_pred_2 = _3425;
                        frontier_phi_77_pred_3 = _3424;
                        frontier_phi_77_pred_4 = _3423;
                        frontier_phi_77_pred_5 = _3422;
                    }
                    _3064 = frontier_phi_77_pred;
                    _3062 = frontier_phi_77_pred_1;
                    _3060 = frontier_phi_77_pred_2;
                    _3058 = frontier_phi_77_pred_3;
                    _3056 = frontier_phi_77_pred_4;
                    _3054 = frontier_phi_77_pred_5;
                    uint _3220 = _3219 + 1u;
                    if (_3220 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3213 = _3054;
                        _3214 = _3056;
                        _3215 = _3058;
                        _3216 = _3060;
                        _3217 = _3062;
                        _3218 = _3064;
                        _3219 = _3220;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3058;
                frontier_phi_58_59_ladder_1 = _3064;
                frontier_phi_58_59_ladder_2 = _3062;
                frontier_phi_58_59_ladder_3 = _3060;
                frontier_phi_58_59_ladder_4 = _3056;
                frontier_phi_58_59_ladder_5 = _3054;
            }
            else
            {
                frontier_phi_58_59_ladder = _2937;
                frontier_phi_58_59_ladder_1 = _2943;
                frontier_phi_58_59_ladder_2 = _2941;
                frontier_phi_58_59_ladder_3 = _2939;
                frontier_phi_58_59_ladder_4 = _2935;
                frontier_phi_58_59_ladder_5 = _2933;
            }
            _3053 = frontier_phi_58_59_ladder_5;
            _3055 = frontier_phi_58_59_ladder_4;
            _3057 = frontier_phi_58_59_ladder;
            _3059 = frontier_phi_58_59_ladder_3;
            _3061 = frontier_phi_58_59_ladder_2;
            _3063 = frontier_phi_58_59_ladder_1;
        }
        float _3068 = isnan(1.0) ? _1056 : (isnan(_1056) ? 1.0 : min(_1056, 1.0));
        _2845 = (_3068 * _3059) + _2278;
        _2847 = (_3068 * _3061) + _2280;
        _2849 = (_3068 * _3063) + _2282;
        _2851 = ((_3053 * _1040) * _3068) + _2626;
        _2853 = ((_3055 * _1042) * _3068) + _2628;
        _2855 = ((_3057 * _1043) * _3068) + _2630;
    }
    else
    {
        _2845 = _2278;
        _2847 = _2280;
        _2849 = _2282;
        _2851 = _2626;
        _2853 = _2628;
        _2855 = _2630;
    }
    float _4880 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _4891 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _4902 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _2872 = ((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2845 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1056))) + ((_2851 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    float _2873 = ((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2847 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1056))) + ((_2853 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    float _2874 = ((isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2849 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1056))) + ((_2855 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    uint _2875 = _283 + 6u;
    float _2883 = _978 / cbSceneParam._m0[86u].x;
    float _2884 = _979 / cbSceneParam._m0[86u].y;
    vec4 _2898 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, (log2((isnan(cbSceneParam._m0[77u].w) ? _901 : (isnan(_901) ? cbSceneParam._m0[77u].w : min(_901, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2900 = _2898.x;
    float _2901 = _2898.y;
    float _2902 = _2898.z;
    float _2903 = _2898.w;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    if (_901 > cbSceneParam._m0[78u].w)
    {
        float _2958 = isnan(_901) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _901 : min(cbSceneParam._m0[80u].w, _901));
        float _2959 = _2958 / _901;
        float _2970 = _2959 * _951;
        float _2971 = _952 * _2959;
        float _2972 = (-0.0) - _2971;
        float _2973 = _2959 * _953;
        float _2975 = (cbSceneParam._m0[77u].w * _2972) / _2958;
        float _2976 = _2975 + cbSceneParam._m0[79u].w;
        float _2977 = cbSceneParam._m0[79u].w - _2971;
        float _2983 = sqrt(((_2970 * _2970) + (_2971 * _2971)) + (_2973 * _2973));
        float _2986 = (1.0 - (cbSceneParam._m0[77u].w / _2958)) * _2983;
        float _2991 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2993 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3170;
        if (abs((_2972 - _2975) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3170 = ((((_2976 > 0.0) ? exp2(_2991 * _2976) : (2.0 - exp2(_2993 * _2976))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2986;
        }
        else
        {
            float _3114 = 1.0 / cbSceneParam._m0[80u].x;
            float _3115 = isnan(_2977) ? _2976 : (isnan(_2976) ? _2977 : max(_2976, _2977));
            float _3116 = isnan(_2977) ? _2976 : (isnan(_2976) ? _2977 : min(_2976, _2977));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            float _3126 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : min(_3116, 0.0));
            _3170 = ((abs(_2983 / _2972) * cbSceneParam._m0[80u].y) * ((((_3125 - _3126) * 2.0) - ((exp2(_2991 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0)))) - exp2(_2991 * (isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))))) * _3114)) - ((exp2(_2993 * _3125) - exp2(_2993 * _3126)) * _3114))) + (_2986 * cbSceneParam._m0[80u].z);
        }
        vec4 _3172 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, 1.0), 0.0);
        float _3181 = exp2((_3170 * (-1.44269502162933349609375)) * (1.0 - _3172.w));
        float _3182 = log2(_3181);
        float _3198 = log2(_2903);
        _2995 = (exp2(_3198 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].x)) * _3172.x) / cbSceneParam._m0[78u].x)) + _2900;
        _2997 = (exp2(_3198 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].y)) * _3172.y) / cbSceneParam._m0[78u].y)) + _2901;
        _2999 = (exp2(_3198 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].z)) * _3172.z) / cbSceneParam._m0[78u].z)) + _2902;
        _3001 = _3181 * _2903;
    }
    else
    {
        _2995 = _2900;
        _2997 = _2901;
        _2999 = _2902;
        _3001 = _2903;
    }
    bool _3208;
    vec4 _3011;
    vec4 _3033;
    float _3035;
    float _3039;
    float _3040;
    float _3041;
    float _3042;
    bool _3052;
    for (;;)
    {
        _3011 = cbMatDynParam._m0[0u];
        float _3013 = roundEven(_3011.y);
        bool _3014 = _3013 == 3.0;
        float _3015 = log2(_3001);
        float _3022 = exp2(_3015 * cbSceneParam._m0[78u].x) * _2872;
        float _3023 = exp2(_3015 * cbSceneParam._m0[78u].y) * _2873;
        float _3024 = exp2(_3015 * cbSceneParam._m0[78u].z) * _2874;
        float _3031 = _967 + (-0.5);
        _3033 = cbMtdParam._m0[1u];
        _3035 = _3033.y * _3031;
        float _3038 = (_3013 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3039 = _3038 * (_3014 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2995)));
        _3040 = _3038 * (_3014 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2997)));
        _3041 = _3038 * (_3014 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2999)));
        _3042 = _3031 * 0.999000012874603271484375;
        _3052 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3052)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3042) < 0.5)
            {
                _3208 = true;
                break;
            }
        }
        uint _3149 = _1016 + uint(_3011.w);
        if ((cbInstanceData._m0[_3149].w < 1.0) && ((cbInstanceData._m0[_3149].w + _3042) < 0.5))
        {
            _3208 = true;
            break;
        }
        if ((_3035 + 1.0) < _3033.x)
        {
            _3208 = true;
            break;
        }
        _3208 = false;
        break;
    }
    float _3413;
    if (_3208)
    {
        discard_state = true;
        _3413 = 0.0;
    }
    else
    {
        _3413 = cbInstanceData._m0[_2875].w;
    }
    SV_Target.x = _3039;
    SV_Target.y = _3040;
    SV_Target.z = _3041;
    SV_Target.w = _3413;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2875].w;
    discard_exit();
}


