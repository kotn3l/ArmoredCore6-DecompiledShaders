#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1218;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _353 = _351.x;
    float _365 = dot(vec4(_353, _351.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _382 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_353 - _365) * cbMtdParam._m0[24u].y) + _365) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3569 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _390 = (_383 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _391 = (_383 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _392 = (_383 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _441 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _455 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_431 - _441) * cbMtdParam._m0[24u].y) + _441) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3580 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _463 = (_456 * ((_409.x * cbMtdParam._m0[13u].x) - _390)) + _390;
    float _464 = (_456 * ((_409.y * cbMtdParam._m0[13u].y) - _391)) + _391;
    float _465 = (_456 * ((_409.z * cbMtdParam._m0[13u].z) - _392)) + _392;
    vec4 _477 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _519 = _517.x;
    float _520 = _517.y;
    float _521 = _517.z;
    float _528 = ((_500.x - _519) * _383) + _519;
    float _529 = ((_500.y - _520) * _383) + _520;
    float _530 = ((_500.z - _521) * _383) + _521;
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _555 = ((_542.z - _530) * _456) + _530;
    float _558 = ((((_542.x - _528) * _456) + _528) * 2.0) + (-1.0);
    float _559 = ((((_542.y - _529) * _456) + _529) * 2.0) + (-1.0);
    float _560 = dot(vec2(_558, _559), vec2(_558, _559));
    float _3591 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = sqrt(1.0 - (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))));
    float _570 = _558 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_477.x * 2.0) + (-1.0)));
    float _571 = _559 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_477.y * 2.0) + (-1.0)));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _598 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _612 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _614 = _612.x;
    float _632 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _614) * _383) + _614;
    float _650 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _264) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _265) + cbTextureTilingScale._m0[21u].w)).x - _632) * _456) + _632;
    float _654 = ((_598.x - _650) * cbMtdParam._m0[19u].z) + _650;
    float _659 = (((_477.z - _555) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _555;
    float _664 = cbMtdParam._m0[22u].x + _584.w;
    float _667 = fma(_565, _231 * NORMAL.x, fma(_571, _238 * TANGENT.x, (_224 * _216) * _570));
    float _670 = fma(_565, _231 * NORMAL.y, fma(_571, _238 * TANGENT.y, (_224 * _217) * _570));
    float _673 = fma(_565, _231 * NORMAL.z, fma(_571, _238 * TANGENT.z, (_224 * _218) * _570));
    float _677 = inversesqrt(dot(vec3(_667, _670, _673), vec3(_667, _670, _673)));
    float _678 = _677 * _667;
    float _679 = _677 * _670;
    float _680 = _677 * _673;
    float _3602 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _681 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _3613 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3624 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3635 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3646 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3657 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _686 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _700 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _751 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _741);
    float _752 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _741);
    float _753 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _741);
    float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
    float _758 = _751 * _757;
    float _759 = _752 * _757;
    float _760 = _753 * _757;
    float _766 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _767 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _785 = fma(_680, cbSceneParam._m0[5u].z, fma(_679, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _678));
    float _788 = fma(_680, cbSceneParam._m0[6u].z, fma(_679, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _678));
    float _791 = fma(_680, cbSceneParam._m0[7u].z, fma(_679, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _678));
    uint _805 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _811 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_805].x;
    float _812 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) * cbInstanceData._m0[_805].y;
    float _813 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_805].z;
    float _3668 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _817 = 1.0 - _686;
    float _818 = _814 * _817;
    float _819 = _815 * _817;
    float _820 = _816 * _817;
    float _825 = (_814 + (-0.039999999105930328369140625)) * _686;
    float _826 = (_815 + (-0.039999999105930328369140625)) * _686;
    float _827 = (_816 + (-0.039999999105930328369140625)) * _686;
    float _828 = _825 + 0.039999999105930328369140625;
    float _830 = _826 + 0.039999999105930328369140625;
    float _831 = _827 + 0.039999999105930328369140625;
    vec4 _840 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _766, cbSceneParam._m0[86u].y * _767));
    float _844 = ((isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * TEXCOORD_5.w) * _840.x;
    float _845 = dot(vec3(_678, _679, _680), vec3(_758, _759, _760));
    float _848 = _845 * 2.0;
    float _852 = (_848 * _678) - _758;
    float _853 = (_848 * _679) - _759;
    float _854 = (_848 * _680) - _760;
    float _858 = abs(dot(vec3(_758, _759, _760), vec3(_678, _679, _680)));
    float _3701 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _860 = sqrt(_681);
    float _873 = exp2((_860 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_860 * 3.0));
    float _879 = (1.0 - _873) * ((_860 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _880 = _873 * _860;
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1217;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _942 = fma(_916, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908));
        float _946 = fma(_916, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908));
        float _950 = fma(_916, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908));
        float _975 = _908 + _678;
        float _976 = _912 + _679;
        float _977 = _916 + _680;
        float _987 = fma(_977, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975)) - _942;
        float _988 = fma(_977, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975)) - _946;
        float _989 = fma(_977, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975)) - _950;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_942 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_946 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[34u].z) + ((((((_950 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1045 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1011.x + (-0.5));
        float _1047 = _1045 * (_1011.y + (-0.5));
        float _1048 = _1045 * (_1011.z + (-0.5));
        float _1055 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1018.x + (-0.5));
        float _1057 = _1055 * (_1018.y + (-0.5));
        float _1058 = _1055 * (_1018.z + (-0.5));
        float _1065 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1025.x + (-0.5));
        float _1067 = _1065 * (_1025.y + (-0.5));
        float _1068 = _1065 * (_1025.z + (-0.5));
        float _1075 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1032.x + (-0.5));
        float _1077 = _1075 * (_1032.y + (-0.5));
        float _1078 = _1075 * (_1032.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1099 = (dot(vec3(_678, _679, _680), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1109 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3749 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1111 + 1.0))) + _1116) * _1079;
        float _1126 = _1047 * 0.5;
        float _1127 = _1057 * 0.5;
        float _1128 = _1067 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_678, _679, _680), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3782 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1153 + 1.0))) + _1158) * _1080;
        float _1168 = _1048 * 0.5;
        float _1169 = _1058 * 0.5;
        float _1170 = _1068 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_678, _679, _680), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3815 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1195 + 1.0))) + _1200) * _1081;
        _1217 = _1048;
        _1219 = _1047;
        _1220 = _1046;
        _1221 = _1058;
        _1222 = _1057;
        _1223 = _1056;
        _1224 = _1068;
        _1225 = _1067;
        _1226 = _1066;
        _1227 = _1081;
        _1228 = _1080;
        _1229 = _1079;
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _1218;
        _1219 = _1218;
        _1220 = _1218;
        _1221 = _1218;
        _1222 = _1218;
        _1223 = _1218;
        _1224 = _1218;
        _1225 = _1218;
        _1226 = _1218;
        _1227 = _1218;
        _1228 = _1218;
        _1229 = _1218;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1256 = fma(_916, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _908));
        float _1260 = fma(_916, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _908));
        float _1264 = fma(_916, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _908));
        float _1287 = _908 + _678;
        float _1288 = _912 + _679;
        float _1289 = _916 + _680;
        float _1299 = fma(_1289, cbModelParam._m0[30u].z, fma(_1288, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1287)) - _1256;
        float _1300 = fma(_1289, cbModelParam._m0[31u].z, fma(_1288, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1287)) - _1260;
        float _1301 = fma(_1289, cbModelParam._m0[32u].z, fma(_1288, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1287)) - _1264;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1256 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1260 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[35u].z) + ((((((_1264 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1355 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1322.x + (-0.5));
        float _1357 = _1355 * (_1322.y + (-0.5));
        float _1358 = _1355 * (_1322.z + (-0.5));
        float _1365 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1329.x + (-0.5));
        float _1367 = _1365 * (_1329.y + (-0.5));
        float _1368 = _1365 * (_1329.z + (-0.5));
        float _1375 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1336.x + (-0.5));
        float _1377 = _1375 * (_1336.y + (-0.5));
        float _1378 = _1375 * (_1336.z + (-0.5));
        float _1385 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1343.x + (-0.5));
        float _1387 = _1385 * (_1343.y + (-0.5));
        float _1388 = _1385 * (_1343.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_678, _679, _680), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3878 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1419 + 1.0))) + _1424) * _1389;
        float _1434 = _1357 * 0.5;
        float _1435 = _1367 * 0.5;
        float _1436 = _1377 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_678, _679, _680), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3911 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1461 + 1.0))) + _1466) * _1390;
        float _1476 = _1358 * 0.5;
        float _1477 = _1368 * 0.5;
        float _1478 = _1378 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_678, _679, _680), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _3944 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1503 + 1.0))) + _1508) * _1391;
        _1525 = _1358;
        _1526 = _1357;
        _1527 = _1356;
        _1528 = _1368;
        _1529 = _1367;
        _1530 = _1366;
        _1531 = _1378;
        _1532 = _1377;
        _1533 = _1376;
        _1534 = _1391;
        _1535 = _1390;
        _1536 = _1389;
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
    }
    else
    {
        _1525 = _1218;
        _1526 = _1218;
        _1527 = _1218;
        _1528 = _1218;
        _1529 = _1218;
        _1530 = _1218;
        _1531 = _1218;
        _1532 = _1218;
        _1533 = _1218;
        _1534 = _1218;
        _1535 = _1218;
        _1536 = _1218;
        _1537 = 0.0;
        _1538 = 0.0;
        _1539 = 0.0;
    }
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1230)) + _1230;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1231)) + _1231;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1232)) + _1232;
    float _1572 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1550, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1550, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1550, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1549));
    float _1593 = _852 * 0.5;
    float _1594 = _853 * 0.5;
    float _1595 = _854 * 0.5;
    float _1596 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1599 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1602 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1636;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1609 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1217, _1221, _1224, _1227));
        float _1613 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1617 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1624 = dot(vec4(cbModelParam._m0[39u]), vec4(_1593, _1594, _1595, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1647;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1638 = dot(vec4(cbModelParam._m0[40u]), vec4(_1593, _1594, _1595, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1651 = (_1647 * cbModelParam._m0[1u].x) + (_1636 * (1.0 - cbModelParam._m0[1u].x));
    float _1661 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _681);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1661 : min(cbModelParam._m0[25u].z, _1661));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1711 = fma(_916, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908)) + cbModelParam._m0[13u].w;
        float _1715 = fma(_916, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908)) + cbModelParam._m0[14u].w;
        float _1719 = fma(_916, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908)) + cbModelParam._m0[15u].w;
        float _1722 = fma(_854, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _852));
        float _1725 = fma(_854, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _852));
        float _1728 = fma(_854, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _852));
        float _1756;
        if (_1722 > 0.0)
        {
            _1756 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1756 = frontier_phi_14_12_ladder;
        }
        float _1980;
        if (_1725 > 0.0)
        {
            _1980 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1980 = frontier_phi_23_19_ladder;
        }
        float _2237;
        if (_1728 > 0.0)
        {
            _2237 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2237 = frontier_phi_35_30_ladder;
        }
        float _2239 = isnan(_1980) ? _1756 : (isnan(_1756) ? _1980 : min(_1756, _1980));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1722) + _1711;
        float _2245 = (_2240 * _1725) + _1715;
        float _2246 = (_2240 * _1728) + _1719;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2247;
        float _2251 = _2247 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 > _2251) || ((_2245 < _2249) || ((_2244 < _2249) || (_2244 > _2251))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2246, cbModelParam._m0[9u].z, fma(_2245, cbModelParam._m0[9u].y, _2244 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2246, cbModelParam._m0[10u].z, fma(_2245, cbModelParam._m0[10u].y, _2244 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2246, cbModelParam._m0[11u].z, fma(_2245, cbModelParam._m0[11u].y, _2244 * cbModelParam._m0[11u].x))), _1662);
            frontier_phi_13_35_ladder = _2374.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2374.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2374.x * cbModelParam._m0[1u].y;
        }
        _1744 = frontier_phi_13_35_ladder_2;
        _1746 = frontier_phi_13_35_ladder_1;
        _1748 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_852, _853, _854), _1662);
        _1744 = _1732.x * cbModelParam._m0[1u].y;
        _1746 = _1732.y * cbModelParam._m0[1u].y;
        _1748 = _1732.z * cbModelParam._m0[1u].y;
    }
    float _1752 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _681);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1752 : min(cbModelParam._m0[25u].w, _1752));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1807 = fma(_916, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908)) + cbModelParam._m0[21u].w;
        float _1811 = fma(_916, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908)) + cbModelParam._m0[22u].w;
        float _1815 = fma(_916, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908)) + cbModelParam._m0[23u].w;
        float _1818 = fma(_854, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _852));
        float _1821 = fma(_854, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _852));
        float _1824 = fma(_854, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _852));
        float _1985;
        if (_1818 > 0.0)
        {
            _1985 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1985 = frontier_phi_25_21_ladder;
        }
        float _2264;
        if (_1821 > 0.0)
        {
            _2264 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2264 = frontier_phi_37_32_ladder;
        }
        float _2477;
        if (_1824 > 0.0)
        {
            _2477 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2477 = frontier_phi_46_43_ladder;
        }
        float _2479 = isnan(_2264) ? _1985 : (isnan(_1985) ? _2264 : min(_1985, _2264));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1818) + _1807;
        float _2485 = (_2480 * _1821) + _1811;
        float _2486 = (_2480 * _1824) + _1815;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2487;
        float _2490 = _2487 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2486 > _2490) || ((_2486 < _2488) || ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 < _2488) || (_2484 > _2490))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2486, cbModelParam._m0[17u].z, fma(_2485, cbModelParam._m0[17u].y, _2484 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2486, cbModelParam._m0[18u].z, fma(_2485, cbModelParam._m0[18u].y, _2484 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2486, cbModelParam._m0[19u].z, fma(_2485, cbModelParam._m0[19u].y, _2484 * cbModelParam._m0[19u].x))), _1753);
            frontier_phi_22_46_ladder = _2685.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2685.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2685.x * cbModelParam._m0[1u].z;
        }
        _1843 = frontier_phi_22_46_ladder_2;
        _1845 = frontier_phi_22_46_ladder_1;
        _1847 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_852, _853, _854), _1753);
        _1843 = _1827.x * cbModelParam._m0[1u].z;
        _1845 = _1827.y * cbModelParam._m0[1u].z;
        _1847 = _1827.z * cbModelParam._m0[1u].z;
    }
    float _1860 = (((_879 * _828) + _880) * _844) * ((cbModelParam._m0[1u].w * (_1843 - _1744)) + _1744);
    float _1862 = (((_879 * _830) + _880) * _844) * ((cbModelParam._m0[1u].w * (_1845 - _1746)) + _1746);
    float _1864 = (((_879 * _831) + _880) * _844) * ((cbModelParam._m0[1u].w * (_1847 - _1748)) + _1748);
    float _1867 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1862, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1870 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1862, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1873 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1862, cbSceneParam._m0[91u].y, _1860 * cbSceneParam._m0[91u].x));
    vec4 _1881 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_766, _767));
    float _1883 = _1881.w;
    float _1895 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1883);
    float _1896 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1883);
    float _1897 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1883);
    uvec4 _1901 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _1903 = _1901.x * 14u;
    uint _1904 = _1903 + 13u;
    float _1911 = _844 + (-1.0);
    float _1916 = (cbLight._m0[_1904].x * _1911) + 1.0;
    float _1917 = (cbLight._m0[_1904].y * _1911) + 1.0;
    float _1918 = (cbLight._m0[_1904].z * _1911) + 1.0;
    float _1919 = (cbLight._m0[_1904].w * _1911) + 1.0;
    uint _1920 = _1903 + 5u;
    float _1926 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1930 = _1903 + 4u;
    float _1939 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1943 = _1903 | 1u;
    float _1954 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_678, _679, _680));
    float _1957 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_678, _679, _680));
    float _4080 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _4091 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1962 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.3183098733425140380859375;
    float _1964 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 0.3183098733425140380859375;
    float _1971 = ((cbLight._m0[_1920].x * _1926) * _1964) + (((cbLight._m0[_1930].x * _1895) * _1939) * _1962);
    float _1972 = ((_1926 * cbLight._m0[_1920].y) * _1964) + (((cbLight._m0[_1930].y * _1896) * _1939) * _1962);
    float _1973 = ((_1926 * cbLight._m0[_1920].z) * _1964) + (((cbLight._m0[_1930].z * _1897) * _1939) * _1962);
    uvec4 _1977 = floatBitsToUint(cbLight._m0[_1903 + 12u]);
    bool _1979 = _1977.x == 0u;
    float _1990;
    float _1992;
    float _1994;
    if (_1979)
    {
        _1990 = _1971;
        _1992 = _1972;
        _1994 = _1973;
    }
    else
    {
        uint _1998 = _1903 + 6u;
        float _2014 = (dot(vec3(cbLight._m0[_1903 + 2u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2015 = _2014 * _2014;
        float _4102 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2016 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2017 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _1990 = (((cbLight._m0[_1998].x * 0.3183098733425140380859375) * _2016) * _2017) + _1971;
        _1992 = (((cbLight._m0[_1998].y * 0.3183098733425140380859375) * _2016) * _2017) + _1972;
        _1994 = (((cbLight._m0[_1998].z * 0.3183098733425140380859375) * _2016) * _2017) + _1973;
    }
    bool _1997 = _1977.y == 0u;
    float _2035;
    float _2037;
    float _2039;
    if (_1997)
    {
        _2035 = _1990;
        _2037 = _1992;
        _2039 = _1994;
    }
    else
    {
        uint _2208 = _1903 + 7u;
        float _2224 = (dot(vec3(cbLight._m0[_1903 + 3u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2225 = _2224 * _2224;
        float _4118 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2226 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2227 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2035 = (((cbLight._m0[_2208].x * 0.3183098733425140380859375) * _2226) * _2227) + _1990;
        _2037 = (((cbLight._m0[_2208].y * 0.3183098733425140380859375) * _2226) * _2227) + _1992;
        _2039 = (((cbLight._m0[_2208].z * 0.3183098733425140380859375) * _2226) * _2227) + _1994;
    }
    uint _2042 = _1903 + 8u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _681) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1903].x + _758;
    float _2058 = cbLight._m0[_1903].y + _759;
    float _2059 = cbLight._m0[_1903].z + _760;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_1903].xyz));
    float _4134 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _4145 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _2071 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2072 = dot(vec3(_678, _679, _680), vec3(_2064, _2065, _2066));
    float _4156 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2076 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2064, _2065, _2066));
    float _4167 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2080 = _2056 * _2056;
    float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
    float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * 5.0);
    float _2093 = 0.959999978542327880859375 - _825;
    float _2095 = 0.959999978542327880859375 - _826;
    float _2096 = 0.959999978542327880859375 - _827;
    float _2103 = 1.0 - _2056;
    float _2114 = (0.5 / (((_2071 * ((_2070 * _2103) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2103) + _2056) * _2070))) * _2070;
    float _4178 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2116 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
    uint _2130 = _1903 + 9u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _681) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_1943].x + _758;
    float _2144 = cbLight._m0[_1943].y + _759;
    float _2145 = cbLight._m0[_1943].z + _760;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_1943].xyz));
    float _4189 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2157 = dot(vec3(_678, _679, _680), vec3(_2150, _2151, _2152));
    float _4200 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2161 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_2150, _2151, _2152));
    float _4211 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2165 = _2142 * _2142;
    float _2169 = ((_2160 * _2160) * (_2165 + (-1.0))) + 1.0;
    float _2176 = exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0);
    float _2183 = 1.0 - _2142;
    float _2193 = (0.5 / (((_2071 * ((_2156 * _2183) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2183) + _2142) * _2156))) * _2156;
    float _4222 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2165 / ((_2169 * _2169) * 3.141590118408203125));
    float _2205 = (((((_2176 * _2093) + _828) * cbLight._m0[_2130].x) * _2195) * _1926) + ((((cbLight._m0[_2042].x * _1895) * ((_2092 * _2093) + _828)) * _2116) * _1939);
    float _2206 = (((((_2176 * _2095) + _830) * cbLight._m0[_2130].y) * _2195) * _1926) + ((((cbLight._m0[_2042].y * _1896) * ((_2092 * _2095) + _830)) * _2116) * _1939);
    float _2207 = (((((_2176 * _2096) + _831) * cbLight._m0[_2130].z) * _2195) * _1926) + ((((cbLight._m0[_2042].z * _1897) * ((_2092 * _2096) + _831)) * _2116) * _1939);
    float _2269;
    float _2271;
    float _2273;
    if (_1979)
    {
        _2269 = _2205;
        _2271 = _2206;
        _2273 = _2207;
    }
    else
    {
        uint _2275 = _1903 + 2u;
        uint _2279 = _1903 + 10u;
        float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _681) * 0.949999988079071044921875);
        float _2294 = _2293 * _2293;
        float _2295 = cbLight._m0[_2275].x + _758;
        float _2296 = cbLight._m0[_2275].y + _759;
        float _2297 = cbLight._m0[_2275].z + _760;
        float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
        float _2302 = _2301 * _2295;
        float _2303 = _2301 * _2296;
        float _2304 = _2301 * _2297;
        float _2305 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2275].xyz));
        float _4233 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2309 = dot(vec3(_678, _679, _680), vec3(_2302, _2303, _2304));
        float _4244 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2313 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2302, _2303, _2304));
        float _4255 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2317 = _2294 * _2294;
        float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
        float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0);
        float _2335 = 1.0 - _2294;
        float _2345 = (0.5 / (((_2071 * ((_2308 * _2335) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2335) + _2294) * _2308))) * _2308;
        float _4266 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2347 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
        float _2348 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2269 = (((((_2328 * _2093) + _828) * cbLight._m0[_2279].x) * _2347) * _2348) + _2205;
        _2271 = (((((_2328 * _2095) + _830) * cbLight._m0[_2279].y) * _2347) * _2348) + _2206;
        _2273 = (((((_2328 * _2096) + _831) * cbLight._m0[_2279].z) * _2347) * _2348) + _2207;
    }
    float _2383;
    float _2385;
    float _2387;
    if (_1997)
    {
        _2383 = _2269;
        _2385 = _2271;
        _2387 = _2273;
    }
    else
    {
        uint _2394 = _1903 + 3u;
        uint _2398 = _1903 + 11u;
        float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _681) * 0.949999988079071044921875);
        float _2413 = _2412 * _2412;
        float _2414 = cbLight._m0[_2394].x + _758;
        float _2415 = cbLight._m0[_2394].y + _759;
        float _2416 = cbLight._m0[_2394].z + _760;
        float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
        float _2421 = _2420 * _2414;
        float _2422 = _2420 * _2415;
        float _2423 = _2420 * _2416;
        float _2424 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2394].xyz));
        float _4282 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2428 = dot(vec3(_678, _679, _680), vec3(_2421, _2422, _2423));
        float _4293 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2432 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2421, _2422, _2423));
        float _4304 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2436 = _2413 * _2413;
        float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
        float _2447 = exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0);
        float _2454 = 1.0 - _2413;
        float _2464 = (0.5 / (((_2071 * ((_2427 * _2454) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2454) + _2413) * _2427))) * _2427;
        float _4315 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2466 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
        float _2467 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2383 = (((((_2447 * _2093) + _828) * cbLight._m0[_2398].x) * _2466) * _2467) + _2269;
        _2385 = (((((_2447 * _2095) + _830) * cbLight._m0[_2398].y) * _2466) * _2467) + _2271;
        _2387 = (((((_2447 * _2096) + _831) * cbLight._m0[_2398].z) * _2466) * _2467) + _2273;
    }
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    if (_1901.y == 0u)
    {
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2542;
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2542;
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2542;
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.x;
        uint _2569 = uint((float(_2557.y) * floor(float(uint(cbSceneParam._m0[85u].y * _767) / _2558))) + floor(float(uint(cbSceneParam._m0[85u].x * _766) / _2558)));
        float _2579 = (log2(_2545 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2580 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        uint _2583 = uint(isnan(14.0) ? _2580 : (isnan(_2580) ? 14.0 : min(_2580, 14.0)));
        uvec4 _2588 = texelFetch(g_lightClusterGridBuffer, int(((_2583 << 2u) + (_2569 << 6u)) >> 2u));
        uint _2589 = _2588.x;
        uint _2590 = _2557.z;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        if (((((1u << ((_2590 >> 4u) & 15u)) + 4294967295u) & _2589) == 0u) || ((_2590 & 240u) == 0u))
        {
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
        }
        else
        {
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            uint _2841 = 0u;
            uint _2850;
            bool _2851;
            for (;;)
            {
                _2850 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2841 << 2u)) >> 2u)).x;
                _2851 = _2850 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2851)
                {
                    frontier_phi_61_pred = _2835;
                    frontier_phi_61_pred_1 = _2840;
                    frontier_phi_61_pred_2 = _2839;
                    frontier_phi_61_pred_3 = _2838;
                    frontier_phi_61_pred_4 = _2837;
                    frontier_phi_61_pred_5 = _2836;
                }
                else
                {
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    uint _2965;
                    _2959 = _2835;
                    _2960 = _2836;
                    _2961 = _2837;
                    _2962 = _2838;
                    _2963 = _2839;
                    _2964 = _2840;
                    _2965 = _2850;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    for (;;)
                    {
                        uint _2969 = uint(findLSB(_2965)) + (_2841 << 5u);
                        uint _2966 = (_2965 + 4294967295u) & _2965;
                        uint _2971 = _2969 * 48u;
                        vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2971)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 3u)).x));
                        uint _2991 = (_2969 * 48u) + 4u;
                        vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 3u)).x));
                        uint _3010 = (_2969 * 48u) + 8u;
                        vec3 _3021 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x));
                        float _3025 = _2985.x - _2543;
                        float _3026 = _2985.y - _2544;
                        float _3027 = _2985.z - _2545;
                        float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                        float _3031 = inversesqrt(_3028);
                        float _3032 = _3031 * _3025;
                        float _3033 = _3031 * _3026;
                        float _3034 = _3031 * _3027;
                        float _3035 = dot(vec3(_785, _788, _791), vec3(_3032, _3033, _3034));
                        float _3040 = 1.0 - (_3028 * _2985.w);
                        float _4341 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3041 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3042 = sqrt(_3028) * _3004.w;
                        float _3045 = 1.39999997615814208984375 / (_3042 + 1.39999997615814208984375);
                        float _3046 = _3045 * _3045;
                        float _3049 = ((1.0 - _3046) * _3035) + _3046;
                        float _3052 = _3042 * _3042;
                        float _3056 = ((isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))) * _3041) / ((_3052 * 0.699999988079071044921875) + 1.0);
                        float _3060 = (-0.0) - _2543;
                        float _3061 = (-0.0) - _2544;
                        float _3062 = (-0.0) - _2545;
                        float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                        float _3067 = _3066 * _3060;
                        float _3068 = _3066 * _3061;
                        float _3069 = _3066 * _3062;
                        float _3077 = exp2(log2(1.0 / ((_3052 * 3.5) + 5.0)) * 0.25);
                        float _3078 = 1.0 - _860;
                        float _3085 = sqrt(1.0 - ((1.0 - (_3078 * _3078)) * (1.0 - (_3077 * _3077))));
                        float _3086 = _3085 * _3085;
                        float _3087 = _3086 * _3086;
                        float _3088 = _3067 + _3032;
                        float _3089 = _3068 + _3033;
                        float _3090 = _3069 + _3034;
                        float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                        float _3098 = dot(vec3(_785, _788, _791), vec3(_3067, _3068, _3069));
                        float _4357 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3101 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3102 = dot(vec3(_785, _788, _791), vec3(_3094 * _3088, _3094 * _3089, _3094 * _3090));
                        float _4368 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3105 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3109 = ((_3105 * _3105) * (_3087 + (-1.0))) + 1.0;
                        float _3110 = _3045 * _3086;
                        float _3111 = _3110 * _3110;
                        float _3114 = ((1.0 - _3111) * _3035) + _3111;
                        float _4379 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3115 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3116 = 1.0 - _3086;
                        float _3126 = (0.5 / (((_3115 * ((_3101 * _3116) + _3086)) + 9.9999999392252902907785028219223e-09) + (((_3115 * _3116) + _3086) * _3101))) * _3115;
                        float _4390 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3137 = (((_3087 * 3.1415927410125732421875) * (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) / ((_3109 * _3109) * ((_3052 * 2.1991131305694580078125) + 3.141590118408203125))) * _3041;
                        _2894 = (_3056 * _3004.x) + _2962;
                        _2895 = (_3056 * _3004.y) + _2963;
                        _2896 = (_3056 * _3004.z) + _2964;
                        _2891 = (_3137 * _3021.x) + _2959;
                        _2892 = (_3137 * _3021.y) + _2960;
                        _2893 = (_3137 * _3021.z) + _2961;
                        if (_2966 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2959 = _2891;
                            _2960 = _2892;
                            _2961 = _2893;
                            _2962 = _2894;
                            _2963 = _2895;
                            _2964 = _2896;
                            _2965 = _2966;
                        }
                    }
                    frontier_phi_61_pred = _2891;
                    frontier_phi_61_pred_1 = _2896;
                    frontier_phi_61_pred_2 = _2895;
                    frontier_phi_61_pred_3 = _2894;
                    frontier_phi_61_pred_4 = _2893;
                    frontier_phi_61_pred_5 = _2892;
                }
                _2691 = frontier_phi_61_pred;
                _2701 = frontier_phi_61_pred_1;
                _2699 = frontier_phi_61_pred_2;
                _2697 = frontier_phi_61_pred_3;
                _2695 = frontier_phi_61_pred_4;
                _2693 = frontier_phi_61_pred_5;
                uint _2842 = _2841 + 1u;
                if (_2842 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2835 = _2691;
                    _2836 = _2693;
                    _2837 = _2695;
                    _2838 = _2697;
                    _2839 = _2699;
                    _2840 = _2701;
                    _2841 = _2842;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
        }
        uvec4 _2704 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2705 = _2704.z;
        uint _2707 = (_2705 >> 8u) & 15u;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        if (((4294967295u << _2707) & _2589) == 0u)
        {
            _2803 = _2690;
            _2805 = _2692;
            _2807 = _2694;
            _2809 = _2696;
            _2811 = _2698;
            _2813 = _2700;
        }
        else
        {
            float _2828 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
            float _2829 = _2828 * _2543;
            float _2830 = _2828 * _2544;
            float _2831 = _2828 * _2545;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2707 < ((_2705 >> 12u) & 15u))
            {
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2942 = _2690;
                float _2943 = _2692;
                float _2944 = _2694;
                float _2945 = _2696;
                float _2946 = _2698;
                float _2947 = _2700;
                uint _2948 = _2707;
                uint _2957;
                bool _2958;
                for (;;)
                {
                    _2957 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2948 << 2u)) >> 2u)).x;
                    _2958 = _2957 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2958)
                    {
                        frontier_phi_67_pred = _2945;
                        frontier_phi_67_pred_1 = _2946;
                        frontier_phi_67_pred_2 = _2947;
                        frontier_phi_67_pred_3 = _2944;
                        frontier_phi_67_pred_4 = _2943;
                        frontier_phi_67_pred_5 = _2942;
                    }
                    else
                    {
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3155 = _2942;
                        float _3156 = _2943;
                        float _3157 = _2944;
                        float _3158 = _2945;
                        float _3159 = _2946;
                        float _3160 = _2947;
                        uint _3161 = _2957;
                        uint _3162;
                        vec4 _3187;
                        float _3188;
                        vec4 _3203;
                        vec3 _3215;
                        vec4 _3230;
                        vec4 _3245;
                        float _3291;
                        bool _3292;
                        for (;;)
                        {
                            uint _3172 = ((_2948 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3161));
                            _3162 = (_3161 + 4294967295u) & _3161;
                            uint _3174 = _3172 * 40u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3188 = _3187.w;
                            uint _3190 = (_3172 * 40u) + 4u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3205 = (_3172 * 40u) + 8u;
                            _3215 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x));
                            uint _3217 = (_3172 * 40u) + 16u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3232 = (_3172 * 40u) + 20u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3247 = (_3172 * 40u) + 24u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3266 = (_3172 * 40u) + 28u;
                            vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3291 = fma(_2545, _3279.z, fma(_2544, _3279.y, _3279.x * _2543)) + _3279.w;
                            _3292 = !((fma(_2545, _3260.z, fma(_2544, _3260.y, _3260.x * _2543)) + _3260.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3292)
                            {
                                float _3319 = _3187.x - _2543;
                                float _3320 = _3187.y - _2544;
                                float _3321 = _3187.z - _2545;
                                float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                                float _3325 = inversesqrt(_3322);
                                float _3326 = _3325 * _3319;
                                float _3327 = _3325 * _3320;
                                float _3328 = _3325 * _3321;
                                float _3332 = 1.0 - (_3322 / (_3188 * _3188));
                                float _4401 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3337 = sqrt(_3322) * _3203.w;
                                float _3339 = 1.39999997615814208984375 / (_3337 + 1.39999997615814208984375);
                                float _3340 = _3339 * _3339;
                                float _3343 = ((1.0 - _3340) * dot(vec3(_3326, _3327, _3328), vec3(_785, _788, _791))) + _3340;
                                float _3346 = _3337 * _3337;
                                float _3350 = (fma(_2545, _3230.z, fma(_2544, _3230.y, _3230.x * _2543)) + _3230.w) / _3291;
                                float _3351 = (fma(_2545, _3245.z, fma(_2544, _3245.y, _3245.x * _2543)) + _3245.w) / _3291;
                                float _3355 = 1.0 - dot(vec2(_3350, _3351), vec2(_3350, _3351));
                                float _4417 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3357 = _3356 * (((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3333) / ((_3346 * 0.699999988079071044921875) + 1.0));
                                float _3369 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                                float _3370 = 1.0 - _860;
                                float _3377 = sqrt(1.0 - ((1.0 - (_3370 * _3370)) * (1.0 - (_3369 * _3369))));
                                float _3378 = _3377 * _3377;
                                float _3379 = _3378 * _3378;
                                float _3380 = _3326 - _2829;
                                float _3381 = _3327 - _2830;
                                float _3382 = _3328 - _2831;
                                float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                                float _3390 = dot(vec3(_785, _788, _791), vec3((-0.0) - _2829, (-0.0) - _2830, (-0.0) - _2831));
                                float _4428 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3393 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3394 = dot(vec3(_785, _788, _791), vec3(_3386 * _3380, _3386 * _3381, _3386 * _3382));
                                float _4439 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3397 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3401 = ((_3397 * _3397) * (_3379 + (-1.0))) + 1.0;
                                float _3402 = _3339 * _3378;
                                float _3403 = _3402 * _3402;
                                float _3409 = ((1.0 - _3403) * dot(vec3(_785, _788, _791), vec3(_3326, _3327, _3328))) + _3403;
                                float _4450 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3411 = 1.0 - _3378;
                                float _3421 = (0.5 / (((_3410 * ((_3393 * _3411) + _3378)) + 9.9999999392252902907785028219223e-09) + (((_3410 * _3411) + _3378) * _3393))) * _3410;
                                float _4461 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3431 = (_3356 * _3333) * (((_3379 * 3.1415927410125732421875) * (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) / ((_3401 * _3401) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3431 * _3215.x;
                                frontier_phi_73_pred_1 = _3431 * _3215.y;
                                frontier_phi_73_pred_2 = _3357 * _3203.z;
                                frontier_phi_73_pred_3 = _3357 * _3203.y;
                                frontier_phi_73_pred_4 = _3357 * _3203.x;
                                frontier_phi_73_pred_5 = _3431 * _3215.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3435 = frontier_phi_73_pred;
                            _3436 = frontier_phi_73_pred_1;
                            _3440 = frontier_phi_73_pred_2;
                            _3439 = frontier_phi_73_pred_3;
                            _3438 = frontier_phi_73_pred_4;
                            _3437 = frontier_phi_73_pred_5;
                            _3145 = _3438 + _3158;
                            _3146 = _3439 + _3159;
                            _3147 = _3440 + _3160;
                            _3142 = _3435 + _3155;
                            _3143 = _3436 + _3156;
                            _3144 = _3437 + _3157;
                            if (_3162 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3162;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3145;
                        frontier_phi_67_pred_1 = _3146;
                        frontier_phi_67_pred_2 = _3147;
                        frontier_phi_67_pred_3 = _3144;
                        frontier_phi_67_pred_4 = _3143;
                        frontier_phi_67_pred_5 = _3142;
                    }
                    _2810 = frontier_phi_67_pred;
                    _2812 = frontier_phi_67_pred_1;
                    _2814 = frontier_phi_67_pred_2;
                    _2808 = frontier_phi_67_pred_3;
                    _2806 = frontier_phi_67_pred_4;
                    _2804 = frontier_phi_67_pred_5;
                    uint _2949 = _2948 + 1u;
                    if (_2949 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2942 = _2804;
                        _2943 = _2806;
                        _2944 = _2808;
                        _2945 = _2810;
                        _2946 = _2812;
                        _2947 = _2814;
                        _2948 = _2949;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2812;
                frontier_phi_55_56_ladder_1 = _2814;
                frontier_phi_55_56_ladder_2 = _2810;
                frontier_phi_55_56_ladder_3 = _2808;
                frontier_phi_55_56_ladder_4 = _2806;
                frontier_phi_55_56_ladder_5 = _2804;
            }
            else
            {
                frontier_phi_55_56_ladder = _2698;
                frontier_phi_55_56_ladder_1 = _2700;
                frontier_phi_55_56_ladder_2 = _2696;
                frontier_phi_55_56_ladder_3 = _2694;
                frontier_phi_55_56_ladder_4 = _2692;
                frontier_phi_55_56_ladder_5 = _2690;
            }
            _2803 = frontier_phi_55_56_ladder_5;
            _2805 = frontier_phi_55_56_ladder_4;
            _2807 = frontier_phi_55_56_ladder_3;
            _2809 = frontier_phi_55_56_ladder_2;
            _2811 = frontier_phi_55_56_ladder;
            _2813 = frontier_phi_55_56_ladder_1;
        }
        float _2818 = isnan(1.0) ? _844 : (isnan(_844) ? 1.0 : min(_844, 1.0));
        _2602 = (_2818 * _2809) + _2035;
        _2604 = (_2818 * _2811) + _2037;
        _2606 = (_2818 * _2813) + _2039;
        _2608 = ((_2803 * _828) * _2818) + _2383;
        _2610 = ((_2805 * _830) * _2818) + _2385;
        _2612 = ((_2807 * _831) * _2818) + _2387;
    }
    else
    {
        _2602 = _2035;
        _2604 = _2037;
        _2606 = _2039;
        _2608 = _2383;
        _2610 = _2385;
        _2612 = _2387;
    }
    float _4477 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4488 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4499 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    uint _2632 = _244 + 6u;
    float _2640 = _766 / cbSceneParam._m0[86u].x;
    float _2641 = _767 / cbSceneParam._m0[86u].y;
    vec4 _2655 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, (log2((isnan(cbSceneParam._m0[77u].w) ? _700 : (isnan(_700) ? cbSceneParam._m0[77u].w : min(_700, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2657 = _2655.x;
    float _2658 = _2655.y;
    float _2659 = _2655.z;
    float _2660 = _2655.w;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    if (_700 > cbSceneParam._m0[78u].w)
    {
        float _2715 = isnan(_700) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _700 : min(cbSceneParam._m0[80u].w, _700));
        float _2716 = _2715 / _700;
        float _2727 = _2716 * _751;
        float _2728 = _752 * _2716;
        float _2729 = (-0.0) - _2728;
        float _2731 = _2716 * _753;
        float _2733 = (cbSceneParam._m0[77u].w * _2729) / _2715;
        float _2734 = _2733 + cbSceneParam._m0[79u].w;
        float _2735 = cbSceneParam._m0[79u].w - _2728;
        float _2741 = sqrt(((_2727 * _2727) + (_2728 * _2728)) + (_2731 * _2731));
        float _2744 = (1.0 - (cbSceneParam._m0[77u].w / _2715)) * _2741;
        float _2749 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2751 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2904;
        if (abs((_2729 - _2733) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2904 = ((((_2734 > 0.0) ? exp2(_2749 * _2734) : (2.0 - exp2(_2751 * _2734))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2744;
        }
        else
        {
            float _2864 = 1.0 / cbSceneParam._m0[80u].x;
            float _2865 = isnan(_2735) ? _2734 : (isnan(_2734) ? _2735 : max(_2734, _2735));
            float _2866 = isnan(_2735) ? _2734 : (isnan(_2734) ? _2735 : min(_2734, _2735));
            float _2875 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : min(_2865, 0.0));
            float _2876 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : min(_2866, 0.0));
            _2904 = ((abs(_2741 / _2729) * cbSceneParam._m0[80u].y) * ((((_2875 - _2876) * 2.0) - ((exp2(_2749 * (isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0)))) - exp2(_2749 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0))))) * _2864)) - ((exp2(_2751 * _2875) - exp2(_2751 * _2876)) * _2864))) + (_2744 * cbSceneParam._m0[80u].z);
        }
        vec4 _2906 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, 1.0), 0.0);
        float _2915 = exp2((_2904 * (-1.44269502162933349609375)) * (1.0 - _2906.w));
        float _2916 = log2(_2915);
        float _2932 = log2(_2660);
        _2753 = (exp2(_2932 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2916 * cbSceneParam._m0[78u].x)) * _2906.x) / cbSceneParam._m0[78u].x)) + _2657;
        _2755 = (exp2(_2932 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2916 * cbSceneParam._m0[78u].y)) * _2906.y) / cbSceneParam._m0[78u].y)) + _2658;
        _2757 = (exp2(_2932 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2916 * cbSceneParam._m0[78u].z)) * _2906.z) / cbSceneParam._m0[78u].z)) + _2659;
        _2759 = _2915 * _2660;
    }
    else
    {
        _2753 = _2657;
        _2755 = _2658;
        _2757 = _2659;
        _2759 = _2660;
    }
    float _2771 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2772 = _2771 == 3.0;
    float _2773 = log2(_2759);
    float _2780 = exp2(_2773 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2602 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _844))) + ((_2608 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1651)) * cbPerFrame._m0[3u].x));
    float _2781 = exp2(_2773 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2604 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _844))) + ((_2610 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1651)) * cbPerFrame._m0[3u].x));
    float _2782 = exp2(_2773 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2606 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _844))) + ((_2612 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1651)) * cbPerFrame._m0[3u].x));
    float _2791 = (_2771 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2791 * (_2772 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2753)));
    SV_Target.y = _2791 * (_2772 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2755)));
    SV_Target.z = _2791 * (_2772 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2757)));
    SV_Target.w = cbInstanceData._m0[_2632].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2632].w;
}


