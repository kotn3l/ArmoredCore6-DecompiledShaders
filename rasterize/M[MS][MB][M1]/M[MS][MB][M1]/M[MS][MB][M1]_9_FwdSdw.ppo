#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1072;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _278 = _274.z;
    float _283 = (_274.x * 2.0) + (-1.0);
    float _285 = (_274.y * 2.0) + (-1.0);
    float _286 = dot(vec2(_283, _285), vec2(_283, _285));
    float _3685 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _292 = sqrt(1.0 - (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _328 = _326.x;
    float _329 = 1.0 - _328;
    float _362 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_328 - _329) * cbMtdParam._m0[24u].w) + _329) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3696 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _371 = ((((cbMtdParam._m0[10u].x - _259) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _363) + _259;
    float _372 = ((((cbMtdParam._m0[10u].y - _260) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _363) + _260;
    float _373 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _261)) * _363) + _261;
    vec4 _386 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _388 = _386.x;
    float _390 = _388 - (_388 * _363);
    float _394 = ((cbMtdParam._m0[23u].y - _278) * _363) + _278;
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _426 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_223, _224, _225, 0.0));
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _312) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _313) + cbTextureTilingScale._m0[18u].w));
    float _443 = _441.x;
    float _448 = fract(_441.w + cbPerFrame._m0[22u].x);
    float _450 = (1.0 - _448) * _443;
    float _455 = ((_448 + (-1.0)) + _443) * 9.0;
    float _457 = ((_443 + (-1.0)) + _448) * 9.0;
    float _458 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _459 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _473 = (_450 * ((_441.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _458 : (isnan(_458) ? 3.0 : min(_458, 3.0))) * 3.1415927410125732421875);
    float _475 = (_450 * ((_441.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _459 : (isnan(_459) ? 3.0 : min(_459, 3.0))) * 3.1415927410125732421875);
    float _479 = inversesqrt(dot(vec3(_473, _475, 1.0), vec3(_473, _475, 1.0)));
    float _495 = (((((0.5 - _418) + ((_473 * 0.5) * _479)) * _426) + _418) * 2.0) + (-1.0);
    float _496 = (((((0.5 - _419) + ((_479 * 0.5) * _475)) * _426) + _419) * 2.0) + (-1.0);
    float _497 = dot(vec2(_495, _496), vec2(_495, _496));
    float _3727 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _513 = ((((cbMtdParam._m0[22u].z * _283) - _283) + _495) * _363) + _283;
    float _514 = ((((cbMtdParam._m0[22u].z * _285) - _285) + _496) * _363) + _285;
    float _515 = (_363 * (sqrt(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) - _292)) + _292;
    float _517 = cbMtdParam._m0[22u].x + _274.w;
    float _520 = fma(_515, _223, fma(_514, _229 * TANGENT.x, (_215 * _207) * _513));
    float _523 = fma(_515, _224, fma(_514, _229 * TANGENT.y, (_215 * _208) * _513));
    float _526 = fma(_515, _225, fma(_514, _229 * TANGENT.z, (_215 * _209) * _513));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    float _531 = _530 * _520;
    float _532 = _530 * _523;
    float _533 = _530 * _526;
    float _3738 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _534 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3760 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3771 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3782 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3793 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _539 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _553 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _604 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _594);
    float _605 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _594);
    float _606 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _594);
    float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
    float _611 = _604 * _610;
    float _612 = _605 * _610;
    float _613 = _606 * _610;
    float _619 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _620 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _641 = fma(_533, cbSceneParam._m0[5u].z, fma(_532, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _531));
    float _644 = fma(_533, cbSceneParam._m0[6u].z, fma(_532, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _531));
    float _647 = fma(_533, cbSceneParam._m0[7u].z, fma(_532, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _531));
    uint _661 = (_293 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _667 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) * cbInstanceData._m0[_661].x;
    float _668 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * cbInstanceData._m0[_661].y;
    float _669 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_661].z;
    float _3804 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _673 = 1.0 - _539;
    float _674 = _670 * _673;
    float _675 = _671 * _673;
    float _676 = _672 * _673;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _539;
    float _682 = (_671 + (-0.039999999105930328369140625)) * _539;
    float _683 = (_672 + (-0.039999999105930328369140625)) * _539;
    float _684 = _681 + 0.039999999105930328369140625;
    float _686 = _682 + 0.039999999105930328369140625;
    float _687 = _683 + 0.039999999105930328369140625;
    vec4 _696 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _619, cbSceneParam._m0[86u].y * _620));
    float _700 = ((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * TEXCOORD_5.w) * _696.x;
    float _701 = dot(vec3(_531, _532, _533), vec3(_611, _612, _613));
    float _704 = _701 * 2.0;
    float _708 = (_704 * _531) - _611;
    float _709 = (_704 * _532) - _612;
    float _710 = (_704 * _533) - _613;
    float _714 = abs(dot(vec3(_611, _612, _613), vec3(_531, _532, _533)));
    float _3837 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _716 = sqrt(_534);
    float _728 = exp2((_716 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_716 * 3.0));
    float _734 = (1.0 - _728) * ((_716 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _735 = _728 * _716;
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1071;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _797 = fma(_771, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763));
        float _801 = fma(_771, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763));
        float _805 = fma(_771, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763));
        float _829 = _763 + _531;
        float _830 = _767 + _532;
        float _831 = _771 + _533;
        float _841 = fma(_831, cbModelParam._m0[26u].z, fma(_830, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _829)) - _797;
        float _842 = fma(_831, cbModelParam._m0[27u].z, fma(_830, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _829)) - _801;
        float _843 = fma(_831, cbModelParam._m0[28u].z, fma(_830, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _829)) - _805;
        float _847 = inversesqrt(dot(vec3(_841, _842, _843), vec3(_841, _842, _843)));
        float _860 = ((_847 * _841) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_797 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_847 * _842) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_801 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_847 * _843) / cbModelParam._m0[34u].z) + ((((((_805 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        float _899 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_865.x + (-0.5));
        float _901 = _899 * (_865.y + (-0.5));
        float _902 = _899 * (_865.z + (-0.5));
        float _909 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_872.x + (-0.5));
        float _911 = _909 * (_872.y + (-0.5));
        float _912 = _909 * (_872.z + (-0.5));
        float _919 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_879.x + (-0.5));
        float _921 = _919 * (_879.y + (-0.5));
        float _922 = _919 * (_879.z + (-0.5));
        float _929 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_886.x + (-0.5));
        float _931 = _929 * (_886.y + (-0.5));
        float _932 = _929 * (_886.z + (-0.5));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = _900 * 0.5;
        float _937 = _910 * 0.5;
        float _938 = _920 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _953 = (dot(vec3(_531, _532, _533), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _963 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3885 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_965 + 1.0))) + _970) * _933;
        float _980 = _901 * 0.5;
        float _981 = _911 * 0.5;
        float _982 = _921 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_531, _532, _533), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3918 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1007 + 1.0))) + _1012) * _934;
        float _1022 = _902 * 0.5;
        float _1023 = _912 * 0.5;
        float _1024 = _922 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_531, _532, _533), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3951 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1049 + 1.0))) + _1054) * _935;
        _1071 = _902;
        _1073 = _901;
        _1074 = _900;
        _1075 = _912;
        _1076 = _911;
        _1077 = _910;
        _1078 = _922;
        _1079 = _921;
        _1080 = _920;
        _1081 = _935;
        _1082 = _934;
        _1083 = _933;
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
    }
    else
    {
        _1071 = _1072;
        _1073 = _1072;
        _1074 = _1072;
        _1075 = _1072;
        _1076 = _1072;
        _1077 = _1072;
        _1078 = _1072;
        _1079 = _1072;
        _1080 = _1072;
        _1081 = _1072;
        _1082 = _1072;
        _1083 = _1072;
        _1084 = 0.0;
        _1085 = 0.0;
        _1086 = 0.0;
    }
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1111 = fma(_771, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _763));
        float _1115 = fma(_771, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _763));
        float _1119 = fma(_771, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _763));
        float _1142 = _763 + _531;
        float _1143 = _767 + _532;
        float _1144 = _771 + _533;
        float _1154 = fma(_1144, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1142)) - _1111;
        float _1155 = fma(_1144, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1142)) - _1115;
        float _1156 = fma(_1144, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1142)) - _1119;
        float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
        float _1173 = ((_1160 * _1154) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1111 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1160 * _1155) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1115 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1160 * _1156) / cbModelParam._m0[35u].z) + ((((((_1119 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        float _1210 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1177.x + (-0.5));
        float _1212 = _1210 * (_1177.y + (-0.5));
        float _1213 = _1210 * (_1177.z + (-0.5));
        float _1220 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1184.x + (-0.5));
        float _1222 = _1220 * (_1184.y + (-0.5));
        float _1223 = _1220 * (_1184.z + (-0.5));
        float _1230 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1191.x + (-0.5));
        float _1232 = _1230 * (_1191.y + (-0.5));
        float _1233 = _1230 * (_1191.z + (-0.5));
        float _1240 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1198.x + (-0.5));
        float _1242 = _1240 * (_1198.y + (-0.5));
        float _1243 = _1240 * (_1198.z + (-0.5));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = _1211 * 0.5;
        float _1248 = _1221 * 0.5;
        float _1249 = _1231 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_531, _532, _533), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4014 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1274 + 1.0))) + _1279) * _1244;
        float _1289 = _1212 * 0.5;
        float _1290 = _1222 * 0.5;
        float _1291 = _1232 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_531, _532, _533), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4047 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1316 + 1.0))) + _1321) * _1245;
        float _1331 = _1213 * 0.5;
        float _1332 = _1223 * 0.5;
        float _1333 = _1233 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_531, _532, _533), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4080 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1358 + 1.0))) + _1363) * _1246;
        _1380 = _1213;
        _1381 = _1212;
        _1382 = _1211;
        _1383 = _1223;
        _1384 = _1222;
        _1385 = _1221;
        _1386 = _1233;
        _1387 = _1232;
        _1388 = _1231;
        _1389 = _1246;
        _1390 = _1245;
        _1391 = _1244;
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
    }
    else
    {
        _1380 = _1072;
        _1381 = _1072;
        _1382 = _1072;
        _1383 = _1072;
        _1384 = _1072;
        _1385 = _1072;
        _1386 = _1072;
        _1387 = _1072;
        _1388 = _1072;
        _1389 = _1072;
        _1390 = _1072;
        _1391 = _1072;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1084)) + _1084;
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1085)) + _1085;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1086)) + _1086;
    float _1427 = fma(_1406, cbSceneParam._m0[89u].z, fma(_1405, cbSceneParam._m0[89u].y, _1404 * cbSceneParam._m0[89u].x));
    float _1430 = fma(_1406, cbSceneParam._m0[90u].z, fma(_1405, cbSceneParam._m0[90u].y, _1404 * cbSceneParam._m0[90u].x));
    float _1433 = fma(_1406, cbSceneParam._m0[91u].z, fma(_1405, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1404));
    float _1448 = _708 * 0.5;
    float _1449 = _709 * 0.5;
    float _1450 = _710 * 0.5;
    float _1451 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1454 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1457 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1491;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1464 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1071, _1075, _1078, _1081));
        float _1468 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1472 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1479 = dot(vec4(cbModelParam._m0[39u]), vec4(_1448, _1449, _1450, 1.0));
        _1491 = dot(vec3(isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1479) ? 0.0 : (isnan(0.0) ? _1479 : max(0.0, _1479))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1491 = 1.0;
    }
    float _1502;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1493 = dot(vec4(cbModelParam._m0[40u]), vec4(_1448, _1449, _1450, 1.0));
        _1502 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1502 = 1.0;
    }
    float _1506 = (_1502 * cbModelParam._m0[1u].x) + (_1491 * (1.0 - cbModelParam._m0[1u].x));
    float _1516 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _534);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1516 : min(cbModelParam._m0[25u].z, _1516));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1566 = fma(_771, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763)) + cbModelParam._m0[13u].w;
        float _1570 = fma(_771, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763)) + cbModelParam._m0[14u].w;
        float _1574 = fma(_771, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763)) + cbModelParam._m0[15u].w;
        float _1577 = fma(_710, cbModelParam._m0[13u].z, fma(_709, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _708));
        float _1580 = fma(_710, cbModelParam._m0[14u].z, fma(_709, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _708));
        float _1583 = fma(_710, cbModelParam._m0[15u].z, fma(_709, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _708));
        float _1611;
        if (_1577 > 0.0)
        {
            _1611 = abs((1.0 - _1566) / _1577);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1566 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1611 = frontier_phi_14_12_ladder;
        }
        float _1783;
        if (_1580 > 0.0)
        {
            _1783 = abs((1.0 - _1570) / _1580);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1570 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1783 = frontier_phi_23_19_ladder;
        }
        float _2079;
        if (_1583 > 0.0)
        {
            _2079 = abs((1.0 - _1574) / _1583);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1574 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2079 = frontier_phi_35_30_ladder;
        }
        float _2081 = isnan(_1783) ? _1611 : (isnan(_1611) ? _1783 : min(_1611, _1783));
        float _2082 = isnan(_2079) ? _2081 : (isnan(_2081) ? _2079 : min(_2081, _2079));
        float _2086 = (_2082 * _1577) + _1566;
        float _2087 = (_2082 * _1580) + _1570;
        float _2088 = (_2082 * _1583) + _1574;
        float _2089 = _2082 * 9.9999997473787516355514526367188e-05;
        float _2091 = (-1.0) - _2089;
        float _2093 = _2089 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2088 > _2093) || ((_2088 < _2091) || ((_2087 > _2093) || ((_2087 < _2091) || ((_2086 < _2091) || (_2086 > _2093))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2233 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2088, cbModelParam._m0[9u].z, fma(_2087, cbModelParam._m0[9u].y, _2086 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2088, cbModelParam._m0[10u].z, fma(_2087, cbModelParam._m0[10u].y, _2086 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2088, cbModelParam._m0[11u].z, fma(_2087, cbModelParam._m0[11u].y, _2086 * cbModelParam._m0[11u].x))), _1517);
            frontier_phi_13_35_ladder = _2233.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2233.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2233.x * cbModelParam._m0[1u].y;
        }
        _1599 = frontier_phi_13_35_ladder_2;
        _1601 = frontier_phi_13_35_ladder_1;
        _1603 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_708, _709, _710), _1517);
        _1599 = _1587.x * cbModelParam._m0[1u].y;
        _1601 = _1587.y * cbModelParam._m0[1u].y;
        _1603 = _1587.z * cbModelParam._m0[1u].y;
    }
    float _1607 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _534);
    float _1608 = isnan(_1607) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1607 : min(cbModelParam._m0[25u].w, _1607));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1662 = fma(_771, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763)) + cbModelParam._m0[21u].w;
        float _1666 = fma(_771, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763)) + cbModelParam._m0[22u].w;
        float _1670 = fma(_771, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763)) + cbModelParam._m0[23u].w;
        float _1673 = fma(_710, cbModelParam._m0[21u].z, fma(_709, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _708));
        float _1676 = fma(_710, cbModelParam._m0[22u].z, fma(_709, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _708));
        float _1679 = fma(_710, cbModelParam._m0[23u].z, fma(_709, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _708));
        float _1788;
        if (_1673 > 0.0)
        {
            _1788 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1788 = frontier_phi_25_21_ladder;
        }
        float _2106;
        if (_1676 > 0.0)
        {
            _2106 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2106 = frontier_phi_37_32_ladder;
        }
        float _2444;
        if (_1679 > 0.0)
        {
            _2444 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2444 = frontier_phi_47_44_ladder;
        }
        float _2446 = isnan(_2106) ? _1788 : (isnan(_1788) ? _2106 : min(_1788, _2106));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1673) + _1662;
        float _2452 = (_2447 * _1676) + _1666;
        float _2453 = (_2447 * _1679) + _1670;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2454;
        float _2457 = _2454 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2453 > _2457) || ((_2453 < _2455) || ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 < _2455) || (_2451 > _2457))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2575 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2453, cbModelParam._m0[17u].z, fma(_2452, cbModelParam._m0[17u].y, _2451 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2453, cbModelParam._m0[18u].z, fma(_2452, cbModelParam._m0[18u].y, _2451 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2453, cbModelParam._m0[19u].z, fma(_2452, cbModelParam._m0[19u].y, _2451 * cbModelParam._m0[19u].x))), _1608);
            frontier_phi_22_47_ladder = _2575.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2575.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2575.x * cbModelParam._m0[1u].z;
        }
        _1698 = frontier_phi_22_47_ladder_2;
        _1700 = frontier_phi_22_47_ladder_1;
        _1702 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_708, _709, _710), _1608);
        _1698 = _1682.x * cbModelParam._m0[1u].z;
        _1700 = _1682.y * cbModelParam._m0[1u].z;
        _1702 = _1682.z * cbModelParam._m0[1u].z;
    }
    float _1715 = (((_734 * _684) + _735) * _700) * ((cbModelParam._m0[1u].w * (_1698 - _1599)) + _1599);
    float _1717 = (((_734 * _686) + _735) * _700) * ((cbModelParam._m0[1u].w * (_1700 - _1601)) + _1601);
    float _1719 = (((_734 * _687) + _735) * _700) * ((cbModelParam._m0[1u].w * (_1702 - _1603)) + _1603);
    float _1722 = fma(_1719, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1725 = fma(_1719, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1728 = fma(_1719, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, _1715 * cbSceneParam._m0[91u].x));
    float _1762 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1766 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1770 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1774 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1775 = _1762 / _1774;
    float _1776 = _1766 / _1774;
    float _1777 = _1770 / _1774;
    float _1924;
    float _1925;
    float _1926;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1804 = ((uint(_1777 > cbSceneParam._m0[59u].y) + uint(_1777 > cbSceneParam._m0[59u].x)) + uint(_1777 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1805 = _1804 + 43u;
        uint _1813 = _1804 + 44u;
        uint _1821 = _1804 + 45u;
        uint _1829 = _1804 + 46u;
        float _1840 = fma(_1774, cbSceneParam._m0[_1805].w, fma(_1770, cbSceneParam._m0[_1805].z, fma(_1766, cbSceneParam._m0[_1805].y, _1762 * cbSceneParam._m0[_1805].x)));
        float _1844 = fma(_1774, cbSceneParam._m0[_1813].w, fma(_1770, cbSceneParam._m0[_1813].z, fma(_1766, cbSceneParam._m0[_1813].y, _1762 * cbSceneParam._m0[_1813].x)));
        float _1852 = fma(_1774, cbSceneParam._m0[_1829].w, fma(_1770, cbSceneParam._m0[_1829].z, fma(_1766, cbSceneParam._m0[_1829].y, _1762 * cbSceneParam._m0[_1829].x)));
        float _1857 = cbSceneParam._m0[33u].z * _1852;
        float _1859 = cbSceneParam._m0[33u].w * _1852;
        float _1862 = fma(_1774, cbSceneParam._m0[_1821].w, fma(_1770, cbSceneParam._m0[_1821].z, fma(_1766, cbSceneParam._m0[_1821].y, _1762 * cbSceneParam._m0[_1821].x))) / _1852;
        float _1910 = (cbSceneParam._m0[33u].x - sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777))) * cbSceneParam._m0[33u].y;
        float _4206 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1917 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1857 + _1840) / _1852, (_1859 + _1844) / _1852), _1862), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1859 + _1840) / _1852, (_1844 - _1857) / _1852), _1862), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1840 - _1857) / _1852, (_1844 - _1859) / _1852), _1862), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1840 - _1859) / _1852, (_1857 + _1844) / _1852), _1862), 0.0)).x), vec4(0.25)));
        _1924 = 1.0 - (_1917 * cbSceneParam._m0[34u].x);
        _1925 = 1.0 - (_1917 * cbSceneParam._m0[34u].y);
        _1926 = 1.0 - (_1917 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1924 = 1.0;
        _1925 = 1.0;
        _1926 = 1.0;
    }
    float _1990;
    float _1992;
    float _1994;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1978 = fma(_1774, cbSceneParam._m0[63u].w, fma(_1770, cbSceneParam._m0[63u].z, fma(_1766, cbSceneParam._m0[63u].y, _1762 * cbSceneParam._m0[63u].x)));
        float _1979 = fma(_1774, cbSceneParam._m0[60u].w, fma(_1770, cbSceneParam._m0[60u].z, fma(_1766, cbSceneParam._m0[60u].y, _1762 * cbSceneParam._m0[60u].x))) / _1978;
        float _1980 = fma(_1774, cbSceneParam._m0[61u].w, fma(_1770, cbSceneParam._m0[61u].z, fma(_1766, cbSceneParam._m0[61u].y, _1762 * cbSceneParam._m0[61u].x))) / _1978;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1979 >= cbSceneParam._m0[64u].x) && (_1980 >= cbSceneParam._m0[64u].y)) && (_1979 <= cbSceneParam._m0[64u].z)) && (_1980 <= cbSceneParam._m0[64u].w))
        {
            float _2119 = fma(_1774, cbSceneParam._m0[62u].w, fma(_1770, cbSceneParam._m0[62u].z, fma(_1766, cbSceneParam._m0[62u].y, _1762 * cbSceneParam._m0[62u].x))) / _1978;
            float _2123 = isnan(cbSceneParam._m0[41u].w) ? _2119 : (isnan(_2119) ? cbSceneParam._m0[41u].w : max(_2119, cbSceneParam._m0[41u].w));
            float _2166 = (cbSceneParam._m0[33u].x - sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777))) * cbSceneParam._m0[33u].y;
            float _4222 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
            float _2173 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1979, cbSceneParam._m0[33u].w + _1980), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1979, _1980 - cbSceneParam._m0[33u].z), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1979 - cbSceneParam._m0[33u].z, _1980 - cbSceneParam._m0[33u].w), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1979 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1980), _2123), 0.0)).x), vec4(0.25)));
            float _2177 = 1.0 - (_2173 * cbSceneParam._m0[34u].x);
            float _2178 = 1.0 - (_2173 * cbSceneParam._m0[34u].y);
            float _2179 = 1.0 - (_2173 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2179) ? _1926 : (isnan(_1926) ? _2179 : min(_1926, _2179));
            frontier_phi_34_33_ladder_1 = isnan(_2178) ? _1925 : (isnan(_1925) ? _2178 : min(_1925, _2178));
            frontier_phi_34_33_ladder_2 = isnan(_2177) ? _1924 : (isnan(_1924) ? _2177 : min(_1924, _2177));
        }
        else
        {
            frontier_phi_34_33_ladder = _1926;
            frontier_phi_34_33_ladder_1 = _1925;
            frontier_phi_34_33_ladder_2 = _1924;
        }
        _1990 = frontier_phi_34_33_ladder_2;
        _1992 = frontier_phi_34_33_ladder_1;
        _1994 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1990 = _1924;
        _1992 = _1925;
        _1994 = _1926;
    }
    uvec4 _1999 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2001 = _1999.x * 14u;
    uint _2002 = _2001 + 13u;
    float _2009 = _700 + (-1.0);
    float _2014 = (cbLight._m0[_2002].x * _2009) + 1.0;
    float _2015 = (cbLight._m0[_2002].y * _2009) + 1.0;
    float _2016 = (cbLight._m0[_2002].z * _2009) + 1.0;
    float _2017 = (cbLight._m0[_2002].w * _2009) + 1.0;
    uint _2018 = _2001 + 5u;
    float _2024 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2028 = _2001 + 4u;
    float _2038 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
    uint _2042 = _2001 | 1u;
    float _2053 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_531, _532, _533));
    float _2056 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_531, _532, _533));
    float _4258 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _4269 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2061 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.3183098733425140380859375;
    float _2063 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2070 = ((cbLight._m0[_2018].x * _2024) * _2063) + (((cbLight._m0[_2028].x * _1990) * _2038) * _2061);
    float _2071 = ((_2024 * cbLight._m0[_2018].y) * _2063) + (((cbLight._m0[_2028].y * _1992) * _2038) * _2061);
    float _2072 = ((_2024 * cbLight._m0[_2018].z) * _2063) + (((cbLight._m0[_2028].z * _1994) * _2038) * _2061);
    uvec4 _2076 = floatBitsToUint(cbLight._m0[_2001 + 12u]);
    bool _2078 = _2076.x == 0u;
    float _2180;
    float _2182;
    float _2184;
    if (_2078)
    {
        _2180 = _2070;
        _2182 = _2071;
        _2184 = _2072;
    }
    else
    {
        uint _2188 = _2001 + 6u;
        float _2204 = (dot(vec3(cbLight._m0[_2001 + 2u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2205 = _2204 * _2204;
        float _4280 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2206 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2207 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2180 = (((cbLight._m0[_2188].x * 0.3183098733425140380859375) * _2206) * _2207) + _2070;
        _2182 = (((cbLight._m0[_2188].y * 0.3183098733425140380859375) * _2206) * _2207) + _2071;
        _2184 = (((cbLight._m0[_2188].z * 0.3183098733425140380859375) * _2206) * _2207) + _2072;
    }
    bool _2187 = _2076.y == 0u;
    float _2242;
    float _2244;
    float _2246;
    if (_2187)
    {
        _2242 = _2180;
        _2244 = _2182;
        _2246 = _2184;
    }
    else
    {
        uint _2415 = _2001 + 7u;
        float _2431 = (dot(vec3(cbLight._m0[_2001 + 3u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4296 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2434 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2242 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2180;
        _2244 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2182;
        _2246 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2184;
    }
    uint _2249 = _2001 + 8u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _534) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2001].x + _611;
    float _2265 = cbLight._m0[_2001].y + _612;
    float _2266 = cbLight._m0[_2001].z + _613;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2001].xyz));
    float _4312 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _4323 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _2278 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2279 = dot(vec3(_531, _532, _533), vec3(_2271, _2272, _2273));
    float _4334 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2271, _2272, _2273));
    float _4345 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2263 * _2263;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0);
    float _2300 = 0.959999978542327880859375 - _681;
    float _2302 = 0.959999978542327880859375 - _682;
    float _2303 = 0.959999978542327880859375 - _683;
    float _2310 = 1.0 - _2263;
    float _2321 = (0.5 / (((_2278 * ((_2277 * _2310) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2310) + _2263) * _2277))) * _2277;
    float _4356 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    uint _2337 = _2001 + 9u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _534) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2042].x + _611;
    float _2351 = cbLight._m0[_2042].y + _612;
    float _2352 = cbLight._m0[_2042].z + _613;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2042].xyz));
    float _4367 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2364 = dot(vec3(_531, _532, _533), vec3(_2357, _2358, _2359));
    float _4378 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2357, _2358, _2359));
    float _4389 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2349 * _2349;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0);
    float _2390 = 1.0 - _2349;
    float _2400 = (0.5 / (((_2278 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2390) + _2349) * _2363))) * _2363;
    float _4400 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    float _2412 = (((((_2383 * _2300) + _684) * cbLight._m0[_2337].x) * _2402) * _2024) + ((((cbLight._m0[_2249].x * _1990) * ((_2299 * _2300) + _684)) * _2323) * _2038);
    float _2413 = (((((_2383 * _2302) + _686) * cbLight._m0[_2337].y) * _2402) * _2024) + ((((cbLight._m0[_2249].y * _1992) * ((_2299 * _2302) + _686)) * _2323) * _2038);
    float _2414 = (((((_2383 * _2303) + _687) * cbLight._m0[_2337].z) * _2402) * _2024) + ((((cbLight._m0[_2249].z * _1994) * ((_2299 * _2303) + _687)) * _2323) * _2038);
    float _2470;
    float _2472;
    float _2474;
    if (_2078)
    {
        _2470 = _2412;
        _2472 = _2413;
        _2474 = _2414;
    }
    else
    {
        uint _2476 = _2001 + 2u;
        uint _2480 = _2001 + 10u;
        float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _534) * 0.949999988079071044921875);
        float _2495 = _2494 * _2494;
        float _2496 = cbLight._m0[_2476].x + _611;
        float _2497 = cbLight._m0[_2476].y + _612;
        float _2498 = cbLight._m0[_2476].z + _613;
        float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
        float _2503 = _2502 * _2496;
        float _2504 = _2502 * _2497;
        float _2505 = _2502 * _2498;
        float _2506 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2476].xyz));
        float _4411 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2510 = dot(vec3(_531, _532, _533), vec3(_2503, _2504, _2505));
        float _4422 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2514 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2503, _2504, _2505));
        float _4433 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2518 = _2495 * _2495;
        float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
        float _2529 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
        float _2536 = 1.0 - _2495;
        float _2546 = (0.5 / (((_2278 * ((_2509 * _2536) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2536) + _2495) * _2509))) * _2509;
        float _4444 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2548 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
        float _2549 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2470 = (((((_2529 * _2300) + _684) * cbLight._m0[_2480].x) * _2548) * _2549) + _2412;
        _2472 = (((((_2529 * _2302) + _686) * cbLight._m0[_2480].y) * _2548) * _2549) + _2413;
        _2474 = (((((_2529 * _2303) + _687) * cbLight._m0[_2480].z) * _2548) * _2549) + _2414;
    }
    float _2580;
    float _2582;
    float _2584;
    if (_2187)
    {
        _2580 = _2470;
        _2582 = _2472;
        _2584 = _2474;
    }
    else
    {
        uint _2591 = _2001 + 3u;
        uint _2595 = _2001 + 11u;
        float _2609 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2591].w)) * _534) * 0.949999988079071044921875);
        float _2610 = _2609 * _2609;
        float _2611 = cbLight._m0[_2591].x + _611;
        float _2612 = cbLight._m0[_2591].y + _612;
        float _2613 = cbLight._m0[_2591].z + _613;
        float _2617 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
        float _2618 = _2617 * _2611;
        float _2619 = _2617 * _2612;
        float _2620 = _2617 * _2613;
        float _2621 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2591].xyz));
        float _4460 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2625 = dot(vec3(_531, _532, _533), vec3(_2618, _2619, _2620));
        float _4471 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2629 = dot(vec3(cbLight._m0[_2591].xyz), vec3(_2618, _2619, _2620));
        float _4482 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2633 = _2610 * _2610;
        float _2637 = ((_2628 * _2628) * (_2633 + (-1.0))) + 1.0;
        float _2644 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
        float _2651 = 1.0 - _2610;
        float _2661 = (0.5 / (((_2278 * ((_2624 * _2651) + _2610)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2651) + _2610) * _2624))) * _2624;
        float _4493 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2663 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2633 / ((_2637 * _2637) * 3.141590118408203125));
        float _2664 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2580 = (((((_2644 * _2300) + _684) * cbLight._m0[_2595].x) * _2663) * _2664) + _2470;
        _2582 = (((((_2644 * _2302) + _686) * cbLight._m0[_2595].y) * _2663) * _2664) + _2472;
        _2584 = (((((_2644 * _2303) + _687) * cbLight._m0[_2595].z) * _2663) * _2664) + _2474;
    }
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    if (_1999.y == 0u)
    {
        uvec4 _2685 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2686 = _2685.x;
        uint _2697 = uint((float(_2685.y) * floor(float(uint(cbSceneParam._m0[85u].y * _620) / _2686))) + floor(float(uint(cbSceneParam._m0[85u].x * _619) / _2686)));
        float _2707 = (log2(_1777 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2708 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        uint _2711 = uint(isnan(14.0) ? _2708 : (isnan(_2708) ? 14.0 : min(_2708, 14.0)));
        uvec4 _2716 = texelFetch(g_lightClusterGridBuffer, int(((_2711 << 2u) + (_2697 << 6u)) >> 2u));
        uint _2717 = _2716.x;
        uint _2718 = _2685.z;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        if (((((1u << ((_2718 >> 4u) & 15u)) + 4294967295u) & _2717) == 0u) || ((_2718 & 240u) == 0u))
        {
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
        }
        else
        {
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            uint _2948 = 0u;
            uint _2957;
            bool _2958;
            for (;;)
            {
                _2957 = texelFetch(g_lightClassification, int((((_2711 << 5u) + (_2697 << 9u)) + (_2948 << 2u)) >> 2u)).x;
                _2958 = _2957 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2958)
                {
                    frontier_phi_66_pred = _2947;
                    frontier_phi_66_pred_1 = _2946;
                    frontier_phi_66_pred_2 = _2945;
                    frontier_phi_66_pred_3 = _2944;
                    frontier_phi_66_pred_4 = _2943;
                    frontier_phi_66_pred_5 = _2942;
                }
                else
                {
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    uint _3072;
                    _3066 = _2942;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2957;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    for (;;)
                    {
                        uint _3076 = uint(findLSB(_3072)) + (_2948 << 5u);
                        uint _3073 = (_3072 + 4294967295u) & _3072;
                        uint _3078 = _3076 * 48u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3098 = (_3076 * 48u) + 4u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3117 = (_3076 * 48u) + 8u;
                        vec3 _3128 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x));
                        float _3132 = _3092.x - _1775;
                        float _3133 = _3092.y - _1776;
                        float _3134 = _3092.z - _1777;
                        float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                        float _3138 = inversesqrt(_3135);
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3142 = dot(vec3(_641, _644, _647), vec3(_3139, _3140, _3141));
                        float _3147 = 1.0 - (_3135 * _3092.w);
                        float _4519 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3149 = sqrt(_3135) * _3111.w;
                        float _3152 = 1.39999997615814208984375 / (_3149 + 1.39999997615814208984375);
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3142) + _3153;
                        float _3159 = _3149 * _3149;
                        float _3163 = ((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3148) / ((_3159 * 0.699999988079071044921875) + 1.0);
                        float _3167 = (-0.0) - _1775;
                        float _3168 = (-0.0) - _1776;
                        float _3169 = (-0.0) - _1777;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3183 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                        float _3184 = 1.0 - _716;
                        float _3191 = sqrt(1.0 - ((1.0 - (_3184 * _3184)) * (1.0 - (_3183 * _3183))));
                        float _3192 = _3191 * _3191;
                        float _3193 = _3192 * _3192;
                        float _3194 = _3174 + _3139;
                        float _3195 = _3175 + _3140;
                        float _3196 = _3176 + _3141;
                        float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                        float _3204 = dot(vec3(_641, _644, _647), vec3(_3174, _3175, _3176));
                        float _4535 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3207 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3208 = dot(vec3(_641, _644, _647), vec3(_3200 * _3194, _3200 * _3195, _3200 * _3196));
                        float _4546 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3215 = ((_3211 * _3211) * (_3193 + (-1.0))) + 1.0;
                        float _3216 = _3152 * _3192;
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3142) + _3217;
                        float _4557 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3222 = 1.0 - _3192;
                        float _3232 = (0.5 / (((_3221 * ((_3207 * _3222) + _3192)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3192) * _3207))) * _3221;
                        float _4568 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3242 = (((_3193 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3215 * _3215) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125))) * _3148;
                        _3001 = (_3163 * _3111.x) + _3069;
                        _3002 = (_3163 * _3111.y) + _3070;
                        _3003 = (_3163 * _3111.z) + _3071;
                        _2998 = (_3242 * _3128.x) + _3066;
                        _2999 = (_3242 * _3128.y) + _3067;
                        _3000 = (_3242 * _3128.z) + _3068;
                        if (_3073 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3066 = _2998;
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3073;
                        }
                    }
                    frontier_phi_66_pred = _3003;
                    frontier_phi_66_pred_1 = _3002;
                    frontier_phi_66_pred_2 = _3001;
                    frontier_phi_66_pred_3 = _3000;
                    frontier_phi_66_pred_4 = _2999;
                    frontier_phi_66_pred_5 = _2998;
                }
                _2808 = frontier_phi_66_pred;
                _2806 = frontier_phi_66_pred_1;
                _2804 = frontier_phi_66_pred_2;
                _2802 = frontier_phi_66_pred_3;
                _2800 = frontier_phi_66_pred_4;
                _2798 = frontier_phi_66_pred_5;
                uint _2949 = _2948 + 1u;
                if (_2949 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2942 = _2798;
                    _2943 = _2800;
                    _2944 = _2802;
                    _2945 = _2804;
                    _2946 = _2806;
                    _2947 = _2808;
                    _2948 = _2949;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
        }
        uvec4 _2811 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2812 = _2811.z;
        uint _2814 = (_2812 >> 8u) & 15u;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        if (((4294967295u << _2814) & _2717) == 0u)
        {
            _2910 = _2797;
            _2912 = _2799;
            _2914 = _2801;
            _2916 = _2803;
            _2918 = _2805;
            _2920 = _2807;
        }
        else
        {
            float _2935 = inversesqrt(dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777)));
            float _2936 = _2935 * _1775;
            float _2937 = _2935 * _1776;
            float _2938 = _2935 * _1777;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2814 < ((_2812 >> 12u) & 15u))
            {
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _3049 = _2797;
                float _3050 = _2799;
                float _3051 = _2801;
                float _3052 = _2803;
                float _3053 = _2805;
                float _3054 = _2807;
                uint _3055 = _2814;
                uint _3064;
                bool _3065;
                for (;;)
                {
                    _3064 = texelFetch(g_lightClassification, int((((_2711 << 5u) + (_2697 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                    _3065 = _3064 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3065)
                    {
                        frontier_phi_72_pred = _3054;
                        frontier_phi_72_pred_1 = _3053;
                        frontier_phi_72_pred_2 = _3052;
                        frontier_phi_72_pred_3 = _3051;
                        frontier_phi_72_pred_4 = _3050;
                        frontier_phi_72_pred_5 = _3049;
                    }
                    else
                    {
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3260 = _3049;
                        float _3261 = _3050;
                        float _3262 = _3051;
                        float _3263 = _3052;
                        float _3264 = _3053;
                        float _3265 = _3054;
                        uint _3266 = _3064;
                        uint _3267;
                        vec4 _3292;
                        float _3293;
                        vec4 _3308;
                        vec3 _3320;
                        vec4 _3336;
                        vec4 _3352;
                        float _3398;
                        bool _3399;
                        for (;;)
                        {
                            uint _3277 = ((_3055 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3266));
                            _3267 = (_3266 + 4294967295u) & _3266;
                            uint _3279 = _3277 * 40u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3293 = _3292.w;
                            uint _3295 = (_3277 * 40u) + 4u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3310 = (_3277 * 40u) + 8u;
                            _3320 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x));
                            uint _3323 = (_3277 * 40u) + 16u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3339 = (_3277 * 40u) + 20u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3277 * 40u) + 24u;
                            vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3373 = (_3277 * 40u) + 28u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            _3398 = fma(_1777, _3386.z, fma(_1776, _3386.y, _3386.x * _1775)) + _3386.w;
                            _3399 = !((fma(_1777, _3367.z, fma(_1776, _3367.y, _3367.x * _1775)) + _3367.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3399)
                            {
                                float _3426 = _3292.x - _1775;
                                float _3427 = _3292.y - _1776;
                                float _3428 = _3292.z - _1777;
                                float _3429 = dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428));
                                float _3432 = inversesqrt(_3429);
                                float _3433 = _3432 * _3426;
                                float _3434 = _3432 * _3427;
                                float _3435 = _3432 * _3428;
                                float _3439 = 1.0 - (_3429 / (_3293 * _3293));
                                float _4579 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3444 = sqrt(_3429) * _3308.w;
                                float _3446 = 1.39999997615814208984375 / (_3444 + 1.39999997615814208984375);
                                float _3447 = _3446 * _3446;
                                float _3450 = ((1.0 - _3447) * dot(vec3(_3433, _3434, _3435), vec3(_641, _644, _647))) + _3447;
                                float _3453 = _3444 * _3444;
                                float _3457 = (fma(_1777, _3336.z, fma(_1776, _3336.y, _3336.x * _1775)) + _3336.w) / _3398;
                                float _3458 = (fma(_1777, _3352.z, fma(_1776, _3352.y, _3352.x * _1775)) + _3352.w) / _3398;
                                float _3462 = 1.0 - dot(vec2(_3457, _3458), vec2(_3457, _3458));
                                float _4595 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3464 = _3463 * (((isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0))) * _3440) / ((_3453 * 0.699999988079071044921875) + 1.0));
                                float _3476 = exp2(log2(1.0 / ((_3453 * 3.5) + 5.0)) * 0.25);
                                float _3477 = 1.0 - _716;
                                float _3484 = sqrt(1.0 - ((1.0 - (_3477 * _3477)) * (1.0 - (_3476 * _3476))));
                                float _3485 = _3484 * _3484;
                                float _3486 = _3485 * _3485;
                                float _3487 = _3433 - _2936;
                                float _3488 = _3434 - _2937;
                                float _3489 = _3435 - _2938;
                                float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                                float _3497 = dot(vec3(_641, _644, _647), vec3((-0.0) - _2936, (-0.0) - _2937, (-0.0) - _2938));
                                float _4606 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3500 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3501 = dot(vec3(_641, _644, _647), vec3(_3493 * _3487, _3493 * _3488, _3493 * _3489));
                                float _4617 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3504 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3508 = ((_3504 * _3504) * (_3486 + (-1.0))) + 1.0;
                                float _3509 = _3446 * _3485;
                                float _3510 = _3509 * _3509;
                                float _3516 = ((1.0 - _3510) * dot(vec3(_641, _644, _647), vec3(_3433, _3434, _3435))) + _3510;
                                float _4628 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3518 = 1.0 - _3485;
                                float _3528 = (0.5 / (((_3517 * ((_3500 * _3518) + _3485)) + 9.9999999392252902907785028219223e-09) + (((_3517 * _3518) + _3485) * _3500))) * _3517;
                                float _4639 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3538 = (_3463 * _3440) * (((_3486 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3508 * _3508) * ((_3453 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3464 * _3308.y;
                                frontier_phi_78_pred_1 = _3464 * _3308.x;
                                frontier_phi_78_pred_2 = _3538 * _3320.z;
                                frontier_phi_78_pred_3 = _3538 * _3320.y;
                                frontier_phi_78_pred_4 = _3538 * _3320.x;
                                frontier_phi_78_pred_5 = _3464 * _3308.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3546 = frontier_phi_78_pred;
                            _3545 = frontier_phi_78_pred_1;
                            _3544 = frontier_phi_78_pred_2;
                            _3543 = frontier_phi_78_pred_3;
                            _3542 = frontier_phi_78_pred_4;
                            _3547 = frontier_phi_78_pred_5;
                            _3250 = _3545 + _3263;
                            _3251 = _3546 + _3264;
                            _3252 = _3547 + _3265;
                            _3247 = _3542 + _3260;
                            _3248 = _3543 + _3261;
                            _3249 = _3544 + _3262;
                            if (_3267 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3267;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3252;
                        frontier_phi_72_pred_1 = _3251;
                        frontier_phi_72_pred_2 = _3250;
                        frontier_phi_72_pred_3 = _3249;
                        frontier_phi_72_pred_4 = _3248;
                        frontier_phi_72_pred_5 = _3247;
                    }
                    _2921 = frontier_phi_72_pred;
                    _2919 = frontier_phi_72_pred_1;
                    _2917 = frontier_phi_72_pred_2;
                    _2915 = frontier_phi_72_pred_3;
                    _2913 = frontier_phi_72_pred_4;
                    _2911 = frontier_phi_72_pred_5;
                    uint _3056 = _3055 + 1u;
                    if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3049 = _2911;
                        _3050 = _2913;
                        _3051 = _2915;
                        _3052 = _2917;
                        _3053 = _2919;
                        _3054 = _2921;
                        _3055 = _3056;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2921;
                frontier_phi_60_61_ladder_1 = _2919;
                frontier_phi_60_61_ladder_2 = _2915;
                frontier_phi_60_61_ladder_3 = _2913;
                frontier_phi_60_61_ladder_4 = _2911;
                frontier_phi_60_61_ladder_5 = _2917;
            }
            else
            {
                frontier_phi_60_61_ladder = _2807;
                frontier_phi_60_61_ladder_1 = _2805;
                frontier_phi_60_61_ladder_2 = _2801;
                frontier_phi_60_61_ladder_3 = _2799;
                frontier_phi_60_61_ladder_4 = _2797;
                frontier_phi_60_61_ladder_5 = _2803;
            }
            _2910 = frontier_phi_60_61_ladder_4;
            _2912 = frontier_phi_60_61_ladder_3;
            _2914 = frontier_phi_60_61_ladder_2;
            _2916 = frontier_phi_60_61_ladder_5;
            _2918 = frontier_phi_60_61_ladder_1;
            _2920 = frontier_phi_60_61_ladder;
        }
        float _2925 = isnan(1.0) ? _700 : (isnan(_700) ? 1.0 : min(_700, 1.0));
        _2730 = (_2925 * _2916) + _2242;
        _2732 = (_2925 * _2918) + _2244;
        _2734 = (_2925 * _2920) + _2246;
        _2736 = ((_2910 * _684) * _2925) + _2580;
        _2738 = ((_2912 * _686) * _2925) + _2582;
        _2740 = ((_2914 * _687) * _2925) + _2584;
    }
    else
    {
        _2730 = _2242;
        _2732 = _2244;
        _2734 = _2246;
        _2736 = _2580;
        _2738 = _2582;
        _2740 = _2584;
    }
    float _4655 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4666 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4677 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    uint _2760 = _293 + 6u;
    float _2768 = _619 / cbSceneParam._m0[86u].x;
    float _2769 = _620 / cbSceneParam._m0[86u].y;
    vec4 _2783 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2768, _2769, (log2((isnan(cbSceneParam._m0[77u].w) ? _553 : (isnan(_553) ? cbSceneParam._m0[77u].w : min(_553, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2785 = _2783.x;
    float _2786 = _2783.y;
    float _2787 = _2783.z;
    float _2788 = _2783.w;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    if (_553 > cbSceneParam._m0[78u].w)
    {
        float _2822 = isnan(_553) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _553 : min(cbSceneParam._m0[80u].w, _553));
        float _2823 = _2822 / _553;
        float _2834 = _2823 * _604;
        float _2835 = _605 * _2823;
        float _2836 = (-0.0) - _2835;
        float _2838 = _2823 * _606;
        float _2840 = (cbSceneParam._m0[77u].w * _2836) / _2822;
        float _2841 = _2840 + cbSceneParam._m0[79u].w;
        float _2842 = cbSceneParam._m0[79u].w - _2835;
        float _2848 = sqrt(((_2834 * _2834) + (_2835 * _2835)) + (_2838 * _2838));
        float _2851 = (1.0 - (cbSceneParam._m0[77u].w / _2822)) * _2848;
        float _2856 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2858 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3011;
        if (abs((_2836 - _2840) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3011 = ((((_2841 > 0.0) ? exp2(_2856 * _2841) : (2.0 - exp2(_2858 * _2841))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2851;
        }
        else
        {
            float _2971 = 1.0 / cbSceneParam._m0[80u].x;
            float _2972 = isnan(_2842) ? _2841 : (isnan(_2841) ? _2842 : max(_2841, _2842));
            float _2973 = isnan(_2842) ? _2841 : (isnan(_2841) ? _2842 : min(_2841, _2842));
            float _2982 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : min(_2972, 0.0));
            float _2983 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : min(_2973, 0.0));
            _3011 = ((abs(_2848 / _2836) * cbSceneParam._m0[80u].y) * ((((_2982 - _2983) * 2.0) - ((exp2(_2856 * (isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0)))) - exp2(_2856 * (isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))))) * _2971)) - ((exp2(_2858 * _2982) - exp2(_2858 * _2983)) * _2971))) + (_2851 * cbSceneParam._m0[80u].z);
        }
        vec4 _3013 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2768, _2769, 1.0), 0.0);
        float _3022 = exp2((_3011 * (-1.44269502162933349609375)) * (1.0 - _3013.w));
        float _3023 = log2(_3022);
        float _3039 = log2(_2788);
        _2860 = (exp2(_3039 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].x)) * _3013.x) / cbSceneParam._m0[78u].x)) + _2785;
        _2862 = (exp2(_3039 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].y)) * _3013.y) / cbSceneParam._m0[78u].y)) + _2786;
        _2864 = (exp2(_3039 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].z)) * _3013.z) / cbSceneParam._m0[78u].z)) + _2787;
        _2866 = _3022 * _2788;
    }
    else
    {
        _2860 = _2785;
        _2862 = _2786;
        _2864 = _2787;
        _2866 = _2788;
    }
    float _2878 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2879 = _2878 == 3.0;
    float _2880 = log2(_2866);
    float _2887 = exp2(_2880 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2730 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _700))) + ((_2736 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1506)) * cbPerFrame._m0[3u].x));
    float _2888 = exp2(_2880 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2732 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _700))) + ((_2738 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1506)) * cbPerFrame._m0[3u].x));
    float _2889 = exp2(_2880 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2734 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _700))) + ((_2740 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1506)) * cbPerFrame._m0[3u].x));
    float _2898 = (_2878 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2898 * (_2879 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2860)));
    SV_Target.y = _2898 * (_2879 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2862)));
    SV_Target.z = _2898 * (_2879 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2864)));
    SV_Target.w = cbInstanceData._m0[_2760].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2760].w;
}


