#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1399;
float _3779;
float _3780;
float _3781;
float _3782;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3791 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _467 = _465.x;
    float _468 = _465.y;
    float _469 = _465.z;
    float _478 = ((_448.z - _469) * _394) + _469;
    float _481 = ((((_448.x - _467) * _394) + _467) * 2.0) + (-1.0);
    float _482 = ((((_448.y - _468) * _394) + _468) * 2.0) + (-1.0);
    float _483 = dot(vec2(_481, _482), vec2(_481, _482));
    float _3802 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _520 = (_481 + ((((_421.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_508.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _521 = (_482 + ((((_421.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_508.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _524 = fma(_488, _245, fma(_521, _252, _520 * _238));
    float _527 = fma(_488, _246, fma(_521, _253, _520 * _239));
    float _530 = fma(_488, _247, fma(_521, _254, _520 * _240));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _563 = _561.x;
    float _564 = 1.0 - _563;
    float _570 = (cbMtdParam._m0[19u].x + dot(vec4(_534 * _524, _534 * _527, _534 * _530, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_563 - _564) * cbMtdParam._m0[24u].z) + _564) * cbMtdParam._m0[21u].z);
    float _3813 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _573 = (-0.0) - cbMtdParam._m0[24u].x;
    float _575 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _575 : (isnan(_575) ? 1.0 : min(_575, 1.0));
    float _583 = _571 - ((_571 * TEXCOORD_8.x) * _576);
    float _584 = _571 - ((_571 * TEXCOORD_8.y) * _576);
    float _585 = _571 - ((_571 * TEXCOORD_8.z) * _576);
    float _592 = (_583 * (cbMtdParam._m0[17u].x - _401)) + _401;
    float _593 = (_584 * (cbMtdParam._m0[17u].y - _402)) + _402;
    float _594 = (_585 * (cbMtdParam._m0[17u].z - _403)) + _403;
    vec4 _606 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _608 = _606.x;
    float _609 = 1.0 - _608;
    float _637 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_608 - _609) * cbMtdParam._m0[24u].w) + _609) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3834 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _646 = ((((cbMtdParam._m0[10u].x - _592) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _638) + _592;
    float _647 = ((((cbMtdParam._m0[10u].y - _593) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _638) + _593;
    float _648 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _594)) * _638) + _594;
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _676 = _674.x;
    float _694 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _676) * _394) + _676;
    float _698 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _694) * cbMtdParam._m0[19u].z) + _694;
    float _700 = _698 - (_698 * _583);
    float _702 = _700 - (_700 * _638);
    float _707 = (((_421.z - _478) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _478;
    float _711 = ((_508.z - _707) * cbMtdParam._m0[19u].w) + _707;
    vec4 _725 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _732 = (_725.x * 2.0) + (-1.0);
    float _733 = (_725.y * 2.0) + (-1.0);
    float _734 = dot(vec2(_732, _733), vec2(_732, _733));
    float _3845 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _742 = ((_725.z - _711) * _583) + _711;
    float _745 = ((cbMtdParam._m0[23u].y - _742) * _638) + _742;
    vec4 _764 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _770 = (_764.x * 2.0) + (-1.0);
    float _771 = (_764.y * 2.0) + (-1.0);
    float _772 = dot(vec2(_770, _771), vec2(_770, _771));
    float _3856 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _787 = ((sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) - _488) * _585) + _488;
    float _790 = (((_732 - _520) * _583) + _520) + (cbMtdParam._m0[21u].x * _520);
    float _791 = (((_733 - _521) * _584) + _521) + (cbMtdParam._m0[21u].x * _521);
    float _802 = (((_770 - _790) + (_790 * cbMtdParam._m0[22u].z)) * _638) + _790;
    float _803 = (((_771 - _791) + (_791 * cbMtdParam._m0[22u].z)) * _638) + _791;
    float _804 = (_638 * (sqrt(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) - _787)) + _787;
    float _806 = cbMtdParam._m0[22u].x + _508.w;
    float _809 = fma(_804, _245, fma(_803, _252, _802 * _238));
    float _812 = fma(_804, _246, fma(_803, _253, _802 * _239));
    float _815 = fma(_804, _247, fma(_803, _254, _802 * _240));
    float _819 = inversesqrt(dot(vec3(_809, _812, _815), vec3(_809, _812, _815)));
    float _820 = _819 * _809;
    float _821 = _819 * _812;
    float _822 = _819 * _815;
    float _3867 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _823 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _3889 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3900 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3911 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3922 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _828 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _842 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _892 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _882);
    float _893 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _882);
    float _894 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _882);
    float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
    float _899 = _892 * _898;
    float _900 = _893 * _898;
    float _901 = _894 * _898;
    vec4 _906 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _908 = _906.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1080 = sqrt(((_892 * _892) + (_893 * _893)) + (_894 * _894));
        float _1086 = (cbMatDynParam._m0[5u].x * _1080) + cbMatDynParam._m0[5u].y;
        float _3933 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1091 = (cbMatDynParam._m0[5u].z * _1080) + cbMatDynParam._m0[5u].w;
        float _3944 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) - _1087)) + _1087) < ((_908 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _919 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _920 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _938 = fma(_822, cbSceneParam._m0[5u].z, fma(_821, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _820));
    float _941 = fma(_822, cbSceneParam._m0[6u].z, fma(_821, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _820));
    float _944 = fma(_822, cbSceneParam._m0[7u].z, fma(_821, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _820));
    uint _957 = _257 + 9u;
    uint _958 = _957 + uint(cbMatDynParam._m0[0u].w);
    float _964 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_958].x;
    float _965 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_958].y;
    float _966 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_958].z;
    float _3955 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _970 = 1.0 - _828;
    float _971 = _967 * _970;
    float _972 = _968 * _970;
    float _973 = _969 * _970;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _828;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _828;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _828;
    float _981 = _978 + 0.039999999105930328369140625;
    float _983 = _979 + 0.039999999105930328369140625;
    float _984 = _980 + 0.039999999105930328369140625;
    vec4 _993 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _919, cbSceneParam._m0[86u].y * _920));
    float _997 = ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * TEXCOORD_5.w) * _993.x;
    float _998 = dot(vec3(_820, _821, _822), vec3(_899, _900, _901));
    float _1001 = _998 * 2.0;
    float _1005 = (_1001 * _820) - _899;
    float _1006 = (_1001 * _821) - _900;
    float _1007 = (_1001 * _822) - _901;
    float _1011 = abs(dot(vec3(_899, _900, _901), vec3(_820, _821, _822)));
    float _3988 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1013 = sqrt(_823);
    float _1026 = exp2((_1013 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1013 * 3.0));
    float _1032 = (1.0 - _1026) * ((_1013 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1033 = _1026 * _1013;
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1398;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1123 = fma(_1069, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061));
        float _1127 = fma(_1069, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061));
        float _1131 = fma(_1069, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061));
        float _1156 = _1061 + _820;
        float _1157 = _1065 + _821;
        float _1158 = _1069 + _822;
        float _1168 = fma(_1158, cbModelParam._m0[26u].z, fma(_1157, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1156)) - _1123;
        float _1169 = fma(_1158, cbModelParam._m0[27u].z, fma(_1157, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1156)) - _1127;
        float _1170 = fma(_1158, cbModelParam._m0[28u].z, fma(_1157, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1156)) - _1131;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1123 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1127 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[34u].z) + ((((((_1131 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1226 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1192.x + (-0.5));
        float _1228 = _1226 * (_1192.y + (-0.5));
        float _1229 = _1226 * (_1192.z + (-0.5));
        float _1236 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1199.x + (-0.5));
        float _1238 = _1236 * (_1199.y + (-0.5));
        float _1239 = _1236 * (_1199.z + (-0.5));
        float _1246 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1206.x + (-0.5));
        float _1248 = _1246 * (_1206.y + (-0.5));
        float _1249 = _1246 * (_1206.z + (-0.5));
        float _1256 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1213.x + (-0.5));
        float _1258 = _1256 * (_1213.y + (-0.5));
        float _1259 = _1256 * (_1213.z + (-0.5));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = _1227 * 0.5;
        float _1264 = _1237 * 0.5;
        float _1265 = _1247 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1280 = (dot(vec3(_820, _821, _822), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1290 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4036 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1292 + 1.0))) + _1297) * _1260;
        float _1307 = _1228 * 0.5;
        float _1308 = _1238 * 0.5;
        float _1309 = _1248 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_820, _821, _822), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4069 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1334 + 1.0))) + _1339) * _1261;
        float _1349 = _1229 * 0.5;
        float _1350 = _1239 * 0.5;
        float _1351 = _1249 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_820, _821, _822), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4102 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1376 + 1.0))) + _1381) * _1262;
        _1398 = _1229;
        _1400 = _1228;
        _1401 = _1227;
        _1402 = _1239;
        _1403 = _1238;
        _1404 = _1237;
        _1405 = _1249;
        _1406 = _1248;
        _1407 = _1247;
        _1408 = _1262;
        _1409 = _1261;
        _1410 = _1260;
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
    }
    else
    {
        _1398 = _1399;
        _1400 = _1399;
        _1401 = _1399;
        _1402 = _1399;
        _1403 = _1399;
        _1404 = _1399;
        _1405 = _1399;
        _1406 = _1399;
        _1407 = _1399;
        _1408 = _1399;
        _1409 = _1399;
        _1410 = _1399;
        _1411 = 0.0;
        _1412 = 0.0;
        _1413 = 0.0;
    }
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1441 = fma(_1069, cbModelParam._m0[30u].z, fma(_1065, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061));
        float _1445 = fma(_1069, cbModelParam._m0[31u].z, fma(_1065, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061));
        float _1449 = fma(_1069, cbModelParam._m0[32u].z, fma(_1065, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061));
        float _1472 = _1061 + _820;
        float _1473 = _1065 + _821;
        float _1474 = _1069 + _822;
        float _1484 = fma(_1474, cbModelParam._m0[30u].z, fma(_1473, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1472)) - _1441;
        float _1485 = fma(_1474, cbModelParam._m0[31u].z, fma(_1473, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1472)) - _1445;
        float _1486 = fma(_1474, cbModelParam._m0[32u].z, fma(_1473, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1472)) - _1449;
        float _1490 = inversesqrt(dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486)));
        float _1503 = ((_1490 * _1484) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1441 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1490 * _1485) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1445 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1490 * _1486) / cbModelParam._m0[35u].z) + ((((((_1449 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        float _1540 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1507.x + (-0.5));
        float _1542 = _1540 * (_1507.y + (-0.5));
        float _1543 = _1540 * (_1507.z + (-0.5));
        float _1550 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1514.x + (-0.5));
        float _1552 = _1550 * (_1514.y + (-0.5));
        float _1553 = _1550 * (_1514.z + (-0.5));
        float _1560 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1521.x + (-0.5));
        float _1562 = _1560 * (_1521.y + (-0.5));
        float _1563 = _1560 * (_1521.z + (-0.5));
        float _1570 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1528.x + (-0.5));
        float _1572 = _1570 * (_1528.y + (-0.5));
        float _1573 = _1570 * (_1528.z + (-0.5));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = _1541 * 0.5;
        float _1578 = _1551 * 0.5;
        float _1579 = _1561 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_820, _821, _822), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4165 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1604 + 1.0))) + _1609) * _1574;
        float _1619 = _1542 * 0.5;
        float _1620 = _1552 * 0.5;
        float _1621 = _1562 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_820, _821, _822), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4198 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1646 + 1.0))) + _1651) * _1575;
        float _1661 = _1543 * 0.5;
        float _1662 = _1553 * 0.5;
        float _1663 = _1563 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_820, _821, _822), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4231 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1688 + 1.0))) + _1693) * _1576;
        _1710 = _1543;
        _1711 = _1542;
        _1712 = _1541;
        _1713 = _1553;
        _1714 = _1552;
        _1715 = _1551;
        _1716 = _1563;
        _1717 = _1562;
        _1718 = _1561;
        _1719 = _1576;
        _1720 = _1575;
        _1721 = _1574;
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
    }
    else
    {
        _1710 = _1399;
        _1711 = _1399;
        _1712 = _1399;
        _1713 = _1399;
        _1714 = _1399;
        _1715 = _1399;
        _1716 = _1399;
        _1717 = _1399;
        _1718 = _1399;
        _1719 = _1399;
        _1720 = _1399;
        _1721 = _1399;
        _1722 = 0.0;
        _1723 = 0.0;
        _1724 = 0.0;
    }
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1411)) + _1411;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1412)) + _1412;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1413)) + _1413;
    float _1757 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1735, cbSceneParam._m0[89u].y, _1734 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1735, cbSceneParam._m0[90u].y, _1734 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1735, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1734));
    float _1778 = _1005 * 0.5;
    float _1779 = _1006 * 0.5;
    float _1780 = _1007 * 0.5;
    float _1781 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1784 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1787 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1821;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1794 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1398, _1402, _1405, _1408));
        float _1798 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1400, _1403, _1406, _1409));
        float _1802 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1809 = dot(vec4(cbModelParam._m0[39u]), vec4(_1778, _1779, _1780, 1.0));
        _1821 = dot(vec3(isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1809) ? 0.0 : (isnan(0.0) ? _1809 : max(0.0, _1809))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1821 = 1.0;
    }
    float _1832;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1823 = dot(vec4(cbModelParam._m0[40u]), vec4(_1778, _1779, _1780, 1.0));
        _1832 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1823) ? 0.0 : (isnan(0.0) ? _1823 : max(0.0, _1823))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1832 = 1.0;
    }
    float _1836 = (_1832 * cbModelParam._m0[1u].x) + (_1821 * (1.0 - cbModelParam._m0[1u].x));
    float _1846 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _823);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1846 : min(cbModelParam._m0[25u].z, _1846));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1895 = fma(_1069, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061)) + cbModelParam._m0[13u].w;
        float _1899 = fma(_1069, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061)) + cbModelParam._m0[14u].w;
        float _1903 = fma(_1069, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061)) + cbModelParam._m0[15u].w;
        float _1906 = fma(_1007, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005));
        float _1909 = fma(_1007, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005));
        float _1912 = fma(_1007, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005));
        float _1940;
        if (_1906 > 0.0)
        {
            _1940 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1940 = frontier_phi_17_15_ladder;
        }
        float _2143;
        if (_1909 > 0.0)
        {
            _2143 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2143 = frontier_phi_26_22_ladder;
        }
        float _2397;
        if (_1912 > 0.0)
        {
            _2397 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2397 = frontier_phi_38_33_ladder;
        }
        float _2399 = isnan(_2143) ? _1940 : (isnan(_1940) ? _2143 : min(_1940, _2143));
        float _2400 = isnan(_2397) ? _2399 : (isnan(_2399) ? _2397 : min(_2399, _2397));
        float _2404 = (_2400 * _1906) + _1895;
        float _2405 = (_2400 * _1909) + _1899;
        float _2406 = (_2400 * _1912) + _1903;
        float _2407 = _2400 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2407;
        float _2411 = _2407 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 > _2411) || ((_2405 < _2409) || ((_2404 < _2409) || (_2404 > _2411))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2406, cbModelParam._m0[9u].z, fma(_2405, cbModelParam._m0[9u].y, _2404 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2406, cbModelParam._m0[10u].z, fma(_2405, cbModelParam._m0[10u].y, _2404 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2406, cbModelParam._m0[11u].z, fma(_2405, cbModelParam._m0[11u].y, _2404 * cbModelParam._m0[11u].x))), _1847);
            frontier_phi_16_38_ladder = _2534.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2534.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2534.x * cbModelParam._m0[1u].y;
        }
        _1928 = frontier_phi_16_38_ladder_2;
        _1930 = frontier_phi_16_38_ladder_1;
        _1932 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1005, _1006, _1007), _1847);
        _1928 = _1916.x * cbModelParam._m0[1u].y;
        _1930 = _1916.y * cbModelParam._m0[1u].y;
        _1932 = _1916.z * cbModelParam._m0[1u].y;
    }
    float _1936 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _823);
    float _1937 = isnan(_1936) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1936 : min(cbModelParam._m0[25u].w, _1936));
    float _2027;
    float _2029;
    float _2031;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1991 = fma(_1069, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061)) + cbModelParam._m0[21u].w;
        float _1995 = fma(_1069, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061)) + cbModelParam._m0[22u].w;
        float _1999 = fma(_1069, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061)) + cbModelParam._m0[23u].w;
        float _2002 = fma(_1007, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005));
        float _2005 = fma(_1007, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005));
        float _2008 = fma(_1007, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005));
        float _2148;
        if (_2002 > 0.0)
        {
            _2148 = abs((1.0 - _1991) / _2002);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1991 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2148 = frontier_phi_28_24_ladder;
        }
        float _2424;
        if (_2005 > 0.0)
        {
            _2424 = abs((1.0 - _1995) / _2005);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1995 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2424 = frontier_phi_40_35_ladder;
        }
        float _2637;
        if (_2008 > 0.0)
        {
            _2637 = abs((1.0 - _1999) / _2008);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1999 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2637 = frontier_phi_49_46_ladder;
        }
        float _2639 = isnan(_2424) ? _2148 : (isnan(_2148) ? _2424 : min(_2148, _2424));
        float _2640 = isnan(_2637) ? _2639 : (isnan(_2639) ? _2637 : min(_2639, _2637));
        float _2644 = (_2640 * _2002) + _1991;
        float _2645 = (_2640 * _2005) + _1995;
        float _2646 = (_2640 * _2008) + _1999;
        float _2647 = _2640 * 9.9999997473787516355514526367188e-05;
        float _2648 = (-1.0) - _2647;
        float _2650 = _2647 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2646 > _2650) || ((_2646 < _2648) || ((_2645 > _2650) || ((_2645 < _2648) || ((_2644 < _2648) || (_2644 > _2650))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2646, cbModelParam._m0[17u].z, fma(_2645, cbModelParam._m0[17u].y, _2644 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2646, cbModelParam._m0[18u].z, fma(_2645, cbModelParam._m0[18u].y, _2644 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2646, cbModelParam._m0[19u].z, fma(_2645, cbModelParam._m0[19u].y, _2644 * cbModelParam._m0[19u].x))), _1937);
            frontier_phi_25_49_ladder = _2845.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2845.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2845.x * cbModelParam._m0[1u].z;
        }
        _2027 = frontier_phi_25_49_ladder_2;
        _2029 = frontier_phi_25_49_ladder_1;
        _2031 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1005, _1006, _1007), _1937);
        _2027 = _2011.x * cbModelParam._m0[1u].z;
        _2029 = _2011.y * cbModelParam._m0[1u].z;
        _2031 = _2011.z * cbModelParam._m0[1u].z;
    }
    float _2044 = (((_1032 * _981) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2027 - _1928)) + _1928);
    float _2046 = (((_1032 * _983) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2029 - _1930)) + _1930);
    float _2048 = (((_1032 * _984) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2031 - _1932)) + _1932);
    float _2051 = fma(_2048, cbSceneParam._m0[89u].z, fma(_2046, cbSceneParam._m0[89u].y, _2044 * cbSceneParam._m0[89u].x));
    float _2054 = fma(_2048, cbSceneParam._m0[90u].z, fma(_2046, cbSceneParam._m0[90u].y, _2044 * cbSceneParam._m0[90u].x));
    float _2057 = fma(_2048, cbSceneParam._m0[91u].z, fma(_2046, cbSceneParam._m0[91u].y, _2044 * cbSceneParam._m0[91u].x));
    uvec4 _2067 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2069 = _2067.x * 14u;
    uint _2070 = _2069 + 13u;
    float _2077 = _997 + (-1.0);
    float _2082 = (cbLight._m0[_2070].x * _2077) + 1.0;
    float _2083 = (cbLight._m0[_2070].y * _2077) + 1.0;
    float _2084 = (cbLight._m0[_2070].z * _2077) + 1.0;
    float _2085 = (cbLight._m0[_2070].w * _2077) + 1.0;
    uint _2086 = _2069 + 5u;
    float _2092 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
    uint _2096 = _2069 + 4u;
    float _2102 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
    uint _2106 = _2069 | 1u;
    float _2117 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_820, _821, _822));
    float _2120 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_820, _821, _822));
    float _4367 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _4378 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2125 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2127 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2134 = ((cbLight._m0[_2086].x * _2092) * _2127) + ((cbLight._m0[_2096].x * _2102) * _2125);
    float _2135 = ((_2092 * cbLight._m0[_2086].y) * _2127) + ((_2102 * cbLight._m0[_2096].y) * _2125);
    float _2136 = ((_2092 * cbLight._m0[_2086].z) * _2127) + ((_2102 * cbLight._m0[_2096].z) * _2125);
    uvec4 _2140 = floatBitsToUint(cbLight._m0[_2069 + 12u]);
    bool _2142 = _2140.x == 0u;
    float _2153;
    float _2155;
    float _2157;
    if (_2142)
    {
        _2153 = _2134;
        _2155 = _2135;
        _2157 = _2136;
    }
    else
    {
        uint _2161 = _2069 + 6u;
        float _2177 = (dot(vec3(cbLight._m0[_2069 + 2u].xyz), vec3(_820, _821, _822)) * 0.5) + 0.5;
        float _2178 = _2177 * _2177;
        float _4389 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2179 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2180 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2153 = (((cbLight._m0[_2161].x * 0.3183098733425140380859375) * _2179) * _2180) + _2134;
        _2155 = (((cbLight._m0[_2161].y * 0.3183098733425140380859375) * _2179) * _2180) + _2135;
        _2157 = (((cbLight._m0[_2161].z * 0.3183098733425140380859375) * _2179) * _2180) + _2136;
    }
    bool _2160 = _2140.y == 0u;
    float _2198;
    float _2200;
    float _2202;
    if (_2160)
    {
        _2198 = _2153;
        _2200 = _2155;
        _2202 = _2157;
    }
    else
    {
        uint _2368 = _2069 + 7u;
        float _2384 = (dot(vec3(cbLight._m0[_2069 + 3u].xyz), vec3(_820, _821, _822)) * 0.5) + 0.5;
        float _2385 = _2384 * _2384;
        float _4405 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2386 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2387 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2198 = (((cbLight._m0[_2368].x * 0.3183098733425140380859375) * _2386) * _2387) + _2153;
        _2200 = (((cbLight._m0[_2368].y * 0.3183098733425140380859375) * _2386) * _2387) + _2155;
        _2202 = (((cbLight._m0[_2368].z * 0.3183098733425140380859375) * _2386) * _2387) + _2157;
    }
    uint _2205 = _2069 + 8u;
    float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _823) * 0.949999988079071044921875);
    float _2219 = _2218 * _2218;
    float _2220 = cbLight._m0[_2069].x + _899;
    float _2221 = cbLight._m0[_2069].y + _900;
    float _2222 = cbLight._m0[_2069].z + _901;
    float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
    float _2227 = _2226 * _2220;
    float _2228 = _2226 * _2221;
    float _2229 = _2226 * _2222;
    float _2230 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2069].xyz));
    float _4421 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _4432 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2234 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2235 = dot(vec3(_820, _821, _822), vec3(_2227, _2228, _2229));
    float _4443 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2239 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2227, _2228, _2229));
    float _4454 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2243 = _2219 * _2219;
    float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
    float _2255 = exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0);
    float _2256 = 0.959999978542327880859375 - _978;
    float _2258 = 0.959999978542327880859375 - _979;
    float _2259 = 0.959999978542327880859375 - _980;
    float _2266 = 1.0 - _2219;
    float _2277 = (0.5 / (((_2234 * ((_2233 * _2266) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2234 * _2266) + _2219) * _2233))) * _2233;
    float _4465 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2279 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
    uint _2290 = _2069 + 9u;
    float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _823) * 0.949999988079071044921875);
    float _2302 = _2301 * _2301;
    float _2303 = cbLight._m0[_2106].x + _899;
    float _2304 = cbLight._m0[_2106].y + _900;
    float _2305 = cbLight._m0[_2106].z + _901;
    float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
    float _2310 = _2309 * _2303;
    float _2311 = _2309 * _2304;
    float _2312 = _2309 * _2305;
    float _2313 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2106].xyz));
    float _4476 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2317 = dot(vec3(_820, _821, _822), vec3(_2310, _2311, _2312));
    float _4487 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2321 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2310, _2311, _2312));
    float _4498 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2325 = _2302 * _2302;
    float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
    float _2336 = exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0);
    float _2343 = 1.0 - _2302;
    float _2353 = (0.5 / (((_2234 * ((_2316 * _2343) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2234 * _2343) + _2302) * _2316))) * _2316;
    float _4509 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2355 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
    float _2365 = (((((_2336 * _2256) + _981) * cbLight._m0[_2290].x) * _2355) * _2092) + (((((_2255 * _2256) + _981) * cbLight._m0[_2205].x) * _2279) * _2102);
    float _2366 = (((((_2336 * _2258) + _983) * cbLight._m0[_2290].y) * _2355) * _2092) + (((((_2255 * _2258) + _983) * cbLight._m0[_2205].y) * _2279) * _2102);
    float _2367 = (((((_2336 * _2259) + _984) * cbLight._m0[_2290].z) * _2355) * _2092) + (((((_2255 * _2259) + _984) * cbLight._m0[_2205].z) * _2279) * _2102);
    float _2429;
    float _2431;
    float _2433;
    if (_2142)
    {
        _2429 = _2365;
        _2431 = _2366;
        _2433 = _2367;
    }
    else
    {
        uint _2435 = _2069 + 2u;
        uint _2439 = _2069 + 10u;
        float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _823) * 0.949999988079071044921875);
        float _2454 = _2453 * _2453;
        float _2455 = cbLight._m0[_2435].x + _899;
        float _2456 = cbLight._m0[_2435].y + _900;
        float _2457 = cbLight._m0[_2435].z + _901;
        float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
        float _2462 = _2461 * _2455;
        float _2463 = _2461 * _2456;
        float _2464 = _2461 * _2457;
        float _2465 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2435].xyz));
        float _4520 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2469 = dot(vec3(_820, _821, _822), vec3(_2462, _2463, _2464));
        float _4531 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2473 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2462, _2463, _2464));
        float _4542 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2477 = _2454 * _2454;
        float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
        float _2488 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
        float _2495 = 1.0 - _2454;
        float _2505 = (0.5 / (((_2234 * ((_2468 * _2495) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2234 * _2495) + _2454) * _2468))) * _2468;
        float _4553 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2507 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
        float _2508 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2429 = (((((_2488 * _2256) + _981) * cbLight._m0[_2439].x) * _2507) * _2508) + _2365;
        _2431 = (((((_2488 * _2258) + _983) * cbLight._m0[_2439].y) * _2507) * _2508) + _2366;
        _2433 = (((((_2488 * _2259) + _984) * cbLight._m0[_2439].z) * _2507) * _2508) + _2367;
    }
    float _2543;
    float _2545;
    float _2547;
    if (_2160)
    {
        _2543 = _2429;
        _2545 = _2431;
        _2547 = _2433;
    }
    else
    {
        uint _2554 = _2069 + 3u;
        uint _2558 = _2069 + 11u;
        float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2554].w)) * _823) * 0.949999988079071044921875);
        float _2573 = _2572 * _2572;
        float _2574 = cbLight._m0[_2554].x + _899;
        float _2575 = cbLight._m0[_2554].y + _900;
        float _2576 = cbLight._m0[_2554].z + _901;
        float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
        float _2581 = _2580 * _2574;
        float _2582 = _2580 * _2575;
        float _2583 = _2580 * _2576;
        float _2584 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2554].xyz));
        float _4569 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2588 = dot(vec3(_820, _821, _822), vec3(_2581, _2582, _2583));
        float _4580 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2592 = dot(vec3(cbLight._m0[_2554].xyz), vec3(_2581, _2582, _2583));
        float _4591 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2596 = _2573 * _2573;
        float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
        float _2607 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
        float _2614 = 1.0 - _2573;
        float _2624 = (0.5 / (((_2234 * ((_2587 * _2614) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2234 * _2614) + _2573) * _2587))) * _2587;
        float _4602 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2626 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
        float _2627 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2543 = (((((_2607 * _2256) + _981) * cbLight._m0[_2558].x) * _2626) * _2627) + _2429;
        _2545 = (((((_2607 * _2258) + _983) * cbLight._m0[_2558].y) * _2626) * _2627) + _2431;
        _2547 = (((((_2607 * _2259) + _984) * cbLight._m0[_2558].z) * _2626) * _2627) + _2433;
    }
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_2067.y == 0u)
    {
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2702;
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2702;
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2702;
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.x;
        uint _2729 = uint((float(_2717.y) * floor(float(uint(cbSceneParam._m0[85u].y * _920) / _2718))) + floor(float(uint(cbSceneParam._m0[85u].x * _919) / _2718)));
        float _2739 = (log2(_2705 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2740 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        uint _2743 = uint(isnan(14.0) ? _2740 : (isnan(_2740) ? 14.0 : min(_2740, 14.0)));
        uvec4 _2748 = texelFetch(g_lightClusterGridBuffer, int(((_2743 << 2u) + (_2729 << 6u)) >> 2u));
        uint _2749 = _2748.x;
        uint _2750 = _2717.z;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        if (((((1u << ((_2750 >> 4u) & 15u)) + 4294967295u) & _2749) == 0u) || ((_2750 & 240u) == 0u))
        {
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
        }
        else
        {
            float _2851;
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            uint _3008 = 0u;
            uint _3017;
            bool _3018;
            for (;;)
            {
                _3017 = texelFetch(g_lightClassification, int((((_2743 << 5u) + (_2729 << 9u)) + (_3008 << 2u)) >> 2u)).x;
                _3018 = _3017 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3018)
                {
                    frontier_phi_66_pred = _3002;
                    frontier_phi_66_pred_1 = _3007;
                    frontier_phi_66_pred_2 = _3006;
                    frontier_phi_66_pred_3 = _3005;
                    frontier_phi_66_pred_4 = _3004;
                    frontier_phi_66_pred_5 = _3003;
                }
                else
                {
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    uint _3153;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3017;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    for (;;)
                    {
                        uint _3157 = uint(findLSB(_3153)) + (_3008 << 5u);
                        uint _3154 = (_3153 + 4294967295u) & _3153;
                        uint _3159 = _3157 * 48u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3179 = (_3157 * 48u) + 4u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3198 = (_3157 * 48u) + 8u;
                        vec3 _3209 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x));
                        float _3213 = _3173.x - _2703;
                        float _3214 = _3173.y - _2704;
                        float _3215 = _3173.z - _2705;
                        float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                        float _3219 = inversesqrt(_3216);
                        float _3220 = _3219 * _3213;
                        float _3221 = _3219 * _3214;
                        float _3222 = _3219 * _3215;
                        float _3223 = dot(vec3(_938, _941, _944), vec3(_3220, _3221, _3222));
                        float _3228 = 1.0 - (_3216 * _3173.w);
                        float _4628 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3230 = sqrt(_3216) * _3192.w;
                        float _3233 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3223) + _3234;
                        float _3240 = _3230 * _3230;
                        float _3244 = ((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3229) / ((_3240 * 0.699999988079071044921875) + 1.0);
                        float _3248 = (-0.0) - _2703;
                        float _3249 = (-0.0) - _2704;
                        float _3250 = (-0.0) - _2705;
                        float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3265 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                        float _3266 = 1.0 - _1013;
                        float _3273 = sqrt(1.0 - ((1.0 - (_3266 * _3266)) * (1.0 - (_3265 * _3265))));
                        float _3274 = _3273 * _3273;
                        float _3275 = _3274 * _3274;
                        float _3276 = _3255 + _3220;
                        float _3277 = _3256 + _3221;
                        float _3278 = _3257 + _3222;
                        float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                        float _3286 = dot(vec3(_938, _941, _944), vec3(_3255, _3256, _3257));
                        float _4644 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3290 = dot(vec3(_938, _941, _944), vec3(_3282 * _3276, _3282 * _3277, _3282 * _3278));
                        float _4655 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3297 = ((_3293 * _3293) * (_3275 + (-1.0))) + 1.0;
                        float _3298 = _3233 * _3274;
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3223) + _3299;
                        float _4666 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3303 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3304 = 1.0 - _3274;
                        float _3314 = (0.5 / (((_3303 * ((_3289 * _3304) + _3274)) + 9.9999999392252902907785028219223e-09) + (((_3303 * _3304) + _3274) * _3289))) * _3303;
                        float _4677 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3325 = (((_3275 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3297 * _3297) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125))) * _3229;
                        _3077 = (_3244 * _3192.x) + _3150;
                        _3078 = (_3244 * _3192.y) + _3151;
                        _3079 = (_3244 * _3192.z) + _3152;
                        _3074 = (_3325 * _3209.x) + _3147;
                        _3075 = (_3325 * _3209.y) + _3148;
                        _3076 = (_3325 * _3209.z) + _3149;
                        if (_3154 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3154;
                        }
                    }
                    frontier_phi_66_pred = _3074;
                    frontier_phi_66_pred_1 = _3079;
                    frontier_phi_66_pred_2 = _3078;
                    frontier_phi_66_pred_3 = _3077;
                    frontier_phi_66_pred_4 = _3076;
                    frontier_phi_66_pred_5 = _3075;
                }
                _2851 = frontier_phi_66_pred;
                _2861 = frontier_phi_66_pred_1;
                _2859 = frontier_phi_66_pred_2;
                _2857 = frontier_phi_66_pred_3;
                _2855 = frontier_phi_66_pred_4;
                _2853 = frontier_phi_66_pred_5;
                uint _3009 = _3008 + 1u;
                if (_3009 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3002 = _2851;
                    _3003 = _2853;
                    _3004 = _2855;
                    _3005 = _2857;
                    _3006 = _2859;
                    _3007 = _2861;
                    _3008 = _3009;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
        }
        uvec4 _2864 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2865 = _2864.z;
        uint _2867 = (_2865 >> 8u) & 15u;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        if (((4294967295u << _2867) & _2749) == 0u)
        {
            _2970 = _2850;
            _2972 = _2852;
            _2974 = _2854;
            _2976 = _2856;
            _2978 = _2858;
            _2980 = _2860;
        }
        else
        {
            float _2995 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
            float _2996 = _2995 * _2703;
            float _2997 = _2995 * _2704;
            float _2998 = _2995 * _2705;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2867 < ((_2865 >> 12u) & 15u))
            {
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _3130 = _2850;
                float _3131 = _2852;
                float _3132 = _2854;
                float _3133 = _2856;
                float _3134 = _2858;
                float _3135 = _2860;
                uint _3136 = _2867;
                uint _3145;
                bool _3146;
                for (;;)
                {
                    _3145 = texelFetch(g_lightClassification, int((((_2743 << 5u) + (_2729 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                    _3146 = _3145 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3146)
                    {
                        frontier_phi_77_pred = _3135;
                        frontier_phi_77_pred_1 = _3134;
                        frontier_phi_77_pred_2 = _3133;
                        frontier_phi_77_pred_3 = _3132;
                        frontier_phi_77_pred_4 = _3131;
                        frontier_phi_77_pred_5 = _3130;
                    }
                    else
                    {
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3352 = _3130;
                        float _3353 = _3131;
                        float _3354 = _3132;
                        float _3355 = _3133;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        uint _3358 = _3145;
                        uint _3359;
                        vec4 _3384;
                        float _3385;
                        vec4 _3400;
                        vec3 _3412;
                        vec4 _3427;
                        vec4 _3442;
                        float _3488;
                        bool _3489;
                        for (;;)
                        {
                            uint _3369 = ((_3136 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3358));
                            _3359 = (_3358 + 4294967295u) & _3358;
                            uint _3371 = _3369 * 40u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            _3385 = _3384.w;
                            uint _3387 = (_3369 * 40u) + 4u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3402 = (_3369 * 40u) + 8u;
                            _3412 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x));
                            uint _3414 = (_3369 * 40u) + 16u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3369 * 40u) + 20u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3444 = (_3369 * 40u) + 24u;
                            vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3463 = (_3369 * 40u) + 28u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            _3488 = fma(_2705, _3476.z, fma(_2704, _3476.y, _3476.x * _2703)) + _3476.w;
                            _3489 = !((fma(_2705, _3457.z, fma(_2704, _3457.y, _3457.x * _2703)) + _3457.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3489)
                            {
                                float _3516 = _3384.x - _2703;
                                float _3517 = _3384.y - _2704;
                                float _3518 = _3384.z - _2705;
                                float _3519 = dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518));
                                float _3522 = inversesqrt(_3519);
                                float _3523 = _3522 * _3516;
                                float _3524 = _3522 * _3517;
                                float _3525 = _3522 * _3518;
                                float _3529 = 1.0 - (_3519 / (_3385 * _3385));
                                float _4688 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3534 = sqrt(_3519) * _3400.w;
                                float _3536 = 1.39999997615814208984375 / (_3534 + 1.39999997615814208984375);
                                float _3537 = _3536 * _3536;
                                float _3540 = ((1.0 - _3537) * dot(vec3(_3523, _3524, _3525), vec3(_938, _941, _944))) + _3537;
                                float _3543 = _3534 * _3534;
                                float _3547 = (fma(_2705, _3427.z, fma(_2704, _3427.y, _3427.x * _2703)) + _3427.w) / _3488;
                                float _3548 = (fma(_2705, _3442.z, fma(_2704, _3442.y, _3442.x * _2703)) + _3442.w) / _3488;
                                float _3552 = 1.0 - dot(vec2(_3547, _3548), vec2(_3547, _3548));
                                float _4704 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3554 = _3553 * (((isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0))) * _3530) / ((_3543 * 0.699999988079071044921875) + 1.0));
                                float _3566 = exp2(log2(1.0 / ((_3543 * 3.5) + 5.0)) * 0.25);
                                float _3567 = 1.0 - _1013;
                                float _3574 = sqrt(1.0 - ((1.0 - (_3567 * _3567)) * (1.0 - (_3566 * _3566))));
                                float _3575 = _3574 * _3574;
                                float _3576 = _3575 * _3575;
                                float _3577 = _3523 - _2996;
                                float _3578 = _3524 - _2997;
                                float _3579 = _3525 - _2998;
                                float _3583 = inversesqrt(dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579)));
                                float _3587 = dot(vec3(_938, _941, _944), vec3((-0.0) - _2996, (-0.0) - _2997, (-0.0) - _2998));
                                float _4715 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3591 = dot(vec3(_938, _941, _944), vec3(_3583 * _3577, _3583 * _3578, _3583 * _3579));
                                float _4726 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3594 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3598 = ((_3594 * _3594) * (_3576 + (-1.0))) + 1.0;
                                float _3599 = _3536 * _3575;
                                float _3600 = _3599 * _3599;
                                float _3606 = ((1.0 - _3600) * dot(vec3(_938, _941, _944), vec3(_3523, _3524, _3525))) + _3600;
                                float _4737 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3608 = 1.0 - _3575;
                                float _3618 = (0.5 / (((_3607 * ((_3590 * _3608) + _3575)) + 9.9999999392252902907785028219223e-09) + (((_3607 * _3608) + _3575) * _3590))) * _3607;
                                float _4748 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3628 = (_3553 * _3530) * (((_3576 * 3.1415927410125732421875) * (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) / ((_3598 * _3598) * ((_3543 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3554 * _3400.y;
                                frontier_phi_83_pred_1 = _3554 * _3400.x;
                                frontier_phi_83_pred_2 = _3628 * _3412.z;
                                frontier_phi_83_pred_3 = _3628 * _3412.y;
                                frontier_phi_83_pred_4 = _3628 * _3412.x;
                                frontier_phi_83_pred_5 = _3554 * _3400.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3636 = frontier_phi_83_pred;
                            _3635 = frontier_phi_83_pred_1;
                            _3634 = frontier_phi_83_pred_2;
                            _3633 = frontier_phi_83_pred_3;
                            _3632 = frontier_phi_83_pred_4;
                            _3637 = frontier_phi_83_pred_5;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            if (_3359 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3359;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3344;
                        frontier_phi_77_pred_1 = _3343;
                        frontier_phi_77_pred_2 = _3342;
                        frontier_phi_77_pred_3 = _3341;
                        frontier_phi_77_pred_4 = _3340;
                        frontier_phi_77_pred_5 = _3339;
                    }
                    _2981 = frontier_phi_77_pred;
                    _2979 = frontier_phi_77_pred_1;
                    _2977 = frontier_phi_77_pred_2;
                    _2975 = frontier_phi_77_pred_3;
                    _2973 = frontier_phi_77_pred_4;
                    _2971 = frontier_phi_77_pred_5;
                    uint _3137 = _3136 + 1u;
                    if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3130 = _2971;
                        _3131 = _2973;
                        _3132 = _2975;
                        _3133 = _2977;
                        _3134 = _2979;
                        _3135 = _2981;
                        _3136 = _3137;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2975;
                frontier_phi_58_59_ladder_1 = _2981;
                frontier_phi_58_59_ladder_2 = _2979;
                frontier_phi_58_59_ladder_3 = _2977;
                frontier_phi_58_59_ladder_4 = _2973;
                frontier_phi_58_59_ladder_5 = _2971;
            }
            else
            {
                frontier_phi_58_59_ladder = _2854;
                frontier_phi_58_59_ladder_1 = _2860;
                frontier_phi_58_59_ladder_2 = _2858;
                frontier_phi_58_59_ladder_3 = _2856;
                frontier_phi_58_59_ladder_4 = _2852;
                frontier_phi_58_59_ladder_5 = _2850;
            }
            _2970 = frontier_phi_58_59_ladder_5;
            _2972 = frontier_phi_58_59_ladder_4;
            _2974 = frontier_phi_58_59_ladder;
            _2976 = frontier_phi_58_59_ladder_3;
            _2978 = frontier_phi_58_59_ladder_2;
            _2980 = frontier_phi_58_59_ladder_1;
        }
        float _2985 = isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0));
        _2762 = (_2985 * _2976) + _2198;
        _2764 = (_2985 * _2978) + _2200;
        _2766 = (_2985 * _2980) + _2202;
        _2768 = ((_2970 * _981) * _2985) + _2543;
        _2770 = ((_2972 * _983) * _2985) + _2545;
        _2772 = ((_2974 * _984) * _2985) + _2547;
    }
    else
    {
        _2762 = _2198;
        _2764 = _2200;
        _2766 = _2202;
        _2768 = _2543;
        _2770 = _2545;
        _2772 = _2547;
    }
    float _4764 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4775 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4786 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _2789 = ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2762 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _997))) + ((_2768 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1836)) * cbPerFrame._m0[3u].x);
    float _2790 = ((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2764 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _997))) + ((_2770 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1836)) * cbPerFrame._m0[3u].x);
    float _2791 = ((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2766 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _997))) + ((_2772 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1836)) * cbPerFrame._m0[3u].x);
    uint _2792 = _257 + 6u;
    float _2800 = _919 / cbSceneParam._m0[86u].x;
    float _2801 = _920 / cbSceneParam._m0[86u].y;
    vec4 _2815 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2800, _2801, (log2((isnan(cbSceneParam._m0[77u].w) ? _842 : (isnan(_842) ? cbSceneParam._m0[77u].w : min(_842, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2817 = _2815.x;
    float _2818 = _2815.y;
    float _2819 = _2815.z;
    float _2820 = _2815.w;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_842 > cbSceneParam._m0[78u].w)
    {
        float _2875 = isnan(_842) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _842 : min(cbSceneParam._m0[80u].w, _842));
        float _2876 = _2875 / _842;
        float _2887 = _2876 * _892;
        float _2888 = _893 * _2876;
        float _2889 = (-0.0) - _2888;
        float _2890 = _2876 * _894;
        float _2892 = (cbSceneParam._m0[77u].w * _2889) / _2875;
        float _2893 = _2892 + cbSceneParam._m0[79u].w;
        float _2894 = cbSceneParam._m0[79u].w - _2888;
        float _2900 = sqrt(((_2887 * _2887) + (_2888 * _2888)) + (_2890 * _2890));
        float _2903 = (1.0 - (cbSceneParam._m0[77u].w / _2875)) * _2900;
        float _2908 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2910 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3087;
        if (abs((_2889 - _2892) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3087 = ((((_2893 > 0.0) ? exp2(_2908 * _2893) : (2.0 - exp2(_2910 * _2893))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2903;
        }
        else
        {
            float _3031 = 1.0 / cbSceneParam._m0[80u].x;
            float _3032 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : max(_2893, _2894));
            float _3033 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : min(_2893, _2894));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            _3087 = ((abs(_2900 / _2889) * cbSceneParam._m0[80u].y) * ((((_3042 - _3043) * 2.0) - ((exp2(_2908 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0)))) - exp2(_2908 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))))) * _3031)) - ((exp2(_2910 * _3042) - exp2(_2910 * _3043)) * _3031))) + (_2903 * cbSceneParam._m0[80u].z);
        }
        vec4 _3089 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2800, _2801, 1.0), 0.0);
        float _3098 = exp2((_3087 * (-1.44269502162933349609375)) * (1.0 - _3089.w));
        float _3099 = log2(_3098);
        float _3115 = log2(_2820);
        _2912 = (exp2(_3115 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].x)) * _3089.x) / cbSceneParam._m0[78u].x)) + _2817;
        _2914 = (exp2(_3115 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].y)) * _3089.y) / cbSceneParam._m0[78u].y)) + _2818;
        _2916 = (exp2(_3115 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].z)) * _3089.z) / cbSceneParam._m0[78u].z)) + _2819;
        _2918 = _3098 * _2820;
    }
    else
    {
        _2912 = _2817;
        _2914 = _2818;
        _2916 = _2819;
        _2918 = _2820;
    }
    bool _3125;
    vec4 _2928;
    vec4 _2950;
    float _2952;
    float _2956;
    float _2957;
    float _2958;
    float _2959;
    bool _2969;
    for (;;)
    {
        _2928 = cbMatDynParam._m0[0u];
        float _2930 = roundEven(_2928.y);
        bool _2931 = _2930 == 3.0;
        float _2932 = log2(_2918);
        float _2939 = exp2(_2932 * cbSceneParam._m0[78u].x) * _2789;
        float _2940 = exp2(_2932 * cbSceneParam._m0[78u].y) * _2790;
        float _2941 = exp2(_2932 * cbSceneParam._m0[78u].z) * _2791;
        float _2948 = _908 + (-0.5);
        _2950 = cbMtdParam._m0[1u];
        _2952 = _2950.y * _2948;
        float _2955 = (_2930 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2956 = _2955 * (_2931 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2912)));
        _2957 = _2955 * (_2931 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2914)));
        _2958 = _2955 * (_2931 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2916)));
        _2959 = _2948 * 0.999000012874603271484375;
        _2969 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2969)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2959) < 0.5)
            {
                _3125 = true;
                break;
            }
        }
        uint _3066 = _957 + uint(_2928.w);
        if ((cbInstanceData._m0[_3066].w < 1.0) && ((cbInstanceData._m0[_3066].w + _2959) < 0.5))
        {
            _3125 = true;
            break;
        }
        if ((_2952 + 1.0) < _2950.x)
        {
            _3125 = true;
            break;
        }
        _3125 = false;
        break;
    }
    float _3330;
    if (_3125)
    {
        discard_state = true;
        _3330 = 0.0;
    }
    else
    {
        _3330 = cbInstanceData._m0[_2792].w;
    }
    SV_Target.x = _2956;
    SV_Target.y = _2957;
    SV_Target.z = _2958;
    SV_Target.w = _3330;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2792].w;
    discard_exit();
}


