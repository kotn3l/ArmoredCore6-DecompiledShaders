#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1175;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _356 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _356) * cbMtdParam._m0[24u].y) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3501 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _381 = (_374 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _382 = (_374 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _383 = (_374 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    float _452 = ((_422.z - _443) * _374) + _443;
    float _455 = ((((_422.x - _441) * _374) + _441) * 2.0) + (-1.0);
    float _457 = ((((_422.y - _442) * _374) + _442) * 2.0) + (-1.0);
    float _458 = dot(vec2(_455, _457), vec2(_455, _457));
    float _3512 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _463 = sqrt(1.0 - (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _496 = _494.x;
    float _497 = 1.0 - _496;
    float _510 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_496 - _497) * cbMtdParam._m0[24u].z) + _497) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3523 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _511 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _518 = (_511 * ((_402.x * cbMtdParam._m0[18u].x) - _381)) + _381;
    float _519 = (_511 * ((_402.y * cbMtdParam._m0[18u].y) - _382)) + _382;
    float _520 = (_511 * ((_402.z * cbMtdParam._m0[18u].z) - _383)) + _383;
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _548 = _546.x;
    float _566 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _548) * _374) + _548;
    float _570 = ((_532.x - _566) * cbMtdParam._m0[19u].z) + _566;
    float _572 = _570 - (_570 * _511);
    vec4 _585 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _592 = (_585.x * 2.0) + (-1.0);
    float _593 = (_585.y * 2.0) + (-1.0);
    float _594 = dot(vec2(_592, _593), vec2(_592, _593));
    float _3534 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _602 = (_511 * (_585.z - _452)) + _452;
    float _614 = (((_592 - _455) + (cbMtdParam._m0[21u].x * _455)) * _511) + _455;
    float _615 = (((_593 - _457) + (cbMtdParam._m0[21u].x * _457)) * _511) + _457;
    float _616 = (_511 * (sqrt(1.0 - (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) - _463)) + _463;
    float _621 = cbMtdParam._m0[22u].x + _476.w;
    float _624 = fma(_616, _223 * NORMAL.x, fma(_615, _230 * TANGENT.x, (_216 * _208) * _614));
    float _627 = fma(_616, _223 * NORMAL.y, fma(_615, _230 * TANGENT.y, (_216 * _209) * _614));
    float _630 = fma(_616, _223 * NORMAL.z, fma(_615, _230 * TANGENT.z, (_216 * _210) * _614));
    float _634 = inversesqrt(dot(vec3(_624, _627, _630), vec3(_624, _627, _630)));
    float _635 = _634 * _624;
    float _636 = _634 * _627;
    float _637 = _634 * _630;
    float _3545 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _638 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _3556 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3567 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3578 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3589 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3600 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _643 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _657 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _708 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _698);
    float _709 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _698);
    float _710 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _698);
    float _714 = inversesqrt(dot(vec3(_708, _709, _710), vec3(_708, _709, _710)));
    float _715 = _708 * _714;
    float _716 = _709 * _714;
    float _717 = _710 * _714;
    float _723 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _724 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _742 = fma(_637, cbSceneParam._m0[5u].z, fma(_636, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _635));
    float _745 = fma(_637, cbSceneParam._m0[6u].z, fma(_636, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _635));
    float _748 = fma(_637, cbSceneParam._m0[7u].z, fma(_636, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _635));
    uint _762 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _768 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_762].x;
    float _769 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * cbInstanceData._m0[_762].y;
    float _770 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * cbInstanceData._m0[_762].z;
    float _3611 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _774 = 1.0 - _643;
    float _775 = _771 * _774;
    float _776 = _772 * _774;
    float _777 = _773 * _774;
    float _782 = (_771 + (-0.039999999105930328369140625)) * _643;
    float _783 = (_772 + (-0.039999999105930328369140625)) * _643;
    float _784 = (_773 + (-0.039999999105930328369140625)) * _643;
    float _785 = _782 + 0.039999999105930328369140625;
    float _787 = _783 + 0.039999999105930328369140625;
    float _788 = _784 + 0.039999999105930328369140625;
    vec4 _797 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _723, cbSceneParam._m0[86u].y * _724));
    float _801 = ((isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * TEXCOORD_5.w) * _797.x;
    float _802 = dot(vec3(_635, _636, _637), vec3(_715, _716, _717));
    float _805 = _802 * 2.0;
    float _809 = (_805 * _635) - _715;
    float _810 = (_805 * _636) - _716;
    float _811 = (_805 * _637) - _717;
    float _815 = abs(dot(vec3(_715, _716, _717), vec3(_635, _636, _637)));
    float _3644 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _817 = sqrt(_638);
    float _830 = exp2((_817 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_817 * 3.0));
    float _836 = (1.0 - _830) * ((_817 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _837 = _830 * _817;
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1174;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _899 = fma(_873, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865));
        float _903 = fma(_873, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865));
        float _907 = fma(_873, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865));
        float _932 = _865 + _635;
        float _933 = _869 + _636;
        float _934 = _873 + _637;
        float _944 = fma(_934, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932)) - _899;
        float _945 = fma(_934, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932)) - _903;
        float _946 = fma(_934, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932)) - _907;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_899 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_903 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[34u].z) + ((((((_907 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1002 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_968.x + (-0.5));
        float _1004 = _1002 * (_968.y + (-0.5));
        float _1005 = _1002 * (_968.z + (-0.5));
        float _1012 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_975.x + (-0.5));
        float _1014 = _1012 * (_975.y + (-0.5));
        float _1015 = _1012 * (_975.z + (-0.5));
        float _1022 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_982.x + (-0.5));
        float _1024 = _1022 * (_982.y + (-0.5));
        float _1025 = _1022 * (_982.z + (-0.5));
        float _1032 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_989.x + (-0.5));
        float _1034 = _1032 * (_989.y + (-0.5));
        float _1035 = _1032 * (_989.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1056 = (dot(vec3(_635, _636, _637), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1066 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3692 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1068 + 1.0))) + _1073) * _1036;
        float _1083 = _1004 * 0.5;
        float _1084 = _1014 * 0.5;
        float _1085 = _1024 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_635, _636, _637), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3725 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1110 + 1.0))) + _1115) * _1037;
        float _1125 = _1005 * 0.5;
        float _1126 = _1015 * 0.5;
        float _1127 = _1025 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_635, _636, _637), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3758 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1152 + 1.0))) + _1157) * _1038;
        _1174 = _1005;
        _1176 = _1004;
        _1177 = _1003;
        _1178 = _1015;
        _1179 = _1014;
        _1180 = _1013;
        _1181 = _1025;
        _1182 = _1024;
        _1183 = _1023;
        _1184 = _1038;
        _1185 = _1037;
        _1186 = _1036;
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _1175;
        _1176 = _1175;
        _1177 = _1175;
        _1178 = _1175;
        _1179 = _1175;
        _1180 = _1175;
        _1181 = _1175;
        _1182 = _1175;
        _1183 = _1175;
        _1184 = _1175;
        _1185 = _1175;
        _1186 = _1175;
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
    }
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1214 = fma(_873, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865));
        float _1218 = fma(_873, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865));
        float _1222 = fma(_873, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865));
        float _1245 = _865 + _635;
        float _1246 = _869 + _636;
        float _1247 = _873 + _637;
        float _1257 = fma(_1247, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245)) - _1214;
        float _1258 = fma(_1247, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245)) - _1218;
        float _1259 = fma(_1247, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245)) - _1222;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1214 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1218 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[35u].z) + ((((((_1222 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1313 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1280.x + (-0.5));
        float _1315 = _1313 * (_1280.y + (-0.5));
        float _1316 = _1313 * (_1280.z + (-0.5));
        float _1323 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1287.x + (-0.5));
        float _1325 = _1323 * (_1287.y + (-0.5));
        float _1326 = _1323 * (_1287.z + (-0.5));
        float _1333 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1294.x + (-0.5));
        float _1335 = _1333 * (_1294.y + (-0.5));
        float _1336 = _1333 * (_1294.z + (-0.5));
        float _1343 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1301.x + (-0.5));
        float _1345 = _1343 * (_1301.y + (-0.5));
        float _1346 = _1343 * (_1301.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_635, _636, _637), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3821 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1377 + 1.0))) + _1382) * _1347;
        float _1392 = _1315 * 0.5;
        float _1393 = _1325 * 0.5;
        float _1394 = _1335 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_635, _636, _637), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3854 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1419 + 1.0))) + _1424) * _1348;
        float _1434 = _1316 * 0.5;
        float _1435 = _1326 * 0.5;
        float _1436 = _1336 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_635, _636, _637), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3887 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1461 + 1.0))) + _1466) * _1349;
        _1483 = _1316;
        _1484 = _1315;
        _1485 = _1314;
        _1486 = _1326;
        _1487 = _1325;
        _1488 = _1324;
        _1489 = _1336;
        _1490 = _1335;
        _1491 = _1334;
        _1492 = _1349;
        _1493 = _1348;
        _1494 = _1347;
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1175;
        _1484 = _1175;
        _1485 = _1175;
        _1486 = _1175;
        _1487 = _1175;
        _1488 = _1175;
        _1489 = _1175;
        _1490 = _1175;
        _1491 = _1175;
        _1492 = _1175;
        _1493 = _1175;
        _1494 = _1175;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1187)) + _1187;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1188)) + _1188;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1189)) + _1189;
    float _1530 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1507));
    float _1551 = _809 * 0.5;
    float _1552 = _810 * 0.5;
    float _1553 = _811 * 0.5;
    float _1554 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1557 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1560 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1594;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1567 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1174, _1178, _1181, _1184));
        float _1571 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1575 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1582 = dot(vec4(cbModelParam._m0[39u]), vec4(_1551, _1552, _1553, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1605;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1596 = dot(vec4(cbModelParam._m0[40u]), vec4(_1551, _1552, _1553, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1609 = (_1605 * cbModelParam._m0[1u].x) + (_1594 * (1.0 - cbModelParam._m0[1u].x));
    float _1619 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _638);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1619 : min(cbModelParam._m0[25u].z, _1619));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1667 = fma(_873, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865)) + cbModelParam._m0[13u].w;
        float _1671 = fma(_873, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865)) + cbModelParam._m0[14u].w;
        float _1675 = fma(_873, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865)) + cbModelParam._m0[15u].w;
        float _1678 = fma(_811, cbModelParam._m0[13u].z, fma(_810, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809));
        float _1681 = fma(_811, cbModelParam._m0[14u].z, fma(_810, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809));
        float _1684 = fma(_811, cbModelParam._m0[15u].z, fma(_810, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809));
        float _1712;
        if (_1678 > 0.0)
        {
            _1712 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1712 = frontier_phi_14_12_ladder;
        }
        float _1914;
        if (_1681 > 0.0)
        {
            _1914 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1914 = frontier_phi_23_19_ladder;
        }
        float _2168;
        if (_1684 > 0.0)
        {
            _2168 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2168 = frontier_phi_35_30_ladder;
        }
        float _2170 = isnan(_1914) ? _1712 : (isnan(_1712) ? _1914 : min(_1712, _1914));
        float _2171 = isnan(_2168) ? _2170 : (isnan(_2170) ? _2168 : min(_2170, _2168));
        float _2175 = (_2171 * _1678) + _1667;
        float _2176 = (_2171 * _1681) + _1671;
        float _2177 = (_2171 * _1684) + _1675;
        float _2178 = _2171 * 9.9999997473787516355514526367188e-05;
        float _2180 = (-1.0) - _2178;
        float _2182 = _2178 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2177 > _2182) || ((_2177 < _2180) || ((_2176 > _2182) || ((_2176 < _2180) || ((_2175 < _2180) || (_2175 > _2182))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2305 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2177, cbModelParam._m0[9u].z, fma(_2176, cbModelParam._m0[9u].y, _2175 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2177, cbModelParam._m0[10u].z, fma(_2176, cbModelParam._m0[10u].y, _2175 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2177, cbModelParam._m0[11u].z, fma(_2176, cbModelParam._m0[11u].y, _2175 * cbModelParam._m0[11u].x))), _1620);
            frontier_phi_13_35_ladder = _2305.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2305.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2305.x * cbModelParam._m0[1u].y;
        }
        _1700 = frontier_phi_13_35_ladder_2;
        _1702 = frontier_phi_13_35_ladder_1;
        _1704 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_809, _810, _811), _1620);
        _1700 = _1688.x * cbModelParam._m0[1u].y;
        _1702 = _1688.y * cbModelParam._m0[1u].y;
        _1704 = _1688.z * cbModelParam._m0[1u].y;
    }
    float _1708 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _638);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1708 : min(cbModelParam._m0[25u].w, _1708));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1762 = fma(_873, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865)) + cbModelParam._m0[21u].w;
        float _1766 = fma(_873, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865)) + cbModelParam._m0[22u].w;
        float _1770 = fma(_873, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865)) + cbModelParam._m0[23u].w;
        float _1773 = fma(_811, cbModelParam._m0[21u].z, fma(_810, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809));
        float _1776 = fma(_811, cbModelParam._m0[22u].z, fma(_810, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809));
        float _1779 = fma(_811, cbModelParam._m0[23u].z, fma(_810, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809));
        float _1919;
        if (_1773 > 0.0)
        {
            _1919 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1919 = frontier_phi_25_21_ladder;
        }
        float _2195;
        if (_1776 > 0.0)
        {
            _2195 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2195 = frontier_phi_37_32_ladder;
        }
        float _2408;
        if (_1779 > 0.0)
        {
            _2408 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2408 = frontier_phi_46_43_ladder;
        }
        float _2410 = isnan(_2195) ? _1919 : (isnan(_1919) ? _2195 : min(_1919, _2195));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1773) + _1762;
        float _2416 = (_2411 * _1776) + _1766;
        float _2417 = (_2411 * _1779) + _1770;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2418;
        float _2421 = _2418 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2417 > _2421) || ((_2417 < _2419) || ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 < _2419) || (_2415 > _2421))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2417, cbModelParam._m0[17u].z, fma(_2416, cbModelParam._m0[17u].y, _2415 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2417, cbModelParam._m0[18u].z, fma(_2416, cbModelParam._m0[18u].y, _2415 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2417, cbModelParam._m0[19u].z, fma(_2416, cbModelParam._m0[19u].y, _2415 * cbModelParam._m0[19u].x))), _1709);
            frontier_phi_22_46_ladder = _2616.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2616.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2616.x * cbModelParam._m0[1u].z;
        }
        _1798 = frontier_phi_22_46_ladder_2;
        _1800 = frontier_phi_22_46_ladder_1;
        _1802 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_809, _810, _811), _1709);
        _1798 = _1782.x * cbModelParam._m0[1u].z;
        _1800 = _1782.y * cbModelParam._m0[1u].z;
        _1802 = _1782.z * cbModelParam._m0[1u].z;
    }
    float _1815 = (((_836 * _785) + _837) * _801) * ((cbModelParam._m0[1u].w * (_1798 - _1700)) + _1700);
    float _1817 = (((_836 * _787) + _837) * _801) * ((cbModelParam._m0[1u].w * (_1800 - _1702)) + _1702);
    float _1819 = (((_836 * _788) + _837) * _801) * ((cbModelParam._m0[1u].w * (_1802 - _1704)) + _1704);
    float _1822 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1817, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1825 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1817, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1828 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1817, cbSceneParam._m0[91u].y, _1815 * cbSceneParam._m0[91u].x));
    uvec4 _1838 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1840 = _1838.x * 14u;
    uint _1841 = _1840 + 13u;
    float _1848 = _801 + (-1.0);
    float _1853 = (cbLight._m0[_1841].x * _1848) + 1.0;
    float _1854 = (cbLight._m0[_1841].y * _1848) + 1.0;
    float _1855 = (cbLight._m0[_1841].z * _1848) + 1.0;
    float _1856 = (cbLight._m0[_1841].w * _1848) + 1.0;
    uint _1857 = _1840 + 5u;
    float _1863 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1867 = _1840 + 4u;
    float _1873 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1877 = _1840 | 1u;
    float _1888 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_635, _636, _637));
    float _1891 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_635, _636, _637));
    float _4023 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _4034 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1896 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 0.3183098733425140380859375;
    float _1898 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.3183098733425140380859375;
    float _1905 = ((cbLight._m0[_1857].x * _1863) * _1898) + ((cbLight._m0[_1867].x * _1873) * _1896);
    float _1906 = ((_1863 * cbLight._m0[_1857].y) * _1898) + ((_1873 * cbLight._m0[_1867].y) * _1896);
    float _1907 = ((_1863 * cbLight._m0[_1857].z) * _1898) + ((_1873 * cbLight._m0[_1867].z) * _1896);
    uvec4 _1911 = floatBitsToUint(cbLight._m0[_1840 + 12u]);
    bool _1913 = _1911.x == 0u;
    float _1924;
    float _1926;
    float _1928;
    if (_1913)
    {
        _1924 = _1905;
        _1926 = _1906;
        _1928 = _1907;
    }
    else
    {
        uint _1932 = _1840 + 6u;
        float _1948 = (dot(vec3(cbLight._m0[_1840 + 2u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _1949 = _1948 * _1948;
        float _4045 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1951 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _1924 = (((cbLight._m0[_1932].x * 0.3183098733425140380859375) * _1950) * _1951) + _1905;
        _1926 = (((cbLight._m0[_1932].y * 0.3183098733425140380859375) * _1950) * _1951) + _1906;
        _1928 = (((cbLight._m0[_1932].z * 0.3183098733425140380859375) * _1950) * _1951) + _1907;
    }
    bool _1931 = _1911.y == 0u;
    float _1969;
    float _1971;
    float _1973;
    if (_1931)
    {
        _1969 = _1924;
        _1971 = _1926;
        _1973 = _1928;
    }
    else
    {
        uint _2139 = _1840 + 7u;
        float _2155 = (dot(vec3(cbLight._m0[_1840 + 3u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2156 = _2155 * _2155;
        float _4061 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2157 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2158 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _1969 = (((cbLight._m0[_2139].x * 0.3183098733425140380859375) * _2157) * _2158) + _1924;
        _1971 = (((cbLight._m0[_2139].y * 0.3183098733425140380859375) * _2157) * _2158) + _1926;
        _1973 = (((cbLight._m0[_2139].z * 0.3183098733425140380859375) * _2157) * _2158) + _1928;
    }
    uint _1976 = _1840 + 8u;
    float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1840].w)) * _638) * 0.949999988079071044921875);
    float _1990 = _1989 * _1989;
    float _1991 = cbLight._m0[_1840].x + _715;
    float _1992 = cbLight._m0[_1840].y + _716;
    float _1993 = cbLight._m0[_1840].z + _717;
    float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
    float _1998 = _1997 * _1991;
    float _1999 = _1997 * _1992;
    float _2000 = _1997 * _1993;
    float _2001 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_1840].xyz));
    float _4077 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _2005 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _2006 = dot(vec3(_635, _636, _637), vec3(_1998, _1999, _2000));
    float _4099 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2010 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_1998, _1999, _2000));
    float _4110 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2014 = _1990 * _1990;
    float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
    float _2026 = exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0);
    float _2027 = 0.959999978542327880859375 - _782;
    float _2029 = 0.959999978542327880859375 - _783;
    float _2030 = 0.959999978542327880859375 - _784;
    float _2037 = 1.0 - _1990;
    float _2048 = (0.5 / (((_2005 * ((_2004 * _2037) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2037) + _1990) * _2004))) * _2004;
    float _4121 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2050 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
    uint _2061 = _1840 + 9u;
    float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1877].w)) * _638) * 0.949999988079071044921875);
    float _2073 = _2072 * _2072;
    float _2074 = cbLight._m0[_1877].x + _715;
    float _2075 = cbLight._m0[_1877].y + _716;
    float _2076 = cbLight._m0[_1877].z + _717;
    float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
    float _2081 = _2080 * _2074;
    float _2082 = _2080 * _2075;
    float _2083 = _2080 * _2076;
    float _2084 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_1877].xyz));
    float _4132 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _2088 = dot(vec3(_635, _636, _637), vec3(_2081, _2082, _2083));
    float _4143 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2092 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_2081, _2082, _2083));
    float _4154 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2096 = _2073 * _2073;
    float _2100 = ((_2091 * _2091) * (_2096 + (-1.0))) + 1.0;
    float _2107 = exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0);
    float _2114 = 1.0 - _2073;
    float _2124 = (0.5 / (((_2005 * ((_2087 * _2114) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2114) + _2073) * _2087))) * _2087;
    float _4165 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2126 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2096 / ((_2100 * _2100) * 3.141590118408203125));
    float _2136 = (((((_2107 * _2027) + _785) * cbLight._m0[_2061].x) * _2126) * _1863) + (((((_2026 * _2027) + _785) * cbLight._m0[_1976].x) * _2050) * _1873);
    float _2137 = (((((_2107 * _2029) + _787) * cbLight._m0[_2061].y) * _2126) * _1863) + (((((_2026 * _2029) + _787) * cbLight._m0[_1976].y) * _2050) * _1873);
    float _2138 = (((((_2107 * _2030) + _788) * cbLight._m0[_2061].z) * _2126) * _1863) + (((((_2026 * _2030) + _788) * cbLight._m0[_1976].z) * _2050) * _1873);
    float _2200;
    float _2202;
    float _2204;
    if (_1913)
    {
        _2200 = _2136;
        _2202 = _2137;
        _2204 = _2138;
    }
    else
    {
        uint _2206 = _1840 + 2u;
        uint _2210 = _1840 + 10u;
        float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _638) * 0.949999988079071044921875);
        float _2225 = _2224 * _2224;
        float _2226 = cbLight._m0[_2206].x + _715;
        float _2227 = cbLight._m0[_2206].y + _716;
        float _2228 = cbLight._m0[_2206].z + _717;
        float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
        float _2233 = _2232 * _2226;
        float _2234 = _2232 * _2227;
        float _2235 = _2232 * _2228;
        float _2236 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2206].xyz));
        float _4176 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2240 = dot(vec3(_635, _636, _637), vec3(_2233, _2234, _2235));
        float _4187 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2244 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2233, _2234, _2235));
        float _4198 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2248 = _2225 * _2225;
        float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
        float _2259 = exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0);
        float _2266 = 1.0 - _2225;
        float _2276 = (0.5 / (((_2005 * ((_2239 * _2266) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2266) + _2225) * _2239))) * _2239;
        float _4209 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2278 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
        float _2279 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2200 = (((((_2259 * _2027) + _785) * cbLight._m0[_2210].x) * _2278) * _2279) + _2136;
        _2202 = (((((_2259 * _2029) + _787) * cbLight._m0[_2210].y) * _2278) * _2279) + _2137;
        _2204 = (((((_2259 * _2030) + _788) * cbLight._m0[_2210].z) * _2278) * _2279) + _2138;
    }
    float _2314;
    float _2316;
    float _2318;
    if (_1931)
    {
        _2314 = _2200;
        _2316 = _2202;
        _2318 = _2204;
    }
    else
    {
        uint _2325 = _1840 + 3u;
        uint _2329 = _1840 + 11u;
        float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _638) * 0.949999988079071044921875);
        float _2344 = _2343 * _2343;
        float _2345 = cbLight._m0[_2325].x + _715;
        float _2346 = cbLight._m0[_2325].y + _716;
        float _2347 = cbLight._m0[_2325].z + _717;
        float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
        float _2352 = _2351 * _2345;
        float _2353 = _2351 * _2346;
        float _2354 = _2351 * _2347;
        float _2355 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2325].xyz));
        float _4225 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2359 = dot(vec3(_635, _636, _637), vec3(_2352, _2353, _2354));
        float _4236 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2363 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2352, _2353, _2354));
        float _4247 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2367 = _2344 * _2344;
        float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
        float _2378 = exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0);
        float _2385 = 1.0 - _2344;
        float _2395 = (0.5 / (((_2005 * ((_2358 * _2385) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2385) + _2344) * _2358))) * _2358;
        float _4258 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2397 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
        float _2398 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2314 = (((((_2378 * _2027) + _785) * cbLight._m0[_2329].x) * _2397) * _2398) + _2200;
        _2316 = (((((_2378 * _2029) + _787) * cbLight._m0[_2329].y) * _2397) * _2398) + _2202;
        _2318 = (((((_2378 * _2030) + _788) * cbLight._m0[_2329].z) * _2397) * _2398) + _2204;
    }
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_1838.y == 0u)
    {
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2473;
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2473;
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2473;
        uvec4 _2488 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2489 = _2488.x;
        uint _2500 = uint((float(_2488.y) * floor(float(uint(cbSceneParam._m0[85u].y * _724) / _2489))) + floor(float(uint(cbSceneParam._m0[85u].x * _723) / _2489)));
        float _2510 = (log2(_2476 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2511 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        uint _2514 = uint(isnan(14.0) ? _2511 : (isnan(_2511) ? 14.0 : min(_2511, 14.0)));
        uvec4 _2519 = texelFetch(g_lightClusterGridBuffer, int(((_2514 << 2u) + (_2500 << 6u)) >> 2u));
        uint _2520 = _2519.x;
        uint _2521 = _2488.z;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        if (((((1u << ((_2521 >> 4u) & 15u)) + 4294967295u) & _2520) == 0u) || ((_2521 & 240u) == 0u))
        {
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
        }
        else
        {
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            uint _2772 = 0u;
            uint _2781;
            bool _2782;
            for (;;)
            {
                _2781 = texelFetch(g_lightClassification, int((((_2514 << 5u) + (_2500 << 9u)) + (_2772 << 2u)) >> 2u)).x;
                _2782 = _2781 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2782)
                {
                    frontier_phi_61_pred = _2766;
                    frontier_phi_61_pred_1 = _2771;
                    frontier_phi_61_pred_2 = _2770;
                    frontier_phi_61_pred_3 = _2769;
                    frontier_phi_61_pred_4 = _2768;
                    frontier_phi_61_pred_5 = _2767;
                }
                else
                {
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    uint _2896;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2781;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    for (;;)
                    {
                        uint _2900 = uint(findLSB(_2896)) + (_2772 << 5u);
                        uint _2897 = (_2896 + 4294967295u) & _2896;
                        uint _2902 = _2900 * 48u;
                        vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2922 = (_2900 * 48u) + 4u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 3u)).x));
                        uint _2941 = (_2900 * 48u) + 8u;
                        vec3 _2952 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x));
                        float _2956 = _2916.x - _2474;
                        float _2957 = _2916.y - _2475;
                        float _2958 = _2916.z - _2476;
                        float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                        float _2962 = inversesqrt(_2959);
                        float _2963 = _2962 * _2956;
                        float _2964 = _2962 * _2957;
                        float _2965 = _2962 * _2958;
                        float _2966 = dot(vec3(_742, _745, _748), vec3(_2963, _2964, _2965));
                        float _2971 = 1.0 - (_2959 * _2916.w);
                        float _4284 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2973 = sqrt(_2959) * _2935.w;
                        float _2976 = 1.39999997615814208984375 / (_2973 + 1.39999997615814208984375);
                        float _2977 = _2976 * _2976;
                        float _2980 = ((1.0 - _2977) * _2966) + _2977;
                        float _2983 = _2973 * _2973;
                        float _2987 = ((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2972) / ((_2983 * 0.699999988079071044921875) + 1.0);
                        float _2991 = (-0.0) - _2474;
                        float _2992 = (-0.0) - _2475;
                        float _2993 = (-0.0) - _2476;
                        float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3008 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                        float _3009 = 1.0 - _817;
                        float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                        float _3017 = _3016 * _3016;
                        float _3018 = _3017 * _3017;
                        float _3019 = _2998 + _2963;
                        float _3020 = _2999 + _2964;
                        float _3021 = _3000 + _2965;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3029 = dot(vec3(_742, _745, _748), vec3(_2998, _2999, _3000));
                        float _4300 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _3033 = dot(vec3(_742, _745, _748), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                        float _4311 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                        float _3041 = _2976 * _3017;
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _2966) + _3042;
                        float _4322 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3046 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3047 = 1.0 - _3017;
                        float _3057 = (0.5 / (((_3046 * ((_3032 * _3047) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3046 * _3047) + _3017) * _3032))) * _3046;
                        float _4333 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3068 = (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) / ((_3040 * _3040) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125))) * _2972;
                        _2825 = (_2987 * _2935.x) + _2893;
                        _2826 = (_2987 * _2935.y) + _2894;
                        _2827 = (_2987 * _2935.z) + _2895;
                        _2822 = (_3068 * _2952.x) + _2890;
                        _2823 = (_3068 * _2952.y) + _2891;
                        _2824 = (_3068 * _2952.z) + _2892;
                        if (_2897 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2897;
                        }
                    }
                    frontier_phi_61_pred = _2822;
                    frontier_phi_61_pred_1 = _2827;
                    frontier_phi_61_pred_2 = _2826;
                    frontier_phi_61_pred_3 = _2825;
                    frontier_phi_61_pred_4 = _2824;
                    frontier_phi_61_pred_5 = _2823;
                }
                _2622 = frontier_phi_61_pred;
                _2632 = frontier_phi_61_pred_1;
                _2630 = frontier_phi_61_pred_2;
                _2628 = frontier_phi_61_pred_3;
                _2626 = frontier_phi_61_pred_4;
                _2624 = frontier_phi_61_pred_5;
                uint _2773 = _2772 + 1u;
                if (_2773 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2766 = _2622;
                    _2767 = _2624;
                    _2768 = _2626;
                    _2769 = _2628;
                    _2770 = _2630;
                    _2771 = _2632;
                    _2772 = _2773;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
        }
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.z;
        uint _2638 = (_2636 >> 8u) & 15u;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        if (((4294967295u << _2638) & _2520) == 0u)
        {
            _2734 = _2621;
            _2736 = _2623;
            _2738 = _2625;
            _2740 = _2627;
            _2742 = _2629;
            _2744 = _2631;
        }
        else
        {
            float _2759 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
            float _2760 = _2759 * _2474;
            float _2761 = _2759 * _2475;
            float _2762 = _2759 * _2476;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2638 < ((_2636 >> 12u) & 15u))
            {
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2873 = _2621;
                float _2874 = _2623;
                float _2875 = _2625;
                float _2876 = _2627;
                float _2877 = _2629;
                float _2878 = _2631;
                uint _2879 = _2638;
                uint _2888;
                bool _2889;
                for (;;)
                {
                    _2888 = texelFetch(g_lightClassification, int((((_2514 << 5u) + (_2500 << 9u)) + (_2879 << 2u)) >> 2u)).x;
                    _2889 = _2888 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2889)
                    {
                        frontier_phi_67_pred = _2876;
                        frontier_phi_67_pred_1 = _2877;
                        frontier_phi_67_pred_2 = _2878;
                        frontier_phi_67_pred_3 = _2875;
                        frontier_phi_67_pred_4 = _2874;
                        frontier_phi_67_pred_5 = _2873;
                    }
                    else
                    {
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3086 = _2873;
                        float _3087 = _2874;
                        float _3088 = _2875;
                        float _3089 = _2876;
                        float _3090 = _2877;
                        float _3091 = _2878;
                        uint _3092 = _2888;
                        uint _3093;
                        vec4 _3118;
                        float _3119;
                        vec4 _3134;
                        vec3 _3146;
                        vec4 _3161;
                        vec4 _3177;
                        float _3223;
                        bool _3224;
                        for (;;)
                        {
                            uint _3103 = ((_2879 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3092));
                            _3093 = (_3092 + 4294967295u) & _3092;
                            uint _3105 = _3103 * 40u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3119 = _3118.w;
                            uint _3121 = (_3103 * 40u) + 4u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3136 = (_3103 * 40u) + 8u;
                            _3146 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x));
                            uint _3148 = (_3103 * 40u) + 16u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3164 = (_3103 * 40u) + 20u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3179 = (_3103 * 40u) + 24u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3198 = (_3103 * 40u) + 28u;
                            vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            _3223 = fma(_2476, _3211.z, fma(_2475, _3211.y, _3211.x * _2474)) + _3211.w;
                            _3224 = !((fma(_2476, _3192.z, fma(_2475, _3192.y, _3192.x * _2474)) + _3192.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3224)
                            {
                                float _3251 = _3118.x - _2474;
                                float _3252 = _3118.y - _2475;
                                float _3253 = _3118.z - _2476;
                                float _3254 = dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253));
                                float _3257 = inversesqrt(_3254);
                                float _3258 = _3257 * _3251;
                                float _3259 = _3257 * _3252;
                                float _3260 = _3257 * _3253;
                                float _3264 = 1.0 - (_3254 / (_3119 * _3119));
                                float _4344 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3269 = sqrt(_3254) * _3134.w;
                                float _3271 = 1.39999997615814208984375 / (_3269 + 1.39999997615814208984375);
                                float _3272 = _3271 * _3271;
                                float _3275 = ((1.0 - _3272) * dot(vec3(_3258, _3259, _3260), vec3(_742, _745, _748))) + _3272;
                                float _3278 = _3269 * _3269;
                                float _3282 = (fma(_2476, _3161.z, fma(_2475, _3161.y, _3161.x * _2474)) + _3161.w) / _3223;
                                float _3283 = (fma(_2476, _3177.z, fma(_2475, _3177.y, _3177.x * _2474)) + _3177.w) / _3223;
                                float _3287 = 1.0 - dot(vec2(_3282, _3283), vec2(_3282, _3283));
                                float _4360 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3289 = _3288 * (((isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0))) * _3265) / ((_3278 * 0.699999988079071044921875) + 1.0));
                                float _3301 = exp2(log2(1.0 / ((_3278 * 3.5) + 5.0)) * 0.25);
                                float _3302 = 1.0 - _817;
                                float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                                float _3310 = _3309 * _3309;
                                float _3311 = _3310 * _3310;
                                float _3312 = _3258 - _2760;
                                float _3313 = _3259 - _2761;
                                float _3314 = _3260 - _2762;
                                float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                                float _3322 = dot(vec3(_742, _745, _748), vec3((-0.0) - _2760, (-0.0) - _2761, (-0.0) - _2762));
                                float _4371 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3325 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3326 = dot(vec3(_742, _745, _748), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                                float _4382 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3329 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                                float _3334 = _3271 * _3310;
                                float _3335 = _3334 * _3334;
                                float _3341 = ((1.0 - _3335) * dot(vec3(_742, _745, _748), vec3(_3258, _3259, _3260))) + _3335;
                                float _4393 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3343 = 1.0 - _3310;
                                float _3353 = (0.5 / (((_3342 * ((_3325 * _3343) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3310) * _3325))) * _3342;
                                float _4404 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3363 = (_3288 * _3265) * (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) / ((_3333 * _3333) * ((_3278 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3363 * _3146.x;
                                frontier_phi_73_pred_1 = _3363 * _3146.y;
                                frontier_phi_73_pred_2 = _3289 * _3134.z;
                                frontier_phi_73_pred_3 = _3289 * _3134.y;
                                frontier_phi_73_pred_4 = _3289 * _3134.x;
                                frontier_phi_73_pred_5 = _3363 * _3146.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3367 = frontier_phi_73_pred;
                            _3368 = frontier_phi_73_pred_1;
                            _3372 = frontier_phi_73_pred_2;
                            _3371 = frontier_phi_73_pred_3;
                            _3370 = frontier_phi_73_pred_4;
                            _3369 = frontier_phi_73_pred_5;
                            _3076 = _3370 + _3089;
                            _3077 = _3371 + _3090;
                            _3078 = _3372 + _3091;
                            _3073 = _3367 + _3086;
                            _3074 = _3368 + _3087;
                            _3075 = _3369 + _3088;
                            if (_3093 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3093;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3076;
                        frontier_phi_67_pred_1 = _3077;
                        frontier_phi_67_pred_2 = _3078;
                        frontier_phi_67_pred_3 = _3075;
                        frontier_phi_67_pred_4 = _3074;
                        frontier_phi_67_pred_5 = _3073;
                    }
                    _2741 = frontier_phi_67_pred;
                    _2743 = frontier_phi_67_pred_1;
                    _2745 = frontier_phi_67_pred_2;
                    _2739 = frontier_phi_67_pred_3;
                    _2737 = frontier_phi_67_pred_4;
                    _2735 = frontier_phi_67_pred_5;
                    uint _2880 = _2879 + 1u;
                    if (_2880 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2873 = _2735;
                        _2874 = _2737;
                        _2875 = _2739;
                        _2876 = _2741;
                        _2877 = _2743;
                        _2878 = _2745;
                        _2879 = _2880;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2743;
                frontier_phi_55_56_ladder_1 = _2745;
                frontier_phi_55_56_ladder_2 = _2741;
                frontier_phi_55_56_ladder_3 = _2739;
                frontier_phi_55_56_ladder_4 = _2737;
                frontier_phi_55_56_ladder_5 = _2735;
            }
            else
            {
                frontier_phi_55_56_ladder = _2629;
                frontier_phi_55_56_ladder_1 = _2631;
                frontier_phi_55_56_ladder_2 = _2627;
                frontier_phi_55_56_ladder_3 = _2625;
                frontier_phi_55_56_ladder_4 = _2623;
                frontier_phi_55_56_ladder_5 = _2621;
            }
            _2734 = frontier_phi_55_56_ladder_5;
            _2736 = frontier_phi_55_56_ladder_4;
            _2738 = frontier_phi_55_56_ladder_3;
            _2740 = frontier_phi_55_56_ladder_2;
            _2742 = frontier_phi_55_56_ladder;
            _2744 = frontier_phi_55_56_ladder_1;
        }
        float _2749 = isnan(1.0) ? _801 : (isnan(_801) ? 1.0 : min(_801, 1.0));
        _2533 = (_2749 * _2740) + _1969;
        _2535 = (_2749 * _2742) + _1971;
        _2537 = (_2749 * _2744) + _1973;
        _2539 = ((_2734 * _785) * _2749) + _2314;
        _2541 = ((_2736 * _787) * _2749) + _2316;
        _2543 = ((_2738 * _788) * _2749) + _2318;
    }
    else
    {
        _2533 = _1969;
        _2535 = _1971;
        _2537 = _1973;
        _2539 = _2314;
        _2541 = _2316;
        _2543 = _2318;
    }
    float _4420 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4431 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4442 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    uint _2563 = _236 + 6u;
    float _2571 = _723 / cbSceneParam._m0[86u].x;
    float _2572 = _724 / cbSceneParam._m0[86u].y;
    vec4 _2586 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2571, _2572, (log2((isnan(cbSceneParam._m0[77u].w) ? _657 : (isnan(_657) ? cbSceneParam._m0[77u].w : min(_657, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2588 = _2586.x;
    float _2589 = _2586.y;
    float _2590 = _2586.z;
    float _2591 = _2586.w;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    if (_657 > cbSceneParam._m0[78u].w)
    {
        float _2646 = isnan(_657) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _657 : min(cbSceneParam._m0[80u].w, _657));
        float _2647 = _2646 / _657;
        float _2658 = _2647 * _708;
        float _2659 = _709 * _2647;
        float _2660 = (-0.0) - _2659;
        float _2662 = _2647 * _710;
        float _2664 = (cbSceneParam._m0[77u].w * _2660) / _2646;
        float _2665 = _2664 + cbSceneParam._m0[79u].w;
        float _2666 = cbSceneParam._m0[79u].w - _2659;
        float _2672 = sqrt(((_2658 * _2658) + (_2659 * _2659)) + (_2662 * _2662));
        float _2675 = (1.0 - (cbSceneParam._m0[77u].w / _2646)) * _2672;
        float _2680 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2682 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2835;
        if (abs((_2660 - _2664) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2835 = ((((_2665 > 0.0) ? exp2(_2680 * _2665) : (2.0 - exp2(_2682 * _2665))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2675;
        }
        else
        {
            float _2795 = 1.0 / cbSceneParam._m0[80u].x;
            float _2796 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : max(_2665, _2666));
            float _2797 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : min(_2665, _2666));
            float _2806 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : min(_2796, 0.0));
            float _2807 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : min(_2797, 0.0));
            _2835 = ((abs(_2672 / _2660) * cbSceneParam._m0[80u].y) * ((((_2806 - _2807) * 2.0) - ((exp2(_2680 * (isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0)))) - exp2(_2680 * (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))))) * _2795)) - ((exp2(_2682 * _2806) - exp2(_2682 * _2807)) * _2795))) + (_2675 * cbSceneParam._m0[80u].z);
        }
        vec4 _2837 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2571, _2572, 1.0), 0.0);
        float _2846 = exp2((_2835 * (-1.44269502162933349609375)) * (1.0 - _2837.w));
        float _2847 = log2(_2846);
        float _2863 = log2(_2591);
        _2684 = (exp2(_2863 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].x)) * _2837.x) / cbSceneParam._m0[78u].x)) + _2588;
        _2686 = (exp2(_2863 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].y)) * _2837.y) / cbSceneParam._m0[78u].y)) + _2589;
        _2688 = (exp2(_2863 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].z)) * _2837.z) / cbSceneParam._m0[78u].z)) + _2590;
        _2690 = _2846 * _2591;
    }
    else
    {
        _2684 = _2588;
        _2686 = _2589;
        _2688 = _2590;
        _2690 = _2591;
    }
    float _2702 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2703 = _2702 == 3.0;
    float _2704 = log2(_2690);
    float _2711 = exp2(_2704 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2533 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _801))) + ((_2539 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1609)) * cbPerFrame._m0[3u].x));
    float _2712 = exp2(_2704 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2535 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _801))) + ((_2541 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1609)) * cbPerFrame._m0[3u].x));
    float _2713 = exp2(_2704 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2537 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _801))) + ((_2543 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1609)) * cbPerFrame._m0[3u].x));
    float _2722 = (_2702 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2722 * (_2703 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2684)));
    SV_Target.y = _2722 * (_2703 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2686)));
    SV_Target.z = _2722 * (_2703 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2688)));
    SV_Target.w = cbInstanceData._m0[_2563].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2563].w;
}


