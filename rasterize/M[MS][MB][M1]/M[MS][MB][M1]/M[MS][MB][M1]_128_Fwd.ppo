#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1234;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3559 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _472 = _470.x;
    float _473 = _470.y;
    float _474 = _470.z;
    float _483 = ((_453.z - _474) * _380) + _474;
    float _486 = ((((_453.x - _472) * _380) + _472) * 2.0) + (-1.0);
    float _487 = ((((_453.y - _473) * _380) + _473) * 2.0) + (-1.0);
    float _488 = dot(vec2(_486, _487), vec2(_486, _487));
    float _3570 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _493 = sqrt(1.0 - (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _536 = _534.x;
    float _537 = 1.0 - _536;
    float _550 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_536 - _537) * cbMtdParam._m0[24u].z) + _537) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3581 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _558 = (_551 * ((_408.x * cbMtdParam._m0[18u].x) - _387)) + _387;
    float _559 = (_551 * ((_408.y * cbMtdParam._m0[18u].y) - _388)) + _388;
    float _560 = (_551 * ((_408.z * cbMtdParam._m0[18u].z) - _389)) + _389;
    vec4 _572 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _588 = _586.x;
    float _606 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _588) * _380) + _588;
    float _610 = ((_572.x - _606) * cbMtdParam._m0[19u].z) + _606;
    float _612 = _610 - (_610 * _551);
    float _617 = (((_428.z - _483) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _483;
    float _621 = ((_509.z - _617) * cbMtdParam._m0[19u].w) + _617;
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _641 = (_634.x * 2.0) + (-1.0);
    float _642 = (_634.y * 2.0) + (-1.0);
    float _643 = dot(vec2(_641, _642), vec2(_641, _642));
    float _3592 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _651 = (_551 * (_634.z - _621)) + _621;
    float _660 = (_486 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_428.x * 2.0) + (-1.0)))) + (((_509.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _661 = (_487 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_428.y * 2.0) + (-1.0)))) + (((_509.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _673 = (((_641 - _660) + (cbMtdParam._m0[21u].x * _660)) * _551) + _660;
    float _674 = (((_642 - _661) + (cbMtdParam._m0[21u].x * _661)) * _551) + _661;
    float _675 = (_551 * (sqrt(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) - _493)) + _493;
    float _680 = cbMtdParam._m0[22u].x + _509.w;
    float _683 = fma(_675, _229 * NORMAL.x, fma(_674, _236 * TANGENT.x, (_222 * _214) * _673));
    float _686 = fma(_675, _229 * NORMAL.y, fma(_674, _236 * TANGENT.y, (_222 * _215) * _673));
    float _689 = fma(_675, _229 * NORMAL.z, fma(_674, _236 * TANGENT.z, (_222 * _216) * _673));
    float _693 = inversesqrt(dot(vec3(_683, _686, _689), vec3(_683, _686, _689)));
    float _694 = _693 * _683;
    float _695 = _693 * _686;
    float _696 = _693 * _689;
    float _3603 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _697 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _3625 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3636 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3647 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3658 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _702 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _716 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _767 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _757);
    float _768 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _757);
    float _769 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _757);
    float _773 = inversesqrt(dot(vec3(_767, _768, _769), vec3(_767, _768, _769)));
    float _774 = _767 * _773;
    float _775 = _768 * _773;
    float _776 = _769 * _773;
    float _782 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _783 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _801 = fma(_696, cbSceneParam._m0[5u].z, fma(_695, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _694));
    float _804 = fma(_696, cbSceneParam._m0[6u].z, fma(_695, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _694));
    float _807 = fma(_696, cbSceneParam._m0[7u].z, fma(_695, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _694));
    uint _821 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _827 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_821].x;
    float _828 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_821].y;
    float _829 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_821].z;
    float _3669 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _833 = 1.0 - _702;
    float _834 = _830 * _833;
    float _835 = _831 * _833;
    float _836 = _832 * _833;
    float _841 = (_830 + (-0.039999999105930328369140625)) * _702;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _702;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _702;
    float _844 = _841 + 0.039999999105930328369140625;
    float _846 = _842 + 0.039999999105930328369140625;
    float _847 = _843 + 0.039999999105930328369140625;
    vec4 _856 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _782, cbSceneParam._m0[86u].y * _783));
    float _860 = ((isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * TEXCOORD_5.w) * _856.x;
    float _861 = dot(vec3(_694, _695, _696), vec3(_774, _775, _776));
    float _864 = _861 * 2.0;
    float _868 = (_864 * _694) - _774;
    float _869 = (_864 * _695) - _775;
    float _870 = (_864 * _696) - _776;
    float _874 = abs(dot(vec3(_774, _775, _776), vec3(_694, _695, _696)));
    float _3702 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _876 = sqrt(_697);
    float _889 = exp2((_876 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_876 * 3.0));
    float _895 = (1.0 - _889) * ((_876 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _896 = _889 * _876;
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1233;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _958 = fma(_932, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924));
        float _962 = fma(_932, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924));
        float _966 = fma(_932, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924));
        float _991 = _924 + _694;
        float _992 = _928 + _695;
        float _993 = _932 + _696;
        float _1003 = fma(_993, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _991)) - _958;
        float _1004 = fma(_993, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _991)) - _962;
        float _1005 = fma(_993, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _991)) - _966;
        float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
        float _1022 = ((_1009 * _1003) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_958 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1009 * _1004) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_962 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1009 * _1005) / cbModelParam._m0[34u].z) + ((((((_966 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        float _1061 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1027.x + (-0.5));
        float _1063 = _1061 * (_1027.y + (-0.5));
        float _1064 = _1061 * (_1027.z + (-0.5));
        float _1071 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1034.x + (-0.5));
        float _1073 = _1071 * (_1034.y + (-0.5));
        float _1074 = _1071 * (_1034.z + (-0.5));
        float _1081 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1041.x + (-0.5));
        float _1083 = _1081 * (_1041.y + (-0.5));
        float _1084 = _1081 * (_1041.z + (-0.5));
        float _1091 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1048.x + (-0.5));
        float _1093 = _1091 * (_1048.y + (-0.5));
        float _1094 = _1091 * (_1048.z + (-0.5));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = _1062 * 0.5;
        float _1099 = _1072 * 0.5;
        float _1100 = _1082 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1115 = (dot(vec3(_694, _695, _696), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1125 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3750 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1127 + 1.0))) + _1132) * _1095;
        float _1142 = _1063 * 0.5;
        float _1143 = _1073 * 0.5;
        float _1144 = _1083 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_694, _695, _696), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3783 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1169 + 1.0))) + _1174) * _1096;
        float _1184 = _1064 * 0.5;
        float _1185 = _1074 * 0.5;
        float _1186 = _1084 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_694, _695, _696), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3816 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1211 + 1.0))) + _1216) * _1097;
        _1233 = _1064;
        _1235 = _1063;
        _1236 = _1062;
        _1237 = _1074;
        _1238 = _1073;
        _1239 = _1072;
        _1240 = _1084;
        _1241 = _1083;
        _1242 = _1082;
        _1243 = _1097;
        _1244 = _1096;
        _1245 = _1095;
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
    }
    else
    {
        _1233 = _1234;
        _1235 = _1234;
        _1236 = _1234;
        _1237 = _1234;
        _1238 = _1234;
        _1239 = _1234;
        _1240 = _1234;
        _1241 = _1234;
        _1242 = _1234;
        _1243 = _1234;
        _1244 = _1234;
        _1245 = _1234;
        _1246 = 0.0;
        _1247 = 0.0;
        _1248 = 0.0;
    }
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1273 = fma(_932, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924));
        float _1277 = fma(_932, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924));
        float _1281 = fma(_932, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924));
        float _1304 = _924 + _694;
        float _1305 = _928 + _695;
        float _1306 = _932 + _696;
        float _1316 = fma(_1306, cbModelParam._m0[30u].z, fma(_1305, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1304)) - _1273;
        float _1317 = fma(_1306, cbModelParam._m0[31u].z, fma(_1305, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1304)) - _1277;
        float _1318 = fma(_1306, cbModelParam._m0[32u].z, fma(_1305, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1304)) - _1281;
        float _1322 = inversesqrt(dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318)));
        float _1335 = ((_1322 * _1316) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1273 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1322 * _1317) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1277 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1322 * _1318) / cbModelParam._m0[35u].z) + ((((((_1281 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        float _1372 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1339.x + (-0.5));
        float _1374 = _1372 * (_1339.y + (-0.5));
        float _1375 = _1372 * (_1339.z + (-0.5));
        float _1382 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1346.x + (-0.5));
        float _1384 = _1382 * (_1346.y + (-0.5));
        float _1385 = _1382 * (_1346.z + (-0.5));
        float _1392 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1353.x + (-0.5));
        float _1394 = _1392 * (_1353.y + (-0.5));
        float _1395 = _1392 * (_1353.z + (-0.5));
        float _1402 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1360.x + (-0.5));
        float _1404 = _1402 * (_1360.y + (-0.5));
        float _1405 = _1402 * (_1360.z + (-0.5));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = _1373 * 0.5;
        float _1410 = _1383 * 0.5;
        float _1411 = _1393 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_694, _695, _696), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _3879 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1436 + 1.0))) + _1441) * _1406;
        float _1451 = _1374 * 0.5;
        float _1452 = _1384 * 0.5;
        float _1453 = _1394 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_694, _695, _696), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _3912 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1478 + 1.0))) + _1483) * _1407;
        float _1493 = _1375 * 0.5;
        float _1494 = _1385 * 0.5;
        float _1495 = _1395 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_694, _695, _696), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _3945 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1520 + 1.0))) + _1525) * _1408;
        _1542 = _1375;
        _1543 = _1374;
        _1544 = _1373;
        _1545 = _1385;
        _1546 = _1384;
        _1547 = _1383;
        _1548 = _1395;
        _1549 = _1394;
        _1550 = _1393;
        _1551 = _1408;
        _1552 = _1407;
        _1553 = _1406;
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
    }
    else
    {
        _1542 = _1234;
        _1543 = _1234;
        _1544 = _1234;
        _1545 = _1234;
        _1546 = _1234;
        _1547 = _1234;
        _1548 = _1234;
        _1549 = _1234;
        _1550 = _1234;
        _1551 = _1234;
        _1552 = _1234;
        _1553 = _1234;
        _1554 = 0.0;
        _1555 = 0.0;
        _1556 = 0.0;
    }
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1246)) + _1246;
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1247)) + _1247;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1248)) + _1248;
    float _1589 = fma(_1568, cbSceneParam._m0[89u].z, fma(_1567, cbSceneParam._m0[89u].y, _1566 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1568, cbSceneParam._m0[90u].z, fma(_1567, cbSceneParam._m0[90u].y, _1566 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1568, cbSceneParam._m0[91u].z, fma(_1567, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1566));
    float _1610 = _868 * 0.5;
    float _1611 = _869 * 0.5;
    float _1612 = _870 * 0.5;
    float _1613 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1616 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1619 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1653;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1626 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1233, _1237, _1240, _1243));
        float _1630 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1235, _1238, _1241, _1244));
        float _1634 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1641 = dot(vec4(cbModelParam._m0[39u]), vec4(_1610, _1611, _1612, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1664;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1655 = dot(vec4(cbModelParam._m0[40u]), vec4(_1610, _1611, _1612, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1655) ? 0.0 : (isnan(0.0) ? _1655 : max(0.0, _1655))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1668 = (_1664 * cbModelParam._m0[1u].x) + (_1653 * (1.0 - cbModelParam._m0[1u].x));
    float _1678 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _697);
    float _1679 = isnan(_1678) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1678 : min(cbModelParam._m0[25u].z, _1678));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1726 = fma(_932, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924)) + cbModelParam._m0[13u].w;
        float _1730 = fma(_932, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924)) + cbModelParam._m0[14u].w;
        float _1734 = fma(_932, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924)) + cbModelParam._m0[15u].w;
        float _1737 = fma(_870, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868));
        float _1740 = fma(_870, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868));
        float _1743 = fma(_870, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868));
        float _1771;
        if (_1737 > 0.0)
        {
            _1771 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1771 = frontier_phi_14_12_ladder;
        }
        float _1973;
        if (_1740 > 0.0)
        {
            _1973 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1973 = frontier_phi_23_19_ladder;
        }
        float _2227;
        if (_1743 > 0.0)
        {
            _2227 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2227 = frontier_phi_35_30_ladder;
        }
        float _2229 = isnan(_1973) ? _1771 : (isnan(_1771) ? _1973 : min(_1771, _1973));
        float _2230 = isnan(_2227) ? _2229 : (isnan(_2229) ? _2227 : min(_2229, _2227));
        float _2234 = (_2230 * _1737) + _1726;
        float _2235 = (_2230 * _1740) + _1730;
        float _2236 = (_2230 * _1743) + _1734;
        float _2237 = _2230 * 9.9999997473787516355514526367188e-05;
        float _2239 = (-1.0) - _2237;
        float _2241 = _2237 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2236 > _2241) || ((_2236 < _2239) || ((_2235 > _2241) || ((_2235 < _2239) || ((_2234 < _2239) || (_2234 > _2241))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2236, cbModelParam._m0[9u].z, fma(_2235, cbModelParam._m0[9u].y, _2234 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2236, cbModelParam._m0[10u].z, fma(_2235, cbModelParam._m0[10u].y, _2234 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2236, cbModelParam._m0[11u].z, fma(_2235, cbModelParam._m0[11u].y, _2234 * cbModelParam._m0[11u].x))), _1679);
            frontier_phi_13_35_ladder = _2364.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2364.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2364.x * cbModelParam._m0[1u].y;
        }
        _1759 = frontier_phi_13_35_ladder_2;
        _1761 = frontier_phi_13_35_ladder_1;
        _1763 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_868, _869, _870), _1679);
        _1759 = _1747.x * cbModelParam._m0[1u].y;
        _1761 = _1747.y * cbModelParam._m0[1u].y;
        _1763 = _1747.z * cbModelParam._m0[1u].y;
    }
    float _1767 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _697);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1767 : min(cbModelParam._m0[25u].w, _1767));
    float _1857;
    float _1859;
    float _1861;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1821 = fma(_932, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924)) + cbModelParam._m0[21u].w;
        float _1825 = fma(_932, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924)) + cbModelParam._m0[22u].w;
        float _1829 = fma(_932, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924)) + cbModelParam._m0[23u].w;
        float _1832 = fma(_870, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868));
        float _1835 = fma(_870, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868));
        float _1838 = fma(_870, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868));
        float _1978;
        if (_1832 > 0.0)
        {
            _1978 = abs((1.0 - _1821) / _1832);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1821 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1978 = frontier_phi_25_21_ladder;
        }
        float _2254;
        if (_1835 > 0.0)
        {
            _2254 = abs((1.0 - _1825) / _1835);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1825 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2254 = frontier_phi_37_32_ladder;
        }
        float _2467;
        if (_1838 > 0.0)
        {
            _2467 = abs((1.0 - _1829) / _1838);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1829 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2467 = frontier_phi_46_43_ladder;
        }
        float _2469 = isnan(_2254) ? _1978 : (isnan(_1978) ? _2254 : min(_1978, _2254));
        float _2470 = isnan(_2467) ? _2469 : (isnan(_2469) ? _2467 : min(_2469, _2467));
        float _2474 = (_2470 * _1832) + _1821;
        float _2475 = (_2470 * _1835) + _1825;
        float _2476 = (_2470 * _1838) + _1829;
        float _2477 = _2470 * 9.9999997473787516355514526367188e-05;
        float _2478 = (-1.0) - _2477;
        float _2480 = _2477 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2476 > _2480) || ((_2476 < _2478) || ((_2475 > _2480) || ((_2475 < _2478) || ((_2474 < _2478) || (_2474 > _2480))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2675 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2476, cbModelParam._m0[17u].z, fma(_2475, cbModelParam._m0[17u].y, _2474 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2476, cbModelParam._m0[18u].z, fma(_2475, cbModelParam._m0[18u].y, _2474 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2476, cbModelParam._m0[19u].z, fma(_2475, cbModelParam._m0[19u].y, _2474 * cbModelParam._m0[19u].x))), _1768);
            frontier_phi_22_46_ladder = _2675.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2675.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2675.x * cbModelParam._m0[1u].z;
        }
        _1857 = frontier_phi_22_46_ladder_2;
        _1859 = frontier_phi_22_46_ladder_1;
        _1861 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1841 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_868, _869, _870), _1768);
        _1857 = _1841.x * cbModelParam._m0[1u].z;
        _1859 = _1841.y * cbModelParam._m0[1u].z;
        _1861 = _1841.z * cbModelParam._m0[1u].z;
    }
    float _1874 = (((_895 * _844) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1857 - _1759)) + _1759);
    float _1876 = (((_895 * _846) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1859 - _1761)) + _1761);
    float _1878 = (((_895 * _847) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1861 - _1763)) + _1763);
    float _1881 = fma(_1878, cbSceneParam._m0[89u].z, fma(_1876, cbSceneParam._m0[89u].y, _1874 * cbSceneParam._m0[89u].x));
    float _1884 = fma(_1878, cbSceneParam._m0[90u].z, fma(_1876, cbSceneParam._m0[90u].y, _1874 * cbSceneParam._m0[90u].x));
    float _1887 = fma(_1878, cbSceneParam._m0[91u].z, fma(_1876, cbSceneParam._m0[91u].y, _1874 * cbSceneParam._m0[91u].x));
    uvec4 _1897 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1899 = _1897.x * 14u;
    uint _1900 = _1899 + 13u;
    float _1907 = _860 + (-1.0);
    float _1912 = (cbLight._m0[_1900].x * _1907) + 1.0;
    float _1913 = (cbLight._m0[_1900].y * _1907) + 1.0;
    float _1914 = (cbLight._m0[_1900].z * _1907) + 1.0;
    float _1915 = (cbLight._m0[_1900].w * _1907) + 1.0;
    uint _1916 = _1899 + 5u;
    float _1922 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
    uint _1926 = _1899 + 4u;
    float _1932 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
    uint _1936 = _1899 | 1u;
    float _1947 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_694, _695, _696));
    float _1950 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_694, _695, _696));
    float _4081 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _4092 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1955 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.3183098733425140380859375;
    float _1957 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.3183098733425140380859375;
    float _1964 = ((cbLight._m0[_1916].x * _1922) * _1957) + ((cbLight._m0[_1926].x * _1932) * _1955);
    float _1965 = ((_1922 * cbLight._m0[_1916].y) * _1957) + ((_1932 * cbLight._m0[_1926].y) * _1955);
    float _1966 = ((_1922 * cbLight._m0[_1916].z) * _1957) + ((_1932 * cbLight._m0[_1926].z) * _1955);
    uvec4 _1970 = floatBitsToUint(cbLight._m0[_1899 + 12u]);
    bool _1972 = _1970.x == 0u;
    float _1983;
    float _1985;
    float _1987;
    if (_1972)
    {
        _1983 = _1964;
        _1985 = _1965;
        _1987 = _1966;
    }
    else
    {
        uint _1991 = _1899 + 6u;
        float _2007 = (dot(vec3(cbLight._m0[_1899 + 2u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2008 = _2007 * _2007;
        float _4103 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2009 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2010 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _1983 = (((cbLight._m0[_1991].x * 0.3183098733425140380859375) * _2009) * _2010) + _1964;
        _1985 = (((cbLight._m0[_1991].y * 0.3183098733425140380859375) * _2009) * _2010) + _1965;
        _1987 = (((cbLight._m0[_1991].z * 0.3183098733425140380859375) * _2009) * _2010) + _1966;
    }
    bool _1990 = _1970.y == 0u;
    float _2028;
    float _2030;
    float _2032;
    if (_1990)
    {
        _2028 = _1983;
        _2030 = _1985;
        _2032 = _1987;
    }
    else
    {
        uint _2198 = _1899 + 7u;
        float _2214 = (dot(vec3(cbLight._m0[_1899 + 3u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2215 = _2214 * _2214;
        float _4119 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2216 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2217 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2028 = (((cbLight._m0[_2198].x * 0.3183098733425140380859375) * _2216) * _2217) + _1983;
        _2030 = (((cbLight._m0[_2198].y * 0.3183098733425140380859375) * _2216) * _2217) + _1985;
        _2032 = (((cbLight._m0[_2198].z * 0.3183098733425140380859375) * _2216) * _2217) + _1987;
    }
    uint _2035 = _1899 + 8u;
    float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _697) * 0.949999988079071044921875);
    float _2049 = _2048 * _2048;
    float _2050 = cbLight._m0[_1899].x + _774;
    float _2051 = cbLight._m0[_1899].y + _775;
    float _2052 = cbLight._m0[_1899].z + _776;
    float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
    float _2057 = _2056 * _2050;
    float _2058 = _2056 * _2051;
    float _2059 = _2056 * _2052;
    float _2060 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_1899].xyz));
    float _4135 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2064 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2065 = dot(vec3(_694, _695, _696), vec3(_2057, _2058, _2059));
    float _4157 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2069 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_2057, _2058, _2059));
    float _4168 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2073 = _2049 * _2049;
    float _2077 = ((_2068 * _2068) * (_2073 + (-1.0))) + 1.0;
    float _2085 = exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0);
    float _2086 = 0.959999978542327880859375 - _841;
    float _2088 = 0.959999978542327880859375 - _842;
    float _2089 = 0.959999978542327880859375 - _843;
    float _2096 = 1.0 - _2049;
    float _2107 = (0.5 / (((_2064 * ((_2063 * _2096) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_2064 * _2096) + _2049) * _2063))) * _2063;
    float _4179 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2109 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2073 / ((_2077 * _2077) * 3.141590118408203125));
    uint _2120 = _1899 + 9u;
    float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _697) * 0.949999988079071044921875);
    float _2132 = _2131 * _2131;
    float _2133 = cbLight._m0[_1936].x + _774;
    float _2134 = cbLight._m0[_1936].y + _775;
    float _2135 = cbLight._m0[_1936].z + _776;
    float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
    float _2140 = _2139 * _2133;
    float _2141 = _2139 * _2134;
    float _2142 = _2139 * _2135;
    float _2143 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_1936].xyz));
    float _4190 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2147 = dot(vec3(_694, _695, _696), vec3(_2140, _2141, _2142));
    float _4201 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2151 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_2140, _2141, _2142));
    float _4212 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2155 = _2132 * _2132;
    float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
    float _2166 = exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0);
    float _2173 = 1.0 - _2132;
    float _2183 = (0.5 / (((_2064 * ((_2146 * _2173) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_2064 * _2173) + _2132) * _2146))) * _2146;
    float _4223 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
    float _2195 = (((((_2166 * _2086) + _844) * cbLight._m0[_2120].x) * _2185) * _1922) + (((((_2085 * _2086) + _844) * cbLight._m0[_2035].x) * _2109) * _1932);
    float _2196 = (((((_2166 * _2088) + _846) * cbLight._m0[_2120].y) * _2185) * _1922) + (((((_2085 * _2088) + _846) * cbLight._m0[_2035].y) * _2109) * _1932);
    float _2197 = (((((_2166 * _2089) + _847) * cbLight._m0[_2120].z) * _2185) * _1922) + (((((_2085 * _2089) + _847) * cbLight._m0[_2035].z) * _2109) * _1932);
    float _2259;
    float _2261;
    float _2263;
    if (_1972)
    {
        _2259 = _2195;
        _2261 = _2196;
        _2263 = _2197;
    }
    else
    {
        uint _2265 = _1899 + 2u;
        uint _2269 = _1899 + 10u;
        float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _697) * 0.949999988079071044921875);
        float _2284 = _2283 * _2283;
        float _2285 = cbLight._m0[_2265].x + _774;
        float _2286 = cbLight._m0[_2265].y + _775;
        float _2287 = cbLight._m0[_2265].z + _776;
        float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
        float _2292 = _2291 * _2285;
        float _2293 = _2291 * _2286;
        float _2294 = _2291 * _2287;
        float _2295 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2265].xyz));
        float _4234 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2299 = dot(vec3(_694, _695, _696), vec3(_2292, _2293, _2294));
        float _4245 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2303 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2292, _2293, _2294));
        float _4256 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2307 = _2284 * _2284;
        float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
        float _2318 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
        float _2325 = 1.0 - _2284;
        float _2335 = (0.5 / (((_2064 * ((_2298 * _2325) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_2064 * _2325) + _2284) * _2298))) * _2298;
        float _4267 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2337 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
        float _2338 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _2259 = (((((_2318 * _2086) + _844) * cbLight._m0[_2269].x) * _2337) * _2338) + _2195;
        _2261 = (((((_2318 * _2088) + _846) * cbLight._m0[_2269].y) * _2337) * _2338) + _2196;
        _2263 = (((((_2318 * _2089) + _847) * cbLight._m0[_2269].z) * _2337) * _2338) + _2197;
    }
    float _2373;
    float _2375;
    float _2377;
    if (_1990)
    {
        _2373 = _2259;
        _2375 = _2261;
        _2377 = _2263;
    }
    else
    {
        uint _2384 = _1899 + 3u;
        uint _2388 = _1899 + 11u;
        float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _697) * 0.949999988079071044921875);
        float _2403 = _2402 * _2402;
        float _2404 = cbLight._m0[_2384].x + _774;
        float _2405 = cbLight._m0[_2384].y + _775;
        float _2406 = cbLight._m0[_2384].z + _776;
        float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
        float _2411 = _2410 * _2404;
        float _2412 = _2410 * _2405;
        float _2413 = _2410 * _2406;
        float _2414 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2384].xyz));
        float _4283 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2418 = dot(vec3(_694, _695, _696), vec3(_2411, _2412, _2413));
        float _4294 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2422 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2411, _2412, _2413));
        float _4305 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2426 = _2403 * _2403;
        float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
        float _2437 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
        float _2444 = 1.0 - _2403;
        float _2454 = (0.5 / (((_2064 * ((_2417 * _2444) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2064 * _2444) + _2403) * _2417))) * _2417;
        float _4316 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2456 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
        float _2457 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2373 = (((((_2437 * _2086) + _844) * cbLight._m0[_2388].x) * _2456) * _2457) + _2259;
        _2375 = (((((_2437 * _2088) + _846) * cbLight._m0[_2388].y) * _2456) * _2457) + _2261;
        _2377 = (((((_2437 * _2089) + _847) * cbLight._m0[_2388].z) * _2456) * _2457) + _2263;
    }
    float _2592;
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    if (_1897.y == 0u)
    {
        float _2532 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2532;
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2532;
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2532;
        uvec4 _2547 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2548 = _2547.x;
        uint _2559 = uint((float(_2547.y) * floor(float(uint(cbSceneParam._m0[85u].y * _783) / _2548))) + floor(float(uint(cbSceneParam._m0[85u].x * _782) / _2548)));
        float _2569 = (log2(_2535 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2570 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        uint _2573 = uint(isnan(14.0) ? _2570 : (isnan(_2570) ? 14.0 : min(_2570, 14.0)));
        uvec4 _2578 = texelFetch(g_lightClusterGridBuffer, int(((_2573 << 2u) + (_2559 << 6u)) >> 2u));
        uint _2579 = _2578.x;
        uint _2580 = _2547.z;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        if (((((1u << ((_2580 >> 4u) & 15u)) + 4294967295u) & _2579) == 0u) || ((_2580 & 240u) == 0u))
        {
            _2680 = 0.0;
            _2682 = 0.0;
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
        }
        else
        {
            float _2681;
            float _2683;
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            uint _2831 = 0u;
            uint _2840;
            bool _2841;
            for (;;)
            {
                _2840 = texelFetch(g_lightClassification, int((((_2573 << 5u) + (_2559 << 9u)) + (_2831 << 2u)) >> 2u)).x;
                _2841 = _2840 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2841)
                {
                    frontier_phi_61_pred = _2825;
                    frontier_phi_61_pred_1 = _2830;
                    frontier_phi_61_pred_2 = _2829;
                    frontier_phi_61_pred_3 = _2828;
                    frontier_phi_61_pred_4 = _2827;
                    frontier_phi_61_pred_5 = _2826;
                }
                else
                {
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    uint _2955;
                    _2949 = _2825;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2830;
                    _2955 = _2840;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    for (;;)
                    {
                        uint _2959 = uint(findLSB(_2955)) + (_2831 << 5u);
                        uint _2956 = (_2955 + 4294967295u) & _2955;
                        uint _2961 = _2959 * 48u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 3u)).x));
                        uint _2981 = (_2959 * 48u) + 4u;
                        vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 3u)).x));
                        uint _3000 = (_2959 * 48u) + 8u;
                        vec3 _3011 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x));
                        float _3015 = _2975.x - _2533;
                        float _3016 = _2975.y - _2534;
                        float _3017 = _2975.z - _2535;
                        float _3018 = dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017));
                        float _3021 = inversesqrt(_3018);
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3025 = dot(vec3(_801, _804, _807), vec3(_3022, _3023, _3024));
                        float _3030 = 1.0 - (_3018 * _2975.w);
                        float _4342 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3031 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3032 = sqrt(_3018) * _2994.w;
                        float _3035 = 1.39999997615814208984375 / (_3032 + 1.39999997615814208984375);
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _3025) + _3036;
                        float _3042 = _3032 * _3032;
                        float _3046 = ((isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))) * _3031) / ((_3042 * 0.699999988079071044921875) + 1.0);
                        float _3050 = (-0.0) - _2533;
                        float _3051 = (-0.0) - _2534;
                        float _3052 = (-0.0) - _2535;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3067 = exp2(log2(1.0 / ((_3042 * 3.5) + 5.0)) * 0.25);
                        float _3068 = 1.0 - _876;
                        float _3075 = sqrt(1.0 - ((1.0 - (_3068 * _3068)) * (1.0 - (_3067 * _3067))));
                        float _3076 = _3075 * _3075;
                        float _3077 = _3076 * _3076;
                        float _3078 = _3057 + _3022;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3084 = inversesqrt(dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080)));
                        float _3088 = dot(vec3(_801, _804, _807), vec3(_3057, _3058, _3059));
                        float _4358 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3091 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3092 = dot(vec3(_801, _804, _807), vec3(_3084 * _3078, _3084 * _3079, _3084 * _3080));
                        float _4369 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3095 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3099 = ((_3095 * _3095) * (_3077 + (-1.0))) + 1.0;
                        float _3100 = _3035 * _3076;
                        float _3101 = _3100 * _3100;
                        float _3104 = ((1.0 - _3101) * _3025) + _3101;
                        float _4380 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3105 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3106 = 1.0 - _3076;
                        float _3116 = (0.5 / (((_3105 * ((_3091 * _3106) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_3105 * _3106) + _3076) * _3091))) * _3105;
                        float _4391 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3127 = (((_3077 * 3.1415927410125732421875) * (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) / ((_3099 * _3099) * ((_3042 * 2.1991131305694580078125) + 3.141590118408203125))) * _3031;
                        _2884 = (_3046 * _2994.x) + _2952;
                        _2885 = (_3046 * _2994.y) + _2953;
                        _2886 = (_3046 * _2994.z) + _2954;
                        _2881 = (_3127 * _3011.x) + _2949;
                        _2882 = (_3127 * _3011.y) + _2950;
                        _2883 = (_3127 * _3011.z) + _2951;
                        if (_2956 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2949 = _2881;
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2886;
                            _2955 = _2956;
                        }
                    }
                    frontier_phi_61_pred = _2881;
                    frontier_phi_61_pred_1 = _2886;
                    frontier_phi_61_pred_2 = _2885;
                    frontier_phi_61_pred_3 = _2884;
                    frontier_phi_61_pred_4 = _2883;
                    frontier_phi_61_pred_5 = _2882;
                }
                _2681 = frontier_phi_61_pred;
                _2691 = frontier_phi_61_pred_1;
                _2689 = frontier_phi_61_pred_2;
                _2687 = frontier_phi_61_pred_3;
                _2685 = frontier_phi_61_pred_4;
                _2683 = frontier_phi_61_pred_5;
                uint _2832 = _2831 + 1u;
                if (_2832 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2825 = _2681;
                    _2826 = _2683;
                    _2827 = _2685;
                    _2828 = _2687;
                    _2829 = _2689;
                    _2830 = _2691;
                    _2831 = _2832;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2680 = _2681;
            _2682 = _2683;
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
        }
        uvec4 _2694 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2695 = _2694.z;
        uint _2697 = (_2695 >> 8u) & 15u;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((4294967295u << _2697) & _2579) == 0u)
        {
            _2793 = _2680;
            _2795 = _2682;
            _2797 = _2684;
            _2799 = _2686;
            _2801 = _2688;
            _2803 = _2690;
        }
        else
        {
            float _2818 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
            float _2819 = _2818 * _2533;
            float _2820 = _2818 * _2534;
            float _2821 = _2818 * _2535;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2697 < ((_2695 >> 12u) & 15u))
            {
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2932 = _2680;
                float _2933 = _2682;
                float _2934 = _2684;
                float _2935 = _2686;
                float _2936 = _2688;
                float _2937 = _2690;
                uint _2938 = _2697;
                uint _2947;
                bool _2948;
                for (;;)
                {
                    _2947 = texelFetch(g_lightClassification, int((((_2573 << 5u) + (_2559 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                    _2948 = _2947 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2948)
                    {
                        frontier_phi_67_pred = _2935;
                        frontier_phi_67_pred_1 = _2936;
                        frontier_phi_67_pred_2 = _2937;
                        frontier_phi_67_pred_3 = _2934;
                        frontier_phi_67_pred_4 = _2933;
                        frontier_phi_67_pred_5 = _2932;
                    }
                    else
                    {
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3145 = _2932;
                        float _3146 = _2933;
                        float _3147 = _2934;
                        float _3148 = _2935;
                        float _3149 = _2936;
                        float _3150 = _2937;
                        uint _3151 = _2947;
                        uint _3152;
                        vec4 _3177;
                        float _3178;
                        vec4 _3193;
                        vec3 _3205;
                        vec4 _3220;
                        vec4 _3235;
                        float _3281;
                        bool _3282;
                        for (;;)
                        {
                            uint _3162 = ((_2938 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3151));
                            _3152 = (_3151 + 4294967295u) & _3151;
                            uint _3164 = _3162 * 40u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            _3178 = _3177.w;
                            uint _3180 = (_3162 * 40u) + 4u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3195 = (_3162 * 40u) + 8u;
                            _3205 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x));
                            uint _3207 = (_3162 * 40u) + 16u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3222 = (_3162 * 40u) + 20u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3237 = (_3162 * 40u) + 24u;
                            vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3256 = (_3162 * 40u) + 28u;
                            vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            _3281 = fma(_2535, _3269.z, fma(_2534, _3269.y, _3269.x * _2533)) + _3269.w;
                            _3282 = !((fma(_2535, _3250.z, fma(_2534, _3250.y, _3250.x * _2533)) + _3250.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3282)
                            {
                                float _3309 = _3177.x - _2533;
                                float _3310 = _3177.y - _2534;
                                float _3311 = _3177.z - _2535;
                                float _3312 = dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311));
                                float _3315 = inversesqrt(_3312);
                                float _3316 = _3315 * _3309;
                                float _3317 = _3315 * _3310;
                                float _3318 = _3315 * _3311;
                                float _3322 = 1.0 - (_3312 / (_3178 * _3178));
                                float _4402 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3327 = sqrt(_3312) * _3193.w;
                                float _3329 = 1.39999997615814208984375 / (_3327 + 1.39999997615814208984375);
                                float _3330 = _3329 * _3329;
                                float _3333 = ((1.0 - _3330) * dot(vec3(_3316, _3317, _3318), vec3(_801, _804, _807))) + _3330;
                                float _3336 = _3327 * _3327;
                                float _3340 = (fma(_2535, _3220.z, fma(_2534, _3220.y, _3220.x * _2533)) + _3220.w) / _3281;
                                float _3341 = (fma(_2535, _3235.z, fma(_2534, _3235.y, _3235.x * _2533)) + _3235.w) / _3281;
                                float _3345 = 1.0 - dot(vec2(_3340, _3341), vec2(_3340, _3341));
                                float _4418 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3347 = _3346 * (((isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0))) * _3323) / ((_3336 * 0.699999988079071044921875) + 1.0));
                                float _3359 = exp2(log2(1.0 / ((_3336 * 3.5) + 5.0)) * 0.25);
                                float _3360 = 1.0 - _876;
                                float _3367 = sqrt(1.0 - ((1.0 - (_3360 * _3360)) * (1.0 - (_3359 * _3359))));
                                float _3368 = _3367 * _3367;
                                float _3369 = _3368 * _3368;
                                float _3370 = _3316 - _2819;
                                float _3371 = _3317 - _2820;
                                float _3372 = _3318 - _2821;
                                float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                                float _3380 = dot(vec3(_801, _804, _807), vec3((-0.0) - _2819, (-0.0) - _2820, (-0.0) - _2821));
                                float _4429 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3383 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3384 = dot(vec3(_801, _804, _807), vec3(_3376 * _3370, _3376 * _3371, _3376 * _3372));
                                float _4440 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3387 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3391 = ((_3387 * _3387) * (_3369 + (-1.0))) + 1.0;
                                float _3392 = _3329 * _3368;
                                float _3393 = _3392 * _3392;
                                float _3399 = ((1.0 - _3393) * dot(vec3(_801, _804, _807), vec3(_3316, _3317, _3318))) + _3393;
                                float _4451 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3401 = 1.0 - _3368;
                                float _3411 = (0.5 / (((_3400 * ((_3383 * _3401) + _3368)) + 9.9999999392252902907785028219223e-09) + (((_3400 * _3401) + _3368) * _3383))) * _3400;
                                float _4462 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3421 = (_3346 * _3323) * (((_3369 * 3.1415927410125732421875) * (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) / ((_3391 * _3391) * ((_3336 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3421 * _3205.x;
                                frontier_phi_73_pred_1 = _3421 * _3205.y;
                                frontier_phi_73_pred_2 = _3347 * _3193.z;
                                frontier_phi_73_pred_3 = _3347 * _3193.y;
                                frontier_phi_73_pred_4 = _3347 * _3193.x;
                                frontier_phi_73_pred_5 = _3421 * _3205.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3425 = frontier_phi_73_pred;
                            _3426 = frontier_phi_73_pred_1;
                            _3430 = frontier_phi_73_pred_2;
                            _3429 = frontier_phi_73_pred_3;
                            _3428 = frontier_phi_73_pred_4;
                            _3427 = frontier_phi_73_pred_5;
                            _3135 = _3428 + _3148;
                            _3136 = _3429 + _3149;
                            _3137 = _3430 + _3150;
                            _3132 = _3425 + _3145;
                            _3133 = _3426 + _3146;
                            _3134 = _3427 + _3147;
                            if (_3152 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3152;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3135;
                        frontier_phi_67_pred_1 = _3136;
                        frontier_phi_67_pred_2 = _3137;
                        frontier_phi_67_pred_3 = _3134;
                        frontier_phi_67_pred_4 = _3133;
                        frontier_phi_67_pred_5 = _3132;
                    }
                    _2800 = frontier_phi_67_pred;
                    _2802 = frontier_phi_67_pred_1;
                    _2804 = frontier_phi_67_pred_2;
                    _2798 = frontier_phi_67_pred_3;
                    _2796 = frontier_phi_67_pred_4;
                    _2794 = frontier_phi_67_pred_5;
                    uint _2939 = _2938 + 1u;
                    if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2932 = _2794;
                        _2933 = _2796;
                        _2934 = _2798;
                        _2935 = _2800;
                        _2936 = _2802;
                        _2937 = _2804;
                        _2938 = _2939;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2802;
                frontier_phi_55_56_ladder_1 = _2804;
                frontier_phi_55_56_ladder_2 = _2800;
                frontier_phi_55_56_ladder_3 = _2798;
                frontier_phi_55_56_ladder_4 = _2796;
                frontier_phi_55_56_ladder_5 = _2794;
            }
            else
            {
                frontier_phi_55_56_ladder = _2688;
                frontier_phi_55_56_ladder_1 = _2690;
                frontier_phi_55_56_ladder_2 = _2686;
                frontier_phi_55_56_ladder_3 = _2684;
                frontier_phi_55_56_ladder_4 = _2682;
                frontier_phi_55_56_ladder_5 = _2680;
            }
            _2793 = frontier_phi_55_56_ladder_5;
            _2795 = frontier_phi_55_56_ladder_4;
            _2797 = frontier_phi_55_56_ladder_3;
            _2799 = frontier_phi_55_56_ladder_2;
            _2801 = frontier_phi_55_56_ladder;
            _2803 = frontier_phi_55_56_ladder_1;
        }
        float _2808 = isnan(1.0) ? _860 : (isnan(_860) ? 1.0 : min(_860, 1.0));
        _2592 = (_2808 * _2799) + _2028;
        _2594 = (_2808 * _2801) + _2030;
        _2596 = (_2808 * _2803) + _2032;
        _2598 = ((_2793 * _844) * _2808) + _2373;
        _2600 = ((_2795 * _846) * _2808) + _2375;
        _2602 = ((_2797 * _847) * _2808) + _2377;
    }
    else
    {
        _2592 = _2028;
        _2594 = _2030;
        _2596 = _2032;
        _2598 = _2373;
        _2600 = _2375;
        _2602 = _2377;
    }
    float _4478 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4489 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4500 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    uint _2622 = _242 + 6u;
    float _2630 = _782 / cbSceneParam._m0[86u].x;
    float _2631 = _783 / cbSceneParam._m0[86u].y;
    vec4 _2645 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2630, _2631, (log2((isnan(cbSceneParam._m0[77u].w) ? _716 : (isnan(_716) ? cbSceneParam._m0[77u].w : min(_716, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2647 = _2645.x;
    float _2648 = _2645.y;
    float _2649 = _2645.z;
    float _2650 = _2645.w;
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    if (_716 > cbSceneParam._m0[78u].w)
    {
        float _2705 = isnan(_716) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _716 : min(cbSceneParam._m0[80u].w, _716));
        float _2706 = _2705 / _716;
        float _2717 = _2706 * _767;
        float _2718 = _768 * _2706;
        float _2719 = (-0.0) - _2718;
        float _2721 = _2706 * _769;
        float _2723 = (cbSceneParam._m0[77u].w * _2719) / _2705;
        float _2724 = _2723 + cbSceneParam._m0[79u].w;
        float _2725 = cbSceneParam._m0[79u].w - _2718;
        float _2731 = sqrt(((_2717 * _2717) + (_2718 * _2718)) + (_2721 * _2721));
        float _2734 = (1.0 - (cbSceneParam._m0[77u].w / _2705)) * _2731;
        float _2739 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2741 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2894;
        if (abs((_2719 - _2723) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2894 = ((((_2724 > 0.0) ? exp2(_2739 * _2724) : (2.0 - exp2(_2741 * _2724))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2734;
        }
        else
        {
            float _2854 = 1.0 / cbSceneParam._m0[80u].x;
            float _2855 = isnan(_2725) ? _2724 : (isnan(_2724) ? _2725 : max(_2724, _2725));
            float _2856 = isnan(_2725) ? _2724 : (isnan(_2724) ? _2725 : min(_2724, _2725));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            _2894 = ((abs(_2731 / _2719) * cbSceneParam._m0[80u].y) * ((((_2865 - _2866) * 2.0) - ((exp2(_2739 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0)))) - exp2(_2739 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0))))) * _2854)) - ((exp2(_2741 * _2865) - exp2(_2741 * _2866)) * _2854))) + (_2734 * cbSceneParam._m0[80u].z);
        }
        vec4 _2896 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2630, _2631, 1.0), 0.0);
        float _2905 = exp2((_2894 * (-1.44269502162933349609375)) * (1.0 - _2896.w));
        float _2906 = log2(_2905);
        float _2922 = log2(_2650);
        _2743 = (exp2(_2922 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].x)) * _2896.x) / cbSceneParam._m0[78u].x)) + _2647;
        _2745 = (exp2(_2922 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].y)) * _2896.y) / cbSceneParam._m0[78u].y)) + _2648;
        _2747 = (exp2(_2922 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].z)) * _2896.z) / cbSceneParam._m0[78u].z)) + _2649;
        _2749 = _2905 * _2650;
    }
    else
    {
        _2743 = _2647;
        _2745 = _2648;
        _2747 = _2649;
        _2749 = _2650;
    }
    float _2761 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2762 = _2761 == 3.0;
    float _2763 = log2(_2749);
    float _2770 = exp2(_2763 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2592 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _860))) + ((_2598 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1668)) * cbPerFrame._m0[3u].x));
    float _2771 = exp2(_2763 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2594 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _860))) + ((_2600 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1668)) * cbPerFrame._m0[3u].x));
    float _2772 = exp2(_2763 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2596 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _860))) + ((_2602 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1668)) * cbPerFrame._m0[3u].x));
    float _2781 = (_2761 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2781 * (_2762 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2743)));
    SV_Target.y = _2781 * (_2762 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2745)));
    SV_Target.z = _2781 * (_2762 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2747)));
    SV_Target.w = cbInstanceData._m0[_2622].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2622].w;
}


