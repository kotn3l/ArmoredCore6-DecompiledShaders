#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1442;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3790 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3801 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3812 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3823 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) + _453;
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _549 = _545.z;
    float _558 = ((_528.z - _549) * _434) + _549;
    float _561 = ((((_528.x - _547) * _434) + _547) * 2.0) + (-1.0);
    float _562 = ((((_528.y - _548) * _434) + _548) * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _3834 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))));
    float _571 = _561 + ((((_501.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _572 = _562 + ((((_501.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _575 = fma(_568, _252, fma(_572, _259, _571 * _245));
    float _578 = fma(_568, _253, fma(_572, _260, _571 * _246));
    float _581 = fma(_568, _254, fma(_572, _261, _571 * _247));
    float _585 = inversesqrt(dot(vec3(_575, _578, _581), vec3(_575, _578, _581)));
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _627 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _629 = _627.x;
    float _630 = 1.0 - _629;
    float _634 = ((_629 - _630) * cbMtdParam._m0[24u].z) + _630;
    float _636 = (cbMtdParam._m0[19u].x + dot(vec4(_585 * _575, _585 * _578, _585 * _581, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_634 * cbMtdParam._m0[21u].z);
    float _3845 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _639 = (-0.0) - cbMtdParam._m0[24u].x;
    float _641 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _641 : (isnan(_641) ? 1.0 : min(_641, 1.0));
    float _649 = _637 - ((_637 * TEXCOORD_8.x) * _642);
    float _650 = _637 - ((_637 * TEXCOORD_8.y) * _642);
    float _651 = _637 - ((_637 * TEXCOORD_8.z) * _642);
    float _658 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _662 = ((isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : min(_658, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _670 = (_662 - (((_634 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _662))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3876 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _671 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _675 = ((_649 * ((_481.x * cbMtdParam._m0[18u].x) - _460)) * _671) + _460;
    float _676 = ((_650 * ((_481.y * cbMtdParam._m0[18u].y) - _461)) * _671) + _461;
    float _677 = ((_651 * ((_481.z * cbMtdParam._m0[18u].z) - _462)) * _671) + _462;
    vec4 _689 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _691 = _689.x;
    float _692 = 1.0 - _691;
    float _717 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_691 - _692) * cbMtdParam._m0[24u].w) + _692) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3887 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _718 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _726 = ((((cbMtdParam._m0[10u].x - _675) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _718) + _675;
    float _727 = ((((cbMtdParam._m0[10u].y - _676) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _718) + _676;
    float _728 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _677)) * _718) + _677;
    vec4 _754 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _756 = _754.x;
    float _774 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _756) * _434) + _756;
    float _778 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _774) * cbMtdParam._m0[19u].z) + _774;
    float _781 = _778 - ((_671 * _649) * _778);
    float _783 = _781 - (_781 * _718);
    float _788 = (((_501.z - _558) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _558;
    vec4 _802 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _809 = (_802.x * 2.0) + (-1.0);
    float _810 = (_802.y * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _3898 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _820 = (((_802.z - _788) * _649) * _671) + _788;
    float _823 = ((cbMtdParam._m0[23u].y - _820) * _718) + _820;
    vec4 _842 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _848 = (_842.x * 2.0) + (-1.0);
    float _849 = (_842.y * 2.0) + (-1.0);
    float _850 = dot(vec2(_848, _849), vec2(_848, _849));
    float _3909 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _870 = (((cbMtdParam._m0[21u].x * _571) + ((_809 - _571) * _649)) * _671) + _571;
    float _871 = (((cbMtdParam._m0[21u].x * _572) + ((_810 - _572) * _650)) * _671) + _572;
    float _872 = (((sqrt(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) - _568) * _651) * _671) + _568;
    float _883 = (((_848 - _870) + (_870 * cbMtdParam._m0[22u].z)) * _718) + _870;
    float _884 = (((_849 - _871) + (_871 * cbMtdParam._m0[22u].z)) * _718) + _871;
    float _885 = ((sqrt(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) - _872) * _718) + _872;
    float _889 = cbMtdParam._m0[22u].x + _601.w;
    float _892 = fma(_885, _252, fma(_884, _259, _883 * _245));
    float _895 = fma(_885, _253, fma(_884, _260, _883 * _246));
    float _898 = fma(_885, _254, fma(_884, _261, _883 * _247));
    float _902 = inversesqrt(dot(vec3(_892, _895, _898), vec3(_892, _895, _898)));
    float _903 = _902 * _892;
    float _904 = _902 * _895;
    float _905 = _902 * _898;
    float _3920 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _906 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _3942 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _3953 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _3964 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _3975 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _911 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _925 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _975 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _965);
    float _976 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _965);
    float _977 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _965);
    float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
    float _982 = _975 * _981;
    float _983 = _976 * _981;
    float _984 = _977 * _981;
    float _990 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _991 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1009 = fma(_905, cbSceneParam._m0[5u].z, fma(_904, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _903));
    float _1012 = fma(_905, cbSceneParam._m0[6u].z, fma(_904, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _903));
    float _1015 = fma(_905, cbSceneParam._m0[7u].z, fma(_904, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _903));
    uint _1029 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1035 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_1029].x;
    float _1036 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * cbInstanceData._m0[_1029].y;
    float _1037 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * cbInstanceData._m0[_1029].z;
    float _3986 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1038 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1039 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1040 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1041 = 1.0 - _911;
    float _1042 = _1038 * _1041;
    float _1043 = _1039 * _1041;
    float _1044 = _1040 * _1041;
    float _1049 = (_1038 + (-0.039999999105930328369140625)) * _911;
    float _1050 = (_1039 + (-0.039999999105930328369140625)) * _911;
    float _1051 = (_1040 + (-0.039999999105930328369140625)) * _911;
    float _1052 = _1049 + 0.039999999105930328369140625;
    float _1054 = _1050 + 0.039999999105930328369140625;
    float _1055 = _1051 + 0.039999999105930328369140625;
    vec4 _1064 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _990, cbSceneParam._m0[86u].y * _991));
    float _1068 = ((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * TEXCOORD_5.w) * _1064.x;
    float _1069 = dot(vec3(_903, _904, _905), vec3(_982, _983, _984));
    float _1072 = _1069 * 2.0;
    float _1076 = (_1072 * _903) - _982;
    float _1077 = (_1072 * _904) - _983;
    float _1078 = (_1072 * _905) - _984;
    float _1082 = abs(dot(vec3(_982, _983, _984), vec3(_903, _904, _905)));
    float _4019 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1084 = sqrt(_906);
    float _1097 = exp2((_1084 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1084 * 3.0));
    float _1103 = (1.0 - _1097) * ((_1084 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1104 = _1097 * _1084;
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1441;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1166 = fma(_1140, cbModelParam._m0[26u].z, fma(_1136, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1132));
        float _1170 = fma(_1140, cbModelParam._m0[27u].z, fma(_1136, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1132));
        float _1174 = fma(_1140, cbModelParam._m0[28u].z, fma(_1136, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1132));
        float _1199 = _1132 + _903;
        float _1200 = _1136 + _904;
        float _1201 = _1140 + _905;
        float _1211 = fma(_1201, cbModelParam._m0[26u].z, fma(_1200, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1199)) - _1166;
        float _1212 = fma(_1201, cbModelParam._m0[27u].z, fma(_1200, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1199)) - _1170;
        float _1213 = fma(_1201, cbModelParam._m0[28u].z, fma(_1200, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1199)) - _1174;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1166 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1170 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[34u].z) + ((((((_1174 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1269 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1235.x + (-0.5));
        float _1271 = _1269 * (_1235.y + (-0.5));
        float _1272 = _1269 * (_1235.z + (-0.5));
        float _1279 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1242.x + (-0.5));
        float _1281 = _1279 * (_1242.y + (-0.5));
        float _1282 = _1279 * (_1242.z + (-0.5));
        float _1289 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1249.x + (-0.5));
        float _1291 = _1289 * (_1249.y + (-0.5));
        float _1292 = _1289 * (_1249.z + (-0.5));
        float _1299 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1256.x + (-0.5));
        float _1301 = _1299 * (_1256.y + (-0.5));
        float _1302 = _1299 * (_1256.z + (-0.5));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = _1270 * 0.5;
        float _1307 = _1280 * 0.5;
        float _1308 = _1290 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1323 = (dot(vec3(_903, _904, _905), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1333 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4067 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1335 + 1.0))) + _1340) * _1303;
        float _1350 = _1271 * 0.5;
        float _1351 = _1281 * 0.5;
        float _1352 = _1291 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_903, _904, _905), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4100 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1377 + 1.0))) + _1382) * _1304;
        float _1392 = _1272 * 0.5;
        float _1393 = _1282 * 0.5;
        float _1394 = _1292 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_903, _904, _905), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4133 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1419 + 1.0))) + _1424) * _1305;
        _1441 = _1272;
        _1443 = _1271;
        _1444 = _1270;
        _1445 = _1282;
        _1446 = _1281;
        _1447 = _1280;
        _1448 = _1292;
        _1449 = _1291;
        _1450 = _1290;
        _1451 = _1305;
        _1452 = _1304;
        _1453 = _1303;
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1455 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1456 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
    }
    else
    {
        _1441 = _1442;
        _1443 = _1442;
        _1444 = _1442;
        _1445 = _1442;
        _1446 = _1442;
        _1447 = _1442;
        _1448 = _1442;
        _1449 = _1442;
        _1450 = _1442;
        _1451 = _1442;
        _1452 = _1442;
        _1453 = _1442;
        _1454 = 0.0;
        _1455 = 0.0;
        _1456 = 0.0;
    }
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1481 = fma(_1140, cbModelParam._m0[30u].z, fma(_1136, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132));
        float _1485 = fma(_1140, cbModelParam._m0[31u].z, fma(_1136, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132));
        float _1489 = fma(_1140, cbModelParam._m0[32u].z, fma(_1136, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132));
        float _1512 = _1132 + _903;
        float _1513 = _1136 + _904;
        float _1514 = _1140 + _905;
        float _1524 = fma(_1514, cbModelParam._m0[30u].z, fma(_1513, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1512)) - _1481;
        float _1525 = fma(_1514, cbModelParam._m0[31u].z, fma(_1513, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1512)) - _1485;
        float _1526 = fma(_1514, cbModelParam._m0[32u].z, fma(_1513, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1512)) - _1489;
        float _1530 = inversesqrt(dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526)));
        float _1543 = ((_1530 * _1524) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1481 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1544 = ((_1530 * _1525) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1485 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1545 = ((_1530 * _1526) / cbModelParam._m0[35u].z) + ((((((_1489 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        float _1580 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1547.x + (-0.5));
        float _1582 = _1580 * (_1547.y + (-0.5));
        float _1583 = _1580 * (_1547.z + (-0.5));
        float _1590 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1554.x + (-0.5));
        float _1592 = _1590 * (_1554.y + (-0.5));
        float _1593 = _1590 * (_1554.z + (-0.5));
        float _1600 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1561.x + (-0.5));
        float _1602 = _1600 * (_1561.y + (-0.5));
        float _1603 = _1600 * (_1561.z + (-0.5));
        float _1610 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1568.x + (-0.5));
        float _1612 = _1610 * (_1568.y + (-0.5));
        float _1613 = _1610 * (_1568.z + (-0.5));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = _1581 * 0.5;
        float _1618 = _1591 * 0.5;
        float _1619 = _1601 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_903, _904, _905), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4196 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1644 + 1.0))) + _1649) * _1614;
        float _1659 = _1582 * 0.5;
        float _1660 = _1592 * 0.5;
        float _1661 = _1602 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_903, _904, _905), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4229 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1686 + 1.0))) + _1691) * _1615;
        float _1701 = _1583 * 0.5;
        float _1702 = _1593 * 0.5;
        float _1703 = _1603 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_903, _904, _905), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4262 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1728 + 1.0))) + _1733) * _1616;
        _1750 = _1583;
        _1751 = _1582;
        _1752 = _1581;
        _1753 = _1593;
        _1754 = _1592;
        _1755 = _1591;
        _1756 = _1603;
        _1757 = _1602;
        _1758 = _1601;
        _1759 = _1616;
        _1760 = _1615;
        _1761 = _1614;
        _1762 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
    }
    else
    {
        _1750 = _1442;
        _1751 = _1442;
        _1752 = _1442;
        _1753 = _1442;
        _1754 = _1442;
        _1755 = _1442;
        _1756 = _1442;
        _1757 = _1442;
        _1758 = _1442;
        _1759 = _1442;
        _1760 = _1442;
        _1761 = _1442;
        _1762 = 0.0;
        _1763 = 0.0;
        _1764 = 0.0;
    }
    float _1774 = (cbModelParam._m0[1u].x * (_1762 - _1454)) + _1454;
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1455)) + _1455;
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1456)) + _1456;
    float _1797 = fma(_1776, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1774 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1776, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1774 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1776, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1774));
    float _1818 = _1076 * 0.5;
    float _1819 = _1077 * 0.5;
    float _1820 = _1078 * 0.5;
    float _1821 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1824 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1827 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1750, _1753, _1756, _1759));
    float _1861;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1834 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1441, _1445, _1448, _1451));
        float _1838 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1443, _1446, _1449, _1452));
        float _1842 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1444, _1447, _1450, _1453));
        float _1849 = dot(vec4(cbModelParam._m0[39u]), vec4(_1818, _1819, _1820, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1849) ? 0.0 : (isnan(0.0) ? _1849 : max(0.0, _1849))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1872;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1863 = dot(vec4(cbModelParam._m0[40u]), vec4(_1818, _1819, _1820, 1.0));
        _1872 = dot(vec3(isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1863) ? 0.0 : (isnan(0.0) ? _1863 : max(0.0, _1863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1872 = 1.0;
    }
    float _1876 = (_1872 * cbModelParam._m0[1u].x) + (_1861 * (1.0 - cbModelParam._m0[1u].x));
    float _1886 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _906);
    float _1887 = isnan(_1886) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1886 : min(cbModelParam._m0[25u].z, _1886));
    float _1967;
    float _1969;
    float _1971;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1934 = fma(_1140, cbModelParam._m0[13u].z, fma(_1136, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1132)) + cbModelParam._m0[13u].w;
        float _1938 = fma(_1140, cbModelParam._m0[14u].z, fma(_1136, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1132)) + cbModelParam._m0[14u].w;
        float _1942 = fma(_1140, cbModelParam._m0[15u].z, fma(_1136, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1132)) + cbModelParam._m0[15u].w;
        float _1945 = fma(_1078, cbModelParam._m0[13u].z, fma(_1077, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1076));
        float _1948 = fma(_1078, cbModelParam._m0[14u].z, fma(_1077, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1076));
        float _1951 = fma(_1078, cbModelParam._m0[15u].z, fma(_1077, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1076));
        float _1979;
        if (_1945 > 0.0)
        {
            _1979 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1979 = frontier_phi_14_12_ladder;
        }
        float _2202;
        if (_1948 > 0.0)
        {
            _2202 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2202 = frontier_phi_23_19_ladder;
        }
        float _2459;
        if (_1951 > 0.0)
        {
            _2459 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2459 = frontier_phi_35_30_ladder;
        }
        float _2461 = isnan(_2202) ? _1979 : (isnan(_1979) ? _2202 : min(_1979, _2202));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1945) + _1934;
        float _2467 = (_2462 * _1948) + _1938;
        float _2468 = (_2462 * _1951) + _1942;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2469;
        float _2473 = _2469 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 > _2473) || ((_2467 < _2471) || ((_2466 < _2471) || (_2466 > _2473))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2596 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2468, cbModelParam._m0[9u].z, fma(_2467, cbModelParam._m0[9u].y, _2466 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2468, cbModelParam._m0[10u].z, fma(_2467, cbModelParam._m0[10u].y, _2466 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2468, cbModelParam._m0[11u].z, fma(_2467, cbModelParam._m0[11u].y, _2466 * cbModelParam._m0[11u].x))), _1887);
            frontier_phi_13_35_ladder = _2596.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2596.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2596.x * cbModelParam._m0[1u].y;
        }
        _1967 = frontier_phi_13_35_ladder_2;
        _1969 = frontier_phi_13_35_ladder_1;
        _1971 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1955 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1076, _1077, _1078), _1887);
        _1967 = _1955.x * cbModelParam._m0[1u].y;
        _1969 = _1955.y * cbModelParam._m0[1u].y;
        _1971 = _1955.z * cbModelParam._m0[1u].y;
    }
    float _1975 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _906);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1975 : min(cbModelParam._m0[25u].w, _1975));
    float _2065;
    float _2067;
    float _2069;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2029 = fma(_1140, cbModelParam._m0[21u].z, fma(_1136, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1132)) + cbModelParam._m0[21u].w;
        float _2033 = fma(_1140, cbModelParam._m0[22u].z, fma(_1136, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1132)) + cbModelParam._m0[22u].w;
        float _2037 = fma(_1140, cbModelParam._m0[23u].z, fma(_1136, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1132)) + cbModelParam._m0[23u].w;
        float _2040 = fma(_1078, cbModelParam._m0[21u].z, fma(_1077, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1076));
        float _2043 = fma(_1078, cbModelParam._m0[22u].z, fma(_1077, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1076));
        float _2046 = fma(_1078, cbModelParam._m0[23u].z, fma(_1077, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1076));
        float _2207;
        if (_2040 > 0.0)
        {
            _2207 = abs((1.0 - _2029) / _2040);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2029 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2207 = frontier_phi_25_21_ladder;
        }
        float _2486;
        if (_2043 > 0.0)
        {
            _2486 = abs((1.0 - _2033) / _2043);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2033 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2486 = frontier_phi_37_32_ladder;
        }
        float _2699;
        if (_2046 > 0.0)
        {
            _2699 = abs((1.0 - _2037) / _2046);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2037 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2699 = frontier_phi_46_43_ladder;
        }
        float _2701 = isnan(_2486) ? _2207 : (isnan(_2207) ? _2486 : min(_2207, _2486));
        float _2702 = isnan(_2699) ? _2701 : (isnan(_2701) ? _2699 : min(_2701, _2699));
        float _2706 = (_2702 * _2040) + _2029;
        float _2707 = (_2702 * _2043) + _2033;
        float _2708 = (_2702 * _2046) + _2037;
        float _2709 = _2702 * 9.9999997473787516355514526367188e-05;
        float _2710 = (-1.0) - _2709;
        float _2712 = _2709 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2708 > _2712) || ((_2708 < _2710) || ((_2707 > _2712) || ((_2707 < _2710) || ((_2706 < _2710) || (_2706 > _2712))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2708, cbModelParam._m0[17u].z, fma(_2707, cbModelParam._m0[17u].y, _2706 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2708, cbModelParam._m0[18u].z, fma(_2707, cbModelParam._m0[18u].y, _2706 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2708, cbModelParam._m0[19u].z, fma(_2707, cbModelParam._m0[19u].y, _2706 * cbModelParam._m0[19u].x))), _1976);
            frontier_phi_22_46_ladder = _2907.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2907.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2907.x * cbModelParam._m0[1u].z;
        }
        _2065 = frontier_phi_22_46_ladder_2;
        _2067 = frontier_phi_22_46_ladder_1;
        _2069 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2049 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1076, _1077, _1078), _1976);
        _2065 = _2049.x * cbModelParam._m0[1u].z;
        _2067 = _2049.y * cbModelParam._m0[1u].z;
        _2069 = _2049.z * cbModelParam._m0[1u].z;
    }
    float _2082 = (((_1103 * _1052) + _1104) * _1068) * ((cbModelParam._m0[1u].w * (_2065 - _1967)) + _1967);
    float _2084 = (((_1103 * _1054) + _1104) * _1068) * ((cbModelParam._m0[1u].w * (_2067 - _1969)) + _1969);
    float _2086 = (((_1103 * _1055) + _1104) * _1068) * ((cbModelParam._m0[1u].w * (_2069 - _1971)) + _1971);
    float _2089 = fma(_2086, cbSceneParam._m0[89u].z, fma(_2084, cbSceneParam._m0[89u].y, _2082 * cbSceneParam._m0[89u].x));
    float _2092 = fma(_2086, cbSceneParam._m0[90u].z, fma(_2084, cbSceneParam._m0[90u].y, _2082 * cbSceneParam._m0[90u].x));
    float _2095 = fma(_2086, cbSceneParam._m0[91u].z, fma(_2084, cbSceneParam._m0[91u].y, _2082 * cbSceneParam._m0[91u].x));
    vec4 _2103 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_990, _991));
    float _2105 = _2103.w;
    float _2117 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2105);
    float _2118 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2105);
    float _2119 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2105);
    uvec4 _2123 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2125 = _2123.x * 14u;
    uint _2126 = _2125 + 13u;
    float _2133 = _1068 + (-1.0);
    float _2138 = (cbLight._m0[_2126].x * _2133) + 1.0;
    float _2139 = (cbLight._m0[_2126].y * _2133) + 1.0;
    float _2140 = (cbLight._m0[_2126].z * _2133) + 1.0;
    float _2141 = (cbLight._m0[_2126].w * _2133) + 1.0;
    uint _2142 = _2125 + 5u;
    float _2148 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2152 = _2125 + 4u;
    float _2161 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
    uint _2165 = _2125 | 1u;
    float _2176 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_903, _904, _905));
    float _2179 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_903, _904, _905));
    float _4398 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _4409 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2184 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.3183098733425140380859375;
    float _2186 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * 0.3183098733425140380859375;
    float _2193 = ((cbLight._m0[_2142].x * _2148) * _2186) + (((cbLight._m0[_2152].x * _2117) * _2161) * _2184);
    float _2194 = ((_2148 * cbLight._m0[_2142].y) * _2186) + (((cbLight._m0[_2152].y * _2118) * _2161) * _2184);
    float _2195 = ((_2148 * cbLight._m0[_2142].z) * _2186) + (((cbLight._m0[_2152].z * _2119) * _2161) * _2184);
    uvec4 _2199 = floatBitsToUint(cbLight._m0[_2125 + 12u]);
    bool _2201 = _2199.x == 0u;
    float _2212;
    float _2214;
    float _2216;
    if (_2201)
    {
        _2212 = _2193;
        _2214 = _2194;
        _2216 = _2195;
    }
    else
    {
        uint _2220 = _2125 + 6u;
        float _2236 = (dot(vec3(cbLight._m0[_2125 + 2u].xyz), vec3(_903, _904, _905)) * 0.5) + 0.5;
        float _2237 = _2236 * _2236;
        float _4420 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2238 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2239 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2212 = (((cbLight._m0[_2220].x * 0.3183098733425140380859375) * _2238) * _2239) + _2193;
        _2214 = (((cbLight._m0[_2220].y * 0.3183098733425140380859375) * _2238) * _2239) + _2194;
        _2216 = (((cbLight._m0[_2220].z * 0.3183098733425140380859375) * _2238) * _2239) + _2195;
    }
    bool _2219 = _2199.y == 0u;
    float _2257;
    float _2259;
    float _2261;
    if (_2219)
    {
        _2257 = _2212;
        _2259 = _2214;
        _2261 = _2216;
    }
    else
    {
        uint _2430 = _2125 + 7u;
        float _2446 = (dot(vec3(cbLight._m0[_2125 + 3u].xyz), vec3(_903, _904, _905)) * 0.5) + 0.5;
        float _2447 = _2446 * _2446;
        float _4436 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2448 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2449 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2257 = (((cbLight._m0[_2430].x * 0.3183098733425140380859375) * _2448) * _2449) + _2212;
        _2259 = (((cbLight._m0[_2430].y * 0.3183098733425140380859375) * _2448) * _2449) + _2214;
        _2261 = (((cbLight._m0[_2430].z * 0.3183098733425140380859375) * _2448) * _2449) + _2216;
    }
    uint _2264 = _2125 + 8u;
    float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _906) * 0.949999988079071044921875);
    float _2278 = _2277 * _2277;
    float _2279 = cbLight._m0[_2125].x + _982;
    float _2280 = cbLight._m0[_2125].y + _983;
    float _2281 = cbLight._m0[_2125].z + _984;
    float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
    float _2286 = _2285 * _2279;
    float _2287 = _2285 * _2280;
    float _2288 = _2285 * _2281;
    float _2289 = dot(vec3(_903, _904, _905), vec3(cbLight._m0[_2125].xyz));
    float _4452 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _4463 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _2293 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2294 = dot(vec3(_903, _904, _905), vec3(_2286, _2287, _2288));
    float _4474 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2298 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2286, _2287, _2288));
    float _4485 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2302 = _2278 * _2278;
    float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
    float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0);
    float _2315 = 0.959999978542327880859375 - _1049;
    float _2317 = 0.959999978542327880859375 - _1050;
    float _2318 = 0.959999978542327880859375 - _1051;
    float _2325 = 1.0 - _2278;
    float _2336 = (0.5 / (((_2293 * ((_2292 * _2325) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2325) + _2278) * _2292))) * _2292;
    float _4496 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2338 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
    uint _2352 = _2125 + 9u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _906) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2165].x + _982;
    float _2366 = cbLight._m0[_2165].y + _983;
    float _2367 = cbLight._m0[_2165].z + _984;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_903, _904, _905), vec3(cbLight._m0[_2165].xyz));
    float _4507 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2379 = dot(vec3(_903, _904, _905), vec3(_2372, _2373, _2374));
    float _4518 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2383 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2372, _2373, _2374));
    float _4529 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2387 = _2364 * _2364;
    float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
    float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0);
    float _2405 = 1.0 - _2364;
    float _2415 = (0.5 / (((_2293 * ((_2378 * _2405) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2405) + _2364) * _2378))) * _2378;
    float _4540 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2417 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
    float _2427 = (((((_2398 * _2315) + _1052) * cbLight._m0[_2352].x) * _2417) * _2148) + ((((cbLight._m0[_2264].x * _2117) * ((_2314 * _2315) + _1052)) * _2338) * _2161);
    float _2428 = (((((_2398 * _2317) + _1054) * cbLight._m0[_2352].y) * _2417) * _2148) + ((((cbLight._m0[_2264].y * _2118) * ((_2314 * _2317) + _1054)) * _2338) * _2161);
    float _2429 = (((((_2398 * _2318) + _1055) * cbLight._m0[_2352].z) * _2417) * _2148) + ((((cbLight._m0[_2264].z * _2119) * ((_2314 * _2318) + _1055)) * _2338) * _2161);
    float _2491;
    float _2493;
    float _2495;
    if (_2201)
    {
        _2491 = _2427;
        _2493 = _2428;
        _2495 = _2429;
    }
    else
    {
        uint _2497 = _2125 + 2u;
        uint _2501 = _2125 + 10u;
        float _2515 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2497].w)) * _906) * 0.949999988079071044921875);
        float _2516 = _2515 * _2515;
        float _2517 = cbLight._m0[_2497].x + _982;
        float _2518 = cbLight._m0[_2497].y + _983;
        float _2519 = cbLight._m0[_2497].z + _984;
        float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
        float _2524 = _2523 * _2517;
        float _2525 = _2523 * _2518;
        float _2526 = _2523 * _2519;
        float _2527 = dot(vec3(_903, _904, _905), vec3(cbLight._m0[_2497].xyz));
        float _4551 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2531 = dot(vec3(_903, _904, _905), vec3(_2524, _2525, _2526));
        float _4562 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2535 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_2524, _2525, _2526));
        float _4573 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2539 = _2516 * _2516;
        float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
        float _2550 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
        float _2557 = 1.0 - _2516;
        float _2567 = (0.5 / (((_2293 * ((_2530 * _2557) + _2516)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2557) + _2516) * _2530))) * _2530;
        float _4584 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2569 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
        float _2570 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2491 = (((((_2550 * _2315) + _1052) * cbLight._m0[_2501].x) * _2569) * _2570) + _2427;
        _2493 = (((((_2550 * _2317) + _1054) * cbLight._m0[_2501].y) * _2569) * _2570) + _2428;
        _2495 = (((((_2550 * _2318) + _1055) * cbLight._m0[_2501].z) * _2569) * _2570) + _2429;
    }
    float _2605;
    float _2607;
    float _2609;
    if (_2219)
    {
        _2605 = _2491;
        _2607 = _2493;
        _2609 = _2495;
    }
    else
    {
        uint _2616 = _2125 + 3u;
        uint _2620 = _2125 + 11u;
        float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2616].w)) * _906) * 0.949999988079071044921875);
        float _2635 = _2634 * _2634;
        float _2636 = cbLight._m0[_2616].x + _982;
        float _2637 = cbLight._m0[_2616].y + _983;
        float _2638 = cbLight._m0[_2616].z + _984;
        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
        float _2643 = _2642 * _2636;
        float _2644 = _2642 * _2637;
        float _2645 = _2642 * _2638;
        float _2646 = dot(vec3(_903, _904, _905), vec3(cbLight._m0[_2616].xyz));
        float _4600 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2650 = dot(vec3(_903, _904, _905), vec3(_2643, _2644, _2645));
        float _4611 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2654 = dot(vec3(cbLight._m0[_2616].xyz), vec3(_2643, _2644, _2645));
        float _4622 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2658 = _2635 * _2635;
        float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
        float _2669 = exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0);
        float _2676 = 1.0 - _2635;
        float _2686 = (0.5 / (((_2293 * ((_2649 * _2676) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2676) + _2635) * _2649))) * _2649;
        float _4633 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2688 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
        float _2689 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2605 = (((((_2669 * _2315) + _1052) * cbLight._m0[_2620].x) * _2688) * _2689) + _2491;
        _2607 = (((((_2669 * _2317) + _1054) * cbLight._m0[_2620].y) * _2688) * _2689) + _2493;
        _2609 = (((((_2669 * _2318) + _1055) * cbLight._m0[_2620].z) * _2688) * _2689) + _2495;
    }
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    if (_2123.y == 0u)
    {
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2764;
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2764;
        float _2767 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2764;
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.x;
        uint _2791 = uint((float(_2779.y) * floor(float(uint(cbSceneParam._m0[85u].y * _991) / _2780))) + floor(float(uint(cbSceneParam._m0[85u].x * _990) / _2780)));
        float _2801 = (log2(_2767 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2802 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        uint _2805 = uint(isnan(14.0) ? _2802 : (isnan(_2802) ? 14.0 : min(_2802, 14.0)));
        uvec4 _2810 = texelFetch(g_lightClusterGridBuffer, int(((_2805 << 2u) + (_2791 << 6u)) >> 2u));
        uint _2811 = _2810.x;
        uint _2812 = _2779.z;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((((1u << ((_2812 >> 4u) & 15u)) + 4294967295u) & _2811) == 0u) || ((_2812 & 240u) == 0u))
        {
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
        }
        else
        {
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            uint _3062 = 0u;
            uint _3071;
            bool _3072;
            for (;;)
            {
                _3071 = texelFetch(g_lightClassification, int((((_2805 << 5u) + (_2791 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                _3072 = _3071 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3072)
                {
                    frontier_phi_61_pred = _3056;
                    frontier_phi_61_pred_1 = _3061;
                    frontier_phi_61_pred_2 = _3060;
                    frontier_phi_61_pred_3 = _3059;
                    frontier_phi_61_pred_4 = _3058;
                    frontier_phi_61_pred_5 = _3057;
                }
                else
                {
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    uint _3186;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3071;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    for (;;)
                    {
                        uint _3190 = uint(findLSB(_3186)) + (_3062 << 5u);
                        uint _3187 = (_3186 + 4294967295u) & _3186;
                        uint _3192 = _3190 * 48u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3212 = (_3190 * 48u) + 4u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3231 = (_3190 * 48u) + 8u;
                        vec3 _3242 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x));
                        float _3246 = _3206.x - _2765;
                        float _3247 = _3206.y - _2766;
                        float _3248 = _3206.z - _2767;
                        float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                        float _3252 = inversesqrt(_3249);
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3256 = dot(vec3(_1009, _1012, _1015), vec3(_3253, _3254, _3255));
                        float _3261 = 1.0 - (_3249 * _3206.w);
                        float _4659 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3263 = sqrt(_3249) * _3225.w;
                        float _3266 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3256) + _3267;
                        float _3273 = _3263 * _3263;
                        float _3277 = ((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3262) / ((_3273 * 0.699999988079071044921875) + 1.0);
                        float _3281 = (-0.0) - _2765;
                        float _3282 = (-0.0) - _2766;
                        float _3283 = (-0.0) - _2767;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3288 = _3287 * _3281;
                        float _3289 = _3287 * _3282;
                        float _3290 = _3287 * _3283;
                        float _3298 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                        float _3299 = 1.0 - _1084;
                        float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                        float _3307 = _3306 * _3306;
                        float _3308 = _3307 * _3307;
                        float _3309 = _3288 + _3253;
                        float _3310 = _3289 + _3254;
                        float _3311 = _3290 + _3255;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3319 = dot(vec3(_1009, _1012, _1015), vec3(_3288, _3289, _3290));
                        float _4675 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3323 = dot(vec3(_1009, _1012, _1015), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                        float _4686 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3326 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                        float _3331 = _3266 * _3307;
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3256) + _3332;
                        float _4697 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3336 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3337 = 1.0 - _3307;
                        float _3347 = (0.5 / (((_3336 * ((_3322 * _3337) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3307) * _3322))) * _3336;
                        float _4708 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3358 = (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3330 * _3330) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125))) * _3262;
                        _3115 = (_3277 * _3225.x) + _3183;
                        _3116 = (_3277 * _3225.y) + _3184;
                        _3117 = (_3277 * _3225.z) + _3185;
                        _3112 = (_3358 * _3242.x) + _3180;
                        _3113 = (_3358 * _3242.y) + _3181;
                        _3114 = (_3358 * _3242.z) + _3182;
                        if (_3187 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3187;
                        }
                    }
                    frontier_phi_61_pred = _3112;
                    frontier_phi_61_pred_1 = _3117;
                    frontier_phi_61_pred_2 = _3116;
                    frontier_phi_61_pred_3 = _3115;
                    frontier_phi_61_pred_4 = _3114;
                    frontier_phi_61_pred_5 = _3113;
                }
                _2913 = frontier_phi_61_pred;
                _2923 = frontier_phi_61_pred_1;
                _2921 = frontier_phi_61_pred_2;
                _2919 = frontier_phi_61_pred_3;
                _2917 = frontier_phi_61_pred_4;
                _2915 = frontier_phi_61_pred_5;
                uint _3063 = _3062 + 1u;
                if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3056 = _2913;
                    _3057 = _2915;
                    _3058 = _2917;
                    _3059 = _2919;
                    _3060 = _2921;
                    _3061 = _2923;
                    _3062 = _3063;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
        }
        uvec4 _2926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2927 = _2926.z;
        uint _2929 = (_2927 >> 8u) & 15u;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        if (((4294967295u << _2929) & _2811) == 0u)
        {
            _3024 = _2912;
            _3026 = _2914;
            _3028 = _2916;
            _3030 = _2918;
            _3032 = _2920;
            _3034 = _2922;
        }
        else
        {
            float _3049 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
            float _3050 = _3049 * _2765;
            float _3051 = _3049 * _2766;
            float _3052 = _3049 * _2767;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2929 < ((_2927 >> 12u) & 15u))
            {
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3163 = _2912;
                float _3164 = _2914;
                float _3165 = _2916;
                float _3166 = _2918;
                float _3167 = _2920;
                float _3168 = _2922;
                uint _3169 = _2929;
                uint _3178;
                bool _3179;
                for (;;)
                {
                    _3178 = texelFetch(g_lightClassification, int((((_2805 << 5u) + (_2791 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                    _3179 = _3178 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3179)
                    {
                        frontier_phi_67_pred = _3166;
                        frontier_phi_67_pred_1 = _3167;
                        frontier_phi_67_pred_2 = _3168;
                        frontier_phi_67_pred_3 = _3165;
                        frontier_phi_67_pred_4 = _3164;
                        frontier_phi_67_pred_5 = _3163;
                    }
                    else
                    {
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3376 = _3163;
                        float _3377 = _3164;
                        float _3378 = _3165;
                        float _3379 = _3166;
                        float _3380 = _3167;
                        float _3381 = _3168;
                        uint _3382 = _3178;
                        uint _3383;
                        vec4 _3408;
                        float _3409;
                        vec4 _3424;
                        vec3 _3436;
                        vec4 _3451;
                        vec4 _3466;
                        float _3512;
                        bool _3513;
                        for (;;)
                        {
                            uint _3393 = ((_3169 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3382));
                            _3383 = (_3382 + 4294967295u) & _3382;
                            uint _3395 = _3393 * 40u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            _3409 = _3408.w;
                            uint _3411 = (_3393 * 40u) + 4u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3393 * 40u) + 8u;
                            _3436 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x));
                            uint _3438 = (_3393 * 40u) + 16u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3393 * 40u) + 20u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3393 * 40u) + 24u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3487 = (_3393 * 40u) + 28u;
                            vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            _3512 = fma(_2767, _3500.z, fma(_2766, _3500.y, _3500.x * _2765)) + _3500.w;
                            _3513 = !((fma(_2767, _3481.z, fma(_2766, _3481.y, _3481.x * _2765)) + _3481.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3513)
                            {
                                float _3540 = _3408.x - _2765;
                                float _3541 = _3408.y - _2766;
                                float _3542 = _3408.z - _2767;
                                float _3543 = dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542));
                                float _3546 = inversesqrt(_3543);
                                float _3547 = _3546 * _3540;
                                float _3548 = _3546 * _3541;
                                float _3549 = _3546 * _3542;
                                float _3553 = 1.0 - (_3543 / (_3409 * _3409));
                                float _4719 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3558 = sqrt(_3543) * _3424.w;
                                float _3560 = 1.39999997615814208984375 / (_3558 + 1.39999997615814208984375);
                                float _3561 = _3560 * _3560;
                                float _3564 = ((1.0 - _3561) * dot(vec3(_3547, _3548, _3549), vec3(_1009, _1012, _1015))) + _3561;
                                float _3567 = _3558 * _3558;
                                float _3571 = (fma(_2767, _3451.z, fma(_2766, _3451.y, _3451.x * _2765)) + _3451.w) / _3512;
                                float _3572 = (fma(_2767, _3466.z, fma(_2766, _3466.y, _3466.x * _2765)) + _3466.w) / _3512;
                                float _3576 = 1.0 - dot(vec2(_3571, _3572), vec2(_3571, _3572));
                                float _4735 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3578 = _3577 * (((isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0))) * _3554) / ((_3567 * 0.699999988079071044921875) + 1.0));
                                float _3590 = exp2(log2(1.0 / ((_3567 * 3.5) + 5.0)) * 0.25);
                                float _3591 = 1.0 - _1084;
                                float _3598 = sqrt(1.0 - ((1.0 - (_3591 * _3591)) * (1.0 - (_3590 * _3590))));
                                float _3599 = _3598 * _3598;
                                float _3600 = _3599 * _3599;
                                float _3601 = _3547 - _3050;
                                float _3602 = _3548 - _3051;
                                float _3603 = _3549 - _3052;
                                float _3607 = inversesqrt(dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603)));
                                float _3611 = dot(vec3(_1009, _1012, _1015), vec3((-0.0) - _3050, (-0.0) - _3051, (-0.0) - _3052));
                                float _4746 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3614 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3615 = dot(vec3(_1009, _1012, _1015), vec3(_3607 * _3601, _3607 * _3602, _3607 * _3603));
                                float _4757 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3618 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3622 = ((_3618 * _3618) * (_3600 + (-1.0))) + 1.0;
                                float _3623 = _3560 * _3599;
                                float _3624 = _3623 * _3623;
                                float _3630 = ((1.0 - _3624) * dot(vec3(_1009, _1012, _1015), vec3(_3547, _3548, _3549))) + _3624;
                                float _4768 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3632 = 1.0 - _3599;
                                float _3642 = (0.5 / (((_3631 * ((_3614 * _3632) + _3599)) + 9.9999999392252902907785028219223e-09) + (((_3631 * _3632) + _3599) * _3614))) * _3631;
                                float _4779 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3652 = (_3577 * _3554) * (((_3600 * 3.1415927410125732421875) * (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) / ((_3622 * _3622) * ((_3567 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3652 * _3436.x;
                                frontier_phi_73_pred_1 = _3652 * _3436.y;
                                frontier_phi_73_pred_2 = _3578 * _3424.z;
                                frontier_phi_73_pred_3 = _3578 * _3424.y;
                                frontier_phi_73_pred_4 = _3578 * _3424.x;
                                frontier_phi_73_pred_5 = _3652 * _3436.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3656 = frontier_phi_73_pred;
                            _3657 = frontier_phi_73_pred_1;
                            _3661 = frontier_phi_73_pred_2;
                            _3660 = frontier_phi_73_pred_3;
                            _3659 = frontier_phi_73_pred_4;
                            _3658 = frontier_phi_73_pred_5;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            if (_3383 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3383;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3366;
                        frontier_phi_67_pred_1 = _3367;
                        frontier_phi_67_pred_2 = _3368;
                        frontier_phi_67_pred_3 = _3365;
                        frontier_phi_67_pred_4 = _3364;
                        frontier_phi_67_pred_5 = _3363;
                    }
                    _3031 = frontier_phi_67_pred;
                    _3033 = frontier_phi_67_pred_1;
                    _3035 = frontier_phi_67_pred_2;
                    _3029 = frontier_phi_67_pred_3;
                    _3027 = frontier_phi_67_pred_4;
                    _3025 = frontier_phi_67_pred_5;
                    uint _3170 = _3169 + 1u;
                    if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3163 = _3025;
                        _3164 = _3027;
                        _3165 = _3029;
                        _3166 = _3031;
                        _3167 = _3033;
                        _3168 = _3035;
                        _3169 = _3170;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3033;
                frontier_phi_55_56_ladder_1 = _3035;
                frontier_phi_55_56_ladder_2 = _3031;
                frontier_phi_55_56_ladder_3 = _3029;
                frontier_phi_55_56_ladder_4 = _3027;
                frontier_phi_55_56_ladder_5 = _3025;
            }
            else
            {
                frontier_phi_55_56_ladder = _2920;
                frontier_phi_55_56_ladder_1 = _2922;
                frontier_phi_55_56_ladder_2 = _2918;
                frontier_phi_55_56_ladder_3 = _2916;
                frontier_phi_55_56_ladder_4 = _2914;
                frontier_phi_55_56_ladder_5 = _2912;
            }
            _3024 = frontier_phi_55_56_ladder_5;
            _3026 = frontier_phi_55_56_ladder_4;
            _3028 = frontier_phi_55_56_ladder_3;
            _3030 = frontier_phi_55_56_ladder_2;
            _3032 = frontier_phi_55_56_ladder;
            _3034 = frontier_phi_55_56_ladder_1;
        }
        float _3039 = isnan(1.0) ? _1068 : (isnan(_1068) ? 1.0 : min(_1068, 1.0));
        _2824 = (_3039 * _3030) + _2257;
        _2826 = (_3039 * _3032) + _2259;
        _2828 = (_3039 * _3034) + _2261;
        _2830 = ((_3024 * _1052) * _3039) + _2605;
        _2832 = ((_3026 * _1054) * _3039) + _2607;
        _2834 = ((_3028 * _1055) * _3039) + _2609;
    }
    else
    {
        _2824 = _2257;
        _2826 = _2259;
        _2828 = _2261;
        _2830 = _2605;
        _2832 = _2607;
        _2834 = _2609;
    }
    float _4795 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _4806 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _4817 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    uint _2854 = _283 + 6u;
    float _2862 = _990 / cbSceneParam._m0[86u].x;
    float _2863 = _991 / cbSceneParam._m0[86u].y;
    vec4 _2877 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2862, _2863, (log2((isnan(cbSceneParam._m0[77u].w) ? _925 : (isnan(_925) ? cbSceneParam._m0[77u].w : min(_925, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2879 = _2877.x;
    float _2880 = _2877.y;
    float _2881 = _2877.z;
    float _2882 = _2877.w;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_925 > cbSceneParam._m0[78u].w)
    {
        float _2937 = isnan(_925) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _925 : min(cbSceneParam._m0[80u].w, _925));
        float _2938 = _2937 / _925;
        float _2949 = _2938 * _975;
        float _2950 = _976 * _2938;
        float _2951 = (-0.0) - _2950;
        float _2952 = _2938 * _977;
        float _2954 = (cbSceneParam._m0[77u].w * _2951) / _2937;
        float _2955 = _2954 + cbSceneParam._m0[79u].w;
        float _2956 = cbSceneParam._m0[79u].w - _2950;
        float _2962 = sqrt(((_2949 * _2949) + (_2950 * _2950)) + (_2952 * _2952));
        float _2965 = (1.0 - (cbSceneParam._m0[77u].w / _2937)) * _2962;
        float _2970 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2972 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3125;
        if (abs((_2951 - _2954) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3125 = ((((_2955 > 0.0) ? exp2(_2970 * _2955) : (2.0 - exp2(_2972 * _2955))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2965;
        }
        else
        {
            float _3085 = 1.0 / cbSceneParam._m0[80u].x;
            float _3086 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : max(_2955, _2956));
            float _3087 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : min(_2955, _2956));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            _3125 = ((abs(_2962 / _2951) * cbSceneParam._m0[80u].y) * ((((_3096 - _3097) * 2.0) - ((exp2(_2970 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0)))) - exp2(_2970 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))))) * _3085)) - ((exp2(_2972 * _3096) - exp2(_2972 * _3097)) * _3085))) + (_2965 * cbSceneParam._m0[80u].z);
        }
        vec4 _3127 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2862, _2863, 1.0), 0.0);
        float _3136 = exp2((_3125 * (-1.44269502162933349609375)) * (1.0 - _3127.w));
        float _3137 = log2(_3136);
        float _3153 = log2(_2882);
        _2974 = (exp2(_3153 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].x)) * _3127.x) / cbSceneParam._m0[78u].x)) + _2879;
        _2976 = (exp2(_3153 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].y)) * _3127.y) / cbSceneParam._m0[78u].y)) + _2880;
        _2978 = (exp2(_3153 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].z)) * _3127.z) / cbSceneParam._m0[78u].z)) + _2881;
        _2980 = _3136 * _2882;
    }
    else
    {
        _2974 = _2879;
        _2976 = _2880;
        _2978 = _2881;
        _2980 = _2882;
    }
    float _2992 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2993 = _2992 == 3.0;
    float _2994 = log2(_2980);
    float _3001 = exp2(_2994 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2824 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1068))) + ((_2830 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1876)) * cbPerFrame._m0[3u].x));
    float _3002 = exp2(_2994 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2826 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1068))) + ((_2832 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1876)) * cbPerFrame._m0[3u].x));
    float _3003 = exp2(_2994 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2828 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1068))) + ((_2834 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1876)) * cbPerFrame._m0[3u].x));
    float _3012 = (_2992 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3012 * (_2993 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2974)));
    SV_Target.y = _3012 * (_2993 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2976)));
    SV_Target.z = _3012 * (_2993 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2978)));
    SV_Target.w = cbInstanceData._m0[_2854].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2854].w;
}


