#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1342;
float _3747;
float _3748;
float _3749;
float _3750;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3759 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    float _447 = ((_417.z - _438) * _390) + _438;
    float _450 = ((((_417.x - _436) * _390) + _436) * 2.0) + (-1.0);
    float _452 = ((((_417.y - _437) * _390) + _437) * 2.0) + (-1.0);
    float _453 = dot(vec2(_450, _452), vec2(_450, _452));
    float _3770 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))));
    float _461 = fma(_458, _241, fma(_452, _248, _450 * _234));
    float _464 = fma(_458, _242, fma(_452, _249, _450 * _235));
    float _467 = fma(_458, _243, fma(_452, _250, _450 * _236));
    float _471 = inversesqrt(dot(vec3(_461, _464, _467), vec3(_461, _464, _467)));
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _515 = _513.x;
    float _516 = 1.0 - _515;
    float _522 = (cbMtdParam._m0[19u].x + dot(vec4(_471 * _461, _471 * _464, _471 * _467, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_515 - _516) * cbMtdParam._m0[24u].z) + _516) * cbMtdParam._m0[21u].z);
    float _3781 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _525 = (-0.0) - cbMtdParam._m0[24u].x;
    float _527 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _527 : (isnan(_527) ? 1.0 : min(_527, 1.0));
    float _535 = _523 - ((_523 * TEXCOORD_8.x) * _528);
    float _536 = _523 - ((_523 * TEXCOORD_8.y) * _528);
    float _537 = _523 - ((_523 * TEXCOORD_8.z) * _528);
    float _544 = (_535 * (cbMtdParam._m0[17u].x - _397)) + _397;
    float _545 = (_536 * (cbMtdParam._m0[17u].y - _398)) + _398;
    float _546 = (_537 * (cbMtdParam._m0[17u].z - _399)) + _399;
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _560 = _558.x;
    float _561 = 1.0 - _560;
    float _589 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_560 - _561) * cbMtdParam._m0[24u].w) + _561) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3802 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _598 = ((((cbMtdParam._m0[10u].x - _544) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _590) + _544;
    float _599 = ((((cbMtdParam._m0[10u].y - _545) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _590) + _545;
    float _600 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _546)) * _590) + _546;
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _628 = _626.x;
    float _646 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _628) * _390) + _628;
    float _650 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _646) * cbMtdParam._m0[19u].z) + _646;
    float _652 = _650 - (_650 * _535);
    float _654 = _652 - (_652 * _590);
    vec4 _668 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _675 = (_668.x * 2.0) + (-1.0);
    float _676 = (_668.y * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _3813 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _685 = ((_668.z - _447) * _535) + _447;
    float _688 = ((cbMtdParam._m0[23u].y - _685) * _590) + _685;
    vec4 _707 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _713 = (_707.x * 2.0) + (-1.0);
    float _714 = (_707.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _3824 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _730 = ((sqrt(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) - _458) * _537) + _458;
    float _733 = (((_675 - _450) * _535) + _450) + (cbMtdParam._m0[21u].x * _450);
    float _734 = (((_676 - _452) * _536) + _452) + (cbMtdParam._m0[21u].x * _452);
    float _745 = (((_713 - _733) + (_733 * cbMtdParam._m0[22u].z)) * _590) + _733;
    float _746 = (((_714 - _734) + (_734 * cbMtdParam._m0[22u].z)) * _590) + _734;
    float _747 = (_590 * (sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) - _730)) + _730;
    float _749 = cbMtdParam._m0[22u].x + _487.w;
    float _752 = fma(_747, _241, fma(_746, _248, _745 * _234));
    float _755 = fma(_747, _242, fma(_746, _249, _745 * _235));
    float _758 = fma(_747, _243, fma(_746, _250, _745 * _236));
    float _762 = inversesqrt(dot(vec3(_752, _755, _758), vec3(_752, _755, _758)));
    float _763 = _762 * _752;
    float _764 = _762 * _755;
    float _765 = _762 * _758;
    float _3835 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _766 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _3857 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3868 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3879 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3890 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _771 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _785 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _835 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _825);
    float _836 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _825);
    float _837 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _825);
    float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
    float _842 = _835 * _841;
    float _843 = _836 * _841;
    float _844 = _837 * _841;
    vec4 _849 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _851 = _849.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1023 = sqrt(((_835 * _835) + (_836 * _836)) + (_837 * _837));
        float _1029 = (cbMatDynParam._m0[5u].x * _1023) + cbMatDynParam._m0[5u].y;
        float _3901 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1034 = (cbMatDynParam._m0[5u].z * _1023) + cbMatDynParam._m0[5u].w;
        float _3912 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) - _1030)) + _1030) < ((_851 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _862 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _863 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _881 = fma(_765, cbSceneParam._m0[5u].z, fma(_764, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _763));
    float _884 = fma(_765, cbSceneParam._m0[6u].z, fma(_764, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _763));
    float _887 = fma(_765, cbSceneParam._m0[7u].z, fma(_764, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _763));
    uint _900 = _253 + 9u;
    uint _901 = _900 + uint(cbMatDynParam._m0[0u].w);
    float _907 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_901].x;
    float _908 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_901].y;
    float _909 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_901].z;
    float _3923 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _913 = 1.0 - _771;
    float _914 = _910 * _913;
    float _915 = _911 * _913;
    float _916 = _912 * _913;
    float _921 = (_910 + (-0.039999999105930328369140625)) * _771;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _771;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _771;
    float _924 = _921 + 0.039999999105930328369140625;
    float _926 = _922 + 0.039999999105930328369140625;
    float _927 = _923 + 0.039999999105930328369140625;
    vec4 _936 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _862, cbSceneParam._m0[86u].y * _863));
    float _940 = ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * TEXCOORD_5.w) * _936.x;
    float _941 = dot(vec3(_763, _764, _765), vec3(_842, _843, _844));
    float _944 = _941 * 2.0;
    float _948 = (_944 * _763) - _842;
    float _949 = (_944 * _764) - _843;
    float _950 = (_944 * _765) - _844;
    float _954 = abs(dot(vec3(_842, _843, _844), vec3(_763, _764, _765)));
    float _3956 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _956 = sqrt(_766);
    float _969 = exp2((_956 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_956 * 3.0));
    float _975 = (1.0 - _969) * ((_956 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _976 = _969 * _956;
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1341;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1066 = fma(_1012, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004));
        float _1070 = fma(_1012, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004));
        float _1074 = fma(_1012, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004));
        float _1099 = _1004 + _763;
        float _1100 = _1008 + _764;
        float _1101 = _1012 + _765;
        float _1111 = fma(_1101, cbModelParam._m0[26u].z, fma(_1100, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099)) - _1066;
        float _1112 = fma(_1101, cbModelParam._m0[27u].z, fma(_1100, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099)) - _1070;
        float _1113 = fma(_1101, cbModelParam._m0[28u].z, fma(_1100, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099)) - _1074;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1066 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1070 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[34u].z) + ((((((_1074 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1169 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1135.x + (-0.5));
        float _1171 = _1169 * (_1135.y + (-0.5));
        float _1172 = _1169 * (_1135.z + (-0.5));
        float _1179 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1142.x + (-0.5));
        float _1181 = _1179 * (_1142.y + (-0.5));
        float _1182 = _1179 * (_1142.z + (-0.5));
        float _1189 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1149.x + (-0.5));
        float _1191 = _1189 * (_1149.y + (-0.5));
        float _1192 = _1189 * (_1149.z + (-0.5));
        float _1199 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1156.x + (-0.5));
        float _1201 = _1199 * (_1156.y + (-0.5));
        float _1202 = _1199 * (_1156.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1223 = (dot(vec3(_763, _764, _765), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1233 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _4004 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1235 + 1.0))) + _1240) * _1203;
        float _1250 = _1171 * 0.5;
        float _1251 = _1181 * 0.5;
        float _1252 = _1191 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_763, _764, _765), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4037 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1277 + 1.0))) + _1282) * _1204;
        float _1292 = _1172 * 0.5;
        float _1293 = _1182 * 0.5;
        float _1294 = _1192 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_763, _764, _765), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4070 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1319 + 1.0))) + _1324) * _1205;
        _1341 = _1172;
        _1343 = _1171;
        _1344 = _1170;
        _1345 = _1182;
        _1346 = _1181;
        _1347 = _1180;
        _1348 = _1192;
        _1349 = _1191;
        _1350 = _1190;
        _1351 = _1205;
        _1352 = _1204;
        _1353 = _1203;
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1342;
        _1343 = _1342;
        _1344 = _1342;
        _1345 = _1342;
        _1346 = _1342;
        _1347 = _1342;
        _1348 = _1342;
        _1349 = _1342;
        _1350 = _1342;
        _1351 = _1342;
        _1352 = _1342;
        _1353 = _1342;
        _1354 = 0.0;
        _1355 = 0.0;
        _1356 = 0.0;
    }
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1384 = fma(_1012, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004));
        float _1388 = fma(_1012, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004));
        float _1392 = fma(_1012, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004));
        float _1415 = _1004 + _763;
        float _1416 = _1008 + _764;
        float _1417 = _1012 + _765;
        float _1427 = fma(_1417, cbModelParam._m0[30u].z, fma(_1416, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1415)) - _1384;
        float _1428 = fma(_1417, cbModelParam._m0[31u].z, fma(_1416, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1415)) - _1388;
        float _1429 = fma(_1417, cbModelParam._m0[32u].z, fma(_1416, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1415)) - _1392;
        float _1433 = inversesqrt(dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429)));
        float _1446 = ((_1433 * _1427) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1384 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1433 * _1428) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1388 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1433 * _1429) / cbModelParam._m0[35u].z) + ((((((_1392 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        float _1483 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1450.x + (-0.5));
        float _1485 = _1483 * (_1450.y + (-0.5));
        float _1486 = _1483 * (_1450.z + (-0.5));
        float _1493 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1457.x + (-0.5));
        float _1495 = _1493 * (_1457.y + (-0.5));
        float _1496 = _1493 * (_1457.z + (-0.5));
        float _1503 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1464.x + (-0.5));
        float _1505 = _1503 * (_1464.y + (-0.5));
        float _1506 = _1503 * (_1464.z + (-0.5));
        float _1513 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1471.x + (-0.5));
        float _1515 = _1513 * (_1471.y + (-0.5));
        float _1516 = _1513 * (_1471.z + (-0.5));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = _1484 * 0.5;
        float _1521 = _1494 * 0.5;
        float _1522 = _1504 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_763, _764, _765), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4133 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1547 + 1.0))) + _1552) * _1517;
        float _1562 = _1485 * 0.5;
        float _1563 = _1495 * 0.5;
        float _1564 = _1505 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_763, _764, _765), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4166 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1589 + 1.0))) + _1594) * _1518;
        float _1604 = _1486 * 0.5;
        float _1605 = _1496 * 0.5;
        float _1606 = _1506 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_763, _764, _765), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4199 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1631 + 1.0))) + _1636) * _1519;
        _1653 = _1486;
        _1654 = _1485;
        _1655 = _1484;
        _1656 = _1496;
        _1657 = _1495;
        _1658 = _1494;
        _1659 = _1506;
        _1660 = _1505;
        _1661 = _1504;
        _1662 = _1519;
        _1663 = _1518;
        _1664 = _1517;
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
    }
    else
    {
        _1653 = _1342;
        _1654 = _1342;
        _1655 = _1342;
        _1656 = _1342;
        _1657 = _1342;
        _1658 = _1342;
        _1659 = _1342;
        _1660 = _1342;
        _1661 = _1342;
        _1662 = _1342;
        _1663 = _1342;
        _1664 = _1342;
        _1665 = 0.0;
        _1666 = 0.0;
        _1667 = 0.0;
    }
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1354)) + _1354;
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1355)) + _1355;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1356)) + _1356;
    float _1700 = fma(_1679, cbSceneParam._m0[89u].z, fma(_1678, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1703 = fma(_1679, cbSceneParam._m0[90u].z, fma(_1678, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1706 = fma(_1679, cbSceneParam._m0[91u].z, fma(_1678, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1677));
    float _1721 = _948 * 0.5;
    float _1722 = _949 * 0.5;
    float _1723 = _950 * 0.5;
    float _1724 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1727 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1730 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1764;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1737 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1341, _1345, _1348, _1351));
        float _1741 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1745 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1344, _1347, _1350, _1353));
        float _1752 = dot(vec4(cbModelParam._m0[39u]), vec4(_1721, _1722, _1723, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1775;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1766 = dot(vec4(cbModelParam._m0[40u]), vec4(_1721, _1722, _1723, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1779 = (_1775 * cbModelParam._m0[1u].x) + (_1764 * (1.0 - cbModelParam._m0[1u].x));
    float _1789 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _766);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1789 : min(cbModelParam._m0[25u].z, _1789));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1838 = fma(_1012, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004)) + cbModelParam._m0[13u].w;
        float _1842 = fma(_1012, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004)) + cbModelParam._m0[14u].w;
        float _1846 = fma(_1012, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004)) + cbModelParam._m0[15u].w;
        float _1849 = fma(_950, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _948));
        float _1852 = fma(_950, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _948));
        float _1855 = fma(_950, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _948));
        float _1883;
        if (_1849 > 0.0)
        {
            _1883 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1883 = frontier_phi_17_15_ladder;
        }
        float _2107;
        if (_1852 > 0.0)
        {
            _2107 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2107 = frontier_phi_26_22_ladder;
        }
        float _2364;
        if (_1855 > 0.0)
        {
            _2364 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2364 = frontier_phi_38_33_ladder;
        }
        float _2366 = isnan(_2107) ? _1883 : (isnan(_1883) ? _2107 : min(_1883, _2107));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1849) + _1838;
        float _2372 = (_2367 * _1852) + _1842;
        float _2373 = (_2367 * _1855) + _1846;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2374;
        float _2378 = _2374 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 > _2378) || ((_2372 < _2376) || ((_2371 < _2376) || (_2371 > _2378))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2373, cbModelParam._m0[9u].z, fma(_2372, cbModelParam._m0[9u].y, _2371 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2373, cbModelParam._m0[10u].z, fma(_2372, cbModelParam._m0[10u].y, _2371 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2373, cbModelParam._m0[11u].z, fma(_2372, cbModelParam._m0[11u].y, _2371 * cbModelParam._m0[11u].x))), _1790);
            frontier_phi_16_38_ladder = _2501.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2501.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2501.x * cbModelParam._m0[1u].y;
        }
        _1871 = frontier_phi_16_38_ladder_2;
        _1873 = frontier_phi_16_38_ladder_1;
        _1875 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1859 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_948, _949, _950), _1790);
        _1871 = _1859.x * cbModelParam._m0[1u].y;
        _1873 = _1859.y * cbModelParam._m0[1u].y;
        _1875 = _1859.z * cbModelParam._m0[1u].y;
    }
    float _1879 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _766);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1879 : min(cbModelParam._m0[25u].w, _1879));
    float _1970;
    float _1972;
    float _1974;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1934 = fma(_1012, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004)) + cbModelParam._m0[21u].w;
        float _1938 = fma(_1012, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004)) + cbModelParam._m0[22u].w;
        float _1942 = fma(_1012, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004)) + cbModelParam._m0[23u].w;
        float _1945 = fma(_950, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _948));
        float _1948 = fma(_950, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _948));
        float _1951 = fma(_950, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _948));
        float _2112;
        if (_1945 > 0.0)
        {
            _2112 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2112 = frontier_phi_28_24_ladder;
        }
        float _2391;
        if (_1948 > 0.0)
        {
            _2391 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2391 = frontier_phi_40_35_ladder;
        }
        float _2604;
        if (_1951 > 0.0)
        {
            _2604 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2604 = frontier_phi_49_46_ladder;
        }
        float _2606 = isnan(_2391) ? _2112 : (isnan(_2112) ? _2391 : min(_2112, _2391));
        float _2607 = isnan(_2604) ? _2606 : (isnan(_2606) ? _2604 : min(_2606, _2604));
        float _2611 = (_2607 * _1945) + _1934;
        float _2612 = (_2607 * _1948) + _1938;
        float _2613 = (_2607 * _1951) + _1942;
        float _2614 = _2607 * 9.9999997473787516355514526367188e-05;
        float _2615 = (-1.0) - _2614;
        float _2617 = _2614 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2613 > _2617) || ((_2613 < _2615) || ((_2612 > _2617) || ((_2612 < _2615) || ((_2611 < _2615) || (_2611 > _2617))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2812 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2613, cbModelParam._m0[17u].z, fma(_2612, cbModelParam._m0[17u].y, _2611 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2613, cbModelParam._m0[18u].z, fma(_2612, cbModelParam._m0[18u].y, _2611 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2613, cbModelParam._m0[19u].z, fma(_2612, cbModelParam._m0[19u].y, _2611 * cbModelParam._m0[19u].x))), _1880);
            frontier_phi_25_49_ladder = _2812.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2812.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2812.x * cbModelParam._m0[1u].z;
        }
        _1970 = frontier_phi_25_49_ladder_2;
        _1972 = frontier_phi_25_49_ladder_1;
        _1974 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1954 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_948, _949, _950), _1880);
        _1970 = _1954.x * cbModelParam._m0[1u].z;
        _1972 = _1954.y * cbModelParam._m0[1u].z;
        _1974 = _1954.z * cbModelParam._m0[1u].z;
    }
    float _1987 = (((_975 * _924) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1970 - _1871)) + _1871);
    float _1989 = (((_975 * _926) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1972 - _1873)) + _1873);
    float _1991 = (((_975 * _927) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1974 - _1875)) + _1875);
    float _1994 = fma(_1991, cbSceneParam._m0[89u].z, fma(_1989, cbSceneParam._m0[89u].y, _1987 * cbSceneParam._m0[89u].x));
    float _1997 = fma(_1991, cbSceneParam._m0[90u].z, fma(_1989, cbSceneParam._m0[90u].y, _1987 * cbSceneParam._m0[90u].x));
    float _2000 = fma(_1991, cbSceneParam._m0[91u].z, fma(_1989, cbSceneParam._m0[91u].y, _1987 * cbSceneParam._m0[91u].x));
    vec4 _2008 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_862, _863));
    float _2010 = _2008.w;
    float _2022 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2010);
    float _2023 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2010);
    float _2024 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2010);
    uvec4 _2028 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2030 = _2028.x * 14u;
    uint _2031 = _2030 + 13u;
    float _2038 = _940 + (-1.0);
    float _2043 = (cbLight._m0[_2031].x * _2038) + 1.0;
    float _2044 = (cbLight._m0[_2031].y * _2038) + 1.0;
    float _2045 = (cbLight._m0[_2031].z * _2038) + 1.0;
    float _2046 = (cbLight._m0[_2031].w * _2038) + 1.0;
    uint _2047 = _2030 + 5u;
    float _2053 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2057 = _2030 + 4u;
    float _2066 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
    uint _2070 = _2030 | 1u;
    float _2081 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_763, _764, _765));
    float _2084 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_763, _764, _765));
    float _4335 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _4346 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2089 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2091 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * 0.3183098733425140380859375;
    float _2098 = ((cbLight._m0[_2047].x * _2053) * _2091) + (((cbLight._m0[_2057].x * _2022) * _2066) * _2089);
    float _2099 = ((_2053 * cbLight._m0[_2047].y) * _2091) + (((cbLight._m0[_2057].y * _2023) * _2066) * _2089);
    float _2100 = ((_2053 * cbLight._m0[_2047].z) * _2091) + (((cbLight._m0[_2057].z * _2024) * _2066) * _2089);
    uvec4 _2104 = floatBitsToUint(cbLight._m0[_2030 + 12u]);
    bool _2106 = _2104.x == 0u;
    float _2117;
    float _2119;
    float _2121;
    if (_2106)
    {
        _2117 = _2098;
        _2119 = _2099;
        _2121 = _2100;
    }
    else
    {
        uint _2125 = _2030 + 6u;
        float _2141 = (dot(vec3(cbLight._m0[_2030 + 2u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2142 = _2141 * _2141;
        float _4357 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2143 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2144 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2117 = (((cbLight._m0[_2125].x * 0.3183098733425140380859375) * _2143) * _2144) + _2098;
        _2119 = (((cbLight._m0[_2125].y * 0.3183098733425140380859375) * _2143) * _2144) + _2099;
        _2121 = (((cbLight._m0[_2125].z * 0.3183098733425140380859375) * _2143) * _2144) + _2100;
    }
    bool _2124 = _2104.y == 0u;
    float _2162;
    float _2164;
    float _2166;
    if (_2124)
    {
        _2162 = _2117;
        _2164 = _2119;
        _2166 = _2121;
    }
    else
    {
        uint _2335 = _2030 + 7u;
        float _2351 = (dot(vec3(cbLight._m0[_2030 + 3u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2352 = _2351 * _2351;
        float _4373 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2353 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2354 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2162 = (((cbLight._m0[_2335].x * 0.3183098733425140380859375) * _2353) * _2354) + _2117;
        _2164 = (((cbLight._m0[_2335].y * 0.3183098733425140380859375) * _2353) * _2354) + _2119;
        _2166 = (((cbLight._m0[_2335].z * 0.3183098733425140380859375) * _2353) * _2354) + _2121;
    }
    uint _2169 = _2030 + 8u;
    float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _766) * 0.949999988079071044921875);
    float _2183 = _2182 * _2182;
    float _2184 = cbLight._m0[_2030].x + _842;
    float _2185 = cbLight._m0[_2030].y + _843;
    float _2186 = cbLight._m0[_2030].z + _844;
    float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
    float _2191 = _2190 * _2184;
    float _2192 = _2190 * _2185;
    float _2193 = _2190 * _2186;
    float _2194 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2030].xyz));
    float _4389 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _4400 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _2198 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2199 = dot(vec3(_763, _764, _765), vec3(_2191, _2192, _2193));
    float _4411 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2203 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2191, _2192, _2193));
    float _4422 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2207 = _2183 * _2183;
    float _2211 = ((_2202 * _2202) * (_2207 + (-1.0))) + 1.0;
    float _2219 = exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0);
    float _2220 = 0.959999978542327880859375 - _921;
    float _2222 = 0.959999978542327880859375 - _922;
    float _2223 = 0.959999978542327880859375 - _923;
    float _2230 = 1.0 - _2183;
    float _2241 = (0.5 / (((_2198 * ((_2197 * _2230) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2230) + _2183) * _2197))) * _2197;
    float _4433 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2207 / ((_2211 * _2211) * 3.141590118408203125));
    uint _2257 = _2030 + 9u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2070].w)) * _766) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2070].x + _842;
    float _2271 = cbLight._m0[_2070].y + _843;
    float _2272 = cbLight._m0[_2070].z + _844;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2070].xyz));
    float _4444 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2284 = dot(vec3(_763, _764, _765), vec3(_2277, _2278, _2279));
    float _4455 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_2277, _2278, _2279));
    float _4466 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2269 * _2269;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2303 = exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0);
    float _2310 = 1.0 - _2269;
    float _2320 = (0.5 / (((_2198 * ((_2283 * _2310) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2310) + _2269) * _2283))) * _2283;
    float _4477 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    float _2332 = (((((_2303 * _2220) + _924) * cbLight._m0[_2257].x) * _2322) * _2053) + ((((cbLight._m0[_2169].x * _2022) * ((_2219 * _2220) + _924)) * _2243) * _2066);
    float _2333 = (((((_2303 * _2222) + _926) * cbLight._m0[_2257].y) * _2322) * _2053) + ((((cbLight._m0[_2169].y * _2023) * ((_2219 * _2222) + _926)) * _2243) * _2066);
    float _2334 = (((((_2303 * _2223) + _927) * cbLight._m0[_2257].z) * _2322) * _2053) + ((((cbLight._m0[_2169].z * _2024) * ((_2219 * _2223) + _927)) * _2243) * _2066);
    float _2396;
    float _2398;
    float _2400;
    if (_2106)
    {
        _2396 = _2332;
        _2398 = _2333;
        _2400 = _2334;
    }
    else
    {
        uint _2402 = _2030 + 2u;
        uint _2406 = _2030 + 10u;
        float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _766) * 0.949999988079071044921875);
        float _2421 = _2420 * _2420;
        float _2422 = cbLight._m0[_2402].x + _842;
        float _2423 = cbLight._m0[_2402].y + _843;
        float _2424 = cbLight._m0[_2402].z + _844;
        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
        float _2429 = _2428 * _2422;
        float _2430 = _2428 * _2423;
        float _2431 = _2428 * _2424;
        float _2432 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2402].xyz));
        float _4488 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2436 = dot(vec3(_763, _764, _765), vec3(_2429, _2430, _2431));
        float _4499 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2440 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2429, _2430, _2431));
        float _4510 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2444 = _2421 * _2421;
        float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
        float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0);
        float _2462 = 1.0 - _2421;
        float _2472 = (0.5 / (((_2198 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2462) + _2421) * _2435))) * _2435;
        float _4521 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2396 = (((((_2455 * _2220) + _924) * cbLight._m0[_2406].x) * _2474) * _2475) + _2332;
        _2398 = (((((_2455 * _2222) + _926) * cbLight._m0[_2406].y) * _2474) * _2475) + _2333;
        _2400 = (((((_2455 * _2223) + _927) * cbLight._m0[_2406].z) * _2474) * _2475) + _2334;
    }
    float _2510;
    float _2512;
    float _2514;
    if (_2124)
    {
        _2510 = _2396;
        _2512 = _2398;
        _2514 = _2400;
    }
    else
    {
        uint _2521 = _2030 + 3u;
        uint _2525 = _2030 + 11u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _766) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _842;
        float _2542 = cbLight._m0[_2521].y + _843;
        float _2543 = cbLight._m0[_2521].z + _844;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2521].xyz));
        float _4537 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2555 = dot(vec3(_763, _764, _765), vec3(_2548, _2549, _2550));
        float _4548 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4559 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2574 = exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0);
        float _2581 = 1.0 - _2540;
        float _2591 = (0.5 / (((_2198 * ((_2554 * _2581) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2581) + _2540) * _2554))) * _2554;
        float _4570 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2510 = (((((_2574 * _2220) + _924) * cbLight._m0[_2525].x) * _2593) * _2594) + _2396;
        _2512 = (((((_2574 * _2222) + _926) * cbLight._m0[_2525].y) * _2593) * _2594) + _2398;
        _2514 = (((((_2574 * _2223) + _927) * cbLight._m0[_2525].z) * _2593) * _2594) + _2400;
    }
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    if (_2028.y == 0u)
    {
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2669;
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2669;
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2669;
        uvec4 _2684 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2685 = _2684.x;
        uint _2696 = uint((float(_2684.y) * floor(float(uint(cbSceneParam._m0[85u].y * _863) / _2685))) + floor(float(uint(cbSceneParam._m0[85u].x * _862) / _2685)));
        float _2706 = (log2(_2672 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2707 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        uint _2710 = uint(isnan(14.0) ? _2707 : (isnan(_2707) ? 14.0 : min(_2707, 14.0)));
        uvec4 _2715 = texelFetch(g_lightClusterGridBuffer, int(((_2710 << 2u) + (_2696 << 6u)) >> 2u));
        uint _2716 = _2715.x;
        uint _2717 = _2684.z;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((((1u << ((_2717 >> 4u) & 15u)) + 4294967295u) & _2716) == 0u) || ((_2717 & 240u) == 0u))
        {
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
        }
        else
        {
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            uint _2975 = 0u;
            uint _2984;
            bool _2985;
            for (;;)
            {
                _2984 = texelFetch(g_lightClassification, int((((_2710 << 5u) + (_2696 << 9u)) + (_2975 << 2u)) >> 2u)).x;
                _2985 = _2984 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2985)
                {
                    frontier_phi_66_pred = _2969;
                    frontier_phi_66_pred_1 = _2974;
                    frontier_phi_66_pred_2 = _2973;
                    frontier_phi_66_pred_3 = _2972;
                    frontier_phi_66_pred_4 = _2971;
                    frontier_phi_66_pred_5 = _2970;
                }
                else
                {
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    uint _3120;
                    _3114 = _2969;
                    _3115 = _2970;
                    _3116 = _2971;
                    _3117 = _2972;
                    _3118 = _2973;
                    _3119 = _2974;
                    _3120 = _2984;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    for (;;)
                    {
                        uint _3124 = uint(findLSB(_3120)) + (_2975 << 5u);
                        uint _3121 = (_3120 + 4294967295u) & _3120;
                        uint _3126 = _3124 * 48u;
                        vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 3u)).x));
                        uint _3146 = (_3124 * 48u) + 4u;
                        vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3146)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 3u)).x));
                        uint _3165 = (_3124 * 48u) + 8u;
                        vec3 _3176 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x));
                        float _3180 = _3140.x - _2670;
                        float _3181 = _3140.y - _2671;
                        float _3182 = _3140.z - _2672;
                        float _3183 = dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182));
                        float _3186 = inversesqrt(_3183);
                        float _3187 = _3186 * _3180;
                        float _3188 = _3186 * _3181;
                        float _3189 = _3186 * _3182;
                        float _3190 = dot(vec3(_881, _884, _887), vec3(_3187, _3188, _3189));
                        float _3195 = 1.0 - (_3183 * _3140.w);
                        float _4596 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3196 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3197 = sqrt(_3183) * _3159.w;
                        float _3200 = 1.39999997615814208984375 / (_3197 + 1.39999997615814208984375);
                        float _3201 = _3200 * _3200;
                        float _3204 = ((1.0 - _3201) * _3190) + _3201;
                        float _3207 = _3197 * _3197;
                        float _3211 = ((isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0))) * _3196) / ((_3207 * 0.699999988079071044921875) + 1.0);
                        float _3215 = (-0.0) - _2670;
                        float _3216 = (-0.0) - _2671;
                        float _3217 = (-0.0) - _2672;
                        float _3221 = inversesqrt(dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217)));
                        float _3222 = _3221 * _3215;
                        float _3223 = _3221 * _3216;
                        float _3224 = _3221 * _3217;
                        float _3232 = exp2(log2(1.0 / ((_3207 * 3.5) + 5.0)) * 0.25);
                        float _3233 = 1.0 - _956;
                        float _3240 = sqrt(1.0 - ((1.0 - (_3233 * _3233)) * (1.0 - (_3232 * _3232))));
                        float _3241 = _3240 * _3240;
                        float _3242 = _3241 * _3241;
                        float _3243 = _3222 + _3187;
                        float _3244 = _3223 + _3188;
                        float _3245 = _3224 + _3189;
                        float _3249 = inversesqrt(dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245)));
                        float _3253 = dot(vec3(_881, _884, _887), vec3(_3222, _3223, _3224));
                        float _4612 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3256 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3257 = dot(vec3(_881, _884, _887), vec3(_3249 * _3243, _3249 * _3244, _3249 * _3245));
                        float _4623 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3260 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3264 = ((_3260 * _3260) * (_3242 + (-1.0))) + 1.0;
                        float _3265 = _3200 * _3241;
                        float _3266 = _3265 * _3265;
                        float _3269 = ((1.0 - _3266) * _3190) + _3266;
                        float _4634 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3270 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3271 = 1.0 - _3241;
                        float _3281 = (0.5 / (((_3270 * ((_3256 * _3271) + _3241)) + 9.9999999392252902907785028219223e-09) + (((_3270 * _3271) + _3241) * _3256))) * _3270;
                        float _4645 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3292 = (((_3242 * 3.1415927410125732421875) * (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) / ((_3264 * _3264) * ((_3207 * 2.1991131305694580078125) + 3.141590118408203125))) * _3196;
                        _3044 = (_3211 * _3159.x) + _3117;
                        _3045 = (_3211 * _3159.y) + _3118;
                        _3046 = (_3211 * _3159.z) + _3119;
                        _3041 = (_3292 * _3176.x) + _3114;
                        _3042 = (_3292 * _3176.y) + _3115;
                        _3043 = (_3292 * _3176.z) + _3116;
                        if (_3121 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3043;
                            _3117 = _3044;
                            _3118 = _3045;
                            _3119 = _3046;
                            _3120 = _3121;
                        }
                    }
                    frontier_phi_66_pred = _3041;
                    frontier_phi_66_pred_1 = _3046;
                    frontier_phi_66_pred_2 = _3045;
                    frontier_phi_66_pred_3 = _3044;
                    frontier_phi_66_pred_4 = _3043;
                    frontier_phi_66_pred_5 = _3042;
                }
                _2818 = frontier_phi_66_pred;
                _2828 = frontier_phi_66_pred_1;
                _2826 = frontier_phi_66_pred_2;
                _2824 = frontier_phi_66_pred_3;
                _2822 = frontier_phi_66_pred_4;
                _2820 = frontier_phi_66_pred_5;
                uint _2976 = _2975 + 1u;
                if (_2976 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2969 = _2818;
                    _2970 = _2820;
                    _2971 = _2822;
                    _2972 = _2824;
                    _2973 = _2826;
                    _2974 = _2828;
                    _2975 = _2976;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
        }
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.z;
        uint _2834 = (_2832 >> 8u) & 15u;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        if (((4294967295u << _2834) & _2716) == 0u)
        {
            _2937 = _2817;
            _2939 = _2819;
            _2941 = _2821;
            _2943 = _2823;
            _2945 = _2825;
            _2947 = _2827;
        }
        else
        {
            float _2962 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
            float _2963 = _2962 * _2670;
            float _2964 = _2962 * _2671;
            float _2965 = _2962 * _2672;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2834 < ((_2832 >> 12u) & 15u))
            {
                float _2938;
                float _2940;
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _3097 = _2817;
                float _3098 = _2819;
                float _3099 = _2821;
                float _3100 = _2823;
                float _3101 = _2825;
                float _3102 = _2827;
                uint _3103 = _2834;
                uint _3112;
                bool _3113;
                for (;;)
                {
                    _3112 = texelFetch(g_lightClassification, int((((_2710 << 5u) + (_2696 << 9u)) + (_3103 << 2u)) >> 2u)).x;
                    _3113 = _3112 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3113)
                    {
                        frontier_phi_77_pred = _3102;
                        frontier_phi_77_pred_1 = _3101;
                        frontier_phi_77_pred_2 = _3100;
                        frontier_phi_77_pred_3 = _3099;
                        frontier_phi_77_pred_4 = _3098;
                        frontier_phi_77_pred_5 = _3097;
                    }
                    else
                    {
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3319 = _3097;
                        float _3320 = _3098;
                        float _3321 = _3099;
                        float _3322 = _3100;
                        float _3323 = _3101;
                        float _3324 = _3102;
                        uint _3325 = _3112;
                        uint _3326;
                        vec4 _3351;
                        float _3352;
                        vec4 _3367;
                        vec3 _3379;
                        vec4 _3394;
                        vec4 _3410;
                        float _3456;
                        bool _3457;
                        for (;;)
                        {
                            uint _3336 = ((_3103 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3325));
                            _3326 = (_3325 + 4294967295u) & _3325;
                            uint _3338 = _3336 * 40u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            _3352 = _3351.w;
                            uint _3354 = (_3336 * 40u) + 4u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3336 * 40u) + 8u;
                            _3379 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x));
                            uint _3381 = (_3336 * 40u) + 16u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3397 = (_3336 * 40u) + 20u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3336 * 40u) + 24u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3431 = (_3336 * 40u) + 28u;
                            vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            _3456 = fma(_2672, _3444.z, fma(_2671, _3444.y, _3444.x * _2670)) + _3444.w;
                            _3457 = !((fma(_2672, _3425.z, fma(_2671, _3425.y, _3425.x * _2670)) + _3425.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3457)
                            {
                                float _3484 = _3351.x - _2670;
                                float _3485 = _3351.y - _2671;
                                float _3486 = _3351.z - _2672;
                                float _3487 = dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486));
                                float _3490 = inversesqrt(_3487);
                                float _3491 = _3490 * _3484;
                                float _3492 = _3490 * _3485;
                                float _3493 = _3490 * _3486;
                                float _3497 = 1.0 - (_3487 / (_3352 * _3352));
                                float _4656 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3502 = sqrt(_3487) * _3367.w;
                                float _3504 = 1.39999997615814208984375 / (_3502 + 1.39999997615814208984375);
                                float _3505 = _3504 * _3504;
                                float _3508 = ((1.0 - _3505) * dot(vec3(_3491, _3492, _3493), vec3(_881, _884, _887))) + _3505;
                                float _3511 = _3502 * _3502;
                                float _3515 = (fma(_2672, _3394.z, fma(_2671, _3394.y, _3394.x * _2670)) + _3394.w) / _3456;
                                float _3516 = (fma(_2672, _3410.z, fma(_2671, _3410.y, _3410.x * _2670)) + _3410.w) / _3456;
                                float _3520 = 1.0 - dot(vec2(_3515, _3516), vec2(_3515, _3516));
                                float _4672 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3522 = _3521 * (((isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))) * _3498) / ((_3511 * 0.699999988079071044921875) + 1.0));
                                float _3534 = exp2(log2(1.0 / ((_3511 * 3.5) + 5.0)) * 0.25);
                                float _3535 = 1.0 - _956;
                                float _3542 = sqrt(1.0 - ((1.0 - (_3535 * _3535)) * (1.0 - (_3534 * _3534))));
                                float _3543 = _3542 * _3542;
                                float _3544 = _3543 * _3543;
                                float _3545 = _3491 - _2963;
                                float _3546 = _3492 - _2964;
                                float _3547 = _3493 - _2965;
                                float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                                float _3555 = dot(vec3(_881, _884, _887), vec3((-0.0) - _2963, (-0.0) - _2964, (-0.0) - _2965));
                                float _4683 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3558 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3559 = dot(vec3(_881, _884, _887), vec3(_3551 * _3545, _3551 * _3546, _3551 * _3547));
                                float _4694 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3562 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3566 = ((_3562 * _3562) * (_3544 + (-1.0))) + 1.0;
                                float _3567 = _3504 * _3543;
                                float _3568 = _3567 * _3567;
                                float _3574 = ((1.0 - _3568) * dot(vec3(_881, _884, _887), vec3(_3491, _3492, _3493))) + _3568;
                                float _4705 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3576 = 1.0 - _3543;
                                float _3586 = (0.5 / (((_3575 * ((_3558 * _3576) + _3543)) + 9.9999999392252902907785028219223e-09) + (((_3575 * _3576) + _3543) * _3558))) * _3575;
                                float _4716 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3596 = (_3521 * _3498) * (((_3544 * 3.1415927410125732421875) * (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) / ((_3566 * _3566) * ((_3511 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3522 * _3367.y;
                                frontier_phi_83_pred_1 = _3522 * _3367.x;
                                frontier_phi_83_pred_2 = _3596 * _3379.z;
                                frontier_phi_83_pred_3 = _3596 * _3379.y;
                                frontier_phi_83_pred_4 = _3596 * _3379.x;
                                frontier_phi_83_pred_5 = _3522 * _3367.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3604 = frontier_phi_83_pred;
                            _3603 = frontier_phi_83_pred_1;
                            _3602 = frontier_phi_83_pred_2;
                            _3601 = frontier_phi_83_pred_3;
                            _3600 = frontier_phi_83_pred_4;
                            _3605 = frontier_phi_83_pred_5;
                            _3309 = _3603 + _3322;
                            _3310 = _3604 + _3323;
                            _3311 = _3605 + _3324;
                            _3306 = _3600 + _3319;
                            _3307 = _3601 + _3320;
                            _3308 = _3602 + _3321;
                            if (_3326 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3326;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3311;
                        frontier_phi_77_pred_1 = _3310;
                        frontier_phi_77_pred_2 = _3309;
                        frontier_phi_77_pred_3 = _3308;
                        frontier_phi_77_pred_4 = _3307;
                        frontier_phi_77_pred_5 = _3306;
                    }
                    _2948 = frontier_phi_77_pred;
                    _2946 = frontier_phi_77_pred_1;
                    _2944 = frontier_phi_77_pred_2;
                    _2942 = frontier_phi_77_pred_3;
                    _2940 = frontier_phi_77_pred_4;
                    _2938 = frontier_phi_77_pred_5;
                    uint _3104 = _3103 + 1u;
                    if (_3104 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3097 = _2938;
                        _3098 = _2940;
                        _3099 = _2942;
                        _3100 = _2944;
                        _3101 = _2946;
                        _3102 = _2948;
                        _3103 = _3104;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2942;
                frontier_phi_58_59_ladder_1 = _2948;
                frontier_phi_58_59_ladder_2 = _2946;
                frontier_phi_58_59_ladder_3 = _2944;
                frontier_phi_58_59_ladder_4 = _2940;
                frontier_phi_58_59_ladder_5 = _2938;
            }
            else
            {
                frontier_phi_58_59_ladder = _2821;
                frontier_phi_58_59_ladder_1 = _2827;
                frontier_phi_58_59_ladder_2 = _2825;
                frontier_phi_58_59_ladder_3 = _2823;
                frontier_phi_58_59_ladder_4 = _2819;
                frontier_phi_58_59_ladder_5 = _2817;
            }
            _2937 = frontier_phi_58_59_ladder_5;
            _2939 = frontier_phi_58_59_ladder_4;
            _2941 = frontier_phi_58_59_ladder;
            _2943 = frontier_phi_58_59_ladder_3;
            _2945 = frontier_phi_58_59_ladder_2;
            _2947 = frontier_phi_58_59_ladder_1;
        }
        float _2952 = isnan(1.0) ? _940 : (isnan(_940) ? 1.0 : min(_940, 1.0));
        _2729 = (_2952 * _2943) + _2162;
        _2731 = (_2952 * _2945) + _2164;
        _2733 = (_2952 * _2947) + _2166;
        _2735 = ((_2937 * _924) * _2952) + _2510;
        _2737 = ((_2939 * _926) * _2952) + _2512;
        _2739 = ((_2941 * _927) * _2952) + _2514;
    }
    else
    {
        _2729 = _2162;
        _2731 = _2164;
        _2733 = _2166;
        _2735 = _2510;
        _2737 = _2512;
        _2739 = _2514;
    }
    float _4732 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4743 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4754 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _2756 = ((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2729 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _940))) + ((_2735 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    float _2757 = ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2731 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _940))) + ((_2737 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    float _2758 = ((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2733 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _940))) + ((_2739 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    uint _2759 = _253 + 6u;
    float _2767 = _862 / cbSceneParam._m0[86u].x;
    float _2768 = _863 / cbSceneParam._m0[86u].y;
    vec4 _2782 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2767, _2768, (log2((isnan(cbSceneParam._m0[77u].w) ? _785 : (isnan(_785) ? cbSceneParam._m0[77u].w : min(_785, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2784 = _2782.x;
    float _2785 = _2782.y;
    float _2786 = _2782.z;
    float _2787 = _2782.w;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_785 > cbSceneParam._m0[78u].w)
    {
        float _2842 = isnan(_785) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _785 : min(cbSceneParam._m0[80u].w, _785));
        float _2843 = _2842 / _785;
        float _2854 = _2843 * _835;
        float _2855 = _836 * _2843;
        float _2856 = (-0.0) - _2855;
        float _2857 = _2843 * _837;
        float _2859 = (cbSceneParam._m0[77u].w * _2856) / _2842;
        float _2860 = _2859 + cbSceneParam._m0[79u].w;
        float _2861 = cbSceneParam._m0[79u].w - _2855;
        float _2867 = sqrt(((_2854 * _2854) + (_2855 * _2855)) + (_2857 * _2857));
        float _2870 = (1.0 - (cbSceneParam._m0[77u].w / _2842)) * _2867;
        float _2875 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2877 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3054;
        if (abs((_2856 - _2859) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3054 = ((((_2860 > 0.0) ? exp2(_2875 * _2860) : (2.0 - exp2(_2877 * _2860))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2870;
        }
        else
        {
            float _2998 = 1.0 / cbSceneParam._m0[80u].x;
            float _2999 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : max(_2860, _2861));
            float _3000 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : min(_2860, _2861));
            float _3009 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : min(_2999, 0.0));
            float _3010 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : min(_3000, 0.0));
            _3054 = ((abs(_2867 / _2856) * cbSceneParam._m0[80u].y) * ((((_3009 - _3010) * 2.0) - ((exp2(_2875 * (isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0)))) - exp2(_2875 * (isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0))))) * _2998)) - ((exp2(_2877 * _3009) - exp2(_2877 * _3010)) * _2998))) + (_2870 * cbSceneParam._m0[80u].z);
        }
        vec4 _3056 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2767, _2768, 1.0), 0.0);
        float _3065 = exp2((_3054 * (-1.44269502162933349609375)) * (1.0 - _3056.w));
        float _3066 = log2(_3065);
        float _3082 = log2(_2787);
        _2879 = (exp2(_3082 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3066 * cbSceneParam._m0[78u].x)) * _3056.x) / cbSceneParam._m0[78u].x)) + _2784;
        _2881 = (exp2(_3082 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3066 * cbSceneParam._m0[78u].y)) * _3056.y) / cbSceneParam._m0[78u].y)) + _2785;
        _2883 = (exp2(_3082 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3066 * cbSceneParam._m0[78u].z)) * _3056.z) / cbSceneParam._m0[78u].z)) + _2786;
        _2885 = _3065 * _2787;
    }
    else
    {
        _2879 = _2784;
        _2881 = _2785;
        _2883 = _2786;
        _2885 = _2787;
    }
    bool _3092;
    vec4 _2895;
    vec4 _2917;
    float _2919;
    float _2923;
    float _2924;
    float _2925;
    float _2926;
    bool _2936;
    for (;;)
    {
        _2895 = cbMatDynParam._m0[0u];
        float _2897 = roundEven(_2895.y);
        bool _2898 = _2897 == 3.0;
        float _2899 = log2(_2885);
        float _2906 = exp2(_2899 * cbSceneParam._m0[78u].x) * _2756;
        float _2907 = exp2(_2899 * cbSceneParam._m0[78u].y) * _2757;
        float _2908 = exp2(_2899 * cbSceneParam._m0[78u].z) * _2758;
        float _2915 = _851 + (-0.5);
        _2917 = cbMtdParam._m0[1u];
        _2919 = _2917.y * _2915;
        float _2922 = (_2897 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2923 = _2922 * (_2898 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2879)));
        _2924 = _2922 * (_2898 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2881)));
        _2925 = _2922 * (_2898 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2883)));
        _2926 = _2915 * 0.999000012874603271484375;
        _2936 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2936)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _2926) < 0.5)
            {
                _3092 = true;
                break;
            }
        }
        uint _3033 = _900 + uint(_2895.w);
        if ((cbInstanceData._m0[_3033].w < 1.0) && ((cbInstanceData._m0[_3033].w + _2926) < 0.5))
        {
            _3092 = true;
            break;
        }
        if ((_2919 + 1.0) < _2917.x)
        {
            _3092 = true;
            break;
        }
        _3092 = false;
        break;
    }
    float _3297;
    if (_3092)
    {
        discard_state = true;
        _3297 = 0.0;
    }
    else
    {
        _3297 = cbInstanceData._m0[_2759].w;
    }
    SV_Target.x = _2923;
    SV_Target.y = _2924;
    SV_Target.z = _2925;
    SV_Target.w = _3297;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2759].w;
    discard_exit();
}


