#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1438;
float _3841;
float _3842;
float _3843;
float _3844;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3853 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3864 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3875 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _408 = _406.x;
    float _420 = dot(vec4(_408, _406.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _437 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_408 - _420) * cbMtdParam._m0[24u].y) + _420) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3886 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _445 = (_438 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _446 = (_438 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _447 = (_438 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    float _451 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _445;
    float _454 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _446;
    float _457 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _447;
    float _464 = ((_445 - _451) * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) + _451;
    float _465 = ((_446 - _454) * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) + _454;
    float _466 = ((_447 - _457) * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) + _457;
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _547 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _551 = _547.z;
    float _560 = ((_530.z - _551) * _438) + _551;
    float _563 = ((((_530.x - _549) * _438) + _549) * 2.0) + (-1.0);
    float _564 = ((((_530.y - _550) * _438) + _550) * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _3897 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))));
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _603 = _601.x;
    float _604 = 1.0 - _603;
    float _610 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _613 = ((isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : min(_610, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _622 = (_613 - ((((((_603 - _604) * cbMtdParam._m0[24u].z) + _604) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _613))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3918 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _630 = (_623 * ((_485.x * cbMtdParam._m0[18u].x) - _464)) + _464;
    float _631 = (_623 * ((_485.y * cbMtdParam._m0[18u].y) - _465)) + _465;
    float _632 = (_623 * ((_485.z * cbMtdParam._m0[18u].z) - _466)) + _466;
    vec4 _644 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _646 = _644.x;
    float _647 = 1.0 - _646;
    float _672 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_646 - _647) * cbMtdParam._m0[24u].w) + _647) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3929 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _673 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _681 = ((((cbMtdParam._m0[10u].x - _630) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _673) + _630;
    float _682 = ((((cbMtdParam._m0[10u].y - _631) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _673) + _631;
    float _683 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _632)) * _673) + _632;
    vec4 _695 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _709 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _711 = _709.x;
    float _729 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _711) * _438) + _711;
    float _733 = ((_695.x - _729) * cbMtdParam._m0[19u].z) + _729;
    float _735 = _733 - (_733 * _623);
    float _737 = _735 - (_735 * _673);
    float _742 = (((_505.z - _560) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _560;
    vec4 _756 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _763 = (_756.x * 2.0) + (-1.0);
    float _764 = (_756.y * 2.0) + (-1.0);
    float _765 = dot(vec2(_763, _764), vec2(_763, _764));
    float _3940 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _773 = (_623 * (_756.z - _742)) + _742;
    float _776 = ((cbMtdParam._m0[23u].y - _773) * _673) + _773;
    vec4 _795 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _801 = (_795.x * 2.0) + (-1.0);
    float _802 = (_795.y * 2.0) + (-1.0);
    float _803 = dot(vec2(_801, _802), vec2(_801, _802));
    float _3951 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _813 = _563 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_505.x * 2.0) + (-1.0)));
    float _814 = _564 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_505.y * 2.0) + (-1.0)));
    float _826 = (((_763 - _813) + (cbMtdParam._m0[21u].x * _813)) * _623) + _813;
    float _827 = (((_764 - _814) + (cbMtdParam._m0[21u].x * _814)) * _623) + _814;
    float _828 = (_623 * (sqrt(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) - _570)) + _570;
    float _839 = (((_801 - _826) + (_826 * cbMtdParam._m0[22u].z)) * _673) + _826;
    float _840 = (((_802 - _827) + (_827 * cbMtdParam._m0[22u].z)) * _673) + _827;
    float _841 = ((sqrt(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) - _828) * _673) + _828;
    float _845 = cbMtdParam._m0[22u].x + _583.w;
    float _848 = fma(_841, _255 * NORMAL.x, fma(_840, _262 * TANGENT.x, (_248 * _240) * _839));
    float _851 = fma(_841, _255 * NORMAL.y, fma(_840, _262 * TANGENT.y, (_248 * _241) * _839));
    float _854 = fma(_841, _255 * NORMAL.z, fma(_840, _262 * TANGENT.z, (_248 * _242) * _839));
    float _858 = inversesqrt(dot(vec3(_848, _851, _854), vec3(_848, _851, _854)));
    float _859 = _858 * _848;
    float _860 = _858 * _851;
    float _861 = _858 * _854;
    float _3962 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _862 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _3984 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _3995 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4006 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4017 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _867 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _881 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _931 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _921);
    float _932 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _921);
    float _933 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _921);
    float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
    float _938 = _931 * _937;
    float _939 = _932 * _937;
    float _940 = _933 * _937;
    vec4 _945 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _947 = _945.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1119 = sqrt(((_931 * _931) + (_932 * _932)) + (_933 * _933));
        float _1125 = (cbMatDynParam._m0[5u].x * _1119) + cbMatDynParam._m0[5u].y;
        float _4028 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1130 = (cbMatDynParam._m0[5u].z * _1119) + cbMatDynParam._m0[5u].w;
        float _4039 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) - _1126)) + _1126) < ((_947 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _958 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _959 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _977 = fma(_861, cbSceneParam._m0[5u].z, fma(_860, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _859));
    float _980 = fma(_861, cbSceneParam._m0[6u].z, fma(_860, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _859));
    float _983 = fma(_861, cbSceneParam._m0[7u].z, fma(_860, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _859));
    uint _996 = _287 + 9u;
    uint _997 = _996 + uint(cbMatDynParam._m0[0u].w);
    float _1003 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * cbInstanceData._m0[_997].x;
    float _1004 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_997].y;
    float _1005 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_997].z;
    float _4050 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _1009 = 1.0 - _867;
    float _1010 = _1006 * _1009;
    float _1011 = _1007 * _1009;
    float _1012 = _1008 * _1009;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _867;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _867;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _867;
    float _1020 = _1017 + 0.039999999105930328369140625;
    float _1022 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    vec4 _1032 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _958, cbSceneParam._m0[86u].y * _959));
    float _1036 = ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * TEXCOORD_5.w) * _1032.x;
    float _1037 = dot(vec3(_859, _860, _861), vec3(_938, _939, _940));
    float _1040 = _1037 * 2.0;
    float _1044 = (_1040 * _859) - _938;
    float _1045 = (_1040 * _860) - _939;
    float _1046 = (_1040 * _861) - _940;
    float _1050 = abs(dot(vec3(_938, _939, _940), vec3(_859, _860, _861)));
    float _4083 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1052 = sqrt(_862);
    float _1065 = exp2((_1052 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1052 * 3.0));
    float _1071 = (1.0 - _1065) * ((_1052 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1072 = _1065 * _1052;
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1437;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1162 = fma(_1108, cbModelParam._m0[26u].z, fma(_1104, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1100));
        float _1166 = fma(_1108, cbModelParam._m0[27u].z, fma(_1104, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1100));
        float _1170 = fma(_1108, cbModelParam._m0[28u].z, fma(_1104, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1100));
        float _1195 = _1100 + _859;
        float _1196 = _1104 + _860;
        float _1197 = _1108 + _861;
        float _1207 = fma(_1197, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195)) - _1162;
        float _1208 = fma(_1197, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195)) - _1166;
        float _1209 = fma(_1197, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195)) - _1170;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1162 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1166 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[34u].z) + ((((((_1170 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1265 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1231.x + (-0.5));
        float _1267 = _1265 * (_1231.y + (-0.5));
        float _1268 = _1265 * (_1231.z + (-0.5));
        float _1275 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1238.x + (-0.5));
        float _1277 = _1275 * (_1238.y + (-0.5));
        float _1278 = _1275 * (_1238.z + (-0.5));
        float _1285 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1245.x + (-0.5));
        float _1287 = _1285 * (_1245.y + (-0.5));
        float _1288 = _1285 * (_1245.z + (-0.5));
        float _1295 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1252.x + (-0.5));
        float _1297 = _1295 * (_1252.y + (-0.5));
        float _1298 = _1295 * (_1252.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1319 = (dot(vec3(_859, _860, _861), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1329 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4131 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1331 + 1.0))) + _1336) * _1299;
        float _1346 = _1267 * 0.5;
        float _1347 = _1277 * 0.5;
        float _1348 = _1287 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_859, _860, _861), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4164 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1373 + 1.0))) + _1378) * _1300;
        float _1388 = _1268 * 0.5;
        float _1389 = _1278 * 0.5;
        float _1390 = _1288 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_859, _860, _861), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4197 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1415 + 1.0))) + _1420) * _1301;
        _1437 = _1268;
        _1439 = _1267;
        _1440 = _1266;
        _1441 = _1278;
        _1442 = _1277;
        _1443 = _1276;
        _1444 = _1288;
        _1445 = _1287;
        _1446 = _1286;
        _1447 = _1301;
        _1448 = _1300;
        _1449 = _1299;
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1438;
        _1439 = _1438;
        _1440 = _1438;
        _1441 = _1438;
        _1442 = _1438;
        _1443 = _1438;
        _1444 = _1438;
        _1445 = _1438;
        _1446 = _1438;
        _1447 = _1438;
        _1448 = _1438;
        _1449 = _1438;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1480 = fma(_1108, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1100));
        float _1484 = fma(_1108, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1100));
        float _1488 = fma(_1108, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1100));
        float _1511 = _1100 + _859;
        float _1512 = _1104 + _860;
        float _1513 = _1108 + _861;
        float _1523 = fma(_1513, cbModelParam._m0[30u].z, fma(_1512, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1511)) - _1480;
        float _1524 = fma(_1513, cbModelParam._m0[31u].z, fma(_1512, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1511)) - _1484;
        float _1525 = fma(_1513, cbModelParam._m0[32u].z, fma(_1512, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1511)) - _1488;
        float _1529 = inversesqrt(dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525)));
        float _1542 = ((_1529 * _1523) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1480 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1543 = ((_1529 * _1524) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1484 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1544 = ((_1529 * _1525) / cbModelParam._m0[35u].z) + ((((((_1488 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        float _1579 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1546.x + (-0.5));
        float _1581 = _1579 * (_1546.y + (-0.5));
        float _1582 = _1579 * (_1546.z + (-0.5));
        float _1589 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1553.x + (-0.5));
        float _1591 = _1589 * (_1553.y + (-0.5));
        float _1592 = _1589 * (_1553.z + (-0.5));
        float _1599 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1560.x + (-0.5));
        float _1601 = _1599 * (_1560.y + (-0.5));
        float _1602 = _1599 * (_1560.z + (-0.5));
        float _1609 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1567.x + (-0.5));
        float _1611 = _1609 * (_1567.y + (-0.5));
        float _1612 = _1609 * (_1567.z + (-0.5));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = _1580 * 0.5;
        float _1617 = _1590 * 0.5;
        float _1618 = _1600 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_859, _860, _861), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4260 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1643 + 1.0))) + _1648) * _1613;
        float _1658 = _1581 * 0.5;
        float _1659 = _1591 * 0.5;
        float _1660 = _1601 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_859, _860, _861), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4293 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1685 + 1.0))) + _1690) * _1614;
        float _1700 = _1582 * 0.5;
        float _1701 = _1592 * 0.5;
        float _1702 = _1602 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_859, _860, _861), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4326 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1727 + 1.0))) + _1732) * _1615;
        _1749 = _1582;
        _1750 = _1581;
        _1751 = _1580;
        _1752 = _1592;
        _1753 = _1591;
        _1754 = _1590;
        _1755 = _1602;
        _1756 = _1601;
        _1757 = _1600;
        _1758 = _1615;
        _1759 = _1614;
        _1760 = _1613;
        _1761 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
        _1762 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
    }
    else
    {
        _1749 = _1438;
        _1750 = _1438;
        _1751 = _1438;
        _1752 = _1438;
        _1753 = _1438;
        _1754 = _1438;
        _1755 = _1438;
        _1756 = _1438;
        _1757 = _1438;
        _1758 = _1438;
        _1759 = _1438;
        _1760 = _1438;
        _1761 = 0.0;
        _1762 = 0.0;
        _1763 = 0.0;
    }
    float _1773 = (cbModelParam._m0[1u].x * (_1761 - _1450)) + _1450;
    float _1774 = (cbModelParam._m0[1u].x * (_1762 - _1451)) + _1451;
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1452)) + _1452;
    float _1796 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1774, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1799 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1774, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1802 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1774, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1773));
    float _1817 = _1044 * 0.5;
    float _1818 = _1045 * 0.5;
    float _1819 = _1046 * 0.5;
    float _1820 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1823 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1750, _1753, _1756, _1759));
    float _1826 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1749, _1752, _1755, _1758));
    float _1860;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1833 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1437, _1441, _1444, _1447));
        float _1837 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1841 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1848 = dot(vec4(cbModelParam._m0[39u]), vec4(_1817, _1818, _1819, 1.0));
        _1860 = dot(vec3(isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1848) ? 0.0 : (isnan(0.0) ? _1848 : max(0.0, _1848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1860 = 1.0;
    }
    float _1871;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1862 = dot(vec4(cbModelParam._m0[40u]), vec4(_1817, _1818, _1819, 1.0));
        _1871 = dot(vec3(isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1862) ? 0.0 : (isnan(0.0) ? _1862 : max(0.0, _1862))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1871 = 1.0;
    }
    float _1875 = (_1871 * cbModelParam._m0[1u].x) + (_1860 * (1.0 - cbModelParam._m0[1u].x));
    float _1885 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _862);
    float _1886 = isnan(_1885) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1885 : min(cbModelParam._m0[25u].z, _1885));
    float _1966;
    float _1968;
    float _1970;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1933 = fma(_1108, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1100)) + cbModelParam._m0[13u].w;
        float _1937 = fma(_1108, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1100)) + cbModelParam._m0[14u].w;
        float _1941 = fma(_1108, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1100)) + cbModelParam._m0[15u].w;
        float _1944 = fma(_1046, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044));
        float _1947 = fma(_1046, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044));
        float _1950 = fma(_1046, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044));
        float _1978;
        if (_1944 > 0.0)
        {
            _1978 = abs((1.0 - _1933) / _1944);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1933 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1978 = frontier_phi_17_15_ladder;
        }
        float _2201;
        if (_1947 > 0.0)
        {
            _2201 = abs((1.0 - _1937) / _1947);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1937 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2201 = frontier_phi_26_22_ladder;
        }
        float _2458;
        if (_1950 > 0.0)
        {
            _2458 = abs((1.0 - _1941) / _1950);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1941 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2458 = frontier_phi_38_33_ladder;
        }
        float _2460 = isnan(_2201) ? _1978 : (isnan(_1978) ? _2201 : min(_1978, _2201));
        float _2461 = isnan(_2458) ? _2460 : (isnan(_2460) ? _2458 : min(_2460, _2458));
        float _2465 = (_2461 * _1944) + _1933;
        float _2466 = (_2461 * _1947) + _1937;
        float _2467 = (_2461 * _1950) + _1941;
        float _2468 = _2461 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2468;
        float _2472 = _2468 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 > _2472) || ((_2466 < _2470) || ((_2465 < _2470) || (_2465 > _2472))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2467, cbModelParam._m0[9u].z, fma(_2466, cbModelParam._m0[9u].y, _2465 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2467, cbModelParam._m0[10u].z, fma(_2466, cbModelParam._m0[10u].y, _2465 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2467, cbModelParam._m0[11u].z, fma(_2466, cbModelParam._m0[11u].y, _2465 * cbModelParam._m0[11u].x))), _1886);
            frontier_phi_16_38_ladder = _2595.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2595.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2595.x * cbModelParam._m0[1u].y;
        }
        _1966 = frontier_phi_16_38_ladder_2;
        _1968 = frontier_phi_16_38_ladder_1;
        _1970 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1954 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1044, _1045, _1046), _1886);
        _1966 = _1954.x * cbModelParam._m0[1u].y;
        _1968 = _1954.y * cbModelParam._m0[1u].y;
        _1970 = _1954.z * cbModelParam._m0[1u].y;
    }
    float _1974 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _862);
    float _1975 = isnan(_1974) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1974 : min(cbModelParam._m0[25u].w, _1974));
    float _2064;
    float _2066;
    float _2068;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2028 = fma(_1108, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1100)) + cbModelParam._m0[21u].w;
        float _2032 = fma(_1108, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1100)) + cbModelParam._m0[22u].w;
        float _2036 = fma(_1108, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1100)) + cbModelParam._m0[23u].w;
        float _2039 = fma(_1046, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044));
        float _2042 = fma(_1046, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044));
        float _2045 = fma(_1046, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044));
        float _2206;
        if (_2039 > 0.0)
        {
            _2206 = abs((1.0 - _2028) / _2039);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2028 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2206 = frontier_phi_28_24_ladder;
        }
        float _2485;
        if (_2042 > 0.0)
        {
            _2485 = abs((1.0 - _2032) / _2042);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2032 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2485 = frontier_phi_40_35_ladder;
        }
        float _2698;
        if (_2045 > 0.0)
        {
            _2698 = abs((1.0 - _2036) / _2045);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2036 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2698 = frontier_phi_49_46_ladder;
        }
        float _2700 = isnan(_2485) ? _2206 : (isnan(_2206) ? _2485 : min(_2206, _2485));
        float _2701 = isnan(_2698) ? _2700 : (isnan(_2700) ? _2698 : min(_2700, _2698));
        float _2705 = (_2701 * _2039) + _2028;
        float _2706 = (_2701 * _2042) + _2032;
        float _2707 = (_2701 * _2045) + _2036;
        float _2708 = _2701 * 9.9999997473787516355514526367188e-05;
        float _2709 = (-1.0) - _2708;
        float _2711 = _2708 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2707 > _2711) || ((_2707 < _2709) || ((_2706 > _2711) || ((_2706 < _2709) || ((_2705 < _2709) || (_2705 > _2711))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2707, cbModelParam._m0[17u].z, fma(_2706, cbModelParam._m0[17u].y, _2705 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2707, cbModelParam._m0[18u].z, fma(_2706, cbModelParam._m0[18u].y, _2705 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2707, cbModelParam._m0[19u].z, fma(_2706, cbModelParam._m0[19u].y, _2705 * cbModelParam._m0[19u].x))), _1975);
            frontier_phi_25_49_ladder = _2906.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2906.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2906.x * cbModelParam._m0[1u].z;
        }
        _2064 = frontier_phi_25_49_ladder_2;
        _2066 = frontier_phi_25_49_ladder_1;
        _2068 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2048 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1044, _1045, _1046), _1975);
        _2064 = _2048.x * cbModelParam._m0[1u].z;
        _2066 = _2048.y * cbModelParam._m0[1u].z;
        _2068 = _2048.z * cbModelParam._m0[1u].z;
    }
    float _2081 = (((_1071 * _1020) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2064 - _1966)) + _1966);
    float _2083 = (((_1071 * _1022) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2066 - _1968)) + _1968);
    float _2085 = (((_1071 * _1023) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2068 - _1970)) + _1970);
    float _2088 = fma(_2085, cbSceneParam._m0[89u].z, fma(_2083, cbSceneParam._m0[89u].y, _2081 * cbSceneParam._m0[89u].x));
    float _2091 = fma(_2085, cbSceneParam._m0[90u].z, fma(_2083, cbSceneParam._m0[90u].y, _2081 * cbSceneParam._m0[90u].x));
    float _2094 = fma(_2085, cbSceneParam._m0[91u].z, fma(_2083, cbSceneParam._m0[91u].y, _2081 * cbSceneParam._m0[91u].x));
    vec4 _2102 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_958, _959));
    float _2104 = _2102.w;
    float _2116 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2104);
    float _2117 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2104);
    float _2118 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2104);
    uvec4 _2122 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2124 = _2122.x * 14u;
    uint _2125 = _2124 + 13u;
    float _2132 = _1036 + (-1.0);
    float _2137 = (cbLight._m0[_2125].x * _2132) + 1.0;
    float _2138 = (cbLight._m0[_2125].y * _2132) + 1.0;
    float _2139 = (cbLight._m0[_2125].z * _2132) + 1.0;
    float _2140 = (cbLight._m0[_2125].w * _2132) + 1.0;
    uint _2141 = _2124 + 5u;
    float _2147 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
    uint _2151 = _2124 + 4u;
    float _2160 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
    uint _2164 = _2124 | 1u;
    float _2175 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_859, _860, _861));
    float _2178 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_859, _860, _861));
    float _4462 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _4473 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2183 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * 0.3183098733425140380859375;
    float _2185 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * 0.3183098733425140380859375;
    float _2192 = ((cbLight._m0[_2141].x * _2147) * _2185) + (((cbLight._m0[_2151].x * _2116) * _2160) * _2183);
    float _2193 = ((_2147 * cbLight._m0[_2141].y) * _2185) + (((cbLight._m0[_2151].y * _2117) * _2160) * _2183);
    float _2194 = ((_2147 * cbLight._m0[_2141].z) * _2185) + (((cbLight._m0[_2151].z * _2118) * _2160) * _2183);
    uvec4 _2198 = floatBitsToUint(cbLight._m0[_2124 + 12u]);
    bool _2200 = _2198.x == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2200)
    {
        _2211 = _2192;
        _2213 = _2193;
        _2215 = _2194;
    }
    else
    {
        uint _2219 = _2124 + 6u;
        float _2235 = (dot(vec3(cbLight._m0[_2124 + 2u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2236 = _2235 * _2235;
        float _4484 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2237 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2238 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2211 = (((cbLight._m0[_2219].x * 0.3183098733425140380859375) * _2237) * _2238) + _2192;
        _2213 = (((cbLight._m0[_2219].y * 0.3183098733425140380859375) * _2237) * _2238) + _2193;
        _2215 = (((cbLight._m0[_2219].z * 0.3183098733425140380859375) * _2237) * _2238) + _2194;
    }
    bool _2218 = _2198.y == 0u;
    float _2256;
    float _2258;
    float _2260;
    if (_2218)
    {
        _2256 = _2211;
        _2258 = _2213;
        _2260 = _2215;
    }
    else
    {
        uint _2429 = _2124 + 7u;
        float _2445 = (dot(vec3(cbLight._m0[_2124 + 3u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2446 = _2445 * _2445;
        float _4500 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2447 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2448 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2256 = (((cbLight._m0[_2429].x * 0.3183098733425140380859375) * _2447) * _2448) + _2211;
        _2258 = (((cbLight._m0[_2429].y * 0.3183098733425140380859375) * _2447) * _2448) + _2213;
        _2260 = (((cbLight._m0[_2429].z * 0.3183098733425140380859375) * _2447) * _2448) + _2215;
    }
    uint _2263 = _2124 + 8u;
    float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _862) * 0.949999988079071044921875);
    float _2277 = _2276 * _2276;
    float _2278 = cbLight._m0[_2124].x + _938;
    float _2279 = cbLight._m0[_2124].y + _939;
    float _2280 = cbLight._m0[_2124].z + _940;
    float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
    float _2285 = _2284 * _2278;
    float _2286 = _2284 * _2279;
    float _2287 = _2284 * _2280;
    float _2288 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2124].xyz));
    float _4516 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _4527 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _2292 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2293 = dot(vec3(_859, _860, _861), vec3(_2285, _2286, _2287));
    float _4538 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2297 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2285, _2286, _2287));
    float _4549 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2301 = _2277 * _2277;
    float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
    float _2313 = exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0);
    float _2314 = 0.959999978542327880859375 - _1017;
    float _2316 = 0.959999978542327880859375 - _1018;
    float _2317 = 0.959999978542327880859375 - _1019;
    float _2324 = 1.0 - _2277;
    float _2335 = (0.5 / (((_2292 * ((_2291 * _2324) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2324) + _2277) * _2291))) * _2291;
    float _4560 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2337 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
    uint _2351 = _2124 + 9u;
    float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _862) * 0.949999988079071044921875);
    float _2363 = _2362 * _2362;
    float _2364 = cbLight._m0[_2164].x + _938;
    float _2365 = cbLight._m0[_2164].y + _939;
    float _2366 = cbLight._m0[_2164].z + _940;
    float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
    float _2371 = _2370 * _2364;
    float _2372 = _2370 * _2365;
    float _2373 = _2370 * _2366;
    float _2374 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2164].xyz));
    float _4571 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2378 = dot(vec3(_859, _860, _861), vec3(_2371, _2372, _2373));
    float _4582 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2382 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2371, _2372, _2373));
    float _4593 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2386 = _2363 * _2363;
    float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
    float _2397 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
    float _2404 = 1.0 - _2363;
    float _2414 = (0.5 / (((_2292 * ((_2377 * _2404) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2404) + _2363) * _2377))) * _2377;
    float _4604 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2416 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
    float _2426 = (((((_2397 * _2314) + _1020) * cbLight._m0[_2351].x) * _2416) * _2147) + ((((cbLight._m0[_2263].x * _2116) * ((_2313 * _2314) + _1020)) * _2337) * _2160);
    float _2427 = (((((_2397 * _2316) + _1022) * cbLight._m0[_2351].y) * _2416) * _2147) + ((((cbLight._m0[_2263].y * _2117) * ((_2313 * _2316) + _1022)) * _2337) * _2160);
    float _2428 = (((((_2397 * _2317) + _1023) * cbLight._m0[_2351].z) * _2416) * _2147) + ((((cbLight._m0[_2263].z * _2118) * ((_2313 * _2317) + _1023)) * _2337) * _2160);
    float _2490;
    float _2492;
    float _2494;
    if (_2200)
    {
        _2490 = _2426;
        _2492 = _2427;
        _2494 = _2428;
    }
    else
    {
        uint _2496 = _2124 + 2u;
        uint _2500 = _2124 + 10u;
        float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2496].w)) * _862) * 0.949999988079071044921875);
        float _2515 = _2514 * _2514;
        float _2516 = cbLight._m0[_2496].x + _938;
        float _2517 = cbLight._m0[_2496].y + _939;
        float _2518 = cbLight._m0[_2496].z + _940;
        float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
        float _2523 = _2522 * _2516;
        float _2524 = _2522 * _2517;
        float _2525 = _2522 * _2518;
        float _2526 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2496].xyz));
        float _4615 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2530 = dot(vec3(_859, _860, _861), vec3(_2523, _2524, _2525));
        float _4626 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2534 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_2523, _2524, _2525));
        float _4637 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2538 = _2515 * _2515;
        float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
        float _2549 = exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0);
        float _2556 = 1.0 - _2515;
        float _2566 = (0.5 / (((_2292 * ((_2529 * _2556) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2556) + _2515) * _2529))) * _2529;
        float _4648 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2490 = (((((_2549 * _2314) + _1020) * cbLight._m0[_2500].x) * _2568) * _2569) + _2426;
        _2492 = (((((_2549 * _2316) + _1022) * cbLight._m0[_2500].y) * _2568) * _2569) + _2427;
        _2494 = (((((_2549 * _2317) + _1023) * cbLight._m0[_2500].z) * _2568) * _2569) + _2428;
    }
    float _2604;
    float _2606;
    float _2608;
    if (_2218)
    {
        _2604 = _2490;
        _2606 = _2492;
        _2608 = _2494;
    }
    else
    {
        uint _2615 = _2124 + 3u;
        uint _2619 = _2124 + 11u;
        float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _862) * 0.949999988079071044921875);
        float _2634 = _2633 * _2633;
        float _2635 = cbLight._m0[_2615].x + _938;
        float _2636 = cbLight._m0[_2615].y + _939;
        float _2637 = cbLight._m0[_2615].z + _940;
        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
        float _2642 = _2641 * _2635;
        float _2643 = _2641 * _2636;
        float _2644 = _2641 * _2637;
        float _2645 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2615].xyz));
        float _4664 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2649 = dot(vec3(_859, _860, _861), vec3(_2642, _2643, _2644));
        float _4675 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2653 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2642, _2643, _2644));
        float _4686 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2657 = _2634 * _2634;
        float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
        float _2668 = exp2(log2(1.0 - (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) * 5.0);
        float _2675 = 1.0 - _2634;
        float _2685 = (0.5 / (((_2292 * ((_2648 * _2675) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2675) + _2634) * _2648))) * _2648;
        float _4697 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2687 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
        float _2688 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2604 = (((((_2668 * _2314) + _1020) * cbLight._m0[_2619].x) * _2687) * _2688) + _2490;
        _2606 = (((((_2668 * _2316) + _1022) * cbLight._m0[_2619].y) * _2687) * _2688) + _2492;
        _2608 = (((((_2668 * _2317) + _1023) * cbLight._m0[_2619].z) * _2687) * _2688) + _2494;
    }
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_2122.y == 0u)
    {
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2763;
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2763;
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2763;
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.x;
        uint _2790 = uint((float(_2778.y) * floor(float(uint(cbSceneParam._m0[85u].y * _959) / _2779))) + floor(float(uint(cbSceneParam._m0[85u].x * _958) / _2779)));
        float _2800 = (log2(_2766 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2801 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        uint _2804 = uint(isnan(14.0) ? _2801 : (isnan(_2801) ? 14.0 : min(_2801, 14.0)));
        uvec4 _2809 = texelFetch(g_lightClusterGridBuffer, int(((_2804 << 2u) + (_2790 << 6u)) >> 2u));
        uint _2810 = _2809.x;
        uint _2811 = _2778.z;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        if (((((1u << ((_2811 >> 4u) & 15u)) + 4294967295u) & _2810) == 0u) || ((_2811 & 240u) == 0u))
        {
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
        }
        else
        {
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            uint _3070 = 0u;
            uint _3079;
            bool _3080;
            for (;;)
            {
                _3079 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3070 << 2u)) >> 2u)).x;
                _3080 = _3079 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3080)
                {
                    frontier_phi_66_pred = _3064;
                    frontier_phi_66_pred_1 = _3069;
                    frontier_phi_66_pred_2 = _3068;
                    frontier_phi_66_pred_3 = _3067;
                    frontier_phi_66_pred_4 = _3066;
                    frontier_phi_66_pred_5 = _3065;
                }
                else
                {
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    uint _3215;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3079;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    for (;;)
                    {
                        uint _3219 = uint(findLSB(_3215)) + (_3070 << 5u);
                        uint _3216 = (_3215 + 4294967295u) & _3215;
                        uint _3221 = _3219 * 48u;
                        vec4 _3235 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 3u)).x));
                        uint _3241 = (_3219 * 48u) + 4u;
                        vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3260 = (_3219 * 48u) + 8u;
                        vec3 _3271 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x));
                        float _3275 = _3235.x - _2764;
                        float _3276 = _3235.y - _2765;
                        float _3277 = _3235.z - _2766;
                        float _3278 = dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277));
                        float _3281 = inversesqrt(_3278);
                        float _3282 = _3281 * _3275;
                        float _3283 = _3281 * _3276;
                        float _3284 = _3281 * _3277;
                        float _3285 = dot(vec3(_977, _980, _983), vec3(_3282, _3283, _3284));
                        float _3290 = 1.0 - (_3278 * _3235.w);
                        float _4723 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3291 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                        float _3292 = sqrt(_3278) * _3254.w;
                        float _3295 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3285) + _3296;
                        float _3302 = _3292 * _3292;
                        float _3306 = ((isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0))) * _3291) / ((_3302 * 0.699999988079071044921875) + 1.0);
                        float _3310 = (-0.0) - _2764;
                        float _3311 = (-0.0) - _2765;
                        float _3312 = (-0.0) - _2766;
                        float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                        float _3317 = _3316 * _3310;
                        float _3318 = _3316 * _3311;
                        float _3319 = _3316 * _3312;
                        float _3327 = exp2(log2(1.0 / ((_3302 * 3.5) + 5.0)) * 0.25);
                        float _3328 = 1.0 - _1052;
                        float _3335 = sqrt(1.0 - ((1.0 - (_3328 * _3328)) * (1.0 - (_3327 * _3327))));
                        float _3336 = _3335 * _3335;
                        float _3337 = _3336 * _3336;
                        float _3338 = _3317 + _3282;
                        float _3339 = _3318 + _3283;
                        float _3340 = _3319 + _3284;
                        float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                        float _3348 = dot(vec3(_977, _980, _983), vec3(_3317, _3318, _3319));
                        float _4739 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3351 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3352 = dot(vec3(_977, _980, _983), vec3(_3344 * _3338, _3344 * _3339, _3344 * _3340));
                        float _4750 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3355 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3359 = ((_3355 * _3355) * (_3337 + (-1.0))) + 1.0;
                        float _3360 = _3295 * _3336;
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3285) + _3361;
                        float _4761 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3366 = 1.0 - _3336;
                        float _3376 = (0.5 / (((_3365 * ((_3351 * _3366) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3336) * _3351))) * _3365;
                        float _4772 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3387 = (((_3337 * 3.1415927410125732421875) * (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) / ((_3359 * _3359) * ((_3302 * 2.1991131305694580078125) + 3.141590118408203125))) * _3291;
                        _3139 = (_3306 * _3254.x) + _3212;
                        _3140 = (_3306 * _3254.y) + _3213;
                        _3141 = (_3306 * _3254.z) + _3214;
                        _3136 = (_3387 * _3271.x) + _3209;
                        _3137 = (_3387 * _3271.y) + _3210;
                        _3138 = (_3387 * _3271.z) + _3211;
                        if (_3216 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3216;
                        }
                    }
                    frontier_phi_66_pred = _3136;
                    frontier_phi_66_pred_1 = _3141;
                    frontier_phi_66_pred_2 = _3140;
                    frontier_phi_66_pred_3 = _3139;
                    frontier_phi_66_pred_4 = _3138;
                    frontier_phi_66_pred_5 = _3137;
                }
                _2912 = frontier_phi_66_pred;
                _2922 = frontier_phi_66_pred_1;
                _2920 = frontier_phi_66_pred_2;
                _2918 = frontier_phi_66_pred_3;
                _2916 = frontier_phi_66_pred_4;
                _2914 = frontier_phi_66_pred_5;
                uint _3071 = _3070 + 1u;
                if (_3071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3064 = _2912;
                    _3065 = _2914;
                    _3066 = _2916;
                    _3067 = _2918;
                    _3068 = _2920;
                    _3069 = _2922;
                    _3070 = _3071;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
        }
        uvec4 _2925 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2926 = _2925.z;
        uint _2928 = (_2926 >> 8u) & 15u;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        if (((4294967295u << _2928) & _2810) == 0u)
        {
            _3032 = _2911;
            _3034 = _2913;
            _3036 = _2915;
            _3038 = _2917;
            _3040 = _2919;
            _3042 = _2921;
        }
        else
        {
            float _3057 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
            float _3058 = _3057 * _2764;
            float _3059 = _3057 * _2765;
            float _3060 = _3057 * _2766;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2928 < ((_2926 >> 12u) & 15u))
            {
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3192 = _2911;
                float _3193 = _2913;
                float _3194 = _2915;
                float _3195 = _2917;
                float _3196 = _2919;
                float _3197 = _2921;
                uint _3198 = _2928;
                uint _3207;
                bool _3208;
                for (;;)
                {
                    _3207 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3198 << 2u)) >> 2u)).x;
                    _3208 = _3207 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3208)
                    {
                        frontier_phi_77_pred = _3197;
                        frontier_phi_77_pred_1 = _3196;
                        frontier_phi_77_pred_2 = _3195;
                        frontier_phi_77_pred_3 = _3194;
                        frontier_phi_77_pred_4 = _3193;
                        frontier_phi_77_pred_5 = _3192;
                    }
                    else
                    {
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3414 = _3192;
                        float _3415 = _3193;
                        float _3416 = _3194;
                        float _3417 = _3195;
                        float _3418 = _3196;
                        float _3419 = _3197;
                        uint _3420 = _3207;
                        uint _3421;
                        vec4 _3446;
                        float _3447;
                        vec4 _3462;
                        vec3 _3474;
                        vec4 _3489;
                        vec4 _3504;
                        float _3550;
                        bool _3551;
                        for (;;)
                        {
                            uint _3431 = ((_3198 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3420));
                            _3421 = (_3420 + 4294967295u) & _3420;
                            uint _3433 = _3431 * 40u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            _3447 = _3446.w;
                            uint _3449 = (_3431 * 40u) + 4u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3464 = (_3431 * 40u) + 8u;
                            _3474 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x));
                            uint _3476 = (_3431 * 40u) + 16u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3491 = (_3431 * 40u) + 20u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3506 = (_3431 * 40u) + 24u;
                            vec4 _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3525 = (_3431 * 40u) + 28u;
                            vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            _3550 = fma(_2766, _3538.z, fma(_2765, _3538.y, _3538.x * _2764)) + _3538.w;
                            _3551 = !((fma(_2766, _3519.z, fma(_2765, _3519.y, _3519.x * _2764)) + _3519.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3551)
                            {
                                float _3578 = _3446.x - _2764;
                                float _3579 = _3446.y - _2765;
                                float _3580 = _3446.z - _2766;
                                float _3581 = dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580));
                                float _3584 = inversesqrt(_3581);
                                float _3585 = _3584 * _3578;
                                float _3586 = _3584 * _3579;
                                float _3587 = _3584 * _3580;
                                float _3591 = 1.0 - (_3581 / (_3447 * _3447));
                                float _4783 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                                float _3596 = sqrt(_3581) * _3462.w;
                                float _3598 = 1.39999997615814208984375 / (_3596 + 1.39999997615814208984375);
                                float _3599 = _3598 * _3598;
                                float _3602 = ((1.0 - _3599) * dot(vec3(_3585, _3586, _3587), vec3(_977, _980, _983))) + _3599;
                                float _3605 = _3596 * _3596;
                                float _3609 = (fma(_2766, _3489.z, fma(_2765, _3489.y, _3489.x * _2764)) + _3489.w) / _3550;
                                float _3610 = (fma(_2766, _3504.z, fma(_2765, _3504.y, _3504.x * _2764)) + _3504.w) / _3550;
                                float _3614 = 1.0 - dot(vec2(_3609, _3610), vec2(_3609, _3610));
                                float _4799 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3616 = _3615 * (((isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0))) * _3592) / ((_3605 * 0.699999988079071044921875) + 1.0));
                                float _3628 = exp2(log2(1.0 / ((_3605 * 3.5) + 5.0)) * 0.25);
                                float _3629 = 1.0 - _1052;
                                float _3636 = sqrt(1.0 - ((1.0 - (_3629 * _3629)) * (1.0 - (_3628 * _3628))));
                                float _3637 = _3636 * _3636;
                                float _3638 = _3637 * _3637;
                                float _3639 = _3585 - _3058;
                                float _3640 = _3586 - _3059;
                                float _3641 = _3587 - _3060;
                                float _3645 = inversesqrt(dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641)));
                                float _3649 = dot(vec3(_977, _980, _983), vec3((-0.0) - _3058, (-0.0) - _3059, (-0.0) - _3060));
                                float _4810 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3652 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3653 = dot(vec3(_977, _980, _983), vec3(_3645 * _3639, _3645 * _3640, _3645 * _3641));
                                float _4821 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3656 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3660 = ((_3656 * _3656) * (_3638 + (-1.0))) + 1.0;
                                float _3661 = _3598 * _3637;
                                float _3662 = _3661 * _3661;
                                float _3668 = ((1.0 - _3662) * dot(vec3(_977, _980, _983), vec3(_3585, _3586, _3587))) + _3662;
                                float _4832 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3670 = 1.0 - _3637;
                                float _3680 = (0.5 / (((_3669 * ((_3652 * _3670) + _3637)) + 9.9999999392252902907785028219223e-09) + (((_3669 * _3670) + _3637) * _3652))) * _3669;
                                float _4843 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3690 = (_3615 * _3592) * (((_3638 * 3.1415927410125732421875) * (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) / ((_3660 * _3660) * ((_3605 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3616 * _3462.y;
                                frontier_phi_83_pred_1 = _3616 * _3462.x;
                                frontier_phi_83_pred_2 = _3690 * _3474.z;
                                frontier_phi_83_pred_3 = _3690 * _3474.y;
                                frontier_phi_83_pred_4 = _3690 * _3474.x;
                                frontier_phi_83_pred_5 = _3616 * _3462.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3698 = frontier_phi_83_pred;
                            _3697 = frontier_phi_83_pred_1;
                            _3696 = frontier_phi_83_pred_2;
                            _3695 = frontier_phi_83_pred_3;
                            _3694 = frontier_phi_83_pred_4;
                            _3699 = frontier_phi_83_pred_5;
                            _3404 = _3697 + _3417;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            _3401 = _3694 + _3414;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            if (_3421 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3421;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3406;
                        frontier_phi_77_pred_1 = _3405;
                        frontier_phi_77_pred_2 = _3404;
                        frontier_phi_77_pred_3 = _3403;
                        frontier_phi_77_pred_4 = _3402;
                        frontier_phi_77_pred_5 = _3401;
                    }
                    _3043 = frontier_phi_77_pred;
                    _3041 = frontier_phi_77_pred_1;
                    _3039 = frontier_phi_77_pred_2;
                    _3037 = frontier_phi_77_pred_3;
                    _3035 = frontier_phi_77_pred_4;
                    _3033 = frontier_phi_77_pred_5;
                    uint _3199 = _3198 + 1u;
                    if (_3199 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3192 = _3033;
                        _3193 = _3035;
                        _3194 = _3037;
                        _3195 = _3039;
                        _3196 = _3041;
                        _3197 = _3043;
                        _3198 = _3199;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3037;
                frontier_phi_58_59_ladder_1 = _3043;
                frontier_phi_58_59_ladder_2 = _3041;
                frontier_phi_58_59_ladder_3 = _3039;
                frontier_phi_58_59_ladder_4 = _3035;
                frontier_phi_58_59_ladder_5 = _3033;
            }
            else
            {
                frontier_phi_58_59_ladder = _2915;
                frontier_phi_58_59_ladder_1 = _2921;
                frontier_phi_58_59_ladder_2 = _2919;
                frontier_phi_58_59_ladder_3 = _2917;
                frontier_phi_58_59_ladder_4 = _2913;
                frontier_phi_58_59_ladder_5 = _2911;
            }
            _3032 = frontier_phi_58_59_ladder_5;
            _3034 = frontier_phi_58_59_ladder_4;
            _3036 = frontier_phi_58_59_ladder;
            _3038 = frontier_phi_58_59_ladder_3;
            _3040 = frontier_phi_58_59_ladder_2;
            _3042 = frontier_phi_58_59_ladder_1;
        }
        float _3047 = isnan(1.0) ? _1036 : (isnan(_1036) ? 1.0 : min(_1036, 1.0));
        _2823 = (_3047 * _3038) + _2256;
        _2825 = (_3047 * _3040) + _2258;
        _2827 = (_3047 * _3042) + _2260;
        _2829 = ((_3032 * _1020) * _3047) + _2604;
        _2831 = ((_3034 * _1022) * _3047) + _2606;
        _2833 = ((_3036 * _1023) * _3047) + _2608;
    }
    else
    {
        _2823 = _2256;
        _2825 = _2258;
        _2827 = _2260;
        _2829 = _2604;
        _2831 = _2606;
        _2833 = _2608;
    }
    float _4859 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _4870 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4881 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _2850 = ((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2823 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1036))) + ((_2829 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1875)) * cbPerFrame._m0[3u].x);
    float _2851 = ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2825 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1036))) + ((_2831 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1875)) * cbPerFrame._m0[3u].x);
    float _2852 = ((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2827 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1036))) + ((_2833 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1875)) * cbPerFrame._m0[3u].x);
    uint _2853 = _287 + 6u;
    float _2861 = _958 / cbSceneParam._m0[86u].x;
    float _2862 = _959 / cbSceneParam._m0[86u].y;
    vec4 _2876 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, (log2((isnan(cbSceneParam._m0[77u].w) ? _881 : (isnan(_881) ? cbSceneParam._m0[77u].w : min(_881, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2878 = _2876.x;
    float _2879 = _2876.y;
    float _2880 = _2876.z;
    float _2881 = _2876.w;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_881 > cbSceneParam._m0[78u].w)
    {
        float _2936 = isnan(_881) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _881 : min(cbSceneParam._m0[80u].w, _881));
        float _2937 = _2936 / _881;
        float _2948 = _2937 * _931;
        float _2949 = _932 * _2937;
        float _2950 = (-0.0) - _2949;
        float _2952 = _2937 * _933;
        float _2954 = (cbSceneParam._m0[77u].w * _2950) / _2936;
        float _2955 = _2954 + cbSceneParam._m0[79u].w;
        float _2956 = cbSceneParam._m0[79u].w - _2949;
        float _2962 = sqrt(((_2948 * _2948) + (_2949 * _2949)) + (_2952 * _2952));
        float _2965 = (1.0 - (cbSceneParam._m0[77u].w / _2936)) * _2962;
        float _2970 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2972 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3149;
        if (abs((_2950 - _2954) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3149 = ((((_2955 > 0.0) ? exp2(_2970 * _2955) : (2.0 - exp2(_2972 * _2955))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2965;
        }
        else
        {
            float _3093 = 1.0 / cbSceneParam._m0[80u].x;
            float _3094 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : max(_2955, _2956));
            float _3095 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : min(_2955, _2956));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            float _3105 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : min(_3095, 0.0));
            _3149 = ((abs(_2962 / _2950) * cbSceneParam._m0[80u].y) * ((((_3104 - _3105) * 2.0) - ((exp2(_2970 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0)))) - exp2(_2970 * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))))) * _3093)) - ((exp2(_2972 * _3104) - exp2(_2972 * _3105)) * _3093))) + (_2965 * cbSceneParam._m0[80u].z);
        }
        vec4 _3151 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, 1.0), 0.0);
        float _3160 = exp2((_3149 * (-1.44269502162933349609375)) * (1.0 - _3151.w));
        float _3161 = log2(_3160);
        float _3177 = log2(_2881);
        _2974 = (exp2(_3177 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].x)) * _3151.x) / cbSceneParam._m0[78u].x)) + _2878;
        _2976 = (exp2(_3177 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].y)) * _3151.y) / cbSceneParam._m0[78u].y)) + _2879;
        _2978 = (exp2(_3177 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].z)) * _3151.z) / cbSceneParam._m0[78u].z)) + _2880;
        _2980 = _3160 * _2881;
    }
    else
    {
        _2974 = _2878;
        _2976 = _2879;
        _2978 = _2880;
        _2980 = _2881;
    }
    bool _3187;
    vec4 _2990;
    vec4 _3012;
    float _3014;
    float _3018;
    float _3019;
    float _3020;
    float _3021;
    bool _3031;
    for (;;)
    {
        _2990 = cbMatDynParam._m0[0u];
        float _2992 = roundEven(_2990.y);
        bool _2993 = _2992 == 3.0;
        float _2994 = log2(_2980);
        float _3001 = exp2(_2994 * cbSceneParam._m0[78u].x) * _2850;
        float _3002 = exp2(_2994 * cbSceneParam._m0[78u].y) * _2851;
        float _3003 = exp2(_2994 * cbSceneParam._m0[78u].z) * _2852;
        float _3010 = _947 + (-0.5);
        _3012 = cbMtdParam._m0[1u];
        _3014 = _3012.y * _3010;
        float _3017 = (_2992 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3018 = _3017 * (_2993 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2974)));
        _3019 = _3017 * (_2993 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2976)));
        _3020 = _3017 * (_2993 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2978)));
        _3021 = _3010 * 0.999000012874603271484375;
        _3031 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3031)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3021) < 0.5)
            {
                _3187 = true;
                break;
            }
        }
        uint _3128 = _996 + uint(_2990.w);
        if ((cbInstanceData._m0[_3128].w < 1.0) && ((cbInstanceData._m0[_3128].w + _3021) < 0.5))
        {
            _3187 = true;
            break;
        }
        if ((_3014 + 1.0) < _3012.x)
        {
            _3187 = true;
            break;
        }
        _3187 = false;
        break;
    }
    float _3392;
    if (_3187)
    {
        discard_state = true;
        _3392 = 0.0;
    }
    else
    {
        _3392 = cbInstanceData._m0[_2853].w;
    }
    SV_Target.x = _3018;
    SV_Target.y = _3019;
    SV_Target.z = _3020;
    SV_Target.w = _3392;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2853].w;
    discard_exit();
}


