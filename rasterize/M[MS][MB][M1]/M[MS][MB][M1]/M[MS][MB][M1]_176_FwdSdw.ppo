#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1392;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4002 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4013 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4024 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[24u].y) + _419) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4035 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _444 = (_437 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _445 = (_437 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _446 = (_437 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[24u].y) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4046 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    float _523 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _517;
    float _526 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _518;
    float _529 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _519;
    float _536 = ((_517 - _523) * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) + _523;
    float _537 = ((_518 - _526) * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) + _526;
    float _538 = ((_519 - _529) * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) + _529;
    vec4 _550 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _590 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _592 = _590.x;
    float _593 = _590.y;
    float _594 = _590.z;
    float _601 = ((_573.x - _592) * _437) + _592;
    float _602 = ((_573.y - _593) * _437) + _593;
    float _603 = ((_573.z - _594) * _437) + _594;
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _628 = ((_615.z - _603) * _510) + _603;
    float _631 = ((((_615.x - _601) * _510) + _601) * 2.0) + (-1.0);
    float _632 = ((((_615.y - _602) * _510) + _602) * 2.0) + (-1.0);
    float _633 = dot(vec2(_631, _632), vec2(_631, _632));
    float _4057 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))));
    float _643 = _631 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_550.x * 2.0) + (-1.0)));
    float _644 = _632 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_550.y * 2.0) + (-1.0)));
    vec4 _657 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _671 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _673 = _671.x;
    float _674 = 1.0 - _673;
    float _700 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_673 - _674) * cbMtdParam._m0[24u].w) + _674) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4068 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _709 = ((((cbMtdParam._m0[10u].x - _536) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _701) + _536;
    float _710 = ((((cbMtdParam._m0[10u].y - _537) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _701) + _537;
    float _711 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _538)) * _701) + _538;
    vec4 _723 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _737 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _739 = _737.x;
    float _757 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _739) * _437) + _739;
    float _775 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _304) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _305) + cbTextureTilingScale._m0[21u].w)).x - _757) * _510) + _757;
    float _779 = ((_723.x - _775) * cbMtdParam._m0[19u].z) + _775;
    float _781 = _779 - (_779 * _701);
    float _786 = (((_550.z - _628) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _628;
    float _790 = ((cbMtdParam._m0[23u].y - _786) * _701) + _786;
    vec4 _809 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _815 = (_809.x * 2.0) + (-1.0);
    float _816 = (_809.y * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _4079 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _833 = (_701 * (((cbMtdParam._m0[22u].z * _643) - _643) + _815)) + _643;
    float _834 = (_701 * (((cbMtdParam._m0[22u].z * _644) - _644) + _816)) + _644;
    float _835 = (_701 * (sqrt(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) - _638)) + _638;
    float _839 = cbMtdParam._m0[22u].x + _657.w;
    float _842 = fma(_835, _253 * NORMAL.x, fma(_834, _260 * TANGENT.x, (_246 * _238) * _833));
    float _845 = fma(_835, _253 * NORMAL.y, fma(_834, _260 * TANGENT.y, (_246 * _239) * _833));
    float _848 = fma(_835, _253 * NORMAL.z, fma(_834, _260 * TANGENT.z, (_246 * _240) * _833));
    float _852 = inversesqrt(dot(vec3(_842, _845, _848), vec3(_842, _845, _848)));
    float _853 = _852 * _842;
    float _854 = _852 * _845;
    float _855 = _852 * _848;
    float _4090 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _856 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4112 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4123 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4134 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4145 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _861 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _875 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _925 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _915);
    float _926 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _915);
    float _927 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _915);
    float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
    float _932 = _925 * _931;
    float _933 = _926 * _931;
    float _934 = _927 * _931;
    float _940 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _941 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _959 = fma(_855, cbSceneParam._m0[5u].z, fma(_854, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _853));
    float _962 = fma(_855, cbSceneParam._m0[6u].z, fma(_854, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _853));
    float _965 = fma(_855, cbSceneParam._m0[7u].z, fma(_854, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _853));
    uint _979 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _985 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * cbInstanceData._m0[_979].x;
    float _986 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_979].y;
    float _987 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * cbInstanceData._m0[_979].z;
    float _4156 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _4167 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _989 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _4178 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _991 = 1.0 - _861;
    float _992 = _988 * _991;
    float _993 = _989 * _991;
    float _994 = _990 * _991;
    float _999 = (_988 + (-0.039999999105930328369140625)) * _861;
    float _1000 = (_989 + (-0.039999999105930328369140625)) * _861;
    float _1001 = (_990 + (-0.039999999105930328369140625)) * _861;
    float _1002 = _999 + 0.039999999105930328369140625;
    float _1004 = _1000 + 0.039999999105930328369140625;
    float _1005 = _1001 + 0.039999999105930328369140625;
    vec4 _1014 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _940, cbSceneParam._m0[86u].y * _941));
    float _1018 = ((isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * TEXCOORD_5.w) * _1014.x;
    float _1019 = dot(vec3(_853, _854, _855), vec3(_932, _933, _934));
    float _1022 = _1019 * 2.0;
    float _1026 = (_1022 * _853) - _932;
    float _1027 = (_1022 * _854) - _933;
    float _1028 = (_1022 * _855) - _934;
    float _1032 = abs(dot(vec3(_932, _933, _934), vec3(_853, _854, _855)));
    float _4189 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1034 = sqrt(_856);
    float _1047 = exp2((_1034 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1034 * 3.0));
    float _1053 = (1.0 - _1047) * ((_1034 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1054 = _1047 * _1034;
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1391;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1116 = fma(_1090, cbModelParam._m0[26u].z, fma(_1086, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1082));
        float _1120 = fma(_1090, cbModelParam._m0[27u].z, fma(_1086, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1082));
        float _1124 = fma(_1090, cbModelParam._m0[28u].z, fma(_1086, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1082));
        float _1149 = _1082 + _853;
        float _1150 = _1086 + _854;
        float _1151 = _1090 + _855;
        float _1161 = fma(_1151, cbModelParam._m0[26u].z, fma(_1150, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1149)) - _1116;
        float _1162 = fma(_1151, cbModelParam._m0[27u].z, fma(_1150, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1149)) - _1120;
        float _1163 = fma(_1151, cbModelParam._m0[28u].z, fma(_1150, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1149)) - _1124;
        float _1167 = inversesqrt(dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163)));
        float _1180 = ((_1167 * _1161) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1116 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1167 * _1162) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1120 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1167 * _1163) / cbModelParam._m0[34u].z) + ((((((_1124 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        float _1219 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1185.x + (-0.5));
        float _1221 = _1219 * (_1185.y + (-0.5));
        float _1222 = _1219 * (_1185.z + (-0.5));
        float _1229 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1192.x + (-0.5));
        float _1231 = _1229 * (_1192.y + (-0.5));
        float _1232 = _1229 * (_1192.z + (-0.5));
        float _1239 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1199.x + (-0.5));
        float _1241 = _1239 * (_1199.y + (-0.5));
        float _1242 = _1239 * (_1199.z + (-0.5));
        float _1249 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1206.x + (-0.5));
        float _1251 = _1249 * (_1206.y + (-0.5));
        float _1252 = _1249 * (_1206.z + (-0.5));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = _1220 * 0.5;
        float _1257 = _1230 * 0.5;
        float _1258 = _1240 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1273 = (dot(vec3(_853, _854, _855), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1283 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4237 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1285 + 1.0))) + _1290) * _1253;
        float _1300 = _1221 * 0.5;
        float _1301 = _1231 * 0.5;
        float _1302 = _1241 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_853, _854, _855), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4270 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1327 + 1.0))) + _1332) * _1254;
        float _1342 = _1222 * 0.5;
        float _1343 = _1232 * 0.5;
        float _1344 = _1242 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_853, _854, _855), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4303 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1369 + 1.0))) + _1374) * _1255;
        _1391 = _1222;
        _1393 = _1221;
        _1394 = _1220;
        _1395 = _1232;
        _1396 = _1231;
        _1397 = _1230;
        _1398 = _1242;
        _1399 = _1241;
        _1400 = _1240;
        _1401 = _1255;
        _1402 = _1254;
        _1403 = _1253;
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    }
    else
    {
        _1391 = _1392;
        _1393 = _1392;
        _1394 = _1392;
        _1395 = _1392;
        _1396 = _1392;
        _1397 = _1392;
        _1398 = _1392;
        _1399 = _1392;
        _1400 = _1392;
        _1401 = _1392;
        _1402 = _1392;
        _1403 = _1392;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1430 = fma(_1090, cbModelParam._m0[30u].z, fma(_1086, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1082));
        float _1434 = fma(_1090, cbModelParam._m0[31u].z, fma(_1086, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1082));
        float _1438 = fma(_1090, cbModelParam._m0[32u].z, fma(_1086, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1082));
        float _1461 = _1082 + _853;
        float _1462 = _1086 + _854;
        float _1463 = _1090 + _855;
        float _1473 = fma(_1463, cbModelParam._m0[30u].z, fma(_1462, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1461)) - _1430;
        float _1474 = fma(_1463, cbModelParam._m0[31u].z, fma(_1462, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1461)) - _1434;
        float _1475 = fma(_1463, cbModelParam._m0[32u].z, fma(_1462, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1461)) - _1438;
        float _1479 = inversesqrt(dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475)));
        float _1492 = ((_1479 * _1473) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1430 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1479 * _1474) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1434 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1479 * _1475) / cbModelParam._m0[35u].z) + ((((((_1438 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        float _1529 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1496.x + (-0.5));
        float _1531 = _1529 * (_1496.y + (-0.5));
        float _1532 = _1529 * (_1496.z + (-0.5));
        float _1539 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1503.x + (-0.5));
        float _1541 = _1539 * (_1503.y + (-0.5));
        float _1542 = _1539 * (_1503.z + (-0.5));
        float _1549 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1510.x + (-0.5));
        float _1551 = _1549 * (_1510.y + (-0.5));
        float _1552 = _1549 * (_1510.z + (-0.5));
        float _1559 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1517.x + (-0.5));
        float _1561 = _1559 * (_1517.y + (-0.5));
        float _1562 = _1559 * (_1517.z + (-0.5));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = _1530 * 0.5;
        float _1567 = _1540 * 0.5;
        float _1568 = _1550 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_853, _854, _855), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4366 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1593 + 1.0))) + _1598) * _1563;
        float _1608 = _1531 * 0.5;
        float _1609 = _1541 * 0.5;
        float _1610 = _1551 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_853, _854, _855), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4377 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4388 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4399 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_1635 + 1.0))) + _1640) * _1564;
        float _1650 = _1532 * 0.5;
        float _1651 = _1542 * 0.5;
        float _1652 = _1552 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_853, _854, _855), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4410 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4421 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4432 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_1677 + 1.0))) + _1682) * _1565;
        _1699 = _1532;
        _1700 = _1531;
        _1701 = _1530;
        _1702 = _1542;
        _1703 = _1541;
        _1704 = _1540;
        _1705 = _1552;
        _1706 = _1551;
        _1707 = _1550;
        _1708 = _1565;
        _1709 = _1564;
        _1710 = _1563;
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
    }
    else
    {
        _1699 = _1392;
        _1700 = _1392;
        _1701 = _1392;
        _1702 = _1392;
        _1703 = _1392;
        _1704 = _1392;
        _1705 = _1392;
        _1706 = _1392;
        _1707 = _1392;
        _1708 = _1392;
        _1709 = _1392;
        _1710 = _1392;
        _1711 = 0.0;
        _1712 = 0.0;
        _1713 = 0.0;
    }
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1404)) + _1404;
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1405)) + _1405;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1406)) + _1406;
    float _1746 = fma(_1725, cbSceneParam._m0[89u].z, fma(_1724, cbSceneParam._m0[89u].y, _1723 * cbSceneParam._m0[89u].x));
    float _1749 = fma(_1725, cbSceneParam._m0[90u].z, fma(_1724, cbSceneParam._m0[90u].y, _1723 * cbSceneParam._m0[90u].x));
    float _1752 = fma(_1725, cbSceneParam._m0[91u].z, fma(_1724, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1723));
    float _1767 = _1026 * 0.5;
    float _1768 = _1027 * 0.5;
    float _1769 = _1028 * 0.5;
    float _1770 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1773 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1776 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1810;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1783 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1391, _1395, _1398, _1401));
        float _1787 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1791 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1394, _1397, _1400, _1403));
        float _1798 = dot(vec4(cbModelParam._m0[39u]), vec4(_1767, _1768, _1769, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1821;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1812 = dot(vec4(cbModelParam._m0[40u]), vec4(_1767, _1768, _1769, 1.0));
        _1821 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1821 = 1.0;
    }
    float _1825 = (_1821 * cbModelParam._m0[1u].x) + (_1810 * (1.0 - cbModelParam._m0[1u].x));
    float _1835 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _856);
    float _1836 = isnan(_1835) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1835 : min(cbModelParam._m0[25u].z, _1835));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1885 = fma(_1090, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1082)) + cbModelParam._m0[13u].w;
        float _1889 = fma(_1090, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1082)) + cbModelParam._m0[14u].w;
        float _1893 = fma(_1090, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1082)) + cbModelParam._m0[15u].w;
        float _1896 = fma(_1028, cbModelParam._m0[13u].z, fma(_1027, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026));
        float _1899 = fma(_1028, cbModelParam._m0[14u].z, fma(_1027, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026));
        float _1902 = fma(_1028, cbModelParam._m0[15u].z, fma(_1027, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026));
        float _1930;
        if (_1896 > 0.0)
        {
            _1930 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1930 = frontier_phi_14_12_ladder;
        }
        float _2102;
        if (_1899 > 0.0)
        {
            _2102 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2102 = frontier_phi_23_19_ladder;
        }
        float _2397;
        if (_1902 > 0.0)
        {
            _2397 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2397 = frontier_phi_35_30_ladder;
        }
        float _2399 = isnan(_2102) ? _1930 : (isnan(_1930) ? _2102 : min(_1930, _2102));
        float _2400 = isnan(_2397) ? _2399 : (isnan(_2399) ? _2397 : min(_2399, _2397));
        float _2404 = (_2400 * _1896) + _1885;
        float _2405 = (_2400 * _1899) + _1889;
        float _2406 = (_2400 * _1902) + _1893;
        float _2407 = _2400 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2407;
        float _2411 = _2407 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 > _2411) || ((_2405 < _2409) || ((_2404 < _2409) || (_2404 > _2411))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2551 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2406, cbModelParam._m0[9u].z, fma(_2405, cbModelParam._m0[9u].y, _2404 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2406, cbModelParam._m0[10u].z, fma(_2405, cbModelParam._m0[10u].y, _2404 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2406, cbModelParam._m0[11u].z, fma(_2405, cbModelParam._m0[11u].y, _2404 * cbModelParam._m0[11u].x))), _1836);
            frontier_phi_13_35_ladder = _2551.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2551.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2551.x * cbModelParam._m0[1u].y;
        }
        _1918 = frontier_phi_13_35_ladder_2;
        _1920 = frontier_phi_13_35_ladder_1;
        _1922 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1026, _1027, _1028), _1836);
        _1918 = _1906.x * cbModelParam._m0[1u].y;
        _1920 = _1906.y * cbModelParam._m0[1u].y;
        _1922 = _1906.z * cbModelParam._m0[1u].y;
    }
    float _1926 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _856);
    float _1927 = isnan(_1926) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1926 : min(cbModelParam._m0[25u].w, _1926));
    float _2017;
    float _2019;
    float _2021;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1981 = fma(_1090, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1082)) + cbModelParam._m0[21u].w;
        float _1985 = fma(_1090, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1082)) + cbModelParam._m0[22u].w;
        float _1989 = fma(_1090, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1082)) + cbModelParam._m0[23u].w;
        float _1992 = fma(_1028, cbModelParam._m0[21u].z, fma(_1027, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026));
        float _1995 = fma(_1028, cbModelParam._m0[22u].z, fma(_1027, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026));
        float _1998 = fma(_1028, cbModelParam._m0[23u].z, fma(_1027, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026));
        float _2107;
        if (_1992 > 0.0)
        {
            _2107 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2107 = frontier_phi_25_21_ladder;
        }
        float _2424;
        if (_1995 > 0.0)
        {
            _2424 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2424 = frontier_phi_37_32_ladder;
        }
        float _2762;
        if (_1998 > 0.0)
        {
            _2762 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2762 = frontier_phi_47_44_ladder;
        }
        float _2764 = isnan(_2424) ? _2107 : (isnan(_2107) ? _2424 : min(_2107, _2424));
        float _2765 = isnan(_2762) ? _2764 : (isnan(_2764) ? _2762 : min(_2764, _2762));
        float _2769 = (_2765 * _1992) + _1981;
        float _2770 = (_2765 * _1995) + _1985;
        float _2771 = (_2765 * _1998) + _1989;
        float _2772 = _2765 * 9.9999997473787516355514526367188e-05;
        float _2773 = (-1.0) - _2772;
        float _2775 = _2772 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2771 > _2775) || ((_2771 < _2773) || ((_2770 > _2775) || ((_2770 < _2773) || ((_2769 < _2773) || (_2769 > _2775))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2771, cbModelParam._m0[17u].z, fma(_2770, cbModelParam._m0[17u].y, _2769 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2771, cbModelParam._m0[18u].z, fma(_2770, cbModelParam._m0[18u].y, _2769 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2771, cbModelParam._m0[19u].z, fma(_2770, cbModelParam._m0[19u].y, _2769 * cbModelParam._m0[19u].x))), _1927);
            frontier_phi_22_47_ladder = _2893.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2893.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2893.x * cbModelParam._m0[1u].z;
        }
        _2017 = frontier_phi_22_47_ladder_2;
        _2019 = frontier_phi_22_47_ladder_1;
        _2021 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2001 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1026, _1027, _1028), _1927);
        _2017 = _2001.x * cbModelParam._m0[1u].z;
        _2019 = _2001.y * cbModelParam._m0[1u].z;
        _2021 = _2001.z * cbModelParam._m0[1u].z;
    }
    float _2034 = (((_1053 * _1002) + _1054) * _1018) * ((cbModelParam._m0[1u].w * (_2017 - _1918)) + _1918);
    float _2036 = (((_1053 * _1004) + _1054) * _1018) * ((cbModelParam._m0[1u].w * (_2019 - _1920)) + _1920);
    float _2038 = (((_1053 * _1005) + _1054) * _1018) * ((cbModelParam._m0[1u].w * (_2021 - _1922)) + _1922);
    float _2041 = fma(_2038, cbSceneParam._m0[89u].z, fma(_2036, cbSceneParam._m0[89u].y, _2034 * cbSceneParam._m0[89u].x));
    float _2044 = fma(_2038, cbSceneParam._m0[90u].z, fma(_2036, cbSceneParam._m0[90u].y, _2034 * cbSceneParam._m0[90u].x));
    float _2047 = fma(_2038, cbSceneParam._m0[91u].z, fma(_2036, cbSceneParam._m0[91u].y, _2034 * cbSceneParam._m0[91u].x));
    float _2081 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2089 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2093 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2094 = _2081 / _2093;
    float _2095 = _2085 / _2093;
    float _2096 = _2089 / _2093;
    float _2243;
    float _2244;
    float _2245;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2123 = ((uint(_2096 > cbSceneParam._m0[59u].y) + uint(_2096 > cbSceneParam._m0[59u].x)) + uint(_2096 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2124 = _2123 + 43u;
        uint _2132 = _2123 + 44u;
        uint _2140 = _2123 + 45u;
        uint _2148 = _2123 + 46u;
        float _2159 = fma(_2093, cbSceneParam._m0[_2124].w, fma(_2089, cbSceneParam._m0[_2124].z, fma(_2085, cbSceneParam._m0[_2124].y, _2081 * cbSceneParam._m0[_2124].x)));
        float _2163 = fma(_2093, cbSceneParam._m0[_2132].w, fma(_2089, cbSceneParam._m0[_2132].z, fma(_2085, cbSceneParam._m0[_2132].y, _2081 * cbSceneParam._m0[_2132].x)));
        float _2171 = fma(_2093, cbSceneParam._m0[_2148].w, fma(_2089, cbSceneParam._m0[_2148].z, fma(_2085, cbSceneParam._m0[_2148].y, _2081 * cbSceneParam._m0[_2148].x)));
        float _2176 = cbSceneParam._m0[33u].z * _2171;
        float _2178 = cbSceneParam._m0[33u].w * _2171;
        float _2181 = fma(_2093, cbSceneParam._m0[_2140].w, fma(_2089, cbSceneParam._m0[_2140].z, fma(_2085, cbSceneParam._m0[_2140].y, _2081 * cbSceneParam._m0[_2140].x))) / _2171;
        float _2229 = (cbSceneParam._m0[33u].x - sqrt(((_2095 * _2095) + (_2094 * _2094)) + (_2096 * _2096))) * cbSceneParam._m0[33u].y;
        float _4558 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2236 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 + _2159) / _2171, (_2178 + _2163) / _2171), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2178 + _2159) / _2171, (_2163 - _2176) / _2171), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 - _2176) / _2171, (_2163 - _2178) / _2171), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 - _2178) / _2171, (_2176 + _2163) / _2171), _2181), 0.0)).x), vec4(0.25)));
        _2243 = 1.0 - (_2236 * cbSceneParam._m0[34u].x);
        _2244 = 1.0 - (_2236 * cbSceneParam._m0[34u].y);
        _2245 = 1.0 - (_2236 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2243 = 1.0;
        _2244 = 1.0;
        _2245 = 1.0;
    }
    float _2309;
    float _2311;
    float _2313;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2297 = fma(_2093, cbSceneParam._m0[63u].w, fma(_2089, cbSceneParam._m0[63u].z, fma(_2085, cbSceneParam._m0[63u].y, _2081 * cbSceneParam._m0[63u].x)));
        float _2298 = fma(_2093, cbSceneParam._m0[60u].w, fma(_2089, cbSceneParam._m0[60u].z, fma(_2085, cbSceneParam._m0[60u].y, _2081 * cbSceneParam._m0[60u].x))) / _2297;
        float _2299 = fma(_2093, cbSceneParam._m0[61u].w, fma(_2089, cbSceneParam._m0[61u].z, fma(_2085, cbSceneParam._m0[61u].y, _2081 * cbSceneParam._m0[61u].x))) / _2297;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2298 >= cbSceneParam._m0[64u].x) && (_2299 >= cbSceneParam._m0[64u].y)) && (_2298 <= cbSceneParam._m0[64u].z)) && (_2299 <= cbSceneParam._m0[64u].w))
        {
            float _2437 = fma(_2093, cbSceneParam._m0[62u].w, fma(_2089, cbSceneParam._m0[62u].z, fma(_2085, cbSceneParam._m0[62u].y, _2081 * cbSceneParam._m0[62u].x))) / _2297;
            float _2441 = isnan(cbSceneParam._m0[41u].w) ? _2437 : (isnan(_2437) ? cbSceneParam._m0[41u].w : max(_2437, cbSceneParam._m0[41u].w));
            float _2484 = (cbSceneParam._m0[33u].x - sqrt(((_2095 * _2095) + (_2094 * _2094)) + (_2096 * _2096))) * cbSceneParam._m0[33u].y;
            float _4574 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
            float _2491 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2298, cbSceneParam._m0[33u].w + _2299), _2441), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2298, _2299 - cbSceneParam._m0[33u].z), _2441), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2298 - cbSceneParam._m0[33u].z, _2299 - cbSceneParam._m0[33u].w), _2441), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2298 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2299), _2441), 0.0)).x), vec4(0.25)));
            float _2495 = 1.0 - (_2491 * cbSceneParam._m0[34u].x);
            float _2496 = 1.0 - (_2491 * cbSceneParam._m0[34u].y);
            float _2497 = 1.0 - (_2491 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2497) ? _2245 : (isnan(_2245) ? _2497 : min(_2245, _2497));
            frontier_phi_34_33_ladder_1 = isnan(_2496) ? _2244 : (isnan(_2244) ? _2496 : min(_2244, _2496));
            frontier_phi_34_33_ladder_2 = isnan(_2495) ? _2243 : (isnan(_2243) ? _2495 : min(_2243, _2495));
        }
        else
        {
            frontier_phi_34_33_ladder = _2245;
            frontier_phi_34_33_ladder_1 = _2244;
            frontier_phi_34_33_ladder_2 = _2243;
        }
        _2309 = frontier_phi_34_33_ladder_2;
        _2311 = frontier_phi_34_33_ladder_1;
        _2313 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2309 = _2243;
        _2311 = _2244;
        _2313 = _2245;
    }
    uvec4 _2318 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2320 = _2318.x * 14u;
    uint _2321 = _2320 + 13u;
    float _2328 = _1018 + (-1.0);
    float _2333 = (cbLight._m0[_2321].x * _2328) + 1.0;
    float _2334 = (cbLight._m0[_2321].y * _2328) + 1.0;
    float _2335 = (cbLight._m0[_2321].z * _2328) + 1.0;
    float _2336 = (cbLight._m0[_2321].w * _2328) + 1.0;
    uint _2337 = _2320 + 5u;
    float _2343 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
    uint _2347 = _2320 + 4u;
    float _2356 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
    uint _2360 = _2320 | 1u;
    float _2371 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_853, _854, _855));
    float _2374 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_853, _854, _855));
    float _4610 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _4621 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2379 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * 0.3183098733425140380859375;
    float _2381 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * 0.3183098733425140380859375;
    float _2388 = ((cbLight._m0[_2337].x * _2343) * _2381) + (((cbLight._m0[_2347].x * _2309) * _2356) * _2379);
    float _2389 = ((_2343 * cbLight._m0[_2337].y) * _2381) + (((cbLight._m0[_2347].y * _2311) * _2356) * _2379);
    float _2390 = ((_2343 * cbLight._m0[_2337].z) * _2381) + (((cbLight._m0[_2347].z * _2313) * _2356) * _2379);
    uvec4 _2394 = floatBitsToUint(cbLight._m0[_2320 + 12u]);
    bool _2396 = _2394.x == 0u;
    float _2498;
    float _2500;
    float _2502;
    if (_2396)
    {
        _2498 = _2388;
        _2500 = _2389;
        _2502 = _2390;
    }
    else
    {
        uint _2506 = _2320 + 6u;
        float _2522 = (dot(vec3(cbLight._m0[_2320 + 2u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2523 = _2522 * _2522;
        float _4632 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2524 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2525 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2498 = (((cbLight._m0[_2506].x * 0.3183098733425140380859375) * _2524) * _2525) + _2388;
        _2500 = (((cbLight._m0[_2506].y * 0.3183098733425140380859375) * _2524) * _2525) + _2389;
        _2502 = (((cbLight._m0[_2506].z * 0.3183098733425140380859375) * _2524) * _2525) + _2390;
    }
    bool _2505 = _2394.y == 0u;
    float _2560;
    float _2562;
    float _2564;
    if (_2505)
    {
        _2560 = _2498;
        _2562 = _2500;
        _2564 = _2502;
    }
    else
    {
        uint _2733 = _2320 + 7u;
        float _2749 = (dot(vec3(cbLight._m0[_2320 + 3u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2750 = _2749 * _2749;
        float _4648 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2751 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2752 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2560 = (((cbLight._m0[_2733].x * 0.3183098733425140380859375) * _2751) * _2752) + _2498;
        _2562 = (((cbLight._m0[_2733].y * 0.3183098733425140380859375) * _2751) * _2752) + _2500;
        _2564 = (((cbLight._m0[_2733].z * 0.3183098733425140380859375) * _2751) * _2752) + _2502;
    }
    uint _2567 = _2320 + 8u;
    float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _856) * 0.949999988079071044921875);
    float _2581 = _2580 * _2580;
    float _2582 = cbLight._m0[_2320].x + _932;
    float _2583 = cbLight._m0[_2320].y + _933;
    float _2584 = cbLight._m0[_2320].z + _934;
    float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
    float _2589 = _2588 * _2582;
    float _2590 = _2588 * _2583;
    float _2591 = _2588 * _2584;
    float _2592 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2320].xyz));
    float _4664 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _4675 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _2596 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _2597 = dot(vec3(_853, _854, _855), vec3(_2589, _2590, _2591));
    float _4686 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2600 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _2601 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2589, _2590, _2591));
    float _4697 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2605 = _2581 * _2581;
    float _2609 = ((_2600 * _2600) * (_2605 + (-1.0))) + 1.0;
    float _2617 = exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0);
    float _2618 = 0.959999978542327880859375 - _999;
    float _2620 = 0.959999978542327880859375 - _1000;
    float _2621 = 0.959999978542327880859375 - _1001;
    float _2628 = 1.0 - _2581;
    float _2639 = (0.5 / (((_2596 * ((_2595 * _2628) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2596 * _2628) + _2581) * _2595))) * _2595;
    float _4708 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2641 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2605 / ((_2609 * _2609) * 3.141590118408203125));
    uint _2655 = _2320 + 9u;
    float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _856) * 0.949999988079071044921875);
    float _2667 = _2666 * _2666;
    float _2668 = cbLight._m0[_2360].x + _932;
    float _2669 = cbLight._m0[_2360].y + _933;
    float _2670 = cbLight._m0[_2360].z + _934;
    float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
    float _2675 = _2674 * _2668;
    float _2676 = _2674 * _2669;
    float _2677 = _2674 * _2670;
    float _2678 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2360].xyz));
    float _4719 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2681 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
    float _2682 = dot(vec3(_853, _854, _855), vec3(_2675, _2676, _2677));
    float _4730 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _2685 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _2686 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2675, _2676, _2677));
    float _4741 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2690 = _2667 * _2667;
    float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
    float _2701 = exp2(log2(1.0 - (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) * 5.0);
    float _2708 = 1.0 - _2667;
    float _2718 = (0.5 / (((_2596 * ((_2681 * _2708) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2596 * _2708) + _2667) * _2681))) * _2681;
    float _4752 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2720 = (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
    float _2730 = (((((_2701 * _2618) + _1002) * cbLight._m0[_2655].x) * _2720) * _2343) + ((((cbLight._m0[_2567].x * _2309) * ((_2617 * _2618) + _1002)) * _2641) * _2356);
    float _2731 = (((((_2701 * _2620) + _1004) * cbLight._m0[_2655].y) * _2720) * _2343) + ((((cbLight._m0[_2567].y * _2311) * ((_2617 * _2620) + _1004)) * _2641) * _2356);
    float _2732 = (((((_2701 * _2621) + _1005) * cbLight._m0[_2655].z) * _2720) * _2343) + ((((cbLight._m0[_2567].z * _2313) * ((_2617 * _2621) + _1005)) * _2641) * _2356);
    float _2788;
    float _2790;
    float _2792;
    if (_2396)
    {
        _2788 = _2730;
        _2790 = _2731;
        _2792 = _2732;
    }
    else
    {
        uint _2794 = _2320 + 2u;
        uint _2798 = _2320 + 10u;
        float _2812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2794].w)) * _856) * 0.949999988079071044921875);
        float _2813 = _2812 * _2812;
        float _2814 = cbLight._m0[_2794].x + _932;
        float _2815 = cbLight._m0[_2794].y + _933;
        float _2816 = cbLight._m0[_2794].z + _934;
        float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
        float _2821 = _2820 * _2814;
        float _2822 = _2820 * _2815;
        float _2823 = _2820 * _2816;
        float _2824 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2794].xyz));
        float _4763 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2827 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2828 = dot(vec3(_853, _854, _855), vec3(_2821, _2822, _2823));
        float _4774 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2831 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2832 = dot(vec3(cbLight._m0[_2794].xyz), vec3(_2821, _2822, _2823));
        float _4785 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2836 = _2813 * _2813;
        float _2840 = ((_2831 * _2831) * (_2836 + (-1.0))) + 1.0;
        float _2847 = exp2(log2(1.0 - (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) * 5.0);
        float _2854 = 1.0 - _2813;
        float _2864 = (0.5 / (((_2596 * ((_2827 * _2854) + _2813)) + 9.9999999392252902907785028219223e-09) + (((_2596 * _2854) + _2813) * _2827))) * _2827;
        float _4796 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2866 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2836 / ((_2840 * _2840) * 3.141590118408203125));
        float _2867 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2788 = (((((_2847 * _2618) + _1002) * cbLight._m0[_2798].x) * _2866) * _2867) + _2730;
        _2790 = (((((_2847 * _2620) + _1004) * cbLight._m0[_2798].y) * _2866) * _2867) + _2731;
        _2792 = (((((_2847 * _2621) + _1005) * cbLight._m0[_2798].z) * _2866) * _2867) + _2732;
    }
    float _2898;
    float _2900;
    float _2902;
    if (_2505)
    {
        _2898 = _2788;
        _2900 = _2790;
        _2902 = _2792;
    }
    else
    {
        uint _2909 = _2320 + 3u;
        uint _2913 = _2320 + 11u;
        float _2927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2909].w)) * _856) * 0.949999988079071044921875);
        float _2928 = _2927 * _2927;
        float _2929 = cbLight._m0[_2909].x + _932;
        float _2930 = cbLight._m0[_2909].y + _933;
        float _2931 = cbLight._m0[_2909].z + _934;
        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
        float _2936 = _2935 * _2929;
        float _2937 = _2935 * _2930;
        float _2938 = _2935 * _2931;
        float _2939 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2909].xyz));
        float _4812 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2942 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2943 = dot(vec3(_853, _854, _855), vec3(_2936, _2937, _2938));
        float _4823 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2946 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2947 = dot(vec3(cbLight._m0[_2909].xyz), vec3(_2936, _2937, _2938));
        float _4834 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2951 = _2928 * _2928;
        float _2955 = ((_2946 * _2946) * (_2951 + (-1.0))) + 1.0;
        float _2962 = exp2(log2(1.0 - (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) * 5.0);
        float _2969 = 1.0 - _2928;
        float _2979 = (0.5 / (((_2596 * ((_2942 * _2969) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2596 * _2969) + _2928) * _2942))) * _2942;
        float _4845 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2981 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2951 / ((_2955 * _2955) * 3.141590118408203125));
        float _2982 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2898 = (((((_2962 * _2618) + _1002) * cbLight._m0[_2913].x) * _2981) * _2982) + _2788;
        _2900 = (((((_2962 * _2620) + _1004) * cbLight._m0[_2913].y) * _2981) * _2982) + _2790;
        _2902 = (((((_2962 * _2621) + _1005) * cbLight._m0[_2913].z) * _2981) * _2982) + _2792;
    }
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    float _3058;
    if (_2318.y == 0u)
    {
        uvec4 _3003 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3004 = _3003.x;
        uint _3015 = uint((float(_3003.y) * floor(float(uint(cbSceneParam._m0[85u].y * _941) / _3004))) + floor(float(uint(cbSceneParam._m0[85u].x * _940) / _3004)));
        float _3025 = (log2(_2096 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3026 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        uint _3029 = uint(isnan(14.0) ? _3026 : (isnan(_3026) ? 14.0 : min(_3026, 14.0)));
        uvec4 _3034 = texelFetch(g_lightClusterGridBuffer, int(((_3029 << 2u) + (_3015 << 6u)) >> 2u));
        uint _3035 = _3034.x;
        uint _3036 = _3003.z;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        if (((((1u << ((_3036 >> 4u) & 15u)) + 4294967295u) & _3035) == 0u) || ((_3036 & 240u) == 0u))
        {
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
            _3125 = 0.0;
        }
        else
        {
            float _3116;
            float _3118;
            float _3120;
            float _3122;
            float _3124;
            float _3126;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            uint _3266 = 0u;
            uint _3275;
            bool _3276;
            for (;;)
            {
                _3275 = texelFetch(g_lightClassification, int((((_3029 << 5u) + (_3015 << 9u)) + (_3266 << 2u)) >> 2u)).x;
                _3276 = _3275 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3276)
                {
                    frontier_phi_66_pred = _3265;
                    frontier_phi_66_pred_1 = _3264;
                    frontier_phi_66_pred_2 = _3263;
                    frontier_phi_66_pred_3 = _3262;
                    frontier_phi_66_pred_4 = _3261;
                    frontier_phi_66_pred_5 = _3260;
                }
                else
                {
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    uint _3390;
                    _3384 = _3260;
                    _3385 = _3261;
                    _3386 = _3262;
                    _3387 = _3263;
                    _3388 = _3264;
                    _3389 = _3265;
                    _3390 = _3275;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    for (;;)
                    {
                        uint _3394 = uint(findLSB(_3390)) + (_3266 << 5u);
                        uint _3391 = (_3390 + 4294967295u) & _3390;
                        uint _3396 = _3394 * 48u;
                        vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3396)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 3u)).x));
                        uint _3416 = (_3394 * 48u) + 4u;
                        vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 3u)).x));
                        uint _3435 = (_3394 * 48u) + 8u;
                        vec3 _3446 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x));
                        float _3450 = _3410.x - _2094;
                        float _3451 = _3410.y - _2095;
                        float _3452 = _3410.z - _2096;
                        float _3453 = dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452));
                        float _3456 = inversesqrt(_3453);
                        float _3457 = _3456 * _3450;
                        float _3458 = _3456 * _3451;
                        float _3459 = _3456 * _3452;
                        float _3460 = dot(vec3(_959, _962, _965), vec3(_3457, _3458, _3459));
                        float _3465 = 1.0 - (_3453 * _3410.w);
                        float _4871 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3466 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                        float _3467 = sqrt(_3453) * _3429.w;
                        float _3470 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                        float _3471 = _3470 * _3470;
                        float _3474 = ((1.0 - _3471) * _3460) + _3471;
                        float _3477 = _3467 * _3467;
                        float _3481 = ((isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0))) * _3466) / ((_3477 * 0.699999988079071044921875) + 1.0);
                        float _3485 = (-0.0) - _2094;
                        float _3486 = (-0.0) - _2095;
                        float _3487 = (-0.0) - _2096;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3492 = _3491 * _3485;
                        float _3493 = _3491 * _3486;
                        float _3494 = _3491 * _3487;
                        float _3501 = exp2(log2(1.0 / ((_3477 * 3.5) + 5.0)) * 0.25);
                        float _3502 = 1.0 - _1034;
                        float _3509 = sqrt(1.0 - ((1.0 - (_3502 * _3502)) * (1.0 - (_3501 * _3501))));
                        float _3510 = _3509 * _3509;
                        float _3511 = _3510 * _3510;
                        float _3512 = _3492 + _3457;
                        float _3513 = _3493 + _3458;
                        float _3514 = _3494 + _3459;
                        float _3518 = inversesqrt(dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514)));
                        float _3522 = dot(vec3(_959, _962, _965), vec3(_3492, _3493, _3494));
                        float _4887 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3525 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3526 = dot(vec3(_959, _962, _965), vec3(_3518 * _3512, _3518 * _3513, _3518 * _3514));
                        float _4898 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3529 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3533 = ((_3529 * _3529) * (_3511 + (-1.0))) + 1.0;
                        float _3534 = _3470 * _3510;
                        float _3535 = _3534 * _3534;
                        float _3538 = ((1.0 - _3535) * _3460) + _3535;
                        float _4909 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3539 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3540 = 1.0 - _3510;
                        float _3550 = (0.5 / (((_3539 * ((_3525 * _3540) + _3510)) + 9.9999999392252902907785028219223e-09) + (((_3539 * _3540) + _3510) * _3525))) * _3539;
                        float _4920 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3561 = (((_3511 * 3.1415927410125732421875) * (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) / ((_3533 * _3533) * ((_3477 * 2.1991131305694580078125) + 3.141590118408203125))) * _3466;
                        _3319 = (_3481 * _3429.x) + _3387;
                        _3320 = (_3481 * _3429.y) + _3388;
                        _3321 = (_3481 * _3429.z) + _3389;
                        _3316 = (_3561 * _3446.x) + _3384;
                        _3317 = (_3561 * _3446.y) + _3385;
                        _3318 = (_3561 * _3446.z) + _3386;
                        if (_3391 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3384 = _3316;
                            _3385 = _3317;
                            _3386 = _3318;
                            _3387 = _3319;
                            _3388 = _3320;
                            _3389 = _3321;
                            _3390 = _3391;
                        }
                    }
                    frontier_phi_66_pred = _3321;
                    frontier_phi_66_pred_1 = _3320;
                    frontier_phi_66_pred_2 = _3319;
                    frontier_phi_66_pred_3 = _3318;
                    frontier_phi_66_pred_4 = _3317;
                    frontier_phi_66_pred_5 = _3316;
                }
                _3126 = frontier_phi_66_pred;
                _3124 = frontier_phi_66_pred_1;
                _3122 = frontier_phi_66_pred_2;
                _3120 = frontier_phi_66_pred_3;
                _3118 = frontier_phi_66_pred_4;
                _3116 = frontier_phi_66_pred_5;
                uint _3267 = _3266 + 1u;
                if (_3267 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3260 = _3116;
                    _3261 = _3118;
                    _3262 = _3120;
                    _3263 = _3122;
                    _3264 = _3124;
                    _3265 = _3126;
                    _3266 = _3267;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
            _3125 = _3126;
        }
        uvec4 _3129 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3130 = _3129.z;
        uint _3132 = (_3130 >> 8u) & 15u;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        if (((4294967295u << _3132) & _3035) == 0u)
        {
            _3228 = _3115;
            _3230 = _3117;
            _3232 = _3119;
            _3234 = _3121;
            _3236 = _3123;
            _3238 = _3125;
        }
        else
        {
            float _3253 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
            float _3254 = _3253 * _2094;
            float _3255 = _3253 * _2095;
            float _3256 = _3253 * _2096;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3132 < ((_3130 >> 12u) & 15u))
            {
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3367 = _3115;
                float _3368 = _3117;
                float _3369 = _3119;
                float _3370 = _3121;
                float _3371 = _3123;
                float _3372 = _3125;
                uint _3373 = _3132;
                uint _3382;
                bool _3383;
                for (;;)
                {
                    _3382 = texelFetch(g_lightClassification, int((((_3029 << 5u) + (_3015 << 9u)) + (_3373 << 2u)) >> 2u)).x;
                    _3383 = _3382 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3383)
                    {
                        frontier_phi_72_pred = _3372;
                        frontier_phi_72_pred_1 = _3371;
                        frontier_phi_72_pred_2 = _3370;
                        frontier_phi_72_pred_3 = _3369;
                        frontier_phi_72_pred_4 = _3368;
                        frontier_phi_72_pred_5 = _3367;
                    }
                    else
                    {
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3579 = _3367;
                        float _3580 = _3368;
                        float _3581 = _3369;
                        float _3582 = _3370;
                        float _3583 = _3371;
                        float _3584 = _3372;
                        uint _3585 = _3382;
                        uint _3586;
                        vec4 _3611;
                        float _3612;
                        vec4 _3627;
                        vec3 _3639;
                        vec4 _3654;
                        vec4 _3669;
                        float _3715;
                        bool _3716;
                        for (;;)
                        {
                            uint _3596 = ((_3373 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3585));
                            _3586 = (_3585 + 4294967295u) & _3585;
                            uint _3598 = _3596 * 40u;
                            _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            _3612 = _3611.w;
                            uint _3614 = (_3596 * 40u) + 4u;
                            _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3629 = (_3596 * 40u) + 8u;
                            _3639 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x));
                            uint _3641 = (_3596 * 40u) + 16u;
                            _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            uint _3656 = (_3596 * 40u) + 20u;
                            _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            uint _3671 = (_3596 * 40u) + 24u;
                            vec4 _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3690 = (_3596 * 40u) + 28u;
                            vec4 _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            _3715 = fma(_2096, _3703.z, fma(_2095, _3703.y, _3703.x * _2094)) + _3703.w;
                            _3716 = !((fma(_2096, _3684.z, fma(_2095, _3684.y, _3684.x * _2094)) + _3684.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3716)
                            {
                                float _3743 = _3611.x - _2094;
                                float _3744 = _3611.y - _2095;
                                float _3745 = _3611.z - _2096;
                                float _3746 = dot(vec3(_3743, _3744, _3745), vec3(_3743, _3744, _3745));
                                float _3749 = inversesqrt(_3746);
                                float _3750 = _3749 * _3743;
                                float _3751 = _3749 * _3744;
                                float _3752 = _3749 * _3745;
                                float _3756 = 1.0 - (_3746 / (_3612 * _3612));
                                float _4931 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3757 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                                float _3761 = sqrt(_3746) * _3627.w;
                                float _3763 = 1.39999997615814208984375 / (_3761 + 1.39999997615814208984375);
                                float _3764 = _3763 * _3763;
                                float _3767 = ((1.0 - _3764) * dot(vec3(_3750, _3751, _3752), vec3(_959, _962, _965))) + _3764;
                                float _3770 = _3761 * _3761;
                                float _3774 = (fma(_2096, _3654.z, fma(_2095, _3654.y, _3654.x * _2094)) + _3654.w) / _3715;
                                float _3775 = (fma(_2096, _3669.z, fma(_2095, _3669.y, _3669.x * _2094)) + _3669.w) / _3715;
                                float _3779 = 1.0 - dot(vec2(_3774, _3775), vec2(_3774, _3775));
                                float _4947 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3781 = _3780 * (((isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0))) * _3757) / ((_3770 * 0.699999988079071044921875) + 1.0));
                                float _3793 = exp2(log2(1.0 / ((_3770 * 3.5) + 5.0)) * 0.25);
                                float _3794 = 1.0 - _1034;
                                float _3801 = sqrt(1.0 - ((1.0 - (_3794 * _3794)) * (1.0 - (_3793 * _3793))));
                                float _3802 = _3801 * _3801;
                                float _3803 = _3802 * _3802;
                                float _3804 = _3750 - _3254;
                                float _3805 = _3751 - _3255;
                                float _3806 = _3752 - _3256;
                                float _3810 = inversesqrt(dot(vec3(_3804, _3805, _3806), vec3(_3804, _3805, _3806)));
                                float _3814 = dot(vec3(_959, _962, _965), vec3((-0.0) - _3254, (-0.0) - _3255, (-0.0) - _3256));
                                float _4958 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3817 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3818 = dot(vec3(_959, _962, _965), vec3(_3810 * _3804, _3810 * _3805, _3810 * _3806));
                                float _4969 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3821 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3825 = ((_3821 * _3821) * (_3803 + (-1.0))) + 1.0;
                                float _3826 = _3763 * _3802;
                                float _3827 = _3826 * _3826;
                                float _3833 = ((1.0 - _3827) * dot(vec3(_959, _962, _965), vec3(_3750, _3751, _3752))) + _3827;
                                float _4980 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3834 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3835 = 1.0 - _3802;
                                float _3845 = (0.5 / (((_3834 * ((_3817 * _3835) + _3802)) + 9.9999999392252902907785028219223e-09) + (((_3834 * _3835) + _3802) * _3817))) * _3834;
                                float _4991 = isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0));
                                float _3855 = (_3780 * _3757) * (((_3803 * 3.1415927410125732421875) * (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0)))) / ((_3825 * _3825) * ((_3770 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3781 * _3627.y;
                                frontier_phi_78_pred_1 = _3781 * _3627.x;
                                frontier_phi_78_pred_2 = _3855 * _3639.z;
                                frontier_phi_78_pred_3 = _3855 * _3639.y;
                                frontier_phi_78_pred_4 = _3855 * _3639.x;
                                frontier_phi_78_pred_5 = _3781 * _3627.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3863 = frontier_phi_78_pred;
                            _3862 = frontier_phi_78_pred_1;
                            _3861 = frontier_phi_78_pred_2;
                            _3860 = frontier_phi_78_pred_3;
                            _3859 = frontier_phi_78_pred_4;
                            _3864 = frontier_phi_78_pred_5;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            _3571 = _3864 + _3584;
                            _3566 = _3859 + _3579;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            if (_3586 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3586;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3571;
                        frontier_phi_72_pred_1 = _3570;
                        frontier_phi_72_pred_2 = _3569;
                        frontier_phi_72_pred_3 = _3568;
                        frontier_phi_72_pred_4 = _3567;
                        frontier_phi_72_pred_5 = _3566;
                    }
                    _3239 = frontier_phi_72_pred;
                    _3237 = frontier_phi_72_pred_1;
                    _3235 = frontier_phi_72_pred_2;
                    _3233 = frontier_phi_72_pred_3;
                    _3231 = frontier_phi_72_pred_4;
                    _3229 = frontier_phi_72_pred_5;
                    uint _3374 = _3373 + 1u;
                    if (_3374 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3367 = _3229;
                        _3368 = _3231;
                        _3369 = _3233;
                        _3370 = _3235;
                        _3371 = _3237;
                        _3372 = _3239;
                        _3373 = _3374;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3239;
                frontier_phi_60_61_ladder_1 = _3237;
                frontier_phi_60_61_ladder_2 = _3233;
                frontier_phi_60_61_ladder_3 = _3231;
                frontier_phi_60_61_ladder_4 = _3229;
                frontier_phi_60_61_ladder_5 = _3235;
            }
            else
            {
                frontier_phi_60_61_ladder = _3125;
                frontier_phi_60_61_ladder_1 = _3123;
                frontier_phi_60_61_ladder_2 = _3119;
                frontier_phi_60_61_ladder_3 = _3117;
                frontier_phi_60_61_ladder_4 = _3115;
                frontier_phi_60_61_ladder_5 = _3121;
            }
            _3228 = frontier_phi_60_61_ladder_4;
            _3230 = frontier_phi_60_61_ladder_3;
            _3232 = frontier_phi_60_61_ladder_2;
            _3234 = frontier_phi_60_61_ladder_5;
            _3236 = frontier_phi_60_61_ladder_1;
            _3238 = frontier_phi_60_61_ladder;
        }
        float _3243 = isnan(1.0) ? _1018 : (isnan(_1018) ? 1.0 : min(_1018, 1.0));
        _3048 = (_3243 * _3234) + _2560;
        _3050 = (_3243 * _3236) + _2562;
        _3052 = (_3243 * _3238) + _2564;
        _3054 = ((_3228 * _1002) * _3243) + _2898;
        _3056 = ((_3230 * _1004) * _3243) + _2900;
        _3058 = ((_3232 * _1005) * _3243) + _2902;
    }
    else
    {
        _3048 = _2560;
        _3050 = _2562;
        _3052 = _2564;
        _3054 = _2898;
        _3056 = _2900;
        _3058 = _2902;
    }
    float _5007 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _5018 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _5029 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    uint _3078 = _285 + 6u;
    float _3086 = _940 / cbSceneParam._m0[86u].x;
    float _3087 = _941 / cbSceneParam._m0[86u].y;
    vec4 _3101 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3086, _3087, (log2((isnan(cbSceneParam._m0[77u].w) ? _875 : (isnan(_875) ? cbSceneParam._m0[77u].w : min(_875, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3103 = _3101.x;
    float _3104 = _3101.y;
    float _3105 = _3101.z;
    float _3106 = _3101.w;
    float _3178;
    float _3180;
    float _3182;
    float _3184;
    if (_875 > cbSceneParam._m0[78u].w)
    {
        float _3140 = isnan(_875) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _875 : min(cbSceneParam._m0[80u].w, _875));
        float _3141 = _3140 / _875;
        float _3152 = _3141 * _925;
        float _3153 = _926 * _3141;
        float _3154 = (-0.0) - _3153;
        float _3156 = _3141 * _927;
        float _3158 = (cbSceneParam._m0[77u].w * _3154) / _3140;
        float _3159 = _3158 + cbSceneParam._m0[79u].w;
        float _3160 = cbSceneParam._m0[79u].w - _3153;
        float _3166 = sqrt(((_3152 * _3152) + (_3153 * _3153)) + (_3156 * _3156));
        float _3169 = (1.0 - (cbSceneParam._m0[77u].w / _3140)) * _3166;
        float _3174 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3176 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3329;
        if (abs((_3154 - _3158) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3329 = ((((_3159 > 0.0) ? exp2(_3174 * _3159) : (2.0 - exp2(_3176 * _3159))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3169;
        }
        else
        {
            float _3289 = 1.0 / cbSceneParam._m0[80u].x;
            float _3290 = isnan(_3160) ? _3159 : (isnan(_3159) ? _3160 : max(_3159, _3160));
            float _3291 = isnan(_3160) ? _3159 : (isnan(_3159) ? _3160 : min(_3159, _3160));
            float _3300 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : min(_3290, 0.0));
            float _3301 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : min(_3291, 0.0));
            _3329 = ((abs(_3166 / _3154) * cbSceneParam._m0[80u].y) * ((((_3300 - _3301) * 2.0) - ((exp2(_3174 * (isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0)))) - exp2(_3174 * (isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))))) * _3289)) - ((exp2(_3176 * _3300) - exp2(_3176 * _3301)) * _3289))) + (_3169 * cbSceneParam._m0[80u].z);
        }
        vec4 _3331 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3086, _3087, 1.0), 0.0);
        float _3340 = exp2((_3329 * (-1.44269502162933349609375)) * (1.0 - _3331.w));
        float _3341 = log2(_3340);
        float _3357 = log2(_3106);
        _3178 = (exp2(_3357 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3341 * cbSceneParam._m0[78u].x)) * _3331.x) / cbSceneParam._m0[78u].x)) + _3103;
        _3180 = (exp2(_3357 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3341 * cbSceneParam._m0[78u].y)) * _3331.y) / cbSceneParam._m0[78u].y)) + _3104;
        _3182 = (exp2(_3357 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3341 * cbSceneParam._m0[78u].z)) * _3331.z) / cbSceneParam._m0[78u].z)) + _3105;
        _3184 = _3340 * _3106;
    }
    else
    {
        _3178 = _3103;
        _3180 = _3104;
        _3182 = _3105;
        _3184 = _3106;
    }
    float _3196 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3197 = _3196 == 3.0;
    float _3198 = log2(_3184);
    float _3205 = exp2(_3198 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0))) * (_3048 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1018))) + ((_3054 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1825)) * cbPerFrame._m0[3u].x));
    float _3206 = exp2(_3198 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_3050 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1018))) + ((_3056 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1825)) * cbPerFrame._m0[3u].x));
    float _3207 = exp2(_3198 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_3052 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1018))) + ((_3058 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1825)) * cbPerFrame._m0[3u].x));
    float _3216 = (_3196 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3216 * (_3197 ? _3205 : (_3205 + (cbSceneParam._m0[72u].w * _3178)));
    SV_Target.y = _3216 * (_3197 ? _3206 : (_3206 + (cbSceneParam._m0[72u].w * _3180)));
    SV_Target.z = _3216 * (_3197 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3182)));
    SV_Target.w = cbInstanceData._m0[_3078].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3078].w;
}


