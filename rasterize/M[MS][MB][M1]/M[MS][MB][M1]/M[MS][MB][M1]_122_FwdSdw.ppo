#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1439;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4048 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4059 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4070 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4081 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) + _453;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    float _537 = ((_507.z - _528) * _434) + _528;
    float _540 = ((((_507.x - _526) * _434) + _526) * 2.0) + (-1.0);
    float _541 = ((((_507.y - _527) * _434) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _4092 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _579 = (_540 + ((((_480.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_567.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _580 = (_541 + ((((_480.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_567.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _583 = fma(_547, _252, fma(_580, _259, _579 * _245));
    float _586 = fma(_547, _253, fma(_580, _260, _579 * _246));
    float _589 = fma(_547, _254, fma(_580, _261, _579 * _247));
    float _593 = inversesqrt(dot(vec3(_583, _586, _589), vec3(_583, _586, _589)));
    vec4 _620 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _622 = _620.x;
    float _623 = 1.0 - _622;
    float _627 = ((_622 - _623) * cbMtdParam._m0[24u].z) + _623;
    float _629 = (cbMtdParam._m0[19u].x + dot(vec4(_593 * _583, _593 * _586, _593 * _589, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_627 * cbMtdParam._m0[21u].z);
    float _4103 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _632 = (-0.0) - cbMtdParam._m0[24u].x;
    float _634 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _634 : (isnan(_634) ? 1.0 : min(_634, 1.0));
    float _642 = _630 - ((_630 * TEXCOORD_8.x) * _635);
    float _643 = _630 - ((_630 * TEXCOORD_8.y) * _635);
    float _644 = _630 - ((_630 * TEXCOORD_8.z) * _635);
    float _651 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _655 = ((isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : min(_651, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _663 = (_655 - (((_627 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _655))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4134 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _664 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _668 = ((_642 * (cbMtdParam._m0[17u].x - _460)) * _664) + _460;
    float _669 = ((_643 * (cbMtdParam._m0[17u].y - _461)) * _664) + _461;
    float _670 = ((_644 * (cbMtdParam._m0[17u].z - _462)) * _664) + _462;
    vec4 _682 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _684 = _682.x;
    float _685 = 1.0 - _684;
    float _710 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_684 - _685) * cbMtdParam._m0[24u].w) + _685) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4145 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _711 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _719 = ((((cbMtdParam._m0[10u].x - _668) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _711) + _668;
    float _720 = ((((cbMtdParam._m0[10u].y - _669) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _711) + _669;
    float _721 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _670)) * _711) + _670;
    vec4 _747 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _749 = _747.x;
    float _767 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _749) * _434) + _749;
    float _771 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _767) * cbMtdParam._m0[19u].z) + _767;
    float _774 = _771 - ((_664 * _642) * _771);
    float _776 = _774 - (_774 * _711);
    float _781 = (((_480.z - _537) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _537;
    float _785 = ((_567.z - _781) * cbMtdParam._m0[19u].w) + _781;
    vec4 _799 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _806 = (_799.x * 2.0) + (-1.0);
    float _807 = (_799.y * 2.0) + (-1.0);
    float _808 = dot(vec2(_806, _807), vec2(_806, _807));
    float _4156 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _817 = (((_799.z - _785) * _642) * _664) + _785;
    float _820 = ((cbMtdParam._m0[23u].y - _817) * _711) + _817;
    vec4 _839 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _845 = (_839.x * 2.0) + (-1.0);
    float _846 = (_839.y * 2.0) + (-1.0);
    float _847 = dot(vec2(_845, _846), vec2(_845, _846));
    float _4167 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _867 = (((cbMtdParam._m0[21u].x * _579) + ((_806 - _579) * _642)) * _664) + _579;
    float _868 = (((cbMtdParam._m0[21u].x * _580) + ((_807 - _580) * _643)) * _664) + _580;
    float _869 = (((sqrt(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) - _547) * _644) * _664) + _547;
    float _880 = (((_845 - _867) + (_867 * cbMtdParam._m0[22u].z)) * _711) + _867;
    float _881 = (((_846 - _868) + (_868 * cbMtdParam._m0[22u].z)) * _711) + _868;
    float _882 = ((sqrt(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) - _869) * _711) + _869;
    float _886 = cbMtdParam._m0[22u].x + _567.w;
    float _889 = fma(_882, _252, fma(_881, _259, _880 * _245));
    float _892 = fma(_882, _253, fma(_881, _260, _880 * _246));
    float _895 = fma(_882, _254, fma(_881, _261, _880 * _247));
    float _899 = inversesqrt(dot(vec3(_889, _892, _895), vec3(_889, _892, _895)));
    float _900 = _899 * _889;
    float _901 = _899 * _892;
    float _902 = _899 * _895;
    float _4178 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _903 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4200 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4211 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4222 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4233 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _908 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _922 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _972 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _962);
    float _973 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _962);
    float _974 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _962);
    float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
    float _979 = _972 * _978;
    float _980 = _973 * _978;
    float _981 = _974 * _978;
    float _987 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _988 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1006 = fma(_902, cbSceneParam._m0[5u].z, fma(_901, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _900));
    float _1009 = fma(_902, cbSceneParam._m0[6u].z, fma(_901, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _900));
    float _1012 = fma(_902, cbSceneParam._m0[7u].z, fma(_901, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _900));
    uint _1026 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1032 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * cbInstanceData._m0[_1026].x;
    float _1033 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * cbInstanceData._m0[_1026].y;
    float _1034 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * cbInstanceData._m0[_1026].z;
    float _4244 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _4266 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1037 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _1038 = 1.0 - _908;
    float _1039 = _1035 * _1038;
    float _1040 = _1036 * _1038;
    float _1041 = _1037 * _1038;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _908;
    float _1047 = (_1036 + (-0.039999999105930328369140625)) * _908;
    float _1048 = (_1037 + (-0.039999999105930328369140625)) * _908;
    float _1049 = _1046 + 0.039999999105930328369140625;
    float _1051 = _1047 + 0.039999999105930328369140625;
    float _1052 = _1048 + 0.039999999105930328369140625;
    vec4 _1061 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _987, cbSceneParam._m0[86u].y * _988));
    float _1065 = ((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * TEXCOORD_5.w) * _1061.x;
    float _1066 = dot(vec3(_900, _901, _902), vec3(_979, _980, _981));
    float _1069 = _1066 * 2.0;
    float _1073 = (_1069 * _900) - _979;
    float _1074 = (_1069 * _901) - _980;
    float _1075 = (_1069 * _902) - _981;
    float _1079 = abs(dot(vec3(_979, _980, _981), vec3(_900, _901, _902)));
    float _4277 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1081 = sqrt(_903);
    float _1094 = exp2((_1081 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1081 * 3.0));
    float _1100 = (1.0 - _1094) * ((_1081 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1101 = _1094 * _1081;
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1438;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1163 = fma(_1137, cbModelParam._m0[26u].z, fma(_1133, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1129));
        float _1167 = fma(_1137, cbModelParam._m0[27u].z, fma(_1133, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1129));
        float _1171 = fma(_1137, cbModelParam._m0[28u].z, fma(_1133, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1129));
        float _1196 = _1129 + _900;
        float _1197 = _1133 + _901;
        float _1198 = _1137 + _902;
        float _1208 = fma(_1198, cbModelParam._m0[26u].z, fma(_1197, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1196)) - _1163;
        float _1209 = fma(_1198, cbModelParam._m0[27u].z, fma(_1197, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1196)) - _1167;
        float _1210 = fma(_1198, cbModelParam._m0[28u].z, fma(_1197, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1196)) - _1171;
        float _1214 = inversesqrt(dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210)));
        float _1227 = ((_1214 * _1208) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1163 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1214 * _1209) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1167 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1214 * _1210) / cbModelParam._m0[34u].z) + ((((((_1171 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        float _1266 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1232.x + (-0.5));
        float _1268 = _1266 * (_1232.y + (-0.5));
        float _1269 = _1266 * (_1232.z + (-0.5));
        float _1276 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1239.x + (-0.5));
        float _1278 = _1276 * (_1239.y + (-0.5));
        float _1279 = _1276 * (_1239.z + (-0.5));
        float _1286 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1246.x + (-0.5));
        float _1288 = _1286 * (_1246.y + (-0.5));
        float _1289 = _1286 * (_1246.z + (-0.5));
        float _1296 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1253.x + (-0.5));
        float _1298 = _1296 * (_1253.y + (-0.5));
        float _1299 = _1296 * (_1253.z + (-0.5));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = _1267 * 0.5;
        float _1304 = _1277 * 0.5;
        float _1305 = _1287 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1320 = (dot(vec3(_900, _901, _902), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1330 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4325 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1332 + 1.0))) + _1337) * _1300;
        float _1347 = _1268 * 0.5;
        float _1348 = _1278 * 0.5;
        float _1349 = _1288 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_900, _901, _902), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4358 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1374 + 1.0))) + _1379) * _1301;
        float _1389 = _1269 * 0.5;
        float _1390 = _1279 * 0.5;
        float _1391 = _1289 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_900, _901, _902), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4391 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1416 + 1.0))) + _1421) * _1302;
        _1438 = _1269;
        _1440 = _1268;
        _1441 = _1267;
        _1442 = _1279;
        _1443 = _1278;
        _1444 = _1277;
        _1445 = _1289;
        _1446 = _1288;
        _1447 = _1287;
        _1448 = _1302;
        _1449 = _1301;
        _1450 = _1300;
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
    }
    else
    {
        _1438 = _1439;
        _1440 = _1439;
        _1441 = _1439;
        _1442 = _1439;
        _1443 = _1439;
        _1444 = _1439;
        _1445 = _1439;
        _1446 = _1439;
        _1447 = _1439;
        _1448 = _1439;
        _1449 = _1439;
        _1450 = _1439;
        _1451 = 0.0;
        _1452 = 0.0;
        _1453 = 0.0;
    }
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1478 = fma(_1137, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1129));
        float _1482 = fma(_1137, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1129));
        float _1486 = fma(_1137, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1129));
        float _1509 = _1129 + _900;
        float _1510 = _1133 + _901;
        float _1511 = _1137 + _902;
        float _1521 = fma(_1511, cbModelParam._m0[30u].z, fma(_1510, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1509)) - _1478;
        float _1522 = fma(_1511, cbModelParam._m0[31u].z, fma(_1510, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1509)) - _1482;
        float _1523 = fma(_1511, cbModelParam._m0[32u].z, fma(_1510, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1509)) - _1486;
        float _1527 = inversesqrt(dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523)));
        float _1540 = ((_1527 * _1521) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1478 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1541 = ((_1527 * _1522) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1482 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1542 = ((_1527 * _1523) / cbModelParam._m0[35u].z) + ((((((_1486 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        float _1577 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1544.x + (-0.5));
        float _1579 = _1577 * (_1544.y + (-0.5));
        float _1580 = _1577 * (_1544.z + (-0.5));
        float _1587 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1551.x + (-0.5));
        float _1589 = _1587 * (_1551.y + (-0.5));
        float _1590 = _1587 * (_1551.z + (-0.5));
        float _1597 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1558.x + (-0.5));
        float _1599 = _1597 * (_1558.y + (-0.5));
        float _1600 = _1597 * (_1558.z + (-0.5));
        float _1607 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1565.x + (-0.5));
        float _1609 = _1607 * (_1565.y + (-0.5));
        float _1610 = _1607 * (_1565.z + (-0.5));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = _1578 * 0.5;
        float _1615 = _1588 * 0.5;
        float _1616 = _1598 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_900, _901, _902), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4454 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1641 + 1.0))) + _1646) * _1611;
        float _1656 = _1579 * 0.5;
        float _1657 = _1589 * 0.5;
        float _1658 = _1599 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_900, _901, _902), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4465 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4476 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4487 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_1683 + 1.0))) + _1688) * _1612;
        float _1698 = _1580 * 0.5;
        float _1699 = _1590 * 0.5;
        float _1700 = _1600 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_900, _901, _902), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4498 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4509 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4520 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_1725 + 1.0))) + _1730) * _1613;
        _1747 = _1580;
        _1748 = _1579;
        _1749 = _1578;
        _1750 = _1590;
        _1751 = _1589;
        _1752 = _1588;
        _1753 = _1600;
        _1754 = _1599;
        _1755 = _1598;
        _1756 = _1613;
        _1757 = _1612;
        _1758 = _1611;
        _1759 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1760 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1761 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
    }
    else
    {
        _1747 = _1439;
        _1748 = _1439;
        _1749 = _1439;
        _1750 = _1439;
        _1751 = _1439;
        _1752 = _1439;
        _1753 = _1439;
        _1754 = _1439;
        _1755 = _1439;
        _1756 = _1439;
        _1757 = _1439;
        _1758 = _1439;
        _1759 = 0.0;
        _1760 = 0.0;
        _1761 = 0.0;
    }
    float _1771 = (cbModelParam._m0[1u].x * (_1759 - _1451)) + _1451;
    float _1772 = (cbModelParam._m0[1u].x * (_1760 - _1452)) + _1452;
    float _1773 = (cbModelParam._m0[1u].x * (_1761 - _1453)) + _1453;
    float _1794 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1772, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1797 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1772, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1800 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1772, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1771));
    float _1815 = _1073 * 0.5;
    float _1816 = _1074 * 0.5;
    float _1817 = _1075 * 0.5;
    float _1818 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1749, _1752, _1755, _1758));
    float _1821 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1748, _1751, _1754, _1757));
    float _1824 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1747, _1750, _1753, _1756));
    float _1858;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1831 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1438, _1442, _1445, _1448));
        float _1835 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1839 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1441, _1444, _1447, _1450));
        float _1846 = dot(vec4(cbModelParam._m0[39u]), vec4(_1815, _1816, _1817, 1.0));
        _1858 = dot(vec3(isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1846) ? 0.0 : (isnan(0.0) ? _1846 : max(0.0, _1846))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1858 = 1.0;
    }
    float _1869;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1860 = dot(vec4(cbModelParam._m0[40u]), vec4(_1815, _1816, _1817, 1.0));
        _1869 = dot(vec3(isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1860) ? 0.0 : (isnan(0.0) ? _1860 : max(0.0, _1860))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1869 = 1.0;
    }
    float _1873 = (_1869 * cbModelParam._m0[1u].x) + (_1858 * (1.0 - cbModelParam._m0[1u].x));
    float _1883 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _903);
    float _1884 = isnan(_1883) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1883 : min(cbModelParam._m0[25u].z, _1883));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1932 = fma(_1137, cbModelParam._m0[13u].z, fma(_1133, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1129)) + cbModelParam._m0[13u].w;
        float _1936 = fma(_1137, cbModelParam._m0[14u].z, fma(_1133, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1129)) + cbModelParam._m0[14u].w;
        float _1940 = fma(_1137, cbModelParam._m0[15u].z, fma(_1133, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1129)) + cbModelParam._m0[15u].w;
        float _1943 = fma(_1075, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1073));
        float _1946 = fma(_1075, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1073));
        float _1949 = fma(_1075, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1073));
        float _1977;
        if (_1943 > 0.0)
        {
            _1977 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1977 = frontier_phi_14_12_ladder;
        }
        float _2149;
        if (_1946 > 0.0)
        {
            _2149 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2149 = frontier_phi_23_19_ladder;
        }
        float _2444;
        if (_1949 > 0.0)
        {
            _2444 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2444 = frontier_phi_35_30_ladder;
        }
        float _2446 = isnan(_2149) ? _1977 : (isnan(_1977) ? _2149 : min(_1977, _2149));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1943) + _1932;
        float _2452 = (_2447 * _1946) + _1936;
        float _2453 = (_2447 * _1949) + _1940;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2456 = (-1.0) - _2454;
        float _2458 = _2454 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2453 > _2458) || ((_2453 < _2456) || ((_2452 > _2458) || ((_2452 < _2456) || ((_2451 < _2456) || (_2451 > _2458))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2453, cbModelParam._m0[9u].z, fma(_2452, cbModelParam._m0[9u].y, _2451 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2453, cbModelParam._m0[10u].z, fma(_2452, cbModelParam._m0[10u].y, _2451 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2453, cbModelParam._m0[11u].z, fma(_2452, cbModelParam._m0[11u].y, _2451 * cbModelParam._m0[11u].x))), _1884);
            frontier_phi_13_35_ladder = _2598.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2598.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2598.x * cbModelParam._m0[1u].y;
        }
        _1965 = frontier_phi_13_35_ladder_2;
        _1967 = frontier_phi_13_35_ladder_1;
        _1969 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1953 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1073, _1074, _1075), _1884);
        _1965 = _1953.x * cbModelParam._m0[1u].y;
        _1967 = _1953.y * cbModelParam._m0[1u].y;
        _1969 = _1953.z * cbModelParam._m0[1u].y;
    }
    float _1973 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _903);
    float _1974 = isnan(_1973) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1973 : min(cbModelParam._m0[25u].w, _1973));
    float _2064;
    float _2066;
    float _2068;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2028 = fma(_1137, cbModelParam._m0[21u].z, fma(_1133, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1129)) + cbModelParam._m0[21u].w;
        float _2032 = fma(_1137, cbModelParam._m0[22u].z, fma(_1133, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1129)) + cbModelParam._m0[22u].w;
        float _2036 = fma(_1137, cbModelParam._m0[23u].z, fma(_1133, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1129)) + cbModelParam._m0[23u].w;
        float _2039 = fma(_1075, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1073));
        float _2042 = fma(_1075, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1073));
        float _2045 = fma(_1075, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1073));
        float _2154;
        if (_2039 > 0.0)
        {
            _2154 = abs((1.0 - _2028) / _2039);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2028 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2154 = frontier_phi_25_21_ladder;
        }
        float _2471;
        if (_2042 > 0.0)
        {
            _2471 = abs((1.0 - _2032) / _2042);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2032 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2471 = frontier_phi_37_32_ladder;
        }
        float _2809;
        if (_2045 > 0.0)
        {
            _2809 = abs((1.0 - _2036) / _2045);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2036 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2809 = frontier_phi_47_44_ladder;
        }
        float _2811 = isnan(_2471) ? _2154 : (isnan(_2154) ? _2471 : min(_2154, _2471));
        float _2812 = isnan(_2809) ? _2811 : (isnan(_2811) ? _2809 : min(_2811, _2809));
        float _2816 = (_2812 * _2039) + _2028;
        float _2817 = (_2812 * _2042) + _2032;
        float _2818 = (_2812 * _2045) + _2036;
        float _2819 = _2812 * 9.9999997473787516355514526367188e-05;
        float _2820 = (-1.0) - _2819;
        float _2822 = _2819 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2818 > _2822) || ((_2818 < _2820) || ((_2817 > _2822) || ((_2817 < _2820) || ((_2816 < _2820) || (_2816 > _2822))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2940 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2818, cbModelParam._m0[17u].z, fma(_2817, cbModelParam._m0[17u].y, _2816 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2818, cbModelParam._m0[18u].z, fma(_2817, cbModelParam._m0[18u].y, _2816 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2818, cbModelParam._m0[19u].z, fma(_2817, cbModelParam._m0[19u].y, _2816 * cbModelParam._m0[19u].x))), _1974);
            frontier_phi_22_47_ladder = _2940.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2940.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2940.x * cbModelParam._m0[1u].z;
        }
        _2064 = frontier_phi_22_47_ladder_2;
        _2066 = frontier_phi_22_47_ladder_1;
        _2068 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2048 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1073, _1074, _1075), _1974);
        _2064 = _2048.x * cbModelParam._m0[1u].z;
        _2066 = _2048.y * cbModelParam._m0[1u].z;
        _2068 = _2048.z * cbModelParam._m0[1u].z;
    }
    float _2081 = (((_1100 * _1049) + _1101) * _1065) * ((cbModelParam._m0[1u].w * (_2064 - _1965)) + _1965);
    float _2083 = (((_1100 * _1051) + _1101) * _1065) * ((cbModelParam._m0[1u].w * (_2066 - _1967)) + _1967);
    float _2085 = (((_1100 * _1052) + _1101) * _1065) * ((cbModelParam._m0[1u].w * (_2068 - _1969)) + _1969);
    float _2088 = fma(_2085, cbSceneParam._m0[89u].z, fma(_2083, cbSceneParam._m0[89u].y, _2081 * cbSceneParam._m0[89u].x));
    float _2091 = fma(_2085, cbSceneParam._m0[90u].z, fma(_2083, cbSceneParam._m0[90u].y, _2081 * cbSceneParam._m0[90u].x));
    float _2094 = fma(_2085, cbSceneParam._m0[91u].z, fma(_2083, cbSceneParam._m0[91u].y, _2081 * cbSceneParam._m0[91u].x));
    float _2128 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2132 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2136 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2140 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2141 = _2128 / _2140;
    float _2142 = _2132 / _2140;
    float _2143 = _2136 / _2140;
    float _2290;
    float _2291;
    float _2292;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2170 = ((uint(_2143 > cbSceneParam._m0[59u].y) + uint(_2143 > cbSceneParam._m0[59u].x)) + uint(_2143 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2171 = _2170 + 43u;
        uint _2179 = _2170 + 44u;
        uint _2187 = _2170 + 45u;
        uint _2195 = _2170 + 46u;
        float _2206 = fma(_2140, cbSceneParam._m0[_2171].w, fma(_2136, cbSceneParam._m0[_2171].z, fma(_2132, cbSceneParam._m0[_2171].y, _2128 * cbSceneParam._m0[_2171].x)));
        float _2210 = fma(_2140, cbSceneParam._m0[_2179].w, fma(_2136, cbSceneParam._m0[_2179].z, fma(_2132, cbSceneParam._m0[_2179].y, _2128 * cbSceneParam._m0[_2179].x)));
        float _2218 = fma(_2140, cbSceneParam._m0[_2195].w, fma(_2136, cbSceneParam._m0[_2195].z, fma(_2132, cbSceneParam._m0[_2195].y, _2128 * cbSceneParam._m0[_2195].x)));
        float _2223 = cbSceneParam._m0[33u].z * _2218;
        float _2225 = cbSceneParam._m0[33u].w * _2218;
        float _2228 = fma(_2140, cbSceneParam._m0[_2187].w, fma(_2136, cbSceneParam._m0[_2187].z, fma(_2132, cbSceneParam._m0[_2187].y, _2128 * cbSceneParam._m0[_2187].x))) / _2218;
        float _2276 = (cbSceneParam._m0[33u].x - sqrt(((_2142 * _2142) + (_2141 * _2141)) + (_2143 * _2143))) * cbSceneParam._m0[33u].y;
        float _4646 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2283 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2223 + _2206) / _2218, (_2225 + _2210) / _2218), _2228), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2225 + _2206) / _2218, (_2210 - _2223) / _2218), _2228), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2206 - _2223) / _2218, (_2210 - _2225) / _2218), _2228), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2206 - _2225) / _2218, (_2223 + _2210) / _2218), _2228), 0.0)).x), vec4(0.25)));
        _2290 = 1.0 - (_2283 * cbSceneParam._m0[34u].x);
        _2291 = 1.0 - (_2283 * cbSceneParam._m0[34u].y);
        _2292 = 1.0 - (_2283 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2290 = 1.0;
        _2291 = 1.0;
        _2292 = 1.0;
    }
    float _2356;
    float _2358;
    float _2360;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2344 = fma(_2140, cbSceneParam._m0[63u].w, fma(_2136, cbSceneParam._m0[63u].z, fma(_2132, cbSceneParam._m0[63u].y, _2128 * cbSceneParam._m0[63u].x)));
        float _2345 = fma(_2140, cbSceneParam._m0[60u].w, fma(_2136, cbSceneParam._m0[60u].z, fma(_2132, cbSceneParam._m0[60u].y, _2128 * cbSceneParam._m0[60u].x))) / _2344;
        float _2346 = fma(_2140, cbSceneParam._m0[61u].w, fma(_2136, cbSceneParam._m0[61u].z, fma(_2132, cbSceneParam._m0[61u].y, _2128 * cbSceneParam._m0[61u].x))) / _2344;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2345 >= cbSceneParam._m0[64u].x) && (_2346 >= cbSceneParam._m0[64u].y)) && (_2345 <= cbSceneParam._m0[64u].z)) && (_2346 <= cbSceneParam._m0[64u].w))
        {
            float _2484 = fma(_2140, cbSceneParam._m0[62u].w, fma(_2136, cbSceneParam._m0[62u].z, fma(_2132, cbSceneParam._m0[62u].y, _2128 * cbSceneParam._m0[62u].x))) / _2344;
            float _2488 = isnan(cbSceneParam._m0[41u].w) ? _2484 : (isnan(_2484) ? cbSceneParam._m0[41u].w : max(_2484, cbSceneParam._m0[41u].w));
            float _2531 = (cbSceneParam._m0[33u].x - sqrt(((_2142 * _2142) + (_2141 * _2141)) + (_2143 * _2143))) * cbSceneParam._m0[33u].y;
            float _4662 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
            float _2538 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2345, cbSceneParam._m0[33u].w + _2346), _2488), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2345, _2346 - cbSceneParam._m0[33u].z), _2488), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2345 - cbSceneParam._m0[33u].z, _2346 - cbSceneParam._m0[33u].w), _2488), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2345 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2346), _2488), 0.0)).x), vec4(0.25)));
            float _2542 = 1.0 - (_2538 * cbSceneParam._m0[34u].x);
            float _2543 = 1.0 - (_2538 * cbSceneParam._m0[34u].y);
            float _2544 = 1.0 - (_2538 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2544) ? _2292 : (isnan(_2292) ? _2544 : min(_2292, _2544));
            frontier_phi_34_33_ladder_1 = isnan(_2543) ? _2291 : (isnan(_2291) ? _2543 : min(_2291, _2543));
            frontier_phi_34_33_ladder_2 = isnan(_2542) ? _2290 : (isnan(_2290) ? _2542 : min(_2290, _2542));
        }
        else
        {
            frontier_phi_34_33_ladder = _2292;
            frontier_phi_34_33_ladder_1 = _2291;
            frontier_phi_34_33_ladder_2 = _2290;
        }
        _2356 = frontier_phi_34_33_ladder_2;
        _2358 = frontier_phi_34_33_ladder_1;
        _2360 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2356 = _2290;
        _2358 = _2291;
        _2360 = _2292;
    }
    uvec4 _2365 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2367 = _2365.x * 14u;
    uint _2368 = _2367 + 13u;
    float _2375 = _1065 + (-1.0);
    float _2380 = (cbLight._m0[_2368].x * _2375) + 1.0;
    float _2381 = (cbLight._m0[_2368].y * _2375) + 1.0;
    float _2382 = (cbLight._m0[_2368].z * _2375) + 1.0;
    float _2383 = (cbLight._m0[_2368].w * _2375) + 1.0;
    uint _2384 = _2367 + 5u;
    float _2390 = isnan(1.0) ? _2381 : (isnan(_2381) ? 1.0 : min(_2381, 1.0));
    uint _2394 = _2367 + 4u;
    float _2403 = isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0));
    uint _2407 = _2367 | 1u;
    float _2418 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_900, _901, _902));
    float _2421 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_900, _901, _902));
    float _4698 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _4709 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2426 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * 0.3183098733425140380859375;
    float _2428 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * 0.3183098733425140380859375;
    float _2435 = ((cbLight._m0[_2384].x * _2390) * _2428) + (((cbLight._m0[_2394].x * _2356) * _2403) * _2426);
    float _2436 = ((_2390 * cbLight._m0[_2384].y) * _2428) + (((cbLight._m0[_2394].y * _2358) * _2403) * _2426);
    float _2437 = ((_2390 * cbLight._m0[_2384].z) * _2428) + (((cbLight._m0[_2394].z * _2360) * _2403) * _2426);
    uvec4 _2441 = floatBitsToUint(cbLight._m0[_2367 + 12u]);
    bool _2443 = _2441.x == 0u;
    float _2545;
    float _2547;
    float _2549;
    if (_2443)
    {
        _2545 = _2435;
        _2547 = _2436;
        _2549 = _2437;
    }
    else
    {
        uint _2553 = _2367 + 6u;
        float _2569 = (dot(vec3(cbLight._m0[_2367 + 2u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2570 = _2569 * _2569;
        float _4720 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2571 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2572 = isnan(1.0) ? _2382 : (isnan(_2382) ? 1.0 : min(_2382, 1.0));
        _2545 = (((cbLight._m0[_2553].x * 0.3183098733425140380859375) * _2571) * _2572) + _2435;
        _2547 = (((cbLight._m0[_2553].y * 0.3183098733425140380859375) * _2571) * _2572) + _2436;
        _2549 = (((cbLight._m0[_2553].z * 0.3183098733425140380859375) * _2571) * _2572) + _2437;
    }
    bool _2552 = _2441.y == 0u;
    float _2607;
    float _2609;
    float _2611;
    if (_2552)
    {
        _2607 = _2545;
        _2609 = _2547;
        _2611 = _2549;
    }
    else
    {
        uint _2780 = _2367 + 7u;
        float _2796 = (dot(vec3(cbLight._m0[_2367 + 3u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2797 = _2796 * _2796;
        float _4736 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2798 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2799 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
        _2607 = (((cbLight._m0[_2780].x * 0.3183098733425140380859375) * _2798) * _2799) + _2545;
        _2609 = (((cbLight._m0[_2780].y * 0.3183098733425140380859375) * _2798) * _2799) + _2547;
        _2611 = (((cbLight._m0[_2780].z * 0.3183098733425140380859375) * _2798) * _2799) + _2549;
    }
    uint _2614 = _2367 + 8u;
    float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _903) * 0.949999988079071044921875);
    float _2628 = _2627 * _2627;
    float _2629 = cbLight._m0[_2367].x + _979;
    float _2630 = cbLight._m0[_2367].y + _980;
    float _2631 = cbLight._m0[_2367].z + _981;
    float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
    float _2636 = _2635 * _2629;
    float _2637 = _2635 * _2630;
    float _2638 = _2635 * _2631;
    float _2639 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2367].xyz));
    float _4752 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
    float _4763 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _2643 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
    float _2644 = dot(vec3(_900, _901, _902), vec3(_2636, _2637, _2638));
    float _4774 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2647 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    float _2648 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2636, _2637, _2638));
    float _4785 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2652 = _2628 * _2628;
    float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
    float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) * 5.0);
    float _2665 = 0.959999978542327880859375 - _1046;
    float _2667 = 0.959999978542327880859375 - _1047;
    float _2668 = 0.959999978542327880859375 - _1048;
    float _2675 = 1.0 - _2628;
    float _2686 = (0.5 / (((_2643 * ((_2642 * _2675) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _2675) + _2628) * _2642))) * _2642;
    float _4796 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2688 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
    uint _2702 = _2367 + 9u;
    float _2713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _903) * 0.949999988079071044921875);
    float _2714 = _2713 * _2713;
    float _2715 = cbLight._m0[_2407].x + _979;
    float _2716 = cbLight._m0[_2407].y + _980;
    float _2717 = cbLight._m0[_2407].z + _981;
    float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
    float _2722 = _2721 * _2715;
    float _2723 = _2721 * _2716;
    float _2724 = _2721 * _2717;
    float _2725 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2407].xyz));
    float _4807 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2728 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
    float _2729 = dot(vec3(_900, _901, _902), vec3(_2722, _2723, _2724));
    float _4818 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2732 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
    float _2733 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2722, _2723, _2724));
    float _4829 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2737 = _2714 * _2714;
    float _2741 = ((_2732 * _2732) * (_2737 + (-1.0))) + 1.0;
    float _2748 = exp2(log2(1.0 - (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) * 5.0);
    float _2755 = 1.0 - _2714;
    float _2765 = (0.5 / (((_2643 * ((_2728 * _2755) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _2755) + _2714) * _2728))) * _2728;
    float _4840 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
    float _2767 = (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2737 / ((_2741 * _2741) * 3.141590118408203125));
    float _2777 = (((((_2748 * _2665) + _1049) * cbLight._m0[_2702].x) * _2767) * _2390) + ((((cbLight._m0[_2614].x * _2356) * ((_2664 * _2665) + _1049)) * _2688) * _2403);
    float _2778 = (((((_2748 * _2667) + _1051) * cbLight._m0[_2702].y) * _2767) * _2390) + ((((cbLight._m0[_2614].y * _2358) * ((_2664 * _2667) + _1051)) * _2688) * _2403);
    float _2779 = (((((_2748 * _2668) + _1052) * cbLight._m0[_2702].z) * _2767) * _2390) + ((((cbLight._m0[_2614].z * _2360) * ((_2664 * _2668) + _1052)) * _2688) * _2403);
    float _2835;
    float _2837;
    float _2839;
    if (_2443)
    {
        _2835 = _2777;
        _2837 = _2778;
        _2839 = _2779;
    }
    else
    {
        uint _2841 = _2367 + 2u;
        uint _2845 = _2367 + 10u;
        float _2859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2841].w)) * _903) * 0.949999988079071044921875);
        float _2860 = _2859 * _2859;
        float _2861 = cbLight._m0[_2841].x + _979;
        float _2862 = cbLight._m0[_2841].y + _980;
        float _2863 = cbLight._m0[_2841].z + _981;
        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
        float _2868 = _2867 * _2861;
        float _2869 = _2867 * _2862;
        float _2870 = _2867 * _2863;
        float _2871 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2841].xyz));
        float _4851 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2874 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
        float _2875 = dot(vec3(_900, _901, _902), vec3(_2868, _2869, _2870));
        float _4862 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2878 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2879 = dot(vec3(cbLight._m0[_2841].xyz), vec3(_2868, _2869, _2870));
        float _4873 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        float _2883 = _2860 * _2860;
        float _2887 = ((_2878 * _2878) * (_2883 + (-1.0))) + 1.0;
        float _2894 = exp2(log2(1.0 - (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) * 5.0);
        float _2901 = 1.0 - _2860;
        float _2911 = (0.5 / (((_2643 * ((_2874 * _2901) + _2860)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _2901) + _2860) * _2874))) * _2874;
        float _4884 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2913 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2883 / ((_2887 * _2887) * 3.141590118408203125));
        float _2914 = isnan(1.0) ? _2382 : (isnan(_2382) ? 1.0 : min(_2382, 1.0));
        _2835 = (((((_2894 * _2665) + _1049) * cbLight._m0[_2845].x) * _2913) * _2914) + _2777;
        _2837 = (((((_2894 * _2667) + _1051) * cbLight._m0[_2845].y) * _2913) * _2914) + _2778;
        _2839 = (((((_2894 * _2668) + _1052) * cbLight._m0[_2845].z) * _2913) * _2914) + _2779;
    }
    float _2945;
    float _2947;
    float _2949;
    if (_2552)
    {
        _2945 = _2835;
        _2947 = _2837;
        _2949 = _2839;
    }
    else
    {
        uint _2956 = _2367 + 3u;
        uint _2960 = _2367 + 11u;
        float _2974 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2956].w)) * _903) * 0.949999988079071044921875);
        float _2975 = _2974 * _2974;
        float _2976 = cbLight._m0[_2956].x + _979;
        float _2977 = cbLight._m0[_2956].y + _980;
        float _2978 = cbLight._m0[_2956].z + _981;
        float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
        float _2983 = _2982 * _2976;
        float _2984 = _2982 * _2977;
        float _2985 = _2982 * _2978;
        float _2986 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2956].xyz));
        float _4900 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        float _2989 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
        float _2990 = dot(vec3(_900, _901, _902), vec3(_2983, _2984, _2985));
        float _4911 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        float _2993 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
        float _2994 = dot(vec3(cbLight._m0[_2956].xyz), vec3(_2983, _2984, _2985));
        float _4922 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        float _2998 = _2975 * _2975;
        float _3002 = ((_2993 * _2993) * (_2998 + (-1.0))) + 1.0;
        float _3009 = exp2(log2(1.0 - (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) * 5.0);
        float _3016 = 1.0 - _2975;
        float _3026 = (0.5 / (((_2643 * ((_2989 * _3016) + _2975)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _3016) + _2975) * _2989))) * _2989;
        float _4933 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
        float _3028 = (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2998 / ((_3002 * _3002) * 3.141590118408203125));
        float _3029 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
        _2945 = (((((_3009 * _2665) + _1049) * cbLight._m0[_2960].x) * _3028) * _3029) + _2835;
        _2947 = (((((_3009 * _2667) + _1051) * cbLight._m0[_2960].y) * _3028) * _3029) + _2837;
        _2949 = (((((_3009 * _2668) + _1052) * cbLight._m0[_2960].z) * _3028) * _3029) + _2839;
    }
    float _3095;
    float _3097;
    float _3099;
    float _3101;
    float _3103;
    float _3105;
    if (_2365.y == 0u)
    {
        uvec4 _3050 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3051 = _3050.x;
        uint _3062 = uint((float(_3050.y) * floor(float(uint(cbSceneParam._m0[85u].y * _988) / _3051))) + floor(float(uint(cbSceneParam._m0[85u].x * _987) / _3051)));
        float _3072 = (log2(_2143 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3073 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
        uint _3076 = uint(isnan(14.0) ? _3073 : (isnan(_3073) ? 14.0 : min(_3073, 14.0)));
        uvec4 _3081 = texelFetch(g_lightClusterGridBuffer, int(((_3076 << 2u) + (_3062 << 6u)) >> 2u));
        uint _3082 = _3081.x;
        uint _3083 = _3050.z;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        if (((((1u << ((_3083 >> 4u) & 15u)) + 4294967295u) & _3082) == 0u) || ((_3083 & 240u) == 0u))
        {
            _3162 = 0.0;
            _3164 = 0.0;
            _3166 = 0.0;
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
        }
        else
        {
            float _3163;
            float _3165;
            float _3167;
            float _3169;
            float _3171;
            float _3173;
            float _3306 = 0.0;
            float _3307 = 0.0;
            float _3308 = 0.0;
            float _3309 = 0.0;
            float _3310 = 0.0;
            float _3311 = 0.0;
            uint _3312 = 0u;
            uint _3321;
            bool _3322;
            for (;;)
            {
                _3321 = texelFetch(g_lightClassification, int((((_3076 << 5u) + (_3062 << 9u)) + (_3312 << 2u)) >> 2u)).x;
                _3322 = _3321 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3322)
                {
                    frontier_phi_66_pred = _3311;
                    frontier_phi_66_pred_1 = _3310;
                    frontier_phi_66_pred_2 = _3309;
                    frontier_phi_66_pred_3 = _3308;
                    frontier_phi_66_pred_4 = _3307;
                    frontier_phi_66_pred_5 = _3306;
                }
                else
                {
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    float _3435;
                    uint _3436;
                    _3430 = _3306;
                    _3431 = _3307;
                    _3432 = _3308;
                    _3433 = _3309;
                    _3434 = _3310;
                    _3435 = _3311;
                    _3436 = _3321;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    for (;;)
                    {
                        uint _3440 = uint(findLSB(_3436)) + (_3312 << 5u);
                        uint _3437 = (_3436 + 4294967295u) & _3436;
                        uint _3442 = _3440 * 48u;
                        vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3442)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 3u)).x));
                        uint _3462 = (_3440 * 48u) + 4u;
                        vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3462)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 3u)).x));
                        uint _3481 = (_3440 * 48u) + 8u;
                        vec3 _3492 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3481)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 2u)).x));
                        float _3496 = _3456.x - _2141;
                        float _3497 = _3456.y - _2142;
                        float _3498 = _3456.z - _2143;
                        float _3499 = dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498));
                        float _3502 = inversesqrt(_3499);
                        float _3503 = _3502 * _3496;
                        float _3504 = _3502 * _3497;
                        float _3505 = _3502 * _3498;
                        float _3506 = dot(vec3(_1006, _1009, _1012), vec3(_3503, _3504, _3505));
                        float _3511 = 1.0 - (_3499 * _3456.w);
                        float _4959 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3513 = sqrt(_3499) * _3475.w;
                        float _3516 = 1.39999997615814208984375 / (_3513 + 1.39999997615814208984375);
                        float _3517 = _3516 * _3516;
                        float _3520 = ((1.0 - _3517) * _3506) + _3517;
                        float _3523 = _3513 * _3513;
                        float _3527 = ((isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0))) * _3512) / ((_3523 * 0.699999988079071044921875) + 1.0);
                        float _3531 = (-0.0) - _2141;
                        float _3532 = (-0.0) - _2142;
                        float _3533 = (-0.0) - _2143;
                        float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                        float _3538 = _3537 * _3531;
                        float _3539 = _3537 * _3532;
                        float _3540 = _3537 * _3533;
                        float _3547 = exp2(log2(1.0 / ((_3523 * 3.5) + 5.0)) * 0.25);
                        float _3548 = 1.0 - _1081;
                        float _3555 = sqrt(1.0 - ((1.0 - (_3548 * _3548)) * (1.0 - (_3547 * _3547))));
                        float _3556 = _3555 * _3555;
                        float _3557 = _3556 * _3556;
                        float _3558 = _3538 + _3503;
                        float _3559 = _3539 + _3504;
                        float _3560 = _3540 + _3505;
                        float _3564 = inversesqrt(dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560)));
                        float _3568 = dot(vec3(_1006, _1009, _1012), vec3(_3538, _3539, _3540));
                        float _4975 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3571 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                        float _3572 = dot(vec3(_1006, _1009, _1012), vec3(_3564 * _3558, _3564 * _3559, _3564 * _3560));
                        float _4986 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3575 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                        float _3579 = ((_3575 * _3575) * (_3557 + (-1.0))) + 1.0;
                        float _3580 = _3516 * _3556;
                        float _3581 = _3580 * _3580;
                        float _3584 = ((1.0 - _3581) * _3506) + _3581;
                        float _4997 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3585 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                        float _3586 = 1.0 - _3556;
                        float _3596 = (0.5 / (((_3585 * ((_3571 * _3586) + _3556)) + 9.9999999392252902907785028219223e-09) + (((_3585 * _3586) + _3556) * _3571))) * _3585;
                        float _5008 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3607 = (((_3557 * 3.1415927410125732421875) * (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) / ((_3579 * _3579) * ((_3523 * 2.1991131305694580078125) + 3.141590118408203125))) * _3512;
                        _3365 = (_3527 * _3475.x) + _3433;
                        _3366 = (_3527 * _3475.y) + _3434;
                        _3367 = (_3527 * _3475.z) + _3435;
                        _3362 = (_3607 * _3492.x) + _3430;
                        _3363 = (_3607 * _3492.y) + _3431;
                        _3364 = (_3607 * _3492.z) + _3432;
                        if (_3437 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3430 = _3362;
                            _3431 = _3363;
                            _3432 = _3364;
                            _3433 = _3365;
                            _3434 = _3366;
                            _3435 = _3367;
                            _3436 = _3437;
                        }
                    }
                    frontier_phi_66_pred = _3367;
                    frontier_phi_66_pred_1 = _3366;
                    frontier_phi_66_pred_2 = _3365;
                    frontier_phi_66_pred_3 = _3364;
                    frontier_phi_66_pred_4 = _3363;
                    frontier_phi_66_pred_5 = _3362;
                }
                _3173 = frontier_phi_66_pred;
                _3171 = frontier_phi_66_pred_1;
                _3169 = frontier_phi_66_pred_2;
                _3167 = frontier_phi_66_pred_3;
                _3165 = frontier_phi_66_pred_4;
                _3163 = frontier_phi_66_pred_5;
                uint _3313 = _3312 + 1u;
                if (_3313 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3306 = _3163;
                    _3307 = _3165;
                    _3308 = _3167;
                    _3309 = _3169;
                    _3310 = _3171;
                    _3311 = _3173;
                    _3312 = _3313;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3162 = _3163;
            _3164 = _3165;
            _3166 = _3167;
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
        }
        uvec4 _3176 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3177 = _3176.z;
        uint _3179 = (_3177 >> 8u) & 15u;
        float _3274;
        float _3276;
        float _3278;
        float _3280;
        float _3282;
        float _3284;
        if (((4294967295u << _3179) & _3082) == 0u)
        {
            _3274 = _3162;
            _3276 = _3164;
            _3278 = _3166;
            _3280 = _3168;
            _3282 = _3170;
            _3284 = _3172;
        }
        else
        {
            float _3299 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
            float _3300 = _3299 * _2141;
            float _3301 = _3299 * _2142;
            float _3302 = _3299 * _2143;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3179 < ((_3177 >> 12u) & 15u))
            {
                float _3275;
                float _3277;
                float _3279;
                float _3281;
                float _3283;
                float _3285;
                float _3413 = _3162;
                float _3414 = _3164;
                float _3415 = _3166;
                float _3416 = _3168;
                float _3417 = _3170;
                float _3418 = _3172;
                uint _3419 = _3179;
                uint _3428;
                bool _3429;
                for (;;)
                {
                    _3428 = texelFetch(g_lightClassification, int((((_3076 << 5u) + (_3062 << 9u)) + (_3419 << 2u)) >> 2u)).x;
                    _3429 = _3428 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3429)
                    {
                        frontier_phi_72_pred = _3418;
                        frontier_phi_72_pred_1 = _3417;
                        frontier_phi_72_pred_2 = _3416;
                        frontier_phi_72_pred_3 = _3415;
                        frontier_phi_72_pred_4 = _3414;
                        frontier_phi_72_pred_5 = _3413;
                    }
                    else
                    {
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3905;
                        float _3906;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3625 = _3413;
                        float _3626 = _3414;
                        float _3627 = _3415;
                        float _3628 = _3416;
                        float _3629 = _3417;
                        float _3630 = _3418;
                        uint _3631 = _3428;
                        uint _3632;
                        vec4 _3657;
                        float _3658;
                        vec4 _3673;
                        vec3 _3685;
                        vec4 _3700;
                        vec4 _3715;
                        float _3761;
                        bool _3762;
                        for (;;)
                        {
                            uint _3642 = ((_3419 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3631));
                            _3632 = (_3631 + 4294967295u) & _3631;
                            uint _3644 = _3642 * 40u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            _3658 = _3657.w;
                            uint _3660 = (_3642 * 40u) + 4u;
                            _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            uint _3675 = (_3642 * 40u) + 8u;
                            _3685 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x));
                            uint _3687 = (_3642 * 40u) + 16u;
                            _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3702 = (_3642 * 40u) + 20u;
                            _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3717 = (_3642 * 40u) + 24u;
                            vec4 _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            uint _3736 = (_3642 * 40u) + 28u;
                            vec4 _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            _3761 = fma(_2143, _3749.z, fma(_2142, _3749.y, _3749.x * _2141)) + _3749.w;
                            _3762 = !((fma(_2143, _3730.z, fma(_2142, _3730.y, _3730.x * _2141)) + _3730.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3762)
                            {
                                float _3789 = _3657.x - _2141;
                                float _3790 = _3657.y - _2142;
                                float _3791 = _3657.z - _2143;
                                float _3792 = dot(vec3(_3789, _3790, _3791), vec3(_3789, _3790, _3791));
                                float _3795 = inversesqrt(_3792);
                                float _3796 = _3795 * _3789;
                                float _3797 = _3795 * _3790;
                                float _3798 = _3795 * _3791;
                                float _3802 = 1.0 - (_3792 / (_3658 * _3658));
                                float _5019 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3807 = sqrt(_3792) * _3673.w;
                                float _3809 = 1.39999997615814208984375 / (_3807 + 1.39999997615814208984375);
                                float _3810 = _3809 * _3809;
                                float _3813 = ((1.0 - _3810) * dot(vec3(_3796, _3797, _3798), vec3(_1006, _1009, _1012))) + _3810;
                                float _3816 = _3807 * _3807;
                                float _3820 = (fma(_2143, _3700.z, fma(_2142, _3700.y, _3700.x * _2141)) + _3700.w) / _3761;
                                float _3821 = (fma(_2143, _3715.z, fma(_2142, _3715.y, _3715.x * _2141)) + _3715.w) / _3761;
                                float _3825 = 1.0 - dot(vec2(_3820, _3821), vec2(_3820, _3821));
                                float _5035 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3826 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                                float _3827 = _3826 * (((isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0))) * _3803) / ((_3816 * 0.699999988079071044921875) + 1.0));
                                float _3839 = exp2(log2(1.0 / ((_3816 * 3.5) + 5.0)) * 0.25);
                                float _3840 = 1.0 - _1081;
                                float _3847 = sqrt(1.0 - ((1.0 - (_3840 * _3840)) * (1.0 - (_3839 * _3839))));
                                float _3848 = _3847 * _3847;
                                float _3849 = _3848 * _3848;
                                float _3850 = _3796 - _3300;
                                float _3851 = _3797 - _3301;
                                float _3852 = _3798 - _3302;
                                float _3856 = inversesqrt(dot(vec3(_3850, _3851, _3852), vec3(_3850, _3851, _3852)));
                                float _3860 = dot(vec3(_1006, _1009, _1012), vec3((-0.0) - _3300, (-0.0) - _3301, (-0.0) - _3302));
                                float _5046 = isnan(0.0) ? _3860 : (isnan(_3860) ? 0.0 : max(_3860, 0.0));
                                float _3863 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                                float _3864 = dot(vec3(_1006, _1009, _1012), vec3(_3856 * _3850, _3856 * _3851, _3856 * _3852));
                                float _5057 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3867 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                                float _3871 = ((_3867 * _3867) * (_3849 + (-1.0))) + 1.0;
                                float _3872 = _3809 * _3848;
                                float _3873 = _3872 * _3872;
                                float _3879 = ((1.0 - _3873) * dot(vec3(_1006, _1009, _1012), vec3(_3796, _3797, _3798))) + _3873;
                                float _5068 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3880 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                                float _3881 = 1.0 - _3848;
                                float _3891 = (0.5 / (((_3880 * ((_3863 * _3881) + _3848)) + 9.9999999392252902907785028219223e-09) + (((_3880 * _3881) + _3848) * _3863))) * _3880;
                                float _5079 = isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0));
                                float _3901 = (_3826 * _3803) * (((_3849 * 3.1415927410125732421875) * (isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0)))) / ((_3871 * _3871) * ((_3816 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3827 * _3673.y;
                                frontier_phi_78_pred_1 = _3827 * _3673.x;
                                frontier_phi_78_pred_2 = _3901 * _3685.z;
                                frontier_phi_78_pred_3 = _3901 * _3685.y;
                                frontier_phi_78_pred_4 = _3901 * _3685.x;
                                frontier_phi_78_pred_5 = _3827 * _3673.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3909 = frontier_phi_78_pred;
                            _3908 = frontier_phi_78_pred_1;
                            _3907 = frontier_phi_78_pred_2;
                            _3906 = frontier_phi_78_pred_3;
                            _3905 = frontier_phi_78_pred_4;
                            _3910 = frontier_phi_78_pred_5;
                            _3615 = _3908 + _3628;
                            _3616 = _3909 + _3629;
                            _3617 = _3910 + _3630;
                            _3612 = _3905 + _3625;
                            _3613 = _3906 + _3626;
                            _3614 = _3907 + _3627;
                            if (_3632 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3632;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3617;
                        frontier_phi_72_pred_1 = _3616;
                        frontier_phi_72_pred_2 = _3615;
                        frontier_phi_72_pred_3 = _3614;
                        frontier_phi_72_pred_4 = _3613;
                        frontier_phi_72_pred_5 = _3612;
                    }
                    _3285 = frontier_phi_72_pred;
                    _3283 = frontier_phi_72_pred_1;
                    _3281 = frontier_phi_72_pred_2;
                    _3279 = frontier_phi_72_pred_3;
                    _3277 = frontier_phi_72_pred_4;
                    _3275 = frontier_phi_72_pred_5;
                    uint _3420 = _3419 + 1u;
                    if (_3420 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3413 = _3275;
                        _3414 = _3277;
                        _3415 = _3279;
                        _3416 = _3281;
                        _3417 = _3283;
                        _3418 = _3285;
                        _3419 = _3420;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3285;
                frontier_phi_60_61_ladder_1 = _3283;
                frontier_phi_60_61_ladder_2 = _3279;
                frontier_phi_60_61_ladder_3 = _3277;
                frontier_phi_60_61_ladder_4 = _3275;
                frontier_phi_60_61_ladder_5 = _3281;
            }
            else
            {
                frontier_phi_60_61_ladder = _3172;
                frontier_phi_60_61_ladder_1 = _3170;
                frontier_phi_60_61_ladder_2 = _3166;
                frontier_phi_60_61_ladder_3 = _3164;
                frontier_phi_60_61_ladder_4 = _3162;
                frontier_phi_60_61_ladder_5 = _3168;
            }
            _3274 = frontier_phi_60_61_ladder_4;
            _3276 = frontier_phi_60_61_ladder_3;
            _3278 = frontier_phi_60_61_ladder_2;
            _3280 = frontier_phi_60_61_ladder_5;
            _3282 = frontier_phi_60_61_ladder_1;
            _3284 = frontier_phi_60_61_ladder;
        }
        float _3289 = isnan(1.0) ? _1065 : (isnan(_1065) ? 1.0 : min(_1065, 1.0));
        _3095 = (_3289 * _3280) + _2607;
        _3097 = (_3289 * _3282) + _2609;
        _3099 = (_3289 * _3284) + _2611;
        _3101 = ((_3274 * _1049) * _3289) + _2945;
        _3103 = ((_3276 * _1051) * _3289) + _2947;
        _3105 = ((_3278 * _1052) * _3289) + _2949;
    }
    else
    {
        _3095 = _2607;
        _3097 = _2609;
        _3099 = _2611;
        _3101 = _2945;
        _3103 = _2947;
        _3105 = _2949;
    }
    float _5095 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _5106 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _5117 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    uint _3125 = _283 + 6u;
    float _3133 = _987 / cbSceneParam._m0[86u].x;
    float _3134 = _988 / cbSceneParam._m0[86u].y;
    vec4 _3148 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3133, _3134, (log2((isnan(cbSceneParam._m0[77u].w) ? _922 : (isnan(_922) ? cbSceneParam._m0[77u].w : min(_922, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3150 = _3148.x;
    float _3151 = _3148.y;
    float _3152 = _3148.z;
    float _3153 = _3148.w;
    float _3224;
    float _3226;
    float _3228;
    float _3230;
    if (_922 > cbSceneParam._m0[78u].w)
    {
        float _3187 = isnan(_922) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _922 : min(cbSceneParam._m0[80u].w, _922));
        float _3188 = _3187 / _922;
        float _3199 = _3188 * _972;
        float _3200 = _973 * _3188;
        float _3201 = (-0.0) - _3200;
        float _3202 = _3188 * _974;
        float _3204 = (cbSceneParam._m0[77u].w * _3201) / _3187;
        float _3205 = _3204 + cbSceneParam._m0[79u].w;
        float _3206 = cbSceneParam._m0[79u].w - _3200;
        float _3212 = sqrt(((_3199 * _3199) + (_3200 * _3200)) + (_3202 * _3202));
        float _3215 = (1.0 - (cbSceneParam._m0[77u].w / _3187)) * _3212;
        float _3220 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3222 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3375;
        if (abs((_3201 - _3204) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3375 = ((((_3205 > 0.0) ? exp2(_3220 * _3205) : (2.0 - exp2(_3222 * _3205))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3215;
        }
        else
        {
            float _3335 = 1.0 / cbSceneParam._m0[80u].x;
            float _3336 = isnan(_3206) ? _3205 : (isnan(_3205) ? _3206 : max(_3205, _3206));
            float _3337 = isnan(_3206) ? _3205 : (isnan(_3205) ? _3206 : min(_3205, _3206));
            float _3346 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : min(_3336, 0.0));
            float _3347 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : min(_3337, 0.0));
            _3375 = ((abs(_3212 / _3201) * cbSceneParam._m0[80u].y) * ((((_3346 - _3347) * 2.0) - ((exp2(_3220 * (isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0)))) - exp2(_3220 * (isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0))))) * _3335)) - ((exp2(_3222 * _3346) - exp2(_3222 * _3347)) * _3335))) + (_3215 * cbSceneParam._m0[80u].z);
        }
        vec4 _3377 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3133, _3134, 1.0), 0.0);
        float _3386 = exp2((_3375 * (-1.44269502162933349609375)) * (1.0 - _3377.w));
        float _3387 = log2(_3386);
        float _3403 = log2(_3153);
        _3224 = (exp2(_3403 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3387 * cbSceneParam._m0[78u].x)) * _3377.x) / cbSceneParam._m0[78u].x)) + _3150;
        _3226 = (exp2(_3403 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3387 * cbSceneParam._m0[78u].y)) * _3377.y) / cbSceneParam._m0[78u].y)) + _3151;
        _3228 = (exp2(_3403 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3387 * cbSceneParam._m0[78u].z)) * _3377.z) / cbSceneParam._m0[78u].z)) + _3152;
        _3230 = _3386 * _3153;
    }
    else
    {
        _3224 = _3150;
        _3226 = _3151;
        _3228 = _3152;
        _3230 = _3153;
    }
    float _3242 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3243 = _3242 == 3.0;
    float _3244 = log2(_3230);
    float _3251 = exp2(_3244 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0))) * (_3095 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1065))) + ((_3101 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1873)) * cbPerFrame._m0[3u].x));
    float _3252 = exp2(_3244 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0))) * (_3097 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1065))) + ((_3103 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1873)) * cbPerFrame._m0[3u].x));
    float _3253 = exp2(_3244 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0))) * (_3099 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1065))) + ((_3105 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1873)) * cbPerFrame._m0[3u].x));
    float _3262 = (_3242 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3262 * (_3243 ? _3251 : (_3251 + (cbSceneParam._m0[72u].w * _3224)));
    SV_Target.y = _3262 * (_3243 ? _3252 : (_3252 + (cbSceneParam._m0[72u].w * _3226)));
    SV_Target.z = _3262 * (_3243 ? _3253 : (_3253 + (cbSceneParam._m0[72u].w * _3228)));
    SV_Target.w = cbInstanceData._m0[_3125].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3125].w;
}


