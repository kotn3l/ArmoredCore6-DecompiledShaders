#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1386;
float _3765;
float _3766;
float _3767;
float _3768;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3777 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _457 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _459 = _457.x;
    float _460 = _457.y;
    float _461 = _457.z;
    float _470 = ((_440.z - _461) * _392) + _461;
    float _473 = ((((_440.x - _459) * _392) + _459) * 2.0) + (-1.0);
    float _475 = ((((_440.y - _460) * _392) + _460) * 2.0) + (-1.0);
    float _476 = dot(vec2(_473, _475), vec2(_473, _475));
    float _3788 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _481 = sqrt(1.0 - (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))));
    float _484 = fma(_481, _243, fma(_475, _250, _473 * _236));
    float _487 = fma(_481, _244, fma(_475, _251, _473 * _237));
    float _490 = fma(_481, _245, fma(_475, _252, _473 * _238));
    float _494 = inversesqrt(dot(vec3(_484, _487, _490), vec3(_484, _487, _490)));
    vec4 _510 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _538 = _536.x;
    float _539 = 1.0 - _538;
    float _543 = ((_538 - _539) * cbMtdParam._m0[24u].z) + _539;
    float _545 = (cbMtdParam._m0[19u].x + dot(vec4(_494 * _484, _494 * _487, _494 * _490, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_543 * cbMtdParam._m0[21u].z);
    float _3799 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _548 = (-0.0) - cbMtdParam._m0[24u].x;
    float _550 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _550 : (isnan(_550) ? 1.0 : min(_550, 1.0));
    float _558 = _546 - ((_546 * TEXCOORD_8.x) * _551);
    float _559 = _546 - ((_546 * TEXCOORD_8.y) * _551);
    float _560 = _546 - ((_546 * TEXCOORD_8.z) * _551);
    float _567 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _571 = ((isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : min(_567, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _579 = (_571 - (((_543 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _571))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3830 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _584 = ((_558 * ((_420.x * cbMtdParam._m0[18u].x) - _399)) * _580) + _399;
    float _585 = ((_559 * ((_420.y * cbMtdParam._m0[18u].y) - _400)) * _580) + _400;
    float _586 = ((_560 * ((_420.z * cbMtdParam._m0[18u].z) - _401)) * _580) + _401;
    vec4 _598 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _600 = _598.x;
    float _601 = 1.0 - _600;
    float _628 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_600 - _601) * cbMtdParam._m0[24u].w) + _601) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3841 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _637 = ((((cbMtdParam._m0[10u].x - _584) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _629) + _584;
    float _638 = ((((cbMtdParam._m0[10u].y - _585) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _629) + _585;
    float _639 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _586)) * _629) + _586;
    vec4 _665 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _667 = _665.x;
    float _685 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _667) * _392) + _667;
    float _689 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _685) * cbMtdParam._m0[19u].z) + _685;
    float _692 = _689 - ((_580 * _558) * _689);
    float _694 = _692 - (_692 * _629);
    vec4 _708 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _715 = (_708.x * 2.0) + (-1.0);
    float _716 = (_708.y * 2.0) + (-1.0);
    float _717 = dot(vec2(_715, _716), vec2(_715, _716));
    float _3852 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _726 = (((_708.z - _470) * _558) * _580) + _470;
    float _729 = ((cbMtdParam._m0[23u].y - _726) * _629) + _726;
    vec4 _748 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _754 = (_748.x * 2.0) + (-1.0);
    float _755 = (_748.y * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _3863 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _776 = (((cbMtdParam._m0[21u].x * _473) + ((_715 - _473) * _558)) * _580) + _473;
    float _777 = (((cbMtdParam._m0[21u].x * _475) + ((_716 - _475) * _559)) * _580) + _475;
    float _778 = (((sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) - _481) * _560) * _580) + _481;
    float _789 = (((_754 - _776) + (_776 * cbMtdParam._m0[22u].z)) * _629) + _776;
    float _790 = (((_755 - _777) + (_777 * cbMtdParam._m0[22u].z)) * _629) + _777;
    float _791 = ((sqrt(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) - _778) * _629) + _778;
    float _793 = cbMtdParam._m0[22u].x + _510.w;
    float _796 = fma(_791, _243, fma(_790, _250, _789 * _236));
    float _799 = fma(_791, _244, fma(_790, _251, _789 * _237));
    float _802 = fma(_791, _245, fma(_790, _252, _789 * _238));
    float _806 = inversesqrt(dot(vec3(_796, _799, _802), vec3(_796, _799, _802)));
    float _807 = _806 * _796;
    float _808 = _806 * _799;
    float _809 = _806 * _802;
    float _3874 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _810 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _3896 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3907 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3918 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3929 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _815 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _829 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _879 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _869);
    float _880 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _869);
    float _881 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _869);
    float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
    float _886 = _879 * _885;
    float _887 = _880 * _885;
    float _888 = _881 * _885;
    vec4 _893 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _895 = _893.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1067 = sqrt(((_879 * _879) + (_880 * _880)) + (_881 * _881));
        float _1073 = (cbMatDynParam._m0[5u].x * _1067) + cbMatDynParam._m0[5u].y;
        float _3940 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1078 = (cbMatDynParam._m0[5u].z * _1067) + cbMatDynParam._m0[5u].w;
        float _3951 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) - _1074)) + _1074) < ((_895 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _906 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _907 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _925 = fma(_809, cbSceneParam._m0[5u].z, fma(_808, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _807));
    float _928 = fma(_809, cbSceneParam._m0[6u].z, fma(_808, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _807));
    float _931 = fma(_809, cbSceneParam._m0[7u].z, fma(_808, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _807));
    uint _944 = _255 + 9u;
    uint _945 = _944 + uint(cbMatDynParam._m0[0u].w);
    float _951 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_945].x;
    float _952 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_945].y;
    float _953 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_945].z;
    float _3962 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _957 = 1.0 - _815;
    float _958 = _954 * _957;
    float _959 = _955 * _957;
    float _960 = _956 * _957;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _815;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _815;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _815;
    float _968 = _965 + 0.039999999105930328369140625;
    float _970 = _966 + 0.039999999105930328369140625;
    float _971 = _967 + 0.039999999105930328369140625;
    vec4 _980 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _906, cbSceneParam._m0[86u].y * _907));
    float _984 = ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * TEXCOORD_5.w) * _980.x;
    float _985 = dot(vec3(_807, _808, _809), vec3(_886, _887, _888));
    float _988 = _985 * 2.0;
    float _992 = (_988 * _807) - _886;
    float _993 = (_988 * _808) - _887;
    float _994 = (_988 * _809) - _888;
    float _998 = abs(dot(vec3(_886, _887, _888), vec3(_807, _808, _809)));
    float _3995 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1000 = sqrt(_810);
    float _1013 = exp2((_1000 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1000 * 3.0));
    float _1019 = (1.0 - _1013) * ((_1000 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1020 = _1013 * _1000;
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1385;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1110 = fma(_1056, cbModelParam._m0[26u].z, fma(_1052, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048));
        float _1114 = fma(_1056, cbModelParam._m0[27u].z, fma(_1052, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048));
        float _1118 = fma(_1056, cbModelParam._m0[28u].z, fma(_1052, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048));
        float _1143 = _1048 + _807;
        float _1144 = _1052 + _808;
        float _1145 = _1056 + _809;
        float _1155 = fma(_1145, cbModelParam._m0[26u].z, fma(_1144, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1143)) - _1110;
        float _1156 = fma(_1145, cbModelParam._m0[27u].z, fma(_1144, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1143)) - _1114;
        float _1157 = fma(_1145, cbModelParam._m0[28u].z, fma(_1144, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1143)) - _1118;
        float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
        float _1174 = ((_1161 * _1155) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1110 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1161 * _1156) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1114 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1161 * _1157) / cbModelParam._m0[34u].z) + ((((((_1118 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        float _1213 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1179.x + (-0.5));
        float _1215 = _1213 * (_1179.y + (-0.5));
        float _1216 = _1213 * (_1179.z + (-0.5));
        float _1223 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1186.x + (-0.5));
        float _1225 = _1223 * (_1186.y + (-0.5));
        float _1226 = _1223 * (_1186.z + (-0.5));
        float _1233 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1193.x + (-0.5));
        float _1235 = _1233 * (_1193.y + (-0.5));
        float _1236 = _1233 * (_1193.z + (-0.5));
        float _1243 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1200.x + (-0.5));
        float _1245 = _1243 * (_1200.y + (-0.5));
        float _1246 = _1243 * (_1200.z + (-0.5));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = _1214 * 0.5;
        float _1251 = _1224 * 0.5;
        float _1252 = _1234 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1267 = (dot(vec3(_807, _808, _809), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1277 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _4043 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1279 + 1.0))) + _1284) * _1247;
        float _1294 = _1215 * 0.5;
        float _1295 = _1225 * 0.5;
        float _1296 = _1235 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_807, _808, _809), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4076 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1321 + 1.0))) + _1326) * _1248;
        float _1336 = _1216 * 0.5;
        float _1337 = _1226 * 0.5;
        float _1338 = _1236 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_807, _808, _809), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4109 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1363 + 1.0))) + _1368) * _1249;
        _1385 = _1216;
        _1387 = _1215;
        _1388 = _1214;
        _1389 = _1226;
        _1390 = _1225;
        _1391 = _1224;
        _1392 = _1236;
        _1393 = _1235;
        _1394 = _1234;
        _1395 = _1249;
        _1396 = _1248;
        _1397 = _1247;
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
    }
    else
    {
        _1385 = _1386;
        _1387 = _1386;
        _1388 = _1386;
        _1389 = _1386;
        _1390 = _1386;
        _1391 = _1386;
        _1392 = _1386;
        _1393 = _1386;
        _1394 = _1386;
        _1395 = _1386;
        _1396 = _1386;
        _1397 = _1386;
        _1398 = 0.0;
        _1399 = 0.0;
        _1400 = 0.0;
    }
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1428 = fma(_1056, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1048));
        float _1432 = fma(_1056, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1048));
        float _1436 = fma(_1056, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1048));
        float _1459 = _1048 + _807;
        float _1460 = _1052 + _808;
        float _1461 = _1056 + _809;
        float _1471 = fma(_1461, cbModelParam._m0[30u].z, fma(_1460, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1459)) - _1428;
        float _1472 = fma(_1461, cbModelParam._m0[31u].z, fma(_1460, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1459)) - _1432;
        float _1473 = fma(_1461, cbModelParam._m0[32u].z, fma(_1460, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1459)) - _1436;
        float _1477 = inversesqrt(dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473)));
        float _1490 = ((_1477 * _1471) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1428 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1491 = ((_1477 * _1472) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1432 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1492 = ((_1477 * _1473) / cbModelParam._m0[35u].z) + ((((((_1436 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        float _1527 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1494.x + (-0.5));
        float _1529 = _1527 * (_1494.y + (-0.5));
        float _1530 = _1527 * (_1494.z + (-0.5));
        float _1537 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1501.x + (-0.5));
        float _1539 = _1537 * (_1501.y + (-0.5));
        float _1540 = _1537 * (_1501.z + (-0.5));
        float _1547 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1508.x + (-0.5));
        float _1549 = _1547 * (_1508.y + (-0.5));
        float _1550 = _1547 * (_1508.z + (-0.5));
        float _1557 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1515.x + (-0.5));
        float _1559 = _1557 * (_1515.y + (-0.5));
        float _1560 = _1557 * (_1515.z + (-0.5));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = _1528 * 0.5;
        float _1565 = _1538 * 0.5;
        float _1566 = _1548 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_807, _808, _809), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4172 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1591 + 1.0))) + _1596) * _1561;
        float _1606 = _1529 * 0.5;
        float _1607 = _1539 * 0.5;
        float _1608 = _1549 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_807, _808, _809), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4205 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1633 + 1.0))) + _1638) * _1562;
        float _1648 = _1530 * 0.5;
        float _1649 = _1540 * 0.5;
        float _1650 = _1550 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_807, _808, _809), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4238 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1675 + 1.0))) + _1680) * _1563;
        _1697 = _1530;
        _1698 = _1529;
        _1699 = _1528;
        _1700 = _1540;
        _1701 = _1539;
        _1702 = _1538;
        _1703 = _1550;
        _1704 = _1549;
        _1705 = _1548;
        _1706 = _1563;
        _1707 = _1562;
        _1708 = _1561;
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
    }
    else
    {
        _1697 = _1386;
        _1698 = _1386;
        _1699 = _1386;
        _1700 = _1386;
        _1701 = _1386;
        _1702 = _1386;
        _1703 = _1386;
        _1704 = _1386;
        _1705 = _1386;
        _1706 = _1386;
        _1707 = _1386;
        _1708 = _1386;
        _1709 = 0.0;
        _1710 = 0.0;
        _1711 = 0.0;
    }
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1398)) + _1398;
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1399)) + _1399;
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1400)) + _1400;
    float _1744 = fma(_1723, cbSceneParam._m0[89u].z, fma(_1722, cbSceneParam._m0[89u].y, _1721 * cbSceneParam._m0[89u].x));
    float _1747 = fma(_1723, cbSceneParam._m0[90u].z, fma(_1722, cbSceneParam._m0[90u].y, _1721 * cbSceneParam._m0[90u].x));
    float _1750 = fma(_1723, cbSceneParam._m0[91u].z, fma(_1722, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1721));
    float _1765 = _992 * 0.5;
    float _1766 = _993 * 0.5;
    float _1767 = _994 * 0.5;
    float _1768 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1771 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1774 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1808;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1781 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1385, _1389, _1392, _1395));
        float _1785 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1387, _1390, _1393, _1396));
        float _1789 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1388, _1391, _1394, _1397));
        float _1796 = dot(vec4(cbModelParam._m0[39u]), vec4(_1765, _1766, _1767, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1819;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1810 = dot(vec4(cbModelParam._m0[40u]), vec4(_1765, _1766, _1767, 1.0));
        _1819 = dot(vec3(isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1819 = 1.0;
    }
    float _1823 = (_1819 * cbModelParam._m0[1u].x) + (_1808 * (1.0 - cbModelParam._m0[1u].x));
    float _1833 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _810);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1833 : min(cbModelParam._m0[25u].z, _1833));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1881 = fma(_1056, cbModelParam._m0[13u].z, fma(_1052, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048)) + cbModelParam._m0[13u].w;
        float _1885 = fma(_1056, cbModelParam._m0[14u].z, fma(_1052, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048)) + cbModelParam._m0[14u].w;
        float _1889 = fma(_1056, cbModelParam._m0[15u].z, fma(_1052, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048)) + cbModelParam._m0[15u].w;
        float _1892 = fma(_994, cbModelParam._m0[13u].z, fma(_993, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992));
        float _1895 = fma(_994, cbModelParam._m0[14u].z, fma(_993, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992));
        float _1898 = fma(_994, cbModelParam._m0[15u].z, fma(_993, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992));
        float _1926;
        if (_1892 > 0.0)
        {
            _1926 = abs((1.0 - _1881) / _1892);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1881 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1926 = frontier_phi_17_15_ladder;
        }
        float _2128;
        if (_1895 > 0.0)
        {
            _2128 = abs((1.0 - _1885) / _1895);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1885 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2128 = frontier_phi_26_22_ladder;
        }
        float _2382;
        if (_1898 > 0.0)
        {
            _2382 = abs((1.0 - _1889) / _1898);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1889 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2382 = frontier_phi_38_33_ladder;
        }
        float _2384 = isnan(_2128) ? _1926 : (isnan(_1926) ? _2128 : min(_1926, _2128));
        float _2385 = isnan(_2382) ? _2384 : (isnan(_2384) ? _2382 : min(_2384, _2382));
        float _2389 = (_2385 * _1892) + _1881;
        float _2390 = (_2385 * _1895) + _1885;
        float _2391 = (_2385 * _1898) + _1889;
        float _2392 = _2385 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2392;
        float _2396 = _2392 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 > _2396) || ((_2390 < _2394) || ((_2389 < _2394) || (_2389 > _2396))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2519 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2391, cbModelParam._m0[9u].z, fma(_2390, cbModelParam._m0[9u].y, _2389 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2391, cbModelParam._m0[10u].z, fma(_2390, cbModelParam._m0[10u].y, _2389 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2391, cbModelParam._m0[11u].z, fma(_2390, cbModelParam._m0[11u].y, _2389 * cbModelParam._m0[11u].x))), _1834);
            frontier_phi_16_38_ladder = _2519.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2519.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2519.x * cbModelParam._m0[1u].y;
        }
        _1914 = frontier_phi_16_38_ladder_2;
        _1916 = frontier_phi_16_38_ladder_1;
        _1918 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_992, _993, _994), _1834);
        _1914 = _1902.x * cbModelParam._m0[1u].y;
        _1916 = _1902.y * cbModelParam._m0[1u].y;
        _1918 = _1902.z * cbModelParam._m0[1u].y;
    }
    float _1922 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _810);
    float _1923 = isnan(_1922) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1922 : min(cbModelParam._m0[25u].w, _1922));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1976 = fma(_1056, cbModelParam._m0[21u].z, fma(_1052, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048)) + cbModelParam._m0[21u].w;
        float _1980 = fma(_1056, cbModelParam._m0[22u].z, fma(_1052, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048)) + cbModelParam._m0[22u].w;
        float _1984 = fma(_1056, cbModelParam._m0[23u].z, fma(_1052, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048)) + cbModelParam._m0[23u].w;
        float _1987 = fma(_994, cbModelParam._m0[21u].z, fma(_993, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992));
        float _1990 = fma(_994, cbModelParam._m0[22u].z, fma(_993, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992));
        float _1993 = fma(_994, cbModelParam._m0[23u].z, fma(_993, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992));
        float _2133;
        if (_1987 > 0.0)
        {
            _2133 = abs((1.0 - _1976) / _1987);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1976 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2133 = frontier_phi_28_24_ladder;
        }
        float _2409;
        if (_1990 > 0.0)
        {
            _2409 = abs((1.0 - _1980) / _1990);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1980 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2409 = frontier_phi_40_35_ladder;
        }
        float _2622;
        if (_1993 > 0.0)
        {
            _2622 = abs((1.0 - _1984) / _1993);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1984 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2622 = frontier_phi_49_46_ladder;
        }
        float _2624 = isnan(_2409) ? _2133 : (isnan(_2133) ? _2409 : min(_2133, _2409));
        float _2625 = isnan(_2622) ? _2624 : (isnan(_2624) ? _2622 : min(_2624, _2622));
        float _2629 = (_2625 * _1987) + _1976;
        float _2630 = (_2625 * _1990) + _1980;
        float _2631 = (_2625 * _1993) + _1984;
        float _2632 = _2625 * 9.9999997473787516355514526367188e-05;
        float _2633 = (-1.0) - _2632;
        float _2635 = _2632 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2631 > _2635) || ((_2631 < _2633) || ((_2630 > _2635) || ((_2630 < _2633) || ((_2629 < _2633) || (_2629 > _2635))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2830 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2631, cbModelParam._m0[17u].z, fma(_2630, cbModelParam._m0[17u].y, _2629 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2631, cbModelParam._m0[18u].z, fma(_2630, cbModelParam._m0[18u].y, _2629 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2631, cbModelParam._m0[19u].z, fma(_2630, cbModelParam._m0[19u].y, _2629 * cbModelParam._m0[19u].x))), _1923);
            frontier_phi_25_49_ladder = _2830.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2830.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2830.x * cbModelParam._m0[1u].z;
        }
        _2012 = frontier_phi_25_49_ladder_2;
        _2014 = frontier_phi_25_49_ladder_1;
        _2016 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_992, _993, _994), _1923);
        _2012 = _1996.x * cbModelParam._m0[1u].z;
        _2014 = _1996.y * cbModelParam._m0[1u].z;
        _2016 = _1996.z * cbModelParam._m0[1u].z;
    }
    float _2029 = (((_1019 * _968) + _1020) * _984) * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2031 = (((_1019 * _970) + _1020) * _984) * ((cbModelParam._m0[1u].w * (_2014 - _1916)) + _1916);
    float _2033 = (((_1019 * _971) + _1020) * _984) * ((cbModelParam._m0[1u].w * (_2016 - _1918)) + _1918);
    float _2036 = fma(_2033, cbSceneParam._m0[89u].z, fma(_2031, cbSceneParam._m0[89u].y, _2029 * cbSceneParam._m0[89u].x));
    float _2039 = fma(_2033, cbSceneParam._m0[90u].z, fma(_2031, cbSceneParam._m0[90u].y, _2029 * cbSceneParam._m0[90u].x));
    float _2042 = fma(_2033, cbSceneParam._m0[91u].z, fma(_2031, cbSceneParam._m0[91u].y, _2029 * cbSceneParam._m0[91u].x));
    uvec4 _2052 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2054 = _2052.x * 14u;
    uint _2055 = _2054 + 13u;
    float _2062 = _984 + (-1.0);
    float _2067 = (cbLight._m0[_2055].x * _2062) + 1.0;
    float _2068 = (cbLight._m0[_2055].y * _2062) + 1.0;
    float _2069 = (cbLight._m0[_2055].z * _2062) + 1.0;
    float _2070 = (cbLight._m0[_2055].w * _2062) + 1.0;
    uint _2071 = _2054 + 5u;
    float _2077 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
    uint _2081 = _2054 + 4u;
    float _2087 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
    uint _2091 = _2054 | 1u;
    float _2102 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_807, _808, _809));
    float _2105 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_807, _808, _809));
    float _4374 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _4385 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2110 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.3183098733425140380859375;
    float _2112 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 0.3183098733425140380859375;
    float _2119 = ((cbLight._m0[_2071].x * _2077) * _2112) + ((cbLight._m0[_2081].x * _2087) * _2110);
    float _2120 = ((_2077 * cbLight._m0[_2071].y) * _2112) + ((_2087 * cbLight._m0[_2081].y) * _2110);
    float _2121 = ((_2077 * cbLight._m0[_2071].z) * _2112) + ((_2087 * cbLight._m0[_2081].z) * _2110);
    uvec4 _2125 = floatBitsToUint(cbLight._m0[_2054 + 12u]);
    bool _2127 = _2125.x == 0u;
    float _2138;
    float _2140;
    float _2142;
    if (_2127)
    {
        _2138 = _2119;
        _2140 = _2120;
        _2142 = _2121;
    }
    else
    {
        uint _2146 = _2054 + 6u;
        float _2162 = (dot(vec3(cbLight._m0[_2054 + 2u].xyz), vec3(_807, _808, _809)) * 0.5) + 0.5;
        float _2163 = _2162 * _2162;
        float _4396 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2164 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2165 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2138 = (((cbLight._m0[_2146].x * 0.3183098733425140380859375) * _2164) * _2165) + _2119;
        _2140 = (((cbLight._m0[_2146].y * 0.3183098733425140380859375) * _2164) * _2165) + _2120;
        _2142 = (((cbLight._m0[_2146].z * 0.3183098733425140380859375) * _2164) * _2165) + _2121;
    }
    bool _2145 = _2125.y == 0u;
    float _2183;
    float _2185;
    float _2187;
    if (_2145)
    {
        _2183 = _2138;
        _2185 = _2140;
        _2187 = _2142;
    }
    else
    {
        uint _2353 = _2054 + 7u;
        float _2369 = (dot(vec3(cbLight._m0[_2054 + 3u].xyz), vec3(_807, _808, _809)) * 0.5) + 0.5;
        float _2370 = _2369 * _2369;
        float _4412 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2371 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2372 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2183 = (((cbLight._m0[_2353].x * 0.3183098733425140380859375) * _2371) * _2372) + _2138;
        _2185 = (((cbLight._m0[_2353].y * 0.3183098733425140380859375) * _2371) * _2372) + _2140;
        _2187 = (((cbLight._m0[_2353].z * 0.3183098733425140380859375) * _2371) * _2372) + _2142;
    }
    uint _2190 = _2054 + 8u;
    float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _810) * 0.949999988079071044921875);
    float _2204 = _2203 * _2203;
    float _2205 = cbLight._m0[_2054].x + _886;
    float _2206 = cbLight._m0[_2054].y + _887;
    float _2207 = cbLight._m0[_2054].z + _888;
    float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
    float _2212 = _2211 * _2205;
    float _2213 = _2211 * _2206;
    float _2214 = _2211 * _2207;
    float _2215 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2054].xyz));
    float _4428 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _4439 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _2219 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2220 = dot(vec3(_807, _808, _809), vec3(_2212, _2213, _2214));
    float _4450 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2224 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2212, _2213, _2214));
    float _4461 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2228 = _2204 * _2204;
    float _2232 = ((_2223 * _2223) * (_2228 + (-1.0))) + 1.0;
    float _2240 = exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0);
    float _2241 = 0.959999978542327880859375 - _965;
    float _2243 = 0.959999978542327880859375 - _966;
    float _2244 = 0.959999978542327880859375 - _967;
    float _2251 = 1.0 - _2204;
    float _2262 = (0.5 / (((_2219 * ((_2218 * _2251) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2251) + _2204) * _2218))) * _2218;
    float _4472 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2228 / ((_2232 * _2232) * 3.141590118408203125));
    uint _2275 = _2054 + 9u;
    float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _810) * 0.949999988079071044921875);
    float _2287 = _2286 * _2286;
    float _2288 = cbLight._m0[_2091].x + _886;
    float _2289 = cbLight._m0[_2091].y + _887;
    float _2290 = cbLight._m0[_2091].z + _888;
    float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
    float _2295 = _2294 * _2288;
    float _2296 = _2294 * _2289;
    float _2297 = _2294 * _2290;
    float _2298 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2091].xyz));
    float _4483 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2302 = dot(vec3(_807, _808, _809), vec3(_2295, _2296, _2297));
    float _4494 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2306 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2295, _2296, _2297));
    float _4505 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2310 = _2287 * _2287;
    float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
    float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0);
    float _2328 = 1.0 - _2287;
    float _2338 = (0.5 / (((_2219 * ((_2301 * _2328) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2328) + _2287) * _2301))) * _2301;
    float _4516 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2340 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
    float _2350 = (((((_2321 * _2241) + _968) * cbLight._m0[_2275].x) * _2340) * _2077) + (((((_2240 * _2241) + _968) * cbLight._m0[_2190].x) * _2264) * _2087);
    float _2351 = (((((_2321 * _2243) + _970) * cbLight._m0[_2275].y) * _2340) * _2077) + (((((_2240 * _2243) + _970) * cbLight._m0[_2190].y) * _2264) * _2087);
    float _2352 = (((((_2321 * _2244) + _971) * cbLight._m0[_2275].z) * _2340) * _2077) + (((((_2240 * _2244) + _971) * cbLight._m0[_2190].z) * _2264) * _2087);
    float _2414;
    float _2416;
    float _2418;
    if (_2127)
    {
        _2414 = _2350;
        _2416 = _2351;
        _2418 = _2352;
    }
    else
    {
        uint _2420 = _2054 + 2u;
        uint _2424 = _2054 + 10u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _810) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _886;
        float _2441 = cbLight._m0[_2420].y + _887;
        float _2442 = cbLight._m0[_2420].z + _888;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2420].xyz));
        float _4527 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2454 = dot(vec3(_807, _808, _809), vec3(_2447, _2448, _2449));
        float _4538 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4549 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2473 = exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0);
        float _2480 = 1.0 - _2439;
        float _2490 = (0.5 / (((_2219 * ((_2453 * _2480) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2480) + _2439) * _2453))) * _2453;
        float _4560 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2492 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2493 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2414 = (((((_2473 * _2241) + _968) * cbLight._m0[_2424].x) * _2492) * _2493) + _2350;
        _2416 = (((((_2473 * _2243) + _970) * cbLight._m0[_2424].y) * _2492) * _2493) + _2351;
        _2418 = (((((_2473 * _2244) + _971) * cbLight._m0[_2424].z) * _2492) * _2493) + _2352;
    }
    float _2528;
    float _2530;
    float _2532;
    if (_2145)
    {
        _2528 = _2414;
        _2530 = _2416;
        _2532 = _2418;
    }
    else
    {
        uint _2539 = _2054 + 3u;
        uint _2543 = _2054 + 11u;
        float _2557 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2539].w)) * _810) * 0.949999988079071044921875);
        float _2558 = _2557 * _2557;
        float _2559 = cbLight._m0[_2539].x + _886;
        float _2560 = cbLight._m0[_2539].y + _887;
        float _2561 = cbLight._m0[_2539].z + _888;
        float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
        float _2566 = _2565 * _2559;
        float _2567 = _2565 * _2560;
        float _2568 = _2565 * _2561;
        float _2569 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2539].xyz));
        float _4576 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2573 = dot(vec3(_807, _808, _809), vec3(_2566, _2567, _2568));
        float _4587 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2577 = dot(vec3(cbLight._m0[_2539].xyz), vec3(_2566, _2567, _2568));
        float _4598 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2581 = _2558 * _2558;
        float _2585 = ((_2576 * _2576) * (_2581 + (-1.0))) + 1.0;
        float _2592 = exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0);
        float _2599 = 1.0 - _2558;
        float _2609 = (0.5 / (((_2219 * ((_2572 * _2599) + _2558)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2599) + _2558) * _2572))) * _2572;
        float _4609 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2611 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2581 / ((_2585 * _2585) * 3.141590118408203125));
        float _2612 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2528 = (((((_2592 * _2241) + _968) * cbLight._m0[_2543].x) * _2611) * _2612) + _2414;
        _2530 = (((((_2592 * _2243) + _970) * cbLight._m0[_2543].y) * _2611) * _2612) + _2416;
        _2532 = (((((_2592 * _2244) + _971) * cbLight._m0[_2543].z) * _2611) * _2612) + _2418;
    }
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    if (_2052.y == 0u)
    {
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2688 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2687;
        float _2689 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2687;
        float _2690 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2687;
        uvec4 _2702 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2703 = _2702.x;
        uint _2714 = uint((float(_2702.y) * floor(float(uint(cbSceneParam._m0[85u].y * _907) / _2703))) + floor(float(uint(cbSceneParam._m0[85u].x * _906) / _2703)));
        float _2724 = (log2(_2690 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2725 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        uint _2728 = uint(isnan(14.0) ? _2725 : (isnan(_2725) ? 14.0 : min(_2725, 14.0)));
        uvec4 _2733 = texelFetch(g_lightClusterGridBuffer, int(((_2728 << 2u) + (_2714 << 6u)) >> 2u));
        uint _2734 = _2733.x;
        uint _2735 = _2702.z;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        if (((((1u << ((_2735 >> 4u) & 15u)) + 4294967295u) & _2734) == 0u) || ((_2735 & 240u) == 0u))
        {
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
        }
        else
        {
            float _2836;
            float _2838;
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            uint _2993 = 0u;
            uint _3002;
            bool _3003;
            for (;;)
            {
                _3002 = texelFetch(g_lightClassification, int((((_2728 << 5u) + (_2714 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                _3003 = _3002 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3003)
                {
                    frontier_phi_66_pred = _2987;
                    frontier_phi_66_pred_1 = _2992;
                    frontier_phi_66_pred_2 = _2991;
                    frontier_phi_66_pred_3 = _2990;
                    frontier_phi_66_pred_4 = _2989;
                    frontier_phi_66_pred_5 = _2988;
                }
                else
                {
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    uint _3138;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _3002;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    for (;;)
                    {
                        uint _3142 = uint(findLSB(_3138)) + (_2993 << 5u);
                        uint _3139 = (_3138 + 4294967295u) & _3138;
                        uint _3144 = _3142 * 48u;
                        vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 3u)).x));
                        uint _3164 = (_3142 * 48u) + 4u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3183 = (_3142 * 48u) + 8u;
                        vec3 _3194 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x));
                        float _3198 = _3158.x - _2688;
                        float _3199 = _3158.y - _2689;
                        float _3200 = _3158.z - _2690;
                        float _3201 = dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200));
                        float _3204 = inversesqrt(_3201);
                        float _3205 = _3204 * _3198;
                        float _3206 = _3204 * _3199;
                        float _3207 = _3204 * _3200;
                        float _3208 = dot(vec3(_925, _928, _931), vec3(_3205, _3206, _3207));
                        float _3213 = 1.0 - (_3201 * _3158.w);
                        float _4635 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3215 = sqrt(_3201) * _3177.w;
                        float _3218 = 1.39999997615814208984375 / (_3215 + 1.39999997615814208984375);
                        float _3219 = _3218 * _3218;
                        float _3222 = ((1.0 - _3219) * _3208) + _3219;
                        float _3225 = _3215 * _3215;
                        float _3229 = ((isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))) * _3214) / ((_3225 * 0.699999988079071044921875) + 1.0);
                        float _3233 = (-0.0) - _2688;
                        float _3234 = (-0.0) - _2689;
                        float _3235 = (-0.0) - _2690;
                        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                        float _3240 = _3239 * _3233;
                        float _3241 = _3239 * _3234;
                        float _3242 = _3239 * _3235;
                        float _3250 = exp2(log2(1.0 / ((_3225 * 3.5) + 5.0)) * 0.25);
                        float _3251 = 1.0 - _1000;
                        float _3258 = sqrt(1.0 - ((1.0 - (_3251 * _3251)) * (1.0 - (_3250 * _3250))));
                        float _3259 = _3258 * _3258;
                        float _3260 = _3259 * _3259;
                        float _3261 = _3240 + _3205;
                        float _3262 = _3241 + _3206;
                        float _3263 = _3242 + _3207;
                        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                        float _3271 = dot(vec3(_925, _928, _931), vec3(_3240, _3241, _3242));
                        float _4651 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3275 = dot(vec3(_925, _928, _931), vec3(_3267 * _3261, _3267 * _3262, _3267 * _3263));
                        float _4662 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3278 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3282 = ((_3278 * _3278) * (_3260 + (-1.0))) + 1.0;
                        float _3283 = _3218 * _3259;
                        float _3284 = _3283 * _3283;
                        float _3287 = ((1.0 - _3284) * _3208) + _3284;
                        float _4673 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3288 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3289 = 1.0 - _3259;
                        float _3299 = (0.5 / (((_3288 * ((_3274 * _3289) + _3259)) + 9.9999999392252902907785028219223e-09) + (((_3288 * _3289) + _3259) * _3274))) * _3288;
                        float _4684 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3310 = (((_3260 * 3.1415927410125732421875) * (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) / ((_3282 * _3282) * ((_3225 * 2.1991131305694580078125) + 3.141590118408203125))) * _3214;
                        _3062 = (_3229 * _3177.x) + _3135;
                        _3063 = (_3229 * _3177.y) + _3136;
                        _3064 = (_3229 * _3177.z) + _3137;
                        _3059 = (_3310 * _3194.x) + _3132;
                        _3060 = (_3310 * _3194.y) + _3133;
                        _3061 = (_3310 * _3194.z) + _3134;
                        if (_3139 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3139;
                        }
                    }
                    frontier_phi_66_pred = _3059;
                    frontier_phi_66_pred_1 = _3064;
                    frontier_phi_66_pred_2 = _3063;
                    frontier_phi_66_pred_3 = _3062;
                    frontier_phi_66_pred_4 = _3061;
                    frontier_phi_66_pred_5 = _3060;
                }
                _2836 = frontier_phi_66_pred;
                _2846 = frontier_phi_66_pred_1;
                _2844 = frontier_phi_66_pred_2;
                _2842 = frontier_phi_66_pred_3;
                _2840 = frontier_phi_66_pred_4;
                _2838 = frontier_phi_66_pred_5;
                uint _2994 = _2993 + 1u;
                if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2987 = _2836;
                    _2988 = _2838;
                    _2989 = _2840;
                    _2990 = _2842;
                    _2991 = _2844;
                    _2992 = _2846;
                    _2993 = _2994;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
        }
        uvec4 _2849 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2850 = _2849.z;
        uint _2852 = (_2850 >> 8u) & 15u;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((4294967295u << _2852) & _2734) == 0u)
        {
            _2955 = _2835;
            _2957 = _2837;
            _2959 = _2839;
            _2961 = _2841;
            _2963 = _2843;
            _2965 = _2845;
        }
        else
        {
            float _2980 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
            float _2981 = _2980 * _2688;
            float _2982 = _2980 * _2689;
            float _2983 = _2980 * _2690;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2852 < ((_2850 >> 12u) & 15u))
            {
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _3115 = _2835;
                float _3116 = _2837;
                float _3117 = _2839;
                float _3118 = _2841;
                float _3119 = _2843;
                float _3120 = _2845;
                uint _3121 = _2852;
                uint _3130;
                bool _3131;
                for (;;)
                {
                    _3130 = texelFetch(g_lightClassification, int((((_2728 << 5u) + (_2714 << 9u)) + (_3121 << 2u)) >> 2u)).x;
                    _3131 = _3130 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3131)
                    {
                        frontier_phi_77_pred = _3120;
                        frontier_phi_77_pred_1 = _3119;
                        frontier_phi_77_pred_2 = _3118;
                        frontier_phi_77_pred_3 = _3117;
                        frontier_phi_77_pred_4 = _3116;
                        frontier_phi_77_pred_5 = _3115;
                    }
                    else
                    {
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        float _3339 = _3117;
                        float _3340 = _3118;
                        float _3341 = _3119;
                        float _3342 = _3120;
                        uint _3343 = _3130;
                        uint _3344;
                        vec4 _3369;
                        float _3370;
                        vec4 _3385;
                        vec3 _3397;
                        vec4 _3412;
                        vec4 _3428;
                        float _3474;
                        bool _3475;
                        for (;;)
                        {
                            uint _3354 = ((_3121 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3343));
                            _3344 = (_3343 + 4294967295u) & _3343;
                            uint _3356 = _3354 * 40u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3370 = _3369.w;
                            uint _3372 = (_3354 * 40u) + 4u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3354 * 40u) + 8u;
                            _3397 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x));
                            uint _3399 = (_3354 * 40u) + 16u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3415 = (_3354 * 40u) + 20u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3354 * 40u) + 24u;
                            vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3449 = (_3354 * 40u) + 28u;
                            vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            _3474 = fma(_2690, _3462.z, fma(_2689, _3462.y, _3462.x * _2688)) + _3462.w;
                            _3475 = !((fma(_2690, _3443.z, fma(_2689, _3443.y, _3443.x * _2688)) + _3443.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3475)
                            {
                                float _3502 = _3369.x - _2688;
                                float _3503 = _3369.y - _2689;
                                float _3504 = _3369.z - _2690;
                                float _3505 = dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504));
                                float _3508 = inversesqrt(_3505);
                                float _3509 = _3508 * _3502;
                                float _3510 = _3508 * _3503;
                                float _3511 = _3508 * _3504;
                                float _3515 = 1.0 - (_3505 / (_3370 * _3370));
                                float _4695 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3520 = sqrt(_3505) * _3385.w;
                                float _3522 = 1.39999997615814208984375 / (_3520 + 1.39999997615814208984375);
                                float _3523 = _3522 * _3522;
                                float _3526 = ((1.0 - _3523) * dot(vec3(_3509, _3510, _3511), vec3(_925, _928, _931))) + _3523;
                                float _3529 = _3520 * _3520;
                                float _3533 = (fma(_2690, _3412.z, fma(_2689, _3412.y, _3412.x * _2688)) + _3412.w) / _3474;
                                float _3534 = (fma(_2690, _3428.z, fma(_2689, _3428.y, _3428.x * _2688)) + _3428.w) / _3474;
                                float _3538 = 1.0 - dot(vec2(_3533, _3534), vec2(_3533, _3534));
                                float _4711 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3540 = _3539 * (((isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0))) * _3516) / ((_3529 * 0.699999988079071044921875) + 1.0));
                                float _3552 = exp2(log2(1.0 / ((_3529 * 3.5) + 5.0)) * 0.25);
                                float _3553 = 1.0 - _1000;
                                float _3560 = sqrt(1.0 - ((1.0 - (_3553 * _3553)) * (1.0 - (_3552 * _3552))));
                                float _3561 = _3560 * _3560;
                                float _3562 = _3561 * _3561;
                                float _3563 = _3509 - _2981;
                                float _3564 = _3510 - _2982;
                                float _3565 = _3511 - _2983;
                                float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                                float _3573 = dot(vec3(_925, _928, _931), vec3((-0.0) - _2981, (-0.0) - _2982, (-0.0) - _2983));
                                float _4722 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3576 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3577 = dot(vec3(_925, _928, _931), vec3(_3569 * _3563, _3569 * _3564, _3569 * _3565));
                                float _4733 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3580 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3584 = ((_3580 * _3580) * (_3562 + (-1.0))) + 1.0;
                                float _3585 = _3522 * _3561;
                                float _3586 = _3585 * _3585;
                                float _3592 = ((1.0 - _3586) * dot(vec3(_925, _928, _931), vec3(_3509, _3510, _3511))) + _3586;
                                float _4744 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3594 = 1.0 - _3561;
                                float _3604 = (0.5 / (((_3593 * ((_3576 * _3594) + _3561)) + 9.9999999392252902907785028219223e-09) + (((_3593 * _3594) + _3561) * _3576))) * _3593;
                                float _4755 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3614 = (_3539 * _3516) * (((_3562 * 3.1415927410125732421875) * (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) / ((_3584 * _3584) * ((_3529 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3540 * _3385.y;
                                frontier_phi_83_pred_1 = _3540 * _3385.x;
                                frontier_phi_83_pred_2 = _3614 * _3397.z;
                                frontier_phi_83_pred_3 = _3614 * _3397.y;
                                frontier_phi_83_pred_4 = _3614 * _3397.x;
                                frontier_phi_83_pred_5 = _3540 * _3385.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3622 = frontier_phi_83_pred;
                            _3621 = frontier_phi_83_pred_1;
                            _3620 = frontier_phi_83_pred_2;
                            _3619 = frontier_phi_83_pred_3;
                            _3618 = frontier_phi_83_pred_4;
                            _3623 = frontier_phi_83_pred_5;
                            _3327 = _3621 + _3340;
                            _3328 = _3622 + _3341;
                            _3329 = _3623 + _3342;
                            _3324 = _3618 + _3337;
                            _3325 = _3619 + _3338;
                            _3326 = _3620 + _3339;
                            if (_3344 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3344;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3329;
                        frontier_phi_77_pred_1 = _3328;
                        frontier_phi_77_pred_2 = _3327;
                        frontier_phi_77_pred_3 = _3326;
                        frontier_phi_77_pred_4 = _3325;
                        frontier_phi_77_pred_5 = _3324;
                    }
                    _2966 = frontier_phi_77_pred;
                    _2964 = frontier_phi_77_pred_1;
                    _2962 = frontier_phi_77_pred_2;
                    _2960 = frontier_phi_77_pred_3;
                    _2958 = frontier_phi_77_pred_4;
                    _2956 = frontier_phi_77_pred_5;
                    uint _3122 = _3121 + 1u;
                    if (_3122 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3115 = _2956;
                        _3116 = _2958;
                        _3117 = _2960;
                        _3118 = _2962;
                        _3119 = _2964;
                        _3120 = _2966;
                        _3121 = _3122;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2960;
                frontier_phi_58_59_ladder_1 = _2966;
                frontier_phi_58_59_ladder_2 = _2964;
                frontier_phi_58_59_ladder_3 = _2962;
                frontier_phi_58_59_ladder_4 = _2958;
                frontier_phi_58_59_ladder_5 = _2956;
            }
            else
            {
                frontier_phi_58_59_ladder = _2839;
                frontier_phi_58_59_ladder_1 = _2845;
                frontier_phi_58_59_ladder_2 = _2843;
                frontier_phi_58_59_ladder_3 = _2841;
                frontier_phi_58_59_ladder_4 = _2837;
                frontier_phi_58_59_ladder_5 = _2835;
            }
            _2955 = frontier_phi_58_59_ladder_5;
            _2957 = frontier_phi_58_59_ladder_4;
            _2959 = frontier_phi_58_59_ladder;
            _2961 = frontier_phi_58_59_ladder_3;
            _2963 = frontier_phi_58_59_ladder_2;
            _2965 = frontier_phi_58_59_ladder_1;
        }
        float _2970 = isnan(1.0) ? _984 : (isnan(_984) ? 1.0 : min(_984, 1.0));
        _2747 = (_2970 * _2961) + _2183;
        _2749 = (_2970 * _2963) + _2185;
        _2751 = (_2970 * _2965) + _2187;
        _2753 = ((_2955 * _968) * _2970) + _2528;
        _2755 = ((_2957 * _970) * _2970) + _2530;
        _2757 = ((_2959 * _971) * _2970) + _2532;
    }
    else
    {
        _2747 = _2183;
        _2749 = _2185;
        _2751 = _2187;
        _2753 = _2528;
        _2755 = _2530;
        _2757 = _2532;
    }
    float _4771 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4782 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _4793 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _2774 = ((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2747 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _984))) + ((_2753 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1823)) * cbPerFrame._m0[3u].x);
    float _2775 = ((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2749 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _984))) + ((_2755 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1823)) * cbPerFrame._m0[3u].x);
    float _2776 = ((isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2751 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _984))) + ((_2757 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1823)) * cbPerFrame._m0[3u].x);
    uint _2777 = _255 + 6u;
    float _2785 = _906 / cbSceneParam._m0[86u].x;
    float _2786 = _907 / cbSceneParam._m0[86u].y;
    vec4 _2800 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2785, _2786, (log2((isnan(cbSceneParam._m0[77u].w) ? _829 : (isnan(_829) ? cbSceneParam._m0[77u].w : min(_829, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2802 = _2800.x;
    float _2803 = _2800.y;
    float _2804 = _2800.z;
    float _2805 = _2800.w;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    if (_829 > cbSceneParam._m0[78u].w)
    {
        float _2860 = isnan(_829) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _829 : min(cbSceneParam._m0[80u].w, _829));
        float _2861 = _2860 / _829;
        float _2872 = _2861 * _879;
        float _2873 = _880 * _2861;
        float _2874 = (-0.0) - _2873;
        float _2875 = _2861 * _881;
        float _2877 = (cbSceneParam._m0[77u].w * _2874) / _2860;
        float _2878 = _2877 + cbSceneParam._m0[79u].w;
        float _2879 = cbSceneParam._m0[79u].w - _2873;
        float _2885 = sqrt(((_2872 * _2872) + (_2873 * _2873)) + (_2875 * _2875));
        float _2888 = (1.0 - (cbSceneParam._m0[77u].w / _2860)) * _2885;
        float _2893 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2895 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3072;
        if (abs((_2874 - _2877) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3072 = ((((_2878 > 0.0) ? exp2(_2893 * _2878) : (2.0 - exp2(_2895 * _2878))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2888;
        }
        else
        {
            float _3016 = 1.0 / cbSceneParam._m0[80u].x;
            float _3017 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : max(_2878, _2879));
            float _3018 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : min(_2878, _2879));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            _3072 = ((abs(_2885 / _2874) * cbSceneParam._m0[80u].y) * ((((_3027 - _3028) * 2.0) - ((exp2(_2893 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0)))) - exp2(_2893 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))))) * _3016)) - ((exp2(_2895 * _3027) - exp2(_2895 * _3028)) * _3016))) + (_2888 * cbSceneParam._m0[80u].z);
        }
        vec4 _3074 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2785, _2786, 1.0), 0.0);
        float _3083 = exp2((_3072 * (-1.44269502162933349609375)) * (1.0 - _3074.w));
        float _3084 = log2(_3083);
        float _3100 = log2(_2805);
        _2897 = (exp2(_3100 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].x)) * _3074.x) / cbSceneParam._m0[78u].x)) + _2802;
        _2899 = (exp2(_3100 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].y)) * _3074.y) / cbSceneParam._m0[78u].y)) + _2803;
        _2901 = (exp2(_3100 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].z)) * _3074.z) / cbSceneParam._m0[78u].z)) + _2804;
        _2903 = _3083 * _2805;
    }
    else
    {
        _2897 = _2802;
        _2899 = _2803;
        _2901 = _2804;
        _2903 = _2805;
    }
    bool _3110;
    vec4 _2913;
    vec4 _2935;
    float _2937;
    float _2941;
    float _2942;
    float _2943;
    float _2944;
    bool _2954;
    for (;;)
    {
        _2913 = cbMatDynParam._m0[0u];
        float _2915 = roundEven(_2913.y);
        bool _2916 = _2915 == 3.0;
        float _2917 = log2(_2903);
        float _2924 = exp2(_2917 * cbSceneParam._m0[78u].x) * _2774;
        float _2925 = exp2(_2917 * cbSceneParam._m0[78u].y) * _2775;
        float _2926 = exp2(_2917 * cbSceneParam._m0[78u].z) * _2776;
        float _2933 = _895 + (-0.5);
        _2935 = cbMtdParam._m0[1u];
        _2937 = _2935.y * _2933;
        float _2940 = (_2915 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2941 = _2940 * (_2916 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2897)));
        _2942 = _2940 * (_2916 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2899)));
        _2943 = _2940 * (_2916 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2901)));
        _2944 = _2933 * 0.999000012874603271484375;
        _2954 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2954)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2944) < 0.5)
            {
                _3110 = true;
                break;
            }
        }
        uint _3051 = _944 + uint(_2913.w);
        if ((cbInstanceData._m0[_3051].w < 1.0) && ((cbInstanceData._m0[_3051].w + _2944) < 0.5))
        {
            _3110 = true;
            break;
        }
        if ((_2937 + 1.0) < _2935.x)
        {
            _3110 = true;
            break;
        }
        _3110 = false;
        break;
    }
    float _3315;
    if (_3110)
    {
        discard_state = true;
        _3315 = 0.0;
    }
    else
    {
        _3315 = cbInstanceData._m0[_2777].w;
    }
    SV_Target.x = _2941;
    SV_Target.y = _2942;
    SV_Target.z = _2943;
    SV_Target.w = _3315;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2777].w;
    discard_exit();
}


