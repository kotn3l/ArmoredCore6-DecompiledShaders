#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1193;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3520 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    float _460 = ((_430.z - _451) * _378) + _451;
    float _463 = ((((_430.x - _449) * _378) + _449) * 2.0) + (-1.0);
    float _464 = ((((_430.y - _450) * _378) + _450) * 2.0) + (-1.0);
    float _465 = dot(vec2(_463, _464), vec2(_463, _464));
    float _3531 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _470 = sqrt(1.0 - (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))));
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _503 = _501.x;
    float _504 = 1.0 - _503;
    float _517 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_503 - _504) * cbMtdParam._m0[24u].z) + _504) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3542 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _525 = (_518 * (cbMtdParam._m0[17u].x - _385)) + _385;
    float _526 = (_518 * (cbMtdParam._m0[17u].y - _386)) + _386;
    float _527 = (_518 * (cbMtdParam._m0[17u].z - _387)) + _387;
    vec4 _539 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _555 = _553.x;
    float _573 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _555) * _378) + _555;
    float _577 = ((_539.x - _573) * cbMtdParam._m0[19u].z) + _573;
    float _579 = _577 - (_577 * _518);
    float _584 = (((_405.z - _460) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _460;
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _604 = (_597.x * 2.0) + (-1.0);
    float _605 = (_597.y * 2.0) + (-1.0);
    float _606 = dot(vec2(_604, _605), vec2(_604, _605));
    float _3553 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _614 = (_518 * (_597.z - _584)) + _584;
    float _619 = _463 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_405.x * 2.0) + (-1.0)));
    float _620 = _464 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_405.y * 2.0) + (-1.0)));
    float _632 = (((_604 - _619) + (cbMtdParam._m0[21u].x * _619)) * _518) + _619;
    float _633 = (((_605 - _620) + (cbMtdParam._m0[21u].x * _620)) * _518) + _620;
    float _634 = (_518 * (sqrt(1.0 - (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) - _470)) + _470;
    float _639 = cbMtdParam._m0[22u].x + _483.w;
    float _642 = fma(_634, _227 * NORMAL.x, fma(_633, _234 * TANGENT.x, (_220 * _212) * _632));
    float _645 = fma(_634, _227 * NORMAL.y, fma(_633, _234 * TANGENT.y, (_220 * _213) * _632));
    float _648 = fma(_634, _227 * NORMAL.z, fma(_633, _234 * TANGENT.z, (_220 * _214) * _632));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _653 = _652 * _642;
    float _654 = _652 * _645;
    float _655 = _652 * _648;
    float _3564 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _656 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3586 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3597 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _3608 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3619 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _661 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _675 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _726 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _716);
    float _727 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _716);
    float _728 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _716);
    float _732 = inversesqrt(dot(vec3(_726, _727, _728), vec3(_726, _727, _728)));
    float _733 = _726 * _732;
    float _734 = _727 * _732;
    float _735 = _728 * _732;
    float _741 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _742 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _760 = fma(_655, cbSceneParam._m0[5u].z, fma(_654, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _653));
    float _763 = fma(_655, cbSceneParam._m0[6u].z, fma(_654, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _653));
    float _766 = fma(_655, cbSceneParam._m0[7u].z, fma(_654, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _653));
    uint _780 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _786 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_780].x;
    float _787 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_780].y;
    float _788 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_780].z;
    float _3630 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _792 = 1.0 - _661;
    float _793 = _789 * _792;
    float _794 = _790 * _792;
    float _795 = _791 * _792;
    float _800 = (_789 + (-0.039999999105930328369140625)) * _661;
    float _801 = (_790 + (-0.039999999105930328369140625)) * _661;
    float _802 = (_791 + (-0.039999999105930328369140625)) * _661;
    float _803 = _800 + 0.039999999105930328369140625;
    float _805 = _801 + 0.039999999105930328369140625;
    float _806 = _802 + 0.039999999105930328369140625;
    vec4 _815 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _741, cbSceneParam._m0[86u].y * _742));
    float _819 = ((isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * TEXCOORD_5.w) * _815.x;
    float _820 = dot(vec3(_653, _654, _655), vec3(_733, _734, _735));
    float _823 = _820 * 2.0;
    float _827 = (_823 * _653) - _733;
    float _828 = (_823 * _654) - _734;
    float _829 = (_823 * _655) - _735;
    float _833 = abs(dot(vec3(_733, _734, _735), vec3(_653, _654, _655)));
    float _3663 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _835 = sqrt(_656);
    float _848 = exp2((_835 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_835 * 3.0));
    float _854 = (1.0 - _848) * ((_835 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _855 = _848 * _835;
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1192;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _917 = fma(_891, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883));
        float _921 = fma(_891, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883));
        float _925 = fma(_891, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883));
        float _950 = _883 + _653;
        float _951 = _887 + _654;
        float _952 = _891 + _655;
        float _962 = fma(_952, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950)) - _917;
        float _963 = fma(_952, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950)) - _921;
        float _964 = fma(_952, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950)) - _925;
        float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
        float _981 = ((_968 * _962) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_917 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_968 * _963) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_921 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_968 * _964) / cbModelParam._m0[34u].z) + ((((((_925 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        float _1020 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_986.x + (-0.5));
        float _1022 = _1020 * (_986.y + (-0.5));
        float _1023 = _1020 * (_986.z + (-0.5));
        float _1030 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_993.x + (-0.5));
        float _1032 = _1030 * (_993.y + (-0.5));
        float _1033 = _1030 * (_993.z + (-0.5));
        float _1040 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1000.x + (-0.5));
        float _1042 = _1040 * (_1000.y + (-0.5));
        float _1043 = _1040 * (_1000.z + (-0.5));
        float _1050 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1007.x + (-0.5));
        float _1052 = _1050 * (_1007.y + (-0.5));
        float _1053 = _1050 * (_1007.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1074 = (dot(vec3(_653, _654, _655), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1084 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3711 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1086 + 1.0))) + _1091) * _1054;
        float _1101 = _1022 * 0.5;
        float _1102 = _1032 * 0.5;
        float _1103 = _1042 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_653, _654, _655), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3744 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1128 + 1.0))) + _1133) * _1055;
        float _1143 = _1023 * 0.5;
        float _1144 = _1033 * 0.5;
        float _1145 = _1043 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_653, _654, _655), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3777 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1170 + 1.0))) + _1175) * _1056;
        _1192 = _1023;
        _1194 = _1022;
        _1195 = _1021;
        _1196 = _1033;
        _1197 = _1032;
        _1198 = _1031;
        _1199 = _1043;
        _1200 = _1042;
        _1201 = _1041;
        _1202 = _1056;
        _1203 = _1055;
        _1204 = _1054;
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _1193;
        _1194 = _1193;
        _1195 = _1193;
        _1196 = _1193;
        _1197 = _1193;
        _1198 = _1193;
        _1199 = _1193;
        _1200 = _1193;
        _1201 = _1193;
        _1202 = _1193;
        _1203 = _1193;
        _1204 = _1193;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1232 = fma(_891, cbModelParam._m0[30u].z, fma(_887, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _883));
        float _1236 = fma(_891, cbModelParam._m0[31u].z, fma(_887, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _883));
        float _1240 = fma(_891, cbModelParam._m0[32u].z, fma(_887, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _883));
        float _1263 = _883 + _653;
        float _1264 = _887 + _654;
        float _1265 = _891 + _655;
        float _1275 = fma(_1265, cbModelParam._m0[30u].z, fma(_1264, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1263)) - _1232;
        float _1276 = fma(_1265, cbModelParam._m0[31u].z, fma(_1264, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1263)) - _1236;
        float _1277 = fma(_1265, cbModelParam._m0[32u].z, fma(_1264, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1263)) - _1240;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1294 = ((_1281 * _1275) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1232 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1281 * _1276) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1236 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1281 * _1277) / cbModelParam._m0[35u].z) + ((((((_1240 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        float _1331 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1298.x + (-0.5));
        float _1333 = _1331 * (_1298.y + (-0.5));
        float _1334 = _1331 * (_1298.z + (-0.5));
        float _1341 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1305.x + (-0.5));
        float _1343 = _1341 * (_1305.y + (-0.5));
        float _1344 = _1341 * (_1305.z + (-0.5));
        float _1351 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1312.x + (-0.5));
        float _1353 = _1351 * (_1312.y + (-0.5));
        float _1354 = _1351 * (_1312.z + (-0.5));
        float _1361 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1319.x + (-0.5));
        float _1363 = _1361 * (_1319.y + (-0.5));
        float _1364 = _1361 * (_1319.z + (-0.5));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = _1332 * 0.5;
        float _1369 = _1342 * 0.5;
        float _1370 = _1352 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_653, _654, _655), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3840 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1395 + 1.0))) + _1400) * _1365;
        float _1410 = _1333 * 0.5;
        float _1411 = _1343 * 0.5;
        float _1412 = _1353 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_653, _654, _655), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3873 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1437 + 1.0))) + _1442) * _1366;
        float _1452 = _1334 * 0.5;
        float _1453 = _1344 * 0.5;
        float _1454 = _1354 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_653, _654, _655), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _3906 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1479 + 1.0))) + _1484) * _1367;
        _1501 = _1334;
        _1502 = _1333;
        _1503 = _1332;
        _1504 = _1344;
        _1505 = _1343;
        _1506 = _1342;
        _1507 = _1354;
        _1508 = _1353;
        _1509 = _1352;
        _1510 = _1367;
        _1511 = _1366;
        _1512 = _1365;
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
    }
    else
    {
        _1501 = _1193;
        _1502 = _1193;
        _1503 = _1193;
        _1504 = _1193;
        _1505 = _1193;
        _1506 = _1193;
        _1507 = _1193;
        _1508 = _1193;
        _1509 = _1193;
        _1510 = _1193;
        _1511 = _1193;
        _1512 = _1193;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1205)) + _1205;
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1206)) + _1206;
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1207)) + _1207;
    float _1548 = fma(_1527, cbSceneParam._m0[89u].z, fma(_1526, cbSceneParam._m0[89u].y, _1525 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1527, cbSceneParam._m0[90u].z, fma(_1526, cbSceneParam._m0[90u].y, _1525 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1527, cbSceneParam._m0[91u].z, fma(_1526, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1525));
    float _1569 = _827 * 0.5;
    float _1570 = _828 * 0.5;
    float _1571 = _829 * 0.5;
    float _1572 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1575 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1578 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1612;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1585 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1192, _1196, _1199, _1202));
        float _1589 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1194, _1197, _1200, _1203));
        float _1593 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1195, _1198, _1201, _1204));
        float _1600 = dot(vec4(cbModelParam._m0[39u]), vec4(_1569, _1570, _1571, 1.0));
        _1612 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1612 = 1.0;
    }
    float _1623;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1614 = dot(vec4(cbModelParam._m0[40u]), vec4(_1569, _1570, _1571, 1.0));
        _1623 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1623 = 1.0;
    }
    float _1627 = (_1623 * cbModelParam._m0[1u].x) + (_1612 * (1.0 - cbModelParam._m0[1u].x));
    float _1637 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _656);
    float _1638 = isnan(_1637) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1637 : min(cbModelParam._m0[25u].z, _1637));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1686 = fma(_891, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883)) + cbModelParam._m0[13u].w;
        float _1690 = fma(_891, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883)) + cbModelParam._m0[14u].w;
        float _1694 = fma(_891, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883)) + cbModelParam._m0[15u].w;
        float _1697 = fma(_829, cbModelParam._m0[13u].z, fma(_828, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827));
        float _1700 = fma(_829, cbModelParam._m0[14u].z, fma(_828, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827));
        float _1703 = fma(_829, cbModelParam._m0[15u].z, fma(_828, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827));
        float _1731;
        if (_1697 > 0.0)
        {
            _1731 = abs((1.0 - _1686) / _1697);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1686 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1731 = frontier_phi_14_12_ladder;
        }
        float _1934;
        if (_1700 > 0.0)
        {
            _1934 = abs((1.0 - _1690) / _1700);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1690 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1934 = frontier_phi_23_19_ladder;
        }
        float _2188;
        if (_1703 > 0.0)
        {
            _2188 = abs((1.0 - _1694) / _1703);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1694 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2188 = frontier_phi_35_30_ladder;
        }
        float _2190 = isnan(_1934) ? _1731 : (isnan(_1731) ? _1934 : min(_1731, _1934));
        float _2191 = isnan(_2188) ? _2190 : (isnan(_2190) ? _2188 : min(_2190, _2188));
        float _2195 = (_2191 * _1697) + _1686;
        float _2196 = (_2191 * _1700) + _1690;
        float _2197 = (_2191 * _1703) + _1694;
        float _2198 = _2191 * 9.9999997473787516355514526367188e-05;
        float _2200 = (-1.0) - _2198;
        float _2202 = _2198 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2197 > _2202) || ((_2197 < _2200) || ((_2196 > _2202) || ((_2196 < _2200) || ((_2195 < _2200) || (_2195 > _2202))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2197, cbModelParam._m0[9u].z, fma(_2196, cbModelParam._m0[9u].y, _2195 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2197, cbModelParam._m0[10u].z, fma(_2196, cbModelParam._m0[10u].y, _2195 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2197, cbModelParam._m0[11u].z, fma(_2196, cbModelParam._m0[11u].y, _2195 * cbModelParam._m0[11u].x))), _1638);
            frontier_phi_13_35_ladder = _2325.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2325.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2325.x * cbModelParam._m0[1u].y;
        }
        _1719 = frontier_phi_13_35_ladder_2;
        _1721 = frontier_phi_13_35_ladder_1;
        _1723 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_827, _828, _829), _1638);
        _1719 = _1707.x * cbModelParam._m0[1u].y;
        _1721 = _1707.y * cbModelParam._m0[1u].y;
        _1723 = _1707.z * cbModelParam._m0[1u].y;
    }
    float _1727 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _656);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1727 : min(cbModelParam._m0[25u].w, _1727));
    float _1818;
    float _1820;
    float _1822;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1782 = fma(_891, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883)) + cbModelParam._m0[21u].w;
        float _1786 = fma(_891, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883)) + cbModelParam._m0[22u].w;
        float _1790 = fma(_891, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883)) + cbModelParam._m0[23u].w;
        float _1793 = fma(_829, cbModelParam._m0[21u].z, fma(_828, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827));
        float _1796 = fma(_829, cbModelParam._m0[22u].z, fma(_828, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827));
        float _1799 = fma(_829, cbModelParam._m0[23u].z, fma(_828, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827));
        float _1939;
        if (_1793 > 0.0)
        {
            _1939 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1939 = frontier_phi_25_21_ladder;
        }
        float _2215;
        if (_1796 > 0.0)
        {
            _2215 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2215 = frontier_phi_37_32_ladder;
        }
        float _2428;
        if (_1799 > 0.0)
        {
            _2428 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2428 = frontier_phi_46_43_ladder;
        }
        float _2430 = isnan(_2215) ? _1939 : (isnan(_1939) ? _2215 : min(_1939, _2215));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1793) + _1782;
        float _2436 = (_2431 * _1796) + _1786;
        float _2437 = (_2431 * _1799) + _1790;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2438;
        float _2441 = _2438 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2437 > _2441) || ((_2437 < _2439) || ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 < _2439) || (_2435 > _2441))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2437, cbModelParam._m0[17u].z, fma(_2436, cbModelParam._m0[17u].y, _2435 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2437, cbModelParam._m0[18u].z, fma(_2436, cbModelParam._m0[18u].y, _2435 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2437, cbModelParam._m0[19u].z, fma(_2436, cbModelParam._m0[19u].y, _2435 * cbModelParam._m0[19u].x))), _1728);
            frontier_phi_22_46_ladder = _2636.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2636.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2636.x * cbModelParam._m0[1u].z;
        }
        _1818 = frontier_phi_22_46_ladder_2;
        _1820 = frontier_phi_22_46_ladder_1;
        _1822 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_827, _828, _829), _1728);
        _1818 = _1802.x * cbModelParam._m0[1u].z;
        _1820 = _1802.y * cbModelParam._m0[1u].z;
        _1822 = _1802.z * cbModelParam._m0[1u].z;
    }
    float _1835 = (((_854 * _803) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1818 - _1719)) + _1719);
    float _1837 = (((_854 * _805) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1820 - _1721)) + _1721);
    float _1839 = (((_854 * _806) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1822 - _1723)) + _1723);
    float _1842 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1837, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1837, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1837, cbSceneParam._m0[91u].y, _1835 * cbSceneParam._m0[91u].x));
    uvec4 _1858 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1860 = _1858.x * 14u;
    uint _1861 = _1860 + 13u;
    float _1868 = _819 + (-1.0);
    float _1873 = (cbLight._m0[_1861].x * _1868) + 1.0;
    float _1874 = (cbLight._m0[_1861].y * _1868) + 1.0;
    float _1875 = (cbLight._m0[_1861].z * _1868) + 1.0;
    float _1876 = (cbLight._m0[_1861].w * _1868) + 1.0;
    uint _1877 = _1860 + 5u;
    float _1883 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1887 = _1860 + 4u;
    float _1893 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
    uint _1897 = _1860 | 1u;
    float _1908 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_653, _654, _655));
    float _1911 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_653, _654, _655));
    float _4042 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _4053 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1916 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.3183098733425140380859375;
    float _1918 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1925 = ((cbLight._m0[_1877].x * _1883) * _1918) + ((cbLight._m0[_1887].x * _1893) * _1916);
    float _1926 = ((_1883 * cbLight._m0[_1877].y) * _1918) + ((_1893 * cbLight._m0[_1887].y) * _1916);
    float _1927 = ((_1883 * cbLight._m0[_1877].z) * _1918) + ((_1893 * cbLight._m0[_1887].z) * _1916);
    uvec4 _1931 = floatBitsToUint(cbLight._m0[_1860 + 12u]);
    bool _1933 = _1931.x == 0u;
    float _1944;
    float _1946;
    float _1948;
    if (_1933)
    {
        _1944 = _1925;
        _1946 = _1926;
        _1948 = _1927;
    }
    else
    {
        uint _1952 = _1860 + 6u;
        float _1968 = (dot(vec3(cbLight._m0[_1860 + 2u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _1969 = _1968 * _1968;
        float _4064 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1971 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _1944 = (((cbLight._m0[_1952].x * 0.3183098733425140380859375) * _1970) * _1971) + _1925;
        _1946 = (((cbLight._m0[_1952].y * 0.3183098733425140380859375) * _1970) * _1971) + _1926;
        _1948 = (((cbLight._m0[_1952].z * 0.3183098733425140380859375) * _1970) * _1971) + _1927;
    }
    bool _1951 = _1931.y == 0u;
    float _1989;
    float _1991;
    float _1993;
    if (_1951)
    {
        _1989 = _1944;
        _1991 = _1946;
        _1993 = _1948;
    }
    else
    {
        uint _2159 = _1860 + 7u;
        float _2175 = (dot(vec3(cbLight._m0[_1860 + 3u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2176 = _2175 * _2175;
        float _4080 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2177 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2178 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _1989 = (((cbLight._m0[_2159].x * 0.3183098733425140380859375) * _2177) * _2178) + _1944;
        _1991 = (((cbLight._m0[_2159].y * 0.3183098733425140380859375) * _2177) * _2178) + _1946;
        _1993 = (((cbLight._m0[_2159].z * 0.3183098733425140380859375) * _2177) * _2178) + _1948;
    }
    uint _1996 = _1860 + 8u;
    float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _656) * 0.949999988079071044921875);
    float _2010 = _2009 * _2009;
    float _2011 = cbLight._m0[_1860].x + _733;
    float _2012 = cbLight._m0[_1860].y + _734;
    float _2013 = cbLight._m0[_1860].z + _735;
    float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
    float _2018 = _2017 * _2011;
    float _2019 = _2017 * _2012;
    float _2020 = _2017 * _2013;
    float _2021 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1860].xyz));
    float _4096 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _2025 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _2026 = dot(vec3(_653, _654, _655), vec3(_2018, _2019, _2020));
    float _4118 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2018, _2019, _2020));
    float _4129 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2034 = _2010 * _2010;
    float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
    float _2046 = exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0);
    float _2047 = 0.959999978542327880859375 - _800;
    float _2049 = 0.959999978542327880859375 - _801;
    float _2050 = 0.959999978542327880859375 - _802;
    float _2057 = 1.0 - _2010;
    float _2068 = (0.5 / (((_2025 * ((_2024 * _2057) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2057) + _2010) * _2024))) * _2024;
    float _4140 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
    uint _2081 = _1860 + 9u;
    float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1897].w)) * _656) * 0.949999988079071044921875);
    float _2093 = _2092 * _2092;
    float _2094 = cbLight._m0[_1897].x + _733;
    float _2095 = cbLight._m0[_1897].y + _734;
    float _2096 = cbLight._m0[_1897].z + _735;
    float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
    float _2101 = _2100 * _2094;
    float _2102 = _2100 * _2095;
    float _2103 = _2100 * _2096;
    float _2104 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1897].xyz));
    float _4151 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2108 = dot(vec3(_653, _654, _655), vec3(_2101, _2102, _2103));
    float _4162 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_2101, _2102, _2103));
    float _4173 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2093 * _2093;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2127 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
    float _2134 = 1.0 - _2093;
    float _2144 = (0.5 / (((_2025 * ((_2107 * _2134) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2134) + _2093) * _2107))) * _2107;
    float _4184 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    float _2156 = (((((_2127 * _2047) + _803) * cbLight._m0[_2081].x) * _2146) * _1883) + (((((_2046 * _2047) + _803) * cbLight._m0[_1996].x) * _2070) * _1893);
    float _2157 = (((((_2127 * _2049) + _805) * cbLight._m0[_2081].y) * _2146) * _1883) + (((((_2046 * _2049) + _805) * cbLight._m0[_1996].y) * _2070) * _1893);
    float _2158 = (((((_2127 * _2050) + _806) * cbLight._m0[_2081].z) * _2146) * _1883) + (((((_2046 * _2050) + _806) * cbLight._m0[_1996].z) * _2070) * _1893);
    float _2220;
    float _2222;
    float _2224;
    if (_1933)
    {
        _2220 = _2156;
        _2222 = _2157;
        _2224 = _2158;
    }
    else
    {
        uint _2226 = _1860 + 2u;
        uint _2230 = _1860 + 10u;
        float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _656) * 0.949999988079071044921875);
        float _2245 = _2244 * _2244;
        float _2246 = cbLight._m0[_2226].x + _733;
        float _2247 = cbLight._m0[_2226].y + _734;
        float _2248 = cbLight._m0[_2226].z + _735;
        float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
        float _2253 = _2252 * _2246;
        float _2254 = _2252 * _2247;
        float _2255 = _2252 * _2248;
        float _2256 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2226].xyz));
        float _4195 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2260 = dot(vec3(_653, _654, _655), vec3(_2253, _2254, _2255));
        float _4206 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2264 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2253, _2254, _2255));
        float _4217 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2268 = _2245 * _2245;
        float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
        float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
        float _2286 = 1.0 - _2245;
        float _2296 = (0.5 / (((_2025 * ((_2259 * _2286) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2286) + _2245) * _2259))) * _2259;
        float _4228 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2298 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
        float _2299 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2220 = (((((_2279 * _2047) + _803) * cbLight._m0[_2230].x) * _2298) * _2299) + _2156;
        _2222 = (((((_2279 * _2049) + _805) * cbLight._m0[_2230].y) * _2298) * _2299) + _2157;
        _2224 = (((((_2279 * _2050) + _806) * cbLight._m0[_2230].z) * _2298) * _2299) + _2158;
    }
    float _2334;
    float _2336;
    float _2338;
    if (_1951)
    {
        _2334 = _2220;
        _2336 = _2222;
        _2338 = _2224;
    }
    else
    {
        uint _2345 = _1860 + 3u;
        uint _2349 = _1860 + 11u;
        float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _656) * 0.949999988079071044921875);
        float _2364 = _2363 * _2363;
        float _2365 = cbLight._m0[_2345].x + _733;
        float _2366 = cbLight._m0[_2345].y + _734;
        float _2367 = cbLight._m0[_2345].z + _735;
        float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
        float _2372 = _2371 * _2365;
        float _2373 = _2371 * _2366;
        float _2374 = _2371 * _2367;
        float _2375 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2345].xyz));
        float _4244 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2379 = dot(vec3(_653, _654, _655), vec3(_2372, _2373, _2374));
        float _4255 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2383 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2372, _2373, _2374));
        float _4266 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2387 = _2364 * _2364;
        float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
        float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0);
        float _2405 = 1.0 - _2364;
        float _2415 = (0.5 / (((_2025 * ((_2378 * _2405) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2405) + _2364) * _2378))) * _2378;
        float _4277 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2417 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
        float _2418 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2334 = (((((_2398 * _2047) + _803) * cbLight._m0[_2349].x) * _2417) * _2418) + _2220;
        _2336 = (((((_2398 * _2049) + _805) * cbLight._m0[_2349].y) * _2417) * _2418) + _2222;
        _2338 = (((((_2398 * _2050) + _806) * cbLight._m0[_2349].z) * _2417) * _2418) + _2224;
    }
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    if (_1858.y == 0u)
    {
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2493;
        float _2495 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2493;
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2493;
        uvec4 _2508 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2509 = _2508.x;
        uint _2520 = uint((float(_2508.y) * floor(float(uint(cbSceneParam._m0[85u].y * _742) / _2509))) + floor(float(uint(cbSceneParam._m0[85u].x * _741) / _2509)));
        float _2530 = (log2(_2496 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2531 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        uint _2534 = uint(isnan(14.0) ? _2531 : (isnan(_2531) ? 14.0 : min(_2531, 14.0)));
        uvec4 _2539 = texelFetch(g_lightClusterGridBuffer, int(((_2534 << 2u) + (_2520 << 6u)) >> 2u));
        uint _2540 = _2539.x;
        uint _2541 = _2508.z;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        if (((((1u << ((_2541 >> 4u) & 15u)) + 4294967295u) & _2540) == 0u) || ((_2541 & 240u) == 0u))
        {
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
        }
        else
        {
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            uint _2792 = 0u;
            uint _2801;
            bool _2802;
            for (;;)
            {
                _2801 = texelFetch(g_lightClassification, int((((_2534 << 5u) + (_2520 << 9u)) + (_2792 << 2u)) >> 2u)).x;
                _2802 = _2801 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2802)
                {
                    frontier_phi_61_pred = _2786;
                    frontier_phi_61_pred_1 = _2791;
                    frontier_phi_61_pred_2 = _2790;
                    frontier_phi_61_pred_3 = _2789;
                    frontier_phi_61_pred_4 = _2788;
                    frontier_phi_61_pred_5 = _2787;
                }
                else
                {
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    uint _2916;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2801;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    for (;;)
                    {
                        uint _2920 = uint(findLSB(_2916)) + (_2792 << 5u);
                        uint _2917 = (_2916 + 4294967295u) & _2916;
                        uint _2922 = _2920 * 48u;
                        vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 3u)).x));
                        uint _2942 = (_2920 * 48u) + 4u;
                        vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 3u)).x));
                        uint _2961 = (_2920 * 48u) + 8u;
                        vec3 _2972 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x));
                        float _2976 = _2936.x - _2494;
                        float _2977 = _2936.y - _2495;
                        float _2978 = _2936.z - _2496;
                        float _2979 = dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978));
                        float _2982 = inversesqrt(_2979);
                        float _2983 = _2982 * _2976;
                        float _2984 = _2982 * _2977;
                        float _2985 = _2982 * _2978;
                        float _2986 = dot(vec3(_760, _763, _766), vec3(_2983, _2984, _2985));
                        float _2991 = 1.0 - (_2979 * _2936.w);
                        float _4303 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2992 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _2993 = sqrt(_2979) * _2955.w;
                        float _2996 = 1.39999997615814208984375 / (_2993 + 1.39999997615814208984375);
                        float _2997 = _2996 * _2996;
                        float _3000 = ((1.0 - _2997) * _2986) + _2997;
                        float _3003 = _2993 * _2993;
                        float _3007 = ((isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0))) * _2992) / ((_3003 * 0.699999988079071044921875) + 1.0);
                        float _3011 = (-0.0) - _2494;
                        float _3012 = (-0.0) - _2495;
                        float _3013 = (-0.0) - _2496;
                        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
                        float _3018 = _3017 * _3011;
                        float _3019 = _3017 * _3012;
                        float _3020 = _3017 * _3013;
                        float _3028 = exp2(log2(1.0 / ((_3003 * 3.5) + 5.0)) * 0.25);
                        float _3029 = 1.0 - _835;
                        float _3036 = sqrt(1.0 - ((1.0 - (_3029 * _3029)) * (1.0 - (_3028 * _3028))));
                        float _3037 = _3036 * _3036;
                        float _3038 = _3037 * _3037;
                        float _3039 = _3018 + _2983;
                        float _3040 = _3019 + _2984;
                        float _3041 = _3020 + _2985;
                        float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
                        float _3049 = dot(vec3(_760, _763, _766), vec3(_3018, _3019, _3020));
                        float _4319 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3052 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3053 = dot(vec3(_760, _763, _766), vec3(_3045 * _3039, _3045 * _3040, _3045 * _3041));
                        float _4330 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3056 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3060 = ((_3056 * _3056) * (_3038 + (-1.0))) + 1.0;
                        float _3061 = _2996 * _3037;
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _2986) + _3062;
                        float _4341 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3067 = 1.0 - _3037;
                        float _3077 = (0.5 / (((_3066 * ((_3052 * _3067) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_3066 * _3067) + _3037) * _3052))) * _3066;
                        float _4352 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3088 = (((_3038 * 3.1415927410125732421875) * (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) / ((_3060 * _3060) * ((_3003 * 2.1991131305694580078125) + 3.141590118408203125))) * _2992;
                        _2845 = (_3007 * _2955.x) + _2913;
                        _2846 = (_3007 * _2955.y) + _2914;
                        _2847 = (_3007 * _2955.z) + _2915;
                        _2842 = (_3088 * _2972.x) + _2910;
                        _2843 = (_3088 * _2972.y) + _2911;
                        _2844 = (_3088 * _2972.z) + _2912;
                        if (_2917 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2917;
                        }
                    }
                    frontier_phi_61_pred = _2842;
                    frontier_phi_61_pred_1 = _2847;
                    frontier_phi_61_pred_2 = _2846;
                    frontier_phi_61_pred_3 = _2845;
                    frontier_phi_61_pred_4 = _2844;
                    frontier_phi_61_pred_5 = _2843;
                }
                _2642 = frontier_phi_61_pred;
                _2652 = frontier_phi_61_pred_1;
                _2650 = frontier_phi_61_pred_2;
                _2648 = frontier_phi_61_pred_3;
                _2646 = frontier_phi_61_pred_4;
                _2644 = frontier_phi_61_pred_5;
                uint _2793 = _2792 + 1u;
                if (_2793 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2786 = _2642;
                    _2787 = _2644;
                    _2788 = _2646;
                    _2789 = _2648;
                    _2790 = _2650;
                    _2791 = _2652;
                    _2792 = _2793;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
        }
        uvec4 _2655 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2656 = _2655.z;
        uint _2658 = (_2656 >> 8u) & 15u;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        if (((4294967295u << _2658) & _2540) == 0u)
        {
            _2754 = _2641;
            _2756 = _2643;
            _2758 = _2645;
            _2760 = _2647;
            _2762 = _2649;
            _2764 = _2651;
        }
        else
        {
            float _2779 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
            float _2780 = _2779 * _2494;
            float _2781 = _2779 * _2495;
            float _2782 = _2779 * _2496;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2658 < ((_2656 >> 12u) & 15u))
            {
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2893 = _2641;
                float _2894 = _2643;
                float _2895 = _2645;
                float _2896 = _2647;
                float _2897 = _2649;
                float _2898 = _2651;
                uint _2899 = _2658;
                uint _2908;
                bool _2909;
                for (;;)
                {
                    _2908 = texelFetch(g_lightClassification, int((((_2534 << 5u) + (_2520 << 9u)) + (_2899 << 2u)) >> 2u)).x;
                    _2909 = _2908 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2909)
                    {
                        frontier_phi_67_pred = _2896;
                        frontier_phi_67_pred_1 = _2897;
                        frontier_phi_67_pred_2 = _2898;
                        frontier_phi_67_pred_3 = _2895;
                        frontier_phi_67_pred_4 = _2894;
                        frontier_phi_67_pred_5 = _2893;
                    }
                    else
                    {
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3106 = _2893;
                        float _3107 = _2894;
                        float _3108 = _2895;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        uint _3112 = _2908;
                        uint _3113;
                        vec4 _3138;
                        float _3139;
                        vec4 _3154;
                        vec3 _3166;
                        vec4 _3181;
                        vec4 _3196;
                        float _3242;
                        bool _3243;
                        for (;;)
                        {
                            uint _3123 = ((_2899 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3112));
                            _3113 = (_3112 + 4294967295u) & _3112;
                            uint _3125 = _3123 * 40u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            _3139 = _3138.w;
                            uint _3141 = (_3123 * 40u) + 4u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3156 = (_3123 * 40u) + 8u;
                            _3166 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x));
                            uint _3168 = (_3123 * 40u) + 16u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3183 = (_3123 * 40u) + 20u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3198 = (_3123 * 40u) + 24u;
                            vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3217 = (_3123 * 40u) + 28u;
                            vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            _3242 = fma(_2496, _3230.z, fma(_2495, _3230.y, _3230.x * _2494)) + _3230.w;
                            _3243 = !((fma(_2496, _3211.z, fma(_2495, _3211.y, _3211.x * _2494)) + _3211.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3243)
                            {
                                float _3270 = _3138.x - _2494;
                                float _3271 = _3138.y - _2495;
                                float _3272 = _3138.z - _2496;
                                float _3273 = dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272));
                                float _3276 = inversesqrt(_3273);
                                float _3277 = _3276 * _3270;
                                float _3278 = _3276 * _3271;
                                float _3279 = _3276 * _3272;
                                float _3283 = 1.0 - (_3273 / (_3139 * _3139));
                                float _4363 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3284 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3288 = sqrt(_3273) * _3154.w;
                                float _3290 = 1.39999997615814208984375 / (_3288 + 1.39999997615814208984375);
                                float _3291 = _3290 * _3290;
                                float _3294 = ((1.0 - _3291) * dot(vec3(_3277, _3278, _3279), vec3(_760, _763, _766))) + _3291;
                                float _3297 = _3288 * _3288;
                                float _3301 = (fma(_2496, _3181.z, fma(_2495, _3181.y, _3181.x * _2494)) + _3181.w) / _3242;
                                float _3302 = (fma(_2496, _3196.z, fma(_2495, _3196.y, _3196.x * _2494)) + _3196.w) / _3242;
                                float _3306 = 1.0 - dot(vec2(_3301, _3302), vec2(_3301, _3302));
                                float _4379 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3308 = _3307 * (((isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0))) * _3284) / ((_3297 * 0.699999988079071044921875) + 1.0));
                                float _3320 = exp2(log2(1.0 / ((_3297 * 3.5) + 5.0)) * 0.25);
                                float _3321 = 1.0 - _835;
                                float _3328 = sqrt(1.0 - ((1.0 - (_3321 * _3321)) * (1.0 - (_3320 * _3320))));
                                float _3329 = _3328 * _3328;
                                float _3330 = _3329 * _3329;
                                float _3331 = _3277 - _2780;
                                float _3332 = _3278 - _2781;
                                float _3333 = _3279 - _2782;
                                float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                                float _3341 = dot(vec3(_760, _763, _766), vec3((-0.0) - _2780, (-0.0) - _2781, (-0.0) - _2782));
                                float _4390 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3344 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3345 = dot(vec3(_760, _763, _766), vec3(_3337 * _3331, _3337 * _3332, _3337 * _3333));
                                float _4401 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3352 = ((_3348 * _3348) * (_3330 + (-1.0))) + 1.0;
                                float _3353 = _3290 * _3329;
                                float _3354 = _3353 * _3353;
                                float _3360 = ((1.0 - _3354) * dot(vec3(_760, _763, _766), vec3(_3277, _3278, _3279))) + _3354;
                                float _4412 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3362 = 1.0 - _3329;
                                float _3372 = (0.5 / (((_3361 * ((_3344 * _3362) + _3329)) + 9.9999999392252902907785028219223e-09) + (((_3361 * _3362) + _3329) * _3344))) * _3361;
                                float _4423 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3382 = (_3307 * _3284) * (((_3330 * 3.1415927410125732421875) * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) / ((_3352 * _3352) * ((_3297 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3382 * _3166.x;
                                frontier_phi_73_pred_1 = _3382 * _3166.y;
                                frontier_phi_73_pred_2 = _3308 * _3154.z;
                                frontier_phi_73_pred_3 = _3308 * _3154.y;
                                frontier_phi_73_pred_4 = _3308 * _3154.x;
                                frontier_phi_73_pred_5 = _3382 * _3166.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3386 = frontier_phi_73_pred;
                            _3387 = frontier_phi_73_pred_1;
                            _3391 = frontier_phi_73_pred_2;
                            _3390 = frontier_phi_73_pred_3;
                            _3389 = frontier_phi_73_pred_4;
                            _3388 = frontier_phi_73_pred_5;
                            _3096 = _3389 + _3109;
                            _3097 = _3390 + _3110;
                            _3098 = _3391 + _3111;
                            _3093 = _3386 + _3106;
                            _3094 = _3387 + _3107;
                            _3095 = _3388 + _3108;
                            if (_3113 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3113;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3096;
                        frontier_phi_67_pred_1 = _3097;
                        frontier_phi_67_pred_2 = _3098;
                        frontier_phi_67_pred_3 = _3095;
                        frontier_phi_67_pred_4 = _3094;
                        frontier_phi_67_pred_5 = _3093;
                    }
                    _2761 = frontier_phi_67_pred;
                    _2763 = frontier_phi_67_pred_1;
                    _2765 = frontier_phi_67_pred_2;
                    _2759 = frontier_phi_67_pred_3;
                    _2757 = frontier_phi_67_pred_4;
                    _2755 = frontier_phi_67_pred_5;
                    uint _2900 = _2899 + 1u;
                    if (_2900 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2893 = _2755;
                        _2894 = _2757;
                        _2895 = _2759;
                        _2896 = _2761;
                        _2897 = _2763;
                        _2898 = _2765;
                        _2899 = _2900;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2763;
                frontier_phi_55_56_ladder_1 = _2765;
                frontier_phi_55_56_ladder_2 = _2761;
                frontier_phi_55_56_ladder_3 = _2759;
                frontier_phi_55_56_ladder_4 = _2757;
                frontier_phi_55_56_ladder_5 = _2755;
            }
            else
            {
                frontier_phi_55_56_ladder = _2649;
                frontier_phi_55_56_ladder_1 = _2651;
                frontier_phi_55_56_ladder_2 = _2647;
                frontier_phi_55_56_ladder_3 = _2645;
                frontier_phi_55_56_ladder_4 = _2643;
                frontier_phi_55_56_ladder_5 = _2641;
            }
            _2754 = frontier_phi_55_56_ladder_5;
            _2756 = frontier_phi_55_56_ladder_4;
            _2758 = frontier_phi_55_56_ladder_3;
            _2760 = frontier_phi_55_56_ladder_2;
            _2762 = frontier_phi_55_56_ladder;
            _2764 = frontier_phi_55_56_ladder_1;
        }
        float _2769 = isnan(1.0) ? _819 : (isnan(_819) ? 1.0 : min(_819, 1.0));
        _2553 = (_2769 * _2760) + _1989;
        _2555 = (_2769 * _2762) + _1991;
        _2557 = (_2769 * _2764) + _1993;
        _2559 = ((_2754 * _803) * _2769) + _2334;
        _2561 = ((_2756 * _805) * _2769) + _2336;
        _2563 = ((_2758 * _806) * _2769) + _2338;
    }
    else
    {
        _2553 = _1989;
        _2555 = _1991;
        _2557 = _1993;
        _2559 = _2334;
        _2561 = _2336;
        _2563 = _2338;
    }
    float _4439 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4450 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4461 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    uint _2583 = _240 + 6u;
    float _2591 = _741 / cbSceneParam._m0[86u].x;
    float _2592 = _742 / cbSceneParam._m0[86u].y;
    vec4 _2606 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2591, _2592, (log2((isnan(cbSceneParam._m0[77u].w) ? _675 : (isnan(_675) ? cbSceneParam._m0[77u].w : min(_675, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2608 = _2606.x;
    float _2609 = _2606.y;
    float _2610 = _2606.z;
    float _2611 = _2606.w;
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    if (_675 > cbSceneParam._m0[78u].w)
    {
        float _2666 = isnan(_675) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _675 : min(cbSceneParam._m0[80u].w, _675));
        float _2667 = _2666 / _675;
        float _2678 = _2667 * _726;
        float _2679 = _727 * _2667;
        float _2680 = (-0.0) - _2679;
        float _2682 = _2667 * _728;
        float _2684 = (cbSceneParam._m0[77u].w * _2680) / _2666;
        float _2685 = _2684 + cbSceneParam._m0[79u].w;
        float _2686 = cbSceneParam._m0[79u].w - _2679;
        float _2692 = sqrt(((_2678 * _2678) + (_2679 * _2679)) + (_2682 * _2682));
        float _2695 = (1.0 - (cbSceneParam._m0[77u].w / _2666)) * _2692;
        float _2700 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2702 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2855;
        if (abs((_2680 - _2684) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2855 = ((((_2685 > 0.0) ? exp2(_2700 * _2685) : (2.0 - exp2(_2702 * _2685))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2695;
        }
        else
        {
            float _2815 = 1.0 / cbSceneParam._m0[80u].x;
            float _2816 = isnan(_2686) ? _2685 : (isnan(_2685) ? _2686 : max(_2685, _2686));
            float _2817 = isnan(_2686) ? _2685 : (isnan(_2685) ? _2686 : min(_2685, _2686));
            float _2826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : min(_2816, 0.0));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            _2855 = ((abs(_2692 / _2680) * cbSceneParam._m0[80u].y) * ((((_2826 - _2827) * 2.0) - ((exp2(_2700 * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0)))) - exp2(_2700 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0))))) * _2815)) - ((exp2(_2702 * _2826) - exp2(_2702 * _2827)) * _2815))) + (_2695 * cbSceneParam._m0[80u].z);
        }
        vec4 _2857 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2591, _2592, 1.0), 0.0);
        float _2866 = exp2((_2855 * (-1.44269502162933349609375)) * (1.0 - _2857.w));
        float _2867 = log2(_2866);
        float _2883 = log2(_2611);
        _2704 = (exp2(_2883 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].x)) * _2857.x) / cbSceneParam._m0[78u].x)) + _2608;
        _2706 = (exp2(_2883 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].y)) * _2857.y) / cbSceneParam._m0[78u].y)) + _2609;
        _2708 = (exp2(_2883 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].z)) * _2857.z) / cbSceneParam._m0[78u].z)) + _2610;
        _2710 = _2866 * _2611;
    }
    else
    {
        _2704 = _2608;
        _2706 = _2609;
        _2708 = _2610;
        _2710 = _2611;
    }
    float _2722 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2723 = _2722 == 3.0;
    float _2724 = log2(_2710);
    float _2731 = exp2(_2724 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2553 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _819))) + ((_2559 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2732 = exp2(_2724 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2555 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _819))) + ((_2561 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2733 = exp2(_2724 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2557 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _819))) + ((_2563 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2742 = (_2722 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2742 * (_2723 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2704)));
    SV_Target.y = _2742 * (_2723 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2706)));
    SV_Target.z = _2742 * (_2723 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2708)));
    SV_Target.w = cbInstanceData._m0[_2583].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2583].w;
}


