#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1208;
float _3613;
float _3614;
float _3615;
float _3616;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _288.x * cbMtdParam._m0[9u].x;
    float _295 = _288.y * cbMtdParam._m0[9u].y;
    float _296 = _288.z * cbMtdParam._m0[9u].z;
    vec4 _315 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _335 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _365 = _361.z;
    float _369 = (_361.x * 2.0) + (-1.0);
    float _370 = (_361.y * 2.0) + (-1.0);
    float _371 = dot(vec2(_369, _370), vec2(_369, _370));
    float _3625 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _377 = sqrt(1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))));
    float _382 = _369 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_335.x * 2.0) + (-1.0)));
    float _383 = _370 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_335.y * 2.0) + (-1.0)));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _402 = _400.x;
    float _403 = 1.0 - _402;
    float _412 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _415 = ((isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : min(_412, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _424 = (_415 - ((((((_402 - _403) * cbMtdParam._m0[24u].z) + _403) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _415))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3646 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _432 = (_425 * ((_315.x * cbMtdParam._m0[18u].x) - _294)) + _294;
    float _433 = (_425 * ((_315.y * cbMtdParam._m0[18u].y) - _295)) + _295;
    float _434 = (_425 * ((_315.z * cbMtdParam._m0[18u].z) - _296)) + _296;
    vec4 _447 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _449 = _447.x;
    float _450 = 1.0 - _449;
    float _479 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_449 - _450) * cbMtdParam._m0[24u].w) + _450) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3657 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _488 = ((((cbMtdParam._m0[10u].x - _432) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _480) + _432;
    float _489 = ((((cbMtdParam._m0[10u].y - _433) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _480) + _433;
    float _490 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _434)) * _480) + _434;
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _505 = _503.x;
    float _507 = _505 - (_505 * _425);
    float _509 = _507 - (_507 * _480);
    float _514 = (((_335.z - _365) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _365;
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _535 = (_528.x * 2.0) + (-1.0);
    float _536 = (_528.y * 2.0) + (-1.0);
    float _537 = dot(vec2(_535, _536), vec2(_535, _536));
    float _3668 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _545 = (_425 * (_528.z - _514)) + _514;
    float _548 = ((cbMtdParam._m0[23u].y - _545) * _480) + _545;
    vec4 _570 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _576 = (_570.x * 2.0) + (-1.0);
    float _577 = (_570.y * 2.0) + (-1.0);
    float _578 = dot(vec2(_576, _577), vec2(_576, _577));
    float _3679 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _595 = (((_535 - _382) + (cbMtdParam._m0[21u].x * _382)) * _425) + _382;
    float _596 = (((_536 - _383) + (cbMtdParam._m0[21u].x * _383)) * _425) + _383;
    float _597 = (_425 * (sqrt(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) - _377)) + _377;
    float _608 = (((_576 - _595) + (_595 * cbMtdParam._m0[22u].z)) * _480) + _595;
    float _609 = (((_577 - _596) + (_596 * cbMtdParam._m0[22u].z)) * _480) + _596;
    float _610 = ((sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) - _597) * _480) + _597;
    float _612 = cbMtdParam._m0[22u].x + _361.w;
    float _615 = fma(_610, _236 * NORMAL.x, fma(_609, _243 * TANGENT.x, (_229 * _221) * _608));
    float _618 = fma(_610, _236 * NORMAL.y, fma(_609, _243 * TANGENT.y, (_229 * _222) * _608));
    float _621 = fma(_610, _236 * NORMAL.z, fma(_609, _243 * TANGENT.z, (_229 * _223) * _608));
    float _625 = inversesqrt(dot(vec3(_615, _618, _621), vec3(_615, _618, _621)));
    float _626 = _625 * _615;
    float _627 = _625 * _618;
    float _628 = _625 * _621;
    float _3690 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _629 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3712 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3723 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3734 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3745 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _634 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _698 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _688);
    float _699 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _688);
    float _700 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _688);
    float _704 = inversesqrt(dot(vec3(_698, _699, _700), vec3(_698, _699, _700)));
    float _705 = _698 * _704;
    float _706 = _699 * _704;
    float _707 = _700 * _704;
    vec4 _712 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _714 = _712.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _889 = sqrt(((_698 * _698) + (_699 * _699)) + (_700 * _700));
        float _895 = (cbMatDynParam._m0[5u].x * _889) + cbMatDynParam._m0[5u].y;
        float _3756 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _900 = (cbMatDynParam._m0[5u].z * _889) + cbMatDynParam._m0[5u].w;
        float _3767 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) - _896)) + _896) < ((_714 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _726 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _727 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _747 = fma(_628, cbSceneParam._m0[5u].z, fma(_627, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _626));
    float _750 = fma(_628, cbSceneParam._m0[6u].z, fma(_627, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _626));
    float _753 = fma(_628, cbSceneParam._m0[7u].z, fma(_627, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _626));
    uint _766 = _249 + 9u;
    uint _767 = _766 + uint(cbMatDynParam._m0[0u].w);
    float _773 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_767].x;
    float _774 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_767].y;
    float _775 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_767].z;
    float _3778 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _779 = 1.0 - _634;
    float _780 = _776 * _779;
    float _781 = _777 * _779;
    float _782 = _778 * _779;
    float _787 = (_776 + (-0.039999999105930328369140625)) * _634;
    float _788 = (_777 + (-0.039999999105930328369140625)) * _634;
    float _789 = (_778 + (-0.039999999105930328369140625)) * _634;
    float _790 = _787 + 0.039999999105930328369140625;
    float _792 = _788 + 0.039999999105930328369140625;
    float _793 = _789 + 0.039999999105930328369140625;
    vec4 _802 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _726, cbSceneParam._m0[86u].y * _727));
    float _806 = ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * TEXCOORD_5.w) * _802.x;
    float _807 = dot(vec3(_626, _627, _628), vec3(_705, _706, _707));
    float _810 = _807 * 2.0;
    float _814 = (_810 * _626) - _705;
    float _815 = (_810 * _627) - _706;
    float _816 = (_810 * _628) - _707;
    float _820 = abs(dot(vec3(_705, _706, _707), vec3(_626, _627, _628)));
    float _3811 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _822 = sqrt(_629);
    float _835 = exp2((_822 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_822 * 3.0));
    float _841 = (1.0 - _835) * ((_822 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _842 = _835 * _822;
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1207;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _932 = fma(_878, cbModelParam._m0[26u].z, fma(_874, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _870));
        float _936 = fma(_878, cbModelParam._m0[27u].z, fma(_874, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _870));
        float _940 = fma(_878, cbModelParam._m0[28u].z, fma(_874, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _870));
        float _965 = _870 + _626;
        float _966 = _874 + _627;
        float _967 = _878 + _628;
        float _977 = fma(_967, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965)) - _932;
        float _978 = fma(_967, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965)) - _936;
        float _979 = fma(_967, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965)) - _940;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_932 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_936 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[34u].z) + ((((((_940 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1035 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1001.x + (-0.5));
        float _1037 = _1035 * (_1001.y + (-0.5));
        float _1038 = _1035 * (_1001.z + (-0.5));
        float _1045 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1008.x + (-0.5));
        float _1047 = _1045 * (_1008.y + (-0.5));
        float _1048 = _1045 * (_1008.z + (-0.5));
        float _1055 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1015.x + (-0.5));
        float _1057 = _1055 * (_1015.y + (-0.5));
        float _1058 = _1055 * (_1015.z + (-0.5));
        float _1065 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1022.x + (-0.5));
        float _1067 = _1065 * (_1022.y + (-0.5));
        float _1068 = _1065 * (_1022.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1089 = (dot(vec3(_626, _627, _628), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1099 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3859 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1101 + 1.0))) + _1106) * _1069;
        float _1116 = _1037 * 0.5;
        float _1117 = _1047 * 0.5;
        float _1118 = _1057 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_626, _627, _628), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3892 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1143 + 1.0))) + _1148) * _1070;
        float _1158 = _1038 * 0.5;
        float _1159 = _1048 * 0.5;
        float _1160 = _1058 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_626, _627, _628), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3925 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1185 + 1.0))) + _1190) * _1071;
        _1207 = _1038;
        _1209 = _1037;
        _1210 = _1036;
        _1211 = _1048;
        _1212 = _1047;
        _1213 = _1046;
        _1214 = _1058;
        _1215 = _1057;
        _1216 = _1056;
        _1217 = _1071;
        _1218 = _1070;
        _1219 = _1069;
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _1208;
        _1209 = _1208;
        _1210 = _1208;
        _1211 = _1208;
        _1212 = _1208;
        _1213 = _1208;
        _1214 = _1208;
        _1215 = _1208;
        _1216 = _1208;
        _1217 = _1208;
        _1218 = _1208;
        _1219 = _1208;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1250 = fma(_878, cbModelParam._m0[30u].z, fma(_874, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _870));
        float _1254 = fma(_878, cbModelParam._m0[31u].z, fma(_874, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _870));
        float _1258 = fma(_878, cbModelParam._m0[32u].z, fma(_874, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _870));
        float _1281 = _870 + _626;
        float _1282 = _874 + _627;
        float _1283 = _878 + _628;
        float _1293 = fma(_1283, cbModelParam._m0[30u].z, fma(_1282, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1281)) - _1250;
        float _1294 = fma(_1283, cbModelParam._m0[31u].z, fma(_1282, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1281)) - _1254;
        float _1295 = fma(_1283, cbModelParam._m0[32u].z, fma(_1282, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1281)) - _1258;
        float _1299 = inversesqrt(dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295)));
        float _1312 = ((_1299 * _1293) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1250 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1299 * _1294) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1254 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1299 * _1295) / cbModelParam._m0[35u].z) + ((((((_1258 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        float _1349 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1316.x + (-0.5));
        float _1351 = _1349 * (_1316.y + (-0.5));
        float _1352 = _1349 * (_1316.z + (-0.5));
        float _1359 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1323.x + (-0.5));
        float _1361 = _1359 * (_1323.y + (-0.5));
        float _1362 = _1359 * (_1323.z + (-0.5));
        float _1369 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1330.x + (-0.5));
        float _1371 = _1369 * (_1330.y + (-0.5));
        float _1372 = _1369 * (_1330.z + (-0.5));
        float _1379 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1337.x + (-0.5));
        float _1381 = _1379 * (_1337.y + (-0.5));
        float _1382 = _1379 * (_1337.z + (-0.5));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = _1350 * 0.5;
        float _1387 = _1360 * 0.5;
        float _1388 = _1370 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_626, _627, _628), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3988 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1413 + 1.0))) + _1418) * _1383;
        float _1428 = _1351 * 0.5;
        float _1429 = _1361 * 0.5;
        float _1430 = _1371 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_626, _627, _628), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4021 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1455 + 1.0))) + _1460) * _1384;
        float _1470 = _1352 * 0.5;
        float _1471 = _1362 * 0.5;
        float _1472 = _1372 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_626, _627, _628), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4054 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1497 + 1.0))) + _1502) * _1385;
        _1519 = _1352;
        _1520 = _1351;
        _1521 = _1350;
        _1522 = _1362;
        _1523 = _1361;
        _1524 = _1360;
        _1525 = _1372;
        _1526 = _1371;
        _1527 = _1370;
        _1528 = _1385;
        _1529 = _1384;
        _1530 = _1383;
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1533 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
    }
    else
    {
        _1519 = _1208;
        _1520 = _1208;
        _1521 = _1208;
        _1522 = _1208;
        _1523 = _1208;
        _1524 = _1208;
        _1525 = _1208;
        _1526 = _1208;
        _1527 = _1208;
        _1528 = _1208;
        _1529 = _1208;
        _1530 = _1208;
        _1531 = 0.0;
        _1532 = 0.0;
        _1533 = 0.0;
    }
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1220)) + _1220;
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1221)) + _1221;
    float _1545 = (cbModelParam._m0[1u].x * (_1533 - _1222)) + _1222;
    float _1566 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1544, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1569 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1544, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1572 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1544, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1543));
    float _1587 = _814 * 0.5;
    float _1588 = _815 * 0.5;
    float _1589 = _816 * 0.5;
    float _1590 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1521, _1524, _1527, _1530));
    float _1593 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1596 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1630;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1603 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1207, _1211, _1214, _1217));
        float _1607 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1611 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1210, _1213, _1216, _1219));
        float _1618 = dot(vec4(cbModelParam._m0[39u]), vec4(_1587, _1588, _1589, 1.0));
        _1630 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1630 = 1.0;
    }
    float _1641;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1632 = dot(vec4(cbModelParam._m0[40u]), vec4(_1587, _1588, _1589, 1.0));
        _1641 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1641 = 1.0;
    }
    float _1645 = (_1641 * cbModelParam._m0[1u].x) + (_1630 * (1.0 - cbModelParam._m0[1u].x));
    float _1655 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _629);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1655 : min(cbModelParam._m0[25u].z, _1655));
    float _1736;
    float _1738;
    float _1740;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1703 = fma(_878, cbModelParam._m0[13u].z, fma(_874, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _870)) + cbModelParam._m0[13u].w;
        float _1707 = fma(_878, cbModelParam._m0[14u].z, fma(_874, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _870)) + cbModelParam._m0[14u].w;
        float _1711 = fma(_878, cbModelParam._m0[15u].z, fma(_874, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _870)) + cbModelParam._m0[15u].w;
        float _1714 = fma(_816, cbModelParam._m0[13u].z, fma(_815, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814));
        float _1717 = fma(_816, cbModelParam._m0[14u].z, fma(_815, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814));
        float _1720 = fma(_816, cbModelParam._m0[15u].z, fma(_815, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814));
        float _1748;
        if (_1714 > 0.0)
        {
            _1748 = abs((1.0 - _1703) / _1714);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1703 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1748 = frontier_phi_17_15_ladder;
        }
        float _1972;
        if (_1717 > 0.0)
        {
            _1972 = abs((1.0 - _1707) / _1717);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1707 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1972 = frontier_phi_26_22_ladder;
        }
        float _2229;
        if (_1720 > 0.0)
        {
            _2229 = abs((1.0 - _1711) / _1720);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1711 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2229 = frontier_phi_38_33_ladder;
        }
        float _2231 = isnan(_1972) ? _1748 : (isnan(_1748) ? _1972 : min(_1748, _1972));
        float _2232 = isnan(_2229) ? _2231 : (isnan(_2231) ? _2229 : min(_2231, _2229));
        float _2236 = (_2232 * _1714) + _1703;
        float _2237 = (_2232 * _1717) + _1707;
        float _2238 = (_2232 * _1720) + _1711;
        float _2239 = _2232 * 9.9999997473787516355514526367188e-05;
        float _2241 = (-1.0) - _2239;
        float _2243 = _2239 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2238 > _2243) || ((_2238 < _2241) || ((_2237 > _2243) || ((_2237 < _2241) || ((_2236 < _2241) || (_2236 > _2243))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2366 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2238, cbModelParam._m0[9u].z, fma(_2237, cbModelParam._m0[9u].y, _2236 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2238, cbModelParam._m0[10u].z, fma(_2237, cbModelParam._m0[10u].y, _2236 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2238, cbModelParam._m0[11u].z, fma(_2237, cbModelParam._m0[11u].y, _2236 * cbModelParam._m0[11u].x))), _1656);
            frontier_phi_16_38_ladder = _2366.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2366.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2366.x * cbModelParam._m0[1u].y;
        }
        _1736 = frontier_phi_16_38_ladder_2;
        _1738 = frontier_phi_16_38_ladder_1;
        _1740 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_814, _815, _816), _1656);
        _1736 = _1724.x * cbModelParam._m0[1u].y;
        _1738 = _1724.y * cbModelParam._m0[1u].y;
        _1740 = _1724.z * cbModelParam._m0[1u].y;
    }
    float _1744 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _629);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1744 : min(cbModelParam._m0[25u].w, _1744));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1798 = fma(_878, cbModelParam._m0[21u].z, fma(_874, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _870)) + cbModelParam._m0[21u].w;
        float _1802 = fma(_878, cbModelParam._m0[22u].z, fma(_874, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _870)) + cbModelParam._m0[22u].w;
        float _1806 = fma(_878, cbModelParam._m0[23u].z, fma(_874, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _870)) + cbModelParam._m0[23u].w;
        float _1809 = fma(_816, cbModelParam._m0[21u].z, fma(_815, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814));
        float _1812 = fma(_816, cbModelParam._m0[22u].z, fma(_815, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814));
        float _1815 = fma(_816, cbModelParam._m0[23u].z, fma(_815, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814));
        float _1977;
        if (_1809 > 0.0)
        {
            _1977 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1977 = frontier_phi_28_24_ladder;
        }
        float _2256;
        if (_1812 > 0.0)
        {
            _2256 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2256 = frontier_phi_40_35_ladder;
        }
        float _2469;
        if (_1815 > 0.0)
        {
            _2469 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2469 = frontier_phi_49_46_ladder;
        }
        float _2471 = isnan(_2256) ? _1977 : (isnan(_1977) ? _2256 : min(_1977, _2256));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1809) + _1798;
        float _2477 = (_2472 * _1812) + _1802;
        float _2478 = (_2472 * _1815) + _1806;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2480 = (-1.0) - _2479;
        float _2482 = _2479 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2478 > _2482) || ((_2478 < _2480) || ((_2477 > _2482) || ((_2477 < _2480) || ((_2476 < _2480) || (_2476 > _2482))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2478, cbModelParam._m0[17u].z, fma(_2477, cbModelParam._m0[17u].y, _2476 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2478, cbModelParam._m0[18u].z, fma(_2477, cbModelParam._m0[18u].y, _2476 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2478, cbModelParam._m0[19u].z, fma(_2477, cbModelParam._m0[19u].y, _2476 * cbModelParam._m0[19u].x))), _1745);
            frontier_phi_25_49_ladder = _2677.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2677.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2677.x * cbModelParam._m0[1u].z;
        }
        _1834 = frontier_phi_25_49_ladder_2;
        _1836 = frontier_phi_25_49_ladder_1;
        _1838 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_814, _815, _816), _1745);
        _1834 = _1818.x * cbModelParam._m0[1u].z;
        _1836 = _1818.y * cbModelParam._m0[1u].z;
        _1838 = _1818.z * cbModelParam._m0[1u].z;
    }
    float _1851 = (((_841 * _790) + _842) * _806) * ((cbModelParam._m0[1u].w * (_1834 - _1736)) + _1736);
    float _1853 = (((_841 * _792) + _842) * _806) * ((cbModelParam._m0[1u].w * (_1836 - _1738)) + _1738);
    float _1855 = (((_841 * _793) + _842) * _806) * ((cbModelParam._m0[1u].w * (_1838 - _1740)) + _1740);
    float _1858 = fma(_1855, cbSceneParam._m0[89u].z, fma(_1853, cbSceneParam._m0[89u].y, _1851 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1855, cbSceneParam._m0[90u].z, fma(_1853, cbSceneParam._m0[90u].y, _1851 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1855, cbSceneParam._m0[91u].z, fma(_1853, cbSceneParam._m0[91u].y, _1851 * cbSceneParam._m0[91u].x));
    vec4 _1872 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_726, _727));
    float _1874 = _1872.w;
    float _1886 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1874);
    float _1887 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1874);
    float _1888 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1874);
    uvec4 _1892 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1894 = _1892.x * 14u;
    uint _1895 = _1894 + 13u;
    float _1902 = _806 + (-1.0);
    float _1907 = (cbLight._m0[_1895].x * _1902) + 1.0;
    float _1908 = (cbLight._m0[_1895].y * _1902) + 1.0;
    float _1909 = (cbLight._m0[_1895].z * _1902) + 1.0;
    float _1910 = (cbLight._m0[_1895].w * _1902) + 1.0;
    uint _1911 = _1894 + 5u;
    float _1917 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
    uint _1921 = _1894 + 4u;
    float _1931 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1935 = _1894 | 1u;
    float _1946 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_626, _627, _628));
    float _1949 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_626, _627, _628));
    float _4190 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _4201 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1954 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.3183098733425140380859375;
    float _1956 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * 0.3183098733425140380859375;
    float _1963 = ((cbLight._m0[_1911].x * _1917) * _1956) + (((cbLight._m0[_1921].x * _1886) * _1931) * _1954);
    float _1964 = ((_1917 * cbLight._m0[_1911].y) * _1956) + (((cbLight._m0[_1921].y * _1887) * _1931) * _1954);
    float _1965 = ((_1917 * cbLight._m0[_1911].z) * _1956) + (((cbLight._m0[_1921].z * _1888) * _1931) * _1954);
    uvec4 _1969 = floatBitsToUint(cbLight._m0[_1894 + 12u]);
    bool _1971 = _1969.x == 0u;
    float _1982;
    float _1984;
    float _1986;
    if (_1971)
    {
        _1982 = _1963;
        _1984 = _1964;
        _1986 = _1965;
    }
    else
    {
        uint _1990 = _1894 + 6u;
        float _2006 = (dot(vec3(cbLight._m0[_1894 + 2u].xyz), vec3(_626, _627, _628)) * 0.5) + 0.5;
        float _2007 = _2006 * _2006;
        float _4212 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2008 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2009 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _1982 = (((cbLight._m0[_1990].x * 0.3183098733425140380859375) * _2008) * _2009) + _1963;
        _1984 = (((cbLight._m0[_1990].y * 0.3183098733425140380859375) * _2008) * _2009) + _1964;
        _1986 = (((cbLight._m0[_1990].z * 0.3183098733425140380859375) * _2008) * _2009) + _1965;
    }
    bool _1989 = _1969.y == 0u;
    float _2027;
    float _2029;
    float _2031;
    if (_1989)
    {
        _2027 = _1982;
        _2029 = _1984;
        _2031 = _1986;
    }
    else
    {
        uint _2200 = _1894 + 7u;
        float _2216 = (dot(vec3(cbLight._m0[_1894 + 3u].xyz), vec3(_626, _627, _628)) * 0.5) + 0.5;
        float _2217 = _2216 * _2216;
        float _4228 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2218 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2219 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2027 = (((cbLight._m0[_2200].x * 0.3183098733425140380859375) * _2218) * _2219) + _1982;
        _2029 = (((cbLight._m0[_2200].y * 0.3183098733425140380859375) * _2218) * _2219) + _1984;
        _2031 = (((cbLight._m0[_2200].z * 0.3183098733425140380859375) * _2218) * _2219) + _1986;
    }
    uint _2034 = _1894 + 8u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _629) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1894].x + _705;
    float _2050 = cbLight._m0[_1894].y + _706;
    float _2051 = cbLight._m0[_1894].z + _707;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_1894].xyz));
    float _4244 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _2063 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2064 = dot(vec3(_626, _627, _628), vec3(_2056, _2057, _2058));
    float _4266 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_2056, _2057, _2058));
    float _4277 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2048 * _2048;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2084 = exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0);
    float _2085 = 0.959999978542327880859375 - _787;
    float _2087 = 0.959999978542327880859375 - _788;
    float _2088 = 0.959999978542327880859375 - _789;
    float _2095 = 1.0 - _2048;
    float _2106 = (0.5 / (((_2063 * ((_2062 * _2095) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2095) + _2048) * _2062))) * _2062;
    float _4288 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2108 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    uint _2122 = _1894 + 9u;
    float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _629) * 0.949999988079071044921875);
    float _2134 = _2133 * _2133;
    float _2135 = cbLight._m0[_1935].x + _705;
    float _2136 = cbLight._m0[_1935].y + _706;
    float _2137 = cbLight._m0[_1935].z + _707;
    float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
    float _2142 = _2141 * _2135;
    float _2143 = _2141 * _2136;
    float _2144 = _2141 * _2137;
    float _2145 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_1935].xyz));
    float _4299 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2149 = dot(vec3(_626, _627, _628), vec3(_2142, _2143, _2144));
    float _4310 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_2142, _2143, _2144));
    float _4321 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2134 * _2134;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2168 = exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0);
    float _2175 = 1.0 - _2134;
    float _2185 = (0.5 / (((_2063 * ((_2148 * _2175) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2175) + _2134) * _2148))) * _2148;
    float _4332 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2187 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    float _2197 = (((((_2168 * _2085) + _790) * cbLight._m0[_2122].x) * _2187) * _1917) + ((((cbLight._m0[_2034].x * _1886) * ((_2084 * _2085) + _790)) * _2108) * _1931);
    float _2198 = (((((_2168 * _2087) + _792) * cbLight._m0[_2122].y) * _2187) * _1917) + ((((cbLight._m0[_2034].y * _1887) * ((_2084 * _2087) + _792)) * _2108) * _1931);
    float _2199 = (((((_2168 * _2088) + _793) * cbLight._m0[_2122].z) * _2187) * _1917) + ((((cbLight._m0[_2034].z * _1888) * ((_2084 * _2088) + _793)) * _2108) * _1931);
    float _2261;
    float _2263;
    float _2265;
    if (_1971)
    {
        _2261 = _2197;
        _2263 = _2198;
        _2265 = _2199;
    }
    else
    {
        uint _2267 = _1894 + 2u;
        uint _2271 = _1894 + 10u;
        float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _629) * 0.949999988079071044921875);
        float _2286 = _2285 * _2285;
        float _2287 = cbLight._m0[_2267].x + _705;
        float _2288 = cbLight._m0[_2267].y + _706;
        float _2289 = cbLight._m0[_2267].z + _707;
        float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
        float _2294 = _2293 * _2287;
        float _2295 = _2293 * _2288;
        float _2296 = _2293 * _2289;
        float _2297 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_2267].xyz));
        float _4343 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2301 = dot(vec3(_626, _627, _628), vec3(_2294, _2295, _2296));
        float _4354 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2305 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2294, _2295, _2296));
        float _4365 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2309 = _2286 * _2286;
        float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
        float _2320 = exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0);
        float _2327 = 1.0 - _2286;
        float _2337 = (0.5 / (((_2063 * ((_2300 * _2327) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2327) + _2286) * _2300))) * _2300;
        float _4376 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2339 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
        float _2340 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2261 = (((((_2320 * _2085) + _790) * cbLight._m0[_2271].x) * _2339) * _2340) + _2197;
        _2263 = (((((_2320 * _2087) + _792) * cbLight._m0[_2271].y) * _2339) * _2340) + _2198;
        _2265 = (((((_2320 * _2088) + _793) * cbLight._m0[_2271].z) * _2339) * _2340) + _2199;
    }
    float _2375;
    float _2377;
    float _2379;
    if (_1989)
    {
        _2375 = _2261;
        _2377 = _2263;
        _2379 = _2265;
    }
    else
    {
        uint _2386 = _1894 + 3u;
        uint _2390 = _1894 + 11u;
        float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _629) * 0.949999988079071044921875);
        float _2405 = _2404 * _2404;
        float _2406 = cbLight._m0[_2386].x + _705;
        float _2407 = cbLight._m0[_2386].y + _706;
        float _2408 = cbLight._m0[_2386].z + _707;
        float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
        float _2413 = _2412 * _2406;
        float _2414 = _2412 * _2407;
        float _2415 = _2412 * _2408;
        float _2416 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_2386].xyz));
        float _4392 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2420 = dot(vec3(_626, _627, _628), vec3(_2413, _2414, _2415));
        float _4403 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2424 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2413, _2414, _2415));
        float _4414 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2428 = _2405 * _2405;
        float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
        float _2439 = exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0);
        float _2446 = 1.0 - _2405;
        float _2456 = (0.5 / (((_2063 * ((_2419 * _2446) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2446) + _2405) * _2419))) * _2419;
        float _4425 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2458 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
        float _2459 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2375 = (((((_2439 * _2085) + _790) * cbLight._m0[_2390].x) * _2458) * _2459) + _2261;
        _2377 = (((((_2439 * _2087) + _792) * cbLight._m0[_2390].y) * _2458) * _2459) + _2263;
        _2379 = (((((_2439 * _2088) + _793) * cbLight._m0[_2390].z) * _2458) * _2459) + _2265;
    }
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    if (_1892.y == 0u)
    {
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2534;
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2534;
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2534;
        uvec4 _2549 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2550 = _2549.x;
        uint _2561 = uint((float(_2549.y) * floor(float(uint(cbSceneParam._m0[85u].y * _727) / _2550))) + floor(float(uint(cbSceneParam._m0[85u].x * _726) / _2550)));
        float _2571 = (log2(_2537 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2572 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        uint _2575 = uint(isnan(14.0) ? _2572 : (isnan(_2572) ? 14.0 : min(_2572, 14.0)));
        uvec4 _2580 = texelFetch(g_lightClusterGridBuffer, int(((_2575 << 2u) + (_2561 << 6u)) >> 2u));
        uint _2581 = _2580.x;
        uint _2582 = _2549.z;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        if (((((1u << ((_2582 >> 4u) & 15u)) + 4294967295u) & _2581) == 0u) || ((_2582 & 240u) == 0u))
        {
            _2682 = 0.0;
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
        }
        else
        {
            float _2683;
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            uint _2841 = 0u;
            uint _2850;
            bool _2851;
            for (;;)
            {
                _2850 = texelFetch(g_lightClassification, int((((_2575 << 5u) + (_2561 << 9u)) + (_2841 << 2u)) >> 2u)).x;
                _2851 = _2850 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2851)
                {
                    frontier_phi_66_pred = _2835;
                    frontier_phi_66_pred_1 = _2840;
                    frontier_phi_66_pred_2 = _2839;
                    frontier_phi_66_pred_3 = _2838;
                    frontier_phi_66_pred_4 = _2837;
                    frontier_phi_66_pred_5 = _2836;
                }
                else
                {
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    uint _2986;
                    _2980 = _2835;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2850;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    for (;;)
                    {
                        uint _2990 = uint(findLSB(_2986)) + (_2841 << 5u);
                        uint _2987 = (_2986 + 4294967295u) & _2986;
                        uint _2992 = _2990 * 48u;
                        vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2992)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 3u)).x));
                        uint _3012 = (_2990 * 48u) + 4u;
                        vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 3u)).x));
                        uint _3031 = (_2990 * 48u) + 8u;
                        vec3 _3042 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3031)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 2u)).x));
                        float _3046 = _3006.x - _2535;
                        float _3047 = _3006.y - _2536;
                        float _3048 = _3006.z - _2537;
                        float _3049 = dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048));
                        float _3052 = inversesqrt(_3049);
                        float _3053 = _3052 * _3046;
                        float _3054 = _3052 * _3047;
                        float _3055 = _3052 * _3048;
                        float _3056 = dot(vec3(_747, _750, _753), vec3(_3053, _3054, _3055));
                        float _3061 = 1.0 - (_3049 * _3006.w);
                        float _4451 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3062 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3063 = sqrt(_3049) * _3025.w;
                        float _3066 = 1.39999997615814208984375 / (_3063 + 1.39999997615814208984375);
                        float _3067 = _3066 * _3066;
                        float _3070 = ((1.0 - _3067) * _3056) + _3067;
                        float _3073 = _3063 * _3063;
                        float _3077 = ((isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))) * _3062) / ((_3073 * 0.699999988079071044921875) + 1.0);
                        float _3081 = (-0.0) - _2535;
                        float _3082 = (-0.0) - _2536;
                        float _3083 = (-0.0) - _2537;
                        float _3087 = inversesqrt(dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083)));
                        float _3088 = _3087 * _3081;
                        float _3089 = _3087 * _3082;
                        float _3090 = _3087 * _3083;
                        float _3098 = exp2(log2(1.0 / ((_3073 * 3.5) + 5.0)) * 0.25);
                        float _3099 = 1.0 - _822;
                        float _3106 = sqrt(1.0 - ((1.0 - (_3099 * _3099)) * (1.0 - (_3098 * _3098))));
                        float _3107 = _3106 * _3106;
                        float _3108 = _3107 * _3107;
                        float _3109 = _3088 + _3053;
                        float _3110 = _3089 + _3054;
                        float _3111 = _3090 + _3055;
                        float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                        float _3119 = dot(vec3(_747, _750, _753), vec3(_3088, _3089, _3090));
                        float _4467 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3122 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3123 = dot(vec3(_747, _750, _753), vec3(_3115 * _3109, _3115 * _3110, _3115 * _3111));
                        float _4478 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3126 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3130 = ((_3126 * _3126) * (_3108 + (-1.0))) + 1.0;
                        float _3131 = _3066 * _3107;
                        float _3132 = _3131 * _3131;
                        float _3135 = ((1.0 - _3132) * _3056) + _3132;
                        float _4489 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3137 = 1.0 - _3107;
                        float _3147 = (0.5 / (((_3136 * ((_3122 * _3137) + _3107)) + 9.9999999392252902907785028219223e-09) + (((_3136 * _3137) + _3107) * _3122))) * _3136;
                        float _4500 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3158 = (((_3108 * 3.1415927410125732421875) * (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) / ((_3130 * _3130) * ((_3073 * 2.1991131305694580078125) + 3.141590118408203125))) * _3062;
                        _2910 = (_3077 * _3025.x) + _2983;
                        _2911 = (_3077 * _3025.y) + _2984;
                        _2912 = (_3077 * _3025.z) + _2985;
                        _2907 = (_3158 * _3042.x) + _2980;
                        _2908 = (_3158 * _3042.y) + _2981;
                        _2909 = (_3158 * _3042.z) + _2982;
                        if (_2987 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2980 = _2907;
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2987;
                        }
                    }
                    frontier_phi_66_pred = _2907;
                    frontier_phi_66_pred_1 = _2912;
                    frontier_phi_66_pred_2 = _2911;
                    frontier_phi_66_pred_3 = _2910;
                    frontier_phi_66_pred_4 = _2909;
                    frontier_phi_66_pred_5 = _2908;
                }
                _2683 = frontier_phi_66_pred;
                _2693 = frontier_phi_66_pred_1;
                _2691 = frontier_phi_66_pred_2;
                _2689 = frontier_phi_66_pred_3;
                _2687 = frontier_phi_66_pred_4;
                _2685 = frontier_phi_66_pred_5;
                uint _2842 = _2841 + 1u;
                if (_2842 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2835 = _2683;
                    _2836 = _2685;
                    _2837 = _2687;
                    _2838 = _2689;
                    _2839 = _2691;
                    _2840 = _2693;
                    _2841 = _2842;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2682 = _2683;
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
        }
        uvec4 _2696 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2697 = _2696.z;
        uint _2699 = (_2697 >> 8u) & 15u;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        if (((4294967295u << _2699) & _2581) == 0u)
        {
            _2803 = _2682;
            _2805 = _2684;
            _2807 = _2686;
            _2809 = _2688;
            _2811 = _2690;
            _2813 = _2692;
        }
        else
        {
            float _2828 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
            float _2829 = _2828 * _2535;
            float _2830 = _2828 * _2536;
            float _2831 = _2828 * _2537;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2699 < ((_2697 >> 12u) & 15u))
            {
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2963 = _2682;
                float _2964 = _2684;
                float _2965 = _2686;
                float _2966 = _2688;
                float _2967 = _2690;
                float _2968 = _2692;
                uint _2969 = _2699;
                uint _2978;
                bool _2979;
                for (;;)
                {
                    _2978 = texelFetch(g_lightClassification, int((((_2575 << 5u) + (_2561 << 9u)) + (_2969 << 2u)) >> 2u)).x;
                    _2979 = _2978 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2979)
                    {
                        frontier_phi_77_pred = _2968;
                        frontier_phi_77_pred_1 = _2967;
                        frontier_phi_77_pred_2 = _2966;
                        frontier_phi_77_pred_3 = _2965;
                        frontier_phi_77_pred_4 = _2964;
                        frontier_phi_77_pred_5 = _2963;
                    }
                    else
                    {
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3185 = _2963;
                        float _3186 = _2964;
                        float _3187 = _2965;
                        float _3188 = _2966;
                        float _3189 = _2967;
                        float _3190 = _2968;
                        uint _3191 = _2978;
                        uint _3192;
                        vec4 _3217;
                        float _3218;
                        vec4 _3233;
                        vec3 _3245;
                        vec4 _3261;
                        vec4 _3276;
                        float _3322;
                        bool _3323;
                        for (;;)
                        {
                            uint _3202 = ((_2969 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3191));
                            _3192 = (_3191 + 4294967295u) & _3191;
                            uint _3204 = _3202 * 40u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3218 = _3217.w;
                            uint _3220 = (_3202 * 40u) + 4u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3235 = (_3202 * 40u) + 8u;
                            _3245 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x));
                            uint _3248 = (_3202 * 40u) + 16u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3202 * 40u) + 20u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3278 = (_3202 * 40u) + 24u;
                            vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3297 = (_3202 * 40u) + 28u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3322 = fma(_2537, _3310.z, fma(_2536, _3310.y, _3310.x * _2535)) + _3310.w;
                            _3323 = !((fma(_2537, _3291.z, fma(_2536, _3291.y, _3291.x * _2535)) + _3291.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3323)
                            {
                                float _3350 = _3217.x - _2535;
                                float _3351 = _3217.y - _2536;
                                float _3352 = _3217.z - _2537;
                                float _3353 = dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352));
                                float _3356 = inversesqrt(_3353);
                                float _3357 = _3356 * _3350;
                                float _3358 = _3356 * _3351;
                                float _3359 = _3356 * _3352;
                                float _3363 = 1.0 - (_3353 / (_3218 * _3218));
                                float _4511 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3368 = sqrt(_3353) * _3233.w;
                                float _3370 = 1.39999997615814208984375 / (_3368 + 1.39999997615814208984375);
                                float _3371 = _3370 * _3370;
                                float _3374 = ((1.0 - _3371) * dot(vec3(_3357, _3358, _3359), vec3(_747, _750, _753))) + _3371;
                                float _3377 = _3368 * _3368;
                                float _3381 = (fma(_2537, _3261.z, fma(_2536, _3261.y, _3261.x * _2535)) + _3261.w) / _3322;
                                float _3382 = (fma(_2537, _3276.z, fma(_2536, _3276.y, _3276.x * _2535)) + _3276.w) / _3322;
                                float _3386 = 1.0 - dot(vec2(_3381, _3382), vec2(_3381, _3382));
                                float _4527 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3388 = _3387 * (((isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0))) * _3364) / ((_3377 * 0.699999988079071044921875) + 1.0));
                                float _3400 = exp2(log2(1.0 / ((_3377 * 3.5) + 5.0)) * 0.25);
                                float _3401 = 1.0 - _822;
                                float _3408 = sqrt(1.0 - ((1.0 - (_3401 * _3401)) * (1.0 - (_3400 * _3400))));
                                float _3409 = _3408 * _3408;
                                float _3410 = _3409 * _3409;
                                float _3411 = _3357 - _2829;
                                float _3412 = _3358 - _2830;
                                float _3413 = _3359 - _2831;
                                float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                                float _3421 = dot(vec3(_747, _750, _753), vec3((-0.0) - _2829, (-0.0) - _2830, (-0.0) - _2831));
                                float _4538 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3424 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3425 = dot(vec3(_747, _750, _753), vec3(_3417 * _3411, _3417 * _3412, _3417 * _3413));
                                float _4549 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3428 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3432 = ((_3428 * _3428) * (_3410 + (-1.0))) + 1.0;
                                float _3433 = _3370 * _3409;
                                float _3434 = _3433 * _3433;
                                float _3440 = ((1.0 - _3434) * dot(vec3(_747, _750, _753), vec3(_3357, _3358, _3359))) + _3434;
                                float _4560 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3442 = 1.0 - _3409;
                                float _3452 = (0.5 / (((_3441 * ((_3424 * _3442) + _3409)) + 9.9999999392252902907785028219223e-09) + (((_3441 * _3442) + _3409) * _3424))) * _3441;
                                float _4571 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3462 = (_3387 * _3364) * (((_3410 * 3.1415927410125732421875) * (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) / ((_3432 * _3432) * ((_3377 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3388 * _3233.y;
                                frontier_phi_83_pred_1 = _3388 * _3233.x;
                                frontier_phi_83_pred_2 = _3462 * _3245.z;
                                frontier_phi_83_pred_3 = _3462 * _3245.y;
                                frontier_phi_83_pred_4 = _3462 * _3245.x;
                                frontier_phi_83_pred_5 = _3388 * _3233.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3470 = frontier_phi_83_pred;
                            _3469 = frontier_phi_83_pred_1;
                            _3468 = frontier_phi_83_pred_2;
                            _3467 = frontier_phi_83_pred_3;
                            _3466 = frontier_phi_83_pred_4;
                            _3471 = frontier_phi_83_pred_5;
                            _3175 = _3469 + _3188;
                            _3176 = _3470 + _3189;
                            _3177 = _3471 + _3190;
                            _3172 = _3466 + _3185;
                            _3173 = _3467 + _3186;
                            _3174 = _3468 + _3187;
                            if (_3192 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3192;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3177;
                        frontier_phi_77_pred_1 = _3176;
                        frontier_phi_77_pred_2 = _3175;
                        frontier_phi_77_pred_3 = _3174;
                        frontier_phi_77_pred_4 = _3173;
                        frontier_phi_77_pred_5 = _3172;
                    }
                    _2814 = frontier_phi_77_pred;
                    _2812 = frontier_phi_77_pred_1;
                    _2810 = frontier_phi_77_pred_2;
                    _2808 = frontier_phi_77_pred_3;
                    _2806 = frontier_phi_77_pred_4;
                    _2804 = frontier_phi_77_pred_5;
                    uint _2970 = _2969 + 1u;
                    if (_2970 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2963 = _2804;
                        _2964 = _2806;
                        _2965 = _2808;
                        _2966 = _2810;
                        _2967 = _2812;
                        _2968 = _2814;
                        _2969 = _2970;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2808;
                frontier_phi_58_59_ladder_1 = _2814;
                frontier_phi_58_59_ladder_2 = _2812;
                frontier_phi_58_59_ladder_3 = _2810;
                frontier_phi_58_59_ladder_4 = _2806;
                frontier_phi_58_59_ladder_5 = _2804;
            }
            else
            {
                frontier_phi_58_59_ladder = _2686;
                frontier_phi_58_59_ladder_1 = _2692;
                frontier_phi_58_59_ladder_2 = _2690;
                frontier_phi_58_59_ladder_3 = _2688;
                frontier_phi_58_59_ladder_4 = _2684;
                frontier_phi_58_59_ladder_5 = _2682;
            }
            _2803 = frontier_phi_58_59_ladder_5;
            _2805 = frontier_phi_58_59_ladder_4;
            _2807 = frontier_phi_58_59_ladder;
            _2809 = frontier_phi_58_59_ladder_3;
            _2811 = frontier_phi_58_59_ladder_2;
            _2813 = frontier_phi_58_59_ladder_1;
        }
        float _2818 = isnan(1.0) ? _806 : (isnan(_806) ? 1.0 : min(_806, 1.0));
        _2594 = (_2818 * _2809) + _2027;
        _2596 = (_2818 * _2811) + _2029;
        _2598 = (_2818 * _2813) + _2031;
        _2600 = ((_2803 * _790) * _2818) + _2375;
        _2602 = ((_2805 * _792) * _2818) + _2377;
        _2604 = ((_2807 * _793) * _2818) + _2379;
    }
    else
    {
        _2594 = _2027;
        _2596 = _2029;
        _2598 = _2031;
        _2600 = _2375;
        _2602 = _2377;
        _2604 = _2379;
    }
    float _4587 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4598 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4609 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _2621 = ((isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2594 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _806))) + ((_2600 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1645)) * cbPerFrame._m0[3u].x);
    float _2622 = ((isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2596 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _806))) + ((_2602 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1645)) * cbPerFrame._m0[3u].x);
    float _2623 = ((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2598 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _806))) + ((_2604 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1645)) * cbPerFrame._m0[3u].x);
    uint _2624 = _249 + 6u;
    float _2632 = _726 / cbSceneParam._m0[86u].x;
    float _2633 = _727 / cbSceneParam._m0[86u].y;
    vec4 _2647 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2632, _2633, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2649 = _2647.x;
    float _2650 = _2647.y;
    float _2651 = _2647.z;
    float _2652 = _2647.w;
    float _2745;
    float _2747;
    float _2749;
    float _2751;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _2707 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _2708 = _2707 / _648;
        float _2719 = _2708 * _698;
        float _2720 = _699 * _2708;
        float _2721 = (-0.0) - _2720;
        float _2723 = _2708 * _700;
        float _2725 = (cbSceneParam._m0[77u].w * _2721) / _2707;
        float _2726 = _2725 + cbSceneParam._m0[79u].w;
        float _2727 = cbSceneParam._m0[79u].w - _2720;
        float _2733 = sqrt(((_2719 * _2719) + (_2720 * _2720)) + (_2723 * _2723));
        float _2736 = (1.0 - (cbSceneParam._m0[77u].w / _2707)) * _2733;
        float _2741 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2743 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2920;
        if (abs((_2721 - _2725) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2920 = ((((_2726 > 0.0) ? exp2(_2741 * _2726) : (2.0 - exp2(_2743 * _2726))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2736;
        }
        else
        {
            float _2864 = 1.0 / cbSceneParam._m0[80u].x;
            float _2865 = isnan(_2727) ? _2726 : (isnan(_2726) ? _2727 : max(_2726, _2727));
            float _2866 = isnan(_2727) ? _2726 : (isnan(_2726) ? _2727 : min(_2726, _2727));
            float _2875 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : min(_2865, 0.0));
            float _2876 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : min(_2866, 0.0));
            _2920 = ((abs(_2733 / _2721) * cbSceneParam._m0[80u].y) * ((((_2875 - _2876) * 2.0) - ((exp2(_2741 * (isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0)))) - exp2(_2741 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0))))) * _2864)) - ((exp2(_2743 * _2875) - exp2(_2743 * _2876)) * _2864))) + (_2736 * cbSceneParam._m0[80u].z);
        }
        vec4 _2922 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2632, _2633, 1.0), 0.0);
        float _2931 = exp2((_2920 * (-1.44269502162933349609375)) * (1.0 - _2922.w));
        float _2932 = log2(_2931);
        float _2948 = log2(_2652);
        _2745 = (exp2(_2948 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].x)) * _2922.x) / cbSceneParam._m0[78u].x)) + _2649;
        _2747 = (exp2(_2948 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].y)) * _2922.y) / cbSceneParam._m0[78u].y)) + _2650;
        _2749 = (exp2(_2948 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].z)) * _2922.z) / cbSceneParam._m0[78u].z)) + _2651;
        _2751 = _2931 * _2652;
    }
    else
    {
        _2745 = _2649;
        _2747 = _2650;
        _2749 = _2651;
        _2751 = _2652;
    }
    bool _2958;
    vec4 _2761;
    vec4 _2783;
    float _2785;
    float _2789;
    float _2790;
    float _2791;
    float _2792;
    bool _2802;
    for (;;)
    {
        _2761 = cbMatDynParam._m0[0u];
        float _2763 = roundEven(_2761.y);
        bool _2764 = _2763 == 3.0;
        float _2765 = log2(_2751);
        float _2772 = exp2(_2765 * cbSceneParam._m0[78u].x) * _2621;
        float _2773 = exp2(_2765 * cbSceneParam._m0[78u].y) * _2622;
        float _2774 = exp2(_2765 * cbSceneParam._m0[78u].z) * _2623;
        float _2781 = _714 + (-0.5);
        _2783 = cbMtdParam._m0[1u];
        _2785 = _2783.y * _2781;
        float _2788 = (_2763 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2789 = _2788 * (_2764 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2745)));
        _2790 = _2788 * (_2764 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2747)));
        _2791 = _2788 * (_2764 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2749)));
        _2792 = _2781 * 0.999000012874603271484375;
        _2802 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2802)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2792) < 0.5)
            {
                _2958 = true;
                break;
            }
        }
        uint _2899 = _766 + uint(_2761.w);
        if ((cbInstanceData._m0[_2899].w < 1.0) && ((cbInstanceData._m0[_2899].w + _2792) < 0.5))
        {
            _2958 = true;
            break;
        }
        if ((_2785 + 1.0) < _2783.x)
        {
            _2958 = true;
            break;
        }
        _2958 = false;
        break;
    }
    float _3163;
    if (_2958)
    {
        discard_state = true;
        _3163 = 0.0;
    }
    else
    {
        _3163 = cbInstanceData._m0[_2624].w;
    }
    SV_Target.x = _2789;
    SV_Target.y = _2790;
    SV_Target.z = _2791;
    SV_Target.w = _3163;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2624].w;
    discard_exit();
}


