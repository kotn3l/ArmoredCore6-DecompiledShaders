#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1319;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3646 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _434 = _430.z;
    float _443 = ((_413.z - _434) * _386) + _434;
    float _446 = ((((_413.x - _432) * _386) + _432) * 2.0) + (-1.0);
    float _448 = ((((_413.y - _433) * _386) + _433) * 2.0) + (-1.0);
    float _449 = dot(vec2(_446, _448), vec2(_446, _448));
    float _3657 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _454 = sqrt(1.0 - (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))));
    float _457 = fma(_454, _237, fma(_448, _244, _446 * _230));
    float _460 = fma(_454, _238, fma(_448, _245, _446 * _231));
    float _463 = fma(_454, _239, fma(_448, _246, _446 * _232));
    float _467 = inversesqrt(dot(vec3(_457, _460, _463), vec3(_457, _460, _463)));
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _511 = _509.x;
    float _512 = 1.0 - _511;
    float _516 = ((_511 - _512) * cbMtdParam._m0[24u].z) + _512;
    float _518 = (cbMtdParam._m0[19u].x + dot(vec4(_467 * _457, _467 * _460, _467 * _463, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_516 * cbMtdParam._m0[21u].z);
    float _3668 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _521 = (-0.0) - cbMtdParam._m0[24u].x;
    float _523 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _524 = isnan(1.0) ? _523 : (isnan(_523) ? 1.0 : min(_523, 1.0));
    float _531 = _519 - ((_519 * TEXCOORD_8.x) * _524);
    float _532 = _519 - ((_519 * TEXCOORD_8.y) * _524);
    float _533 = _519 - ((_519 * TEXCOORD_8.z) * _524);
    float _540 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _544 = ((isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : min(_540, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _552 = (_544 - (((_516 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _544))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3699 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _557 = ((_531 * (cbMtdParam._m0[17u].x - _393)) * _553) + _393;
    float _558 = ((_532 * (cbMtdParam._m0[17u].y - _394)) * _553) + _394;
    float _559 = ((_533 * (cbMtdParam._m0[17u].z - _395)) * _553) + _395;
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _573 = _571.x;
    float _574 = 1.0 - _573;
    float _601 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_573 - _574) * cbMtdParam._m0[24u].w) + _574) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3710 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _602 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _610 = ((((cbMtdParam._m0[10u].x - _557) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _602) + _557;
    float _611 = ((((cbMtdParam._m0[10u].y - _558) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _602) + _558;
    float _612 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _559)) * _602) + _559;
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _640 = _638.x;
    float _658 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _640) * _386) + _640;
    float _662 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _658) * cbMtdParam._m0[19u].z) + _658;
    float _665 = _662 - ((_553 * _531) * _662);
    float _667 = _665 - (_665 * _602);
    vec4 _681 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _688 = (_681.x * 2.0) + (-1.0);
    float _689 = (_681.y * 2.0) + (-1.0);
    float _690 = dot(vec2(_688, _689), vec2(_688, _689));
    float _3721 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _699 = (((_681.z - _443) * _531) * _553) + _443;
    float _702 = ((cbMtdParam._m0[23u].y - _699) * _602) + _699;
    vec4 _721 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _727 = (_721.x * 2.0) + (-1.0);
    float _728 = (_721.y * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _3732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _749 = (((cbMtdParam._m0[21u].x * _446) + ((_688 - _446) * _531)) * _553) + _446;
    float _750 = (((cbMtdParam._m0[21u].x * _448) + ((_689 - _448) * _532)) * _553) + _448;
    float _751 = (((sqrt(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) - _454) * _533) * _553) + _454;
    float _762 = (((_727 - _749) + (_749 * cbMtdParam._m0[22u].z)) * _602) + _749;
    float _763 = (((_728 - _750) + (_750 * cbMtdParam._m0[22u].z)) * _602) + _750;
    float _764 = ((sqrt(1.0 - (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) - _751) * _602) + _751;
    float _766 = cbMtdParam._m0[22u].x + _483.w;
    float _769 = fma(_764, _237, fma(_763, _244, _762 * _230));
    float _772 = fma(_764, _238, fma(_763, _245, _762 * _231));
    float _775 = fma(_764, _239, fma(_763, _246, _762 * _232));
    float _779 = inversesqrt(dot(vec3(_769, _772, _775), vec3(_769, _772, _775)));
    float _780 = _779 * _769;
    float _781 = _779 * _772;
    float _782 = _779 * _775;
    float _3743 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _783 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _3754 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _3765 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3776 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3787 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3798 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _788 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _802 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _852 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _842);
    float _853 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _842);
    float _854 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _842);
    float _858 = inversesqrt(dot(vec3(_852, _853, _854), vec3(_852, _853, _854)));
    float _859 = _852 * _858;
    float _860 = _853 * _858;
    float _861 = _854 * _858;
    float _867 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _868 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _886 = fma(_782, cbSceneParam._m0[5u].z, fma(_781, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _780));
    float _889 = fma(_782, cbSceneParam._m0[6u].z, fma(_781, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _780));
    float _892 = fma(_782, cbSceneParam._m0[7u].z, fma(_781, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _780));
    uint _906 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbInstanceData._m0[_906].z;
    float _3809 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _918 = 1.0 - _788;
    float _919 = _915 * _918;
    float _920 = _916 * _918;
    float _921 = _917 * _918;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _788;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _788;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _788;
    float _929 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    float _932 = _928 + 0.039999999105930328369140625;
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _867, cbSceneParam._m0[86u].y * _868));
    float _945 = ((isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * TEXCOORD_5.w) * _941.x;
    float _946 = dot(vec3(_780, _781, _782), vec3(_859, _860, _861));
    float _949 = _946 * 2.0;
    float _953 = (_949 * _780) - _859;
    float _954 = (_949 * _781) - _860;
    float _955 = (_949 * _782) - _861;
    float _959 = abs(dot(vec3(_859, _860, _861), vec3(_780, _781, _782)));
    float _3842 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _961 = sqrt(_783);
    float _974 = exp2((_961 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_961 * 3.0));
    float _980 = (1.0 - _974) * ((_961 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _981 = _974 * _961;
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_1017, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009));
        float _1047 = fma(_1017, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009));
        float _1051 = fma(_1017, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009));
        float _1076 = _1009 + _780;
        float _1077 = _1013 + _781;
        float _1078 = _1017 + _782;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1043;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1047;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1051;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_780, _781, _782), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3890 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_780, _781, _782), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3923 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_780, _781, _782), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3956 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1358 = fma(_1017, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009));
        float _1362 = fma(_1017, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009));
        float _1366 = fma(_1017, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009));
        float _1389 = _1009 + _780;
        float _1390 = _1013 + _781;
        float _1391 = _1017 + _782;
        float _1401 = fma(_1391, cbModelParam._m0[30u].z, fma(_1390, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1389)) - _1358;
        float _1402 = fma(_1391, cbModelParam._m0[31u].z, fma(_1390, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1389)) - _1362;
        float _1403 = fma(_1391, cbModelParam._m0[32u].z, fma(_1390, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1389)) - _1366;
        float _1407 = inversesqrt(dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403)));
        float _1420 = ((_1407 * _1401) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1358 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1407 * _1402) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1362 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1407 * _1403) / cbModelParam._m0[35u].z) + ((((((_1366 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        float _1457 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1424.x + (-0.5));
        float _1459 = _1457 * (_1424.y + (-0.5));
        float _1460 = _1457 * (_1424.z + (-0.5));
        float _1467 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1431.x + (-0.5));
        float _1469 = _1467 * (_1431.y + (-0.5));
        float _1470 = _1467 * (_1431.z + (-0.5));
        float _1477 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1438.x + (-0.5));
        float _1479 = _1477 * (_1438.y + (-0.5));
        float _1480 = _1477 * (_1438.z + (-0.5));
        float _1487 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1445.x + (-0.5));
        float _1489 = _1487 * (_1445.y + (-0.5));
        float _1490 = _1487 * (_1445.z + (-0.5));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = _1458 * 0.5;
        float _1495 = _1468 * 0.5;
        float _1496 = _1478 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_780, _781, _782), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4019 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1521 + 1.0))) + _1526) * _1491;
        float _1536 = _1459 * 0.5;
        float _1537 = _1469 * 0.5;
        float _1538 = _1479 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_780, _781, _782), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4052 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1563 + 1.0))) + _1568) * _1492;
        float _1578 = _1460 * 0.5;
        float _1579 = _1470 * 0.5;
        float _1580 = _1480 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_780, _781, _782), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4085 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1605 + 1.0))) + _1610) * _1493;
        _1627 = _1460;
        _1628 = _1459;
        _1629 = _1458;
        _1630 = _1470;
        _1631 = _1469;
        _1632 = _1468;
        _1633 = _1480;
        _1634 = _1479;
        _1635 = _1478;
        _1636 = _1493;
        _1637 = _1492;
        _1638 = _1491;
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
    }
    else
    {
        _1627 = _1319;
        _1628 = _1319;
        _1629 = _1319;
        _1630 = _1319;
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = _1319;
        _1638 = _1319;
        _1639 = 0.0;
        _1640 = 0.0;
        _1641 = 0.0;
    }
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1331)) + _1331;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1332)) + _1332;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1333)) + _1333;
    float _1674 = fma(_1653, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1653, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1653, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1651));
    float _1695 = _953 * 0.5;
    float _1696 = _954 * 0.5;
    float _1697 = _955 * 0.5;
    float _1698 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1701 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1704 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1738;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1711 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1715 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1719 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1726 = dot(vec4(cbModelParam._m0[39u]), vec4(_1695, _1696, _1697, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1749;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1740 = dot(vec4(cbModelParam._m0[40u]), vec4(_1695, _1696, _1697, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1753 = (_1749 * cbModelParam._m0[1u].x) + (_1738 * (1.0 - cbModelParam._m0[1u].x));
    float _1763 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _783);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1763 : min(cbModelParam._m0[25u].z, _1763));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1812 = fma(_1017, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009)) + cbModelParam._m0[13u].w;
        float _1816 = fma(_1017, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009)) + cbModelParam._m0[14u].w;
        float _1820 = fma(_1017, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009)) + cbModelParam._m0[15u].w;
        float _1823 = fma(_955, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953));
        float _1826 = fma(_955, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953));
        float _1829 = fma(_955, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953));
        float _1857;
        if (_1823 > 0.0)
        {
            _1857 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1857 = frontier_phi_14_12_ladder;
        }
        float _2060;
        if (_1826 > 0.0)
        {
            _2060 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2060 = frontier_phi_23_19_ladder;
        }
        float _2314;
        if (_1829 > 0.0)
        {
            _2314 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2314 = frontier_phi_35_30_ladder;
        }
        float _2316 = isnan(_2060) ? _1857 : (isnan(_1857) ? _2060 : min(_1857, _2060));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1823) + _1812;
        float _2322 = (_2317 * _1826) + _1816;
        float _2323 = (_2317 * _1829) + _1820;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2324;
        float _2328 = _2324 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 > _2328) || ((_2322 < _2326) || ((_2321 < _2326) || (_2321 > _2328))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2323, cbModelParam._m0[9u].z, fma(_2322, cbModelParam._m0[9u].y, _2321 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2323, cbModelParam._m0[10u].z, fma(_2322, cbModelParam._m0[10u].y, _2321 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2323, cbModelParam._m0[11u].z, fma(_2322, cbModelParam._m0[11u].y, _2321 * cbModelParam._m0[11u].x))), _1764);
            frontier_phi_13_35_ladder = _2451.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2451.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2451.x * cbModelParam._m0[1u].y;
        }
        _1845 = frontier_phi_13_35_ladder_2;
        _1847 = frontier_phi_13_35_ladder_1;
        _1849 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_953, _954, _955), _1764);
        _1845 = _1833.x * cbModelParam._m0[1u].y;
        _1847 = _1833.y * cbModelParam._m0[1u].y;
        _1849 = _1833.z * cbModelParam._m0[1u].y;
    }
    float _1853 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _783);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1853 : min(cbModelParam._m0[25u].w, _1853));
    float _1944;
    float _1946;
    float _1948;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1908 = fma(_1017, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009)) + cbModelParam._m0[21u].w;
        float _1912 = fma(_1017, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009)) + cbModelParam._m0[22u].w;
        float _1916 = fma(_1017, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009)) + cbModelParam._m0[23u].w;
        float _1919 = fma(_955, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953));
        float _1922 = fma(_955, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953));
        float _1925 = fma(_955, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953));
        float _2065;
        if (_1919 > 0.0)
        {
            _2065 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2065 = frontier_phi_25_21_ladder;
        }
        float _2341;
        if (_1922 > 0.0)
        {
            _2341 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2341 = frontier_phi_37_32_ladder;
        }
        float _2554;
        if (_1925 > 0.0)
        {
            _2554 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2554 = frontier_phi_46_43_ladder;
        }
        float _2556 = isnan(_2341) ? _2065 : (isnan(_2065) ? _2341 : min(_2065, _2341));
        float _2557 = isnan(_2554) ? _2556 : (isnan(_2556) ? _2554 : min(_2556, _2554));
        float _2561 = (_2557 * _1919) + _1908;
        float _2562 = (_2557 * _1922) + _1912;
        float _2563 = (_2557 * _1925) + _1916;
        float _2564 = _2557 * 9.9999997473787516355514526367188e-05;
        float _2565 = (-1.0) - _2564;
        float _2567 = _2564 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2563 > _2567) || ((_2563 < _2565) || ((_2562 > _2567) || ((_2562 < _2565) || ((_2561 < _2565) || (_2561 > _2567))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2563, cbModelParam._m0[17u].z, fma(_2562, cbModelParam._m0[17u].y, _2561 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2563, cbModelParam._m0[18u].z, fma(_2562, cbModelParam._m0[18u].y, _2561 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2563, cbModelParam._m0[19u].z, fma(_2562, cbModelParam._m0[19u].y, _2561 * cbModelParam._m0[19u].x))), _1854);
            frontier_phi_22_46_ladder = _2762.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2762.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2762.x * cbModelParam._m0[1u].z;
        }
        _1944 = frontier_phi_22_46_ladder_2;
        _1946 = frontier_phi_22_46_ladder_1;
        _1948 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_953, _954, _955), _1854);
        _1944 = _1928.x * cbModelParam._m0[1u].z;
        _1946 = _1928.y * cbModelParam._m0[1u].z;
        _1948 = _1928.z * cbModelParam._m0[1u].z;
    }
    float _1961 = (((_980 * _929) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1944 - _1845)) + _1845);
    float _1963 = (((_980 * _931) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1946 - _1847)) + _1847);
    float _1965 = (((_980 * _932) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1948 - _1849)) + _1849);
    float _1968 = fma(_1965, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1961 * cbSceneParam._m0[89u].x));
    float _1971 = fma(_1965, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1961 * cbSceneParam._m0[90u].x));
    float _1974 = fma(_1965, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, _1961 * cbSceneParam._m0[91u].x));
    uvec4 _1984 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1986 = _1984.x * 14u;
    uint _1987 = _1986 + 13u;
    float _1994 = _945 + (-1.0);
    float _1999 = (cbLight._m0[_1987].x * _1994) + 1.0;
    float _2000 = (cbLight._m0[_1987].y * _1994) + 1.0;
    float _2001 = (cbLight._m0[_1987].z * _1994) + 1.0;
    float _2002 = (cbLight._m0[_1987].w * _1994) + 1.0;
    uint _2003 = _1986 + 5u;
    float _2009 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2013 = _1986 + 4u;
    float _2019 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
    uint _2023 = _1986 | 1u;
    float _2034 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_780, _781, _782));
    float _2037 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_780, _781, _782));
    float _4221 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _4232 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2042 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _2044 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.3183098733425140380859375;
    float _2051 = ((cbLight._m0[_2003].x * _2009) * _2044) + ((cbLight._m0[_2013].x * _2019) * _2042);
    float _2052 = ((_2009 * cbLight._m0[_2003].y) * _2044) + ((_2019 * cbLight._m0[_2013].y) * _2042);
    float _2053 = ((_2009 * cbLight._m0[_2003].z) * _2044) + ((_2019 * cbLight._m0[_2013].z) * _2042);
    uvec4 _2057 = floatBitsToUint(cbLight._m0[_1986 + 12u]);
    bool _2059 = _2057.x == 0u;
    float _2070;
    float _2072;
    float _2074;
    if (_2059)
    {
        _2070 = _2051;
        _2072 = _2052;
        _2074 = _2053;
    }
    else
    {
        uint _2078 = _1986 + 6u;
        float _2094 = (dot(vec3(cbLight._m0[_1986 + 2u].xyz), vec3(_780, _781, _782)) * 0.5) + 0.5;
        float _2095 = _2094 * _2094;
        float _4243 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2096 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2097 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2070 = (((cbLight._m0[_2078].x * 0.3183098733425140380859375) * _2096) * _2097) + _2051;
        _2072 = (((cbLight._m0[_2078].y * 0.3183098733425140380859375) * _2096) * _2097) + _2052;
        _2074 = (((cbLight._m0[_2078].z * 0.3183098733425140380859375) * _2096) * _2097) + _2053;
    }
    bool _2077 = _2057.y == 0u;
    float _2115;
    float _2117;
    float _2119;
    if (_2077)
    {
        _2115 = _2070;
        _2117 = _2072;
        _2119 = _2074;
    }
    else
    {
        uint _2285 = _1986 + 7u;
        float _2301 = (dot(vec3(cbLight._m0[_1986 + 3u].xyz), vec3(_780, _781, _782)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4259 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2304 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2115 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2070;
        _2117 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2072;
        _2119 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2074;
    }
    uint _2122 = _1986 + 8u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _783) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1986].x + _859;
    float _2138 = cbLight._m0[_1986].y + _860;
    float _2139 = cbLight._m0[_1986].z + _861;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_1986].xyz));
    float _4275 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _4286 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _2151 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2152 = dot(vec3(_780, _781, _782), vec3(_2144, _2145, _2146));
    float _4297 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2156 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2144, _2145, _2146));
    float _4308 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = _2136 * _2136;
    float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
    float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0);
    float _2173 = 0.959999978542327880859375 - _926;
    float _2175 = 0.959999978542327880859375 - _927;
    float _2176 = 0.959999978542327880859375 - _928;
    float _2183 = 1.0 - _2136;
    float _2194 = (0.5 / (((_2151 * ((_2150 * _2183) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2183) + _2136) * _2150))) * _2150;
    float _4319 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
    uint _2207 = _1986 + 9u;
    float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _783) * 0.949999988079071044921875);
    float _2219 = _2218 * _2218;
    float _2220 = cbLight._m0[_2023].x + _859;
    float _2221 = cbLight._m0[_2023].y + _860;
    float _2222 = cbLight._m0[_2023].z + _861;
    float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
    float _2227 = _2226 * _2220;
    float _2228 = _2226 * _2221;
    float _2229 = _2226 * _2222;
    float _2230 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2023].xyz));
    float _4330 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2234 = dot(vec3(_780, _781, _782), vec3(_2227, _2228, _2229));
    float _4341 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2227, _2228, _2229));
    float _4352 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2219 * _2219;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0);
    float _2260 = 1.0 - _2219;
    float _2270 = (0.5 / (((_2151 * ((_2233 * _2260) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2260) + _2219) * _2233))) * _2233;
    float _4363 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    float _2282 = (((((_2253 * _2173) + _929) * cbLight._m0[_2207].x) * _2272) * _2009) + (((((_2172 * _2173) + _929) * cbLight._m0[_2122].x) * _2196) * _2019);
    float _2283 = (((((_2253 * _2175) + _931) * cbLight._m0[_2207].y) * _2272) * _2009) + (((((_2172 * _2175) + _931) * cbLight._m0[_2122].y) * _2196) * _2019);
    float _2284 = (((((_2253 * _2176) + _932) * cbLight._m0[_2207].z) * _2272) * _2009) + (((((_2172 * _2176) + _932) * cbLight._m0[_2122].z) * _2196) * _2019);
    float _2346;
    float _2348;
    float _2350;
    if (_2059)
    {
        _2346 = _2282;
        _2348 = _2283;
        _2350 = _2284;
    }
    else
    {
        uint _2352 = _1986 + 2u;
        uint _2356 = _1986 + 10u;
        float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _783) * 0.949999988079071044921875);
        float _2371 = _2370 * _2370;
        float _2372 = cbLight._m0[_2352].x + _859;
        float _2373 = cbLight._m0[_2352].y + _860;
        float _2374 = cbLight._m0[_2352].z + _861;
        float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
        float _2379 = _2378 * _2372;
        float _2380 = _2378 * _2373;
        float _2381 = _2378 * _2374;
        float _2382 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2352].xyz));
        float _4374 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2386 = dot(vec3(_780, _781, _782), vec3(_2379, _2380, _2381));
        float _4385 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2390 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2379, _2380, _2381));
        float _4396 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2394 = _2371 * _2371;
        float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
        float _2405 = exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0);
        float _2412 = 1.0 - _2371;
        float _2422 = (0.5 / (((_2151 * ((_2385 * _2412) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2412) + _2371) * _2385))) * _2385;
        float _4407 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2424 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
        float _2425 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2346 = (((((_2405 * _2173) + _929) * cbLight._m0[_2356].x) * _2424) * _2425) + _2282;
        _2348 = (((((_2405 * _2175) + _931) * cbLight._m0[_2356].y) * _2424) * _2425) + _2283;
        _2350 = (((((_2405 * _2176) + _932) * cbLight._m0[_2356].z) * _2424) * _2425) + _2284;
    }
    float _2460;
    float _2462;
    float _2464;
    if (_2077)
    {
        _2460 = _2346;
        _2462 = _2348;
        _2464 = _2350;
    }
    else
    {
        uint _2471 = _1986 + 3u;
        uint _2475 = _1986 + 11u;
        float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _783) * 0.949999988079071044921875);
        float _2490 = _2489 * _2489;
        float _2491 = cbLight._m0[_2471].x + _859;
        float _2492 = cbLight._m0[_2471].y + _860;
        float _2493 = cbLight._m0[_2471].z + _861;
        float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
        float _2498 = _2497 * _2491;
        float _2499 = _2497 * _2492;
        float _2500 = _2497 * _2493;
        float _2501 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2471].xyz));
        float _4423 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2505 = dot(vec3(_780, _781, _782), vec3(_2498, _2499, _2500));
        float _4434 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2509 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2498, _2499, _2500));
        float _4445 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2513 = _2490 * _2490;
        float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
        float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0);
        float _2531 = 1.0 - _2490;
        float _2541 = (0.5 / (((_2151 * ((_2504 * _2531) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2531) + _2490) * _2504))) * _2504;
        float _4456 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2543 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
        float _2544 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2460 = (((((_2524 * _2173) + _929) * cbLight._m0[_2475].x) * _2543) * _2544) + _2346;
        _2462 = (((((_2524 * _2175) + _931) * cbLight._m0[_2475].y) * _2543) * _2544) + _2348;
        _2464 = (((((_2524 * _2176) + _932) * cbLight._m0[_2475].z) * _2543) * _2544) + _2350;
    }
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    if (_1984.y == 0u)
    {
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2620 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2619;
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2619;
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2619;
        uvec4 _2634 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2635 = _2634.x;
        uint _2646 = uint((float(_2634.y) * floor(float(uint(cbSceneParam._m0[85u].y * _868) / _2635))) + floor(float(uint(cbSceneParam._m0[85u].x * _867) / _2635)));
        float _2656 = (log2(_2622 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2657 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        uint _2660 = uint(isnan(14.0) ? _2657 : (isnan(_2657) ? 14.0 : min(_2657, 14.0)));
        uvec4 _2665 = texelFetch(g_lightClusterGridBuffer, int(((_2660 << 2u) + (_2646 << 6u)) >> 2u));
        uint _2666 = _2665.x;
        uint _2667 = _2634.z;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        if (((((1u << ((_2667 >> 4u) & 15u)) + 4294967295u) & _2666) == 0u) || ((_2667 & 240u) == 0u))
        {
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
        }
        else
        {
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            uint _2917 = 0u;
            uint _2926;
            bool _2927;
            for (;;)
            {
                _2926 = texelFetch(g_lightClassification, int((((_2660 << 5u) + (_2646 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                _2927 = _2926 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2927)
                {
                    frontier_phi_61_pred = _2911;
                    frontier_phi_61_pred_1 = _2916;
                    frontier_phi_61_pred_2 = _2915;
                    frontier_phi_61_pred_3 = _2914;
                    frontier_phi_61_pred_4 = _2913;
                    frontier_phi_61_pred_5 = _2912;
                }
                else
                {
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    uint _3041;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2914;
                    _3039 = _2915;
                    _3040 = _2916;
                    _3041 = _2926;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    for (;;)
                    {
                        uint _3045 = uint(findLSB(_3041)) + (_2917 << 5u);
                        uint _3042 = (_3041 + 4294967295u) & _3041;
                        uint _3047 = _3045 * 48u;
                        vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 3u)).x));
                        uint _3067 = (_3045 * 48u) + 4u;
                        vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 3u)).x));
                        uint _3086 = (_3045 * 48u) + 8u;
                        vec3 _3097 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x));
                        float _3101 = _3061.x - _2620;
                        float _3102 = _3061.y - _2621;
                        float _3103 = _3061.z - _2622;
                        float _3104 = dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103));
                        float _3107 = inversesqrt(_3104);
                        float _3108 = _3107 * _3101;
                        float _3109 = _3107 * _3102;
                        float _3110 = _3107 * _3103;
                        float _3111 = dot(vec3(_886, _889, _892), vec3(_3108, _3109, _3110));
                        float _3116 = 1.0 - (_3104 * _3061.w);
                        float _4482 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3118 = sqrt(_3104) * _3080.w;
                        float _3121 = 1.39999997615814208984375 / (_3118 + 1.39999997615814208984375);
                        float _3122 = _3121 * _3121;
                        float _3125 = ((1.0 - _3122) * _3111) + _3122;
                        float _3128 = _3118 * _3118;
                        float _3132 = ((isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))) * _3117) / ((_3128 * 0.699999988079071044921875) + 1.0);
                        float _3136 = (-0.0) - _2620;
                        float _3137 = (-0.0) - _2621;
                        float _3138 = (-0.0) - _2622;
                        float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                        float _3143 = _3142 * _3136;
                        float _3144 = _3142 * _3137;
                        float _3145 = _3142 * _3138;
                        float _3153 = exp2(log2(1.0 / ((_3128 * 3.5) + 5.0)) * 0.25);
                        float _3154 = 1.0 - _961;
                        float _3161 = sqrt(1.0 - ((1.0 - (_3154 * _3154)) * (1.0 - (_3153 * _3153))));
                        float _3162 = _3161 * _3161;
                        float _3163 = _3162 * _3162;
                        float _3164 = _3143 + _3108;
                        float _3165 = _3144 + _3109;
                        float _3166 = _3145 + _3110;
                        float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                        float _3174 = dot(vec3(_886, _889, _892), vec3(_3143, _3144, _3145));
                        float _4498 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3177 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3178 = dot(vec3(_886, _889, _892), vec3(_3170 * _3164, _3170 * _3165, _3170 * _3166));
                        float _4509 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3181 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3185 = ((_3181 * _3181) * (_3163 + (-1.0))) + 1.0;
                        float _3186 = _3121 * _3162;
                        float _3187 = _3186 * _3186;
                        float _3190 = ((1.0 - _3187) * _3111) + _3187;
                        float _4520 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3191 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3192 = 1.0 - _3162;
                        float _3202 = (0.5 / (((_3191 * ((_3177 * _3192) + _3162)) + 9.9999999392252902907785028219223e-09) + (((_3191 * _3192) + _3162) * _3177))) * _3191;
                        float _4531 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3213 = (((_3163 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3185 * _3185) * ((_3128 * 2.1991131305694580078125) + 3.141590118408203125))) * _3117;
                        _2970 = (_3132 * _3080.x) + _3038;
                        _2971 = (_3132 * _3080.y) + _3039;
                        _2972 = (_3132 * _3080.z) + _3040;
                        _2967 = (_3213 * _3097.x) + _3035;
                        _2968 = (_3213 * _3097.y) + _3036;
                        _2969 = (_3213 * _3097.z) + _3037;
                        if (_3042 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _2970;
                            _3039 = _2971;
                            _3040 = _2972;
                            _3041 = _3042;
                        }
                    }
                    frontier_phi_61_pred = _2967;
                    frontier_phi_61_pred_1 = _2972;
                    frontier_phi_61_pred_2 = _2971;
                    frontier_phi_61_pred_3 = _2970;
                    frontier_phi_61_pred_4 = _2969;
                    frontier_phi_61_pred_5 = _2968;
                }
                _2768 = frontier_phi_61_pred;
                _2778 = frontier_phi_61_pred_1;
                _2776 = frontier_phi_61_pred_2;
                _2774 = frontier_phi_61_pred_3;
                _2772 = frontier_phi_61_pred_4;
                _2770 = frontier_phi_61_pred_5;
                uint _2918 = _2917 + 1u;
                if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2911 = _2768;
                    _2912 = _2770;
                    _2913 = _2772;
                    _2914 = _2774;
                    _2915 = _2776;
                    _2916 = _2778;
                    _2917 = _2918;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
        }
        uvec4 _2781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2782 = _2781.z;
        uint _2784 = (_2782 >> 8u) & 15u;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        if (((4294967295u << _2784) & _2666) == 0u)
        {
            _2879 = _2767;
            _2881 = _2769;
            _2883 = _2771;
            _2885 = _2773;
            _2887 = _2775;
            _2889 = _2777;
        }
        else
        {
            float _2904 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
            float _2905 = _2904 * _2620;
            float _2906 = _2904 * _2621;
            float _2907 = _2904 * _2622;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2784 < ((_2782 >> 12u) & 15u))
            {
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _2890;
                float _3018 = _2767;
                float _3019 = _2769;
                float _3020 = _2771;
                float _3021 = _2773;
                float _3022 = _2775;
                float _3023 = _2777;
                uint _3024 = _2784;
                uint _3033;
                bool _3034;
                for (;;)
                {
                    _3033 = texelFetch(g_lightClassification, int((((_2660 << 5u) + (_2646 << 9u)) + (_3024 << 2u)) >> 2u)).x;
                    _3034 = _3033 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3034)
                    {
                        frontier_phi_67_pred = _3021;
                        frontier_phi_67_pred_1 = _3022;
                        frontier_phi_67_pred_2 = _3023;
                        frontier_phi_67_pred_3 = _3020;
                        frontier_phi_67_pred_4 = _3019;
                        frontier_phi_67_pred_5 = _3018;
                    }
                    else
                    {
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3231 = _3018;
                        float _3232 = _3019;
                        float _3233 = _3020;
                        float _3234 = _3021;
                        float _3235 = _3022;
                        float _3236 = _3023;
                        uint _3237 = _3033;
                        uint _3238;
                        vec4 _3263;
                        float _3264;
                        vec4 _3279;
                        vec3 _3291;
                        vec4 _3306;
                        vec4 _3322;
                        float _3368;
                        bool _3369;
                        for (;;)
                        {
                            uint _3248 = ((_3024 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3237));
                            _3238 = (_3237 + 4294967295u) & _3237;
                            uint _3250 = _3248 * 40u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            _3264 = _3263.w;
                            uint _3266 = (_3248 * 40u) + 4u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3281 = (_3248 * 40u) + 8u;
                            _3291 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x));
                            uint _3293 = (_3248 * 40u) + 16u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3309 = (_3248 * 40u) + 20u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3248 * 40u) + 24u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3343 = (_3248 * 40u) + 28u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3368 = fma(_2622, _3356.z, fma(_2621, _3356.y, _3356.x * _2620)) + _3356.w;
                            _3369 = !((fma(_2622, _3337.z, fma(_2621, _3337.y, _3337.x * _2620)) + _3337.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3369)
                            {
                                float _3396 = _3263.x - _2620;
                                float _3397 = _3263.y - _2621;
                                float _3398 = _3263.z - _2622;
                                float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                                float _3402 = inversesqrt(_3399);
                                float _3403 = _3402 * _3396;
                                float _3404 = _3402 * _3397;
                                float _3405 = _3402 * _3398;
                                float _3409 = 1.0 - (_3399 / (_3264 * _3264));
                                float _4542 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3414 = sqrt(_3399) * _3279.w;
                                float _3416 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                                float _3417 = _3416 * _3416;
                                float _3420 = ((1.0 - _3417) * dot(vec3(_3403, _3404, _3405), vec3(_886, _889, _892))) + _3417;
                                float _3423 = _3414 * _3414;
                                float _3427 = (fma(_2622, _3306.z, fma(_2621, _3306.y, _3306.x * _2620)) + _3306.w) / _3368;
                                float _3428 = (fma(_2622, _3322.z, fma(_2621, _3322.y, _3322.x * _2620)) + _3322.w) / _3368;
                                float _3432 = 1.0 - dot(vec2(_3427, _3428), vec2(_3427, _3428));
                                float _4558 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3434 = _3433 * (((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3410) / ((_3423 * 0.699999988079071044921875) + 1.0));
                                float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _961;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3403 - _2905;
                                float _3458 = _3404 - _2906;
                                float _3459 = _3405 - _2907;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_886, _889, _892), vec3((-0.0) - _2905, (-0.0) - _2906, (-0.0) - _2907));
                                float _4569 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3471 = dot(vec3(_886, _889, _892), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4580 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3416 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_886, _889, _892), vec3(_3403, _3404, _3405))) + _3480;
                                float _4591 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4602 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3433 * _3410) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3508 * _3291.x;
                                frontier_phi_73_pred_1 = _3508 * _3291.y;
                                frontier_phi_73_pred_2 = _3434 * _3279.z;
                                frontier_phi_73_pred_3 = _3434 * _3279.y;
                                frontier_phi_73_pred_4 = _3434 * _3279.x;
                                frontier_phi_73_pred_5 = _3508 * _3291.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3512 = frontier_phi_73_pred;
                            _3513 = frontier_phi_73_pred_1;
                            _3517 = frontier_phi_73_pred_2;
                            _3516 = frontier_phi_73_pred_3;
                            _3515 = frontier_phi_73_pred_4;
                            _3514 = frontier_phi_73_pred_5;
                            _3221 = _3515 + _3234;
                            _3222 = _3516 + _3235;
                            _3223 = _3517 + _3236;
                            _3218 = _3512 + _3231;
                            _3219 = _3513 + _3232;
                            _3220 = _3514 + _3233;
                            if (_3238 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3238;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3221;
                        frontier_phi_67_pred_1 = _3222;
                        frontier_phi_67_pred_2 = _3223;
                        frontier_phi_67_pred_3 = _3220;
                        frontier_phi_67_pred_4 = _3219;
                        frontier_phi_67_pred_5 = _3218;
                    }
                    _2886 = frontier_phi_67_pred;
                    _2888 = frontier_phi_67_pred_1;
                    _2890 = frontier_phi_67_pred_2;
                    _2884 = frontier_phi_67_pred_3;
                    _2882 = frontier_phi_67_pred_4;
                    _2880 = frontier_phi_67_pred_5;
                    uint _3025 = _3024 + 1u;
                    if (_3025 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3018 = _2880;
                        _3019 = _2882;
                        _3020 = _2884;
                        _3021 = _2886;
                        _3022 = _2888;
                        _3023 = _2890;
                        _3024 = _3025;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2888;
                frontier_phi_55_56_ladder_1 = _2890;
                frontier_phi_55_56_ladder_2 = _2886;
                frontier_phi_55_56_ladder_3 = _2884;
                frontier_phi_55_56_ladder_4 = _2882;
                frontier_phi_55_56_ladder_5 = _2880;
            }
            else
            {
                frontier_phi_55_56_ladder = _2775;
                frontier_phi_55_56_ladder_1 = _2777;
                frontier_phi_55_56_ladder_2 = _2773;
                frontier_phi_55_56_ladder_3 = _2771;
                frontier_phi_55_56_ladder_4 = _2769;
                frontier_phi_55_56_ladder_5 = _2767;
            }
            _2879 = frontier_phi_55_56_ladder_5;
            _2881 = frontier_phi_55_56_ladder_4;
            _2883 = frontier_phi_55_56_ladder_3;
            _2885 = frontier_phi_55_56_ladder_2;
            _2887 = frontier_phi_55_56_ladder;
            _2889 = frontier_phi_55_56_ladder_1;
        }
        float _2894 = isnan(1.0) ? _945 : (isnan(_945) ? 1.0 : min(_945, 1.0));
        _2679 = (_2894 * _2885) + _2115;
        _2681 = (_2894 * _2887) + _2117;
        _2683 = (_2894 * _2889) + _2119;
        _2685 = ((_2879 * _929) * _2894) + _2460;
        _2687 = ((_2881 * _931) * _2894) + _2462;
        _2689 = ((_2883 * _932) * _2894) + _2464;
    }
    else
    {
        _2679 = _2115;
        _2681 = _2117;
        _2683 = _2119;
        _2685 = _2460;
        _2687 = _2462;
        _2689 = _2464;
    }
    float _4618 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4629 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4640 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    uint _2709 = _249 + 6u;
    float _2717 = _867 / cbSceneParam._m0[86u].x;
    float _2718 = _868 / cbSceneParam._m0[86u].y;
    vec4 _2732 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2717, _2718, (log2((isnan(cbSceneParam._m0[77u].w) ? _802 : (isnan(_802) ? cbSceneParam._m0[77u].w : min(_802, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2734 = _2732.x;
    float _2735 = _2732.y;
    float _2736 = _2732.z;
    float _2737 = _2732.w;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_802 > cbSceneParam._m0[78u].w)
    {
        float _2792 = isnan(_802) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _802 : min(cbSceneParam._m0[80u].w, _802));
        float _2793 = _2792 / _802;
        float _2804 = _2793 * _852;
        float _2805 = _853 * _2793;
        float _2806 = (-0.0) - _2805;
        float _2807 = _2793 * _854;
        float _2809 = (cbSceneParam._m0[77u].w * _2806) / _2792;
        float _2810 = _2809 + cbSceneParam._m0[79u].w;
        float _2811 = cbSceneParam._m0[79u].w - _2805;
        float _2817 = sqrt(((_2804 * _2804) + (_2805 * _2805)) + (_2807 * _2807));
        float _2820 = (1.0 - (cbSceneParam._m0[77u].w / _2792)) * _2817;
        float _2825 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2827 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2980;
        if (abs((_2806 - _2809) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2980 = ((((_2810 > 0.0) ? exp2(_2825 * _2810) : (2.0 - exp2(_2827 * _2810))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2820;
        }
        else
        {
            float _2940 = 1.0 / cbSceneParam._m0[80u].x;
            float _2941 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : max(_2810, _2811));
            float _2942 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : min(_2810, _2811));
            float _2951 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : min(_2941, 0.0));
            float _2952 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : min(_2942, 0.0));
            _2980 = ((abs(_2817 / _2806) * cbSceneParam._m0[80u].y) * ((((_2951 - _2952) * 2.0) - ((exp2(_2825 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0)))) - exp2(_2825 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0))))) * _2940)) - ((exp2(_2827 * _2951) - exp2(_2827 * _2952)) * _2940))) + (_2820 * cbSceneParam._m0[80u].z);
        }
        vec4 _2982 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2717, _2718, 1.0), 0.0);
        float _2991 = exp2((_2980 * (-1.44269502162933349609375)) * (1.0 - _2982.w));
        float _2992 = log2(_2991);
        float _3008 = log2(_2737);
        _2829 = (exp2(_3008 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].x)) * _2982.x) / cbSceneParam._m0[78u].x)) + _2734;
        _2831 = (exp2(_3008 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].y)) * _2982.y) / cbSceneParam._m0[78u].y)) + _2735;
        _2833 = (exp2(_3008 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].z)) * _2982.z) / cbSceneParam._m0[78u].z)) + _2736;
        _2835 = _2991 * _2737;
    }
    else
    {
        _2829 = _2734;
        _2831 = _2735;
        _2833 = _2736;
        _2835 = _2737;
    }
    float _2847 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2848 = _2847 == 3.0;
    float _2849 = log2(_2835);
    float _2856 = exp2(_2849 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2679 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _945))) + ((_2685 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1753)) * cbPerFrame._m0[3u].x));
    float _2857 = exp2(_2849 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2681 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _945))) + ((_2687 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1753)) * cbPerFrame._m0[3u].x));
    float _2858 = exp2(_2849 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2683 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _945))) + ((_2689 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1753)) * cbPerFrame._m0[3u].x));
    float _2867 = (_2847 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2867 * (_2848 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2829)));
    SV_Target.y = _2867 * (_2848 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2831)));
    SV_Target.z = _2867 * (_2848 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2833)));
    SV_Target.w = cbInstanceData._m0[_2709].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2709].w;
}


