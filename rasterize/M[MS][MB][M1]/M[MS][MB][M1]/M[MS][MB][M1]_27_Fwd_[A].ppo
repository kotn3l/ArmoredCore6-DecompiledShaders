#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1268;
float _3649;
float _3650;
float _3651;
float _3652;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3661 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3672 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3683 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _286) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _287) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = _323.x * cbMtdParam._m0[9u].x;
    float _329 = _323.y * cbMtdParam._m0[9u].y;
    float _330 = _323.z * cbMtdParam._m0[9u].z;
    float _334 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _300.x) * _328;
    float _337 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _300.y) * _329;
    float _340 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _300.z) * _330;
    float _347 = ((_328 - _334) * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) + _334;
    float _348 = ((_329 - _337) * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) + _337;
    float _349 = ((_330 - _340) * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) + _340;
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _397 = _393.z;
    float _401 = (_393.x * 2.0) + (-1.0);
    float _402 = (_393.y * 2.0) + (-1.0);
    float _403 = dot(vec2(_401, _402), vec2(_401, _402));
    float _3694 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _408 = sqrt(1.0 - (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))));
    float _413 = _401 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_367.x * 2.0) + (-1.0)));
    float _414 = _402 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_367.y * 2.0) + (-1.0)));
    float _417 = fma(_408, _236, fma(_414, _243, _413 * _229));
    float _420 = fma(_408, _237, fma(_414, _244, _413 * _230));
    float _423 = fma(_408, _238, fma(_414, _245, _413 * _231));
    float _427 = inversesqrt(dot(vec3(_417, _420, _423), vec3(_417, _420, _423)));
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _465 = _463.x;
    float _466 = 1.0 - _465;
    float _475 = (cbMtdParam._m0[19u].x + dot(vec4(_427 * _417, _427 * _420, _427 * _423, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_465 - _466) * cbMtdParam._m0[24u].z) + _466) * cbMtdParam._m0[21u].z);
    float _3705 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _478 = (-0.0) - cbMtdParam._m0[24u].x;
    float _480 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _480 : (isnan(_480) ? 1.0 : min(_480, 1.0));
    float _488 = _476 - ((_476 * TEXCOORD_8.x) * _481);
    float _489 = _476 - ((_476 * TEXCOORD_8.y) * _481);
    float _490 = _476 - ((_476 * TEXCOORD_8.z) * _481);
    float _497 = (_488 * (cbMtdParam._m0[17u].x - _347)) + _347;
    float _498 = (_489 * (cbMtdParam._m0[17u].y - _348)) + _348;
    float _499 = (_490 * (cbMtdParam._m0[17u].z - _349)) + _349;
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _513 = _511.x;
    float _514 = 1.0 - _513;
    float _542 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_513 - _514) * cbMtdParam._m0[24u].w) + _514) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3726 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _551 = ((((cbMtdParam._m0[10u].x - _497) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _543) + _497;
    float _552 = ((((cbMtdParam._m0[10u].y - _498) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _543) + _498;
    float _553 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _499)) * _543) + _499;
    vec4 _566 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _568 = _566.x;
    float _570 = _568 - (_568 * _488);
    float _572 = _570 - (_570 * _543);
    float _577 = (((_367.z - _397) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _397;
    vec4 _591 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _598 = (_591.x * 2.0) + (-1.0);
    float _599 = (_591.y * 2.0) + (-1.0);
    float _600 = dot(vec2(_598, _599), vec2(_598, _599));
    float _3737 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _608 = ((_591.z - _577) * _488) + _577;
    float _611 = ((cbMtdParam._m0[23u].y - _608) * _543) + _608;
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _636 = (_630.x * 2.0) + (-1.0);
    float _637 = (_630.y * 2.0) + (-1.0);
    float _638 = dot(vec2(_636, _637), vec2(_636, _637));
    float _3748 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _653 = ((sqrt(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) - _408) * _490) + _408;
    float _656 = (((_598 - _413) * _488) + _413) + (cbMtdParam._m0[21u].x * _413);
    float _657 = (((_599 - _414) * _489) + _414) + (cbMtdParam._m0[21u].x * _414);
    float _668 = (((_636 - _656) + (_656 * cbMtdParam._m0[22u].z)) * _543) + _656;
    float _669 = (((_637 - _657) + (_657 * cbMtdParam._m0[22u].z)) * _543) + _657;
    float _670 = (_543 * (sqrt(1.0 - (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) - _653)) + _653;
    float _672 = cbMtdParam._m0[22u].x + _393.w;
    float _675 = fma(_670, _236, fma(_669, _243, _668 * _229));
    float _678 = fma(_670, _237, fma(_669, _244, _668 * _230));
    float _681 = fma(_670, _238, fma(_669, _245, _668 * _231));
    float _685 = inversesqrt(dot(vec3(_675, _678, _681), vec3(_675, _678, _681)));
    float _686 = _685 * _675;
    float _687 = _685 * _678;
    float _688 = _685 * _681;
    float _3759 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _689 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3781 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _3792 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3803 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _3814 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _694 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _708 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _758 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _748);
    float _759 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _748);
    float _760 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _748);
    float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
    float _765 = _758 * _764;
    float _766 = _759 * _764;
    float _767 = _760 * _764;
    vec4 _772 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _774 = _772.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _949 = sqrt(((_758 * _758) + (_759 * _759)) + (_760 * _760));
        float _955 = (cbMatDynParam._m0[5u].x * _949) + cbMatDynParam._m0[5u].y;
        float _3825 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _960 = (cbMatDynParam._m0[5u].z * _949) + cbMatDynParam._m0[5u].w;
        float _3836 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) - _956)) + _956) < ((_774 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _786 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _787 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _807 = fma(_688, cbSceneParam._m0[5u].z, fma(_687, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _686));
    float _810 = fma(_688, cbSceneParam._m0[6u].z, fma(_687, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _686));
    float _813 = fma(_688, cbSceneParam._m0[7u].z, fma(_687, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _686));
    uint _826 = _267 + 9u;
    uint _827 = _826 + uint(cbMatDynParam._m0[0u].w);
    float _833 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * cbInstanceData._m0[_827].x;
    float _834 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * cbInstanceData._m0[_827].y;
    float _835 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * cbInstanceData._m0[_827].z;
    float _3847 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _839 = 1.0 - _694;
    float _840 = _836 * _839;
    float _841 = _837 * _839;
    float _842 = _838 * _839;
    float _847 = (_836 + (-0.039999999105930328369140625)) * _694;
    float _848 = (_837 + (-0.039999999105930328369140625)) * _694;
    float _849 = (_838 + (-0.039999999105930328369140625)) * _694;
    float _850 = _847 + 0.039999999105930328369140625;
    float _852 = _848 + 0.039999999105930328369140625;
    float _853 = _849 + 0.039999999105930328369140625;
    vec4 _862 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _786, cbSceneParam._m0[86u].y * _787));
    float _866 = ((isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * TEXCOORD_5.w) * _862.x;
    float _867 = dot(vec3(_686, _687, _688), vec3(_765, _766, _767));
    float _870 = _867 * 2.0;
    float _874 = (_870 * _686) - _765;
    float _875 = (_870 * _687) - _766;
    float _876 = (_870 * _688) - _767;
    float _880 = abs(dot(vec3(_765, _766, _767), vec3(_686, _687, _688)));
    float _3880 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _882 = sqrt(_689);
    float _895 = exp2((_882 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_882 * 3.0));
    float _901 = (1.0 - _895) * ((_882 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _902 = _895 * _882;
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1267;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _992 = fma(_938, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930));
        float _996 = fma(_938, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930));
        float _1000 = fma(_938, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930));
        float _1025 = _930 + _686;
        float _1026 = _934 + _687;
        float _1027 = _938 + _688;
        float _1037 = fma(_1027, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025)) - _992;
        float _1038 = fma(_1027, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025)) - _996;
        float _1039 = fma(_1027, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025)) - _1000;
        float _1043 = inversesqrt(dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039)));
        float _1056 = ((_1043 * _1037) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_992 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1043 * _1038) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_996 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1043 * _1039) / cbModelParam._m0[34u].z) + ((((((_1000 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        float _1095 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1061.x + (-0.5));
        float _1097 = _1095 * (_1061.y + (-0.5));
        float _1098 = _1095 * (_1061.z + (-0.5));
        float _1105 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1068.x + (-0.5));
        float _1107 = _1105 * (_1068.y + (-0.5));
        float _1108 = _1105 * (_1068.z + (-0.5));
        float _1115 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1075.x + (-0.5));
        float _1117 = _1115 * (_1075.y + (-0.5));
        float _1118 = _1115 * (_1075.z + (-0.5));
        float _1125 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1082.x + (-0.5));
        float _1127 = _1125 * (_1082.y + (-0.5));
        float _1128 = _1125 * (_1082.z + (-0.5));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = _1096 * 0.5;
        float _1133 = _1106 * 0.5;
        float _1134 = _1116 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1149 = (dot(vec3(_686, _687, _688), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1159 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3928 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1161 + 1.0))) + _1166) * _1129;
        float _1176 = _1097 * 0.5;
        float _1177 = _1107 * 0.5;
        float _1178 = _1117 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_686, _687, _688), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3961 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1203 + 1.0))) + _1208) * _1130;
        float _1218 = _1098 * 0.5;
        float _1219 = _1108 * 0.5;
        float _1220 = _1118 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_686, _687, _688), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3994 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1245 + 1.0))) + _1250) * _1131;
        _1267 = _1098;
        _1269 = _1097;
        _1270 = _1096;
        _1271 = _1108;
        _1272 = _1107;
        _1273 = _1106;
        _1274 = _1118;
        _1275 = _1117;
        _1276 = _1116;
        _1277 = _1131;
        _1278 = _1130;
        _1279 = _1129;
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
    }
    else
    {
        _1267 = _1268;
        _1269 = _1268;
        _1270 = _1268;
        _1271 = _1268;
        _1272 = _1268;
        _1273 = _1268;
        _1274 = _1268;
        _1275 = _1268;
        _1276 = _1268;
        _1277 = _1268;
        _1278 = _1268;
        _1279 = _1268;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1310 = fma(_938, cbModelParam._m0[30u].z, fma(_934, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930));
        float _1314 = fma(_938, cbModelParam._m0[31u].z, fma(_934, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930));
        float _1318 = fma(_938, cbModelParam._m0[32u].z, fma(_934, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930));
        float _1341 = _930 + _686;
        float _1342 = _934 + _687;
        float _1343 = _938 + _688;
        float _1353 = fma(_1343, cbModelParam._m0[30u].z, fma(_1342, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341)) - _1310;
        float _1354 = fma(_1343, cbModelParam._m0[31u].z, fma(_1342, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341)) - _1314;
        float _1355 = fma(_1343, cbModelParam._m0[32u].z, fma(_1342, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341)) - _1318;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1310 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1314 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[35u].z) + ((((((_1318 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1409 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1376.x + (-0.5));
        float _1411 = _1409 * (_1376.y + (-0.5));
        float _1412 = _1409 * (_1376.z + (-0.5));
        float _1419 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1383.x + (-0.5));
        float _1421 = _1419 * (_1383.y + (-0.5));
        float _1422 = _1419 * (_1383.z + (-0.5));
        float _1429 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1390.x + (-0.5));
        float _1431 = _1429 * (_1390.y + (-0.5));
        float _1432 = _1429 * (_1390.z + (-0.5));
        float _1439 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1397.x + (-0.5));
        float _1441 = _1439 * (_1397.y + (-0.5));
        float _1442 = _1439 * (_1397.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_686, _687, _688), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4057 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1473 + 1.0))) + _1478) * _1443;
        float _1488 = _1411 * 0.5;
        float _1489 = _1421 * 0.5;
        float _1490 = _1431 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_686, _687, _688), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4090 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1515 + 1.0))) + _1520) * _1444;
        float _1530 = _1412 * 0.5;
        float _1531 = _1422 * 0.5;
        float _1532 = _1432 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_686, _687, _688), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4123 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1557 + 1.0))) + _1562) * _1445;
        _1579 = _1412;
        _1580 = _1411;
        _1581 = _1410;
        _1582 = _1422;
        _1583 = _1421;
        _1584 = _1420;
        _1585 = _1432;
        _1586 = _1431;
        _1587 = _1430;
        _1588 = _1445;
        _1589 = _1444;
        _1590 = _1443;
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1268;
        _1580 = _1268;
        _1581 = _1268;
        _1582 = _1268;
        _1583 = _1268;
        _1584 = _1268;
        _1585 = _1268;
        _1586 = _1268;
        _1587 = _1268;
        _1588 = _1268;
        _1589 = _1268;
        _1590 = _1268;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1280)) + _1280;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1281)) + _1281;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1282)) + _1282;
    float _1626 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1603));
    float _1647 = _874 * 0.5;
    float _1648 = _875 * 0.5;
    float _1649 = _876 * 0.5;
    float _1650 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1653 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1656 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1690;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1663 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1267, _1271, _1274, _1277));
        float _1667 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1671 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1270, _1273, _1276, _1279));
        float _1678 = dot(vec4(cbModelParam._m0[39u]), vec4(_1647, _1648, _1649, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1701;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1692 = dot(vec4(cbModelParam._m0[40u]), vec4(_1647, _1648, _1649, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1705 = (_1701 * cbModelParam._m0[1u].x) + (_1690 * (1.0 - cbModelParam._m0[1u].x));
    float _1715 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _689);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1715 : min(cbModelParam._m0[25u].z, _1715));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1764 = fma(_938, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930)) + cbModelParam._m0[13u].w;
        float _1768 = fma(_938, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930)) + cbModelParam._m0[14u].w;
        float _1772 = fma(_938, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930)) + cbModelParam._m0[15u].w;
        float _1775 = fma(_876, cbModelParam._m0[13u].z, fma(_875, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _874));
        float _1778 = fma(_876, cbModelParam._m0[14u].z, fma(_875, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _874));
        float _1781 = fma(_876, cbModelParam._m0[15u].z, fma(_875, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _874));
        float _1809;
        if (_1775 > 0.0)
        {
            _1809 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1809 = frontier_phi_17_15_ladder;
        }
        float _2013;
        if (_1778 > 0.0)
        {
            _2013 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2013 = frontier_phi_26_22_ladder;
        }
        float _2267;
        if (_1781 > 0.0)
        {
            _2267 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2267 = frontier_phi_38_33_ladder;
        }
        float _2269 = isnan(_2013) ? _1809 : (isnan(_1809) ? _2013 : min(_1809, _2013));
        float _2270 = isnan(_2267) ? _2269 : (isnan(_2269) ? _2267 : min(_2269, _2267));
        float _2274 = (_2270 * _1775) + _1764;
        float _2275 = (_2270 * _1778) + _1768;
        float _2276 = (_2270 * _1781) + _1772;
        float _2277 = _2270 * 9.9999997473787516355514526367188e-05;
        float _2279 = (-1.0) - _2277;
        float _2281 = _2277 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2276 > _2281) || ((_2276 < _2279) || ((_2275 > _2281) || ((_2275 < _2279) || ((_2274 < _2279) || (_2274 > _2281))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2276, cbModelParam._m0[9u].z, fma(_2275, cbModelParam._m0[9u].y, _2274 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2276, cbModelParam._m0[10u].z, fma(_2275, cbModelParam._m0[10u].y, _2274 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2276, cbModelParam._m0[11u].z, fma(_2275, cbModelParam._m0[11u].y, _2274 * cbModelParam._m0[11u].x))), _1716);
            frontier_phi_16_38_ladder = _2404.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2404.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2404.x * cbModelParam._m0[1u].y;
        }
        _1797 = frontier_phi_16_38_ladder_2;
        _1799 = frontier_phi_16_38_ladder_1;
        _1801 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_874, _875, _876), _1716);
        _1797 = _1785.x * cbModelParam._m0[1u].y;
        _1799 = _1785.y * cbModelParam._m0[1u].y;
        _1801 = _1785.z * cbModelParam._m0[1u].y;
    }
    float _1805 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _689);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1805 : min(cbModelParam._m0[25u].w, _1805));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1860 = fma(_938, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930)) + cbModelParam._m0[21u].w;
        float _1864 = fma(_938, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930)) + cbModelParam._m0[22u].w;
        float _1868 = fma(_938, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930)) + cbModelParam._m0[23u].w;
        float _1871 = fma(_876, cbModelParam._m0[21u].z, fma(_875, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _874));
        float _1874 = fma(_876, cbModelParam._m0[22u].z, fma(_875, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _874));
        float _1877 = fma(_876, cbModelParam._m0[23u].z, fma(_875, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _874));
        float _2018;
        if (_1871 > 0.0)
        {
            _2018 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2018 = frontier_phi_28_24_ladder;
        }
        float _2294;
        if (_1874 > 0.0)
        {
            _2294 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2294 = frontier_phi_40_35_ladder;
        }
        float _2507;
        if (_1877 > 0.0)
        {
            _2507 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2507 = frontier_phi_49_46_ladder;
        }
        float _2509 = isnan(_2294) ? _2018 : (isnan(_2018) ? _2294 : min(_2018, _2294));
        float _2510 = isnan(_2507) ? _2509 : (isnan(_2509) ? _2507 : min(_2509, _2507));
        float _2514 = (_2510 * _1871) + _1860;
        float _2515 = (_2510 * _1874) + _1864;
        float _2516 = (_2510 * _1877) + _1868;
        float _2517 = _2510 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2517;
        float _2520 = _2517 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2516 > _2520) || ((_2516 < _2518) || ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 < _2518) || (_2514 > _2520))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2516, cbModelParam._m0[17u].z, fma(_2515, cbModelParam._m0[17u].y, _2514 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2516, cbModelParam._m0[18u].z, fma(_2515, cbModelParam._m0[18u].y, _2514 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2516, cbModelParam._m0[19u].z, fma(_2515, cbModelParam._m0[19u].y, _2514 * cbModelParam._m0[19u].x))), _1806);
            frontier_phi_25_49_ladder = _2715.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2715.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2715.x * cbModelParam._m0[1u].z;
        }
        _1896 = frontier_phi_25_49_ladder_2;
        _1898 = frontier_phi_25_49_ladder_1;
        _1900 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_874, _875, _876), _1806);
        _1896 = _1880.x * cbModelParam._m0[1u].z;
        _1898 = _1880.y * cbModelParam._m0[1u].z;
        _1900 = _1880.z * cbModelParam._m0[1u].z;
    }
    float _1913 = (((_901 * _850) + _902) * _866) * ((cbModelParam._m0[1u].w * (_1896 - _1797)) + _1797);
    float _1915 = (((_901 * _852) + _902) * _866) * ((cbModelParam._m0[1u].w * (_1898 - _1799)) + _1799);
    float _1917 = (((_901 * _853) + _902) * _866) * ((cbModelParam._m0[1u].w * (_1900 - _1801)) + _1801);
    float _1920 = fma(_1917, cbSceneParam._m0[89u].z, fma(_1915, cbSceneParam._m0[89u].y, _1913 * cbSceneParam._m0[89u].x));
    float _1923 = fma(_1917, cbSceneParam._m0[90u].z, fma(_1915, cbSceneParam._m0[90u].y, _1913 * cbSceneParam._m0[90u].x));
    float _1926 = fma(_1917, cbSceneParam._m0[91u].z, fma(_1915, cbSceneParam._m0[91u].y, _1913 * cbSceneParam._m0[91u].x));
    uvec4 _1936 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _1938 = _1936.x * 14u;
    uint _1939 = _1938 + 13u;
    float _1946 = _866 + (-1.0);
    float _1951 = (cbLight._m0[_1939].x * _1946) + 1.0;
    float _1952 = (cbLight._m0[_1939].y * _1946) + 1.0;
    float _1953 = (cbLight._m0[_1939].z * _1946) + 1.0;
    float _1954 = (cbLight._m0[_1939].w * _1946) + 1.0;
    uint _1955 = _1938 + 5u;
    float _1961 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1965 = _1938 + 4u;
    float _1972 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1976 = _1938 | 1u;
    float _1987 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_686, _687, _688));
    float _1990 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_686, _687, _688));
    float _4259 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _4270 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1995 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * 0.3183098733425140380859375;
    float _1997 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * 0.3183098733425140380859375;
    float _2004 = ((cbLight._m0[_1955].x * _1961) * _1997) + ((cbLight._m0[_1965].x * _1972) * _1995);
    float _2005 = ((_1961 * cbLight._m0[_1955].y) * _1997) + ((_1972 * cbLight._m0[_1965].y) * _1995);
    float _2006 = ((_1961 * cbLight._m0[_1955].z) * _1997) + ((_1972 * cbLight._m0[_1965].z) * _1995);
    uvec4 _2010 = floatBitsToUint(cbLight._m0[_1938 + 12u]);
    bool _2012 = _2010.x == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_2012)
    {
        _2023 = _2004;
        _2025 = _2005;
        _2027 = _2006;
    }
    else
    {
        uint _2031 = _1938 + 6u;
        float _2047 = (dot(vec3(cbLight._m0[_1938 + 2u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _4281 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2050 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2023 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _2004;
        _2025 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _2005;
        _2027 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _2006;
    }
    bool _2030 = _2010.y == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_2030)
    {
        _2068 = _2023;
        _2070 = _2025;
        _2072 = _2027;
    }
    else
    {
        uint _2238 = _1938 + 7u;
        float _2254 = (dot(vec3(cbLight._m0[_1938 + 3u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2255 = _2254 * _2254;
        float _4297 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2256 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2257 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2068 = (((cbLight._m0[_2238].x * 0.3183098733425140380859375) * _2256) * _2257) + _2023;
        _2070 = (((cbLight._m0[_2238].y * 0.3183098733425140380859375) * _2256) * _2257) + _2025;
        _2072 = (((cbLight._m0[_2238].z * 0.3183098733425140380859375) * _2256) * _2257) + _2027;
    }
    uint _2075 = _1938 + 8u;
    float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1938].w)) * _689) * 0.949999988079071044921875);
    float _2089 = _2088 * _2088;
    float _2090 = cbLight._m0[_1938].x + _765;
    float _2091 = cbLight._m0[_1938].y + _766;
    float _2092 = cbLight._m0[_1938].z + _767;
    float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
    float _2097 = _2096 * _2090;
    float _2098 = _2096 * _2091;
    float _2099 = _2096 * _2092;
    float _2100 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1938].xyz));
    float _4313 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _4324 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _2104 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _2105 = dot(vec3(_686, _687, _688), vec3(_2097, _2098, _2099));
    float _4335 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2109 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_2097, _2098, _2099));
    float _4346 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2113 = _2089 * _2089;
    float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
    float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
    float _2126 = 0.959999978542327880859375 - _847;
    float _2128 = 0.959999978542327880859375 - _848;
    float _2129 = 0.959999978542327880859375 - _849;
    float _2136 = 1.0 - _2089;
    float _2147 = (0.5 / (((_2104 * ((_2103 * _2136) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2136) + _2089) * _2103))) * _2103;
    float _4357 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
    uint _2160 = _1938 + 9u;
    float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _689) * 0.949999988079071044921875);
    float _2172 = _2171 * _2171;
    float _2173 = cbLight._m0[_1976].x + _765;
    float _2174 = cbLight._m0[_1976].y + _766;
    float _2175 = cbLight._m0[_1976].z + _767;
    float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
    float _2180 = _2179 * _2173;
    float _2181 = _2179 * _2174;
    float _2182 = _2179 * _2175;
    float _2183 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1976].xyz));
    float _4368 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _2187 = dot(vec3(_686, _687, _688), vec3(_2180, _2181, _2182));
    float _4379 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2191 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2180, _2181, _2182));
    float _4390 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2195 = _2172 * _2172;
    float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
    float _2206 = exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0);
    float _2213 = 1.0 - _2172;
    float _2223 = (0.5 / (((_2104 * ((_2186 * _2213) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2213) + _2172) * _2186))) * _2186;
    float _4401 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2225 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
    float _2235 = (((((_2206 * _2126) + _850) * cbLight._m0[_2160].x) * _2225) * _1961) + (((((_2125 * _2126) + _850) * cbLight._m0[_2075].x) * _2149) * _1972);
    float _2236 = (((((_2206 * _2128) + _852) * cbLight._m0[_2160].y) * _2225) * _1961) + (((((_2125 * _2128) + _852) * cbLight._m0[_2075].y) * _2149) * _1972);
    float _2237 = (((((_2206 * _2129) + _853) * cbLight._m0[_2160].z) * _2225) * _1961) + (((((_2125 * _2129) + _853) * cbLight._m0[_2075].z) * _2149) * _1972);
    float _2299;
    float _2301;
    float _2303;
    if (_2012)
    {
        _2299 = _2235;
        _2301 = _2236;
        _2303 = _2237;
    }
    else
    {
        uint _2305 = _1938 + 2u;
        uint _2309 = _1938 + 10u;
        float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _689) * 0.949999988079071044921875);
        float _2324 = _2323 * _2323;
        float _2325 = cbLight._m0[_2305].x + _765;
        float _2326 = cbLight._m0[_2305].y + _766;
        float _2327 = cbLight._m0[_2305].z + _767;
        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
        float _2332 = _2331 * _2325;
        float _2333 = _2331 * _2326;
        float _2334 = _2331 * _2327;
        float _2335 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2305].xyz));
        float _4412 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2339 = dot(vec3(_686, _687, _688), vec3(_2332, _2333, _2334));
        float _4423 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2343 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2332, _2333, _2334));
        float _4434 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2347 = _2324 * _2324;
        float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
        float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
        float _2365 = 1.0 - _2324;
        float _2375 = (0.5 / (((_2104 * ((_2338 * _2365) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2365) + _2324) * _2338))) * _2338;
        float _4445 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2377 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
        float _2378 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2299 = (((((_2358 * _2126) + _850) * cbLight._m0[_2309].x) * _2377) * _2378) + _2235;
        _2301 = (((((_2358 * _2128) + _852) * cbLight._m0[_2309].y) * _2377) * _2378) + _2236;
        _2303 = (((((_2358 * _2129) + _853) * cbLight._m0[_2309].z) * _2377) * _2378) + _2237;
    }
    float _2413;
    float _2415;
    float _2417;
    if (_2030)
    {
        _2413 = _2299;
        _2415 = _2301;
        _2417 = _2303;
    }
    else
    {
        uint _2424 = _1938 + 3u;
        uint _2428 = _1938 + 11u;
        float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _689) * 0.949999988079071044921875);
        float _2443 = _2442 * _2442;
        float _2444 = cbLight._m0[_2424].x + _765;
        float _2445 = cbLight._m0[_2424].y + _766;
        float _2446 = cbLight._m0[_2424].z + _767;
        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
        float _2451 = _2450 * _2444;
        float _2452 = _2450 * _2445;
        float _2453 = _2450 * _2446;
        float _2454 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2424].xyz));
        float _4461 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2458 = dot(vec3(_686, _687, _688), vec3(_2451, _2452, _2453));
        float _4472 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2462 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2451, _2452, _2453));
        float _4483 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2466 = _2443 * _2443;
        float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
        float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0);
        float _2484 = 1.0 - _2443;
        float _2494 = (0.5 / (((_2104 * ((_2457 * _2484) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2484) + _2443) * _2457))) * _2457;
        float _4494 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2496 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
        float _2497 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2413 = (((((_2477 * _2126) + _850) * cbLight._m0[_2428].x) * _2496) * _2497) + _2299;
        _2415 = (((((_2477 * _2128) + _852) * cbLight._m0[_2428].y) * _2496) * _2497) + _2301;
        _2417 = (((((_2477 * _2129) + _853) * cbLight._m0[_2428].z) * _2496) * _2497) + _2303;
    }
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    if (_1936.y == 0u)
    {
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2573 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2572;
        float _2574 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2572;
        float _2575 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2572;
        uvec4 _2587 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2588 = _2587.x;
        uint _2599 = uint((float(_2587.y) * floor(float(uint(cbSceneParam._m0[85u].y * _787) / _2588))) + floor(float(uint(cbSceneParam._m0[85u].x * _786) / _2588)));
        float _2609 = (log2(_2575 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2610 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        uint _2613 = uint(isnan(14.0) ? _2610 : (isnan(_2610) ? 14.0 : min(_2610, 14.0)));
        uvec4 _2618 = texelFetch(g_lightClusterGridBuffer, int(((_2613 << 2u) + (_2599 << 6u)) >> 2u));
        uint _2619 = _2618.x;
        uint _2620 = _2587.z;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        if (((((1u << ((_2620 >> 4u) & 15u)) + 4294967295u) & _2619) == 0u) || ((_2620 & 240u) == 0u))
        {
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
        }
        else
        {
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            uint _2878 = 0u;
            uint _2887;
            bool _2888;
            for (;;)
            {
                _2887 = texelFetch(g_lightClassification, int((((_2613 << 5u) + (_2599 << 9u)) + (_2878 << 2u)) >> 2u)).x;
                _2888 = _2887 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2888)
                {
                    frontier_phi_66_pred = _2872;
                    frontier_phi_66_pred_1 = _2877;
                    frontier_phi_66_pred_2 = _2876;
                    frontier_phi_66_pred_3 = _2875;
                    frontier_phi_66_pred_4 = _2874;
                    frontier_phi_66_pred_5 = _2873;
                }
                else
                {
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    uint _3023;
                    _3017 = _2872;
                    _3018 = _2873;
                    _3019 = _2874;
                    _3020 = _2875;
                    _3021 = _2876;
                    _3022 = _2877;
                    _3023 = _2887;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    for (;;)
                    {
                        uint _3027 = uint(findLSB(_3023)) + (_2878 << 5u);
                        uint _3024 = (_3023 + 4294967295u) & _3023;
                        uint _3029 = _3027 * 48u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 3u)).x));
                        uint _3049 = (_3027 * 48u) + 4u;
                        vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 3u)).x));
                        uint _3068 = (_3027 * 48u) + 8u;
                        vec3 _3079 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x));
                        float _3083 = _3043.x - _2573;
                        float _3084 = _3043.y - _2574;
                        float _3085 = _3043.z - _2575;
                        float _3086 = dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085));
                        float _3089 = inversesqrt(_3086);
                        float _3090 = _3089 * _3083;
                        float _3091 = _3089 * _3084;
                        float _3092 = _3089 * _3085;
                        float _3093 = dot(vec3(_807, _810, _813), vec3(_3090, _3091, _3092));
                        float _3098 = 1.0 - (_3086 * _3043.w);
                        float _4520 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3099 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3100 = sqrt(_3086) * _3062.w;
                        float _3103 = 1.39999997615814208984375 / (_3100 + 1.39999997615814208984375);
                        float _3104 = _3103 * _3103;
                        float _3107 = ((1.0 - _3104) * _3093) + _3104;
                        float _3110 = _3100 * _3100;
                        float _3114 = ((isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0))) * _3099) / ((_3110 * 0.699999988079071044921875) + 1.0);
                        float _3118 = (-0.0) - _2573;
                        float _3119 = (-0.0) - _2574;
                        float _3120 = (-0.0) - _2575;
                        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                        float _3125 = _3124 * _3118;
                        float _3126 = _3124 * _3119;
                        float _3127 = _3124 * _3120;
                        float _3135 = exp2(log2(1.0 / ((_3110 * 3.5) + 5.0)) * 0.25);
                        float _3136 = 1.0 - _882;
                        float _3143 = sqrt(1.0 - ((1.0 - (_3136 * _3136)) * (1.0 - (_3135 * _3135))));
                        float _3144 = _3143 * _3143;
                        float _3145 = _3144 * _3144;
                        float _3146 = _3125 + _3090;
                        float _3147 = _3126 + _3091;
                        float _3148 = _3127 + _3092;
                        float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                        float _3156 = dot(vec3(_807, _810, _813), vec3(_3125, _3126, _3127));
                        float _4536 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3159 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3160 = dot(vec3(_807, _810, _813), vec3(_3152 * _3146, _3152 * _3147, _3152 * _3148));
                        float _4547 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3163 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3167 = ((_3163 * _3163) * (_3145 + (-1.0))) + 1.0;
                        float _3168 = _3103 * _3144;
                        float _3169 = _3168 * _3168;
                        float _3172 = ((1.0 - _3169) * _3093) + _3169;
                        float _4558 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3173 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3174 = 1.0 - _3144;
                        float _3184 = (0.5 / (((_3173 * ((_3159 * _3174) + _3144)) + 9.9999999392252902907785028219223e-09) + (((_3173 * _3174) + _3144) * _3159))) * _3173;
                        float _4569 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3195 = (((_3145 * 3.1415927410125732421875) * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) / ((_3167 * _3167) * ((_3110 * 2.1991131305694580078125) + 3.141590118408203125))) * _3099;
                        _2947 = (_3114 * _3062.x) + _3020;
                        _2948 = (_3114 * _3062.y) + _3021;
                        _2949 = (_3114 * _3062.z) + _3022;
                        _2944 = (_3195 * _3079.x) + _3017;
                        _2945 = (_3195 * _3079.y) + _3018;
                        _2946 = (_3195 * _3079.z) + _3019;
                        if (_3024 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3017 = _2944;
                            _3018 = _2945;
                            _3019 = _2946;
                            _3020 = _2947;
                            _3021 = _2948;
                            _3022 = _2949;
                            _3023 = _3024;
                        }
                    }
                    frontier_phi_66_pred = _2944;
                    frontier_phi_66_pred_1 = _2949;
                    frontier_phi_66_pred_2 = _2948;
                    frontier_phi_66_pred_3 = _2947;
                    frontier_phi_66_pred_4 = _2946;
                    frontier_phi_66_pred_5 = _2945;
                }
                _2721 = frontier_phi_66_pred;
                _2731 = frontier_phi_66_pred_1;
                _2729 = frontier_phi_66_pred_2;
                _2727 = frontier_phi_66_pred_3;
                _2725 = frontier_phi_66_pred_4;
                _2723 = frontier_phi_66_pred_5;
                uint _2879 = _2878 + 1u;
                if (_2879 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2872 = _2721;
                    _2873 = _2723;
                    _2874 = _2725;
                    _2875 = _2727;
                    _2876 = _2729;
                    _2877 = _2731;
                    _2878 = _2879;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
        }
        uvec4 _2734 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2735 = _2734.z;
        uint _2737 = (_2735 >> 8u) & 15u;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        if (((4294967295u << _2737) & _2619) == 0u)
        {
            _2840 = _2720;
            _2842 = _2722;
            _2844 = _2724;
            _2846 = _2726;
            _2848 = _2728;
            _2850 = _2730;
        }
        else
        {
            float _2865 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
            float _2866 = _2865 * _2573;
            float _2867 = _2865 * _2574;
            float _2868 = _2865 * _2575;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2737 < ((_2735 >> 12u) & 15u))
            {
                float _2841;
                float _2843;
                float _2845;
                float _2847;
                float _2849;
                float _2851;
                float _3000 = _2720;
                float _3001 = _2722;
                float _3002 = _2724;
                float _3003 = _2726;
                float _3004 = _2728;
                float _3005 = _2730;
                uint _3006 = _2737;
                uint _3015;
                bool _3016;
                for (;;)
                {
                    _3015 = texelFetch(g_lightClassification, int((((_2613 << 5u) + (_2599 << 9u)) + (_3006 << 2u)) >> 2u)).x;
                    _3016 = _3015 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3016)
                    {
                        frontier_phi_77_pred = _3005;
                        frontier_phi_77_pred_1 = _3004;
                        frontier_phi_77_pred_2 = _3003;
                        frontier_phi_77_pred_3 = _3002;
                        frontier_phi_77_pred_4 = _3001;
                        frontier_phi_77_pred_5 = _3000;
                    }
                    else
                    {
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3222 = _3000;
                        float _3223 = _3001;
                        float _3224 = _3002;
                        float _3225 = _3003;
                        float _3226 = _3004;
                        float _3227 = _3005;
                        uint _3228 = _3015;
                        uint _3229;
                        vec4 _3254;
                        float _3255;
                        vec4 _3270;
                        vec3 _3282;
                        vec4 _3297;
                        vec4 _3312;
                        float _3358;
                        bool _3359;
                        for (;;)
                        {
                            uint _3239 = ((_3006 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3228));
                            _3229 = (_3228 + 4294967295u) & _3228;
                            uint _3241 = _3239 * 40u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            _3255 = _3254.w;
                            uint _3257 = (_3239 * 40u) + 4u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3272 = (_3239 * 40u) + 8u;
                            _3282 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x));
                            uint _3284 = (_3239 * 40u) + 16u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3239 * 40u) + 20u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3239 * 40u) + 24u;
                            vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3333 = (_3239 * 40u) + 28u;
                            vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            _3358 = fma(_2575, _3346.z, fma(_2574, _3346.y, _3346.x * _2573)) + _3346.w;
                            _3359 = !((fma(_2575, _3327.z, fma(_2574, _3327.y, _3327.x * _2573)) + _3327.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3359)
                            {
                                float _3386 = _3254.x - _2573;
                                float _3387 = _3254.y - _2574;
                                float _3388 = _3254.z - _2575;
                                float _3389 = dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388));
                                float _3392 = inversesqrt(_3389);
                                float _3393 = _3392 * _3386;
                                float _3394 = _3392 * _3387;
                                float _3395 = _3392 * _3388;
                                float _3399 = 1.0 - (_3389 / (_3255 * _3255));
                                float _4580 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3404 = sqrt(_3389) * _3270.w;
                                float _3406 = 1.39999997615814208984375 / (_3404 + 1.39999997615814208984375);
                                float _3407 = _3406 * _3406;
                                float _3410 = ((1.0 - _3407) * dot(vec3(_3393, _3394, _3395), vec3(_807, _810, _813))) + _3407;
                                float _3413 = _3404 * _3404;
                                float _3417 = (fma(_2575, _3297.z, fma(_2574, _3297.y, _3297.x * _2573)) + _3297.w) / _3358;
                                float _3418 = (fma(_2575, _3312.z, fma(_2574, _3312.y, _3312.x * _2573)) + _3312.w) / _3358;
                                float _3422 = 1.0 - dot(vec2(_3417, _3418), vec2(_3417, _3418));
                                float _4596 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3424 = _3423 * (((isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0))) * _3400) / ((_3413 * 0.699999988079071044921875) + 1.0));
                                float _3436 = exp2(log2(1.0 / ((_3413 * 3.5) + 5.0)) * 0.25);
                                float _3437 = 1.0 - _882;
                                float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                                float _3445 = _3444 * _3444;
                                float _3446 = _3445 * _3445;
                                float _3447 = _3393 - _2866;
                                float _3448 = _3394 - _2867;
                                float _3449 = _3395 - _2868;
                                float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                                float _3457 = dot(vec3(_807, _810, _813), vec3((-0.0) - _2866, (-0.0) - _2867, (-0.0) - _2868));
                                float _4607 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3460 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3461 = dot(vec3(_807, _810, _813), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                                float _4618 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3464 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                                float _3469 = _3406 * _3445;
                                float _3470 = _3469 * _3469;
                                float _3476 = ((1.0 - _3470) * dot(vec3(_807, _810, _813), vec3(_3393, _3394, _3395))) + _3470;
                                float _4629 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3478 = 1.0 - _3445;
                                float _3488 = (0.5 / (((_3477 * ((_3460 * _3478) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3477 * _3478) + _3445) * _3460))) * _3477;
                                float _4640 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3498 = (_3423 * _3400) * (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) / ((_3468 * _3468) * ((_3413 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3424 * _3270.y;
                                frontier_phi_83_pred_1 = _3424 * _3270.x;
                                frontier_phi_83_pred_2 = _3498 * _3282.z;
                                frontier_phi_83_pred_3 = _3498 * _3282.y;
                                frontier_phi_83_pred_4 = _3498 * _3282.x;
                                frontier_phi_83_pred_5 = _3424 * _3270.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3506 = frontier_phi_83_pred;
                            _3505 = frontier_phi_83_pred_1;
                            _3504 = frontier_phi_83_pred_2;
                            _3503 = frontier_phi_83_pred_3;
                            _3502 = frontier_phi_83_pred_4;
                            _3507 = frontier_phi_83_pred_5;
                            _3212 = _3505 + _3225;
                            _3213 = _3506 + _3226;
                            _3214 = _3507 + _3227;
                            _3209 = _3502 + _3222;
                            _3210 = _3503 + _3223;
                            _3211 = _3504 + _3224;
                            if (_3229 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3229;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3214;
                        frontier_phi_77_pred_1 = _3213;
                        frontier_phi_77_pred_2 = _3212;
                        frontier_phi_77_pred_3 = _3211;
                        frontier_phi_77_pred_4 = _3210;
                        frontier_phi_77_pred_5 = _3209;
                    }
                    _2851 = frontier_phi_77_pred;
                    _2849 = frontier_phi_77_pred_1;
                    _2847 = frontier_phi_77_pred_2;
                    _2845 = frontier_phi_77_pred_3;
                    _2843 = frontier_phi_77_pred_4;
                    _2841 = frontier_phi_77_pred_5;
                    uint _3007 = _3006 + 1u;
                    if (_3007 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3000 = _2841;
                        _3001 = _2843;
                        _3002 = _2845;
                        _3003 = _2847;
                        _3004 = _2849;
                        _3005 = _2851;
                        _3006 = _3007;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2845;
                frontier_phi_58_59_ladder_1 = _2851;
                frontier_phi_58_59_ladder_2 = _2849;
                frontier_phi_58_59_ladder_3 = _2847;
                frontier_phi_58_59_ladder_4 = _2843;
                frontier_phi_58_59_ladder_5 = _2841;
            }
            else
            {
                frontier_phi_58_59_ladder = _2724;
                frontier_phi_58_59_ladder_1 = _2730;
                frontier_phi_58_59_ladder_2 = _2728;
                frontier_phi_58_59_ladder_3 = _2726;
                frontier_phi_58_59_ladder_4 = _2722;
                frontier_phi_58_59_ladder_5 = _2720;
            }
            _2840 = frontier_phi_58_59_ladder_5;
            _2842 = frontier_phi_58_59_ladder_4;
            _2844 = frontier_phi_58_59_ladder;
            _2846 = frontier_phi_58_59_ladder_3;
            _2848 = frontier_phi_58_59_ladder_2;
            _2850 = frontier_phi_58_59_ladder_1;
        }
        float _2855 = isnan(1.0) ? _866 : (isnan(_866) ? 1.0 : min(_866, 1.0));
        _2632 = (_2855 * _2846) + _2068;
        _2634 = (_2855 * _2848) + _2070;
        _2636 = (_2855 * _2850) + _2072;
        _2638 = ((_2840 * _850) * _2855) + _2413;
        _2640 = ((_2842 * _852) * _2855) + _2415;
        _2642 = ((_2844 * _853) * _2855) + _2417;
    }
    else
    {
        _2632 = _2068;
        _2634 = _2070;
        _2636 = _2072;
        _2638 = _2413;
        _2640 = _2415;
        _2642 = _2417;
    }
    float _4656 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4667 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4678 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _2659 = ((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2632 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _866))) + ((_2638 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    float _2660 = ((isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2634 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _866))) + ((_2640 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    float _2661 = ((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2636 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _866))) + ((_2642 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    uint _2662 = _267 + 6u;
    float _2670 = _786 / cbSceneParam._m0[86u].x;
    float _2671 = _787 / cbSceneParam._m0[86u].y;
    vec4 _2685 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2670, _2671, (log2((isnan(cbSceneParam._m0[77u].w) ? _708 : (isnan(_708) ? cbSceneParam._m0[77u].w : min(_708, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2687 = _2685.x;
    float _2688 = _2685.y;
    float _2689 = _2685.z;
    float _2690 = _2685.w;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    if (_708 > cbSceneParam._m0[78u].w)
    {
        float _2745 = isnan(_708) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _708 : min(cbSceneParam._m0[80u].w, _708));
        float _2746 = _2745 / _708;
        float _2757 = _2746 * _758;
        float _2758 = _759 * _2746;
        float _2759 = (-0.0) - _2758;
        float _2760 = _2746 * _760;
        float _2762 = (cbSceneParam._m0[77u].w * _2759) / _2745;
        float _2763 = _2762 + cbSceneParam._m0[79u].w;
        float _2764 = cbSceneParam._m0[79u].w - _2758;
        float _2770 = sqrt(((_2757 * _2757) + (_2758 * _2758)) + (_2760 * _2760));
        float _2773 = (1.0 - (cbSceneParam._m0[77u].w / _2745)) * _2770;
        float _2778 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2780 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2957;
        if (abs((_2759 - _2762) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2957 = ((((_2763 > 0.0) ? exp2(_2778 * _2763) : (2.0 - exp2(_2780 * _2763))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2773;
        }
        else
        {
            float _2901 = 1.0 / cbSceneParam._m0[80u].x;
            float _2902 = isnan(_2764) ? _2763 : (isnan(_2763) ? _2764 : max(_2763, _2764));
            float _2903 = isnan(_2764) ? _2763 : (isnan(_2763) ? _2764 : min(_2763, _2764));
            float _2912 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : min(_2902, 0.0));
            float _2913 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : min(_2903, 0.0));
            _2957 = ((abs(_2770 / _2759) * cbSceneParam._m0[80u].y) * ((((_2912 - _2913) * 2.0) - ((exp2(_2778 * (isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0)))) - exp2(_2778 * (isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0))))) * _2901)) - ((exp2(_2780 * _2912) - exp2(_2780 * _2913)) * _2901))) + (_2773 * cbSceneParam._m0[80u].z);
        }
        vec4 _2959 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2670, _2671, 1.0), 0.0);
        float _2968 = exp2((_2957 * (-1.44269502162933349609375)) * (1.0 - _2959.w));
        float _2969 = log2(_2968);
        float _2985 = log2(_2690);
        _2782 = (exp2(_2985 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].x)) * _2959.x) / cbSceneParam._m0[78u].x)) + _2687;
        _2784 = (exp2(_2985 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].y)) * _2959.y) / cbSceneParam._m0[78u].y)) + _2688;
        _2786 = (exp2(_2985 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].z)) * _2959.z) / cbSceneParam._m0[78u].z)) + _2689;
        _2788 = _2968 * _2690;
    }
    else
    {
        _2782 = _2687;
        _2784 = _2688;
        _2786 = _2689;
        _2788 = _2690;
    }
    bool _2995;
    vec4 _2798;
    vec4 _2820;
    float _2822;
    float _2826;
    float _2827;
    float _2828;
    float _2829;
    bool _2839;
    for (;;)
    {
        _2798 = cbMatDynParam._m0[0u];
        float _2800 = roundEven(_2798.y);
        bool _2801 = _2800 == 3.0;
        float _2802 = log2(_2788);
        float _2809 = exp2(_2802 * cbSceneParam._m0[78u].x) * _2659;
        float _2810 = exp2(_2802 * cbSceneParam._m0[78u].y) * _2660;
        float _2811 = exp2(_2802 * cbSceneParam._m0[78u].z) * _2661;
        float _2818 = _774 + (-0.5);
        _2820 = cbMtdParam._m0[1u];
        _2822 = _2820.y * _2818;
        float _2825 = (_2800 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2826 = _2825 * (_2801 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2782)));
        _2827 = _2825 * (_2801 ? _2810 : (_2810 + (cbSceneParam._m0[72u].w * _2784)));
        _2828 = _2825 * (_2801 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2786)));
        _2829 = _2818 * 0.999000012874603271484375;
        _2839 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2839)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _2829) < 0.5)
            {
                _2995 = true;
                break;
            }
        }
        uint _2936 = _826 + uint(_2798.w);
        if ((cbInstanceData._m0[_2936].w < 1.0) && ((cbInstanceData._m0[_2936].w + _2829) < 0.5))
        {
            _2995 = true;
            break;
        }
        if ((_2822 + 1.0) < _2820.x)
        {
            _2995 = true;
            break;
        }
        _2995 = false;
        break;
    }
    float _3200;
    if (_2995)
    {
        discard_state = true;
        _3200 = 0.0;
    }
    else
    {
        _3200 = cbInstanceData._m0[_2662].w;
    }
    SV_Target.x = _2826;
    SV_Target.y = _2827;
    SV_Target.z = _2828;
    SV_Target.w = _3200;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2662].w;
    discard_exit();
}


