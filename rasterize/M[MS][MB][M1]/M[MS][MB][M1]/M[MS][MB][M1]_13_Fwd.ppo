#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _974;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _220 = uint(roundEven(NORMAL.w)) * 13u;
    uint _226 = _220 + 1u;
    uint _230 = _220 + 2u;
    float _239 = sqrt(((cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x) + (cbInstanceData._m0[_220].x * cbInstanceData._m0[_220].x)) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x));
    float _240 = _239 * TEXCOORD.z;
    float _241 = _239 * TEXCOORD.w;
    vec4 _260 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    vec4 _286 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _290 = _286.z;
    float _295 = (_286.x * 2.0) + (-1.0);
    float _297 = (_286.y * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3305 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _304 = sqrt(1.0 - (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))));
    vec4 _321 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _240) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _241) + cbTextureTilingScale._m0[11u].w));
    float _323 = _321.x;
    float _324 = 1.0 - _323;
    float _340 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_323 - _324) * cbMtdParam._m0[24u].z) + _324) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3316 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _341 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _348 = (_341 * (cbMtdParam._m0[17u].x - _266)) + _266;
    float _349 = (_341 * (cbMtdParam._m0[17u].y - _267)) + _267;
    float _350 = (_341 * (cbMtdParam._m0[17u].z - _268)) + _268;
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _365 = _363.x;
    float _367 = _365 - (_365 * _341);
    vec4 _380 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _240) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _241) + cbTextureTilingScale._m0[15u].w));
    float _387 = (_380.x * 2.0) + (-1.0);
    float _388 = (_380.y * 2.0) + (-1.0);
    float _389 = dot(vec2(_387, _388), vec2(_387, _388));
    float _3327 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _397 = (_341 * (_380.z - _290)) + _290;
    float _409 = (((_387 - _295) + (cbMtdParam._m0[21u].x * _295)) * _341) + _295;
    float _410 = (((_388 - _297) + (cbMtdParam._m0[21u].x * _297)) * _341) + _297;
    float _411 = (_341 * (sqrt(1.0 - (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) - _304)) + _304;
    float _416 = cbMtdParam._m0[22u].x + _286.w;
    float _419 = fma(_411, _207 * NORMAL.x, fma(_410, _214 * TANGENT.x, (_200 * _192) * _409));
    float _422 = fma(_411, _207 * NORMAL.y, fma(_410, _214 * TANGENT.y, (_200 * _193) * _409));
    float _425 = fma(_411, _207 * NORMAL.z, fma(_410, _214 * TANGENT.z, (_200 * _194) * _409));
    float _429 = inversesqrt(dot(vec3(_419, _422, _425), vec3(_419, _422, _425)));
    float _430 = _429 * _419;
    float _431 = _429 * _422;
    float _432 = _429 * _425;
    float _3338 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _433 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _3349 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _3360 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3371 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3382 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3393 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _438 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _452 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _493 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _503 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _493);
    float _504 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _493);
    float _505 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _493);
    float _509 = inversesqrt(dot(vec3(_503, _504, _505), vec3(_503, _504, _505)));
    float _510 = _503 * _509;
    float _511 = _504 * _509;
    float _512 = _505 * _509;
    float _518 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _519 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _540 = fma(_432, cbSceneParam._m0[5u].z, fma(_431, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _430));
    float _543 = fma(_432, cbSceneParam._m0[6u].z, fma(_431, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _430));
    float _546 = fma(_432, cbSceneParam._m0[7u].z, fma(_431, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _430));
    uint _560 = (_220 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _566 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_560].x;
    float _567 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * cbInstanceData._m0[_560].y;
    float _568 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)))) * cbInstanceData._m0[_560].z;
    float _3404 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _572 = 1.0 - _438;
    float _573 = _569 * _572;
    float _574 = _570 * _572;
    float _575 = _571 * _572;
    float _580 = (_569 + (-0.039999999105930328369140625)) * _438;
    float _581 = (_570 + (-0.039999999105930328369140625)) * _438;
    float _582 = (_571 + (-0.039999999105930328369140625)) * _438;
    float _583 = _580 + 0.039999999105930328369140625;
    float _585 = _581 + 0.039999999105930328369140625;
    float _586 = _582 + 0.039999999105930328369140625;
    vec4 _595 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _518, cbSceneParam._m0[86u].y * _519));
    float _599 = ((isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * TEXCOORD_5.w) * _595.x;
    float _600 = dot(vec3(_430, _431, _432), vec3(_510, _511, _512));
    float _603 = _600 * 2.0;
    float _607 = (_603 * _430) - _510;
    float _608 = (_603 * _431) - _511;
    float _609 = (_603 * _432) - _512;
    float _613 = abs(dot(vec3(_510, _511, _512), vec3(_430, _431, _432)));
    float _3437 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _615 = sqrt(_433);
    float _628 = exp2((_615 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_615 * 3.0));
    float _634 = (1.0 - _628) * ((_615 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _635 = _628 * _615;
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _973;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _698 = fma(_671, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _663));
        float _702 = fma(_671, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _663));
        float _706 = fma(_671, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _663));
        float _731 = _663 + _430;
        float _732 = _667 + _431;
        float _733 = _671 + _432;
        float _743 = fma(_733, cbModelParam._m0[26u].z, fma(_732, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731)) - _698;
        float _744 = fma(_733, cbModelParam._m0[27u].z, fma(_732, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731)) - _702;
        float _745 = fma(_733, cbModelParam._m0[28u].z, fma(_732, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731)) - _706;
        float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
        float _762 = ((_749 * _743) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_698 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _763 = ((_749 * _744) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_702 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _764 = ((_749 * _745) / cbModelParam._m0[34u].z) + ((((((_706 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        float _801 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_767.x + (-0.5));
        float _803 = _801 * (_767.y + (-0.5));
        float _804 = _801 * (_767.z + (-0.5));
        float _811 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_774.x + (-0.5));
        float _813 = _811 * (_774.y + (-0.5));
        float _814 = _811 * (_774.z + (-0.5));
        float _821 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_781.x + (-0.5));
        float _823 = _821 * (_781.y + (-0.5));
        float _824 = _821 * (_781.z + (-0.5));
        float _831 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_788.x + (-0.5));
        float _833 = _831 * (_788.y + (-0.5));
        float _834 = _831 * (_788.z + (-0.5));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = _802 * 0.5;
        float _839 = _812 * 0.5;
        float _840 = _822 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _855 = (dot(vec3(_430, _431, _432), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _865 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3485 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_867 + 1.0))) + _872) * _835;
        float _882 = _803 * 0.5;
        float _883 = _813 * 0.5;
        float _884 = _823 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_430, _431, _432), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3518 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_909 + 1.0))) + _914) * _836;
        float _924 = _804 * 0.5;
        float _925 = _814 * 0.5;
        float _926 = _824 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_430, _431, _432), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3551 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_951 + 1.0))) + _956) * _837;
        _973 = _804;
        _975 = _803;
        _976 = _802;
        _977 = _814;
        _978 = _813;
        _979 = _812;
        _980 = _824;
        _981 = _823;
        _982 = _822;
        _983 = _837;
        _984 = _836;
        _985 = _835;
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _988 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
    }
    else
    {
        _973 = _974;
        _975 = _974;
        _976 = _974;
        _977 = _974;
        _978 = _974;
        _979 = _974;
        _980 = _974;
        _981 = _974;
        _982 = _974;
        _983 = _974;
        _984 = _974;
        _985 = _974;
        _986 = 0.0;
        _987 = 0.0;
        _988 = 0.0;
    }
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1013 = fma(_671, cbModelParam._m0[30u].z, fma(_667, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _663));
        float _1017 = fma(_671, cbModelParam._m0[31u].z, fma(_667, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _663));
        float _1021 = fma(_671, cbModelParam._m0[32u].z, fma(_667, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _663));
        float _1044 = _663 + _430;
        float _1045 = _667 + _431;
        float _1046 = _671 + _432;
        float _1056 = fma(_1046, cbModelParam._m0[30u].z, fma(_1045, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1044)) - _1013;
        float _1057 = fma(_1046, cbModelParam._m0[31u].z, fma(_1045, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1044)) - _1017;
        float _1058 = fma(_1046, cbModelParam._m0[32u].z, fma(_1045, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1044)) - _1021;
        float _1062 = inversesqrt(dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058)));
        float _1075 = ((_1062 * _1056) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1013 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1062 * _1057) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1017 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1062 * _1058) / cbModelParam._m0[35u].z) + ((((((_1021 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        float _1112 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1079.x + (-0.5));
        float _1114 = _1112 * (_1079.y + (-0.5));
        float _1115 = _1112 * (_1079.z + (-0.5));
        float _1122 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1086.x + (-0.5));
        float _1124 = _1122 * (_1086.y + (-0.5));
        float _1125 = _1122 * (_1086.z + (-0.5));
        float _1132 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1093.x + (-0.5));
        float _1134 = _1132 * (_1093.y + (-0.5));
        float _1135 = _1132 * (_1093.z + (-0.5));
        float _1142 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1100.x + (-0.5));
        float _1144 = _1142 * (_1100.y + (-0.5));
        float _1145 = _1142 * (_1100.z + (-0.5));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = _1113 * 0.5;
        float _1150 = _1123 * 0.5;
        float _1151 = _1133 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_430, _431, _432), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3614 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_1176 + 1.0))) + _1181) * _1146;
        float _1191 = _1114 * 0.5;
        float _1192 = _1124 * 0.5;
        float _1193 = _1134 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_430, _431, _432), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3647 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1218 + 1.0))) + _1223) * _1147;
        float _1233 = _1115 * 0.5;
        float _1234 = _1125 * 0.5;
        float _1235 = _1135 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_430, _431, _432), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3680 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1260 + 1.0))) + _1265) * _1148;
        _1282 = _1115;
        _1283 = _1114;
        _1284 = _1113;
        _1285 = _1125;
        _1286 = _1124;
        _1287 = _1123;
        _1288 = _1135;
        _1289 = _1134;
        _1290 = _1133;
        _1291 = _1148;
        _1292 = _1147;
        _1293 = _1146;
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
    }
    else
    {
        _1282 = _974;
        _1283 = _974;
        _1284 = _974;
        _1285 = _974;
        _1286 = _974;
        _1287 = _974;
        _1288 = _974;
        _1289 = _974;
        _1290 = _974;
        _1291 = _974;
        _1292 = _974;
        _1293 = _974;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _986)) + _986;
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _987)) + _987;
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _988)) + _988;
    float _1329 = fma(_1308, cbSceneParam._m0[89u].z, fma(_1307, cbSceneParam._m0[89u].y, _1306 * cbSceneParam._m0[89u].x));
    float _1332 = fma(_1308, cbSceneParam._m0[90u].z, fma(_1307, cbSceneParam._m0[90u].y, _1306 * cbSceneParam._m0[90u].x));
    float _1335 = fma(_1308, cbSceneParam._m0[91u].z, fma(_1307, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1306));
    float _1350 = _607 * 0.5;
    float _1351 = _608 * 0.5;
    float _1352 = _609 * 0.5;
    float _1353 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1356 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1359 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1393;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1366 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_973, _977, _980, _983));
        float _1370 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_975, _978, _981, _984));
        float _1374 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_976, _979, _982, _985));
        float _1381 = dot(vec4(cbModelParam._m0[39u]), vec4(_1350, _1351, _1352, 1.0));
        _1393 = dot(vec3(isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1381) ? 0.0 : (isnan(0.0) ? _1381 : max(0.0, _1381))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1393 = 1.0;
    }
    float _1404;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1395 = dot(vec4(cbModelParam._m0[40u]), vec4(_1350, _1351, _1352, 1.0));
        _1404 = dot(vec3(isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1395) ? 0.0 : (isnan(0.0) ? _1395 : max(0.0, _1395))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1404 = 1.0;
    }
    float _1408 = (_1404 * cbModelParam._m0[1u].x) + (_1393 * (1.0 - cbModelParam._m0[1u].x));
    float _1418 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _433);
    float _1419 = isnan(_1418) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1418 : min(cbModelParam._m0[25u].z, _1418));
    float _1500;
    float _1502;
    float _1504;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1467 = fma(_671, cbModelParam._m0[13u].z, fma(_667, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _663)) + cbModelParam._m0[13u].w;
        float _1471 = fma(_671, cbModelParam._m0[14u].z, fma(_667, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _663)) + cbModelParam._m0[14u].w;
        float _1475 = fma(_671, cbModelParam._m0[15u].z, fma(_667, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _663)) + cbModelParam._m0[15u].w;
        float _1478 = fma(_609, cbModelParam._m0[13u].z, fma(_608, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _607));
        float _1481 = fma(_609, cbModelParam._m0[14u].z, fma(_608, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _607));
        float _1484 = fma(_609, cbModelParam._m0[15u].z, fma(_608, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _607));
        float _1512;
        if (_1478 > 0.0)
        {
            _1512 = abs((1.0 - _1467) / _1478);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1467 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1512 = frontier_phi_14_12_ladder;
        }
        float _1717;
        if (_1481 > 0.0)
        {
            _1717 = abs((1.0 - _1471) / _1481);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1471 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1717 = frontier_phi_23_19_ladder;
        }
        float _1971;
        if (_1484 > 0.0)
        {
            _1971 = abs((1.0 - _1475) / _1484);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1475 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1971 = frontier_phi_35_30_ladder;
        }
        float _1973 = isnan(_1717) ? _1512 : (isnan(_1512) ? _1717 : min(_1512, _1717));
        float _1974 = isnan(_1971) ? _1973 : (isnan(_1973) ? _1971 : min(_1973, _1971));
        float _1978 = (_1974 * _1478) + _1467;
        float _1979 = (_1974 * _1481) + _1471;
        float _1980 = (_1974 * _1484) + _1475;
        float _1981 = _1974 * 9.9999997473787516355514526367188e-05;
        float _1983 = (-1.0) - _1981;
        float _1985 = _1981 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1980 > _1985) || ((_1980 < _1983) || ((_1979 > _1985) || ((_1979 < _1983) || ((_1978 < _1983) || (_1978 > _1985))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2108 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1980, cbModelParam._m0[9u].z, fma(_1979, cbModelParam._m0[9u].y, _1978 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1980, cbModelParam._m0[10u].z, fma(_1979, cbModelParam._m0[10u].y, _1978 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1980, cbModelParam._m0[11u].z, fma(_1979, cbModelParam._m0[11u].y, _1978 * cbModelParam._m0[11u].x))), _1419);
            frontier_phi_13_35_ladder = _2108.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2108.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2108.x * cbModelParam._m0[1u].y;
        }
        _1500 = frontier_phi_13_35_ladder_2;
        _1502 = frontier_phi_13_35_ladder_1;
        _1504 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_607, _608, _609), _1419);
        _1500 = _1488.x * cbModelParam._m0[1u].y;
        _1502 = _1488.y * cbModelParam._m0[1u].y;
        _1504 = _1488.z * cbModelParam._m0[1u].y;
    }
    float _1508 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _433);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1508 : min(cbModelParam._m0[25u].w, _1508));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1564 = fma(_671, cbModelParam._m0[21u].z, fma(_667, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _663)) + cbModelParam._m0[21u].w;
        float _1568 = fma(_671, cbModelParam._m0[22u].z, fma(_667, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _663)) + cbModelParam._m0[22u].w;
        float _1572 = fma(_671, cbModelParam._m0[23u].z, fma(_667, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _663)) + cbModelParam._m0[23u].w;
        float _1575 = fma(_609, cbModelParam._m0[21u].z, fma(_608, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _607));
        float _1578 = fma(_609, cbModelParam._m0[22u].z, fma(_608, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _607));
        float _1581 = fma(_609, cbModelParam._m0[23u].z, fma(_608, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _607));
        float _1722;
        if (_1575 > 0.0)
        {
            _1722 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1722 = frontier_phi_25_21_ladder;
        }
        float _1998;
        if (_1578 > 0.0)
        {
            _1998 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1998 = frontier_phi_37_32_ladder;
        }
        float _2211;
        if (_1581 > 0.0)
        {
            _2211 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2211 = frontier_phi_46_43_ladder;
        }
        float _2213 = isnan(_1998) ? _1722 : (isnan(_1722) ? _1998 : min(_1722, _1998));
        float _2214 = isnan(_2211) ? _2213 : (isnan(_2213) ? _2211 : min(_2213, _2211));
        float _2218 = (_2214 * _1575) + _1564;
        float _2219 = (_2214 * _1578) + _1568;
        float _2220 = (_2214 * _1581) + _1572;
        float _2221 = _2214 * 9.9999997473787516355514526367188e-05;
        float _2222 = (-1.0) - _2221;
        float _2224 = _2221 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2220 > _2224) || ((_2220 < _2222) || ((_2219 > _2224) || ((_2219 < _2222) || ((_2218 < _2222) || (_2218 > _2224))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2419 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2220, cbModelParam._m0[17u].z, fma(_2219, cbModelParam._m0[17u].y, _2218 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2220, cbModelParam._m0[18u].z, fma(_2219, cbModelParam._m0[18u].y, _2218 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2220, cbModelParam._m0[19u].z, fma(_2219, cbModelParam._m0[19u].y, _2218 * cbModelParam._m0[19u].x))), _1509);
            frontier_phi_22_46_ladder = _2419.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2419.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2419.x * cbModelParam._m0[1u].z;
        }
        _1600 = frontier_phi_22_46_ladder_2;
        _1602 = frontier_phi_22_46_ladder_1;
        _1604 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_607, _608, _609), _1509);
        _1600 = _1584.x * cbModelParam._m0[1u].z;
        _1602 = _1584.y * cbModelParam._m0[1u].z;
        _1604 = _1584.z * cbModelParam._m0[1u].z;
    }
    float _1617 = (((_634 * _583) + _635) * _599) * ((cbModelParam._m0[1u].w * (_1600 - _1500)) + _1500);
    float _1619 = (((_634 * _585) + _635) * _599) * ((cbModelParam._m0[1u].w * (_1602 - _1502)) + _1502);
    float _1621 = (((_634 * _586) + _635) * _599) * ((cbModelParam._m0[1u].w * (_1604 - _1504)) + _1504);
    float _1624 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1619, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1627 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1619, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1630 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1619, cbSceneParam._m0[91u].y, _1617 * cbSceneParam._m0[91u].x));
    uvec4 _1640 = floatBitsToUint(cbInstanceData._m0[_220 + 5u]);
    uint _1642 = _1640.x * 14u;
    uint _1643 = _1642 + 13u;
    float _1650 = _599 + (-1.0);
    float _1655 = (cbLight._m0[_1643].x * _1650) + 1.0;
    float _1656 = (cbLight._m0[_1643].y * _1650) + 1.0;
    float _1657 = (cbLight._m0[_1643].z * _1650) + 1.0;
    float _1658 = (cbLight._m0[_1643].w * _1650) + 1.0;
    uint _1659 = _1642 + 5u;
    float _1665 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
    uint _1669 = _1642 + 4u;
    float _1676 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
    uint _1680 = _1642 | 1u;
    float _1691 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_430, _431, _432));
    float _1694 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_430, _431, _432));
    float _3816 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _3827 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1699 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.3183098733425140380859375;
    float _1701 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.3183098733425140380859375;
    float _1708 = ((cbLight._m0[_1659].x * _1665) * _1701) + ((cbLight._m0[_1669].x * _1676) * _1699);
    float _1709 = ((_1665 * cbLight._m0[_1659].y) * _1701) + ((_1676 * cbLight._m0[_1669].y) * _1699);
    float _1710 = ((_1665 * cbLight._m0[_1659].z) * _1701) + ((_1676 * cbLight._m0[_1669].z) * _1699);
    uvec4 _1714 = floatBitsToUint(cbLight._m0[_1642 + 12u]);
    bool _1716 = _1714.x == 0u;
    float _1727;
    float _1729;
    float _1731;
    if (_1716)
    {
        _1727 = _1708;
        _1729 = _1709;
        _1731 = _1710;
    }
    else
    {
        uint _1735 = _1642 + 6u;
        float _1751 = (dot(vec3(cbLight._m0[_1642 + 2u].xyz), vec3(_430, _431, _432)) * 0.5) + 0.5;
        float _1752 = _1751 * _1751;
        float _3838 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1754 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _1727 = (((cbLight._m0[_1735].x * 0.3183098733425140380859375) * _1753) * _1754) + _1708;
        _1729 = (((cbLight._m0[_1735].y * 0.3183098733425140380859375) * _1753) * _1754) + _1709;
        _1731 = (((cbLight._m0[_1735].z * 0.3183098733425140380859375) * _1753) * _1754) + _1710;
    }
    bool _1734 = _1714.y == 0u;
    float _1772;
    float _1774;
    float _1776;
    if (_1734)
    {
        _1772 = _1727;
        _1774 = _1729;
        _1776 = _1731;
    }
    else
    {
        uint _1942 = _1642 + 7u;
        float _1958 = (dot(vec3(cbLight._m0[_1642 + 3u].xyz), vec3(_430, _431, _432)) * 0.5) + 0.5;
        float _1959 = _1958 * _1958;
        float _3854 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1961 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _1772 = (((cbLight._m0[_1942].x * 0.3183098733425140380859375) * _1960) * _1961) + _1727;
        _1774 = (((cbLight._m0[_1942].y * 0.3183098733425140380859375) * _1960) * _1961) + _1729;
        _1776 = (((cbLight._m0[_1942].z * 0.3183098733425140380859375) * _1960) * _1961) + _1731;
    }
    uint _1779 = _1642 + 8u;
    float _1792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1642].w)) * _433) * 0.949999988079071044921875);
    float _1793 = _1792 * _1792;
    float _1794 = cbLight._m0[_1642].x + _510;
    float _1795 = cbLight._m0[_1642].y + _511;
    float _1796 = cbLight._m0[_1642].z + _512;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1801 = _1800 * _1794;
    float _1802 = _1800 * _1795;
    float _1803 = _1800 * _1796;
    float _1804 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_1642].xyz));
    float _3870 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _1808 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1809 = dot(vec3(_430, _431, _432), vec3(_1801, _1802, _1803));
    float _3892 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _1813 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_1801, _1802, _1803));
    float _3903 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1817 = _1793 * _1793;
    float _1821 = ((_1812 * _1812) * (_1817 + (-1.0))) + 1.0;
    float _1829 = exp2(log2(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * 5.0);
    float _1830 = 0.959999978542327880859375 - _580;
    float _1832 = 0.959999978542327880859375 - _581;
    float _1833 = 0.959999978542327880859375 - _582;
    float _1840 = 1.0 - _1793;
    float _1851 = (0.5 / (((_1808 * ((_1807 * _1840) + _1793)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1840) + _1793) * _1807))) * _1807;
    float _3914 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1853 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1817 / ((_1821 * _1821) * 3.141590118408203125));
    uint _1864 = _1642 + 9u;
    float _1875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1680].w)) * _433) * 0.949999988079071044921875);
    float _1876 = _1875 * _1875;
    float _1877 = cbLight._m0[_1680].x + _510;
    float _1878 = cbLight._m0[_1680].y + _511;
    float _1879 = cbLight._m0[_1680].z + _512;
    float _1883 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
    float _1884 = _1883 * _1877;
    float _1885 = _1883 * _1878;
    float _1886 = _1883 * _1879;
    float _1887 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_1680].xyz));
    float _3925 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1891 = dot(vec3(_430, _431, _432), vec3(_1884, _1885, _1886));
    float _3936 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_1884, _1885, _1886));
    float _3947 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1876 * _1876;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1910 = exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0);
    float _1917 = 1.0 - _1876;
    float _1927 = (0.5 / (((_1808 * ((_1890 * _1917) + _1876)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1917) + _1876) * _1890))) * _1890;
    float _3958 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1929 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    float _1939 = (((((_1910 * _1830) + _583) * cbLight._m0[_1864].x) * _1929) * _1665) + (((((_1829 * _1830) + _583) * cbLight._m0[_1779].x) * _1853) * _1676);
    float _1940 = (((((_1910 * _1832) + _585) * cbLight._m0[_1864].y) * _1929) * _1665) + (((((_1829 * _1832) + _585) * cbLight._m0[_1779].y) * _1853) * _1676);
    float _1941 = (((((_1910 * _1833) + _586) * cbLight._m0[_1864].z) * _1929) * _1665) + (((((_1829 * _1833) + _586) * cbLight._m0[_1779].z) * _1853) * _1676);
    float _2003;
    float _2005;
    float _2007;
    if (_1716)
    {
        _2003 = _1939;
        _2005 = _1940;
        _2007 = _1941;
    }
    else
    {
        uint _2009 = _1642 + 2u;
        uint _2013 = _1642 + 10u;
        float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _433) * 0.949999988079071044921875);
        float _2028 = _2027 * _2027;
        float _2029 = cbLight._m0[_2009].x + _510;
        float _2030 = cbLight._m0[_2009].y + _511;
        float _2031 = cbLight._m0[_2009].z + _512;
        float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
        float _2036 = _2035 * _2029;
        float _2037 = _2035 * _2030;
        float _2038 = _2035 * _2031;
        float _2039 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_2009].xyz));
        float _3969 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _2043 = dot(vec3(_430, _431, _432), vec3(_2036, _2037, _2038));
        float _3980 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2047 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2036, _2037, _2038));
        float _3991 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2051 = _2028 * _2028;
        float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
        float _2062 = exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0);
        float _2069 = 1.0 - _2028;
        float _2079 = (0.5 / (((_1808 * ((_2042 * _2069) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _2069) + _2028) * _2042))) * _2042;
        float _4002 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2081 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
        float _2082 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _2003 = (((((_2062 * _1830) + _583) * cbLight._m0[_2013].x) * _2081) * _2082) + _1939;
        _2005 = (((((_2062 * _1832) + _585) * cbLight._m0[_2013].y) * _2081) * _2082) + _1940;
        _2007 = (((((_2062 * _1833) + _586) * cbLight._m0[_2013].z) * _2081) * _2082) + _1941;
    }
    float _2117;
    float _2119;
    float _2121;
    if (_1734)
    {
        _2117 = _2003;
        _2119 = _2005;
        _2121 = _2007;
    }
    else
    {
        uint _2128 = _1642 + 3u;
        uint _2132 = _1642 + 11u;
        float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _433) * 0.949999988079071044921875);
        float _2147 = _2146 * _2146;
        float _2148 = cbLight._m0[_2128].x + _510;
        float _2149 = cbLight._m0[_2128].y + _511;
        float _2150 = cbLight._m0[_2128].z + _512;
        float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
        float _2155 = _2154 * _2148;
        float _2156 = _2154 * _2149;
        float _2157 = _2154 * _2150;
        float _2158 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_2128].xyz));
        float _4018 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2162 = dot(vec3(_430, _431, _432), vec3(_2155, _2156, _2157));
        float _4029 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2166 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2155, _2156, _2157));
        float _4040 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2170 = _2147 * _2147;
        float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
        float _2181 = exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0);
        float _2188 = 1.0 - _2147;
        float _2198 = (0.5 / (((_1808 * ((_2161 * _2188) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _2188) + _2147) * _2161))) * _2161;
        float _4051 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2200 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
        float _2201 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _2117 = (((((_2181 * _1830) + _583) * cbLight._m0[_2132].x) * _2200) * _2201) + _2003;
        _2119 = (((((_2181 * _1832) + _585) * cbLight._m0[_2132].y) * _2200) * _2201) + _2005;
        _2121 = (((((_2181 * _1833) + _586) * cbLight._m0[_2132].z) * _2200) * _2201) + _2007;
    }
    float _2336;
    float _2338;
    float _2340;
    float _2342;
    float _2344;
    float _2346;
    if (_1640.y == 0u)
    {
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2276;
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2276;
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2276;
        uvec4 _2291 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2292 = _2291.x;
        uint _2303 = uint((float(_2291.y) * floor(float(uint(cbSceneParam._m0[85u].y * _519) / _2292))) + floor(float(uint(cbSceneParam._m0[85u].x * _518) / _2292)));
        float _2313 = (log2(_2279 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2314 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        uint _2317 = uint(isnan(14.0) ? _2314 : (isnan(_2314) ? 14.0 : min(_2314, 14.0)));
        uvec4 _2322 = texelFetch(g_lightClusterGridBuffer, int(((_2317 << 2u) + (_2303 << 6u)) >> 2u));
        uint _2323 = _2322.x;
        uint _2324 = _2291.z;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        if (((((1u << ((_2324 >> 4u) & 15u)) + 4294967295u) & _2323) == 0u) || ((_2324 & 240u) == 0u))
        {
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
        }
        else
        {
            float _2425;
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            uint _2575 = 0u;
            uint _2584;
            bool _2585;
            for (;;)
            {
                _2584 = texelFetch(g_lightClassification, int((((_2317 << 5u) + (_2303 << 9u)) + (_2575 << 2u)) >> 2u)).x;
                _2585 = _2584 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2585)
                {
                    frontier_phi_61_pred = _2569;
                    frontier_phi_61_pred_1 = _2574;
                    frontier_phi_61_pred_2 = _2573;
                    frontier_phi_61_pred_3 = _2572;
                    frontier_phi_61_pred_4 = _2571;
                    frontier_phi_61_pred_5 = _2570;
                }
                else
                {
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    uint _2699;
                    _2693 = _2569;
                    _2694 = _2570;
                    _2695 = _2571;
                    _2696 = _2572;
                    _2697 = _2573;
                    _2698 = _2574;
                    _2699 = _2584;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    for (;;)
                    {
                        uint _2703 = uint(findLSB(_2699)) + (_2575 << 5u);
                        uint _2700 = (_2699 + 4294967295u) & _2699;
                        uint _2705 = _2703 * 48u;
                        vec4 _2719 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2725 = (_2703 * 48u) + 4u;
                        vec4 _2738 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 3u)).x));
                        uint _2744 = (_2703 * 48u) + 8u;
                        vec3 _2755 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x));
                        float _2759 = _2719.x - _2277;
                        float _2760 = _2719.y - _2278;
                        float _2761 = _2719.z - _2279;
                        float _2762 = dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761));
                        float _2765 = inversesqrt(_2762);
                        float _2766 = _2765 * _2759;
                        float _2767 = _2765 * _2760;
                        float _2768 = _2765 * _2761;
                        float _2769 = dot(vec3(_540, _543, _546), vec3(_2766, _2767, _2768));
                        float _2774 = 1.0 - (_2762 * _2719.w);
                        float _4077 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2775 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                        float _2776 = sqrt(_2762) * _2738.w;
                        float _2779 = 1.39999997615814208984375 / (_2776 + 1.39999997615814208984375);
                        float _2780 = _2779 * _2779;
                        float _2783 = ((1.0 - _2780) * _2769) + _2780;
                        float _2786 = _2776 * _2776;
                        float _2790 = ((isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0))) * _2775) / ((_2786 * 0.699999988079071044921875) + 1.0);
                        float _2794 = (-0.0) - _2277;
                        float _2795 = (-0.0) - _2278;
                        float _2796 = (-0.0) - _2279;
                        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
                        float _2801 = _2800 * _2794;
                        float _2802 = _2800 * _2795;
                        float _2803 = _2800 * _2796;
                        float _2811 = exp2(log2(1.0 / ((_2786 * 3.5) + 5.0)) * 0.25);
                        float _2812 = 1.0 - _615;
                        float _2819 = sqrt(1.0 - ((1.0 - (_2812 * _2812)) * (1.0 - (_2811 * _2811))));
                        float _2820 = _2819 * _2819;
                        float _2821 = _2820 * _2820;
                        float _2822 = _2801 + _2766;
                        float _2823 = _2802 + _2767;
                        float _2824 = _2803 + _2768;
                        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
                        float _2832 = dot(vec3(_540, _543, _546), vec3(_2801, _2802, _2803));
                        float _4093 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2835 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2836 = dot(vec3(_540, _543, _546), vec3(_2828 * _2822, _2828 * _2823, _2828 * _2824));
                        float _4104 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2839 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2843 = ((_2839 * _2839) * (_2821 + (-1.0))) + 1.0;
                        float _2844 = _2779 * _2820;
                        float _2845 = _2844 * _2844;
                        float _2848 = ((1.0 - _2845) * _2769) + _2845;
                        float _4115 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2849 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2850 = 1.0 - _2820;
                        float _2860 = (0.5 / (((_2849 * ((_2835 * _2850) + _2820)) + 9.9999999392252902907785028219223e-09) + (((_2849 * _2850) + _2820) * _2835))) * _2849;
                        float _4126 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2871 = (((_2821 * 3.1415927410125732421875) * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) / ((_2843 * _2843) * ((_2786 * 2.1991131305694580078125) + 3.141590118408203125))) * _2775;
                        _2628 = (_2790 * _2738.x) + _2696;
                        _2629 = (_2790 * _2738.y) + _2697;
                        _2630 = (_2790 * _2738.z) + _2698;
                        _2625 = (_2871 * _2755.x) + _2693;
                        _2626 = (_2871 * _2755.y) + _2694;
                        _2627 = (_2871 * _2755.z) + _2695;
                        if (_2700 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2693 = _2625;
                            _2694 = _2626;
                            _2695 = _2627;
                            _2696 = _2628;
                            _2697 = _2629;
                            _2698 = _2630;
                            _2699 = _2700;
                        }
                    }
                    frontier_phi_61_pred = _2625;
                    frontier_phi_61_pred_1 = _2630;
                    frontier_phi_61_pred_2 = _2629;
                    frontier_phi_61_pred_3 = _2628;
                    frontier_phi_61_pred_4 = _2627;
                    frontier_phi_61_pred_5 = _2626;
                }
                _2425 = frontier_phi_61_pred;
                _2435 = frontier_phi_61_pred_1;
                _2433 = frontier_phi_61_pred_2;
                _2431 = frontier_phi_61_pred_3;
                _2429 = frontier_phi_61_pred_4;
                _2427 = frontier_phi_61_pred_5;
                uint _2576 = _2575 + 1u;
                if (_2576 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2569 = _2425;
                    _2570 = _2427;
                    _2571 = _2429;
                    _2572 = _2431;
                    _2573 = _2433;
                    _2574 = _2435;
                    _2575 = _2576;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
        }
        uvec4 _2438 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2439 = _2438.z;
        uint _2441 = (_2439 >> 8u) & 15u;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        if (((4294967295u << _2441) & _2323) == 0u)
        {
            _2537 = _2424;
            _2539 = _2426;
            _2541 = _2428;
            _2543 = _2430;
            _2545 = _2432;
            _2547 = _2434;
        }
        else
        {
            float _2562 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
            float _2563 = _2562 * _2277;
            float _2564 = _2562 * _2278;
            float _2565 = _2562 * _2279;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2441 < ((_2439 >> 12u) & 15u))
            {
                float _2538;
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2676 = _2424;
                float _2677 = _2426;
                float _2678 = _2428;
                float _2679 = _2430;
                float _2680 = _2432;
                float _2681 = _2434;
                uint _2682 = _2441;
                uint _2691;
                bool _2692;
                for (;;)
                {
                    _2691 = texelFetch(g_lightClassification, int((((_2317 << 5u) + (_2303 << 9u)) + (_2682 << 2u)) >> 2u)).x;
                    _2692 = _2691 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2692)
                    {
                        frontier_phi_67_pred = _2679;
                        frontier_phi_67_pred_1 = _2680;
                        frontier_phi_67_pred_2 = _2681;
                        frontier_phi_67_pred_3 = _2678;
                        frontier_phi_67_pred_4 = _2677;
                        frontier_phi_67_pred_5 = _2676;
                    }
                    else
                    {
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _2889 = _2676;
                        float _2890 = _2677;
                        float _2891 = _2678;
                        float _2892 = _2679;
                        float _2893 = _2680;
                        float _2894 = _2681;
                        uint _2895 = _2691;
                        uint _2896;
                        vec4 _2921;
                        float _2922;
                        vec4 _2937;
                        vec3 _2949;
                        vec4 _2965;
                        vec4 _2981;
                        float _3027;
                        bool _3028;
                        for (;;)
                        {
                            uint _2906 = ((_2682 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2895));
                            _2896 = (_2895 + 4294967295u) & _2895;
                            uint _2908 = _2906 * 40u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            _2922 = _2921.w;
                            uint _2924 = (_2906 * 40u) + 4u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2939 = (_2906 * 40u) + 8u;
                            _2949 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x));
                            uint _2952 = (_2906 * 40u) + 16u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2968 = (_2906 * 40u) + 20u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2983 = (_2906 * 40u) + 24u;
                            vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _3002 = (_2906 * 40u) + 28u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            _3027 = fma(_2279, _3015.z, fma(_2278, _3015.y, _3015.x * _2277)) + _3015.w;
                            _3028 = !((fma(_2279, _2996.z, fma(_2278, _2996.y, _2996.x * _2277)) + _2996.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3028)
                            {
                                float _3055 = _2921.x - _2277;
                                float _3056 = _2921.y - _2278;
                                float _3057 = _2921.z - _2279;
                                float _3058 = dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057));
                                float _3061 = inversesqrt(_3058);
                                float _3062 = _3061 * _3055;
                                float _3063 = _3061 * _3056;
                                float _3064 = _3061 * _3057;
                                float _3068 = 1.0 - (_3058 / (_2922 * _2922));
                                float _4137 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3069 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3073 = sqrt(_3058) * _2937.w;
                                float _3075 = 1.39999997615814208984375 / (_3073 + 1.39999997615814208984375);
                                float _3076 = _3075 * _3075;
                                float _3079 = ((1.0 - _3076) * dot(vec3(_3062, _3063, _3064), vec3(_540, _543, _546))) + _3076;
                                float _3082 = _3073 * _3073;
                                float _3086 = (fma(_2279, _2965.z, fma(_2278, _2965.y, _2965.x * _2277)) + _2965.w) / _3027;
                                float _3087 = (fma(_2279, _2981.z, fma(_2278, _2981.y, _2981.x * _2277)) + _2981.w) / _3027;
                                float _3091 = 1.0 - dot(vec2(_3086, _3087), vec2(_3086, _3087));
                                float _4153 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3092 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3093 = _3092 * (((isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))) * _3069) / ((_3082 * 0.699999988079071044921875) + 1.0));
                                float _3105 = exp2(log2(1.0 / ((_3082 * 3.5) + 5.0)) * 0.25);
                                float _3106 = 1.0 - _615;
                                float _3113 = sqrt(1.0 - ((1.0 - (_3106 * _3106)) * (1.0 - (_3105 * _3105))));
                                float _3114 = _3113 * _3113;
                                float _3115 = _3114 * _3114;
                                float _3116 = _3062 - _2563;
                                float _3117 = _3063 - _2564;
                                float _3118 = _3064 - _2565;
                                float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                                float _3126 = dot(vec3(_540, _543, _546), vec3((-0.0) - _2563, (-0.0) - _2564, (-0.0) - _2565));
                                float _4164 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3129 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3130 = dot(vec3(_540, _543, _546), vec3(_3122 * _3116, _3122 * _3117, _3122 * _3118));
                                float _4175 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3137 = ((_3133 * _3133) * (_3115 + (-1.0))) + 1.0;
                                float _3138 = _3075 * _3114;
                                float _3139 = _3138 * _3138;
                                float _3145 = ((1.0 - _3139) * dot(vec3(_540, _543, _546), vec3(_3062, _3063, _3064))) + _3139;
                                float _4186 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3147 = 1.0 - _3114;
                                float _3157 = (0.5 / (((_3146 * ((_3129 * _3147) + _3114)) + 9.9999999392252902907785028219223e-09) + (((_3146 * _3147) + _3114) * _3129))) * _3146;
                                float _4197 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3167 = (_3092 * _3069) * (((_3115 * 3.1415927410125732421875) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) / ((_3137 * _3137) * ((_3082 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3167 * _2949.x;
                                frontier_phi_73_pred_1 = _3167 * _2949.y;
                                frontier_phi_73_pred_2 = _3093 * _2937.z;
                                frontier_phi_73_pred_3 = _3093 * _2937.y;
                                frontier_phi_73_pred_4 = _3093 * _2937.x;
                                frontier_phi_73_pred_5 = _3167 * _2949.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3171 = frontier_phi_73_pred;
                            _3172 = frontier_phi_73_pred_1;
                            _3176 = frontier_phi_73_pred_2;
                            _3175 = frontier_phi_73_pred_3;
                            _3174 = frontier_phi_73_pred_4;
                            _3173 = frontier_phi_73_pred_5;
                            _2879 = _3174 + _2892;
                            _2880 = _3175 + _2893;
                            _2881 = _3176 + _2894;
                            _2876 = _3171 + _2889;
                            _2877 = _3172 + _2890;
                            _2878 = _3173 + _2891;
                            if (_2896 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2896;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2879;
                        frontier_phi_67_pred_1 = _2880;
                        frontier_phi_67_pred_2 = _2881;
                        frontier_phi_67_pred_3 = _2878;
                        frontier_phi_67_pred_4 = _2877;
                        frontier_phi_67_pred_5 = _2876;
                    }
                    _2544 = frontier_phi_67_pred;
                    _2546 = frontier_phi_67_pred_1;
                    _2548 = frontier_phi_67_pred_2;
                    _2542 = frontier_phi_67_pred_3;
                    _2540 = frontier_phi_67_pred_4;
                    _2538 = frontier_phi_67_pred_5;
                    uint _2683 = _2682 + 1u;
                    if (_2683 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2676 = _2538;
                        _2677 = _2540;
                        _2678 = _2542;
                        _2679 = _2544;
                        _2680 = _2546;
                        _2681 = _2548;
                        _2682 = _2683;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2546;
                frontier_phi_55_56_ladder_1 = _2548;
                frontier_phi_55_56_ladder_2 = _2544;
                frontier_phi_55_56_ladder_3 = _2542;
                frontier_phi_55_56_ladder_4 = _2540;
                frontier_phi_55_56_ladder_5 = _2538;
            }
            else
            {
                frontier_phi_55_56_ladder = _2432;
                frontier_phi_55_56_ladder_1 = _2434;
                frontier_phi_55_56_ladder_2 = _2430;
                frontier_phi_55_56_ladder_3 = _2428;
                frontier_phi_55_56_ladder_4 = _2426;
                frontier_phi_55_56_ladder_5 = _2424;
            }
            _2537 = frontier_phi_55_56_ladder_5;
            _2539 = frontier_phi_55_56_ladder_4;
            _2541 = frontier_phi_55_56_ladder_3;
            _2543 = frontier_phi_55_56_ladder_2;
            _2545 = frontier_phi_55_56_ladder;
            _2547 = frontier_phi_55_56_ladder_1;
        }
        float _2552 = isnan(1.0) ? _599 : (isnan(_599) ? 1.0 : min(_599, 1.0));
        _2336 = (_2552 * _2543) + _1772;
        _2338 = (_2552 * _2545) + _1774;
        _2340 = (_2552 * _2547) + _1776;
        _2342 = ((_2537 * _583) * _2552) + _2117;
        _2344 = ((_2539 * _585) * _2552) + _2119;
        _2346 = ((_2541 * _586) * _2552) + _2121;
    }
    else
    {
        _2336 = _1772;
        _2338 = _1774;
        _2340 = _1776;
        _2342 = _2117;
        _2344 = _2119;
        _2346 = _2121;
    }
    float _4213 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4224 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4235 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    uint _2366 = _220 + 6u;
    float _2374 = _518 / cbSceneParam._m0[86u].x;
    float _2375 = _519 / cbSceneParam._m0[86u].y;
    vec4 _2389 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2374, _2375, (log2((isnan(cbSceneParam._m0[77u].w) ? _452 : (isnan(_452) ? cbSceneParam._m0[77u].w : min(_452, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2391 = _2389.x;
    float _2392 = _2389.y;
    float _2393 = _2389.z;
    float _2394 = _2389.w;
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    if (_452 > cbSceneParam._m0[78u].w)
    {
        float _2449 = isnan(_452) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _452 : min(cbSceneParam._m0[80u].w, _452));
        float _2450 = _2449 / _452;
        float _2461 = _2450 * _503;
        float _2462 = _504 * _2450;
        float _2463 = (-0.0) - _2462;
        float _2465 = _2450 * _505;
        float _2467 = (cbSceneParam._m0[77u].w * _2463) / _2449;
        float _2468 = _2467 + cbSceneParam._m0[79u].w;
        float _2469 = cbSceneParam._m0[79u].w - _2462;
        float _2475 = sqrt(((_2461 * _2461) + (_2462 * _2462)) + (_2465 * _2465));
        float _2478 = (1.0 - (cbSceneParam._m0[77u].w / _2449)) * _2475;
        float _2483 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2485 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2638;
        if (abs((_2463 - _2467) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2638 = ((((_2468 > 0.0) ? exp2(_2483 * _2468) : (2.0 - exp2(_2485 * _2468))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2478;
        }
        else
        {
            float _2598 = 1.0 / cbSceneParam._m0[80u].x;
            float _2599 = isnan(_2469) ? _2468 : (isnan(_2468) ? _2469 : max(_2468, _2469));
            float _2600 = isnan(_2469) ? _2468 : (isnan(_2468) ? _2469 : min(_2468, _2469));
            float _2609 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : min(_2599, 0.0));
            float _2610 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : min(_2600, 0.0));
            _2638 = ((abs(_2475 / _2463) * cbSceneParam._m0[80u].y) * ((((_2609 - _2610) * 2.0) - ((exp2(_2483 * (isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0)))) - exp2(_2483 * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0))))) * _2598)) - ((exp2(_2485 * _2609) - exp2(_2485 * _2610)) * _2598))) + (_2478 * cbSceneParam._m0[80u].z);
        }
        vec4 _2640 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2374, _2375, 1.0), 0.0);
        float _2649 = exp2((_2638 * (-1.44269502162933349609375)) * (1.0 - _2640.w));
        float _2650 = log2(_2649);
        float _2666 = log2(_2394);
        _2487 = (exp2(_2666 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].x)) * _2640.x) / cbSceneParam._m0[78u].x)) + _2391;
        _2489 = (exp2(_2666 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].y)) * _2640.y) / cbSceneParam._m0[78u].y)) + _2392;
        _2491 = (exp2(_2666 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].z)) * _2640.z) / cbSceneParam._m0[78u].z)) + _2393;
        _2493 = _2649 * _2394;
    }
    else
    {
        _2487 = _2391;
        _2489 = _2392;
        _2491 = _2393;
        _2493 = _2394;
    }
    float _2505 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2506 = _2505 == 3.0;
    float _2507 = log2(_2493);
    float _2514 = exp2(_2507 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2336 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _599))) + ((_2342 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1408)) * cbPerFrame._m0[3u].x));
    float _2515 = exp2(_2507 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2338 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _599))) + ((_2344 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1408)) * cbPerFrame._m0[3u].x));
    float _2516 = exp2(_2507 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2340 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _599))) + ((_2346 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1408)) * cbPerFrame._m0[3u].x));
    float _2525 = (_2505 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2525 * (_2506 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2487)));
    SV_Target.y = _2525 * (_2506 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2489)));
    SV_Target.z = _2525 * (_2506 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2491)));
    SV_Target.w = cbInstanceData._m0[_2366].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2366].w;
}


