#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1494;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4103 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4114 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4125 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].y) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4136 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _450 = (_443 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _451 = (_443 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _452 = (_443 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[24u].y) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4147 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    float _529 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _523;
    float _532 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _524;
    float _535 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _525;
    float _542 = ((_523 - _529) * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) + _529;
    float _543 = ((_524 - _532) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) + _532;
    float _544 = ((_525 - _535) * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) + _535;
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _603 = _601.x;
    float _604 = _601.y;
    float _605 = _601.z;
    float _612 = ((_584.x - _603) * _443) + _603;
    float _613 = ((_584.y - _604) * _443) + _604;
    float _614 = ((_584.z - _605) * _443) + _605;
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _639 = ((_626.z - _614) * _516) + _614;
    float _642 = ((((_626.x - _612) * _516) + _612) * 2.0) + (-1.0);
    float _643 = ((((_626.y - _613) * _516) + _613) * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _4158 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _649 = sqrt(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))));
    vec4 _662 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _680 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _682 = _680.x;
    float _683 = 1.0 - _682;
    float _689 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _692 = ((isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : min(_689, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _701 = (_692 - ((((((_682 - _683) * cbMtdParam._m0[24u].z) + _683) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _692))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4179 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _702 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _709 = (_702 * (cbMtdParam._m0[17u].x - _542)) + _542;
    float _710 = (_702 * (cbMtdParam._m0[17u].y - _543)) + _543;
    float _711 = (_702 * (cbMtdParam._m0[17u].z - _544)) + _544;
    vec4 _723 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _725 = _723.x;
    float _726 = 1.0 - _725;
    float _751 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_725 - _726) * cbMtdParam._m0[24u].w) + _726) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4190 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _752 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _760 = ((((cbMtdParam._m0[10u].x - _709) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _752) + _709;
    float _761 = ((((cbMtdParam._m0[10u].y - _710) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _752) + _710;
    float _762 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _711)) * _752) + _711;
    vec4 _788 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _790 = _788.x;
    float _808 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _790) * _443) + _790;
    float _825 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _808) * _516) + _808;
    float _829 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _825) * cbMtdParam._m0[19u].z) + _825;
    float _831 = _829 - (_829 * _702);
    float _833 = _831 - (_831 * _752);
    float _838 = (((_561.z - _639) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _639;
    vec4 _852 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _859 = (_852.x * 2.0) + (-1.0);
    float _860 = (_852.y * 2.0) + (-1.0);
    float _861 = dot(vec2(_859, _860), vec2(_859, _860));
    float _4201 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _869 = (_702 * (_852.z - _838)) + _838;
    float _872 = ((cbMtdParam._m0[23u].y - _869) * _752) + _869;
    vec4 _893 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _899 = (_893.x * 2.0) + (-1.0);
    float _900 = (_893.y * 2.0) + (-1.0);
    float _901 = dot(vec2(_899, _900), vec2(_899, _900));
    float _4212 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _911 = _642 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_561.x * 2.0) + (-1.0)));
    float _912 = _643 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_561.y * 2.0) + (-1.0)));
    float _924 = (((_859 - _911) + (cbMtdParam._m0[21u].x * _911)) * _702) + _911;
    float _925 = (((_860 - _912) + (cbMtdParam._m0[21u].x * _912)) * _702) + _912;
    float _926 = (_702 * (sqrt(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) - _649)) + _649;
    float _937 = (((_899 - _924) + (_924 * cbMtdParam._m0[22u].z)) * _752) + _924;
    float _938 = (((_900 - _925) + (_925 * cbMtdParam._m0[22u].z)) * _752) + _925;
    float _939 = ((sqrt(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) - _926) * _752) + _926;
    float _941 = cbMtdParam._m0[22u].x + _662.w;
    float _944 = fma(_939, _259 * NORMAL.x, fma(_938, _266 * TANGENT.x, (_252 * _244) * _937));
    float _947 = fma(_939, _259 * NORMAL.y, fma(_938, _266 * TANGENT.y, (_252 * _245) * _937));
    float _950 = fma(_939, _259 * NORMAL.z, fma(_938, _266 * TANGENT.z, (_252 * _246) * _937));
    float _954 = inversesqrt(dot(vec3(_944, _947, _950), vec3(_944, _947, _950)));
    float _955 = _954 * _944;
    float _956 = _954 * _947;
    float _957 = _954 * _950;
    float _4223 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _958 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4245 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4256 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4267 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4278 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _963 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _977 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1027 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1017);
    float _1028 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1017);
    float _1029 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1017);
    float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
    float _1034 = _1027 * _1033;
    float _1035 = _1028 * _1033;
    float _1036 = _1029 * _1033;
    float _1042 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1043 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1061 = fma(_957, cbSceneParam._m0[5u].z, fma(_956, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _955));
    float _1064 = fma(_957, cbSceneParam._m0[6u].z, fma(_956, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _955));
    float _1067 = fma(_957, cbSceneParam._m0[7u].z, fma(_956, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _955));
    uint _1081 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1087 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * cbInstanceData._m0[_1081].x;
    float _1088 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * cbInstanceData._m0[_1081].y;
    float _1089 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * cbInstanceData._m0[_1081].z;
    float _4289 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _4300 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1091 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _4311 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _1093 = 1.0 - _963;
    float _1094 = _1090 * _1093;
    float _1095 = _1091 * _1093;
    float _1096 = _1092 * _1093;
    float _1101 = (_1090 + (-0.039999999105930328369140625)) * _963;
    float _1102 = (_1091 + (-0.039999999105930328369140625)) * _963;
    float _1103 = (_1092 + (-0.039999999105930328369140625)) * _963;
    float _1104 = _1101 + 0.039999999105930328369140625;
    float _1106 = _1102 + 0.039999999105930328369140625;
    float _1107 = _1103 + 0.039999999105930328369140625;
    vec4 _1116 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1042, cbSceneParam._m0[86u].y * _1043));
    float _1120 = ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * TEXCOORD_5.w) * _1116.x;
    float _1121 = dot(vec3(_955, _956, _957), vec3(_1034, _1035, _1036));
    float _1124 = _1121 * 2.0;
    float _1128 = (_1124 * _955) - _1034;
    float _1129 = (_1124 * _956) - _1035;
    float _1130 = (_1124 * _957) - _1036;
    float _1134 = abs(dot(vec3(_1034, _1035, _1036), vec3(_955, _956, _957)));
    float _4322 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _1136 = sqrt(_958);
    float _1149 = exp2((_1136 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1136 * 3.0));
    float _1155 = (1.0 - _1149) * ((_1136 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1156 = _1149 * _1136;
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1188 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1192 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1493;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1218 = fma(_1192, cbModelParam._m0[26u].z, fma(_1188, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1184));
        float _1222 = fma(_1192, cbModelParam._m0[27u].z, fma(_1188, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1184));
        float _1226 = fma(_1192, cbModelParam._m0[28u].z, fma(_1188, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1184));
        float _1251 = _1184 + _955;
        float _1252 = _1188 + _956;
        float _1253 = _1192 + _957;
        float _1263 = fma(_1253, cbModelParam._m0[26u].z, fma(_1252, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1251)) - _1218;
        float _1264 = fma(_1253, cbModelParam._m0[27u].z, fma(_1252, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1251)) - _1222;
        float _1265 = fma(_1253, cbModelParam._m0[28u].z, fma(_1252, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1251)) - _1226;
        float _1269 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
        float _1282 = ((_1269 * _1263) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1218 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1269 * _1264) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1222 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1269 * _1265) / cbModelParam._m0[34u].z) + ((((((_1226 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        float _1321 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1287.x + (-0.5));
        float _1323 = _1321 * (_1287.y + (-0.5));
        float _1324 = _1321 * (_1287.z + (-0.5));
        float _1331 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1294.x + (-0.5));
        float _1333 = _1331 * (_1294.y + (-0.5));
        float _1334 = _1331 * (_1294.z + (-0.5));
        float _1341 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1301.x + (-0.5));
        float _1343 = _1341 * (_1301.y + (-0.5));
        float _1344 = _1341 * (_1301.z + (-0.5));
        float _1351 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1308.x + (-0.5));
        float _1353 = _1351 * (_1308.y + (-0.5));
        float _1354 = _1351 * (_1308.z + (-0.5));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = _1322 * 0.5;
        float _1359 = _1332 * 0.5;
        float _1360 = _1342 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1375 = (dot(vec3(_955, _956, _957), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1385 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4370 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1387 + 1.0))) + _1392) * _1355;
        float _1402 = _1323 * 0.5;
        float _1403 = _1333 * 0.5;
        float _1404 = _1343 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_955, _956, _957), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4403 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1429 + 1.0))) + _1434) * _1356;
        float _1444 = _1324 * 0.5;
        float _1445 = _1334 * 0.5;
        float _1446 = _1344 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_955, _956, _957), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4436 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1471 + 1.0))) + _1476) * _1357;
        _1493 = _1324;
        _1495 = _1323;
        _1496 = _1322;
        _1497 = _1334;
        _1498 = _1333;
        _1499 = _1332;
        _1500 = _1344;
        _1501 = _1343;
        _1502 = _1342;
        _1503 = _1357;
        _1504 = _1356;
        _1505 = _1355;
        _1506 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1508 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
    }
    else
    {
        _1493 = _1494;
        _1495 = _1494;
        _1496 = _1494;
        _1497 = _1494;
        _1498 = _1494;
        _1499 = _1494;
        _1500 = _1494;
        _1501 = _1494;
        _1502 = _1494;
        _1503 = _1494;
        _1504 = _1494;
        _1505 = _1494;
        _1506 = 0.0;
        _1507 = 0.0;
        _1508 = 0.0;
    }
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1532 = fma(_1192, cbModelParam._m0[30u].z, fma(_1188, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184));
        float _1536 = fma(_1192, cbModelParam._m0[31u].z, fma(_1188, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184));
        float _1540 = fma(_1192, cbModelParam._m0[32u].z, fma(_1188, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184));
        float _1563 = _1184 + _955;
        float _1564 = _1188 + _956;
        float _1565 = _1192 + _957;
        float _1575 = fma(_1565, cbModelParam._m0[30u].z, fma(_1564, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1563)) - _1532;
        float _1576 = fma(_1565, cbModelParam._m0[31u].z, fma(_1564, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1563)) - _1536;
        float _1577 = fma(_1565, cbModelParam._m0[32u].z, fma(_1564, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1563)) - _1540;
        float _1581 = inversesqrt(dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577)));
        float _1594 = ((_1581 * _1575) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1532 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1595 = ((_1581 * _1576) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1536 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1596 = ((_1581 * _1577) / cbModelParam._m0[35u].z) + ((((((_1540 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1594, _1595, _1596), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1594, _1595, _1596), 0.0);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1594, _1595, _1596), 0.0);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1594, _1595, _1596), 0.0);
        float _1631 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1598.x + (-0.5));
        float _1633 = _1631 * (_1598.y + (-0.5));
        float _1634 = _1631 * (_1598.z + (-0.5));
        float _1641 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1605.x + (-0.5));
        float _1643 = _1641 * (_1605.y + (-0.5));
        float _1644 = _1641 * (_1605.z + (-0.5));
        float _1651 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1612.x + (-0.5));
        float _1653 = _1651 * (_1612.y + (-0.5));
        float _1654 = _1651 * (_1612.z + (-0.5));
        float _1661 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1619.x + (-0.5));
        float _1663 = _1661 * (_1619.y + (-0.5));
        float _1664 = _1661 * (_1619.z + (-0.5));
        float _1665 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1666 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1667 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1668 = _1632 * 0.5;
        float _1669 = _1642 * 0.5;
        float _1670 = _1652 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_955, _956, _957), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1665 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4499 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1695 + 1.0))) + _1700) * _1665;
        float _1710 = _1633 * 0.5;
        float _1711 = _1643 * 0.5;
        float _1712 = _1653 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_955, _956, _957), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4510 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1666 + 9.9999997473787516355514526367188e-06);
        float _4521 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4532 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_1737 + 1.0))) + _1742) * _1666;
        float _1752 = _1634 * 0.5;
        float _1753 = _1644 * 0.5;
        float _1754 = _1654 * 0.5;
        float _1755 = dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754));
        float _1760 = (_1755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1755);
        float _1768 = (dot(vec3(_955, _956, _957), vec3(_1760 * _1752, _1760 * _1753, _1760 * _1754)) + 1.0) * 0.5;
        float _4543 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754)) / (_1667 + 9.9999997473787516355514526367188e-06);
        float _4554 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1779 = _1778 * 2.0;
        float _1783 = (1.0 - _1778) / (_1778 + 1.0);
        float _4565 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _1793 = ((((1.0 - _1784) * (_1779 + 2.0)) * exp2(log2(isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_1779 + 1.0))) + _1784) * _1667;
        _1801 = _1634;
        _1802 = _1633;
        _1803 = _1632;
        _1804 = _1644;
        _1805 = _1643;
        _1806 = _1642;
        _1807 = _1654;
        _1808 = _1653;
        _1809 = _1652;
        _1810 = _1667;
        _1811 = _1666;
        _1812 = _1665;
        _1813 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
        _1814 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
        _1815 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)));
    }
    else
    {
        _1801 = _1494;
        _1802 = _1494;
        _1803 = _1494;
        _1804 = _1494;
        _1805 = _1494;
        _1806 = _1494;
        _1807 = _1494;
        _1808 = _1494;
        _1809 = _1494;
        _1810 = _1494;
        _1811 = _1494;
        _1812 = _1494;
        _1813 = 0.0;
        _1814 = 0.0;
        _1815 = 0.0;
    }
    float _1825 = (cbModelParam._m0[1u].x * (_1813 - _1506)) + _1506;
    float _1826 = (cbModelParam._m0[1u].x * (_1814 - _1507)) + _1507;
    float _1827 = (cbModelParam._m0[1u].x * (_1815 - _1508)) + _1508;
    float _1848 = fma(_1827, cbSceneParam._m0[89u].z, fma(_1826, cbSceneParam._m0[89u].y, _1825 * cbSceneParam._m0[89u].x));
    float _1851 = fma(_1827, cbSceneParam._m0[90u].z, fma(_1826, cbSceneParam._m0[90u].y, _1825 * cbSceneParam._m0[90u].x));
    float _1854 = fma(_1827, cbSceneParam._m0[91u].z, fma(_1826, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1825));
    float _1869 = _1128 * 0.5;
    float _1870 = _1129 * 0.5;
    float _1871 = _1130 * 0.5;
    float _1872 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1803, _1806, _1809, _1812));
    float _1875 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1802, _1805, _1808, _1811));
    float _1878 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1801, _1804, _1807, _1810));
    float _1912;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1885 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1493, _1497, _1500, _1503));
        float _1889 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1495, _1498, _1501, _1504));
        float _1893 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1496, _1499, _1502, _1505));
        float _1900 = dot(vec4(cbModelParam._m0[39u]), vec4(_1869, _1870, _1871, 1.0));
        _1912 = dot(vec3(isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1900) ? 0.0 : (isnan(0.0) ? _1900 : max(0.0, _1900))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1912 = 1.0;
    }
    float _1923;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1914 = dot(vec4(cbModelParam._m0[40u]), vec4(_1869, _1870, _1871, 1.0));
        _1923 = dot(vec3(isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1914) ? 0.0 : (isnan(0.0) ? _1914 : max(0.0, _1914))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1923 = 1.0;
    }
    float _1927 = (_1923 * cbModelParam._m0[1u].x) + (_1912 * (1.0 - cbModelParam._m0[1u].x));
    float _1937 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _958);
    float _1938 = isnan(_1937) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1937 : min(cbModelParam._m0[25u].z, _1937));
    float _2019;
    float _2021;
    float _2023;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1986 = fma(_1192, cbModelParam._m0[13u].z, fma(_1188, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1184)) + cbModelParam._m0[13u].w;
        float _1990 = fma(_1192, cbModelParam._m0[14u].z, fma(_1188, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1184)) + cbModelParam._m0[14u].w;
        float _1994 = fma(_1192, cbModelParam._m0[15u].z, fma(_1188, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1184)) + cbModelParam._m0[15u].w;
        float _1997 = fma(_1130, cbModelParam._m0[13u].z, fma(_1129, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1128));
        float _2000 = fma(_1130, cbModelParam._m0[14u].z, fma(_1129, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1128));
        float _2003 = fma(_1130, cbModelParam._m0[15u].z, fma(_1129, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1128));
        float _2031;
        if (_1997 > 0.0)
        {
            _2031 = abs((1.0 - _1986) / _1997);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1986 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2031 = frontier_phi_14_12_ladder;
        }
        float _2203;
        if (_2000 > 0.0)
        {
            _2203 = abs((1.0 - _1990) / _2000);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1990 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2203 = frontier_phi_23_19_ladder;
        }
        float _2498;
        if (_2003 > 0.0)
        {
            _2498 = abs((1.0 - _1994) / _2003);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1994 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2498 = frontier_phi_35_30_ladder;
        }
        float _2500 = isnan(_2203) ? _2031 : (isnan(_2031) ? _2203 : min(_2031, _2203));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1997) + _1986;
        float _2506 = (_2501 * _2000) + _1990;
        float _2507 = (_2501 * _2003) + _1994;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2508;
        float _2512 = _2508 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 > _2512) || ((_2506 < _2510) || ((_2505 < _2510) || (_2505 > _2512))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2507, cbModelParam._m0[9u].z, fma(_2506, cbModelParam._m0[9u].y, _2505 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2507, cbModelParam._m0[10u].z, fma(_2506, cbModelParam._m0[10u].y, _2505 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2507, cbModelParam._m0[11u].z, fma(_2506, cbModelParam._m0[11u].y, _2505 * cbModelParam._m0[11u].x))), _1938);
            frontier_phi_13_35_ladder = _2652.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2652.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2652.x * cbModelParam._m0[1u].y;
        }
        _2019 = frontier_phi_13_35_ladder_2;
        _2021 = frontier_phi_13_35_ladder_1;
        _2023 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2007 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1128, _1129, _1130), _1938);
        _2019 = _2007.x * cbModelParam._m0[1u].y;
        _2021 = _2007.y * cbModelParam._m0[1u].y;
        _2023 = _2007.z * cbModelParam._m0[1u].y;
    }
    float _2027 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _958);
    float _2028 = isnan(_2027) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2027 : min(cbModelParam._m0[25u].w, _2027));
    float _2118;
    float _2120;
    float _2122;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2082 = fma(_1192, cbModelParam._m0[21u].z, fma(_1188, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1184)) + cbModelParam._m0[21u].w;
        float _2086 = fma(_1192, cbModelParam._m0[22u].z, fma(_1188, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1184)) + cbModelParam._m0[22u].w;
        float _2090 = fma(_1192, cbModelParam._m0[23u].z, fma(_1188, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1184)) + cbModelParam._m0[23u].w;
        float _2093 = fma(_1130, cbModelParam._m0[21u].z, fma(_1129, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1128));
        float _2096 = fma(_1130, cbModelParam._m0[22u].z, fma(_1129, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1128));
        float _2099 = fma(_1130, cbModelParam._m0[23u].z, fma(_1129, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1128));
        float _2208;
        if (_2093 > 0.0)
        {
            _2208 = abs((1.0 - _2082) / _2093);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2082 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2208 = frontier_phi_25_21_ladder;
        }
        float _2525;
        if (_2096 > 0.0)
        {
            _2525 = abs((1.0 - _2086) / _2096);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2096 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2086 + 1.0) / _2096);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2525 = frontier_phi_37_32_ladder;
        }
        float _2863;
        if (_2099 > 0.0)
        {
            _2863 = abs((1.0 - _2090) / _2099);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2090 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2863 = frontier_phi_47_44_ladder;
        }
        float _2865 = isnan(_2525) ? _2208 : (isnan(_2208) ? _2525 : min(_2208, _2525));
        float _2866 = isnan(_2863) ? _2865 : (isnan(_2865) ? _2863 : min(_2865, _2863));
        float _2870 = (_2866 * _2093) + _2082;
        float _2871 = (_2866 * _2096) + _2086;
        float _2872 = (_2866 * _2099) + _2090;
        float _2873 = _2866 * 9.9999997473787516355514526367188e-05;
        float _2874 = (-1.0) - _2873;
        float _2876 = _2873 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2872 > _2876) || ((_2872 < _2874) || ((_2871 > _2876) || ((_2871 < _2874) || ((_2870 < _2874) || (_2870 > _2876))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2872, cbModelParam._m0[17u].z, fma(_2871, cbModelParam._m0[17u].y, _2870 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2872, cbModelParam._m0[18u].z, fma(_2871, cbModelParam._m0[18u].y, _2870 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2872, cbModelParam._m0[19u].z, fma(_2871, cbModelParam._m0[19u].y, _2870 * cbModelParam._m0[19u].x))), _2028);
            frontier_phi_22_47_ladder = _2994.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2994.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2994.x * cbModelParam._m0[1u].z;
        }
        _2118 = frontier_phi_22_47_ladder_2;
        _2120 = frontier_phi_22_47_ladder_1;
        _2122 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2102 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1128, _1129, _1130), _2028);
        _2118 = _2102.x * cbModelParam._m0[1u].z;
        _2120 = _2102.y * cbModelParam._m0[1u].z;
        _2122 = _2102.z * cbModelParam._m0[1u].z;
    }
    float _2135 = (((_1155 * _1104) + _1156) * _1120) * ((cbModelParam._m0[1u].w * (_2118 - _2019)) + _2019);
    float _2137 = (((_1155 * _1106) + _1156) * _1120) * ((cbModelParam._m0[1u].w * (_2120 - _2021)) + _2021);
    float _2139 = (((_1155 * _1107) + _1156) * _1120) * ((cbModelParam._m0[1u].w * (_2122 - _2023)) + _2023);
    float _2142 = fma(_2139, cbSceneParam._m0[89u].z, fma(_2137, cbSceneParam._m0[89u].y, _2135 * cbSceneParam._m0[89u].x));
    float _2145 = fma(_2139, cbSceneParam._m0[90u].z, fma(_2137, cbSceneParam._m0[90u].y, _2135 * cbSceneParam._m0[90u].x));
    float _2148 = fma(_2139, cbSceneParam._m0[91u].z, fma(_2137, cbSceneParam._m0[91u].y, _2135 * cbSceneParam._m0[91u].x));
    float _2182 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2186 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2190 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2194 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2195 = _2182 / _2194;
    float _2196 = _2186 / _2194;
    float _2197 = _2190 / _2194;
    float _2344;
    float _2345;
    float _2346;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2224 = ((uint(_2197 > cbSceneParam._m0[59u].y) + uint(_2197 > cbSceneParam._m0[59u].x)) + uint(_2197 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2225 = _2224 + 43u;
        uint _2233 = _2224 + 44u;
        uint _2241 = _2224 + 45u;
        uint _2249 = _2224 + 46u;
        float _2260 = fma(_2194, cbSceneParam._m0[_2225].w, fma(_2190, cbSceneParam._m0[_2225].z, fma(_2186, cbSceneParam._m0[_2225].y, _2182 * cbSceneParam._m0[_2225].x)));
        float _2264 = fma(_2194, cbSceneParam._m0[_2233].w, fma(_2190, cbSceneParam._m0[_2233].z, fma(_2186, cbSceneParam._m0[_2233].y, _2182 * cbSceneParam._m0[_2233].x)));
        float _2272 = fma(_2194, cbSceneParam._m0[_2249].w, fma(_2190, cbSceneParam._m0[_2249].z, fma(_2186, cbSceneParam._m0[_2249].y, _2182 * cbSceneParam._m0[_2249].x)));
        float _2277 = cbSceneParam._m0[33u].z * _2272;
        float _2279 = cbSceneParam._m0[33u].w * _2272;
        float _2282 = fma(_2194, cbSceneParam._m0[_2241].w, fma(_2190, cbSceneParam._m0[_2241].z, fma(_2186, cbSceneParam._m0[_2241].y, _2182 * cbSceneParam._m0[_2241].x))) / _2272;
        float _2330 = (cbSceneParam._m0[33u].x - sqrt(((_2196 * _2196) + (_2195 * _2195)) + (_2197 * _2197))) * cbSceneParam._m0[33u].y;
        float _4691 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2337 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2277 + _2260) / _2272, (_2279 + _2264) / _2272), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2279 + _2260) / _2272, (_2264 - _2277) / _2272), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2260 - _2277) / _2272, (_2264 - _2279) / _2272), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2260 - _2279) / _2272, (_2277 + _2264) / _2272), _2282), 0.0)).x), vec4(0.25)));
        _2344 = 1.0 - (_2337 * cbSceneParam._m0[34u].x);
        _2345 = 1.0 - (_2337 * cbSceneParam._m0[34u].y);
        _2346 = 1.0 - (_2337 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2344 = 1.0;
        _2345 = 1.0;
        _2346 = 1.0;
    }
    float _2410;
    float _2412;
    float _2414;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2398 = fma(_2194, cbSceneParam._m0[63u].w, fma(_2190, cbSceneParam._m0[63u].z, fma(_2186, cbSceneParam._m0[63u].y, _2182 * cbSceneParam._m0[63u].x)));
        float _2399 = fma(_2194, cbSceneParam._m0[60u].w, fma(_2190, cbSceneParam._m0[60u].z, fma(_2186, cbSceneParam._m0[60u].y, _2182 * cbSceneParam._m0[60u].x))) / _2398;
        float _2400 = fma(_2194, cbSceneParam._m0[61u].w, fma(_2190, cbSceneParam._m0[61u].z, fma(_2186, cbSceneParam._m0[61u].y, _2182 * cbSceneParam._m0[61u].x))) / _2398;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2399 >= cbSceneParam._m0[64u].x) && (_2400 >= cbSceneParam._m0[64u].y)) && (_2399 <= cbSceneParam._m0[64u].z)) && (_2400 <= cbSceneParam._m0[64u].w))
        {
            float _2538 = fma(_2194, cbSceneParam._m0[62u].w, fma(_2190, cbSceneParam._m0[62u].z, fma(_2186, cbSceneParam._m0[62u].y, _2182 * cbSceneParam._m0[62u].x))) / _2398;
            float _2542 = isnan(cbSceneParam._m0[41u].w) ? _2538 : (isnan(_2538) ? cbSceneParam._m0[41u].w : max(_2538, cbSceneParam._m0[41u].w));
            float _2585 = (cbSceneParam._m0[33u].x - sqrt(((_2196 * _2196) + (_2195 * _2195)) + (_2197 * _2197))) * cbSceneParam._m0[33u].y;
            float _4707 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
            float _2592 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2399, cbSceneParam._m0[33u].w + _2400), _2542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2399, _2400 - cbSceneParam._m0[33u].z), _2542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2399 - cbSceneParam._m0[33u].z, _2400 - cbSceneParam._m0[33u].w), _2542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2399 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2400), _2542), 0.0)).x), vec4(0.25)));
            float _2596 = 1.0 - (_2592 * cbSceneParam._m0[34u].x);
            float _2597 = 1.0 - (_2592 * cbSceneParam._m0[34u].y);
            float _2598 = 1.0 - (_2592 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2598) ? _2346 : (isnan(_2346) ? _2598 : min(_2346, _2598));
            frontier_phi_34_33_ladder_1 = isnan(_2597) ? _2345 : (isnan(_2345) ? _2597 : min(_2345, _2597));
            frontier_phi_34_33_ladder_2 = isnan(_2596) ? _2344 : (isnan(_2344) ? _2596 : min(_2344, _2596));
        }
        else
        {
            frontier_phi_34_33_ladder = _2346;
            frontier_phi_34_33_ladder_1 = _2345;
            frontier_phi_34_33_ladder_2 = _2344;
        }
        _2410 = frontier_phi_34_33_ladder_2;
        _2412 = frontier_phi_34_33_ladder_1;
        _2414 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2410 = _2344;
        _2412 = _2345;
        _2414 = _2346;
    }
    uvec4 _2419 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2421 = _2419.x * 14u;
    uint _2422 = _2421 + 13u;
    float _2429 = _1120 + (-1.0);
    float _2434 = (cbLight._m0[_2422].x * _2429) + 1.0;
    float _2435 = (cbLight._m0[_2422].y * _2429) + 1.0;
    float _2436 = (cbLight._m0[_2422].z * _2429) + 1.0;
    float _2437 = (cbLight._m0[_2422].w * _2429) + 1.0;
    uint _2438 = _2421 + 5u;
    float _2444 = isnan(1.0) ? _2435 : (isnan(_2435) ? 1.0 : min(_2435, 1.0));
    uint _2448 = _2421 + 4u;
    float _2457 = isnan(1.0) ? _2434 : (isnan(_2434) ? 1.0 : min(_2434, 1.0));
    uint _2461 = _2421 | 1u;
    float _2472 = dot(vec3(cbLight._m0[_2421].xyz), vec3(_955, _956, _957));
    float _2475 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_955, _956, _957));
    float _4743 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _4754 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2480 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * 0.3183098733425140380859375;
    float _2482 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * 0.3183098733425140380859375;
    float _2489 = ((cbLight._m0[_2438].x * _2444) * _2482) + (((cbLight._m0[_2448].x * _2410) * _2457) * _2480);
    float _2490 = ((_2444 * cbLight._m0[_2438].y) * _2482) + (((cbLight._m0[_2448].y * _2412) * _2457) * _2480);
    float _2491 = ((_2444 * cbLight._m0[_2438].z) * _2482) + (((cbLight._m0[_2448].z * _2414) * _2457) * _2480);
    uvec4 _2495 = floatBitsToUint(cbLight._m0[_2421 + 12u]);
    bool _2497 = _2495.x == 0u;
    float _2599;
    float _2601;
    float _2603;
    if (_2497)
    {
        _2599 = _2489;
        _2601 = _2490;
        _2603 = _2491;
    }
    else
    {
        uint _2607 = _2421 + 6u;
        float _2623 = (dot(vec3(cbLight._m0[_2421 + 2u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2624 = _2623 * _2623;
        float _4765 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2625 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2626 = isnan(1.0) ? _2436 : (isnan(_2436) ? 1.0 : min(_2436, 1.0));
        _2599 = (((cbLight._m0[_2607].x * 0.3183098733425140380859375) * _2625) * _2626) + _2489;
        _2601 = (((cbLight._m0[_2607].y * 0.3183098733425140380859375) * _2625) * _2626) + _2490;
        _2603 = (((cbLight._m0[_2607].z * 0.3183098733425140380859375) * _2625) * _2626) + _2491;
    }
    bool _2606 = _2495.y == 0u;
    float _2661;
    float _2663;
    float _2665;
    if (_2606)
    {
        _2661 = _2599;
        _2663 = _2601;
        _2665 = _2603;
    }
    else
    {
        uint _2834 = _2421 + 7u;
        float _2850 = (dot(vec3(cbLight._m0[_2421 + 3u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2851 = _2850 * _2850;
        float _4781 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2852 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2853 = isnan(1.0) ? _2437 : (isnan(_2437) ? 1.0 : min(_2437, 1.0));
        _2661 = (((cbLight._m0[_2834].x * 0.3183098733425140380859375) * _2852) * _2853) + _2599;
        _2663 = (((cbLight._m0[_2834].y * 0.3183098733425140380859375) * _2852) * _2853) + _2601;
        _2665 = (((cbLight._m0[_2834].z * 0.3183098733425140380859375) * _2852) * _2853) + _2603;
    }
    uint _2668 = _2421 + 8u;
    float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2421].w)) * _958) * 0.949999988079071044921875);
    float _2682 = _2681 * _2681;
    float _2683 = cbLight._m0[_2421].x + _1034;
    float _2684 = cbLight._m0[_2421].y + _1035;
    float _2685 = cbLight._m0[_2421].z + _1036;
    float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
    float _2690 = _2689 * _2683;
    float _2691 = _2689 * _2684;
    float _2692 = _2689 * _2685;
    float _2693 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2421].xyz));
    float _4797 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2696 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
    float _4808 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _2697 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
    float _2698 = dot(vec3(_955, _956, _957), vec3(_2690, _2691, _2692));
    float _4819 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2701 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
    float _2702 = dot(vec3(cbLight._m0[_2421].xyz), vec3(_2690, _2691, _2692));
    float _4830 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2706 = _2682 * _2682;
    float _2710 = ((_2701 * _2701) * (_2706 + (-1.0))) + 1.0;
    float _2718 = exp2(log2(1.0 - (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) * 5.0);
    float _2719 = 0.959999978542327880859375 - _1101;
    float _2721 = 0.959999978542327880859375 - _1102;
    float _2722 = 0.959999978542327880859375 - _1103;
    float _2729 = 1.0 - _2682;
    float _2740 = (0.5 / (((_2697 * ((_2696 * _2729) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2697 * _2729) + _2682) * _2696))) * _2696;
    float _4841 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2742 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2706 / ((_2710 * _2710) * 3.141590118408203125));
    uint _2756 = _2421 + 9u;
    float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _958) * 0.949999988079071044921875);
    float _2768 = _2767 * _2767;
    float _2769 = cbLight._m0[_2461].x + _1034;
    float _2770 = cbLight._m0[_2461].y + _1035;
    float _2771 = cbLight._m0[_2461].z + _1036;
    float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
    float _2776 = _2775 * _2769;
    float _2777 = _2775 * _2770;
    float _2778 = _2775 * _2771;
    float _2779 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2461].xyz));
    float _4852 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2782 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
    float _2783 = dot(vec3(_955, _956, _957), vec3(_2776, _2777, _2778));
    float _4863 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
    float _2786 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
    float _2787 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2776, _2777, _2778));
    float _4874 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2791 = _2768 * _2768;
    float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
    float _2802 = exp2(log2(1.0 - (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) * 5.0);
    float _2809 = 1.0 - _2768;
    float _2819 = (0.5 / (((_2697 * ((_2782 * _2809) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2697 * _2809) + _2768) * _2782))) * _2782;
    float _4885 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    float _2821 = (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
    float _2831 = (((((_2802 * _2719) + _1104) * cbLight._m0[_2756].x) * _2821) * _2444) + ((((cbLight._m0[_2668].x * _2410) * ((_2718 * _2719) + _1104)) * _2742) * _2457);
    float _2832 = (((((_2802 * _2721) + _1106) * cbLight._m0[_2756].y) * _2821) * _2444) + ((((cbLight._m0[_2668].y * _2412) * ((_2718 * _2721) + _1106)) * _2742) * _2457);
    float _2833 = (((((_2802 * _2722) + _1107) * cbLight._m0[_2756].z) * _2821) * _2444) + ((((cbLight._m0[_2668].z * _2414) * ((_2718 * _2722) + _1107)) * _2742) * _2457);
    float _2889;
    float _2891;
    float _2893;
    if (_2497)
    {
        _2889 = _2831;
        _2891 = _2832;
        _2893 = _2833;
    }
    else
    {
        uint _2895 = _2421 + 2u;
        uint _2899 = _2421 + 10u;
        float _2913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2895].w)) * _958) * 0.949999988079071044921875);
        float _2914 = _2913 * _2913;
        float _2915 = cbLight._m0[_2895].x + _1034;
        float _2916 = cbLight._m0[_2895].y + _1035;
        float _2917 = cbLight._m0[_2895].z + _1036;
        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
        float _2922 = _2921 * _2915;
        float _2923 = _2921 * _2916;
        float _2924 = _2921 * _2917;
        float _2925 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2895].xyz));
        float _4896 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
        float _2929 = dot(vec3(_955, _956, _957), vec3(_2922, _2923, _2924));
        float _4907 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
        float _2933 = dot(vec3(cbLight._m0[_2895].xyz), vec3(_2922, _2923, _2924));
        float _4918 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2937 = _2914 * _2914;
        float _2941 = ((_2932 * _2932) * (_2937 + (-1.0))) + 1.0;
        float _2948 = exp2(log2(1.0 - (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0)))) * 5.0);
        float _2955 = 1.0 - _2914;
        float _2965 = (0.5 / (((_2697 * ((_2928 * _2955) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2697 * _2955) + _2914) * _2928))) * _2928;
        float _4929 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2967 = (isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2937 / ((_2941 * _2941) * 3.141590118408203125));
        float _2968 = isnan(1.0) ? _2436 : (isnan(_2436) ? 1.0 : min(_2436, 1.0));
        _2889 = (((((_2948 * _2719) + _1104) * cbLight._m0[_2899].x) * _2967) * _2968) + _2831;
        _2891 = (((((_2948 * _2721) + _1106) * cbLight._m0[_2899].y) * _2967) * _2968) + _2832;
        _2893 = (((((_2948 * _2722) + _1107) * cbLight._m0[_2899].z) * _2967) * _2968) + _2833;
    }
    float _2999;
    float _3001;
    float _3003;
    if (_2606)
    {
        _2999 = _2889;
        _3001 = _2891;
        _3003 = _2893;
    }
    else
    {
        uint _3010 = _2421 + 3u;
        uint _3014 = _2421 + 11u;
        float _3028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3010].w)) * _958) * 0.949999988079071044921875);
        float _3029 = _3028 * _3028;
        float _3030 = cbLight._m0[_3010].x + _1034;
        float _3031 = cbLight._m0[_3010].y + _1035;
        float _3032 = cbLight._m0[_3010].z + _1036;
        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
        float _3037 = _3036 * _3030;
        float _3038 = _3036 * _3031;
        float _3039 = _3036 * _3032;
        float _3040 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_3010].xyz));
        float _4945 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        float _3043 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
        float _3044 = dot(vec3(_955, _956, _957), vec3(_3037, _3038, _3039));
        float _4956 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        float _3047 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
        float _3048 = dot(vec3(cbLight._m0[_3010].xyz), vec3(_3037, _3038, _3039));
        float _4967 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3052 = _3029 * _3029;
        float _3056 = ((_3047 * _3047) * (_3052 + (-1.0))) + 1.0;
        float _3063 = exp2(log2(1.0 - (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0)))) * 5.0);
        float _3070 = 1.0 - _3029;
        float _3080 = (0.5 / (((_2697 * ((_3043 * _3070) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_2697 * _3070) + _3029) * _3043))) * _3043;
        float _4978 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
        float _3082 = (isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_3052 / ((_3056 * _3056) * 3.141590118408203125));
        float _3083 = isnan(1.0) ? _2437 : (isnan(_2437) ? 1.0 : min(_2437, 1.0));
        _2999 = (((((_3063 * _2719) + _1104) * cbLight._m0[_3014].x) * _3082) * _3083) + _2889;
        _3001 = (((((_3063 * _2721) + _1106) * cbLight._m0[_3014].y) * _3082) * _3083) + _2891;
        _3003 = (((((_3063 * _2722) + _1107) * cbLight._m0[_3014].z) * _3082) * _3083) + _2893;
    }
    float _3149;
    float _3151;
    float _3153;
    float _3155;
    float _3157;
    float _3159;
    if (_2419.y == 0u)
    {
        uvec4 _3104 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3105 = _3104.x;
        uint _3116 = uint((float(_3104.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1043) / _3105))) + floor(float(uint(cbSceneParam._m0[85u].x * _1042) / _3105)));
        float _3126 = (log2(_2197 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3127 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
        uint _3130 = uint(isnan(14.0) ? _3127 : (isnan(_3127) ? 14.0 : min(_3127, 14.0)));
        uvec4 _3135 = texelFetch(g_lightClusterGridBuffer, int(((_3130 << 2u) + (_3116 << 6u)) >> 2u));
        uint _3136 = _3135.x;
        uint _3137 = _3104.z;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        if (((((1u << ((_3137 >> 4u) & 15u)) + 4294967295u) & _3136) == 0u) || ((_3137 & 240u) == 0u))
        {
            _3216 = 0.0;
            _3218 = 0.0;
            _3220 = 0.0;
            _3222 = 0.0;
            _3224 = 0.0;
            _3226 = 0.0;
        }
        else
        {
            float _3217;
            float _3219;
            float _3221;
            float _3223;
            float _3225;
            float _3227;
            float _3361 = 0.0;
            float _3362 = 0.0;
            float _3363 = 0.0;
            float _3364 = 0.0;
            float _3365 = 0.0;
            float _3366 = 0.0;
            uint _3367 = 0u;
            uint _3376;
            bool _3377;
            for (;;)
            {
                _3376 = texelFetch(g_lightClassification, int((((_3130 << 5u) + (_3116 << 9u)) + (_3367 << 2u)) >> 2u)).x;
                _3377 = _3376 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3377)
                {
                    frontier_phi_66_pred = _3366;
                    frontier_phi_66_pred_1 = _3365;
                    frontier_phi_66_pred_2 = _3364;
                    frontier_phi_66_pred_3 = _3363;
                    frontier_phi_66_pred_4 = _3362;
                    frontier_phi_66_pred_5 = _3361;
                }
                else
                {
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    float _3490;
                    uint _3491;
                    _3485 = _3361;
                    _3486 = _3362;
                    _3487 = _3363;
                    _3488 = _3364;
                    _3489 = _3365;
                    _3490 = _3366;
                    _3491 = _3376;
                    float _3417;
                    float _3418;
                    float _3419;
                    float _3420;
                    float _3421;
                    float _3422;
                    for (;;)
                    {
                        uint _3495 = uint(findLSB(_3491)) + (_3367 << 5u);
                        uint _3492 = (_3491 + 4294967295u) & _3491;
                        uint _3497 = _3495 * 48u;
                        vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3497)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 3u)).x));
                        uint _3517 = (_3495 * 48u) + 4u;
                        vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3517)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 3u)).x));
                        uint _3536 = (_3495 * 48u) + 8u;
                        vec3 _3547 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3536)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 2u)).x));
                        float _3551 = _3511.x - _2195;
                        float _3552 = _3511.y - _2196;
                        float _3553 = _3511.z - _2197;
                        float _3554 = dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553));
                        float _3557 = inversesqrt(_3554);
                        float _3558 = _3557 * _3551;
                        float _3559 = _3557 * _3552;
                        float _3560 = _3557 * _3553;
                        float _3561 = dot(vec3(_1061, _1064, _1067), vec3(_3558, _3559, _3560));
                        float _3566 = 1.0 - (_3554 * _3511.w);
                        float _5004 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3567 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                        float _3568 = sqrt(_3554) * _3530.w;
                        float _3571 = 1.39999997615814208984375 / (_3568 + 1.39999997615814208984375);
                        float _3572 = _3571 * _3571;
                        float _3575 = ((1.0 - _3572) * _3561) + _3572;
                        float _3578 = _3568 * _3568;
                        float _3582 = ((isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0))) * _3567) / ((_3578 * 0.699999988079071044921875) + 1.0);
                        float _3586 = (-0.0) - _2195;
                        float _3587 = (-0.0) - _2196;
                        float _3588 = (-0.0) - _2197;
                        float _3592 = inversesqrt(dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588)));
                        float _3593 = _3592 * _3586;
                        float _3594 = _3592 * _3587;
                        float _3595 = _3592 * _3588;
                        float _3602 = exp2(log2(1.0 / ((_3578 * 3.5) + 5.0)) * 0.25);
                        float _3603 = 1.0 - _1136;
                        float _3610 = sqrt(1.0 - ((1.0 - (_3603 * _3603)) * (1.0 - (_3602 * _3602))));
                        float _3611 = _3610 * _3610;
                        float _3612 = _3611 * _3611;
                        float _3613 = _3593 + _3558;
                        float _3614 = _3594 + _3559;
                        float _3615 = _3595 + _3560;
                        float _3619 = inversesqrt(dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615)));
                        float _3623 = dot(vec3(_1061, _1064, _1067), vec3(_3593, _3594, _3595));
                        float _5020 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                        float _3626 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                        float _3627 = dot(vec3(_1061, _1064, _1067), vec3(_3619 * _3613, _3619 * _3614, _3619 * _3615));
                        float _5031 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                        float _3630 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                        float _3634 = ((_3630 * _3630) * (_3612 + (-1.0))) + 1.0;
                        float _3635 = _3571 * _3611;
                        float _3636 = _3635 * _3635;
                        float _3639 = ((1.0 - _3636) * _3561) + _3636;
                        float _5042 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3640 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                        float _3641 = 1.0 - _3611;
                        float _3651 = (0.5 / (((_3640 * ((_3626 * _3641) + _3611)) + 9.9999999392252902907785028219223e-09) + (((_3640 * _3641) + _3611) * _3626))) * _3640;
                        float _5053 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                        float _3662 = (((_3612 * 3.1415927410125732421875) * (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0)))) / ((_3634 * _3634) * ((_3578 * 2.1991131305694580078125) + 3.141590118408203125))) * _3567;
                        _3420 = (_3582 * _3530.x) + _3488;
                        _3421 = (_3582 * _3530.y) + _3489;
                        _3422 = (_3582 * _3530.z) + _3490;
                        _3417 = (_3662 * _3547.x) + _3485;
                        _3418 = (_3662 * _3547.y) + _3486;
                        _3419 = (_3662 * _3547.z) + _3487;
                        if (_3492 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3485 = _3417;
                            _3486 = _3418;
                            _3487 = _3419;
                            _3488 = _3420;
                            _3489 = _3421;
                            _3490 = _3422;
                            _3491 = _3492;
                        }
                    }
                    frontier_phi_66_pred = _3422;
                    frontier_phi_66_pred_1 = _3421;
                    frontier_phi_66_pred_2 = _3420;
                    frontier_phi_66_pred_3 = _3419;
                    frontier_phi_66_pred_4 = _3418;
                    frontier_phi_66_pred_5 = _3417;
                }
                _3227 = frontier_phi_66_pred;
                _3225 = frontier_phi_66_pred_1;
                _3223 = frontier_phi_66_pred_2;
                _3221 = frontier_phi_66_pred_3;
                _3219 = frontier_phi_66_pred_4;
                _3217 = frontier_phi_66_pred_5;
                uint _3368 = _3367 + 1u;
                if (_3368 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3361 = _3217;
                    _3362 = _3219;
                    _3363 = _3221;
                    _3364 = _3223;
                    _3365 = _3225;
                    _3366 = _3227;
                    _3367 = _3368;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3216 = _3217;
            _3218 = _3219;
            _3220 = _3221;
            _3222 = _3223;
            _3224 = _3225;
            _3226 = _3227;
        }
        uvec4 _3230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3231 = _3230.z;
        uint _3233 = (_3231 >> 8u) & 15u;
        float _3329;
        float _3331;
        float _3333;
        float _3335;
        float _3337;
        float _3339;
        if (((4294967295u << _3233) & _3136) == 0u)
        {
            _3329 = _3216;
            _3331 = _3218;
            _3333 = _3220;
            _3335 = _3222;
            _3337 = _3224;
            _3339 = _3226;
        }
        else
        {
            float _3354 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
            float _3355 = _3354 * _2195;
            float _3356 = _3354 * _2196;
            float _3357 = _3354 * _2197;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3233 < ((_3231 >> 12u) & 15u))
            {
                float _3330;
                float _3332;
                float _3334;
                float _3336;
                float _3338;
                float _3340;
                float _3468 = _3216;
                float _3469 = _3218;
                float _3470 = _3220;
                float _3471 = _3222;
                float _3472 = _3224;
                float _3473 = _3226;
                uint _3474 = _3233;
                uint _3483;
                bool _3484;
                for (;;)
                {
                    _3483 = texelFetch(g_lightClassification, int((((_3130 << 5u) + (_3116 << 9u)) + (_3474 << 2u)) >> 2u)).x;
                    _3484 = _3483 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3484)
                    {
                        frontier_phi_72_pred = _3473;
                        frontier_phi_72_pred_1 = _3472;
                        frontier_phi_72_pred_2 = _3471;
                        frontier_phi_72_pred_3 = _3470;
                        frontier_phi_72_pred_4 = _3469;
                        frontier_phi_72_pred_5 = _3468;
                    }
                    else
                    {
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3960;
                        float _3961;
                        float _3962;
                        float _3963;
                        float _3964;
                        float _3965;
                        float _3680 = _3468;
                        float _3681 = _3469;
                        float _3682 = _3470;
                        float _3683 = _3471;
                        float _3684 = _3472;
                        float _3685 = _3473;
                        uint _3686 = _3483;
                        uint _3687;
                        vec4 _3712;
                        float _3713;
                        vec4 _3728;
                        vec3 _3740;
                        vec4 _3755;
                        vec4 _3770;
                        float _3816;
                        bool _3817;
                        for (;;)
                        {
                            uint _3697 = ((_3474 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3686));
                            _3687 = (_3686 + 4294967295u) & _3686;
                            uint _3699 = _3697 * 40u;
                            _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            _3713 = _3712.w;
                            uint _3715 = (_3697 * 40u) + 4u;
                            _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            uint _3730 = (_3697 * 40u) + 8u;
                            _3740 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x));
                            uint _3742 = (_3697 * 40u) + 16u;
                            _3755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 3u)).x));
                            uint _3757 = (_3697 * 40u) + 20u;
                            _3770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 3u)).x));
                            uint _3772 = (_3697 * 40u) + 24u;
                            vec4 _3785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 3u)).x));
                            uint _3791 = (_3697 * 40u) + 28u;
                            vec4 _3804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 3u)).x));
                            _3816 = fma(_2197, _3804.z, fma(_2196, _3804.y, _3804.x * _2195)) + _3804.w;
                            _3817 = !((fma(_2197, _3785.z, fma(_2196, _3785.y, _3785.x * _2195)) + _3785.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3817)
                            {
                                float _3844 = _3712.x - _2195;
                                float _3845 = _3712.y - _2196;
                                float _3846 = _3712.z - _2197;
                                float _3847 = dot(vec3(_3844, _3845, _3846), vec3(_3844, _3845, _3846));
                                float _3850 = inversesqrt(_3847);
                                float _3851 = _3850 * _3844;
                                float _3852 = _3850 * _3845;
                                float _3853 = _3850 * _3846;
                                float _3857 = 1.0 - (_3847 / (_3713 * _3713));
                                float _5064 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3858 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                                float _3862 = sqrt(_3847) * _3728.w;
                                float _3864 = 1.39999997615814208984375 / (_3862 + 1.39999997615814208984375);
                                float _3865 = _3864 * _3864;
                                float _3868 = ((1.0 - _3865) * dot(vec3(_3851, _3852, _3853), vec3(_1061, _1064, _1067))) + _3865;
                                float _3871 = _3862 * _3862;
                                float _3875 = (fma(_2197, _3755.z, fma(_2196, _3755.y, _3755.x * _2195)) + _3755.w) / _3816;
                                float _3876 = (fma(_2197, _3770.z, fma(_2196, _3770.y, _3770.x * _2195)) + _3770.w) / _3816;
                                float _3880 = 1.0 - dot(vec2(_3875, _3876), vec2(_3875, _3876));
                                float _5080 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3881 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                                float _3882 = _3881 * (((isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0))) * _3858) / ((_3871 * 0.699999988079071044921875) + 1.0));
                                float _3894 = exp2(log2(1.0 / ((_3871 * 3.5) + 5.0)) * 0.25);
                                float _3895 = 1.0 - _1136;
                                float _3902 = sqrt(1.0 - ((1.0 - (_3895 * _3895)) * (1.0 - (_3894 * _3894))));
                                float _3903 = _3902 * _3902;
                                float _3904 = _3903 * _3903;
                                float _3905 = _3851 - _3355;
                                float _3906 = _3852 - _3356;
                                float _3907 = _3853 - _3357;
                                float _3911 = inversesqrt(dot(vec3(_3905, _3906, _3907), vec3(_3905, _3906, _3907)));
                                float _3915 = dot(vec3(_1061, _1064, _1067), vec3((-0.0) - _3355, (-0.0) - _3356, (-0.0) - _3357));
                                float _5091 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3918 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
                                float _3919 = dot(vec3(_1061, _1064, _1067), vec3(_3911 * _3905, _3911 * _3906, _3911 * _3907));
                                float _5102 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3922 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
                                float _3926 = ((_3922 * _3922) * (_3904 + (-1.0))) + 1.0;
                                float _3927 = _3864 * _3903;
                                float _3928 = _3927 * _3927;
                                float _3934 = ((1.0 - _3928) * dot(vec3(_1061, _1064, _1067), vec3(_3851, _3852, _3853))) + _3928;
                                float _5113 = isnan(0.0) ? _3934 : (isnan(_3934) ? 0.0 : max(_3934, 0.0));
                                float _3935 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
                                float _3936 = 1.0 - _3903;
                                float _3946 = (0.5 / (((_3935 * ((_3918 * _3936) + _3903)) + 9.9999999392252902907785028219223e-09) + (((_3935 * _3936) + _3903) * _3918))) * _3935;
                                float _5124 = isnan(0.0) ? _3946 : (isnan(_3946) ? 0.0 : max(_3946, 0.0));
                                float _3956 = (_3881 * _3858) * (((_3904 * 3.1415927410125732421875) * (isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0)))) / ((_3926 * _3926) * ((_3871 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3882 * _3728.y;
                                frontier_phi_78_pred_1 = _3882 * _3728.x;
                                frontier_phi_78_pred_2 = _3956 * _3740.z;
                                frontier_phi_78_pred_3 = _3956 * _3740.y;
                                frontier_phi_78_pred_4 = _3956 * _3740.x;
                                frontier_phi_78_pred_5 = _3882 * _3728.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3964 = frontier_phi_78_pred;
                            _3963 = frontier_phi_78_pred_1;
                            _3962 = frontier_phi_78_pred_2;
                            _3961 = frontier_phi_78_pred_3;
                            _3960 = frontier_phi_78_pred_4;
                            _3965 = frontier_phi_78_pred_5;
                            _3670 = _3963 + _3683;
                            _3671 = _3964 + _3684;
                            _3672 = _3965 + _3685;
                            _3667 = _3960 + _3680;
                            _3668 = _3961 + _3681;
                            _3669 = _3962 + _3682;
                            if (_3687 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3680 = _3667;
                                _3681 = _3668;
                                _3682 = _3669;
                                _3683 = _3670;
                                _3684 = _3671;
                                _3685 = _3672;
                                _3686 = _3687;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3672;
                        frontier_phi_72_pred_1 = _3671;
                        frontier_phi_72_pred_2 = _3670;
                        frontier_phi_72_pred_3 = _3669;
                        frontier_phi_72_pred_4 = _3668;
                        frontier_phi_72_pred_5 = _3667;
                    }
                    _3340 = frontier_phi_72_pred;
                    _3338 = frontier_phi_72_pred_1;
                    _3336 = frontier_phi_72_pred_2;
                    _3334 = frontier_phi_72_pred_3;
                    _3332 = frontier_phi_72_pred_4;
                    _3330 = frontier_phi_72_pred_5;
                    uint _3475 = _3474 + 1u;
                    if (_3475 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3468 = _3330;
                        _3469 = _3332;
                        _3470 = _3334;
                        _3471 = _3336;
                        _3472 = _3338;
                        _3473 = _3340;
                        _3474 = _3475;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3340;
                frontier_phi_60_61_ladder_1 = _3338;
                frontier_phi_60_61_ladder_2 = _3334;
                frontier_phi_60_61_ladder_3 = _3332;
                frontier_phi_60_61_ladder_4 = _3330;
                frontier_phi_60_61_ladder_5 = _3336;
            }
            else
            {
                frontier_phi_60_61_ladder = _3226;
                frontier_phi_60_61_ladder_1 = _3224;
                frontier_phi_60_61_ladder_2 = _3220;
                frontier_phi_60_61_ladder_3 = _3218;
                frontier_phi_60_61_ladder_4 = _3216;
                frontier_phi_60_61_ladder_5 = _3222;
            }
            _3329 = frontier_phi_60_61_ladder_4;
            _3331 = frontier_phi_60_61_ladder_3;
            _3333 = frontier_phi_60_61_ladder_2;
            _3335 = frontier_phi_60_61_ladder_5;
            _3337 = frontier_phi_60_61_ladder_1;
            _3339 = frontier_phi_60_61_ladder;
        }
        float _3344 = isnan(1.0) ? _1120 : (isnan(_1120) ? 1.0 : min(_1120, 1.0));
        _3149 = (_3344 * _3335) + _2661;
        _3151 = (_3344 * _3337) + _2663;
        _3153 = (_3344 * _3339) + _2665;
        _3155 = ((_3329 * _1104) * _3344) + _2999;
        _3157 = ((_3331 * _1106) * _3344) + _3001;
        _3159 = ((_3333 * _1107) * _3344) + _3003;
    }
    else
    {
        _3149 = _2661;
        _3151 = _2663;
        _3153 = _2665;
        _3155 = _2999;
        _3157 = _3001;
        _3159 = _3003;
    }
    float _5140 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _5151 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _5162 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    uint _3179 = _291 + 6u;
    float _3187 = _1042 / cbSceneParam._m0[86u].x;
    float _3188 = _1043 / cbSceneParam._m0[86u].y;
    vec4 _3202 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3187, _3188, (log2((isnan(cbSceneParam._m0[77u].w) ? _977 : (isnan(_977) ? cbSceneParam._m0[77u].w : min(_977, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3204 = _3202.x;
    float _3205 = _3202.y;
    float _3206 = _3202.z;
    float _3207 = _3202.w;
    float _3279;
    float _3281;
    float _3283;
    float _3285;
    if (_977 > cbSceneParam._m0[78u].w)
    {
        float _3241 = isnan(_977) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _977 : min(cbSceneParam._m0[80u].w, _977));
        float _3242 = _3241 / _977;
        float _3253 = _3242 * _1027;
        float _3254 = _1028 * _3242;
        float _3255 = (-0.0) - _3254;
        float _3257 = _3242 * _1029;
        float _3259 = (cbSceneParam._m0[77u].w * _3255) / _3241;
        float _3260 = _3259 + cbSceneParam._m0[79u].w;
        float _3261 = cbSceneParam._m0[79u].w - _3254;
        float _3267 = sqrt(((_3253 * _3253) + (_3254 * _3254)) + (_3257 * _3257));
        float _3270 = (1.0 - (cbSceneParam._m0[77u].w / _3241)) * _3267;
        float _3275 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3277 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3430;
        if (abs((_3255 - _3259) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3430 = ((((_3260 > 0.0) ? exp2(_3275 * _3260) : (2.0 - exp2(_3277 * _3260))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3270;
        }
        else
        {
            float _3390 = 1.0 / cbSceneParam._m0[80u].x;
            float _3391 = isnan(_3261) ? _3260 : (isnan(_3260) ? _3261 : max(_3260, _3261));
            float _3392 = isnan(_3261) ? _3260 : (isnan(_3260) ? _3261 : min(_3260, _3261));
            float _3401 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : min(_3391, 0.0));
            float _3402 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : min(_3392, 0.0));
            _3430 = ((abs(_3267 / _3255) * cbSceneParam._m0[80u].y) * ((((_3401 - _3402) * 2.0) - ((exp2(_3275 * (isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0)))) - exp2(_3275 * (isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0))))) * _3390)) - ((exp2(_3277 * _3401) - exp2(_3277 * _3402)) * _3390))) + (_3270 * cbSceneParam._m0[80u].z);
        }
        vec4 _3432 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3187, _3188, 1.0), 0.0);
        float _3441 = exp2((_3430 * (-1.44269502162933349609375)) * (1.0 - _3432.w));
        float _3442 = log2(_3441);
        float _3458 = log2(_3207);
        _3279 = (exp2(_3458 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3442 * cbSceneParam._m0[78u].x)) * _3432.x) / cbSceneParam._m0[78u].x)) + _3204;
        _3281 = (exp2(_3458 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3442 * cbSceneParam._m0[78u].y)) * _3432.y) / cbSceneParam._m0[78u].y)) + _3205;
        _3283 = (exp2(_3458 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3442 * cbSceneParam._m0[78u].z)) * _3432.z) / cbSceneParam._m0[78u].z)) + _3206;
        _3285 = _3441 * _3207;
    }
    else
    {
        _3279 = _3204;
        _3281 = _3205;
        _3283 = _3206;
        _3285 = _3207;
    }
    float _3297 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3298 = _3297 == 3.0;
    float _3299 = log2(_3285);
    float _3306 = exp2(_3299 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0))) * (_3149 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1120))) + ((_3155 + ((isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0))) * _1927)) * cbPerFrame._m0[3u].x));
    float _3307 = exp2(_3299 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0))) * (_3151 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1120))) + ((_3157 + ((isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0))) * _1927)) * cbPerFrame._m0[3u].x));
    float _3308 = exp2(_3299 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0))) * (_3153 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1120))) + ((_3159 + ((isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0))) * _1927)) * cbPerFrame._m0[3u].x));
    float _3317 = (_3297 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3317 * (_3298 ? _3306 : (_3306 + (cbSceneParam._m0[72u].w * _3279)));
    SV_Target.y = _3317 * (_3298 ? _3307 : (_3307 + (cbSceneParam._m0[72u].w * _3281)));
    SV_Target.z = _3317 * (_3298 ? _3308 : (_3308 + (cbSceneParam._m0[72u].w * _3283)));
    SV_Target.w = cbInstanceData._m0[_3179].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3179].w;
}


