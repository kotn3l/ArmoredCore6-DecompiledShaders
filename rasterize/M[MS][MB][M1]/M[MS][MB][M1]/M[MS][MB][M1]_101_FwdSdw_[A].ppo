#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1330;
float _3994;
float _3995;
float _3996;
float _3997;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4006 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _4017 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _4028 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].y) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4039 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _430 = (_423 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _431 = (_423 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _432 = (_423 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _436 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _430;
    float _439 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _431;
    float _442 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _432;
    float _449 = ((_430 - _436) * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) + _436;
    float _450 = ((_431 - _439) * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) + _439;
    float _451 = ((_432 - _442) * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) + _442;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    float _526 = ((_496.z - _517) * _423) + _517;
    float _529 = ((((_496.x - _515) * _423) + _515) * 2.0) + (-1.0);
    float _530 = ((((_496.y - _516) * _423) + _516) * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _4050 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _568 = (_529 + ((((_469.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_556.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _569 = (_530 + ((((_469.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_556.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _572 = fma(_536, _239, fma(_569, _246, _568 * _232));
    float _575 = fma(_536, _240, fma(_569, _247, _568 * _233));
    float _578 = fma(_536, _241, fma(_569, _248, _568 * _234));
    float _582 = inversesqrt(dot(vec3(_572, _575, _578), vec3(_572, _575, _578)));
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _618 = (cbMtdParam._m0[19u].x + dot(vec4(_582 * _572, _582 * _575, _582 * _578, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_611 - _612) * cbMtdParam._m0[24u].z) + _612) * cbMtdParam._m0[21u].z);
    float _4061 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _626 = (_619 * (cbMtdParam._m0[17u].x - _449)) + _449;
    float _627 = (_619 * (cbMtdParam._m0[17u].y - _450)) + _450;
    float _628 = (_619 * (cbMtdParam._m0[17u].z - _451)) + _451;
    vec4 _640 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _654 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _656 = _654.x;
    float _674 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _656) * _423) + _656;
    float _678 = ((_640.x - _674) * cbMtdParam._m0[19u].z) + _674;
    float _680 = _678 - (_678 * _619);
    float _685 = (((_469.z - _526) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _526;
    float _689 = ((_556.z - _685) * cbMtdParam._m0[19u].w) + _685;
    vec4 _702 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _709 = (_702.x * 2.0) + (-1.0);
    float _710 = (_702.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _4072 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _719 = ((_702.z - _689) * _619) + _689;
    float _729 = ((sqrt(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) - _536) * _619) + _536;
    float _732 = (((_709 - _568) * _619) + _568) + (cbMtdParam._m0[21u].x * _568);
    float _733 = (((_710 - _569) * _619) + _569) + (cbMtdParam._m0[21u].x * _569);
    float _735 = cbMtdParam._m0[22u].x + _556.w;
    float _738 = fma(_729, _239, fma(_733, _246, _732 * _232));
    float _741 = fma(_729, _240, fma(_733, _247, _732 * _233));
    float _744 = fma(_729, _241, fma(_733, _248, _732 * _234));
    float _748 = inversesqrt(dot(vec3(_738, _741, _744), vec3(_738, _741, _744)));
    float _749 = _748 * _738;
    float _750 = _748 * _741;
    float _751 = _748 * _744;
    float _4083 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _752 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4105 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4116 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _4127 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4138 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _757 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _771 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _822 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _812);
    float _823 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _812);
    float _824 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _812);
    float _828 = inversesqrt(dot(vec3(_822, _823, _824), vec3(_822, _823, _824)));
    float _829 = _822 * _828;
    float _830 = _823 * _828;
    float _831 = _824 * _828;
    vec4 _836 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _838 = _836.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1010 = sqrt(((_822 * _822) + (_823 * _823)) + (_824 * _824));
        float _1016 = (cbMatDynParam._m0[5u].x * _1010) + cbMatDynParam._m0[5u].y;
        float _4149 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1021 = (cbMatDynParam._m0[5u].z * _1010) + cbMatDynParam._m0[5u].w;
        float _4160 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) - _1017)) + _1017) < ((_838 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _849 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _850 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _868 = fma(_751, cbSceneParam._m0[5u].z, fma(_750, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _749));
    float _871 = fma(_751, cbSceneParam._m0[6u].z, fma(_750, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _749));
    float _874 = fma(_751, cbSceneParam._m0[7u].z, fma(_750, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _749));
    uint _887 = _272 + 9u;
    uint _888 = _887 + uint(cbMatDynParam._m0[0u].w);
    float _894 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * cbInstanceData._m0[_888].x;
    float _895 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * cbInstanceData._m0[_888].y;
    float _896 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * cbInstanceData._m0[_888].z;
    float _4171 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _4193 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _900 = 1.0 - _757;
    float _901 = _897 * _900;
    float _902 = _898 * _900;
    float _903 = _899 * _900;
    float _908 = (_897 + (-0.039999999105930328369140625)) * _757;
    float _909 = (_898 + (-0.039999999105930328369140625)) * _757;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _757;
    float _911 = _908 + 0.039999999105930328369140625;
    float _913 = _909 + 0.039999999105930328369140625;
    float _914 = _910 + 0.039999999105930328369140625;
    vec4 _923 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _849, cbSceneParam._m0[86u].y * _850));
    float _927 = ((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * TEXCOORD_5.w) * _923.x;
    float _928 = dot(vec3(_749, _750, _751), vec3(_829, _830, _831));
    float _931 = _928 * 2.0;
    float _935 = (_931 * _749) - _829;
    float _936 = (_931 * _750) - _830;
    float _937 = (_931 * _751) - _831;
    float _941 = abs(dot(vec3(_829, _830, _831), vec3(_749, _750, _751)));
    float _4204 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _943 = sqrt(_752);
    float _956 = exp2((_943 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_943 * 3.0));
    float _962 = (1.0 - _956) * ((_943 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _963 = _956 * _943;
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1329;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1054 = fma(_999, cbModelParam._m0[26u].z, fma(_995, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _991));
        float _1058 = fma(_999, cbModelParam._m0[27u].z, fma(_995, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _991));
        float _1062 = fma(_999, cbModelParam._m0[28u].z, fma(_995, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _991));
        float _1087 = _991 + _749;
        float _1088 = _995 + _750;
        float _1089 = _999 + _751;
        float _1099 = fma(_1089, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087)) - _1054;
        float _1100 = fma(_1089, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087)) - _1058;
        float _1101 = fma(_1089, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087)) - _1062;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1118 = ((_1105 * _1099) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1054 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1105 * _1100) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1058 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1105 * _1101) / cbModelParam._m0[34u].z) + ((((((_1062 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        float _1157 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1123.x + (-0.5));
        float _1159 = _1157 * (_1123.y + (-0.5));
        float _1160 = _1157 * (_1123.z + (-0.5));
        float _1167 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1130.x + (-0.5));
        float _1169 = _1167 * (_1130.y + (-0.5));
        float _1170 = _1167 * (_1130.z + (-0.5));
        float _1177 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1137.x + (-0.5));
        float _1179 = _1177 * (_1137.y + (-0.5));
        float _1180 = _1177 * (_1137.z + (-0.5));
        float _1187 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1144.x + (-0.5));
        float _1189 = _1187 * (_1144.y + (-0.5));
        float _1190 = _1187 * (_1144.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1211 = (dot(vec3(_749, _750, _751), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1221 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _4252 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1223 + 1.0))) + _1228) * _1191;
        float _1238 = _1159 * 0.5;
        float _1239 = _1169 * 0.5;
        float _1240 = _1179 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_749, _750, _751), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4285 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1265 + 1.0))) + _1270) * _1192;
        float _1280 = _1160 * 0.5;
        float _1281 = _1170 * 0.5;
        float _1282 = _1180 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_749, _750, _751), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4318 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1307 + 1.0))) + _1312) * _1193;
        _1329 = _1160;
        _1331 = _1159;
        _1332 = _1158;
        _1333 = _1170;
        _1334 = _1169;
        _1335 = _1168;
        _1336 = _1180;
        _1337 = _1179;
        _1338 = _1178;
        _1339 = _1193;
        _1340 = _1192;
        _1341 = _1191;
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1330;
        _1331 = _1330;
        _1332 = _1330;
        _1333 = _1330;
        _1334 = _1330;
        _1335 = _1330;
        _1336 = _1330;
        _1337 = _1330;
        _1338 = _1330;
        _1339 = _1330;
        _1340 = _1330;
        _1341 = _1330;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1372 = fma(_999, cbModelParam._m0[30u].z, fma(_995, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _991));
        float _1376 = fma(_999, cbModelParam._m0[31u].z, fma(_995, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _991));
        float _1380 = fma(_999, cbModelParam._m0[32u].z, fma(_995, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _991));
        float _1403 = _991 + _749;
        float _1404 = _995 + _750;
        float _1405 = _999 + _751;
        float _1415 = fma(_1405, cbModelParam._m0[30u].z, fma(_1404, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1403)) - _1372;
        float _1416 = fma(_1405, cbModelParam._m0[31u].z, fma(_1404, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1403)) - _1376;
        float _1417 = fma(_1405, cbModelParam._m0[32u].z, fma(_1404, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1403)) - _1380;
        float _1421 = inversesqrt(dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417)));
        float _1434 = ((_1421 * _1415) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1372 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1421 * _1416) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1376 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1421 * _1417) / cbModelParam._m0[35u].z) + ((((((_1380 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        float _1471 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1438.x + (-0.5));
        float _1473 = _1471 * (_1438.y + (-0.5));
        float _1474 = _1471 * (_1438.z + (-0.5));
        float _1481 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1445.x + (-0.5));
        float _1483 = _1481 * (_1445.y + (-0.5));
        float _1484 = _1481 * (_1445.z + (-0.5));
        float _1491 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1452.x + (-0.5));
        float _1493 = _1491 * (_1452.y + (-0.5));
        float _1494 = _1491 * (_1452.z + (-0.5));
        float _1501 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1459.x + (-0.5));
        float _1503 = _1501 * (_1459.y + (-0.5));
        float _1504 = _1501 * (_1459.z + (-0.5));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = _1472 * 0.5;
        float _1509 = _1482 * 0.5;
        float _1510 = _1492 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_749, _750, _751), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4359 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4370 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4381 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_1535 + 1.0))) + _1540) * _1505;
        float _1550 = _1473 * 0.5;
        float _1551 = _1483 * 0.5;
        float _1552 = _1493 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_749, _750, _751), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4392 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4403 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4414 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_1577 + 1.0))) + _1582) * _1506;
        float _1592 = _1474 * 0.5;
        float _1593 = _1484 * 0.5;
        float _1594 = _1494 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_749, _750, _751), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4425 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4436 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4447 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_1619 + 1.0))) + _1624) * _1507;
        _1641 = _1474;
        _1642 = _1473;
        _1643 = _1472;
        _1644 = _1484;
        _1645 = _1483;
        _1646 = _1482;
        _1647 = _1494;
        _1648 = _1493;
        _1649 = _1492;
        _1650 = _1507;
        _1651 = _1506;
        _1652 = _1505;
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
    }
    else
    {
        _1641 = _1330;
        _1642 = _1330;
        _1643 = _1330;
        _1644 = _1330;
        _1645 = _1330;
        _1646 = _1330;
        _1647 = _1330;
        _1648 = _1330;
        _1649 = _1330;
        _1650 = _1330;
        _1651 = _1330;
        _1652 = _1330;
        _1653 = 0.0;
        _1654 = 0.0;
        _1655 = 0.0;
    }
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1342)) + _1342;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1343)) + _1343;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1344)) + _1344;
    float _1688 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1665));
    float _1709 = _935 * 0.5;
    float _1710 = _936 * 0.5;
    float _1711 = _937 * 0.5;
    float _1712 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1715 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1718 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1752;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1725 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1329, _1333, _1336, _1339));
        float _1729 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1733 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1740 = dot(vec4(cbModelParam._m0[39u]), vec4(_1709, _1710, _1711, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1763;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1754 = dot(vec4(cbModelParam._m0[40u]), vec4(_1709, _1710, _1711, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1767 = (_1763 * cbModelParam._m0[1u].x) + (_1752 * (1.0 - cbModelParam._m0[1u].x));
    float _1777 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _752);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1777 : min(cbModelParam._m0[25u].z, _1777));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1826 = fma(_999, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991)) + cbModelParam._m0[13u].w;
        float _1830 = fma(_999, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991)) + cbModelParam._m0[14u].w;
        float _1834 = fma(_999, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991)) + cbModelParam._m0[15u].w;
        float _1837 = fma(_937, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _935));
        float _1840 = fma(_937, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _935));
        float _1843 = fma(_937, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _935));
        float _1871;
        if (_1837 > 0.0)
        {
            _1871 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1871 = frontier_phi_17_15_ladder;
        }
        float _2043;
        if (_1840 > 0.0)
        {
            _2043 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2043 = frontier_phi_26_22_ladder;
        }
        float _2338;
        if (_1843 > 0.0)
        {
            _2338 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2338 = frontier_phi_38_33_ladder;
        }
        float _2340 = isnan(_2043) ? _1871 : (isnan(_1871) ? _2043 : min(_1871, _2043));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1837) + _1826;
        float _2346 = (_2341 * _1840) + _1830;
        float _2347 = (_2341 * _1843) + _1834;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2350 = (-1.0) - _2348;
        float _2352 = _2348 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2347 > _2352) || ((_2347 < _2350) || ((_2346 > _2352) || ((_2346 < _2350) || ((_2345 < _2350) || (_2345 > _2352))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2492 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2347, cbModelParam._m0[9u].z, fma(_2346, cbModelParam._m0[9u].y, _2345 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2347, cbModelParam._m0[10u].z, fma(_2346, cbModelParam._m0[10u].y, _2345 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2347, cbModelParam._m0[11u].z, fma(_2346, cbModelParam._m0[11u].y, _2345 * cbModelParam._m0[11u].x))), _1778);
            frontier_phi_16_38_ladder = _2492.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2492.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2492.x * cbModelParam._m0[1u].y;
        }
        _1859 = frontier_phi_16_38_ladder_2;
        _1861 = frontier_phi_16_38_ladder_1;
        _1863 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_935, _936, _937), _1778);
        _1859 = _1847.x * cbModelParam._m0[1u].y;
        _1861 = _1847.y * cbModelParam._m0[1u].y;
        _1863 = _1847.z * cbModelParam._m0[1u].y;
    }
    float _1867 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _752);
    float _1868 = isnan(_1867) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1867 : min(cbModelParam._m0[25u].w, _1867));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1922 = fma(_999, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991)) + cbModelParam._m0[21u].w;
        float _1926 = fma(_999, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991)) + cbModelParam._m0[22u].w;
        float _1930 = fma(_999, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991)) + cbModelParam._m0[23u].w;
        float _1933 = fma(_937, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _935));
        float _1936 = fma(_937, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _935));
        float _1939 = fma(_937, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _935));
        float _2048;
        if (_1933 > 0.0)
        {
            _2048 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2048 = frontier_phi_28_24_ladder;
        }
        float _2365;
        if (_1936 > 0.0)
        {
            _2365 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2365 = frontier_phi_40_35_ladder;
        }
        float _2703;
        if (_1939 > 0.0)
        {
            _2703 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2703 = frontier_phi_50_47_ladder;
        }
        float _2705 = isnan(_2365) ? _2048 : (isnan(_2048) ? _2365 : min(_2048, _2365));
        float _2706 = isnan(_2703) ? _2705 : (isnan(_2705) ? _2703 : min(_2705, _2703));
        float _2710 = (_2706 * _1933) + _1922;
        float _2711 = (_2706 * _1936) + _1926;
        float _2712 = (_2706 * _1939) + _1930;
        float _2713 = _2706 * 9.9999997473787516355514526367188e-05;
        float _2714 = (-1.0) - _2713;
        float _2716 = _2713 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2712 > _2716) || ((_2712 < _2714) || ((_2711 > _2716) || ((_2711 < _2714) || ((_2710 < _2714) || (_2710 > _2716))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2712, cbModelParam._m0[17u].z, fma(_2711, cbModelParam._m0[17u].y, _2710 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2712, cbModelParam._m0[18u].z, fma(_2711, cbModelParam._m0[18u].y, _2710 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2712, cbModelParam._m0[19u].z, fma(_2711, cbModelParam._m0[19u].y, _2710 * cbModelParam._m0[19u].x))), _1868);
            frontier_phi_25_50_ladder = _2834.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2834.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2834.x * cbModelParam._m0[1u].z;
        }
        _1958 = frontier_phi_25_50_ladder_2;
        _1960 = frontier_phi_25_50_ladder_1;
        _1962 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_935, _936, _937), _1868);
        _1958 = _1942.x * cbModelParam._m0[1u].z;
        _1960 = _1942.y * cbModelParam._m0[1u].z;
        _1962 = _1942.z * cbModelParam._m0[1u].z;
    }
    float _1975 = (((_962 * _911) + _963) * _927) * ((cbModelParam._m0[1u].w * (_1958 - _1859)) + _1859);
    float _1977 = (((_962 * _913) + _963) * _927) * ((cbModelParam._m0[1u].w * (_1960 - _1861)) + _1861);
    float _1979 = (((_962 * _914) + _963) * _927) * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1982 = fma(_1979, cbSceneParam._m0[89u].z, fma(_1977, cbSceneParam._m0[89u].y, _1975 * cbSceneParam._m0[89u].x));
    float _1985 = fma(_1979, cbSceneParam._m0[90u].z, fma(_1977, cbSceneParam._m0[90u].y, _1975 * cbSceneParam._m0[90u].x));
    float _1988 = fma(_1979, cbSceneParam._m0[91u].z, fma(_1977, cbSceneParam._m0[91u].y, _1975 * cbSceneParam._m0[91u].x));
    float _2022 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2035 = _2022 / _2034;
    float _2036 = _2026 / _2034;
    float _2037 = _2030 / _2034;
    float _2184;
    float _2185;
    float _2186;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2064 = ((uint(_2037 > cbSceneParam._m0[59u].y) + uint(_2037 > cbSceneParam._m0[59u].x)) + uint(_2037 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2065 = _2064 + 43u;
        uint _2073 = _2064 + 44u;
        uint _2081 = _2064 + 45u;
        uint _2089 = _2064 + 46u;
        float _2100 = fma(_2034, cbSceneParam._m0[_2065].w, fma(_2030, cbSceneParam._m0[_2065].z, fma(_2026, cbSceneParam._m0[_2065].y, _2022 * cbSceneParam._m0[_2065].x)));
        float _2104 = fma(_2034, cbSceneParam._m0[_2073].w, fma(_2030, cbSceneParam._m0[_2073].z, fma(_2026, cbSceneParam._m0[_2073].y, _2022 * cbSceneParam._m0[_2073].x)));
        float _2112 = fma(_2034, cbSceneParam._m0[_2089].w, fma(_2030, cbSceneParam._m0[_2089].z, fma(_2026, cbSceneParam._m0[_2089].y, _2022 * cbSceneParam._m0[_2089].x)));
        float _2117 = cbSceneParam._m0[33u].z * _2112;
        float _2119 = cbSceneParam._m0[33u].w * _2112;
        float _2122 = fma(_2034, cbSceneParam._m0[_2081].w, fma(_2030, cbSceneParam._m0[_2081].z, fma(_2026, cbSceneParam._m0[_2081].y, _2022 * cbSceneParam._m0[_2081].x))) / _2112;
        float _2170 = (cbSceneParam._m0[33u].x - sqrt(((_2036 * _2036) + (_2035 * _2035)) + (_2037 * _2037))) * cbSceneParam._m0[33u].y;
        float _4573 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2177 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 + _2100) / _2112, (_2119 + _2104) / _2112), _2122), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 + _2100) / _2112, (_2104 - _2117) / _2112), _2122), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 - _2117) / _2112, (_2104 - _2119) / _2112), _2122), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 - _2119) / _2112, (_2117 + _2104) / _2112), _2122), 0.0)).x), vec4(0.25)));
        _2184 = 1.0 - (_2177 * cbSceneParam._m0[34u].x);
        _2185 = 1.0 - (_2177 * cbSceneParam._m0[34u].y);
        _2186 = 1.0 - (_2177 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2184 = 1.0;
        _2185 = 1.0;
        _2186 = 1.0;
    }
    float _2250;
    float _2252;
    float _2254;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2238 = fma(_2034, cbSceneParam._m0[63u].w, fma(_2030, cbSceneParam._m0[63u].z, fma(_2026, cbSceneParam._m0[63u].y, _2022 * cbSceneParam._m0[63u].x)));
        float _2239 = fma(_2034, cbSceneParam._m0[60u].w, fma(_2030, cbSceneParam._m0[60u].z, fma(_2026, cbSceneParam._m0[60u].y, _2022 * cbSceneParam._m0[60u].x))) / _2238;
        float _2240 = fma(_2034, cbSceneParam._m0[61u].w, fma(_2030, cbSceneParam._m0[61u].z, fma(_2026, cbSceneParam._m0[61u].y, _2022 * cbSceneParam._m0[61u].x))) / _2238;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2239 >= cbSceneParam._m0[64u].x) && (_2240 >= cbSceneParam._m0[64u].y)) && (_2239 <= cbSceneParam._m0[64u].z)) && (_2240 <= cbSceneParam._m0[64u].w))
        {
            float _2378 = fma(_2034, cbSceneParam._m0[62u].w, fma(_2030, cbSceneParam._m0[62u].z, fma(_2026, cbSceneParam._m0[62u].y, _2022 * cbSceneParam._m0[62u].x))) / _2238;
            float _2382 = isnan(cbSceneParam._m0[41u].w) ? _2378 : (isnan(_2378) ? cbSceneParam._m0[41u].w : max(_2378, cbSceneParam._m0[41u].w));
            float _2425 = (cbSceneParam._m0[33u].x - sqrt(((_2036 * _2036) + (_2035 * _2035)) + (_2037 * _2037))) * cbSceneParam._m0[33u].y;
            float _4589 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
            float _2432 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2239, cbSceneParam._m0[33u].w + _2240), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2239, _2240 - cbSceneParam._m0[33u].z), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2239 - cbSceneParam._m0[33u].z, _2240 - cbSceneParam._m0[33u].w), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2239 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2240), _2382), 0.0)).x), vec4(0.25)));
            float _2436 = 1.0 - (_2432 * cbSceneParam._m0[34u].x);
            float _2437 = 1.0 - (_2432 * cbSceneParam._m0[34u].y);
            float _2438 = 1.0 - (_2432 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2438) ? _2186 : (isnan(_2186) ? _2438 : min(_2186, _2438));
            frontier_phi_37_36_ladder_1 = isnan(_2437) ? _2185 : (isnan(_2185) ? _2437 : min(_2185, _2437));
            frontier_phi_37_36_ladder_2 = isnan(_2436) ? _2184 : (isnan(_2184) ? _2436 : min(_2184, _2436));
        }
        else
        {
            frontier_phi_37_36_ladder = _2186;
            frontier_phi_37_36_ladder_1 = _2185;
            frontier_phi_37_36_ladder_2 = _2184;
        }
        _2250 = frontier_phi_37_36_ladder_2;
        _2252 = frontier_phi_37_36_ladder_1;
        _2254 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2250 = _2184;
        _2252 = _2185;
        _2254 = _2186;
    }
    uvec4 _2259 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2261 = _2259.x * 14u;
    uint _2262 = _2261 + 13u;
    float _2269 = _927 + (-1.0);
    float _2274 = (cbLight._m0[_2262].x * _2269) + 1.0;
    float _2275 = (cbLight._m0[_2262].y * _2269) + 1.0;
    float _2276 = (cbLight._m0[_2262].z * _2269) + 1.0;
    float _2277 = (cbLight._m0[_2262].w * _2269) + 1.0;
    uint _2278 = _2261 + 5u;
    float _2284 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
    uint _2288 = _2261 + 4u;
    float _2297 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
    uint _2301 = _2261 | 1u;
    float _2312 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_749, _750, _751));
    float _2315 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_749, _750, _751));
    float _4625 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _4636 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2320 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * 0.3183098733425140380859375;
    float _2322 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * 0.3183098733425140380859375;
    float _2329 = ((cbLight._m0[_2278].x * _2284) * _2322) + (((cbLight._m0[_2288].x * _2250) * _2297) * _2320);
    float _2330 = ((_2284 * cbLight._m0[_2278].y) * _2322) + (((cbLight._m0[_2288].y * _2252) * _2297) * _2320);
    float _2331 = ((_2284 * cbLight._m0[_2278].z) * _2322) + (((cbLight._m0[_2288].z * _2254) * _2297) * _2320);
    uvec4 _2335 = floatBitsToUint(cbLight._m0[_2261 + 12u]);
    bool _2337 = _2335.x == 0u;
    float _2439;
    float _2441;
    float _2443;
    if (_2337)
    {
        _2439 = _2329;
        _2441 = _2330;
        _2443 = _2331;
    }
    else
    {
        uint _2447 = _2261 + 6u;
        float _2463 = (dot(vec3(cbLight._m0[_2261 + 2u].xyz), vec3(_749, _750, _751)) * 0.5) + 0.5;
        float _2464 = _2463 * _2463;
        float _4647 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2465 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2466 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2439 = (((cbLight._m0[_2447].x * 0.3183098733425140380859375) * _2465) * _2466) + _2329;
        _2441 = (((cbLight._m0[_2447].y * 0.3183098733425140380859375) * _2465) * _2466) + _2330;
        _2443 = (((cbLight._m0[_2447].z * 0.3183098733425140380859375) * _2465) * _2466) + _2331;
    }
    bool _2446 = _2335.y == 0u;
    float _2501;
    float _2503;
    float _2505;
    if (_2446)
    {
        _2501 = _2439;
        _2503 = _2441;
        _2505 = _2443;
    }
    else
    {
        uint _2674 = _2261 + 7u;
        float _2690 = (dot(vec3(cbLight._m0[_2261 + 3u].xyz), vec3(_749, _750, _751)) * 0.5) + 0.5;
        float _2691 = _2690 * _2690;
        float _4663 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2692 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2693 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2501 = (((cbLight._m0[_2674].x * 0.3183098733425140380859375) * _2692) * _2693) + _2439;
        _2503 = (((cbLight._m0[_2674].y * 0.3183098733425140380859375) * _2692) * _2693) + _2441;
        _2505 = (((cbLight._m0[_2674].z * 0.3183098733425140380859375) * _2692) * _2693) + _2443;
    }
    uint _2508 = _2261 + 8u;
    float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _752) * 0.949999988079071044921875);
    float _2522 = _2521 * _2521;
    float _2523 = cbLight._m0[_2261].x + _829;
    float _2524 = cbLight._m0[_2261].y + _830;
    float _2525 = cbLight._m0[_2261].z + _831;
    float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
    float _2530 = _2529 * _2523;
    float _2531 = _2529 * _2524;
    float _2532 = _2529 * _2525;
    float _2533 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2261].xyz));
    float _4679 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _4690 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _2537 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2538 = dot(vec3(_749, _750, _751), vec3(_2530, _2531, _2532));
    float _4701 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
    float _2542 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2530, _2531, _2532));
    float _4712 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2546 = _2522 * _2522;
    float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
    float _2558 = exp2(log2(1.0 - (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) * 5.0);
    float _2559 = 0.959999978542327880859375 - _908;
    float _2561 = 0.959999978542327880859375 - _909;
    float _2562 = 0.959999978542327880859375 - _910;
    float _2569 = 1.0 - _2522;
    float _2580 = (0.5 / (((_2537 * ((_2536 * _2569) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2569) + _2522) * _2536))) * _2536;
    float _4723 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2582 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
    uint _2596 = _2261 + 9u;
    float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _752) * 0.949999988079071044921875);
    float _2608 = _2607 * _2607;
    float _2609 = cbLight._m0[_2301].x + _829;
    float _2610 = cbLight._m0[_2301].y + _830;
    float _2611 = cbLight._m0[_2301].z + _831;
    float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
    float _2616 = _2615 * _2609;
    float _2617 = _2615 * _2610;
    float _2618 = _2615 * _2611;
    float _2619 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2301].xyz));
    float _4734 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2622 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2623 = dot(vec3(_749, _750, _751), vec3(_2616, _2617, _2618));
    float _4745 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2626 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _2627 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2616, _2617, _2618));
    float _4756 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2631 = _2608 * _2608;
    float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
    float _2642 = exp2(log2(1.0 - (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) * 5.0);
    float _2649 = 1.0 - _2608;
    float _2659 = (0.5 / (((_2537 * ((_2622 * _2649) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2649) + _2608) * _2622))) * _2622;
    float _4767 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2661 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
    float _2671 = (((((_2642 * _2559) + _911) * cbLight._m0[_2596].x) * _2661) * _2284) + ((((cbLight._m0[_2508].x * _2250) * ((_2558 * _2559) + _911)) * _2582) * _2297);
    float _2672 = (((((_2642 * _2561) + _913) * cbLight._m0[_2596].y) * _2661) * _2284) + ((((cbLight._m0[_2508].y * _2252) * ((_2558 * _2561) + _913)) * _2582) * _2297);
    float _2673 = (((((_2642 * _2562) + _914) * cbLight._m0[_2596].z) * _2661) * _2284) + ((((cbLight._m0[_2508].z * _2254) * ((_2558 * _2562) + _914)) * _2582) * _2297);
    float _2729;
    float _2731;
    float _2733;
    if (_2337)
    {
        _2729 = _2671;
        _2731 = _2672;
        _2733 = _2673;
    }
    else
    {
        uint _2735 = _2261 + 2u;
        uint _2739 = _2261 + 10u;
        float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2735].w)) * _752) * 0.949999988079071044921875);
        float _2754 = _2753 * _2753;
        float _2755 = cbLight._m0[_2735].x + _829;
        float _2756 = cbLight._m0[_2735].y + _830;
        float _2757 = cbLight._m0[_2735].z + _831;
        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
        float _2762 = _2761 * _2755;
        float _2763 = _2761 * _2756;
        float _2764 = _2761 * _2757;
        float _2765 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2735].xyz));
        float _4778 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2769 = dot(vec3(_749, _750, _751), vec3(_2762, _2763, _2764));
        float _4789 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _2773 = dot(vec3(cbLight._m0[_2735].xyz), vec3(_2762, _2763, _2764));
        float _4800 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2777 = _2754 * _2754;
        float _2781 = ((_2772 * _2772) * (_2777 + (-1.0))) + 1.0;
        float _2788 = exp2(log2(1.0 - (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0)))) * 5.0);
        float _2795 = 1.0 - _2754;
        float _2805 = (0.5 / (((_2537 * ((_2768 * _2795) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2795) + _2754) * _2768))) * _2768;
        float _4811 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2777 / ((_2781 * _2781) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2729 = (((((_2788 * _2559) + _911) * cbLight._m0[_2739].x) * _2807) * _2808) + _2671;
        _2731 = (((((_2788 * _2561) + _913) * cbLight._m0[_2739].y) * _2807) * _2808) + _2672;
        _2733 = (((((_2788 * _2562) + _914) * cbLight._m0[_2739].z) * _2807) * _2808) + _2673;
    }
    float _2839;
    float _2841;
    float _2843;
    if (_2446)
    {
        _2839 = _2729;
        _2841 = _2731;
        _2843 = _2733;
    }
    else
    {
        uint _2850 = _2261 + 3u;
        uint _2854 = _2261 + 11u;
        float _2868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2850].w)) * _752) * 0.949999988079071044921875);
        float _2869 = _2868 * _2868;
        float _2870 = cbLight._m0[_2850].x + _829;
        float _2871 = cbLight._m0[_2850].y + _830;
        float _2872 = cbLight._m0[_2850].z + _831;
        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
        float _2877 = _2876 * _2870;
        float _2878 = _2876 * _2871;
        float _2879 = _2876 * _2872;
        float _2880 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2850].xyz));
        float _4827 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2883 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2884 = dot(vec3(_749, _750, _751), vec3(_2877, _2878, _2879));
        float _4838 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2888 = dot(vec3(cbLight._m0[_2850].xyz), vec3(_2877, _2878, _2879));
        float _4849 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2892 = _2869 * _2869;
        float _2896 = ((_2887 * _2887) * (_2892 + (-1.0))) + 1.0;
        float _2903 = exp2(log2(1.0 - (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) * 5.0);
        float _2910 = 1.0 - _2869;
        float _2920 = (0.5 / (((_2537 * ((_2883 * _2910) + _2869)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2910) + _2869) * _2883))) * _2883;
        float _4860 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2922 = (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2892 / ((_2896 * _2896) * 3.141590118408203125));
        float _2923 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2839 = (((((_2903 * _2559) + _911) * cbLight._m0[_2854].x) * _2922) * _2923) + _2729;
        _2841 = (((((_2903 * _2561) + _913) * cbLight._m0[_2854].y) * _2922) * _2923) + _2731;
        _2843 = (((((_2903 * _2562) + _914) * cbLight._m0[_2854].z) * _2922) * _2923) + _2733;
    }
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    if (_2259.y == 0u)
    {
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.x;
        uint _2956 = uint((float(_2944.y) * floor(float(uint(cbSceneParam._m0[85u].y * _850) / _2945))) + floor(float(uint(cbSceneParam._m0[85u].x * _849) / _2945)));
        float _2966 = (log2(_2037 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2967 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        uint _2970 = uint(isnan(14.0) ? _2967 : (isnan(_2967) ? 14.0 : min(_2967, 14.0)));
        uvec4 _2975 = texelFetch(g_lightClusterGridBuffer, int(((_2970 << 2u) + (_2956 << 6u)) >> 2u));
        uint _2976 = _2975.x;
        uint _2977 = _2944.z;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        if (((((1u << ((_2977 >> 4u) & 15u)) + 4294967295u) & _2976) == 0u) || ((_2977 & 240u) == 0u))
        {
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
        }
        else
        {
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            uint _3215 = 0u;
            uint _3224;
            bool _3225;
            for (;;)
            {
                _3224 = texelFetch(g_lightClassification, int((((_2970 << 5u) + (_2956 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                _3225 = _3224 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3225)
                {
                    frontier_phi_71_pred = _3214;
                    frontier_phi_71_pred_1 = _3213;
                    frontier_phi_71_pred_2 = _3212;
                    frontier_phi_71_pred_3 = _3211;
                    frontier_phi_71_pred_4 = _3210;
                    frontier_phi_71_pred_5 = _3209;
                }
                else
                {
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    uint _3360;
                    _3354 = _3209;
                    _3355 = _3210;
                    _3356 = _3211;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3224;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    for (;;)
                    {
                        uint _3364 = uint(findLSB(_3360)) + (_3215 << 5u);
                        uint _3361 = (_3360 + 4294967295u) & _3360;
                        uint _3366 = _3364 * 48u;
                        vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3366)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 3u)).x));
                        uint _3386 = (_3364 * 48u) + 4u;
                        vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3386)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 3u)).x));
                        uint _3405 = (_3364 * 48u) + 8u;
                        vec3 _3416 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x));
                        float _3420 = _3380.x - _2035;
                        float _3421 = _3380.y - _2036;
                        float _3422 = _3380.z - _2037;
                        float _3423 = dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422));
                        float _3426 = inversesqrt(_3423);
                        float _3427 = _3426 * _3420;
                        float _3428 = _3426 * _3421;
                        float _3429 = _3426 * _3422;
                        float _3430 = dot(vec3(_868, _871, _874), vec3(_3427, _3428, _3429));
                        float _3435 = 1.0 - (_3423 * _3380.w);
                        float _4886 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3436 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3437 = sqrt(_3423) * _3399.w;
                        float _3440 = 1.39999997615814208984375 / (_3437 + 1.39999997615814208984375);
                        float _3441 = _3440 * _3440;
                        float _3444 = ((1.0 - _3441) * _3430) + _3441;
                        float _3447 = _3437 * _3437;
                        float _3451 = ((isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))) * _3436) / ((_3447 * 0.699999988079071044921875) + 1.0);
                        float _3455 = (-0.0) - _2035;
                        float _3456 = (-0.0) - _2036;
                        float _3457 = (-0.0) - _2037;
                        float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                        float _3462 = _3461 * _3455;
                        float _3463 = _3461 * _3456;
                        float _3464 = _3461 * _3457;
                        float _3471 = exp2(log2(1.0 / ((_3447 * 3.5) + 5.0)) * 0.25);
                        float _3472 = 1.0 - _943;
                        float _3479 = sqrt(1.0 - ((1.0 - (_3472 * _3472)) * (1.0 - (_3471 * _3471))));
                        float _3480 = _3479 * _3479;
                        float _3481 = _3480 * _3480;
                        float _3482 = _3462 + _3427;
                        float _3483 = _3463 + _3428;
                        float _3484 = _3464 + _3429;
                        float _3488 = inversesqrt(dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484)));
                        float _3492 = dot(vec3(_868, _871, _874), vec3(_3462, _3463, _3464));
                        float _4902 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3495 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                        float _3496 = dot(vec3(_868, _871, _874), vec3(_3488 * _3482, _3488 * _3483, _3488 * _3484));
                        float _4913 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3499 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3503 = ((_3499 * _3499) * (_3481 + (-1.0))) + 1.0;
                        float _3504 = _3440 * _3480;
                        float _3505 = _3504 * _3504;
                        float _3508 = ((1.0 - _3505) * _3430) + _3505;
                        float _4924 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3509 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3510 = 1.0 - _3480;
                        float _3520 = (0.5 / (((_3509 * ((_3495 * _3510) + _3480)) + 9.9999999392252902907785028219223e-09) + (((_3509 * _3510) + _3480) * _3495))) * _3509;
                        float _4935 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3531 = (((_3481 * 3.1415927410125732421875) * (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0)))) / ((_3503 * _3503) * ((_3447 * 2.1991131305694580078125) + 3.141590118408203125))) * _3436;
                        _3284 = (_3451 * _3399.x) + _3357;
                        _3285 = (_3451 * _3399.y) + _3358;
                        _3286 = (_3451 * _3399.z) + _3359;
                        _3281 = (_3531 * _3416.x) + _3354;
                        _3282 = (_3531 * _3416.y) + _3355;
                        _3283 = (_3531 * _3416.z) + _3356;
                        if (_3361 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3354 = _3281;
                            _3355 = _3282;
                            _3356 = _3283;
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3361;
                        }
                    }
                    frontier_phi_71_pred = _3286;
                    frontier_phi_71_pred_1 = _3285;
                    frontier_phi_71_pred_2 = _3284;
                    frontier_phi_71_pred_3 = _3283;
                    frontier_phi_71_pred_4 = _3282;
                    frontier_phi_71_pred_5 = _3281;
                }
                _3067 = frontier_phi_71_pred;
                _3065 = frontier_phi_71_pred_1;
                _3063 = frontier_phi_71_pred_2;
                _3061 = frontier_phi_71_pred_3;
                _3059 = frontier_phi_71_pred_4;
                _3057 = frontier_phi_71_pred_5;
                uint _3216 = _3215 + 1u;
                if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3209 = _3057;
                    _3210 = _3059;
                    _3211 = _3061;
                    _3212 = _3063;
                    _3213 = _3065;
                    _3214 = _3067;
                    _3215 = _3216;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
        }
        uvec4 _3070 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3071 = _3070.z;
        uint _3073 = (_3071 >> 8u) & 15u;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        if (((4294967295u << _3073) & _2976) == 0u)
        {
            _3177 = _3056;
            _3179 = _3058;
            _3181 = _3060;
            _3183 = _3062;
            _3185 = _3064;
            _3187 = _3066;
        }
        else
        {
            float _3202 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
            float _3203 = _3202 * _2035;
            float _3204 = _3202 * _2036;
            float _3205 = _3202 * _2037;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3073 < ((_3071 >> 12u) & 15u))
            {
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3337 = _3056;
                float _3338 = _3058;
                float _3339 = _3060;
                float _3340 = _3062;
                float _3341 = _3064;
                float _3342 = _3066;
                uint _3343 = _3073;
                uint _3352;
                bool _3353;
                for (;;)
                {
                    _3352 = texelFetch(g_lightClassification, int((((_2970 << 5u) + (_2956 << 9u)) + (_3343 << 2u)) >> 2u)).x;
                    _3353 = _3352 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3353)
                    {
                        frontier_phi_82_pred = _3342;
                        frontier_phi_82_pred_1 = _3341;
                        frontier_phi_82_pred_2 = _3340;
                        frontier_phi_82_pred_3 = _3339;
                        frontier_phi_82_pred_4 = _3338;
                        frontier_phi_82_pred_5 = _3337;
                    }
                    else
                    {
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3558 = _3337;
                        float _3559 = _3338;
                        float _3560 = _3339;
                        float _3561 = _3340;
                        float _3562 = _3341;
                        float _3563 = _3342;
                        uint _3564 = _3352;
                        uint _3565;
                        vec4 _3590;
                        float _3591;
                        vec4 _3606;
                        vec3 _3618;
                        vec4 _3633;
                        vec4 _3648;
                        float _3694;
                        bool _3695;
                        for (;;)
                        {
                            uint _3575 = ((_3343 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3564));
                            _3565 = (_3564 + 4294967295u) & _3564;
                            uint _3577 = _3575 * 40u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            _3591 = _3590.w;
                            uint _3593 = (_3575 * 40u) + 4u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3575 * 40u) + 8u;
                            _3618 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x));
                            uint _3620 = (_3575 * 40u) + 16u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3635 = (_3575 * 40u) + 20u;
                            _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            uint _3650 = (_3575 * 40u) + 24u;
                            vec4 _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3669 = (_3575 * 40u) + 28u;
                            vec4 _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            _3694 = fma(_2037, _3682.z, fma(_2036, _3682.y, _3682.x * _2035)) + _3682.w;
                            _3695 = !((fma(_2037, _3663.z, fma(_2036, _3663.y, _3663.x * _2035)) + _3663.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3695)
                            {
                                float _3722 = _3590.x - _2035;
                                float _3723 = _3590.y - _2036;
                                float _3724 = _3590.z - _2037;
                                float _3725 = dot(vec3(_3722, _3723, _3724), vec3(_3722, _3723, _3724));
                                float _3728 = inversesqrt(_3725);
                                float _3729 = _3728 * _3722;
                                float _3730 = _3728 * _3723;
                                float _3731 = _3728 * _3724;
                                float _3735 = 1.0 - (_3725 / (_3591 * _3591));
                                float _4946 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3740 = sqrt(_3725) * _3606.w;
                                float _3742 = 1.39999997615814208984375 / (_3740 + 1.39999997615814208984375);
                                float _3743 = _3742 * _3742;
                                float _3746 = ((1.0 - _3743) * dot(vec3(_3729, _3730, _3731), vec3(_868, _871, _874))) + _3743;
                                float _3749 = _3740 * _3740;
                                float _3753 = (fma(_2037, _3633.z, fma(_2036, _3633.y, _3633.x * _2035)) + _3633.w) / _3694;
                                float _3754 = (fma(_2037, _3648.z, fma(_2036, _3648.y, _3648.x * _2035)) + _3648.w) / _3694;
                                float _3758 = 1.0 - dot(vec2(_3753, _3754), vec2(_3753, _3754));
                                float _4962 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                                float _3760 = _3759 * (((isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0))) * _3736) / ((_3749 * 0.699999988079071044921875) + 1.0));
                                float _3772 = exp2(log2(1.0 / ((_3749 * 3.5) + 5.0)) * 0.25);
                                float _3773 = 1.0 - _943;
                                float _3780 = sqrt(1.0 - ((1.0 - (_3773 * _3773)) * (1.0 - (_3772 * _3772))));
                                float _3781 = _3780 * _3780;
                                float _3782 = _3781 * _3781;
                                float _3783 = _3729 - _3203;
                                float _3784 = _3730 - _3204;
                                float _3785 = _3731 - _3205;
                                float _3789 = inversesqrt(dot(vec3(_3783, _3784, _3785), vec3(_3783, _3784, _3785)));
                                float _3793 = dot(vec3(_868, _871, _874), vec3((-0.0) - _3203, (-0.0) - _3204, (-0.0) - _3205));
                                float _4973 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3796 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3797 = dot(vec3(_868, _871, _874), vec3(_3789 * _3783, _3789 * _3784, _3789 * _3785));
                                float _4984 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3800 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3804 = ((_3800 * _3800) * (_3782 + (-1.0))) + 1.0;
                                float _3805 = _3742 * _3781;
                                float _3806 = _3805 * _3805;
                                float _3812 = ((1.0 - _3806) * dot(vec3(_868, _871, _874), vec3(_3729, _3730, _3731))) + _3806;
                                float _4995 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3813 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3814 = 1.0 - _3781;
                                float _3824 = (0.5 / (((_3813 * ((_3796 * _3814) + _3781)) + 9.9999999392252902907785028219223e-09) + (((_3813 * _3814) + _3781) * _3796))) * _3813;
                                float _5006 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3834 = (_3759 * _3736) * (((_3782 * 3.1415927410125732421875) * (isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0)))) / ((_3804 * _3804) * ((_3749 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3760 * _3606.z;
                                frontier_phi_88_pred_1 = _3760 * _3606.y;
                                frontier_phi_88_pred_2 = _3760 * _3606.x;
                                frontier_phi_88_pred_3 = _3834 * _3618.z;
                                frontier_phi_88_pred_4 = _3834 * _3618.y;
                                frontier_phi_88_pred_5 = _3834 * _3618.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3843 = frontier_phi_88_pred;
                            _3842 = frontier_phi_88_pred_1;
                            _3841 = frontier_phi_88_pred_2;
                            _3840 = frontier_phi_88_pred_3;
                            _3839 = frontier_phi_88_pred_4;
                            _3838 = frontier_phi_88_pred_5;
                            _3548 = _3841 + _3561;
                            _3549 = _3842 + _3562;
                            _3550 = _3843 + _3563;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            if (_3565 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3565;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3550;
                        frontier_phi_82_pred_1 = _3549;
                        frontier_phi_82_pred_2 = _3548;
                        frontier_phi_82_pred_3 = _3547;
                        frontier_phi_82_pred_4 = _3546;
                        frontier_phi_82_pred_5 = _3545;
                    }
                    _3188 = frontier_phi_82_pred;
                    _3186 = frontier_phi_82_pred_1;
                    _3184 = frontier_phi_82_pred_2;
                    _3182 = frontier_phi_82_pred_3;
                    _3180 = frontier_phi_82_pred_4;
                    _3178 = frontier_phi_82_pred_5;
                    uint _3344 = _3343 + 1u;
                    if (_3344 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3337 = _3178;
                        _3338 = _3180;
                        _3339 = _3182;
                        _3340 = _3184;
                        _3341 = _3186;
                        _3342 = _3188;
                        _3343 = _3344;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3184;
                frontier_phi_63_64_ladder_1 = _3188;
                frontier_phi_63_64_ladder_2 = _3186;
                frontier_phi_63_64_ladder_3 = _3182;
                frontier_phi_63_64_ladder_4 = _3180;
                frontier_phi_63_64_ladder_5 = _3178;
            }
            else
            {
                frontier_phi_63_64_ladder = _3062;
                frontier_phi_63_64_ladder_1 = _3066;
                frontier_phi_63_64_ladder_2 = _3064;
                frontier_phi_63_64_ladder_3 = _3060;
                frontier_phi_63_64_ladder_4 = _3058;
                frontier_phi_63_64_ladder_5 = _3056;
            }
            _3177 = frontier_phi_63_64_ladder_5;
            _3179 = frontier_phi_63_64_ladder_4;
            _3181 = frontier_phi_63_64_ladder_3;
            _3183 = frontier_phi_63_64_ladder;
            _3185 = frontier_phi_63_64_ladder_2;
            _3187 = frontier_phi_63_64_ladder_1;
        }
        float _3192 = isnan(1.0) ? _927 : (isnan(_927) ? 1.0 : min(_927, 1.0));
        _2989 = (_3192 * _3183) + _2501;
        _2991 = (_3192 * _3185) + _2503;
        _2993 = (_3192 * _3187) + _2505;
        _2995 = ((_3177 * _911) * _3192) + _2839;
        _2997 = ((_3179 * _913) * _3192) + _2841;
        _2999 = ((_3181 * _914) * _3192) + _2843;
    }
    else
    {
        _2989 = _2501;
        _2991 = _2503;
        _2993 = _2505;
        _2995 = _2839;
        _2997 = _2841;
        _2999 = _2843;
    }
    float _5022 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _5033 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _5044 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _3016 = ((isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * (_2989 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _927))) + ((_2995 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1767)) * cbPerFrame._m0[3u].x);
    float _3017 = ((isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_2991 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _927))) + ((_2997 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1767)) * cbPerFrame._m0[3u].x);
    float _3018 = ((isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0))) * (_2993 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _927))) + ((_2999 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1767)) * cbPerFrame._m0[3u].x);
    uint _3019 = _272 + 6u;
    float _3027 = _849 / cbSceneParam._m0[86u].x;
    float _3028 = _850 / cbSceneParam._m0[86u].y;
    vec4 _3042 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3027, _3028, (log2((isnan(cbSceneParam._m0[77u].w) ? _771 : (isnan(_771) ? cbSceneParam._m0[77u].w : min(_771, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3044 = _3042.x;
    float _3045 = _3042.y;
    float _3046 = _3042.z;
    float _3047 = _3042.w;
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    if (_771 > cbSceneParam._m0[78u].w)
    {
        float _3081 = isnan(_771) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _771 : min(cbSceneParam._m0[80u].w, _771));
        float _3082 = _3081 / _771;
        float _3093 = _3082 * _822;
        float _3094 = _823 * _3082;
        float _3095 = (-0.0) - _3094;
        float _3097 = _3082 * _824;
        float _3099 = (cbSceneParam._m0[77u].w * _3095) / _3081;
        float _3100 = _3099 + cbSceneParam._m0[79u].w;
        float _3101 = cbSceneParam._m0[79u].w - _3094;
        float _3107 = sqrt(((_3093 * _3093) + (_3094 * _3094)) + (_3097 * _3097));
        float _3110 = (1.0 - (cbSceneParam._m0[77u].w / _3081)) * _3107;
        float _3115 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3117 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3294;
        if (abs((_3095 - _3099) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3294 = ((((_3100 > 0.0) ? exp2(_3115 * _3100) : (2.0 - exp2(_3117 * _3100))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3110;
        }
        else
        {
            float _3238 = 1.0 / cbSceneParam._m0[80u].x;
            float _3239 = isnan(_3101) ? _3100 : (isnan(_3100) ? _3101 : max(_3100, _3101));
            float _3240 = isnan(_3101) ? _3100 : (isnan(_3100) ? _3101 : min(_3100, _3101));
            float _3249 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : min(_3239, 0.0));
            float _3250 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : min(_3240, 0.0));
            _3294 = ((abs(_3107 / _3095) * cbSceneParam._m0[80u].y) * ((((_3249 - _3250) * 2.0) - ((exp2(_3115 * (isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0)))) - exp2(_3115 * (isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))))) * _3238)) - ((exp2(_3117 * _3249) - exp2(_3117 * _3250)) * _3238))) + (_3110 * cbSceneParam._m0[80u].z);
        }
        vec4 _3296 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3027, _3028, 1.0), 0.0);
        float _3305 = exp2((_3294 * (-1.44269502162933349609375)) * (1.0 - _3296.w));
        float _3306 = log2(_3305);
        float _3322 = log2(_3047);
        _3119 = (exp2(_3322 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3306 * cbSceneParam._m0[78u].x)) * _3296.x) / cbSceneParam._m0[78u].x)) + _3044;
        _3121 = (exp2(_3322 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3306 * cbSceneParam._m0[78u].y)) * _3296.y) / cbSceneParam._m0[78u].y)) + _3045;
        _3123 = (exp2(_3322 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3306 * cbSceneParam._m0[78u].z)) * _3296.z) / cbSceneParam._m0[78u].z)) + _3046;
        _3125 = _3305 * _3047;
    }
    else
    {
        _3119 = _3044;
        _3121 = _3045;
        _3123 = _3046;
        _3125 = _3047;
    }
    bool _3332;
    vec4 _3135;
    vec4 _3157;
    float _3159;
    float _3163;
    float _3164;
    float _3165;
    float _3166;
    bool _3176;
    for (;;)
    {
        _3135 = cbMatDynParam._m0[0u];
        float _3137 = roundEven(_3135.y);
        bool _3138 = _3137 == 3.0;
        float _3139 = log2(_3125);
        float _3146 = exp2(_3139 * cbSceneParam._m0[78u].x) * _3016;
        float _3147 = exp2(_3139 * cbSceneParam._m0[78u].y) * _3017;
        float _3148 = exp2(_3139 * cbSceneParam._m0[78u].z) * _3018;
        float _3155 = _838 + (-0.5);
        _3157 = cbMtdParam._m0[1u];
        _3159 = _3157.y * _3155;
        float _3162 = (_3137 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3163 = _3162 * (_3138 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3119)));
        _3164 = _3162 * (_3138 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3121)));
        _3165 = _3162 * (_3138 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3123)));
        _3166 = _3155 * 0.999000012874603271484375;
        _3176 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3176)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _3166) < 0.5)
            {
                _3332 = true;
                break;
            }
        }
        uint _3273 = _887 + uint(_3135.w);
        if ((cbInstanceData._m0[_3273].w < 1.0) && ((cbInstanceData._m0[_3273].w + _3166) < 0.5))
        {
            _3332 = true;
            break;
        }
        if ((_3159 + 1.0) < _3157.x)
        {
            _3332 = true;
            break;
        }
        _3332 = false;
        break;
    }
    float _3536;
    if (_3332)
    {
        discard_state = true;
        _3536 = 0.0;
    }
    else
    {
        _3536 = cbInstanceData._m0[_3019].w;
    }
    SV_Target.x = _3163;
    SV_Target.y = _3164;
    SV_Target.z = _3165;
    SV_Target.w = _3536;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3019].w;
    discard_exit();
}


