#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1231;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3556 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _472 = _470.x;
    float _473 = _470.y;
    float _474 = _470.z;
    float _483 = ((_453.z - _474) * _378) + _474;
    float _486 = ((((_453.x - _472) * _378) + _472) * 2.0) + (-1.0);
    float _487 = ((((_453.y - _473) * _378) + _473) * 2.0) + (-1.0);
    float _488 = dot(vec2(_486, _487), vec2(_486, _487));
    float _3567 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _493 = sqrt(1.0 - (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))));
    float _496 = _486 + ((((_426.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _497 = _487 + ((((_426.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _500 = fma(_493, _228, fma(_497, _235, _496 * _221));
    float _503 = fma(_493, _229, fma(_497, _236, _496 * _222));
    float _506 = fma(_493, _230, fma(_497, _237, _496 * _223));
    float _510 = inversesqrt(dot(vec3(_500, _503, _506), vec3(_500, _503, _506)));
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _554 = _552.x;
    float _555 = 1.0 - _554;
    float _561 = (cbMtdParam._m0[19u].x + dot(vec4(_510 * _500, _510 * _503, _510 * _506, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_554 - _555) * cbMtdParam._m0[24u].z) + _555) * cbMtdParam._m0[21u].z);
    float _3578 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _569 = (_562 * ((_406.x * cbMtdParam._m0[18u].x) - _385)) + _385;
    float _570 = (_562 * ((_406.y * cbMtdParam._m0[18u].y) - _386)) + _386;
    float _571 = (_562 * ((_406.z * cbMtdParam._m0[18u].z) - _387)) + _387;
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _599 = _597.x;
    float _617 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _599) * _378) + _599;
    float _621 = ((_583.x - _617) * cbMtdParam._m0[19u].z) + _617;
    float _623 = _621 - (_621 * _562);
    float _628 = (((_426.z - _483) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _483;
    vec4 _641 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _648 = (_641.x * 2.0) + (-1.0);
    float _649 = (_641.y * 2.0) + (-1.0);
    float _650 = dot(vec2(_648, _649), vec2(_648, _649));
    float _3589 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _658 = ((_641.z - _628) * _562) + _628;
    float _668 = ((sqrt(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) - _493) * _562) + _493;
    float _671 = (((_648 - _496) * _562) + _496) + (cbMtdParam._m0[21u].x * _496);
    float _672 = (((_649 - _497) * _562) + _497) + (cbMtdParam._m0[21u].x * _497);
    float _677 = cbMtdParam._m0[22u].x + _526.w;
    float _680 = fma(_668, _228, fma(_672, _235, _671 * _221));
    float _683 = fma(_668, _229, fma(_672, _236, _671 * _222));
    float _686 = fma(_668, _230, fma(_672, _237, _671 * _223));
    float _690 = inversesqrt(dot(vec3(_680, _683, _686), vec3(_680, _683, _686)));
    float _691 = _690 * _680;
    float _692 = _690 * _683;
    float _693 = _690 * _686;
    float _3600 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _694 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3622 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3633 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _3644 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3655 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _699 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _713 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _764 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _754);
    float _765 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _754);
    float _766 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _754);
    float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
    float _771 = _764 * _770;
    float _772 = _765 * _770;
    float _773 = _766 * _770;
    float _779 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _780 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _798 = fma(_693, cbSceneParam._m0[5u].z, fma(_692, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _691));
    float _801 = fma(_693, cbSceneParam._m0[6u].z, fma(_692, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _691));
    float _804 = fma(_693, cbSceneParam._m0[7u].z, fma(_692, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _691));
    uint _818 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _824 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_818].x;
    float _825 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * cbInstanceData._m0[_818].y;
    float _826 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_818].z;
    float _3666 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _830 = 1.0 - _699;
    float _831 = _827 * _830;
    float _832 = _828 * _830;
    float _833 = _829 * _830;
    float _838 = (_827 + (-0.039999999105930328369140625)) * _699;
    float _839 = (_828 + (-0.039999999105930328369140625)) * _699;
    float _840 = (_829 + (-0.039999999105930328369140625)) * _699;
    float _841 = _838 + 0.039999999105930328369140625;
    float _843 = _839 + 0.039999999105930328369140625;
    float _844 = _840 + 0.039999999105930328369140625;
    vec4 _853 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _779, cbSceneParam._m0[86u].y * _780));
    float _857 = ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * TEXCOORD_5.w) * _853.x;
    float _858 = dot(vec3(_691, _692, _693), vec3(_771, _772, _773));
    float _861 = _858 * 2.0;
    float _865 = (_861 * _691) - _771;
    float _866 = (_861 * _692) - _772;
    float _867 = (_861 * _693) - _773;
    float _871 = abs(dot(vec3(_771, _772, _773), vec3(_691, _692, _693)));
    float _3699 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _873 = sqrt(_694);
    float _886 = exp2((_873 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_873 * 3.0));
    float _892 = (1.0 - _886) * ((_873 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _893 = _886 * _873;
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1230;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _955 = fma(_929, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _921));
        float _959 = fma(_929, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _921));
        float _963 = fma(_929, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _921));
        float _988 = _921 + _691;
        float _989 = _925 + _692;
        float _990 = _929 + _693;
        float _1000 = fma(_990, cbModelParam._m0[26u].z, fma(_989, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _988)) - _955;
        float _1001 = fma(_990, cbModelParam._m0[27u].z, fma(_989, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _988)) - _959;
        float _1002 = fma(_990, cbModelParam._m0[28u].z, fma(_989, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _988)) - _963;
        float _1006 = inversesqrt(dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002)));
        float _1019 = ((_1006 * _1000) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_955 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1006 * _1001) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_959 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1006 * _1002) / cbModelParam._m0[34u].z) + ((((((_963 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        float _1058 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1024.x + (-0.5));
        float _1060 = _1058 * (_1024.y + (-0.5));
        float _1061 = _1058 * (_1024.z + (-0.5));
        float _1068 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1031.x + (-0.5));
        float _1070 = _1068 * (_1031.y + (-0.5));
        float _1071 = _1068 * (_1031.z + (-0.5));
        float _1078 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1038.x + (-0.5));
        float _1080 = _1078 * (_1038.y + (-0.5));
        float _1081 = _1078 * (_1038.z + (-0.5));
        float _1088 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1045.x + (-0.5));
        float _1090 = _1088 * (_1045.y + (-0.5));
        float _1091 = _1088 * (_1045.z + (-0.5));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = _1059 * 0.5;
        float _1096 = _1069 * 0.5;
        float _1097 = _1079 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1112 = (dot(vec3(_691, _692, _693), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1122 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3747 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1124 + 1.0))) + _1129) * _1092;
        float _1139 = _1060 * 0.5;
        float _1140 = _1070 * 0.5;
        float _1141 = _1080 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_691, _692, _693), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3780 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1166 + 1.0))) + _1171) * _1093;
        float _1181 = _1061 * 0.5;
        float _1182 = _1071 * 0.5;
        float _1183 = _1081 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_691, _692, _693), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3813 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1208 + 1.0))) + _1213) * _1094;
        _1230 = _1061;
        _1232 = _1060;
        _1233 = _1059;
        _1234 = _1071;
        _1235 = _1070;
        _1236 = _1069;
        _1237 = _1081;
        _1238 = _1080;
        _1239 = _1079;
        _1240 = _1094;
        _1241 = _1093;
        _1242 = _1092;
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
    }
    else
    {
        _1230 = _1231;
        _1232 = _1231;
        _1233 = _1231;
        _1234 = _1231;
        _1235 = _1231;
        _1236 = _1231;
        _1237 = _1231;
        _1238 = _1231;
        _1239 = _1231;
        _1240 = _1231;
        _1241 = _1231;
        _1242 = _1231;
        _1243 = 0.0;
        _1244 = 0.0;
        _1245 = 0.0;
    }
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1270 = fma(_929, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921));
        float _1274 = fma(_929, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921));
        float _1278 = fma(_929, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921));
        float _1301 = _921 + _691;
        float _1302 = _925 + _692;
        float _1303 = _929 + _693;
        float _1313 = fma(_1303, cbModelParam._m0[30u].z, fma(_1302, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1301)) - _1270;
        float _1314 = fma(_1303, cbModelParam._m0[31u].z, fma(_1302, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1301)) - _1274;
        float _1315 = fma(_1303, cbModelParam._m0[32u].z, fma(_1302, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1301)) - _1278;
        float _1319 = inversesqrt(dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315)));
        float _1332 = ((_1319 * _1313) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1270 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1319 * _1314) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1274 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1319 * _1315) / cbModelParam._m0[35u].z) + ((((((_1278 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        float _1369 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1336.x + (-0.5));
        float _1371 = _1369 * (_1336.y + (-0.5));
        float _1372 = _1369 * (_1336.z + (-0.5));
        float _1379 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1343.x + (-0.5));
        float _1381 = _1379 * (_1343.y + (-0.5));
        float _1382 = _1379 * (_1343.z + (-0.5));
        float _1389 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1350.x + (-0.5));
        float _1391 = _1389 * (_1350.y + (-0.5));
        float _1392 = _1389 * (_1350.z + (-0.5));
        float _1399 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1357.x + (-0.5));
        float _1401 = _1399 * (_1357.y + (-0.5));
        float _1402 = _1399 * (_1357.z + (-0.5));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = _1370 * 0.5;
        float _1407 = _1380 * 0.5;
        float _1408 = _1390 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_691, _692, _693), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _3876 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1433 + 1.0))) + _1438) * _1403;
        float _1448 = _1371 * 0.5;
        float _1449 = _1381 * 0.5;
        float _1450 = _1391 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_691, _692, _693), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _3909 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1475 + 1.0))) + _1480) * _1404;
        float _1490 = _1372 * 0.5;
        float _1491 = _1382 * 0.5;
        float _1492 = _1392 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_691, _692, _693), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _3942 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1517 + 1.0))) + _1522) * _1405;
        _1539 = _1372;
        _1540 = _1371;
        _1541 = _1370;
        _1542 = _1382;
        _1543 = _1381;
        _1544 = _1380;
        _1545 = _1392;
        _1546 = _1391;
        _1547 = _1390;
        _1548 = _1405;
        _1549 = _1404;
        _1550 = _1403;
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
    }
    else
    {
        _1539 = _1231;
        _1540 = _1231;
        _1541 = _1231;
        _1542 = _1231;
        _1543 = _1231;
        _1544 = _1231;
        _1545 = _1231;
        _1546 = _1231;
        _1547 = _1231;
        _1548 = _1231;
        _1549 = _1231;
        _1550 = _1231;
        _1551 = 0.0;
        _1552 = 0.0;
        _1553 = 0.0;
    }
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1243)) + _1243;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1244)) + _1244;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1245)) + _1245;
    float _1586 = fma(_1565, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1563 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1565, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1563 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1565, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1563));
    float _1607 = _865 * 0.5;
    float _1608 = _866 * 0.5;
    float _1609 = _867 * 0.5;
    float _1610 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1613 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1616 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1650;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1623 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1230, _1234, _1237, _1240));
        float _1627 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1631 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1233, _1236, _1239, _1242));
        float _1638 = dot(vec4(cbModelParam._m0[39u]), vec4(_1607, _1608, _1609, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1661;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1652 = dot(vec4(cbModelParam._m0[40u]), vec4(_1607, _1608, _1609, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1665 = (_1661 * cbModelParam._m0[1u].x) + (_1650 * (1.0 - cbModelParam._m0[1u].x));
    float _1675 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _694);
    float _1676 = isnan(_1675) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1675 : min(cbModelParam._m0[25u].z, _1675));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1723 = fma(_929, cbModelParam._m0[13u].z, fma(_925, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921)) + cbModelParam._m0[13u].w;
        float _1727 = fma(_929, cbModelParam._m0[14u].z, fma(_925, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921)) + cbModelParam._m0[14u].w;
        float _1731 = fma(_929, cbModelParam._m0[15u].z, fma(_925, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921)) + cbModelParam._m0[15u].w;
        float _1734 = fma(_867, cbModelParam._m0[13u].z, fma(_866, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865));
        float _1737 = fma(_867, cbModelParam._m0[14u].z, fma(_866, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865));
        float _1740 = fma(_867, cbModelParam._m0[15u].z, fma(_866, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865));
        float _1768;
        if (_1734 > 0.0)
        {
            _1768 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1768 = frontier_phi_14_12_ladder;
        }
        float _1970;
        if (_1737 > 0.0)
        {
            _1970 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1970 = frontier_phi_23_19_ladder;
        }
        float _2224;
        if (_1740 > 0.0)
        {
            _2224 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2224 = frontier_phi_35_30_ladder;
        }
        float _2226 = isnan(_1970) ? _1768 : (isnan(_1768) ? _1970 : min(_1768, _1970));
        float _2227 = isnan(_2224) ? _2226 : (isnan(_2226) ? _2224 : min(_2226, _2224));
        float _2231 = (_2227 * _1734) + _1723;
        float _2232 = (_2227 * _1737) + _1727;
        float _2233 = (_2227 * _1740) + _1731;
        float _2234 = _2227 * 9.9999997473787516355514526367188e-05;
        float _2236 = (-1.0) - _2234;
        float _2238 = _2234 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2233 > _2238) || ((_2233 < _2236) || ((_2232 > _2238) || ((_2232 < _2236) || ((_2231 < _2236) || (_2231 > _2238))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2361 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2233, cbModelParam._m0[9u].z, fma(_2232, cbModelParam._m0[9u].y, _2231 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2233, cbModelParam._m0[10u].z, fma(_2232, cbModelParam._m0[10u].y, _2231 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2233, cbModelParam._m0[11u].z, fma(_2232, cbModelParam._m0[11u].y, _2231 * cbModelParam._m0[11u].x))), _1676);
            frontier_phi_13_35_ladder = _2361.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2361.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2361.x * cbModelParam._m0[1u].y;
        }
        _1756 = frontier_phi_13_35_ladder_2;
        _1758 = frontier_phi_13_35_ladder_1;
        _1760 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1744 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_865, _866, _867), _1676);
        _1756 = _1744.x * cbModelParam._m0[1u].y;
        _1758 = _1744.y * cbModelParam._m0[1u].y;
        _1760 = _1744.z * cbModelParam._m0[1u].y;
    }
    float _1764 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _694);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1764 : min(cbModelParam._m0[25u].w, _1764));
    float _1854;
    float _1856;
    float _1858;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1818 = fma(_929, cbModelParam._m0[21u].z, fma(_925, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921)) + cbModelParam._m0[21u].w;
        float _1822 = fma(_929, cbModelParam._m0[22u].z, fma(_925, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921)) + cbModelParam._m0[22u].w;
        float _1826 = fma(_929, cbModelParam._m0[23u].z, fma(_925, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921)) + cbModelParam._m0[23u].w;
        float _1829 = fma(_867, cbModelParam._m0[21u].z, fma(_866, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865));
        float _1832 = fma(_867, cbModelParam._m0[22u].z, fma(_866, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865));
        float _1835 = fma(_867, cbModelParam._m0[23u].z, fma(_866, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865));
        float _1975;
        if (_1829 > 0.0)
        {
            _1975 = abs((1.0 - _1818) / _1829);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1818 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1975 = frontier_phi_25_21_ladder;
        }
        float _2251;
        if (_1832 > 0.0)
        {
            _2251 = abs((1.0 - _1822) / _1832);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1822 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2251 = frontier_phi_37_32_ladder;
        }
        float _2464;
        if (_1835 > 0.0)
        {
            _2464 = abs((1.0 - _1826) / _1835);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1826 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2464 = frontier_phi_46_43_ladder;
        }
        float _2466 = isnan(_2251) ? _1975 : (isnan(_1975) ? _2251 : min(_1975, _2251));
        float _2467 = isnan(_2464) ? _2466 : (isnan(_2466) ? _2464 : min(_2466, _2464));
        float _2471 = (_2467 * _1829) + _1818;
        float _2472 = (_2467 * _1832) + _1822;
        float _2473 = (_2467 * _1835) + _1826;
        float _2474 = _2467 * 9.9999997473787516355514526367188e-05;
        float _2475 = (-1.0) - _2474;
        float _2477 = _2474 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2473 > _2477) || ((_2473 < _2475) || ((_2472 > _2477) || ((_2472 < _2475) || ((_2471 < _2475) || (_2471 > _2477))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2473, cbModelParam._m0[17u].z, fma(_2472, cbModelParam._m0[17u].y, _2471 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2473, cbModelParam._m0[18u].z, fma(_2472, cbModelParam._m0[18u].y, _2471 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2473, cbModelParam._m0[19u].z, fma(_2472, cbModelParam._m0[19u].y, _2471 * cbModelParam._m0[19u].x))), _1765);
            frontier_phi_22_46_ladder = _2672.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2672.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2672.x * cbModelParam._m0[1u].z;
        }
        _1854 = frontier_phi_22_46_ladder_2;
        _1856 = frontier_phi_22_46_ladder_1;
        _1858 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1838 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_865, _866, _867), _1765);
        _1854 = _1838.x * cbModelParam._m0[1u].z;
        _1856 = _1838.y * cbModelParam._m0[1u].z;
        _1858 = _1838.z * cbModelParam._m0[1u].z;
    }
    float _1871 = (((_892 * _841) + _893) * _857) * ((cbModelParam._m0[1u].w * (_1854 - _1756)) + _1756);
    float _1873 = (((_892 * _843) + _893) * _857) * ((cbModelParam._m0[1u].w * (_1856 - _1758)) + _1758);
    float _1875 = (((_892 * _844) + _893) * _857) * ((cbModelParam._m0[1u].w * (_1858 - _1760)) + _1760);
    float _1878 = fma(_1875, cbSceneParam._m0[89u].z, fma(_1873, cbSceneParam._m0[89u].y, _1871 * cbSceneParam._m0[89u].x));
    float _1881 = fma(_1875, cbSceneParam._m0[90u].z, fma(_1873, cbSceneParam._m0[90u].y, _1871 * cbSceneParam._m0[90u].x));
    float _1884 = fma(_1875, cbSceneParam._m0[91u].z, fma(_1873, cbSceneParam._m0[91u].y, _1871 * cbSceneParam._m0[91u].x));
    uvec4 _1894 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1896 = _1894.x * 14u;
    uint _1897 = _1896 + 13u;
    float _1904 = _857 + (-1.0);
    float _1909 = (cbLight._m0[_1897].x * _1904) + 1.0;
    float _1910 = (cbLight._m0[_1897].y * _1904) + 1.0;
    float _1911 = (cbLight._m0[_1897].z * _1904) + 1.0;
    float _1912 = (cbLight._m0[_1897].w * _1904) + 1.0;
    uint _1913 = _1896 + 5u;
    float _1919 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
    uint _1923 = _1896 + 4u;
    float _1929 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
    uint _1933 = _1896 | 1u;
    float _1944 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_691, _692, _693));
    float _1947 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_691, _692, _693));
    float _4078 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _4089 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1952 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.3183098733425140380859375;
    float _1954 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.3183098733425140380859375;
    float _1961 = ((cbLight._m0[_1913].x * _1919) * _1954) + ((cbLight._m0[_1923].x * _1929) * _1952);
    float _1962 = ((_1919 * cbLight._m0[_1913].y) * _1954) + ((_1929 * cbLight._m0[_1923].y) * _1952);
    float _1963 = ((_1919 * cbLight._m0[_1913].z) * _1954) + ((_1929 * cbLight._m0[_1923].z) * _1952);
    uvec4 _1967 = floatBitsToUint(cbLight._m0[_1896 + 12u]);
    bool _1969 = _1967.x == 0u;
    float _1980;
    float _1982;
    float _1984;
    if (_1969)
    {
        _1980 = _1961;
        _1982 = _1962;
        _1984 = _1963;
    }
    else
    {
        uint _1988 = _1896 + 6u;
        float _2004 = (dot(vec3(cbLight._m0[_1896 + 2u].xyz), vec3(_691, _692, _693)) * 0.5) + 0.5;
        float _2005 = _2004 * _2004;
        float _4100 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2006 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2007 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _1980 = (((cbLight._m0[_1988].x * 0.3183098733425140380859375) * _2006) * _2007) + _1961;
        _1982 = (((cbLight._m0[_1988].y * 0.3183098733425140380859375) * _2006) * _2007) + _1962;
        _1984 = (((cbLight._m0[_1988].z * 0.3183098733425140380859375) * _2006) * _2007) + _1963;
    }
    bool _1987 = _1967.y == 0u;
    float _2025;
    float _2027;
    float _2029;
    if (_1987)
    {
        _2025 = _1980;
        _2027 = _1982;
        _2029 = _1984;
    }
    else
    {
        uint _2195 = _1896 + 7u;
        float _2211 = (dot(vec3(cbLight._m0[_1896 + 3u].xyz), vec3(_691, _692, _693)) * 0.5) + 0.5;
        float _2212 = _2211 * _2211;
        float _4116 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2213 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2214 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _2025 = (((cbLight._m0[_2195].x * 0.3183098733425140380859375) * _2213) * _2214) + _1980;
        _2027 = (((cbLight._m0[_2195].y * 0.3183098733425140380859375) * _2213) * _2214) + _1982;
        _2029 = (((cbLight._m0[_2195].z * 0.3183098733425140380859375) * _2213) * _2214) + _1984;
    }
    uint _2032 = _1896 + 8u;
    float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1896].w)) * _694) * 0.949999988079071044921875);
    float _2046 = _2045 * _2045;
    float _2047 = cbLight._m0[_1896].x + _771;
    float _2048 = cbLight._m0[_1896].y + _772;
    float _2049 = cbLight._m0[_1896].z + _773;
    float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
    float _2054 = _2053 * _2047;
    float _2055 = _2053 * _2048;
    float _2056 = _2053 * _2049;
    float _2057 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_1896].xyz));
    float _4132 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _2061 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2062 = dot(vec3(_691, _692, _693), vec3(_2054, _2055, _2056));
    float _4154 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2065 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2066 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_2054, _2055, _2056));
    float _4165 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2070 = _2046 * _2046;
    float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
    float _2082 = exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0);
    float _2083 = 0.959999978542327880859375 - _838;
    float _2085 = 0.959999978542327880859375 - _839;
    float _2086 = 0.959999978542327880859375 - _840;
    float _2093 = 1.0 - _2046;
    float _2104 = (0.5 / (((_2061 * ((_2060 * _2093) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2093) + _2046) * _2060))) * _2060;
    float _4176 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2106 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
    uint _2117 = _1896 + 9u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _694) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1933].x + _771;
    float _2131 = cbLight._m0[_1933].y + _772;
    float _2132 = cbLight._m0[_1933].z + _773;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_1933].xyz));
    float _4187 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2144 = dot(vec3(_691, _692, _693), vec3(_2137, _2138, _2139));
    float _4198 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_2137, _2138, _2139));
    float _4209 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = _2129 * _2129;
    float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
    float _2163 = exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0);
    float _2170 = 1.0 - _2129;
    float _2180 = (0.5 / (((_2061 * ((_2143 * _2170) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2170) + _2129) * _2143))) * _2143;
    float _4220 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2182 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
    float _2192 = (((((_2163 * _2083) + _841) * cbLight._m0[_2117].x) * _2182) * _1919) + (((((_2082 * _2083) + _841) * cbLight._m0[_2032].x) * _2106) * _1929);
    float _2193 = (((((_2163 * _2085) + _843) * cbLight._m0[_2117].y) * _2182) * _1919) + (((((_2082 * _2085) + _843) * cbLight._m0[_2032].y) * _2106) * _1929);
    float _2194 = (((((_2163 * _2086) + _844) * cbLight._m0[_2117].z) * _2182) * _1919) + (((((_2082 * _2086) + _844) * cbLight._m0[_2032].z) * _2106) * _1929);
    float _2256;
    float _2258;
    float _2260;
    if (_1969)
    {
        _2256 = _2192;
        _2258 = _2193;
        _2260 = _2194;
    }
    else
    {
        uint _2262 = _1896 + 2u;
        uint _2266 = _1896 + 10u;
        float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _694) * 0.949999988079071044921875);
        float _2281 = _2280 * _2280;
        float _2282 = cbLight._m0[_2262].x + _771;
        float _2283 = cbLight._m0[_2262].y + _772;
        float _2284 = cbLight._m0[_2262].z + _773;
        float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
        float _2289 = _2288 * _2282;
        float _2290 = _2288 * _2283;
        float _2291 = _2288 * _2284;
        float _2292 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2262].xyz));
        float _4231 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2296 = dot(vec3(_691, _692, _693), vec3(_2289, _2290, _2291));
        float _4242 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2300 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2289, _2290, _2291));
        float _4253 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2304 = _2281 * _2281;
        float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
        float _2315 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
        float _2322 = 1.0 - _2281;
        float _2332 = (0.5 / (((_2061 * ((_2295 * _2322) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2322) + _2281) * _2295))) * _2295;
        float _4264 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2334 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
        float _2335 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2256 = (((((_2315 * _2083) + _841) * cbLight._m0[_2266].x) * _2334) * _2335) + _2192;
        _2258 = (((((_2315 * _2085) + _843) * cbLight._m0[_2266].y) * _2334) * _2335) + _2193;
        _2260 = (((((_2315 * _2086) + _844) * cbLight._m0[_2266].z) * _2334) * _2335) + _2194;
    }
    float _2370;
    float _2372;
    float _2374;
    if (_1987)
    {
        _2370 = _2256;
        _2372 = _2258;
        _2374 = _2260;
    }
    else
    {
        uint _2381 = _1896 + 3u;
        uint _2385 = _1896 + 11u;
        float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2381].w)) * _694) * 0.949999988079071044921875);
        float _2400 = _2399 * _2399;
        float _2401 = cbLight._m0[_2381].x + _771;
        float _2402 = cbLight._m0[_2381].y + _772;
        float _2403 = cbLight._m0[_2381].z + _773;
        float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
        float _2408 = _2407 * _2401;
        float _2409 = _2407 * _2402;
        float _2410 = _2407 * _2403;
        float _2411 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2381].xyz));
        float _4280 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2415 = dot(vec3(_691, _692, _693), vec3(_2408, _2409, _2410));
        float _4291 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2419 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_2408, _2409, _2410));
        float _4302 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2423 = _2400 * _2400;
        float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
        float _2434 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
        float _2441 = 1.0 - _2400;
        float _2451 = (0.5 / (((_2061 * ((_2414 * _2441) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2441) + _2400) * _2414))) * _2414;
        float _4313 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2453 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
        float _2454 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _2370 = (((((_2434 * _2083) + _841) * cbLight._m0[_2385].x) * _2453) * _2454) + _2256;
        _2372 = (((((_2434 * _2085) + _843) * cbLight._m0[_2385].y) * _2453) * _2454) + _2258;
        _2374 = (((((_2434 * _2086) + _844) * cbLight._m0[_2385].z) * _2453) * _2454) + _2260;
    }
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    if (_1894.y == 0u)
    {
        float _2529 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2530 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2529;
        float _2531 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2529;
        float _2532 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2529;
        uvec4 _2544 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2545 = _2544.x;
        uint _2556 = uint((float(_2544.y) * floor(float(uint(cbSceneParam._m0[85u].y * _780) / _2545))) + floor(float(uint(cbSceneParam._m0[85u].x * _779) / _2545)));
        float _2566 = (log2(_2532 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2567 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        uint _2570 = uint(isnan(14.0) ? _2567 : (isnan(_2567) ? 14.0 : min(_2567, 14.0)));
        uvec4 _2575 = texelFetch(g_lightClusterGridBuffer, int(((_2570 << 2u) + (_2556 << 6u)) >> 2u));
        uint _2576 = _2575.x;
        uint _2577 = _2544.z;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        if (((((1u << ((_2577 >> 4u) & 15u)) + 4294967295u) & _2576) == 0u) || ((_2577 & 240u) == 0u))
        {
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
        }
        else
        {
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            uint _2828 = 0u;
            uint _2837;
            bool _2838;
            for (;;)
            {
                _2837 = texelFetch(g_lightClassification, int((((_2570 << 5u) + (_2556 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                _2838 = _2837 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2838)
                {
                    frontier_phi_61_pred = _2822;
                    frontier_phi_61_pred_1 = _2827;
                    frontier_phi_61_pred_2 = _2826;
                    frontier_phi_61_pred_3 = _2825;
                    frontier_phi_61_pred_4 = _2824;
                    frontier_phi_61_pred_5 = _2823;
                }
                else
                {
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    uint _2952;
                    _2946 = _2822;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2825;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2837;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    for (;;)
                    {
                        uint _2956 = uint(findLSB(_2952)) + (_2828 << 5u);
                        uint _2953 = (_2952 + 4294967295u) & _2952;
                        uint _2958 = _2956 * 48u;
                        vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2978 = (_2956 * 48u) + 4u;
                        vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 3u)).x));
                        uint _2997 = (_2956 * 48u) + 8u;
                        vec3 _3008 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x));
                        float _3012 = _2972.x - _2530;
                        float _3013 = _2972.y - _2531;
                        float _3014 = _2972.z - _2532;
                        float _3015 = dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014));
                        float _3018 = inversesqrt(_3015);
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3022 = dot(vec3(_798, _801, _804), vec3(_3019, _3020, _3021));
                        float _3027 = 1.0 - (_3015 * _2972.w);
                        float _4339 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3028 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3029 = sqrt(_3015) * _2991.w;
                        float _3032 = 1.39999997615814208984375 / (_3029 + 1.39999997615814208984375);
                        float _3033 = _3032 * _3032;
                        float _3036 = ((1.0 - _3033) * _3022) + _3033;
                        float _3039 = _3029 * _3029;
                        float _3043 = ((isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))) * _3028) / ((_3039 * 0.699999988079071044921875) + 1.0);
                        float _3047 = (-0.0) - _2530;
                        float _3048 = (-0.0) - _2531;
                        float _3049 = (-0.0) - _2532;
                        float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3064 = exp2(log2(1.0 / ((_3039 * 3.5) + 5.0)) * 0.25);
                        float _3065 = 1.0 - _873;
                        float _3072 = sqrt(1.0 - ((1.0 - (_3065 * _3065)) * (1.0 - (_3064 * _3064))));
                        float _3073 = _3072 * _3072;
                        float _3074 = _3073 * _3073;
                        float _3075 = _3054 + _3019;
                        float _3076 = _3055 + _3020;
                        float _3077 = _3056 + _3021;
                        float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                        float _3085 = dot(vec3(_798, _801, _804), vec3(_3054, _3055, _3056));
                        float _4355 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3088 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3089 = dot(vec3(_798, _801, _804), vec3(_3081 * _3075, _3081 * _3076, _3081 * _3077));
                        float _4366 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3096 = ((_3092 * _3092) * (_3074 + (-1.0))) + 1.0;
                        float _3097 = _3032 * _3073;
                        float _3098 = _3097 * _3097;
                        float _3101 = ((1.0 - _3098) * _3022) + _3098;
                        float _4377 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3103 = 1.0 - _3073;
                        float _3113 = (0.5 / (((_3102 * ((_3088 * _3103) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3102 * _3103) + _3073) * _3088))) * _3102;
                        float _4388 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3124 = (((_3074 * 3.1415927410125732421875) * (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) / ((_3096 * _3096) * ((_3039 * 2.1991131305694580078125) + 3.141590118408203125))) * _3028;
                        _2881 = (_3043 * _2991.x) + _2949;
                        _2882 = (_3043 * _2991.y) + _2950;
                        _2883 = (_3043 * _2991.z) + _2951;
                        _2878 = (_3124 * _3008.x) + _2946;
                        _2879 = (_3124 * _3008.y) + _2947;
                        _2880 = (_3124 * _3008.z) + _2948;
                        if (_2953 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2946 = _2878;
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2881;
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2953;
                        }
                    }
                    frontier_phi_61_pred = _2878;
                    frontier_phi_61_pred_1 = _2883;
                    frontier_phi_61_pred_2 = _2882;
                    frontier_phi_61_pred_3 = _2881;
                    frontier_phi_61_pred_4 = _2880;
                    frontier_phi_61_pred_5 = _2879;
                }
                _2678 = frontier_phi_61_pred;
                _2688 = frontier_phi_61_pred_1;
                _2686 = frontier_phi_61_pred_2;
                _2684 = frontier_phi_61_pred_3;
                _2682 = frontier_phi_61_pred_4;
                _2680 = frontier_phi_61_pred_5;
                uint _2829 = _2828 + 1u;
                if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2822 = _2678;
                    _2823 = _2680;
                    _2824 = _2682;
                    _2825 = _2684;
                    _2826 = _2686;
                    _2827 = _2688;
                    _2828 = _2829;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
        }
        uvec4 _2691 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2692 = _2691.z;
        uint _2694 = (_2692 >> 8u) & 15u;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((4294967295u << _2694) & _2576) == 0u)
        {
            _2790 = _2677;
            _2792 = _2679;
            _2794 = _2681;
            _2796 = _2683;
            _2798 = _2685;
            _2800 = _2687;
        }
        else
        {
            float _2815 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
            float _2816 = _2815 * _2530;
            float _2817 = _2815 * _2531;
            float _2818 = _2815 * _2532;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2694 < ((_2692 >> 12u) & 15u))
            {
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2929 = _2677;
                float _2930 = _2679;
                float _2931 = _2681;
                float _2932 = _2683;
                float _2933 = _2685;
                float _2934 = _2687;
                uint _2935 = _2694;
                uint _2944;
                bool _2945;
                for (;;)
                {
                    _2944 = texelFetch(g_lightClassification, int((((_2570 << 5u) + (_2556 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                    _2945 = _2944 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2945)
                    {
                        frontier_phi_67_pred = _2932;
                        frontier_phi_67_pred_1 = _2933;
                        frontier_phi_67_pred_2 = _2934;
                        frontier_phi_67_pred_3 = _2931;
                        frontier_phi_67_pred_4 = _2930;
                        frontier_phi_67_pred_5 = _2929;
                    }
                    else
                    {
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3142 = _2929;
                        float _3143 = _2930;
                        float _3144 = _2931;
                        float _3145 = _2932;
                        float _3146 = _2933;
                        float _3147 = _2934;
                        uint _3148 = _2944;
                        uint _3149;
                        vec4 _3174;
                        float _3175;
                        vec4 _3190;
                        vec3 _3202;
                        vec4 _3217;
                        vec4 _3232;
                        float _3278;
                        bool _3279;
                        for (;;)
                        {
                            uint _3159 = ((_2935 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3148));
                            _3149 = (_3148 + 4294967295u) & _3148;
                            uint _3161 = _3159 * 40u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            _3175 = _3174.w;
                            uint _3177 = (_3159 * 40u) + 4u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3192 = (_3159 * 40u) + 8u;
                            _3202 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x));
                            uint _3204 = (_3159 * 40u) + 16u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3219 = (_3159 * 40u) + 20u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3159 * 40u) + 24u;
                            vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3253 = (_3159 * 40u) + 28u;
                            vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            _3278 = fma(_2532, _3266.z, fma(_2531, _3266.y, _3266.x * _2530)) + _3266.w;
                            _3279 = !((fma(_2532, _3247.z, fma(_2531, _3247.y, _3247.x * _2530)) + _3247.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3279)
                            {
                                float _3306 = _3174.x - _2530;
                                float _3307 = _3174.y - _2531;
                                float _3308 = _3174.z - _2532;
                                float _3309 = dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308));
                                float _3312 = inversesqrt(_3309);
                                float _3313 = _3312 * _3306;
                                float _3314 = _3312 * _3307;
                                float _3315 = _3312 * _3308;
                                float _3319 = 1.0 - (_3309 / (_3175 * _3175));
                                float _4399 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3324 = sqrt(_3309) * _3190.w;
                                float _3326 = 1.39999997615814208984375 / (_3324 + 1.39999997615814208984375);
                                float _3327 = _3326 * _3326;
                                float _3330 = ((1.0 - _3327) * dot(vec3(_3313, _3314, _3315), vec3(_798, _801, _804))) + _3327;
                                float _3333 = _3324 * _3324;
                                float _3337 = (fma(_2532, _3217.z, fma(_2531, _3217.y, _3217.x * _2530)) + _3217.w) / _3278;
                                float _3338 = (fma(_2532, _3232.z, fma(_2531, _3232.y, _3232.x * _2530)) + _3232.w) / _3278;
                                float _3342 = 1.0 - dot(vec2(_3337, _3338), vec2(_3337, _3338));
                                float _4415 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3344 = _3343 * (((isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0))) * _3320) / ((_3333 * 0.699999988079071044921875) + 1.0));
                                float _3356 = exp2(log2(1.0 / ((_3333 * 3.5) + 5.0)) * 0.25);
                                float _3357 = 1.0 - _873;
                                float _3364 = sqrt(1.0 - ((1.0 - (_3357 * _3357)) * (1.0 - (_3356 * _3356))));
                                float _3365 = _3364 * _3364;
                                float _3366 = _3365 * _3365;
                                float _3367 = _3313 - _2816;
                                float _3368 = _3314 - _2817;
                                float _3369 = _3315 - _2818;
                                float _3373 = inversesqrt(dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369)));
                                float _3377 = dot(vec3(_798, _801, _804), vec3((-0.0) - _2816, (-0.0) - _2817, (-0.0) - _2818));
                                float _4426 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3380 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3381 = dot(vec3(_798, _801, _804), vec3(_3373 * _3367, _3373 * _3368, _3373 * _3369));
                                float _4437 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3384 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3388 = ((_3384 * _3384) * (_3366 + (-1.0))) + 1.0;
                                float _3389 = _3326 * _3365;
                                float _3390 = _3389 * _3389;
                                float _3396 = ((1.0 - _3390) * dot(vec3(_798, _801, _804), vec3(_3313, _3314, _3315))) + _3390;
                                float _4448 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3398 = 1.0 - _3365;
                                float _3408 = (0.5 / (((_3397 * ((_3380 * _3398) + _3365)) + 9.9999999392252902907785028219223e-09) + (((_3397 * _3398) + _3365) * _3380))) * _3397;
                                float _4459 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3418 = (_3343 * _3320) * (((_3366 * 3.1415927410125732421875) * (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) / ((_3388 * _3388) * ((_3333 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3418 * _3202.x;
                                frontier_phi_73_pred_1 = _3418 * _3202.y;
                                frontier_phi_73_pred_2 = _3344 * _3190.z;
                                frontier_phi_73_pred_3 = _3344 * _3190.y;
                                frontier_phi_73_pred_4 = _3344 * _3190.x;
                                frontier_phi_73_pred_5 = _3418 * _3202.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3422 = frontier_phi_73_pred;
                            _3423 = frontier_phi_73_pred_1;
                            _3427 = frontier_phi_73_pred_2;
                            _3426 = frontier_phi_73_pred_3;
                            _3425 = frontier_phi_73_pred_4;
                            _3424 = frontier_phi_73_pred_5;
                            _3132 = _3425 + _3145;
                            _3133 = _3426 + _3146;
                            _3134 = _3427 + _3147;
                            _3129 = _3422 + _3142;
                            _3130 = _3423 + _3143;
                            _3131 = _3424 + _3144;
                            if (_3149 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3149;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3132;
                        frontier_phi_67_pred_1 = _3133;
                        frontier_phi_67_pred_2 = _3134;
                        frontier_phi_67_pred_3 = _3131;
                        frontier_phi_67_pred_4 = _3130;
                        frontier_phi_67_pred_5 = _3129;
                    }
                    _2797 = frontier_phi_67_pred;
                    _2799 = frontier_phi_67_pred_1;
                    _2801 = frontier_phi_67_pred_2;
                    _2795 = frontier_phi_67_pred_3;
                    _2793 = frontier_phi_67_pred_4;
                    _2791 = frontier_phi_67_pred_5;
                    uint _2936 = _2935 + 1u;
                    if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2929 = _2791;
                        _2930 = _2793;
                        _2931 = _2795;
                        _2932 = _2797;
                        _2933 = _2799;
                        _2934 = _2801;
                        _2935 = _2936;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2799;
                frontier_phi_55_56_ladder_1 = _2801;
                frontier_phi_55_56_ladder_2 = _2797;
                frontier_phi_55_56_ladder_3 = _2795;
                frontier_phi_55_56_ladder_4 = _2793;
                frontier_phi_55_56_ladder_5 = _2791;
            }
            else
            {
                frontier_phi_55_56_ladder = _2685;
                frontier_phi_55_56_ladder_1 = _2687;
                frontier_phi_55_56_ladder_2 = _2683;
                frontier_phi_55_56_ladder_3 = _2681;
                frontier_phi_55_56_ladder_4 = _2679;
                frontier_phi_55_56_ladder_5 = _2677;
            }
            _2790 = frontier_phi_55_56_ladder_5;
            _2792 = frontier_phi_55_56_ladder_4;
            _2794 = frontier_phi_55_56_ladder_3;
            _2796 = frontier_phi_55_56_ladder_2;
            _2798 = frontier_phi_55_56_ladder;
            _2800 = frontier_phi_55_56_ladder_1;
        }
        float _2805 = isnan(1.0) ? _857 : (isnan(_857) ? 1.0 : min(_857, 1.0));
        _2589 = (_2805 * _2796) + _2025;
        _2591 = (_2805 * _2798) + _2027;
        _2593 = (_2805 * _2800) + _2029;
        _2595 = ((_2790 * _841) * _2805) + _2370;
        _2597 = ((_2792 * _843) * _2805) + _2372;
        _2599 = ((_2794 * _844) * _2805) + _2374;
    }
    else
    {
        _2589 = _2025;
        _2591 = _2027;
        _2593 = _2029;
        _2595 = _2370;
        _2597 = _2372;
        _2599 = _2374;
    }
    float _4475 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4486 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4497 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    uint _2619 = _240 + 6u;
    float _2627 = _779 / cbSceneParam._m0[86u].x;
    float _2628 = _780 / cbSceneParam._m0[86u].y;
    vec4 _2642 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2627, _2628, (log2((isnan(cbSceneParam._m0[77u].w) ? _713 : (isnan(_713) ? cbSceneParam._m0[77u].w : min(_713, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2644 = _2642.x;
    float _2645 = _2642.y;
    float _2646 = _2642.z;
    float _2647 = _2642.w;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    if (_713 > cbSceneParam._m0[78u].w)
    {
        float _2702 = isnan(_713) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _713 : min(cbSceneParam._m0[80u].w, _713));
        float _2703 = _2702 / _713;
        float _2714 = _2703 * _764;
        float _2715 = _765 * _2703;
        float _2716 = (-0.0) - _2715;
        float _2718 = _2703 * _766;
        float _2720 = (cbSceneParam._m0[77u].w * _2716) / _2702;
        float _2721 = _2720 + cbSceneParam._m0[79u].w;
        float _2722 = cbSceneParam._m0[79u].w - _2715;
        float _2728 = sqrt(((_2714 * _2714) + (_2715 * _2715)) + (_2718 * _2718));
        float _2731 = (1.0 - (cbSceneParam._m0[77u].w / _2702)) * _2728;
        float _2736 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2738 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2891;
        if (abs((_2716 - _2720) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2891 = ((((_2721 > 0.0) ? exp2(_2736 * _2721) : (2.0 - exp2(_2738 * _2721))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2731;
        }
        else
        {
            float _2851 = 1.0 / cbSceneParam._m0[80u].x;
            float _2852 = isnan(_2722) ? _2721 : (isnan(_2721) ? _2722 : max(_2721, _2722));
            float _2853 = isnan(_2722) ? _2721 : (isnan(_2721) ? _2722 : min(_2721, _2722));
            float _2862 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : min(_2852, 0.0));
            float _2863 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : min(_2853, 0.0));
            _2891 = ((abs(_2728 / _2716) * cbSceneParam._m0[80u].y) * ((((_2862 - _2863) * 2.0) - ((exp2(_2736 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0)))) - exp2(_2736 * (isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))))) * _2851)) - ((exp2(_2738 * _2862) - exp2(_2738 * _2863)) * _2851))) + (_2731 * cbSceneParam._m0[80u].z);
        }
        vec4 _2893 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2627, _2628, 1.0), 0.0);
        float _2902 = exp2((_2891 * (-1.44269502162933349609375)) * (1.0 - _2893.w));
        float _2903 = log2(_2902);
        float _2919 = log2(_2647);
        _2740 = (exp2(_2919 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2903 * cbSceneParam._m0[78u].x)) * _2893.x) / cbSceneParam._m0[78u].x)) + _2644;
        _2742 = (exp2(_2919 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2903 * cbSceneParam._m0[78u].y)) * _2893.y) / cbSceneParam._m0[78u].y)) + _2645;
        _2744 = (exp2(_2919 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2903 * cbSceneParam._m0[78u].z)) * _2893.z) / cbSceneParam._m0[78u].z)) + _2646;
        _2746 = _2902 * _2647;
    }
    else
    {
        _2740 = _2644;
        _2742 = _2645;
        _2744 = _2646;
        _2746 = _2647;
    }
    float _2758 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2759 = _2758 == 3.0;
    float _2760 = log2(_2746);
    float _2767 = exp2(_2760 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2589 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _857))) + ((_2595 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1665)) * cbPerFrame._m0[3u].x));
    float _2768 = exp2(_2760 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2591 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _857))) + ((_2597 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1665)) * cbPerFrame._m0[3u].x));
    float _2769 = exp2(_2760 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2593 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _857))) + ((_2599 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1665)) * cbPerFrame._m0[3u].x));
    float _2778 = (_2758 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2778 * (_2759 ? _2767 : (_2767 + (cbSceneParam._m0[72u].w * _2740)));
    SV_Target.y = _2778 * (_2759 ? _2768 : (_2768 + (cbSceneParam._m0[72u].w * _2742)));
    SV_Target.z = _2778 * (_2759 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2744)));
    SV_Target.w = cbInstanceData._m0[_2619].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2619].w;
}


