#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _917;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    vec4 _264 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2(((_243 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_243 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = _311.z;
    float _319 = (_311.x * 2.0) + (-1.0);
    float _320 = (_311.y * 2.0) + (-1.0);
    float _321 = dot(vec2(_319, _320), vec2(_319, _320));
    float _3533 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _327 = sqrt(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))));
    float _332 = _319 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_285.x * 2.0) + (-1.0)));
    float _333 = _320 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_285.y * 2.0) + (-1.0)));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _348 = _346.x;
    float _353 = (((_285.z - _315) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _315;
    float _358 = cbMtdParam._m0[22u].x + _311.w;
    float _361 = fma(_327, _211 * NORMAL.x, fma(_333, _218 * TANGENT.x, (_204 * _196) * _332));
    float _364 = fma(_327, _211 * NORMAL.y, fma(_333, _218 * TANGENT.y, (_204 * _197) * _332));
    float _367 = fma(_327, _211 * NORMAL.z, fma(_333, _218 * TANGENT.z, (_204 * _198) * _332));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    float _372 = _371 * _361;
    float _373 = _371 * _364;
    float _374 = _371 * _367;
    float _3544 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _375 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3566 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3577 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3588 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3599 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _380 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _394 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _436 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _446 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _436);
    float _447 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _436);
    float _448 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _436);
    float _452 = inversesqrt(dot(vec3(_446, _447, _448), vec3(_446, _447, _448)));
    float _453 = _446 * _452;
    float _454 = _447 * _452;
    float _455 = _448 * _452;
    float _461 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _462 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _483 = fma(_374, cbSceneParam._m0[5u].z, fma(_373, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _372));
    float _486 = fma(_374, cbSceneParam._m0[6u].z, fma(_373, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _372));
    float _489 = fma(_374, cbSceneParam._m0[7u].z, fma(_373, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _372));
    uint _503 = (_224 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _509 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_503].x;
    float _510 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_503].y;
    float _511 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_503].z;
    float _3610 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _512 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _513 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _514 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _515 = 1.0 - _380;
    float _516 = _512 * _515;
    float _517 = _513 * _515;
    float _518 = _514 * _515;
    float _523 = (_512 + (-0.039999999105930328369140625)) * _380;
    float _524 = (_513 + (-0.039999999105930328369140625)) * _380;
    float _525 = (_514 + (-0.039999999105930328369140625)) * _380;
    float _526 = _523 + 0.039999999105930328369140625;
    float _528 = _524 + 0.039999999105930328369140625;
    float _529 = _525 + 0.039999999105930328369140625;
    vec4 _538 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _461, cbSceneParam._m0[86u].y * _462));
    float _542 = ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * TEXCOORD_5.w) * _538.x;
    float _543 = dot(vec3(_372, _373, _374), vec3(_453, _454, _455));
    float _546 = _543 * 2.0;
    float _550 = (_546 * _372) - _453;
    float _551 = (_546 * _373) - _454;
    float _552 = (_546 * _374) - _455;
    float _556 = abs(dot(vec3(_453, _454, _455), vec3(_372, _373, _374)));
    float _3643 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _558 = sqrt(_375);
    float _571 = exp2((_558 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_558 * 3.0));
    float _577 = (1.0 - _571) * ((_558 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _578 = _571 * _558;
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _916;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _641 = fma(_614, cbModelParam._m0[26u].z, fma(_610, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _606));
        float _645 = fma(_614, cbModelParam._m0[27u].z, fma(_610, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _606));
        float _649 = fma(_614, cbModelParam._m0[28u].z, fma(_610, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _606));
        float _674 = _606 + _372;
        float _675 = _610 + _373;
        float _676 = _614 + _374;
        float _686 = fma(_676, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _674)) - _641;
        float _687 = fma(_676, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _674)) - _645;
        float _688 = fma(_676, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _674)) - _649;
        float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
        float _705 = ((_692 * _686) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_641 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _706 = ((_692 * _687) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_645 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _707 = ((_692 * _688) / cbModelParam._m0[34u].z) + ((((((_649 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        float _744 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_710.x + (-0.5));
        float _746 = _744 * (_710.y + (-0.5));
        float _747 = _744 * (_710.z + (-0.5));
        float _754 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_717.x + (-0.5));
        float _756 = _754 * (_717.y + (-0.5));
        float _757 = _754 * (_717.z + (-0.5));
        float _764 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_724.x + (-0.5));
        float _766 = _764 * (_724.y + (-0.5));
        float _767 = _764 * (_724.z + (-0.5));
        float _774 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_731.x + (-0.5));
        float _776 = _774 * (_731.y + (-0.5));
        float _777 = _774 * (_731.z + (-0.5));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = _745 * 0.5;
        float _782 = _755 * 0.5;
        float _783 = _765 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _798 = (dot(vec3(_372, _373, _374), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _808 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3691 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_810 + 1.0))) + _815) * _778;
        float _825 = _746 * 0.5;
        float _826 = _756 * 0.5;
        float _827 = _766 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _841 = (dot(vec3(_372, _373, _374), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _850 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3724 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_852 + 1.0))) + _857) * _779;
        float _867 = _747 * 0.5;
        float _868 = _757 * 0.5;
        float _869 = _767 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _883 = (dot(vec3(_372, _373, _374), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _892 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3757 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_894 + 1.0))) + _899) * _780;
        _916 = _747;
        _918 = _746;
        _919 = _745;
        _920 = _757;
        _921 = _756;
        _922 = _755;
        _923 = _767;
        _924 = _766;
        _925 = _765;
        _926 = _780;
        _927 = _779;
        _928 = _778;
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
    }
    else
    {
        _916 = _917;
        _918 = _917;
        _919 = _917;
        _920 = _917;
        _921 = _917;
        _922 = _917;
        _923 = _917;
        _924 = _917;
        _925 = _917;
        _926 = _917;
        _927 = _917;
        _928 = _917;
        _929 = 0.0;
        _930 = 0.0;
        _931 = 0.0;
    }
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _956 = fma(_614, cbModelParam._m0[30u].z, fma(_610, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _606));
        float _960 = fma(_614, cbModelParam._m0[31u].z, fma(_610, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _606));
        float _964 = fma(_614, cbModelParam._m0[32u].z, fma(_610, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _606));
        float _987 = _606 + _372;
        float _988 = _610 + _373;
        float _989 = _614 + _374;
        float _999 = fma(_989, cbModelParam._m0[30u].z, fma(_988, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _987)) - _956;
        float _1000 = fma(_989, cbModelParam._m0[31u].z, fma(_988, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _987)) - _960;
        float _1001 = fma(_989, cbModelParam._m0[32u].z, fma(_988, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _987)) - _964;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_956 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_960 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[35u].z) + ((((((_964 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1055 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1022.x + (-0.5));
        float _1057 = _1055 * (_1022.y + (-0.5));
        float _1058 = _1055 * (_1022.z + (-0.5));
        float _1065 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1029.x + (-0.5));
        float _1067 = _1065 * (_1029.y + (-0.5));
        float _1068 = _1065 * (_1029.z + (-0.5));
        float _1075 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1036.x + (-0.5));
        float _1077 = _1075 * (_1036.y + (-0.5));
        float _1078 = _1075 * (_1036.z + (-0.5));
        float _1085 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1043.x + (-0.5));
        float _1087 = _1085 * (_1043.y + (-0.5));
        float _1088 = _1085 * (_1043.z + (-0.5));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = _1056 * 0.5;
        float _1093 = _1066 * 0.5;
        float _1094 = _1076 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_372, _373, _374), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3820 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1119 + 1.0))) + _1124) * _1089;
        float _1134 = _1057 * 0.5;
        float _1135 = _1067 * 0.5;
        float _1136 = _1077 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_372, _373, _374), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3853 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1161 + 1.0))) + _1166) * _1090;
        float _1176 = _1058 * 0.5;
        float _1177 = _1068 * 0.5;
        float _1178 = _1078 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_372, _373, _374), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3886 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1203 + 1.0))) + _1208) * _1091;
        _1225 = _1058;
        _1226 = _1057;
        _1227 = _1056;
        _1228 = _1068;
        _1229 = _1067;
        _1230 = _1066;
        _1231 = _1078;
        _1232 = _1077;
        _1233 = _1076;
        _1234 = _1091;
        _1235 = _1090;
        _1236 = _1089;
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1239 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
    }
    else
    {
        _1225 = _917;
        _1226 = _917;
        _1227 = _917;
        _1228 = _917;
        _1229 = _917;
        _1230 = _917;
        _1231 = _917;
        _1232 = _917;
        _1233 = _917;
        _1234 = _917;
        _1235 = _917;
        _1236 = _917;
        _1237 = 0.0;
        _1238 = 0.0;
        _1239 = 0.0;
    }
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _929)) + _929;
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _930)) + _930;
    float _1251 = (cbModelParam._m0[1u].x * (_1239 - _931)) + _931;
    float _1272 = fma(_1251, cbSceneParam._m0[89u].z, fma(_1250, cbSceneParam._m0[89u].y, _1249 * cbSceneParam._m0[89u].x));
    float _1275 = fma(_1251, cbSceneParam._m0[90u].z, fma(_1250, cbSceneParam._m0[90u].y, _1249 * cbSceneParam._m0[90u].x));
    float _1278 = fma(_1251, cbSceneParam._m0[91u].z, fma(_1250, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1249));
    float _1293 = _550 * 0.5;
    float _1294 = _551 * 0.5;
    float _1295 = _552 * 0.5;
    float _1296 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_1227, _1230, _1233, _1236));
    float _1299 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1302 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1336;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1309 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_916, _920, _923, _926));
        float _1313 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_918, _921, _924, _927));
        float _1317 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_919, _922, _925, _928));
        float _1324 = dot(vec4(cbModelParam._m0[39u]), vec4(_1293, _1294, _1295, 1.0));
        _1336 = dot(vec3(isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1324) ? 0.0 : (isnan(0.0) ? _1324 : max(0.0, _1324))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1336 = 1.0;
    }
    float _1347;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1338 = dot(vec4(cbModelParam._m0[40u]), vec4(_1293, _1294, _1295, 1.0));
        _1347 = dot(vec3(isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1338) ? 0.0 : (isnan(0.0) ? _1338 : max(0.0, _1338))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1347 = 1.0;
    }
    float _1351 = (_1347 * cbModelParam._m0[1u].x) + (_1336 * (1.0 - cbModelParam._m0[1u].x));
    float _1361 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _375);
    float _1362 = isnan(_1361) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1361 : min(cbModelParam._m0[25u].z, _1361));
    float _1444;
    float _1446;
    float _1448;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1411 = fma(_614, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _606)) + cbModelParam._m0[13u].w;
        float _1415 = fma(_614, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _606)) + cbModelParam._m0[14u].w;
        float _1419 = fma(_614, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _606)) + cbModelParam._m0[15u].w;
        float _1422 = fma(_552, cbModelParam._m0[13u].z, fma(_551, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _550));
        float _1425 = fma(_552, cbModelParam._m0[14u].z, fma(_551, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _550));
        float _1428 = fma(_552, cbModelParam._m0[15u].z, fma(_551, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _550));
        float _1456;
        if (_1422 > 0.0)
        {
            _1456 = abs((1.0 - _1411) / _1422);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1411 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1456 = frontier_phi_14_12_ladder;
        }
        float _1630;
        if (_1425 > 0.0)
        {
            _1630 = abs((1.0 - _1415) / _1425);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1415 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1630 = frontier_phi_23_19_ladder;
        }
        float _1926;
        if (_1428 > 0.0)
        {
            _1926 = abs((1.0 - _1419) / _1428);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1419 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1926 = frontier_phi_35_30_ladder;
        }
        float _1928 = isnan(_1630) ? _1456 : (isnan(_1456) ? _1630 : min(_1456, _1630));
        float _1929 = isnan(_1926) ? _1928 : (isnan(_1928) ? _1926 : min(_1928, _1926));
        float _1933 = (_1929 * _1422) + _1411;
        float _1934 = (_1929 * _1425) + _1415;
        float _1935 = (_1929 * _1428) + _1419;
        float _1936 = _1929 * 9.9999997473787516355514526367188e-05;
        float _1938 = (-1.0) - _1936;
        float _1940 = _1936 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1935 > _1940) || ((_1935 < _1938) || ((_1934 > _1940) || ((_1934 < _1938) || ((_1933 < _1938) || (_1933 > _1940))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2080 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1935, cbModelParam._m0[9u].z, fma(_1934, cbModelParam._m0[9u].y, _1933 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1935, cbModelParam._m0[10u].z, fma(_1934, cbModelParam._m0[10u].y, _1933 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1935, cbModelParam._m0[11u].z, fma(_1934, cbModelParam._m0[11u].y, _1933 * cbModelParam._m0[11u].x))), _1362);
            frontier_phi_13_35_ladder = _2080.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2080.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2080.x * cbModelParam._m0[1u].y;
        }
        _1444 = frontier_phi_13_35_ladder_2;
        _1446 = frontier_phi_13_35_ladder_1;
        _1448 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_550, _551, _552), _1362);
        _1444 = _1432.x * cbModelParam._m0[1u].y;
        _1446 = _1432.y * cbModelParam._m0[1u].y;
        _1448 = _1432.z * cbModelParam._m0[1u].y;
    }
    float _1452 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _375);
    float _1453 = isnan(_1452) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1452 : min(cbModelParam._m0[25u].w, _1452));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1509 = fma(_614, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _606)) + cbModelParam._m0[21u].w;
        float _1513 = fma(_614, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _606)) + cbModelParam._m0[22u].w;
        float _1517 = fma(_614, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _606)) + cbModelParam._m0[23u].w;
        float _1520 = fma(_552, cbModelParam._m0[21u].z, fma(_551, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _550));
        float _1523 = fma(_552, cbModelParam._m0[22u].z, fma(_551, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _550));
        float _1526 = fma(_552, cbModelParam._m0[23u].z, fma(_551, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _550));
        float _1635;
        if (_1520 > 0.0)
        {
            _1635 = abs((1.0 - _1509) / _1520);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1509 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1635 = frontier_phi_25_21_ladder;
        }
        float _1953;
        if (_1523 > 0.0)
        {
            _1953 = abs((1.0 - _1513) / _1523);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1513 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1953 = frontier_phi_37_32_ladder;
        }
        float _2291;
        if (_1526 > 0.0)
        {
            _2291 = abs((1.0 - _1517) / _1526);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1517 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2291 = frontier_phi_47_44_ladder;
        }
        float _2293 = isnan(_1953) ? _1635 : (isnan(_1635) ? _1953 : min(_1635, _1953));
        float _2294 = isnan(_2291) ? _2293 : (isnan(_2293) ? _2291 : min(_2293, _2291));
        float _2298 = (_2294 * _1520) + _1509;
        float _2299 = (_2294 * _1523) + _1513;
        float _2300 = (_2294 * _1526) + _1517;
        float _2301 = _2294 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2301;
        float _2304 = _2301 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2300 > _2304) || ((_2300 < _2302) || ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 < _2302) || (_2298 > _2304))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2300, cbModelParam._m0[17u].z, fma(_2299, cbModelParam._m0[17u].y, _2298 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2300, cbModelParam._m0[18u].z, fma(_2299, cbModelParam._m0[18u].y, _2298 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2300, cbModelParam._m0[19u].z, fma(_2299, cbModelParam._m0[19u].y, _2298 * cbModelParam._m0[19u].x))), _1453);
            frontier_phi_22_47_ladder = _2422.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2422.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2422.x * cbModelParam._m0[1u].z;
        }
        _1545 = frontier_phi_22_47_ladder_2;
        _1547 = frontier_phi_22_47_ladder_1;
        _1549 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_550, _551, _552), _1453);
        _1545 = _1529.x * cbModelParam._m0[1u].z;
        _1547 = _1529.y * cbModelParam._m0[1u].z;
        _1549 = _1529.z * cbModelParam._m0[1u].z;
    }
    float _1562 = (((_577 * _526) + _578) * _542) * ((cbModelParam._m0[1u].w * (_1545 - _1444)) + _1444);
    float _1564 = (((_577 * _528) + _578) * _542) * ((cbModelParam._m0[1u].w * (_1547 - _1446)) + _1446);
    float _1566 = (((_577 * _529) + _578) * _542) * ((cbModelParam._m0[1u].w * (_1549 - _1448)) + _1448);
    float _1569 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, _1562 * cbSceneParam._m0[91u].x));
    float _1609 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1617 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1621 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1622 = _1609 / _1621;
    float _1623 = _1613 / _1621;
    float _1624 = _1617 / _1621;
    float _1771;
    float _1772;
    float _1773;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1651 = ((uint(_1624 > cbSceneParam._m0[59u].y) + uint(_1624 > cbSceneParam._m0[59u].x)) + uint(_1624 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1652 = _1651 + 43u;
        uint _1660 = _1651 + 44u;
        uint _1668 = _1651 + 45u;
        uint _1676 = _1651 + 46u;
        float _1687 = fma(_1621, cbSceneParam._m0[_1652].w, fma(_1617, cbSceneParam._m0[_1652].z, fma(_1613, cbSceneParam._m0[_1652].y, _1609 * cbSceneParam._m0[_1652].x)));
        float _1691 = fma(_1621, cbSceneParam._m0[_1660].w, fma(_1617, cbSceneParam._m0[_1660].z, fma(_1613, cbSceneParam._m0[_1660].y, _1609 * cbSceneParam._m0[_1660].x)));
        float _1699 = fma(_1621, cbSceneParam._m0[_1676].w, fma(_1617, cbSceneParam._m0[_1676].z, fma(_1613, cbSceneParam._m0[_1676].y, _1609 * cbSceneParam._m0[_1676].x)));
        float _1704 = cbSceneParam._m0[33u].z * _1699;
        float _1706 = cbSceneParam._m0[33u].w * _1699;
        float _1709 = fma(_1621, cbSceneParam._m0[_1668].w, fma(_1617, cbSceneParam._m0[_1668].z, fma(_1613, cbSceneParam._m0[_1668].y, _1609 * cbSceneParam._m0[_1668].x))) / _1699;
        float _1757 = (cbSceneParam._m0[33u].x - sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624))) * cbSceneParam._m0[33u].y;
        float _4012 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1764 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 + _1687) / _1699, (_1706 + _1691) / _1699), _1709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1706 + _1687) / _1699, (_1691 - _1704) / _1699), _1709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1687 - _1704) / _1699, (_1691 - _1706) / _1699), _1709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1687 - _1706) / _1699, (_1704 + _1691) / _1699), _1709), 0.0)).x), vec4(0.25)));
        _1771 = 1.0 - (_1764 * cbSceneParam._m0[34u].x);
        _1772 = 1.0 - (_1764 * cbSceneParam._m0[34u].y);
        _1773 = 1.0 - (_1764 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1771 = 1.0;
        _1772 = 1.0;
        _1773 = 1.0;
    }
    float _1837;
    float _1839;
    float _1841;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1825 = fma(_1621, cbSceneParam._m0[63u].w, fma(_1617, cbSceneParam._m0[63u].z, fma(_1613, cbSceneParam._m0[63u].y, _1609 * cbSceneParam._m0[63u].x)));
        float _1826 = fma(_1621, cbSceneParam._m0[60u].w, fma(_1617, cbSceneParam._m0[60u].z, fma(_1613, cbSceneParam._m0[60u].y, _1609 * cbSceneParam._m0[60u].x))) / _1825;
        float _1827 = fma(_1621, cbSceneParam._m0[61u].w, fma(_1617, cbSceneParam._m0[61u].z, fma(_1613, cbSceneParam._m0[61u].y, _1609 * cbSceneParam._m0[61u].x))) / _1825;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1826 >= cbSceneParam._m0[64u].x) && (_1827 >= cbSceneParam._m0[64u].y)) && (_1826 <= cbSceneParam._m0[64u].z)) && (_1827 <= cbSceneParam._m0[64u].w))
        {
            float _1966 = fma(_1621, cbSceneParam._m0[62u].w, fma(_1617, cbSceneParam._m0[62u].z, fma(_1613, cbSceneParam._m0[62u].y, _1609 * cbSceneParam._m0[62u].x))) / _1825;
            float _1970 = isnan(cbSceneParam._m0[41u].w) ? _1966 : (isnan(_1966) ? cbSceneParam._m0[41u].w : max(_1966, cbSceneParam._m0[41u].w));
            float _2013 = (cbSceneParam._m0[33u].x - sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624))) * cbSceneParam._m0[33u].y;
            float _4028 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
            float _2020 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1826, cbSceneParam._m0[33u].w + _1827), _1970), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1826, _1827 - cbSceneParam._m0[33u].z), _1970), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1826 - cbSceneParam._m0[33u].z, _1827 - cbSceneParam._m0[33u].w), _1970), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1826 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1827), _1970), 0.0)).x), vec4(0.25)));
            float _2024 = 1.0 - (_2020 * cbSceneParam._m0[34u].x);
            float _2025 = 1.0 - (_2020 * cbSceneParam._m0[34u].y);
            float _2026 = 1.0 - (_2020 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2026) ? _1773 : (isnan(_1773) ? _2026 : min(_1773, _2026));
            frontier_phi_34_33_ladder_1 = isnan(_2025) ? _1772 : (isnan(_1772) ? _2025 : min(_1772, _2025));
            frontier_phi_34_33_ladder_2 = isnan(_2024) ? _1771 : (isnan(_1771) ? _2024 : min(_1771, _2024));
        }
        else
        {
            frontier_phi_34_33_ladder = _1773;
            frontier_phi_34_33_ladder_1 = _1772;
            frontier_phi_34_33_ladder_2 = _1771;
        }
        _1837 = frontier_phi_34_33_ladder_2;
        _1839 = frontier_phi_34_33_ladder_1;
        _1841 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1837 = _1771;
        _1839 = _1772;
        _1841 = _1773;
    }
    uvec4 _1846 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1848 = _1846.x * 14u;
    uint _1849 = _1848 + 13u;
    float _1856 = _542 + (-1.0);
    float _1861 = (cbLight._m0[_1849].x * _1856) + 1.0;
    float _1862 = (cbLight._m0[_1849].y * _1856) + 1.0;
    float _1863 = (cbLight._m0[_1849].z * _1856) + 1.0;
    float _1864 = (cbLight._m0[_1849].w * _1856) + 1.0;
    uint _1865 = _1848 + 5u;
    float _1871 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
    uint _1875 = _1848 + 4u;
    float _1885 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
    uint _1889 = _1848 | 1u;
    float _1900 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_372, _373, _374));
    float _1903 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_372, _373, _374));
    float _4064 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _4075 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1908 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _1910 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
    float _1917 = ((cbLight._m0[_1865].x * _1871) * _1910) + (((cbLight._m0[_1875].x * _1837) * _1885) * _1908);
    float _1918 = ((_1871 * cbLight._m0[_1865].y) * _1910) + (((cbLight._m0[_1875].y * _1839) * _1885) * _1908);
    float _1919 = ((_1871 * cbLight._m0[_1865].z) * _1910) + (((cbLight._m0[_1875].z * _1841) * _1885) * _1908);
    uvec4 _1923 = floatBitsToUint(cbLight._m0[_1848 + 12u]);
    bool _1925 = _1923.x == 0u;
    float _2027;
    float _2029;
    float _2031;
    if (_1925)
    {
        _2027 = _1917;
        _2029 = _1918;
        _2031 = _1919;
    }
    else
    {
        uint _2035 = _1848 + 6u;
        float _2051 = (dot(vec3(cbLight._m0[_1848 + 2u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _2052 = _2051 * _2051;
        float _4086 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2053 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2054 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _2027 = (((cbLight._m0[_2035].x * 0.3183098733425140380859375) * _2053) * _2054) + _1917;
        _2029 = (((cbLight._m0[_2035].y * 0.3183098733425140380859375) * _2053) * _2054) + _1918;
        _2031 = (((cbLight._m0[_2035].z * 0.3183098733425140380859375) * _2053) * _2054) + _1919;
    }
    bool _2034 = _1923.y == 0u;
    float _2089;
    float _2091;
    float _2093;
    if (_2034)
    {
        _2089 = _2027;
        _2091 = _2029;
        _2093 = _2031;
    }
    else
    {
        uint _2262 = _1848 + 7u;
        float _2278 = (dot(vec3(cbLight._m0[_1848 + 3u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _2279 = _2278 * _2278;
        float _4102 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2280 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2281 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _2089 = (((cbLight._m0[_2262].x * 0.3183098733425140380859375) * _2280) * _2281) + _2027;
        _2091 = (((cbLight._m0[_2262].y * 0.3183098733425140380859375) * _2280) * _2281) + _2029;
        _2093 = (((cbLight._m0[_2262].z * 0.3183098733425140380859375) * _2280) * _2281) + _2031;
    }
    uint _2096 = _1848 + 8u;
    float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1848].w)) * _375) * 0.949999988079071044921875);
    float _2110 = _2109 * _2109;
    float _2111 = cbLight._m0[_1848].x + _453;
    float _2112 = cbLight._m0[_1848].y + _454;
    float _2113 = cbLight._m0[_1848].z + _455;
    float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
    float _2118 = _2117 * _2111;
    float _2119 = _2117 * _2112;
    float _2120 = _2117 * _2113;
    float _2121 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1848].xyz));
    float _4118 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _2125 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2126 = dot(vec3(_372, _373, _374), vec3(_2118, _2119, _2120));
    float _4140 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2130 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_2118, _2119, _2120));
    float _4151 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2134 = _2110 * _2110;
    float _2138 = ((_2129 * _2129) * (_2134 + (-1.0))) + 1.0;
    float _2146 = exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0);
    float _2147 = 0.959999978542327880859375 - _523;
    float _2149 = 0.959999978542327880859375 - _524;
    float _2150 = 0.959999978542327880859375 - _525;
    float _2157 = 1.0 - _2110;
    float _2168 = (0.5 / (((_2125 * ((_2124 * _2157) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2157) + _2110) * _2124))) * _2124;
    float _4162 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2170 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2134 / ((_2138 * _2138) * 3.141590118408203125));
    uint _2184 = _1848 + 9u;
    float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1889].w)) * _375) * 0.949999988079071044921875);
    float _2196 = _2195 * _2195;
    float _2197 = cbLight._m0[_1889].x + _453;
    float _2198 = cbLight._m0[_1889].y + _454;
    float _2199 = cbLight._m0[_1889].z + _455;
    float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
    float _2204 = _2203 * _2197;
    float _2205 = _2203 * _2198;
    float _2206 = _2203 * _2199;
    float _2207 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1889].xyz));
    float _4173 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2211 = dot(vec3(_372, _373, _374), vec3(_2204, _2205, _2206));
    float _4184 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_2204, _2205, _2206));
    float _4195 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2196 * _2196;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0);
    float _2237 = 1.0 - _2196;
    float _2247 = (0.5 / (((_2125 * ((_2210 * _2237) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2237) + _2196) * _2210))) * _2210;
    float _4206 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2249 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    float _2259 = (((((_2230 * _2147) + _526) * cbLight._m0[_2184].x) * _2249) * _1871) + ((((cbLight._m0[_2096].x * _1837) * ((_2146 * _2147) + _526)) * _2170) * _1885);
    float _2260 = (((((_2230 * _2149) + _528) * cbLight._m0[_2184].y) * _2249) * _1871) + ((((cbLight._m0[_2096].y * _1839) * ((_2146 * _2149) + _528)) * _2170) * _1885);
    float _2261 = (((((_2230 * _2150) + _529) * cbLight._m0[_2184].z) * _2249) * _1871) + ((((cbLight._m0[_2096].z * _1841) * ((_2146 * _2150) + _529)) * _2170) * _1885);
    float _2317;
    float _2319;
    float _2321;
    if (_1925)
    {
        _2317 = _2259;
        _2319 = _2260;
        _2321 = _2261;
    }
    else
    {
        uint _2323 = _1848 + 2u;
        uint _2327 = _1848 + 10u;
        float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _375) * 0.949999988079071044921875);
        float _2342 = _2341 * _2341;
        float _2343 = cbLight._m0[_2323].x + _453;
        float _2344 = cbLight._m0[_2323].y + _454;
        float _2345 = cbLight._m0[_2323].z + _455;
        float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
        float _2350 = _2349 * _2343;
        float _2351 = _2349 * _2344;
        float _2352 = _2349 * _2345;
        float _2353 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_2323].xyz));
        float _4217 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2357 = dot(vec3(_372, _373, _374), vec3(_2350, _2351, _2352));
        float _4228 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2361 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2350, _2351, _2352));
        float _4239 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2365 = _2342 * _2342;
        float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
        float _2376 = exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0);
        float _2383 = 1.0 - _2342;
        float _2393 = (0.5 / (((_2125 * ((_2356 * _2383) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2383) + _2342) * _2356))) * _2356;
        float _4250 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2395 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
        float _2396 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _2317 = (((((_2376 * _2147) + _526) * cbLight._m0[_2327].x) * _2395) * _2396) + _2259;
        _2319 = (((((_2376 * _2149) + _528) * cbLight._m0[_2327].y) * _2395) * _2396) + _2260;
        _2321 = (((((_2376 * _2150) + _529) * cbLight._m0[_2327].z) * _2395) * _2396) + _2261;
    }
    float _2427;
    float _2429;
    float _2431;
    if (_2034)
    {
        _2427 = _2317;
        _2429 = _2319;
        _2431 = _2321;
    }
    else
    {
        uint _2438 = _1848 + 3u;
        uint _2442 = _1848 + 11u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _375) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _453;
        float _2459 = cbLight._m0[_2438].y + _454;
        float _2460 = cbLight._m0[_2438].z + _455;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_2438].xyz));
        float _4266 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2472 = dot(vec3(_372, _373, _374), vec3(_2465, _2466, _2467));
        float _4277 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4288 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0);
        float _2498 = 1.0 - _2457;
        float _2508 = (0.5 / (((_2125 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2498) + _2457) * _2471))) * _2471;
        float _4299 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _2427 = (((((_2491 * _2147) + _526) * cbLight._m0[_2442].x) * _2510) * _2511) + _2317;
        _2429 = (((((_2491 * _2149) + _528) * cbLight._m0[_2442].y) * _2510) * _2511) + _2319;
        _2431 = (((((_2491 * _2150) + _529) * cbLight._m0[_2442].z) * _2510) * _2511) + _2321;
    }
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    if (_1846.y == 0u)
    {
        uvec4 _2532 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2533 = _2532.x;
        uint _2544 = uint((float(_2532.y) * floor(float(uint(cbSceneParam._m0[85u].y * _462) / _2533))) + floor(float(uint(cbSceneParam._m0[85u].x * _461) / _2533)));
        float _2554 = (log2(_1624 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2555 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        uint _2558 = uint(isnan(14.0) ? _2555 : (isnan(_2555) ? 14.0 : min(_2555, 14.0)));
        uvec4 _2563 = texelFetch(g_lightClusterGridBuffer, int(((_2558 << 2u) + (_2544 << 6u)) >> 2u));
        uint _2564 = _2563.x;
        uint _2565 = _2532.z;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        if (((((1u << ((_2565 >> 4u) & 15u)) + 4294967295u) & _2564) == 0u) || ((_2565 & 240u) == 0u))
        {
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
        }
        else
        {
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            uint _2795 = 0u;
            uint _2804;
            bool _2805;
            for (;;)
            {
                _2804 = texelFetch(g_lightClassification, int((((_2558 << 5u) + (_2544 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                _2805 = _2804 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2805)
                {
                    frontier_phi_66_pred = _2794;
                    frontier_phi_66_pred_1 = _2793;
                    frontier_phi_66_pred_2 = _2792;
                    frontier_phi_66_pred_3 = _2791;
                    frontier_phi_66_pred_4 = _2790;
                    frontier_phi_66_pred_5 = _2789;
                }
                else
                {
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    uint _2919;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2804;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    for (;;)
                    {
                        uint _2923 = uint(findLSB(_2919)) + (_2795 << 5u);
                        uint _2920 = (_2919 + 4294967295u) & _2919;
                        uint _2925 = _2923 * 48u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2945 = (_2923 * 48u) + 4u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2964 = (_2923 * 48u) + 8u;
                        vec3 _2975 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x));
                        float _2979 = _2939.x - _1622;
                        float _2980 = _2939.y - _1623;
                        float _2981 = _2939.z - _1624;
                        float _2982 = dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981));
                        float _2985 = inversesqrt(_2982);
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2989 = dot(vec3(_483, _486, _489), vec3(_2986, _2987, _2988));
                        float _2994 = 1.0 - (_2982 * _2939.w);
                        float _4325 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _2996 = sqrt(_2982) * _2958.w;
                        float _2999 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2989) + _3000;
                        float _3006 = _2996 * _2996;
                        float _3010 = ((isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))) * _2995) / ((_3006 * 0.699999988079071044921875) + 1.0);
                        float _3014 = (-0.0) - _1622;
                        float _3015 = (-0.0) - _1623;
                        float _3016 = (-0.0) - _1624;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3030 = exp2(log2(1.0 / ((_3006 * 3.5) + 5.0)) * 0.25);
                        float _3031 = 1.0 - _558;
                        float _3038 = sqrt(1.0 - ((1.0 - (_3031 * _3031)) * (1.0 - (_3030 * _3030))));
                        float _3039 = _3038 * _3038;
                        float _3040 = _3039 * _3039;
                        float _3041 = _3021 + _2986;
                        float _3042 = _3022 + _2987;
                        float _3043 = _3023 + _2988;
                        float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
                        float _3051 = dot(vec3(_483, _486, _489), vec3(_3021, _3022, _3023));
                        float _4341 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3054 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3055 = dot(vec3(_483, _486, _489), vec3(_3047 * _3041, _3047 * _3042, _3047 * _3043));
                        float _4352 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3058 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3062 = ((_3058 * _3058) * (_3040 + (-1.0))) + 1.0;
                        float _3063 = _2999 * _3039;
                        float _3064 = _3063 * _3063;
                        float _3067 = ((1.0 - _3064) * _2989) + _3064;
                        float _4363 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3068 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3069 = 1.0 - _3039;
                        float _3079 = (0.5 / (((_3068 * ((_3054 * _3069) + _3039)) + 9.9999999392252902907785028219223e-09) + (((_3068 * _3069) + _3039) * _3054))) * _3068;
                        float _4374 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3090 = (((_3040 * 3.1415927410125732421875) * (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) / ((_3062 * _3062) * ((_3006 * 2.1991131305694580078125) + 3.141590118408203125))) * _2995;
                        _2848 = (_3010 * _2958.x) + _2916;
                        _2849 = (_3010 * _2958.y) + _2917;
                        _2850 = (_3010 * _2958.z) + _2918;
                        _2845 = (_3090 * _2975.x) + _2913;
                        _2846 = (_3090 * _2975.y) + _2914;
                        _2847 = (_3090 * _2975.z) + _2915;
                        if (_2920 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2920;
                        }
                    }
                    frontier_phi_66_pred = _2850;
                    frontier_phi_66_pred_1 = _2849;
                    frontier_phi_66_pred_2 = _2848;
                    frontier_phi_66_pred_3 = _2847;
                    frontier_phi_66_pred_4 = _2846;
                    frontier_phi_66_pred_5 = _2845;
                }
                _2655 = frontier_phi_66_pred;
                _2653 = frontier_phi_66_pred_1;
                _2651 = frontier_phi_66_pred_2;
                _2649 = frontier_phi_66_pred_3;
                _2647 = frontier_phi_66_pred_4;
                _2645 = frontier_phi_66_pred_5;
                uint _2796 = _2795 + 1u;
                if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2789 = _2645;
                    _2790 = _2647;
                    _2791 = _2649;
                    _2792 = _2651;
                    _2793 = _2653;
                    _2794 = _2655;
                    _2795 = _2796;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
        }
        uvec4 _2658 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2659 = _2658.z;
        uint _2661 = (_2659 >> 8u) & 15u;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((4294967295u << _2661) & _2564) == 0u)
        {
            _2757 = _2644;
            _2759 = _2646;
            _2761 = _2648;
            _2763 = _2650;
            _2765 = _2652;
            _2767 = _2654;
        }
        else
        {
            float _2782 = inversesqrt(dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624)));
            float _2783 = _2782 * _1622;
            float _2784 = _2782 * _1623;
            float _2785 = _2782 * _1624;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2661 < ((_2659 >> 12u) & 15u))
            {
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2896 = _2644;
                float _2897 = _2646;
                float _2898 = _2648;
                float _2899 = _2650;
                float _2900 = _2652;
                float _2901 = _2654;
                uint _2902 = _2661;
                uint _2911;
                bool _2912;
                for (;;)
                {
                    _2911 = texelFetch(g_lightClassification, int((((_2558 << 5u) + (_2544 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                    _2912 = _2911 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2912)
                    {
                        frontier_phi_72_pred = _2901;
                        frontier_phi_72_pred_1 = _2900;
                        frontier_phi_72_pred_2 = _2899;
                        frontier_phi_72_pred_3 = _2898;
                        frontier_phi_72_pred_4 = _2897;
                        frontier_phi_72_pred_5 = _2896;
                    }
                    else
                    {
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3108 = _2896;
                        float _3109 = _2897;
                        float _3110 = _2898;
                        float _3111 = _2899;
                        float _3112 = _2900;
                        float _3113 = _2901;
                        uint _3114 = _2911;
                        uint _3115;
                        vec4 _3140;
                        float _3141;
                        vec4 _3156;
                        vec3 _3168;
                        vec4 _3184;
                        vec4 _3199;
                        float _3246;
                        bool _3247;
                        for (;;)
                        {
                            uint _3125 = ((_2902 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3114));
                            _3115 = (_3114 + 4294967295u) & _3114;
                            uint _3127 = _3125 * 40u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            _3141 = _3140.w;
                            uint _3143 = (_3125 * 40u) + 4u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3158 = (_3125 * 40u) + 8u;
                            _3168 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x));
                            uint _3171 = (_3125 * 40u) + 16u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3186 = (_3125 * 40u) + 20u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3202 = (_3125 * 40u) + 24u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3221 = (_3125 * 40u) + 28u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3246 = fma(_1624, _3234.z, fma(_1623, _3234.y, _3234.x * _1622)) + _3234.w;
                            _3247 = !((fma(_1624, _3215.z, fma(_1623, _3215.y, _3215.x * _1622)) + _3215.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3247)
                            {
                                float _3274 = _3140.x - _1622;
                                float _3275 = _3140.y - _1623;
                                float _3276 = _3140.z - _1624;
                                float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                                float _3280 = inversesqrt(_3277);
                                float _3281 = _3280 * _3274;
                                float _3282 = _3280 * _3275;
                                float _3283 = _3280 * _3276;
                                float _3287 = 1.0 - (_3277 / (_3141 * _3141));
                                float _4385 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3292 = sqrt(_3277) * _3156.w;
                                float _3294 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                                float _3295 = _3294 * _3294;
                                float _3298 = ((1.0 - _3295) * dot(vec3(_3281, _3282, _3283), vec3(_483, _486, _489))) + _3295;
                                float _3301 = _3292 * _3292;
                                float _3305 = (fma(_1624, _3184.z, fma(_1623, _3184.y, _3184.x * _1622)) + _3184.w) / _3246;
                                float _3306 = (fma(_1624, _3199.z, fma(_1623, _3199.y, _3199.x * _1622)) + _3199.w) / _3246;
                                float _3310 = 1.0 - dot(vec2(_3305, _3306), vec2(_3305, _3306));
                                float _4401 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3312 = _3311 * (((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3288) / ((_3301 * 0.699999988079071044921875) + 1.0));
                                float _3324 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                                float _3325 = 1.0 - _558;
                                float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                                float _3333 = _3332 * _3332;
                                float _3334 = _3333 * _3333;
                                float _3335 = _3281 - _2783;
                                float _3336 = _3282 - _2784;
                                float _3337 = _3283 - _2785;
                                float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                                float _3345 = dot(vec3(_483, _486, _489), vec3((-0.0) - _2783, (-0.0) - _2784, (-0.0) - _2785));
                                float _4412 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3349 = dot(vec3(_483, _486, _489), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                                float _4423 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                                float _3357 = _3294 * _3333;
                                float _3358 = _3357 * _3357;
                                float _3364 = ((1.0 - _3358) * dot(vec3(_483, _486, _489), vec3(_3281, _3282, _3283))) + _3358;
                                float _4434 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3366 = 1.0 - _3333;
                                float _3376 = (0.5 / (((_3365 * ((_3348 * _3366) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3333) * _3348))) * _3365;
                                float _4445 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3386 = (_3311 * _3288) * (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) / ((_3356 * _3356) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3312 * _3156.y;
                                frontier_phi_78_pred_1 = _3312 * _3156.x;
                                frontier_phi_78_pred_2 = _3386 * _3168.z;
                                frontier_phi_78_pred_3 = _3386 * _3168.y;
                                frontier_phi_78_pred_4 = _3386 * _3168.x;
                                frontier_phi_78_pred_5 = _3312 * _3156.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3394 = frontier_phi_78_pred;
                            _3393 = frontier_phi_78_pred_1;
                            _3392 = frontier_phi_78_pred_2;
                            _3391 = frontier_phi_78_pred_3;
                            _3390 = frontier_phi_78_pred_4;
                            _3395 = frontier_phi_78_pred_5;
                            _3098 = _3393 + _3111;
                            _3099 = _3394 + _3112;
                            _3100 = _3395 + _3113;
                            _3095 = _3390 + _3108;
                            _3096 = _3391 + _3109;
                            _3097 = _3392 + _3110;
                            if (_3115 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3115;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3100;
                        frontier_phi_72_pred_1 = _3099;
                        frontier_phi_72_pred_2 = _3098;
                        frontier_phi_72_pred_3 = _3097;
                        frontier_phi_72_pred_4 = _3096;
                        frontier_phi_72_pred_5 = _3095;
                    }
                    _2768 = frontier_phi_72_pred;
                    _2766 = frontier_phi_72_pred_1;
                    _2764 = frontier_phi_72_pred_2;
                    _2762 = frontier_phi_72_pred_3;
                    _2760 = frontier_phi_72_pred_4;
                    _2758 = frontier_phi_72_pred_5;
                    uint _2903 = _2902 + 1u;
                    if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2896 = _2758;
                        _2897 = _2760;
                        _2898 = _2762;
                        _2899 = _2764;
                        _2900 = _2766;
                        _2901 = _2768;
                        _2902 = _2903;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2768;
                frontier_phi_60_61_ladder_1 = _2766;
                frontier_phi_60_61_ladder_2 = _2762;
                frontier_phi_60_61_ladder_3 = _2760;
                frontier_phi_60_61_ladder_4 = _2758;
                frontier_phi_60_61_ladder_5 = _2764;
            }
            else
            {
                frontier_phi_60_61_ladder = _2654;
                frontier_phi_60_61_ladder_1 = _2652;
                frontier_phi_60_61_ladder_2 = _2648;
                frontier_phi_60_61_ladder_3 = _2646;
                frontier_phi_60_61_ladder_4 = _2644;
                frontier_phi_60_61_ladder_5 = _2650;
            }
            _2757 = frontier_phi_60_61_ladder_4;
            _2759 = frontier_phi_60_61_ladder_3;
            _2761 = frontier_phi_60_61_ladder_2;
            _2763 = frontier_phi_60_61_ladder_5;
            _2765 = frontier_phi_60_61_ladder_1;
            _2767 = frontier_phi_60_61_ladder;
        }
        float _2772 = isnan(1.0) ? _542 : (isnan(_542) ? 1.0 : min(_542, 1.0));
        _2577 = (_2772 * _2763) + _2089;
        _2579 = (_2772 * _2765) + _2091;
        _2581 = (_2772 * _2767) + _2093;
        _2583 = ((_2757 * _526) * _2772) + _2427;
        _2585 = ((_2759 * _528) * _2772) + _2429;
        _2587 = ((_2761 * _529) * _2772) + _2431;
    }
    else
    {
        _2577 = _2089;
        _2579 = _2091;
        _2581 = _2093;
        _2583 = _2427;
        _2585 = _2429;
        _2587 = _2431;
    }
    float _4461 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _4472 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _4483 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    uint _2607 = _224 + 6u;
    float _2615 = _461 / cbSceneParam._m0[86u].x;
    float _2616 = _462 / cbSceneParam._m0[86u].y;
    vec4 _2630 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2615, _2616, (log2((isnan(cbSceneParam._m0[77u].w) ? _394 : (isnan(_394) ? cbSceneParam._m0[77u].w : min(_394, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2632 = _2630.x;
    float _2633 = _2630.y;
    float _2634 = _2630.z;
    float _2635 = _2630.w;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    if (_394 > cbSceneParam._m0[78u].w)
    {
        float _2669 = isnan(_394) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _394 : min(cbSceneParam._m0[80u].w, _394));
        float _2670 = _2669 / _394;
        float _2681 = _2670 * _446;
        float _2682 = _447 * _2670;
        float _2683 = (-0.0) - _2682;
        float _2685 = _2670 * _448;
        float _2687 = (cbSceneParam._m0[77u].w * _2683) / _2669;
        float _2688 = _2687 + cbSceneParam._m0[79u].w;
        float _2689 = cbSceneParam._m0[79u].w - _2682;
        float _2695 = sqrt(((_2681 * _2681) + (_2682 * _2682)) + (_2685 * _2685));
        float _2698 = (1.0 - (cbSceneParam._m0[77u].w / _2669)) * _2695;
        float _2703 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2705 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2858;
        if (abs((_2683 - _2687) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2858 = ((((_2688 > 0.0) ? exp2(_2703 * _2688) : (2.0 - exp2(_2705 * _2688))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2698;
        }
        else
        {
            float _2818 = 1.0 / cbSceneParam._m0[80u].x;
            float _2819 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : max(_2688, _2689));
            float _2820 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : min(_2688, _2689));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            _2858 = ((abs(_2695 / _2683) * cbSceneParam._m0[80u].y) * ((((_2829 - _2830) * 2.0) - ((exp2(_2703 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)))) - exp2(_2703 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))))) * _2818)) - ((exp2(_2705 * _2829) - exp2(_2705 * _2830)) * _2818))) + (_2698 * cbSceneParam._m0[80u].z);
        }
        vec4 _2860 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2615, _2616, 1.0), 0.0);
        float _2869 = exp2((_2858 * (-1.44269502162933349609375)) * (1.0 - _2860.w));
        float _2870 = log2(_2869);
        float _2886 = log2(_2635);
        _2707 = (exp2(_2886 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].x)) * _2860.x) / cbSceneParam._m0[78u].x)) + _2632;
        _2709 = (exp2(_2886 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].y)) * _2860.y) / cbSceneParam._m0[78u].y)) + _2633;
        _2711 = (exp2(_2886 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].z)) * _2860.z) / cbSceneParam._m0[78u].z)) + _2634;
        _2713 = _2869 * _2635;
    }
    else
    {
        _2707 = _2632;
        _2709 = _2633;
        _2711 = _2634;
        _2713 = _2635;
    }
    float _2725 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2726 = _2725 == 3.0;
    float _2727 = log2(_2713);
    float _2734 = exp2(_2727 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2577 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _542))) + ((_2583 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1351)) * cbPerFrame._m0[3u].x));
    float _2735 = exp2(_2727 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2579 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _542))) + ((_2585 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1351)) * cbPerFrame._m0[3u].x));
    float _2736 = exp2(_2727 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2581 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _542))) + ((_2587 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1351)) * cbPerFrame._m0[3u].x));
    float _2745 = (_2725 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2745 * (_2726 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.y = _2745 * (_2726 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.z = _2745 * (_2726 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2711)));
    SV_Target.w = cbInstanceData._m0[_2607].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2607].w;
}


