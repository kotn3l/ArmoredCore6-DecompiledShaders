#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1059;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _324 = _320.z;
    float _328 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_328, _329), vec2(_328, _329));
    float _3412 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))));
    float _341 = _328 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_294.x * 2.0) + (-1.0)));
    float _342 = _329 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_294.y * 2.0) + (-1.0)));
    float _345 = fma(_336, _216, fma(_342, _223, _341 * _209));
    float _348 = fma(_336, _217, fma(_342, _224, _341 * _210));
    float _351 = fma(_336, _218, fma(_342, _225, _341 * _211));
    float _355 = inversesqrt(dot(vec3(_345, _348, _351), vec3(_345, _348, _351)));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _393 = _391.x;
    float _394 = 1.0 - _393;
    float _401 = ((_393 - _394) * cbMtdParam._m0[24u].z) + _394;
    float _403 = (cbMtdParam._m0[19u].x + dot(vec4(_355 * _345, _355 * _348, _355 * _351, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_401 * cbMtdParam._m0[21u].z);
    float _3423 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _419 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_401 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3434 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _424 = ((_404 * (cbMtdParam._m0[17u].x - _274)) * _420) + _274;
    float _425 = ((_404 * (cbMtdParam._m0[17u].y - _275)) * _420) + _275;
    float _426 = ((_404 * (cbMtdParam._m0[17u].z - _276)) * _420) + _276;
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _441 = _439.x;
    float _444 = _441 - ((_441 * _404) * _420);
    float _449 = (((_294.z - _324) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _324;
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _469 = (_462.x * 2.0) + (-1.0);
    float _470 = (_462.y * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3445 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _480 = (((_462.z - _449) * _404) * _420) + _449;
    float _495 = (((cbMtdParam._m0[21u].x * _341) + ((_469 - _341) * _404)) * _420) + _341;
    float _496 = (((cbMtdParam._m0[21u].x * _342) + ((_470 - _342) * _404)) * _420) + _342;
    float _497 = (((sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) - _336) * _404) * _420) + _336;
    float _502 = cbMtdParam._m0[22u].x + _320.w;
    float _505 = fma(_497, _216, fma(_496, _223, _495 * _209));
    float _508 = fma(_497, _217, fma(_496, _224, _495 * _210));
    float _511 = fma(_497, _218, fma(_496, _225, _495 * _211));
    float _515 = inversesqrt(dot(vec3(_505, _508, _511), vec3(_505, _508, _511)));
    float _516 = _515 * _505;
    float _517 = _515 * _508;
    float _518 = _515 * _511;
    float _3456 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _519 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3478 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3489 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3500 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3511 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _524 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _538 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _589 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _579);
    float _590 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _579);
    float _591 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _579);
    float _595 = inversesqrt(dot(vec3(_589, _590, _591), vec3(_589, _590, _591)));
    float _596 = _589 * _595;
    float _597 = _590 * _595;
    float _598 = _591 * _595;
    float _604 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _605 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _626 = fma(_518, cbSceneParam._m0[5u].z, fma(_517, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _516));
    float _629 = fma(_518, cbSceneParam._m0[6u].z, fma(_517, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _516));
    float _632 = fma(_518, cbSceneParam._m0[7u].z, fma(_517, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _516));
    uint _646 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _652 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_646].x;
    float _653 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_646].y;
    float _654 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_646].z;
    float _3522 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _658 = 1.0 - _524;
    float _659 = _655 * _658;
    float _660 = _656 * _658;
    float _661 = _657 * _658;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _524;
    float _667 = (_656 + (-0.039999999105930328369140625)) * _524;
    float _668 = (_657 + (-0.039999999105930328369140625)) * _524;
    float _669 = _666 + 0.039999999105930328369140625;
    float _671 = _667 + 0.039999999105930328369140625;
    float _672 = _668 + 0.039999999105930328369140625;
    vec4 _681 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _604, cbSceneParam._m0[86u].y * _605));
    float _685 = ((isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * TEXCOORD_5.w) * _681.x;
    float _686 = dot(vec3(_516, _517, _518), vec3(_596, _597, _598));
    float _689 = _686 * 2.0;
    float _693 = (_689 * _516) - _596;
    float _694 = (_689 * _517) - _597;
    float _695 = (_689 * _518) - _598;
    float _699 = abs(dot(vec3(_596, _597, _598), vec3(_516, _517, _518)));
    float _3555 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _701 = sqrt(_519);
    float _714 = exp2((_701 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_701 * 3.0));
    float _720 = (1.0 - _714) * ((_701 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _721 = _714 * _701;
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1058;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _783 = fma(_757, cbModelParam._m0[26u].z, fma(_753, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _749));
        float _787 = fma(_757, cbModelParam._m0[27u].z, fma(_753, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _749));
        float _791 = fma(_757, cbModelParam._m0[28u].z, fma(_753, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _749));
        float _816 = _749 + _516;
        float _817 = _753 + _517;
        float _818 = _757 + _518;
        float _828 = fma(_818, cbModelParam._m0[26u].z, fma(_817, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816)) - _783;
        float _829 = fma(_818, cbModelParam._m0[27u].z, fma(_817, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816)) - _787;
        float _830 = fma(_818, cbModelParam._m0[28u].z, fma(_817, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816)) - _791;
        float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
        float _847 = ((_834 * _828) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_783 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_834 * _829) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_787 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_834 * _830) / cbModelParam._m0[34u].z) + ((((((_791 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        float _886 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_852.x + (-0.5));
        float _888 = _886 * (_852.y + (-0.5));
        float _889 = _886 * (_852.z + (-0.5));
        float _896 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_859.x + (-0.5));
        float _898 = _896 * (_859.y + (-0.5));
        float _899 = _896 * (_859.z + (-0.5));
        float _906 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_866.x + (-0.5));
        float _908 = _906 * (_866.y + (-0.5));
        float _909 = _906 * (_866.z + (-0.5));
        float _916 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_873.x + (-0.5));
        float _918 = _916 * (_873.y + (-0.5));
        float _919 = _916 * (_873.z + (-0.5));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = _887 * 0.5;
        float _924 = _897 * 0.5;
        float _925 = _907 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _940 = (dot(vec3(_516, _517, _518), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _950 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3603 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_952 + 1.0))) + _957) * _920;
        float _967 = _888 * 0.5;
        float _968 = _898 * 0.5;
        float _969 = _908 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_516, _517, _518), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3636 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_994 + 1.0))) + _999) * _921;
        float _1009 = _889 * 0.5;
        float _1010 = _899 * 0.5;
        float _1011 = _909 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_516, _517, _518), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3669 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1036 + 1.0))) + _1041) * _922;
        _1058 = _889;
        _1060 = _888;
        _1061 = _887;
        _1062 = _899;
        _1063 = _898;
        _1064 = _897;
        _1065 = _909;
        _1066 = _908;
        _1067 = _907;
        _1068 = _922;
        _1069 = _921;
        _1070 = _920;
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
    }
    else
    {
        _1058 = _1059;
        _1060 = _1059;
        _1061 = _1059;
        _1062 = _1059;
        _1063 = _1059;
        _1064 = _1059;
        _1065 = _1059;
        _1066 = _1059;
        _1067 = _1059;
        _1068 = _1059;
        _1069 = _1059;
        _1070 = _1059;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1098 = fma(_757, cbModelParam._m0[30u].z, fma(_753, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _749));
        float _1102 = fma(_757, cbModelParam._m0[31u].z, fma(_753, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _749));
        float _1106 = fma(_757, cbModelParam._m0[32u].z, fma(_753, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _749));
        float _1129 = _749 + _516;
        float _1130 = _753 + _517;
        float _1131 = _757 + _518;
        float _1141 = fma(_1131, cbModelParam._m0[30u].z, fma(_1130, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1129)) - _1098;
        float _1142 = fma(_1131, cbModelParam._m0[31u].z, fma(_1130, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1129)) - _1102;
        float _1143 = fma(_1131, cbModelParam._m0[32u].z, fma(_1130, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1129)) - _1106;
        float _1147 = inversesqrt(dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143)));
        float _1160 = ((_1147 * _1141) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1098 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1147 * _1142) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1102 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1147 * _1143) / cbModelParam._m0[35u].z) + ((((((_1106 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        float _1197 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1164.x + (-0.5));
        float _1199 = _1197 * (_1164.y + (-0.5));
        float _1200 = _1197 * (_1164.z + (-0.5));
        float _1207 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1171.x + (-0.5));
        float _1209 = _1207 * (_1171.y + (-0.5));
        float _1210 = _1207 * (_1171.z + (-0.5));
        float _1217 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1178.x + (-0.5));
        float _1219 = _1217 * (_1178.y + (-0.5));
        float _1220 = _1217 * (_1178.z + (-0.5));
        float _1227 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1185.x + (-0.5));
        float _1229 = _1227 * (_1185.y + (-0.5));
        float _1230 = _1227 * (_1185.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_516, _517, _518), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3732 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1261 + 1.0))) + _1266) * _1231;
        float _1276 = _1199 * 0.5;
        float _1277 = _1209 * 0.5;
        float _1278 = _1219 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_516, _517, _518), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3765 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1303 + 1.0))) + _1308) * _1232;
        float _1318 = _1200 * 0.5;
        float _1319 = _1210 * 0.5;
        float _1320 = _1220 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_516, _517, _518), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3798 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1345 + 1.0))) + _1350) * _1233;
        _1367 = _1200;
        _1368 = _1199;
        _1369 = _1198;
        _1370 = _1210;
        _1371 = _1209;
        _1372 = _1208;
        _1373 = _1220;
        _1374 = _1219;
        _1375 = _1218;
        _1376 = _1233;
        _1377 = _1232;
        _1378 = _1231;
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1059;
        _1368 = _1059;
        _1369 = _1059;
        _1370 = _1059;
        _1371 = _1059;
        _1372 = _1059;
        _1373 = _1059;
        _1374 = _1059;
        _1375 = _1059;
        _1376 = _1059;
        _1377 = _1059;
        _1378 = _1059;
        _1379 = 0.0;
        _1380 = 0.0;
        _1381 = 0.0;
    }
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1071)) + _1071;
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1072)) + _1072;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1073)) + _1073;
    float _1414 = fma(_1393, cbSceneParam._m0[89u].z, fma(_1392, cbSceneParam._m0[89u].y, _1391 * cbSceneParam._m0[89u].x));
    float _1417 = fma(_1393, cbSceneParam._m0[90u].z, fma(_1392, cbSceneParam._m0[90u].y, _1391 * cbSceneParam._m0[90u].x));
    float _1420 = fma(_1393, cbSceneParam._m0[91u].z, fma(_1392, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1391));
    float _1435 = _693 * 0.5;
    float _1436 = _694 * 0.5;
    float _1437 = _695 * 0.5;
    float _1438 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1441 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1444 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1478;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1451 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1058, _1062, _1065, _1068));
        float _1455 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1459 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1466 = dot(vec4(cbModelParam._m0[39u]), vec4(_1435, _1436, _1437, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1466) ? 0.0 : (isnan(0.0) ? _1466 : max(0.0, _1466))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1489;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1480 = dot(vec4(cbModelParam._m0[40u]), vec4(_1435, _1436, _1437, 1.0));
        _1489 = dot(vec3(isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1480) ? 0.0 : (isnan(0.0) ? _1480 : max(0.0, _1480))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1489 = 1.0;
    }
    float _1493 = (_1489 * cbModelParam._m0[1u].x) + (_1478 * (1.0 - cbModelParam._m0[1u].x));
    float _1503 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _519);
    float _1504 = isnan(_1503) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1503 : min(cbModelParam._m0[25u].z, _1503));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1552 = fma(_757, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749)) + cbModelParam._m0[13u].w;
        float _1556 = fma(_757, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749)) + cbModelParam._m0[14u].w;
        float _1560 = fma(_757, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749)) + cbModelParam._m0[15u].w;
        float _1563 = fma(_695, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693));
        float _1566 = fma(_695, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693));
        float _1569 = fma(_695, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693));
        float _1597;
        if (_1563 > 0.0)
        {
            _1597 = abs((1.0 - _1552) / _1563);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1552 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1597 = frontier_phi_14_12_ladder;
        }
        float _1822;
        if (_1566 > 0.0)
        {
            _1822 = abs((1.0 - _1556) / _1566);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1556 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1822 = frontier_phi_23_19_ladder;
        }
        float _2079;
        if (_1569 > 0.0)
        {
            _2079 = abs((1.0 - _1560) / _1569);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1560 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2079 = frontier_phi_35_30_ladder;
        }
        float _2081 = isnan(_1822) ? _1597 : (isnan(_1597) ? _1822 : min(_1597, _1822));
        float _2082 = isnan(_2079) ? _2081 : (isnan(_2081) ? _2079 : min(_2081, _2079));
        float _2086 = (_2082 * _1563) + _1552;
        float _2087 = (_2082 * _1566) + _1556;
        float _2088 = (_2082 * _1569) + _1560;
        float _2089 = _2082 * 9.9999997473787516355514526367188e-05;
        float _2091 = (-1.0) - _2089;
        float _2093 = _2089 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2088 > _2093) || ((_2088 < _2091) || ((_2087 > _2093) || ((_2087 < _2091) || ((_2086 < _2091) || (_2086 > _2093))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2216 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2088, cbModelParam._m0[9u].z, fma(_2087, cbModelParam._m0[9u].y, _2086 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2088, cbModelParam._m0[10u].z, fma(_2087, cbModelParam._m0[10u].y, _2086 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2088, cbModelParam._m0[11u].z, fma(_2087, cbModelParam._m0[11u].y, _2086 * cbModelParam._m0[11u].x))), _1504);
            frontier_phi_13_35_ladder = _2216.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2216.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2216.x * cbModelParam._m0[1u].y;
        }
        _1585 = frontier_phi_13_35_ladder_2;
        _1587 = frontier_phi_13_35_ladder_1;
        _1589 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_693, _694, _695), _1504);
        _1585 = _1573.x * cbModelParam._m0[1u].y;
        _1587 = _1573.y * cbModelParam._m0[1u].y;
        _1589 = _1573.z * cbModelParam._m0[1u].y;
    }
    float _1593 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _519);
    float _1594 = isnan(_1593) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1593 : min(cbModelParam._m0[25u].w, _1593));
    float _1684;
    float _1686;
    float _1688;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1648 = fma(_757, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749)) + cbModelParam._m0[21u].w;
        float _1652 = fma(_757, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749)) + cbModelParam._m0[22u].w;
        float _1656 = fma(_757, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749)) + cbModelParam._m0[23u].w;
        float _1659 = fma(_695, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693));
        float _1662 = fma(_695, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693));
        float _1665 = fma(_695, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693));
        float _1827;
        if (_1659 > 0.0)
        {
            _1827 = abs((1.0 - _1648) / _1659);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1648 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1827 = frontier_phi_25_21_ladder;
        }
        float _2106;
        if (_1662 > 0.0)
        {
            _2106 = abs((1.0 - _1652) / _1662);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1652 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2106 = frontier_phi_37_32_ladder;
        }
        float _2319;
        if (_1665 > 0.0)
        {
            _2319 = abs((1.0 - _1656) / _1665);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1656 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2319 = frontier_phi_46_43_ladder;
        }
        float _2321 = isnan(_2106) ? _1827 : (isnan(_1827) ? _2106 : min(_1827, _2106));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1659) + _1648;
        float _2327 = (_2322 * _1662) + _1652;
        float _2328 = (_2322 * _1665) + _1656;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2330 = (-1.0) - _2329;
        float _2332 = _2329 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2328 > _2332) || ((_2328 < _2330) || ((_2327 > _2332) || ((_2327 < _2330) || ((_2326 < _2330) || (_2326 > _2332))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2328, cbModelParam._m0[17u].z, fma(_2327, cbModelParam._m0[17u].y, _2326 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2328, cbModelParam._m0[18u].z, fma(_2327, cbModelParam._m0[18u].y, _2326 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2328, cbModelParam._m0[19u].z, fma(_2327, cbModelParam._m0[19u].y, _2326 * cbModelParam._m0[19u].x))), _1594);
            frontier_phi_22_46_ladder = _2527.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2527.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2527.x * cbModelParam._m0[1u].z;
        }
        _1684 = frontier_phi_22_46_ladder_2;
        _1686 = frontier_phi_22_46_ladder_1;
        _1688 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_693, _694, _695), _1594);
        _1684 = _1668.x * cbModelParam._m0[1u].z;
        _1686 = _1668.y * cbModelParam._m0[1u].z;
        _1688 = _1668.z * cbModelParam._m0[1u].z;
    }
    float _1701 = (((_720 * _669) + _721) * _685) * ((cbModelParam._m0[1u].w * (_1684 - _1585)) + _1585);
    float _1703 = (((_720 * _671) + _721) * _685) * ((cbModelParam._m0[1u].w * (_1686 - _1587)) + _1587);
    float _1705 = (((_720 * _672) + _721) * _685) * ((cbModelParam._m0[1u].w * (_1688 - _1589)) + _1589);
    float _1708 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1701 * cbSceneParam._m0[89u].x));
    float _1711 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1701 * cbSceneParam._m0[90u].x));
    float _1714 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, _1701 * cbSceneParam._m0[91u].x));
    vec4 _1722 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_604, _605));
    float _1724 = _1722.w;
    float _1736 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1724);
    float _1737 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1724);
    float _1738 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1724);
    uvec4 _1742 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1744 = _1742.x * 14u;
    uint _1745 = _1744 + 13u;
    float _1752 = _685 + (-1.0);
    float _1757 = (cbLight._m0[_1745].x * _1752) + 1.0;
    float _1758 = (cbLight._m0[_1745].y * _1752) + 1.0;
    float _1759 = (cbLight._m0[_1745].z * _1752) + 1.0;
    float _1760 = (cbLight._m0[_1745].w * _1752) + 1.0;
    uint _1761 = _1744 + 5u;
    float _1767 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1771 = _1744 + 4u;
    float _1781 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    uint _1785 = _1744 | 1u;
    float _1796 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_516, _517, _518));
    float _1799 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_516, _517, _518));
    float _3934 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _3945 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1804 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _1806 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.3183098733425140380859375;
    float _1813 = ((cbLight._m0[_1761].x * _1767) * _1806) + (((cbLight._m0[_1771].x * _1736) * _1781) * _1804);
    float _1814 = ((_1767 * cbLight._m0[_1761].y) * _1806) + (((cbLight._m0[_1771].y * _1737) * _1781) * _1804);
    float _1815 = ((_1767 * cbLight._m0[_1761].z) * _1806) + (((cbLight._m0[_1771].z * _1738) * _1781) * _1804);
    uvec4 _1819 = floatBitsToUint(cbLight._m0[_1744 + 12u]);
    bool _1821 = _1819.x == 0u;
    float _1832;
    float _1834;
    float _1836;
    if (_1821)
    {
        _1832 = _1813;
        _1834 = _1814;
        _1836 = _1815;
    }
    else
    {
        uint _1840 = _1744 + 6u;
        float _1856 = (dot(vec3(cbLight._m0[_1744 + 2u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _1857 = _1856 * _1856;
        float _3956 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1859 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _1832 = (((cbLight._m0[_1840].x * 0.3183098733425140380859375) * _1858) * _1859) + _1813;
        _1834 = (((cbLight._m0[_1840].y * 0.3183098733425140380859375) * _1858) * _1859) + _1814;
        _1836 = (((cbLight._m0[_1840].z * 0.3183098733425140380859375) * _1858) * _1859) + _1815;
    }
    bool _1839 = _1819.y == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1839)
    {
        _1877 = _1832;
        _1879 = _1834;
        _1881 = _1836;
    }
    else
    {
        uint _2050 = _1744 + 7u;
        float _2066 = (dot(vec3(cbLight._m0[_1744 + 3u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _2067 = _2066 * _2066;
        float _3972 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2068 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2069 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _1877 = (((cbLight._m0[_2050].x * 0.3183098733425140380859375) * _2068) * _2069) + _1832;
        _1879 = (((cbLight._m0[_2050].y * 0.3183098733425140380859375) * _2068) * _2069) + _1834;
        _1881 = (((cbLight._m0[_2050].z * 0.3183098733425140380859375) * _2068) * _2069) + _1836;
    }
    uint _1884 = _1744 + 8u;
    float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _519) * 0.949999988079071044921875);
    float _1898 = _1897 * _1897;
    float _1899 = cbLight._m0[_1744].x + _596;
    float _1900 = cbLight._m0[_1744].y + _597;
    float _1901 = cbLight._m0[_1744].z + _598;
    float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
    float _1906 = _1905 * _1899;
    float _1907 = _1905 * _1900;
    float _1908 = _1905 * _1901;
    float _1909 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1744].xyz));
    float _3988 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _1913 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1914 = dot(vec3(_516, _517, _518), vec3(_1906, _1907, _1908));
    float _4010 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1918 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1906, _1907, _1908));
    float _4021 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1922 = _1898 * _1898;
    float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
    float _1934 = exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0);
    float _1935 = 0.959999978542327880859375 - _666;
    float _1937 = 0.959999978542327880859375 - _667;
    float _1938 = 0.959999978542327880859375 - _668;
    float _1945 = 1.0 - _1898;
    float _1956 = (0.5 / (((_1913 * ((_1912 * _1945) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _1945) + _1898) * _1912))) * _1912;
    float _4032 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1958 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
    uint _1972 = _1744 + 9u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _519) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1785].x + _596;
    float _1986 = cbLight._m0[_1785].y + _597;
    float _1987 = cbLight._m0[_1785].z + _598;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1785].xyz));
    float _4043 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1999 = dot(vec3(_516, _517, _518), vec3(_1992, _1993, _1994));
    float _4054 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _2003 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1992, _1993, _1994));
    float _4065 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2007 = _1984 * _1984;
    float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
    float _2018 = exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0);
    float _2025 = 1.0 - _1984;
    float _2035 = (0.5 / (((_1913 * ((_1998 * _2025) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2025) + _1984) * _1998))) * _1998;
    float _4076 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2037 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
    float _2047 = (((((_2018 * _1935) + _669) * cbLight._m0[_1972].x) * _2037) * _1767) + ((((cbLight._m0[_1884].x * _1736) * ((_1934 * _1935) + _669)) * _1958) * _1781);
    float _2048 = (((((_2018 * _1937) + _671) * cbLight._m0[_1972].y) * _2037) * _1767) + ((((cbLight._m0[_1884].y * _1737) * ((_1934 * _1937) + _671)) * _1958) * _1781);
    float _2049 = (((((_2018 * _1938) + _672) * cbLight._m0[_1972].z) * _2037) * _1767) + ((((cbLight._m0[_1884].z * _1738) * ((_1934 * _1938) + _672)) * _1958) * _1781);
    float _2111;
    float _2113;
    float _2115;
    if (_1821)
    {
        _2111 = _2047;
        _2113 = _2048;
        _2115 = _2049;
    }
    else
    {
        uint _2117 = _1744 + 2u;
        uint _2121 = _1744 + 10u;
        float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _519) * 0.949999988079071044921875);
        float _2136 = _2135 * _2135;
        float _2137 = cbLight._m0[_2117].x + _596;
        float _2138 = cbLight._m0[_2117].y + _597;
        float _2139 = cbLight._m0[_2117].z + _598;
        float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
        float _2144 = _2143 * _2137;
        float _2145 = _2143 * _2138;
        float _2146 = _2143 * _2139;
        float _2147 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2117].xyz));
        float _4087 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2151 = dot(vec3(_516, _517, _518), vec3(_2144, _2145, _2146));
        float _4098 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2155 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2144, _2145, _2146));
        float _4109 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2159 = _2136 * _2136;
        float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
        float _2170 = exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0);
        float _2177 = 1.0 - _2136;
        float _2187 = (0.5 / (((_1913 * ((_2150 * _2177) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2177) + _2136) * _2150))) * _2150;
        float _4120 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2189 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
        float _2190 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _2111 = (((((_2170 * _1935) + _669) * cbLight._m0[_2121].x) * _2189) * _2190) + _2047;
        _2113 = (((((_2170 * _1937) + _671) * cbLight._m0[_2121].y) * _2189) * _2190) + _2048;
        _2115 = (((((_2170 * _1938) + _672) * cbLight._m0[_2121].z) * _2189) * _2190) + _2049;
    }
    float _2225;
    float _2227;
    float _2229;
    if (_1839)
    {
        _2225 = _2111;
        _2227 = _2113;
        _2229 = _2115;
    }
    else
    {
        uint _2236 = _1744 + 3u;
        uint _2240 = _1744 + 11u;
        float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _519) * 0.949999988079071044921875);
        float _2255 = _2254 * _2254;
        float _2256 = cbLight._m0[_2236].x + _596;
        float _2257 = cbLight._m0[_2236].y + _597;
        float _2258 = cbLight._m0[_2236].z + _598;
        float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
        float _2263 = _2262 * _2256;
        float _2264 = _2262 * _2257;
        float _2265 = _2262 * _2258;
        float _2266 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2236].xyz));
        float _4136 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2270 = dot(vec3(_516, _517, _518), vec3(_2263, _2264, _2265));
        float _4147 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2274 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2263, _2264, _2265));
        float _4158 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2278 = _2255 * _2255;
        float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
        float _2289 = exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0);
        float _2296 = 1.0 - _2255;
        float _2306 = (0.5 / (((_1913 * ((_2269 * _2296) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2296) + _2255) * _2269))) * _2269;
        float _4169 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2308 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
        float _2309 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _2225 = (((((_2289 * _1935) + _669) * cbLight._m0[_2240].x) * _2308) * _2309) + _2111;
        _2227 = (((((_2289 * _1937) + _671) * cbLight._m0[_2240].y) * _2308) * _2309) + _2113;
        _2229 = (((((_2289 * _1938) + _672) * cbLight._m0[_2240].z) * _2308) * _2309) + _2115;
    }
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    if (_1742.y == 0u)
    {
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2384;
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2384;
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2384;
        uvec4 _2399 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2400 = _2399.x;
        uint _2411 = uint((float(_2399.y) * floor(float(uint(cbSceneParam._m0[85u].y * _605) / _2400))) + floor(float(uint(cbSceneParam._m0[85u].x * _604) / _2400)));
        float _2421 = (log2(_2387 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2422 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        uint _2425 = uint(isnan(14.0) ? _2422 : (isnan(_2422) ? 14.0 : min(_2422, 14.0)));
        uvec4 _2430 = texelFetch(g_lightClusterGridBuffer, int(((_2425 << 2u) + (_2411 << 6u)) >> 2u));
        uint _2431 = _2430.x;
        uint _2432 = _2399.z;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        if (((((1u << ((_2432 >> 4u) & 15u)) + 4294967295u) & _2431) == 0u) || ((_2432 & 240u) == 0u))
        {
            _2532 = 0.0;
            _2534 = 0.0;
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
        }
        else
        {
            float _2533;
            float _2535;
            float _2537;
            float _2539;
            float _2541;
            float _2543;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            uint _2683 = 0u;
            uint _2692;
            bool _2693;
            for (;;)
            {
                _2692 = texelFetch(g_lightClassification, int((((_2425 << 5u) + (_2411 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                _2693 = _2692 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2693)
                {
                    frontier_phi_61_pred = _2677;
                    frontier_phi_61_pred_1 = _2682;
                    frontier_phi_61_pred_2 = _2681;
                    frontier_phi_61_pred_3 = _2680;
                    frontier_phi_61_pred_4 = _2679;
                    frontier_phi_61_pred_5 = _2678;
                }
                else
                {
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    uint _2807;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2692;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    for (;;)
                    {
                        uint _2811 = uint(findLSB(_2807)) + (_2683 << 5u);
                        uint _2808 = (_2807 + 4294967295u) & _2807;
                        uint _2813 = _2811 * 48u;
                        vec4 _2827 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 3u)).x));
                        uint _2833 = (_2811 * 48u) + 4u;
                        vec4 _2846 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2833)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 3u)).x));
                        uint _2852 = (_2811 * 48u) + 8u;
                        vec3 _2863 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2852)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 2u)).x));
                        float _2867 = _2827.x - _2385;
                        float _2868 = _2827.y - _2386;
                        float _2869 = _2827.z - _2387;
                        float _2870 = dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869));
                        float _2873 = inversesqrt(_2870);
                        float _2874 = _2873 * _2867;
                        float _2875 = _2873 * _2868;
                        float _2876 = _2873 * _2869;
                        float _2877 = dot(vec3(_626, _629, _632), vec3(_2874, _2875, _2876));
                        float _2882 = 1.0 - (_2870 * _2827.w);
                        float _4195 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                        float _2883 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2884 = sqrt(_2870) * _2846.w;
                        float _2887 = 1.39999997615814208984375 / (_2884 + 1.39999997615814208984375);
                        float _2888 = _2887 * _2887;
                        float _2891 = ((1.0 - _2888) * _2877) + _2888;
                        float _2894 = _2884 * _2884;
                        float _2898 = ((isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))) * _2883) / ((_2894 * 0.699999988079071044921875) + 1.0);
                        float _2902 = (-0.0) - _2385;
                        float _2903 = (-0.0) - _2386;
                        float _2904 = (-0.0) - _2387;
                        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
                        float _2909 = _2908 * _2902;
                        float _2910 = _2908 * _2903;
                        float _2911 = _2908 * _2904;
                        float _2919 = exp2(log2(1.0 / ((_2894 * 3.5) + 5.0)) * 0.25);
                        float _2920 = 1.0 - _701;
                        float _2927 = sqrt(1.0 - ((1.0 - (_2920 * _2920)) * (1.0 - (_2919 * _2919))));
                        float _2928 = _2927 * _2927;
                        float _2929 = _2928 * _2928;
                        float _2930 = _2909 + _2874;
                        float _2931 = _2910 + _2875;
                        float _2932 = _2911 + _2876;
                        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
                        float _2940 = dot(vec3(_626, _629, _632), vec3(_2909, _2910, _2911));
                        float _4211 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2943 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2944 = dot(vec3(_626, _629, _632), vec3(_2936 * _2930, _2936 * _2931, _2936 * _2932));
                        float _4222 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2947 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2951 = ((_2947 * _2947) * (_2929 + (-1.0))) + 1.0;
                        float _2952 = _2887 * _2928;
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2877) + _2953;
                        float _4233 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2957 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2958 = 1.0 - _2928;
                        float _2968 = (0.5 / (((_2957 * ((_2943 * _2958) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2957 * _2958) + _2928) * _2943))) * _2957;
                        float _4244 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2979 = (((_2929 * 3.1415927410125732421875) * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) / ((_2951 * _2951) * ((_2894 * 2.1991131305694580078125) + 3.141590118408203125))) * _2883;
                        _2736 = (_2898 * _2846.x) + _2804;
                        _2737 = (_2898 * _2846.y) + _2805;
                        _2738 = (_2898 * _2846.z) + _2806;
                        _2733 = (_2979 * _2863.x) + _2801;
                        _2734 = (_2979 * _2863.y) + _2802;
                        _2735 = (_2979 * _2863.z) + _2803;
                        if (_2808 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2808;
                        }
                    }
                    frontier_phi_61_pred = _2733;
                    frontier_phi_61_pred_1 = _2738;
                    frontier_phi_61_pred_2 = _2737;
                    frontier_phi_61_pred_3 = _2736;
                    frontier_phi_61_pred_4 = _2735;
                    frontier_phi_61_pred_5 = _2734;
                }
                _2533 = frontier_phi_61_pred;
                _2543 = frontier_phi_61_pred_1;
                _2541 = frontier_phi_61_pred_2;
                _2539 = frontier_phi_61_pred_3;
                _2537 = frontier_phi_61_pred_4;
                _2535 = frontier_phi_61_pred_5;
                uint _2684 = _2683 + 1u;
                if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2677 = _2533;
                    _2678 = _2535;
                    _2679 = _2537;
                    _2680 = _2539;
                    _2681 = _2541;
                    _2682 = _2543;
                    _2683 = _2684;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2532 = _2533;
            _2534 = _2535;
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
        }
        uvec4 _2546 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2547 = _2546.z;
        uint _2549 = (_2547 >> 8u) & 15u;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        if (((4294967295u << _2549) & _2431) == 0u)
        {
            _2645 = _2532;
            _2647 = _2534;
            _2649 = _2536;
            _2651 = _2538;
            _2653 = _2540;
            _2655 = _2542;
        }
        else
        {
            float _2670 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
            float _2671 = _2670 * _2385;
            float _2672 = _2670 * _2386;
            float _2673 = _2670 * _2387;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2549 < ((_2547 >> 12u) & 15u))
            {
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2784 = _2532;
                float _2785 = _2534;
                float _2786 = _2536;
                float _2787 = _2538;
                float _2788 = _2540;
                float _2789 = _2542;
                uint _2790 = _2549;
                uint _2799;
                bool _2800;
                for (;;)
                {
                    _2799 = texelFetch(g_lightClassification, int((((_2425 << 5u) + (_2411 << 9u)) + (_2790 << 2u)) >> 2u)).x;
                    _2800 = _2799 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2800)
                    {
                        frontier_phi_67_pred = _2787;
                        frontier_phi_67_pred_1 = _2788;
                        frontier_phi_67_pred_2 = _2789;
                        frontier_phi_67_pred_3 = _2786;
                        frontier_phi_67_pred_4 = _2785;
                        frontier_phi_67_pred_5 = _2784;
                    }
                    else
                    {
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        float _3002 = _2789;
                        uint _3003 = _2799;
                        uint _3004;
                        vec4 _3029;
                        float _3030;
                        vec4 _3045;
                        vec3 _3057;
                        vec4 _3073;
                        vec4 _3088;
                        float _3134;
                        bool _3135;
                        for (;;)
                        {
                            uint _3014 = ((_2790 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3003));
                            _3004 = (_3003 + 4294967295u) & _3003;
                            uint _3016 = _3014 * 40u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3030 = _3029.w;
                            uint _3032 = (_3014 * 40u) + 4u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3047 = (_3014 * 40u) + 8u;
                            _3057 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x));
                            uint _3060 = (_3014 * 40u) + 16u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3075 = (_3014 * 40u) + 20u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3090 = (_3014 * 40u) + 24u;
                            vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3109 = (_3014 * 40u) + 28u;
                            vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            _3134 = fma(_2387, _3122.z, fma(_2386, _3122.y, _3122.x * _2385)) + _3122.w;
                            _3135 = !((fma(_2387, _3103.z, fma(_2386, _3103.y, _3103.x * _2385)) + _3103.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3135)
                            {
                                float _3162 = _3029.x - _2385;
                                float _3163 = _3029.y - _2386;
                                float _3164 = _3029.z - _2387;
                                float _3165 = dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164));
                                float _3168 = inversesqrt(_3165);
                                float _3169 = _3168 * _3162;
                                float _3170 = _3168 * _3163;
                                float _3171 = _3168 * _3164;
                                float _3175 = 1.0 - (_3165 / (_3030 * _3030));
                                float _4255 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3180 = sqrt(_3165) * _3045.w;
                                float _3182 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                                float _3183 = _3182 * _3182;
                                float _3186 = ((1.0 - _3183) * dot(vec3(_3169, _3170, _3171), vec3(_626, _629, _632))) + _3183;
                                float _3189 = _3180 * _3180;
                                float _3193 = (fma(_2387, _3073.z, fma(_2386, _3073.y, _3073.x * _2385)) + _3073.w) / _3134;
                                float _3194 = (fma(_2387, _3088.z, fma(_2386, _3088.y, _3088.x * _2385)) + _3088.w) / _3134;
                                float _3198 = 1.0 - dot(vec2(_3193, _3194), vec2(_3193, _3194));
                                float _4271 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3200 = _3199 * (((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3176) / ((_3189 * 0.699999988079071044921875) + 1.0));
                                float _3212 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                                float _3213 = 1.0 - _701;
                                float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                                float _3221 = _3220 * _3220;
                                float _3222 = _3221 * _3221;
                                float _3223 = _3169 - _2671;
                                float _3224 = _3170 - _2672;
                                float _3225 = _3171 - _2673;
                                float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                                float _3233 = dot(vec3(_626, _629, _632), vec3((-0.0) - _2671, (-0.0) - _2672, (-0.0) - _2673));
                                float _4282 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3237 = dot(vec3(_626, _629, _632), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                                float _4293 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3240 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                                float _3245 = _3182 * _3221;
                                float _3246 = _3245 * _3245;
                                float _3252 = ((1.0 - _3246) * dot(vec3(_626, _629, _632), vec3(_3169, _3170, _3171))) + _3246;
                                float _4304 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3254 = 1.0 - _3221;
                                float _3264 = (0.5 / (((_3253 * ((_3236 * _3254) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3253 * _3254) + _3221) * _3236))) * _3253;
                                float _4315 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3274 = (_3199 * _3176) * (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) / ((_3244 * _3244) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3274 * _3057.x;
                                frontier_phi_73_pred_1 = _3274 * _3057.y;
                                frontier_phi_73_pred_2 = _3200 * _3045.z;
                                frontier_phi_73_pred_3 = _3200 * _3045.y;
                                frontier_phi_73_pred_4 = _3200 * _3045.x;
                                frontier_phi_73_pred_5 = _3274 * _3057.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3278 = frontier_phi_73_pred;
                            _3279 = frontier_phi_73_pred_1;
                            _3283 = frontier_phi_73_pred_2;
                            _3282 = frontier_phi_73_pred_3;
                            _3281 = frontier_phi_73_pred_4;
                            _3280 = frontier_phi_73_pred_5;
                            _2987 = _3281 + _3000;
                            _2988 = _3282 + _3001;
                            _2989 = _3283 + _3002;
                            _2984 = _3278 + _2997;
                            _2985 = _3279 + _2998;
                            _2986 = _3280 + _2999;
                            if (_3004 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _3004;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2987;
                        frontier_phi_67_pred_1 = _2988;
                        frontier_phi_67_pred_2 = _2989;
                        frontier_phi_67_pred_3 = _2986;
                        frontier_phi_67_pred_4 = _2985;
                        frontier_phi_67_pred_5 = _2984;
                    }
                    _2652 = frontier_phi_67_pred;
                    _2654 = frontier_phi_67_pred_1;
                    _2656 = frontier_phi_67_pred_2;
                    _2650 = frontier_phi_67_pred_3;
                    _2648 = frontier_phi_67_pred_4;
                    _2646 = frontier_phi_67_pred_5;
                    uint _2791 = _2790 + 1u;
                    if (_2791 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2784 = _2646;
                        _2785 = _2648;
                        _2786 = _2650;
                        _2787 = _2652;
                        _2788 = _2654;
                        _2789 = _2656;
                        _2790 = _2791;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2654;
                frontier_phi_55_56_ladder_1 = _2656;
                frontier_phi_55_56_ladder_2 = _2652;
                frontier_phi_55_56_ladder_3 = _2650;
                frontier_phi_55_56_ladder_4 = _2648;
                frontier_phi_55_56_ladder_5 = _2646;
            }
            else
            {
                frontier_phi_55_56_ladder = _2540;
                frontier_phi_55_56_ladder_1 = _2542;
                frontier_phi_55_56_ladder_2 = _2538;
                frontier_phi_55_56_ladder_3 = _2536;
                frontier_phi_55_56_ladder_4 = _2534;
                frontier_phi_55_56_ladder_5 = _2532;
            }
            _2645 = frontier_phi_55_56_ladder_5;
            _2647 = frontier_phi_55_56_ladder_4;
            _2649 = frontier_phi_55_56_ladder_3;
            _2651 = frontier_phi_55_56_ladder_2;
            _2653 = frontier_phi_55_56_ladder;
            _2655 = frontier_phi_55_56_ladder_1;
        }
        float _2660 = isnan(1.0) ? _685 : (isnan(_685) ? 1.0 : min(_685, 1.0));
        _2444 = (_2660 * _2651) + _1877;
        _2446 = (_2660 * _2653) + _1879;
        _2448 = (_2660 * _2655) + _1881;
        _2450 = ((_2645 * _669) * _2660) + _2225;
        _2452 = ((_2647 * _671) * _2660) + _2227;
        _2454 = ((_2649 * _672) * _2660) + _2229;
    }
    else
    {
        _2444 = _1877;
        _2446 = _1879;
        _2448 = _1881;
        _2450 = _2225;
        _2452 = _2227;
        _2454 = _2229;
    }
    float _4331 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4342 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4353 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    uint _2474 = _228 + 6u;
    float _2482 = _604 / cbSceneParam._m0[86u].x;
    float _2483 = _605 / cbSceneParam._m0[86u].y;
    vec4 _2497 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2482, _2483, (log2((isnan(cbSceneParam._m0[77u].w) ? _538 : (isnan(_538) ? cbSceneParam._m0[77u].w : min(_538, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2499 = _2497.x;
    float _2500 = _2497.y;
    float _2501 = _2497.z;
    float _2502 = _2497.w;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    if (_538 > cbSceneParam._m0[78u].w)
    {
        float _2557 = isnan(_538) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _538 : min(cbSceneParam._m0[80u].w, _538));
        float _2558 = _2557 / _538;
        float _2569 = _2558 * _589;
        float _2570 = _590 * _2558;
        float _2571 = (-0.0) - _2570;
        float _2573 = _2558 * _591;
        float _2575 = (cbSceneParam._m0[77u].w * _2571) / _2557;
        float _2576 = _2575 + cbSceneParam._m0[79u].w;
        float _2577 = cbSceneParam._m0[79u].w - _2570;
        float _2583 = sqrt(((_2569 * _2569) + (_2570 * _2570)) + (_2573 * _2573));
        float _2586 = (1.0 - (cbSceneParam._m0[77u].w / _2557)) * _2583;
        float _2591 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2593 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2746;
        if (abs((_2571 - _2575) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2746 = ((((_2576 > 0.0) ? exp2(_2591 * _2576) : (2.0 - exp2(_2593 * _2576))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2586;
        }
        else
        {
            float _2706 = 1.0 / cbSceneParam._m0[80u].x;
            float _2707 = isnan(_2577) ? _2576 : (isnan(_2576) ? _2577 : max(_2576, _2577));
            float _2708 = isnan(_2577) ? _2576 : (isnan(_2576) ? _2577 : min(_2576, _2577));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            float _2718 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : min(_2708, 0.0));
            _2746 = ((abs(_2583 / _2571) * cbSceneParam._m0[80u].y) * ((((_2717 - _2718) * 2.0) - ((exp2(_2591 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0)))) - exp2(_2591 * (isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0))))) * _2706)) - ((exp2(_2593 * _2717) - exp2(_2593 * _2718)) * _2706))) + (_2586 * cbSceneParam._m0[80u].z);
        }
        vec4 _2748 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2482, _2483, 1.0), 0.0);
        float _2757 = exp2((_2746 * (-1.44269502162933349609375)) * (1.0 - _2748.w));
        float _2758 = log2(_2757);
        float _2774 = log2(_2502);
        _2595 = (exp2(_2774 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].x)) * _2748.x) / cbSceneParam._m0[78u].x)) + _2499;
        _2597 = (exp2(_2774 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].y)) * _2748.y) / cbSceneParam._m0[78u].y)) + _2500;
        _2599 = (exp2(_2774 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].z)) * _2748.z) / cbSceneParam._m0[78u].z)) + _2501;
        _2601 = _2757 * _2502;
    }
    else
    {
        _2595 = _2499;
        _2597 = _2500;
        _2599 = _2501;
        _2601 = _2502;
    }
    float _2613 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2614 = _2613 == 3.0;
    float _2615 = log2(_2601);
    float _2622 = exp2(_2615 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2444 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _685))) + ((_2450 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1493)) * cbPerFrame._m0[3u].x));
    float _2623 = exp2(_2615 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2446 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _685))) + ((_2452 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1493)) * cbPerFrame._m0[3u].x));
    float _2624 = exp2(_2615 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2448 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _685))) + ((_2454 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1493)) * cbPerFrame._m0[3u].x));
    float _2633 = (_2613 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2633 * (_2614 ? _2622 : (_2622 + (cbSceneParam._m0[72u].w * _2595)));
    SV_Target.y = _2633 * (_2614 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2597)));
    SV_Target.z = _2633 * (_2614 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2599)));
    SV_Target.w = cbInstanceData._m0[_2474].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2474].w;
}


