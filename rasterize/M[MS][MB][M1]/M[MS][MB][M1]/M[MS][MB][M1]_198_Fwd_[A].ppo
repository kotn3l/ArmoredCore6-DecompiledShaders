#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1397;
float _3775;
float _3776;
float _3777;
float _3778;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _363 = _361.x;
    float _375 = dot(vec4(_363, _361.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_363 - _375) * cbMtdParam._m0[24u].y) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3787 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _400 = (_393 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _401 = (_393 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _402 = (_393 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _451 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _465 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_441 - _451) * cbMtdParam._m0[24u].y) + _451) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3798 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _473 = (_466 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _474 = (_466 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _475 = (_466 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _555 = _553.x;
    float _556 = _553.y;
    float _557 = _553.z;
    float _564 = ((_536.x - _555) * _393) + _555;
    float _565 = ((_536.y - _556) * _393) + _556;
    float _566 = ((_536.z - _557) * _393) + _557;
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _591 = ((_578.z - _566) * _466) + _566;
    float _594 = ((((_578.x - _564) * _466) + _564) * 2.0) + (-1.0);
    float _595 = ((((_578.y - _565) * _466) + _565) * 2.0) + (-1.0);
    float _596 = dot(vec2(_594, _595), vec2(_594, _595));
    float _3809 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _601 = sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))));
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _640 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _642 = _640.x;
    float _643 = 1.0 - _642;
    float _656 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_642 - _643) * cbMtdParam._m0[24u].z) + _643) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3820 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _664 = (_657 * ((_494.x * cbMtdParam._m0[18u].x) - _473)) + _473;
    float _665 = (_657 * ((_494.y * cbMtdParam._m0[18u].y) - _474)) + _474;
    float _666 = (_657 * ((_494.z * cbMtdParam._m0[18u].z) - _475)) + _475;
    vec4 _678 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _692 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _694 = _692.x;
    float _712 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _694) * _393) + _694;
    float _729 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _712) * _466) + _712;
    float _733 = ((_678.x - _729) * cbMtdParam._m0[19u].z) + _729;
    float _735 = _733 - (_733 * _657);
    float _740 = (((_513.z - _591) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _591;
    float _744 = ((_615.z - _740) * cbMtdParam._m0[19u].w) + _740;
    vec4 _757 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _764 = (_757.x * 2.0) + (-1.0);
    float _765 = (_757.y * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _3831 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _774 = (_657 * (_757.z - _744)) + _744;
    float _783 = (_594 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_513.x * 2.0) + (-1.0)))) + (((_615.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _784 = (_595 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_513.y * 2.0) + (-1.0)))) + (((_615.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _796 = (((_764 - _783) + (cbMtdParam._m0[21u].x * _783)) * _657) + _783;
    float _797 = (((_765 - _784) + (cbMtdParam._m0[21u].x * _784)) * _657) + _784;
    float _798 = (_657 * (sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) - _601)) + _601;
    float _803 = cbMtdParam._m0[22u].x + _615.w;
    float _806 = fma(_798, _241 * NORMAL.x, fma(_797, _248 * TANGENT.x, (_234 * _226) * _796));
    float _809 = fma(_798, _241 * NORMAL.y, fma(_797, _248 * TANGENT.y, (_234 * _227) * _796));
    float _812 = fma(_798, _241 * NORMAL.z, fma(_797, _248 * TANGENT.z, (_234 * _228) * _796));
    float _816 = inversesqrt(dot(vec3(_806, _809, _812), vec3(_806, _809, _812)));
    float _817 = _816 * _806;
    float _818 = _816 * _809;
    float _819 = _816 * _812;
    float _3842 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _820 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _3864 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3875 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3886 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3897 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _825 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _839 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _890 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _880);
    float _891 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _880);
    float _892 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _880);
    float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
    float _897 = _890 * _896;
    float _898 = _891 * _896;
    float _899 = _892 * _896;
    vec4 _904 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _906 = _904.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1078 = sqrt(((_890 * _890) + (_891 * _891)) + (_892 * _892));
        float _1084 = (cbMatDynParam._m0[5u].x * _1078) + cbMatDynParam._m0[5u].y;
        float _3908 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1089 = (cbMatDynParam._m0[5u].z * _1078) + cbMatDynParam._m0[5u].w;
        float _3919 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) - _1085)) + _1085) < ((_906 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _917 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _918 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _936 = fma(_819, cbSceneParam._m0[5u].z, fma(_818, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _817));
    float _939 = fma(_819, cbSceneParam._m0[6u].z, fma(_818, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _817));
    float _942 = fma(_819, cbSceneParam._m0[7u].z, fma(_818, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _817));
    uint _955 = _254 + 9u;
    uint _956 = _955 + uint(cbMatDynParam._m0[0u].w);
    float _962 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_956].x;
    float _963 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * cbInstanceData._m0[_956].y;
    float _964 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_956].z;
    float _3930 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _968 = 1.0 - _825;
    float _969 = _965 * _968;
    float _970 = _966 * _968;
    float _971 = _967 * _968;
    float _976 = (_965 + (-0.039999999105930328369140625)) * _825;
    float _977 = (_966 + (-0.039999999105930328369140625)) * _825;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _825;
    float _979 = _976 + 0.039999999105930328369140625;
    float _981 = _977 + 0.039999999105930328369140625;
    float _982 = _978 + 0.039999999105930328369140625;
    vec4 _991 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _917, cbSceneParam._m0[86u].y * _918));
    float _995 = ((isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * TEXCOORD_5.w) * _991.x;
    float _996 = dot(vec3(_817, _818, _819), vec3(_897, _898, _899));
    float _999 = _996 * 2.0;
    float _1003 = (_999 * _817) - _897;
    float _1004 = (_999 * _818) - _898;
    float _1005 = (_999 * _819) - _899;
    float _1009 = abs(dot(vec3(_897, _898, _899), vec3(_817, _818, _819)));
    float _3963 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1011 = sqrt(_820);
    float _1024 = exp2((_1011 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1011 * 3.0));
    float _1030 = (1.0 - _1024) * ((_1011 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1031 = _1024 * _1011;
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1396;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1121 = fma(_1067, cbModelParam._m0[26u].z, fma(_1063, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059));
        float _1125 = fma(_1067, cbModelParam._m0[27u].z, fma(_1063, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059));
        float _1129 = fma(_1067, cbModelParam._m0[28u].z, fma(_1063, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059));
        float _1154 = _1059 + _817;
        float _1155 = _1063 + _818;
        float _1156 = _1067 + _819;
        float _1166 = fma(_1156, cbModelParam._m0[26u].z, fma(_1155, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1154)) - _1121;
        float _1167 = fma(_1156, cbModelParam._m0[27u].z, fma(_1155, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1154)) - _1125;
        float _1168 = fma(_1156, cbModelParam._m0[28u].z, fma(_1155, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1154)) - _1129;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1121 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1125 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[34u].z) + ((((((_1129 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1224 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1190.x + (-0.5));
        float _1226 = _1224 * (_1190.y + (-0.5));
        float _1227 = _1224 * (_1190.z + (-0.5));
        float _1234 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1197.x + (-0.5));
        float _1236 = _1234 * (_1197.y + (-0.5));
        float _1237 = _1234 * (_1197.z + (-0.5));
        float _1244 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1204.x + (-0.5));
        float _1246 = _1244 * (_1204.y + (-0.5));
        float _1247 = _1244 * (_1204.z + (-0.5));
        float _1254 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1211.x + (-0.5));
        float _1256 = _1254 * (_1211.y + (-0.5));
        float _1257 = _1254 * (_1211.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1278 = (dot(vec3(_817, _818, _819), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1288 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4011 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1290 + 1.0))) + _1295) * _1258;
        float _1305 = _1226 * 0.5;
        float _1306 = _1236 * 0.5;
        float _1307 = _1246 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_817, _818, _819), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4044 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1332 + 1.0))) + _1337) * _1259;
        float _1347 = _1227 * 0.5;
        float _1348 = _1237 * 0.5;
        float _1349 = _1247 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_817, _818, _819), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4077 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1374 + 1.0))) + _1379) * _1260;
        _1396 = _1227;
        _1398 = _1226;
        _1399 = _1225;
        _1400 = _1237;
        _1401 = _1236;
        _1402 = _1235;
        _1403 = _1247;
        _1404 = _1246;
        _1405 = _1245;
        _1406 = _1260;
        _1407 = _1259;
        _1408 = _1258;
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1397;
        _1398 = _1397;
        _1399 = _1397;
        _1400 = _1397;
        _1401 = _1397;
        _1402 = _1397;
        _1403 = _1397;
        _1404 = _1397;
        _1405 = _1397;
        _1406 = _1397;
        _1407 = _1397;
        _1408 = _1397;
        _1409 = 0.0;
        _1410 = 0.0;
        _1411 = 0.0;
    }
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1438 = fma(_1067, cbModelParam._m0[30u].z, fma(_1063, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059));
        float _1442 = fma(_1067, cbModelParam._m0[31u].z, fma(_1063, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059));
        float _1446 = fma(_1067, cbModelParam._m0[32u].z, fma(_1063, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059));
        float _1469 = _1059 + _817;
        float _1470 = _1063 + _818;
        float _1471 = _1067 + _819;
        float _1481 = fma(_1471, cbModelParam._m0[30u].z, fma(_1470, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1469)) - _1438;
        float _1482 = fma(_1471, cbModelParam._m0[31u].z, fma(_1470, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1469)) - _1442;
        float _1483 = fma(_1471, cbModelParam._m0[32u].z, fma(_1470, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1469)) - _1446;
        float _1487 = inversesqrt(dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483)));
        float _1500 = ((_1487 * _1481) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1438 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1501 = ((_1487 * _1482) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1442 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1502 = ((_1487 * _1483) / cbModelParam._m0[35u].z) + ((((((_1446 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        float _1537 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1504.x + (-0.5));
        float _1539 = _1537 * (_1504.y + (-0.5));
        float _1540 = _1537 * (_1504.z + (-0.5));
        float _1547 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1511.x + (-0.5));
        float _1549 = _1547 * (_1511.y + (-0.5));
        float _1550 = _1547 * (_1511.z + (-0.5));
        float _1557 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1518.x + (-0.5));
        float _1559 = _1557 * (_1518.y + (-0.5));
        float _1560 = _1557 * (_1518.z + (-0.5));
        float _1567 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1525.x + (-0.5));
        float _1569 = _1567 * (_1525.y + (-0.5));
        float _1570 = _1567 * (_1525.z + (-0.5));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = _1538 * 0.5;
        float _1575 = _1548 * 0.5;
        float _1576 = _1558 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_817, _818, _819), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4140 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1601 + 1.0))) + _1606) * _1571;
        float _1616 = _1539 * 0.5;
        float _1617 = _1549 * 0.5;
        float _1618 = _1559 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_817, _818, _819), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4173 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1643 + 1.0))) + _1648) * _1572;
        float _1658 = _1540 * 0.5;
        float _1659 = _1550 * 0.5;
        float _1660 = _1560 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_817, _818, _819), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4206 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1685 + 1.0))) + _1690) * _1573;
        _1707 = _1540;
        _1708 = _1539;
        _1709 = _1538;
        _1710 = _1550;
        _1711 = _1549;
        _1712 = _1548;
        _1713 = _1560;
        _1714 = _1559;
        _1715 = _1558;
        _1716 = _1573;
        _1717 = _1572;
        _1718 = _1571;
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
    }
    else
    {
        _1707 = _1397;
        _1708 = _1397;
        _1709 = _1397;
        _1710 = _1397;
        _1711 = _1397;
        _1712 = _1397;
        _1713 = _1397;
        _1714 = _1397;
        _1715 = _1397;
        _1716 = _1397;
        _1717 = _1397;
        _1718 = _1397;
        _1719 = 0.0;
        _1720 = 0.0;
        _1721 = 0.0;
    }
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1409)) + _1409;
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1410)) + _1410;
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1411)) + _1411;
    float _1754 = fma(_1733, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1731 * cbSceneParam._m0[89u].x));
    float _1757 = fma(_1733, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1731 * cbSceneParam._m0[90u].x));
    float _1760 = fma(_1733, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1731));
    float _1775 = _1003 * 0.5;
    float _1776 = _1004 * 0.5;
    float _1777 = _1005 * 0.5;
    float _1778 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1781 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1784 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1818;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1791 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1396, _1400, _1403, _1406));
        float _1795 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1799 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1806 = dot(vec4(cbModelParam._m0[39u]), vec4(_1775, _1776, _1777, 1.0));
        _1818 = dot(vec3(isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1806) ? 0.0 : (isnan(0.0) ? _1806 : max(0.0, _1806))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1818 = 1.0;
    }
    float _1829;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1820 = dot(vec4(cbModelParam._m0[40u]), vec4(_1775, _1776, _1777, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1820) ? 0.0 : (isnan(0.0) ? _1820 : max(0.0, _1820))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1833 = (_1829 * cbModelParam._m0[1u].x) + (_1818 * (1.0 - cbModelParam._m0[1u].x));
    float _1843 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _820);
    float _1844 = isnan(_1843) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1843 : min(cbModelParam._m0[25u].z, _1843));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1891 = fma(_1067, cbModelParam._m0[13u].z, fma(_1063, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1059)) + cbModelParam._m0[13u].w;
        float _1895 = fma(_1067, cbModelParam._m0[14u].z, fma(_1063, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1059)) + cbModelParam._m0[14u].w;
        float _1899 = fma(_1067, cbModelParam._m0[15u].z, fma(_1063, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1059)) + cbModelParam._m0[15u].w;
        float _1902 = fma(_1005, cbModelParam._m0[13u].z, fma(_1004, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1003));
        float _1905 = fma(_1005, cbModelParam._m0[14u].z, fma(_1004, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1003));
        float _1908 = fma(_1005, cbModelParam._m0[15u].z, fma(_1004, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1003));
        float _1936;
        if (_1902 > 0.0)
        {
            _1936 = abs((1.0 - _1891) / _1902);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1891 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1936 = frontier_phi_17_15_ladder;
        }
        float _2138;
        if (_1905 > 0.0)
        {
            _2138 = abs((1.0 - _1895) / _1905);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1895 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2138 = frontier_phi_26_22_ladder;
        }
        float _2392;
        if (_1908 > 0.0)
        {
            _2392 = abs((1.0 - _1899) / _1908);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1899 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2392 = frontier_phi_38_33_ladder;
        }
        float _2394 = isnan(_2138) ? _1936 : (isnan(_1936) ? _2138 : min(_1936, _2138));
        float _2395 = isnan(_2392) ? _2394 : (isnan(_2394) ? _2392 : min(_2394, _2392));
        float _2399 = (_2395 * _1902) + _1891;
        float _2400 = (_2395 * _1905) + _1895;
        float _2401 = (_2395 * _1908) + _1899;
        float _2402 = _2395 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2402;
        float _2406 = _2402 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 > _2406) || ((_2400 < _2404) || ((_2399 < _2404) || (_2399 > _2406))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2401, cbModelParam._m0[9u].z, fma(_2400, cbModelParam._m0[9u].y, _2399 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2401, cbModelParam._m0[10u].z, fma(_2400, cbModelParam._m0[10u].y, _2399 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2401, cbModelParam._m0[11u].z, fma(_2400, cbModelParam._m0[11u].y, _2399 * cbModelParam._m0[11u].x))), _1844);
            frontier_phi_16_38_ladder = _2529.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2529.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2529.x * cbModelParam._m0[1u].y;
        }
        _1924 = frontier_phi_16_38_ladder_2;
        _1926 = frontier_phi_16_38_ladder_1;
        _1928 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1003, _1004, _1005), _1844);
        _1924 = _1912.x * cbModelParam._m0[1u].y;
        _1926 = _1912.y * cbModelParam._m0[1u].y;
        _1928 = _1912.z * cbModelParam._m0[1u].y;
    }
    float _1932 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _820);
    float _1933 = isnan(_1932) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1932 : min(cbModelParam._m0[25u].w, _1932));
    float _2022;
    float _2024;
    float _2026;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1986 = fma(_1067, cbModelParam._m0[21u].z, fma(_1063, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1059)) + cbModelParam._m0[21u].w;
        float _1990 = fma(_1067, cbModelParam._m0[22u].z, fma(_1063, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1059)) + cbModelParam._m0[22u].w;
        float _1994 = fma(_1067, cbModelParam._m0[23u].z, fma(_1063, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1059)) + cbModelParam._m0[23u].w;
        float _1997 = fma(_1005, cbModelParam._m0[21u].z, fma(_1004, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1003));
        float _2000 = fma(_1005, cbModelParam._m0[22u].z, fma(_1004, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1003));
        float _2003 = fma(_1005, cbModelParam._m0[23u].z, fma(_1004, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1003));
        float _2143;
        if (_1997 > 0.0)
        {
            _2143 = abs((1.0 - _1986) / _1997);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1986 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2143 = frontier_phi_28_24_ladder;
        }
        float _2419;
        if (_2000 > 0.0)
        {
            _2419 = abs((1.0 - _1990) / _2000);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1990 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2419 = frontier_phi_40_35_ladder;
        }
        float _2632;
        if (_2003 > 0.0)
        {
            _2632 = abs((1.0 - _1994) / _2003);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1994 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2632 = frontier_phi_49_46_ladder;
        }
        float _2634 = isnan(_2419) ? _2143 : (isnan(_2143) ? _2419 : min(_2143, _2419));
        float _2635 = isnan(_2632) ? _2634 : (isnan(_2634) ? _2632 : min(_2634, _2632));
        float _2639 = (_2635 * _1997) + _1986;
        float _2640 = (_2635 * _2000) + _1990;
        float _2641 = (_2635 * _2003) + _1994;
        float _2642 = _2635 * 9.9999997473787516355514526367188e-05;
        float _2643 = (-1.0) - _2642;
        float _2645 = _2642 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2641 > _2645) || ((_2641 < _2643) || ((_2640 > _2645) || ((_2640 < _2643) || ((_2639 < _2643) || (_2639 > _2645))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2641, cbModelParam._m0[17u].z, fma(_2640, cbModelParam._m0[17u].y, _2639 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2641, cbModelParam._m0[18u].z, fma(_2640, cbModelParam._m0[18u].y, _2639 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2641, cbModelParam._m0[19u].z, fma(_2640, cbModelParam._m0[19u].y, _2639 * cbModelParam._m0[19u].x))), _1933);
            frontier_phi_25_49_ladder = _2840.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2840.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2840.x * cbModelParam._m0[1u].z;
        }
        _2022 = frontier_phi_25_49_ladder_2;
        _2024 = frontier_phi_25_49_ladder_1;
        _2026 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2006 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1003, _1004, _1005), _1933);
        _2022 = _2006.x * cbModelParam._m0[1u].z;
        _2024 = _2006.y * cbModelParam._m0[1u].z;
        _2026 = _2006.z * cbModelParam._m0[1u].z;
    }
    float _2039 = (((_1030 * _979) + _1031) * _995) * ((cbModelParam._m0[1u].w * (_2022 - _1924)) + _1924);
    float _2041 = (((_1030 * _981) + _1031) * _995) * ((cbModelParam._m0[1u].w * (_2024 - _1926)) + _1926);
    float _2043 = (((_1030 * _982) + _1031) * _995) * ((cbModelParam._m0[1u].w * (_2026 - _1928)) + _1928);
    float _2046 = fma(_2043, cbSceneParam._m0[89u].z, fma(_2041, cbSceneParam._m0[89u].y, _2039 * cbSceneParam._m0[89u].x));
    float _2049 = fma(_2043, cbSceneParam._m0[90u].z, fma(_2041, cbSceneParam._m0[90u].y, _2039 * cbSceneParam._m0[90u].x));
    float _2052 = fma(_2043, cbSceneParam._m0[91u].z, fma(_2041, cbSceneParam._m0[91u].y, _2039 * cbSceneParam._m0[91u].x));
    uvec4 _2062 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2064 = _2062.x * 14u;
    uint _2065 = _2064 + 13u;
    float _2072 = _995 + (-1.0);
    float _2077 = (cbLight._m0[_2065].x * _2072) + 1.0;
    float _2078 = (cbLight._m0[_2065].y * _2072) + 1.0;
    float _2079 = (cbLight._m0[_2065].z * _2072) + 1.0;
    float _2080 = (cbLight._m0[_2065].w * _2072) + 1.0;
    uint _2081 = _2064 + 5u;
    float _2087 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
    uint _2091 = _2064 + 4u;
    float _2097 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
    uint _2101 = _2064 | 1u;
    float _2112 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_817, _818, _819));
    float _2115 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_817, _818, _819));
    float _4342 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _4353 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2120 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * 0.3183098733425140380859375;
    float _2122 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * 0.3183098733425140380859375;
    float _2129 = ((cbLight._m0[_2081].x * _2087) * _2122) + ((cbLight._m0[_2091].x * _2097) * _2120);
    float _2130 = ((_2087 * cbLight._m0[_2081].y) * _2122) + ((_2097 * cbLight._m0[_2091].y) * _2120);
    float _2131 = ((_2087 * cbLight._m0[_2081].z) * _2122) + ((_2097 * cbLight._m0[_2091].z) * _2120);
    uvec4 _2135 = floatBitsToUint(cbLight._m0[_2064 + 12u]);
    bool _2137 = _2135.x == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2137)
    {
        _2148 = _2129;
        _2150 = _2130;
        _2152 = _2131;
    }
    else
    {
        uint _2156 = _2064 + 6u;
        float _2172 = (dot(vec3(cbLight._m0[_2064 + 2u].xyz), vec3(_817, _818, _819)) * 0.5) + 0.5;
        float _2173 = _2172 * _2172;
        float _4364 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2174 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2175 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2148 = (((cbLight._m0[_2156].x * 0.3183098733425140380859375) * _2174) * _2175) + _2129;
        _2150 = (((cbLight._m0[_2156].y * 0.3183098733425140380859375) * _2174) * _2175) + _2130;
        _2152 = (((cbLight._m0[_2156].z * 0.3183098733425140380859375) * _2174) * _2175) + _2131;
    }
    bool _2155 = _2135.y == 0u;
    float _2193;
    float _2195;
    float _2197;
    if (_2155)
    {
        _2193 = _2148;
        _2195 = _2150;
        _2197 = _2152;
    }
    else
    {
        uint _2363 = _2064 + 7u;
        float _2379 = (dot(vec3(cbLight._m0[_2064 + 3u].xyz), vec3(_817, _818, _819)) * 0.5) + 0.5;
        float _2380 = _2379 * _2379;
        float _4380 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2381 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2382 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2193 = (((cbLight._m0[_2363].x * 0.3183098733425140380859375) * _2381) * _2382) + _2148;
        _2195 = (((cbLight._m0[_2363].y * 0.3183098733425140380859375) * _2381) * _2382) + _2150;
        _2197 = (((cbLight._m0[_2363].z * 0.3183098733425140380859375) * _2381) * _2382) + _2152;
    }
    uint _2200 = _2064 + 8u;
    float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _820) * 0.949999988079071044921875);
    float _2214 = _2213 * _2213;
    float _2215 = cbLight._m0[_2064].x + _897;
    float _2216 = cbLight._m0[_2064].y + _898;
    float _2217 = cbLight._m0[_2064].z + _899;
    float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
    float _2222 = _2221 * _2215;
    float _2223 = _2221 * _2216;
    float _2224 = _2221 * _2217;
    float _2225 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2064].xyz));
    float _4396 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _4407 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _2229 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2230 = dot(vec3(_817, _818, _819), vec3(_2222, _2223, _2224));
    float _4418 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2222, _2223, _2224));
    float _4429 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2214 * _2214;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2250 = exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0);
    float _2251 = 0.959999978542327880859375 - _976;
    float _2253 = 0.959999978542327880859375 - _977;
    float _2254 = 0.959999978542327880859375 - _978;
    float _2261 = 1.0 - _2214;
    float _2272 = (0.5 / (((_2229 * ((_2228 * _2261) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2261) + _2214) * _2228))) * _2228;
    float _4440 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    uint _2285 = _2064 + 9u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _820) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_2101].x + _897;
    float _2299 = cbLight._m0[_2101].y + _898;
    float _2300 = cbLight._m0[_2101].z + _899;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2101].xyz));
    float _4451 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2312 = dot(vec3(_817, _818, _819), vec3(_2305, _2306, _2307));
    float _4462 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2305, _2306, _2307));
    float _4473 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2297 * _2297;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
    float _2338 = 1.0 - _2297;
    float _2348 = (0.5 / (((_2229 * ((_2311 * _2338) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2338) + _2297) * _2311))) * _2311;
    float _4484 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    float _2360 = (((((_2331 * _2251) + _979) * cbLight._m0[_2285].x) * _2350) * _2087) + (((((_2250 * _2251) + _979) * cbLight._m0[_2200].x) * _2274) * _2097);
    float _2361 = (((((_2331 * _2253) + _981) * cbLight._m0[_2285].y) * _2350) * _2087) + (((((_2250 * _2253) + _981) * cbLight._m0[_2200].y) * _2274) * _2097);
    float _2362 = (((((_2331 * _2254) + _982) * cbLight._m0[_2285].z) * _2350) * _2087) + (((((_2250 * _2254) + _982) * cbLight._m0[_2200].z) * _2274) * _2097);
    float _2424;
    float _2426;
    float _2428;
    if (_2137)
    {
        _2424 = _2360;
        _2426 = _2361;
        _2428 = _2362;
    }
    else
    {
        uint _2430 = _2064 + 2u;
        uint _2434 = _2064 + 10u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _820) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _897;
        float _2451 = cbLight._m0[_2430].y + _898;
        float _2452 = cbLight._m0[_2430].z + _899;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2430].xyz));
        float _4495 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2464 = dot(vec3(_817, _818, _819), vec3(_2457, _2458, _2459));
        float _4506 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4517 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0);
        float _2490 = 1.0 - _2449;
        float _2500 = (0.5 / (((_2229 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2490) + _2449) * _2463))) * _2463;
        float _4528 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2424 = (((((_2483 * _2251) + _979) * cbLight._m0[_2434].x) * _2502) * _2503) + _2360;
        _2426 = (((((_2483 * _2253) + _981) * cbLight._m0[_2434].y) * _2502) * _2503) + _2361;
        _2428 = (((((_2483 * _2254) + _982) * cbLight._m0[_2434].z) * _2502) * _2503) + _2362;
    }
    float _2538;
    float _2540;
    float _2542;
    if (_2155)
    {
        _2538 = _2424;
        _2540 = _2426;
        _2542 = _2428;
    }
    else
    {
        uint _2549 = _2064 + 3u;
        uint _2553 = _2064 + 11u;
        float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2549].w)) * _820) * 0.949999988079071044921875);
        float _2568 = _2567 * _2567;
        float _2569 = cbLight._m0[_2549].x + _897;
        float _2570 = cbLight._m0[_2549].y + _898;
        float _2571 = cbLight._m0[_2549].z + _899;
        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
        float _2576 = _2575 * _2569;
        float _2577 = _2575 * _2570;
        float _2578 = _2575 * _2571;
        float _2579 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2549].xyz));
        float _4544 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2583 = dot(vec3(_817, _818, _819), vec3(_2576, _2577, _2578));
        float _4555 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2587 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_2576, _2577, _2578));
        float _4566 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2591 = _2568 * _2568;
        float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
        float _2602 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
        float _2609 = 1.0 - _2568;
        float _2619 = (0.5 / (((_2229 * ((_2582 * _2609) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2609) + _2568) * _2582))) * _2582;
        float _4577 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2621 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
        float _2622 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2538 = (((((_2602 * _2251) + _979) * cbLight._m0[_2553].x) * _2621) * _2622) + _2424;
        _2540 = (((((_2602 * _2253) + _981) * cbLight._m0[_2553].y) * _2621) * _2622) + _2426;
        _2542 = (((((_2602 * _2254) + _982) * cbLight._m0[_2553].z) * _2621) * _2622) + _2428;
    }
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    if (_2062.y == 0u)
    {
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2697;
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2697;
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2697;
        uvec4 _2712 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2713 = _2712.x;
        uint _2724 = uint((float(_2712.y) * floor(float(uint(cbSceneParam._m0[85u].y * _918) / _2713))) + floor(float(uint(cbSceneParam._m0[85u].x * _917) / _2713)));
        float _2734 = (log2(_2700 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2735 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        uint _2738 = uint(isnan(14.0) ? _2735 : (isnan(_2735) ? 14.0 : min(_2735, 14.0)));
        uvec4 _2743 = texelFetch(g_lightClusterGridBuffer, int(((_2738 << 2u) + (_2724 << 6u)) >> 2u));
        uint _2744 = _2743.x;
        uint _2745 = _2712.z;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        if (((((1u << ((_2745 >> 4u) & 15u)) + 4294967295u) & _2744) == 0u) || ((_2745 & 240u) == 0u))
        {
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
        }
        else
        {
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            uint _3004 = 0u;
            uint _3013;
            bool _3014;
            for (;;)
            {
                _3013 = texelFetch(g_lightClassification, int((((_2738 << 5u) + (_2724 << 9u)) + (_3004 << 2u)) >> 2u)).x;
                _3014 = _3013 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3014)
                {
                    frontier_phi_66_pred = _2998;
                    frontier_phi_66_pred_1 = _3003;
                    frontier_phi_66_pred_2 = _3002;
                    frontier_phi_66_pred_3 = _3001;
                    frontier_phi_66_pred_4 = _3000;
                    frontier_phi_66_pred_5 = _2999;
                }
                else
                {
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    uint _3149;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3013;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    for (;;)
                    {
                        uint _3153 = uint(findLSB(_3149)) + (_3004 << 5u);
                        uint _3150 = (_3149 + 4294967295u) & _3149;
                        uint _3155 = _3153 * 48u;
                        vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 3u)).x));
                        uint _3175 = (_3153 * 48u) + 4u;
                        vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3194 = (_3153 * 48u) + 8u;
                        vec3 _3205 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x));
                        float _3209 = _3169.x - _2698;
                        float _3210 = _3169.y - _2699;
                        float _3211 = _3169.z - _2700;
                        float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                        float _3215 = inversesqrt(_3212);
                        float _3216 = _3215 * _3209;
                        float _3217 = _3215 * _3210;
                        float _3218 = _3215 * _3211;
                        float _3219 = dot(vec3(_936, _939, _942), vec3(_3216, _3217, _3218));
                        float _3224 = 1.0 - (_3212 * _3169.w);
                        float _4603 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3225 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3226 = sqrt(_3212) * _3188.w;
                        float _3229 = 1.39999997615814208984375 / (_3226 + 1.39999997615814208984375);
                        float _3230 = _3229 * _3229;
                        float _3233 = ((1.0 - _3230) * _3219) + _3230;
                        float _3236 = _3226 * _3226;
                        float _3240 = ((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3225) / ((_3236 * 0.699999988079071044921875) + 1.0);
                        float _3244 = (-0.0) - _2698;
                        float _3245 = (-0.0) - _2699;
                        float _3246 = (-0.0) - _2700;
                        float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                        float _3251 = _3250 * _3244;
                        float _3252 = _3250 * _3245;
                        float _3253 = _3250 * _3246;
                        float _3261 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                        float _3262 = 1.0 - _1011;
                        float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                        float _3270 = _3269 * _3269;
                        float _3271 = _3270 * _3270;
                        float _3272 = _3251 + _3216;
                        float _3273 = _3252 + _3217;
                        float _3274 = _3253 + _3218;
                        float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                        float _3282 = dot(vec3(_936, _939, _942), vec3(_3251, _3252, _3253));
                        float _4619 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3286 = dot(vec3(_936, _939, _942), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                        float _4630 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                        float _3294 = _3229 * _3270;
                        float _3295 = _3294 * _3294;
                        float _3298 = ((1.0 - _3295) * _3219) + _3295;
                        float _4641 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3299 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3300 = 1.0 - _3270;
                        float _3310 = (0.5 / (((_3299 * ((_3285 * _3300) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3299 * _3300) + _3270) * _3285))) * _3299;
                        float _4652 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3321 = (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) / ((_3293 * _3293) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125))) * _3225;
                        _3073 = (_3240 * _3188.x) + _3146;
                        _3074 = (_3240 * _3188.y) + _3147;
                        _3075 = (_3240 * _3188.z) + _3148;
                        _3070 = (_3321 * _3205.x) + _3143;
                        _3071 = (_3321 * _3205.y) + _3144;
                        _3072 = (_3321 * _3205.z) + _3145;
                        if (_3150 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3150;
                        }
                    }
                    frontier_phi_66_pred = _3070;
                    frontier_phi_66_pred_1 = _3075;
                    frontier_phi_66_pred_2 = _3074;
                    frontier_phi_66_pred_3 = _3073;
                    frontier_phi_66_pred_4 = _3072;
                    frontier_phi_66_pred_5 = _3071;
                }
                _2846 = frontier_phi_66_pred;
                _2856 = frontier_phi_66_pred_1;
                _2854 = frontier_phi_66_pred_2;
                _2852 = frontier_phi_66_pred_3;
                _2850 = frontier_phi_66_pred_4;
                _2848 = frontier_phi_66_pred_5;
                uint _3005 = _3004 + 1u;
                if (_3005 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2998 = _2846;
                    _2999 = _2848;
                    _3000 = _2850;
                    _3001 = _2852;
                    _3002 = _2854;
                    _3003 = _2856;
                    _3004 = _3005;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
        }
        uvec4 _2859 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2860 = _2859.z;
        uint _2862 = (_2860 >> 8u) & 15u;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((4294967295u << _2862) & _2744) == 0u)
        {
            _2966 = _2845;
            _2968 = _2847;
            _2970 = _2849;
            _2972 = _2851;
            _2974 = _2853;
            _2976 = _2855;
        }
        else
        {
            float _2991 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
            float _2992 = _2991 * _2698;
            float _2993 = _2991 * _2699;
            float _2994 = _2991 * _2700;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2862 < ((_2860 >> 12u) & 15u))
            {
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _3126 = _2845;
                float _3127 = _2847;
                float _3128 = _2849;
                float _3129 = _2851;
                float _3130 = _2853;
                float _3131 = _2855;
                uint _3132 = _2862;
                uint _3141;
                bool _3142;
                for (;;)
                {
                    _3141 = texelFetch(g_lightClassification, int((((_2738 << 5u) + (_2724 << 9u)) + (_3132 << 2u)) >> 2u)).x;
                    _3142 = _3141 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3142)
                    {
                        frontier_phi_77_pred = _3131;
                        frontier_phi_77_pred_1 = _3130;
                        frontier_phi_77_pred_2 = _3129;
                        frontier_phi_77_pred_3 = _3128;
                        frontier_phi_77_pred_4 = _3127;
                        frontier_phi_77_pred_5 = _3126;
                    }
                    else
                    {
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3348 = _3126;
                        float _3349 = _3127;
                        float _3350 = _3128;
                        float _3351 = _3129;
                        float _3352 = _3130;
                        float _3353 = _3131;
                        uint _3354 = _3141;
                        uint _3355;
                        vec4 _3380;
                        float _3381;
                        vec4 _3396;
                        vec3 _3408;
                        vec4 _3423;
                        vec4 _3438;
                        float _3484;
                        bool _3485;
                        for (;;)
                        {
                            uint _3365 = ((_3132 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3354));
                            _3355 = (_3354 + 4294967295u) & _3354;
                            uint _3367 = _3365 * 40u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            _3381 = _3380.w;
                            uint _3383 = (_3365 * 40u) + 4u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3365 * 40u) + 8u;
                            _3408 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x));
                            uint _3410 = (_3365 * 40u) + 16u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3365 * 40u) + 20u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3365 * 40u) + 24u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3459 = (_3365 * 40u) + 28u;
                            vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            _3484 = fma(_2700, _3472.z, fma(_2699, _3472.y, _3472.x * _2698)) + _3472.w;
                            _3485 = !((fma(_2700, _3453.z, fma(_2699, _3453.y, _3453.x * _2698)) + _3453.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3485)
                            {
                                float _3512 = _3380.x - _2698;
                                float _3513 = _3380.y - _2699;
                                float _3514 = _3380.z - _2700;
                                float _3515 = dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514));
                                float _3518 = inversesqrt(_3515);
                                float _3519 = _3518 * _3512;
                                float _3520 = _3518 * _3513;
                                float _3521 = _3518 * _3514;
                                float _3525 = 1.0 - (_3515 / (_3381 * _3381));
                                float _4663 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3530 = sqrt(_3515) * _3396.w;
                                float _3532 = 1.39999997615814208984375 / (_3530 + 1.39999997615814208984375);
                                float _3533 = _3532 * _3532;
                                float _3536 = ((1.0 - _3533) * dot(vec3(_3519, _3520, _3521), vec3(_936, _939, _942))) + _3533;
                                float _3539 = _3530 * _3530;
                                float _3543 = (fma(_2700, _3423.z, fma(_2699, _3423.y, _3423.x * _2698)) + _3423.w) / _3484;
                                float _3544 = (fma(_2700, _3438.z, fma(_2699, _3438.y, _3438.x * _2698)) + _3438.w) / _3484;
                                float _3548 = 1.0 - dot(vec2(_3543, _3544), vec2(_3543, _3544));
                                float _4679 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3550 = _3549 * (((isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0))) * _3526) / ((_3539 * 0.699999988079071044921875) + 1.0));
                                float _3562 = exp2(log2(1.0 / ((_3539 * 3.5) + 5.0)) * 0.25);
                                float _3563 = 1.0 - _1011;
                                float _3570 = sqrt(1.0 - ((1.0 - (_3563 * _3563)) * (1.0 - (_3562 * _3562))));
                                float _3571 = _3570 * _3570;
                                float _3572 = _3571 * _3571;
                                float _3573 = _3519 - _2992;
                                float _3574 = _3520 - _2993;
                                float _3575 = _3521 - _2994;
                                float _3579 = inversesqrt(dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575)));
                                float _3583 = dot(vec3(_936, _939, _942), vec3((-0.0) - _2992, (-0.0) - _2993, (-0.0) - _2994));
                                float _4690 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3587 = dot(vec3(_936, _939, _942), vec3(_3579 * _3573, _3579 * _3574, _3579 * _3575));
                                float _4701 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3594 = ((_3590 * _3590) * (_3572 + (-1.0))) + 1.0;
                                float _3595 = _3532 * _3571;
                                float _3596 = _3595 * _3595;
                                float _3602 = ((1.0 - _3596) * dot(vec3(_936, _939, _942), vec3(_3519, _3520, _3521))) + _3596;
                                float _4712 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3604 = 1.0 - _3571;
                                float _3614 = (0.5 / (((_3603 * ((_3586 * _3604) + _3571)) + 9.9999999392252902907785028219223e-09) + (((_3603 * _3604) + _3571) * _3586))) * _3603;
                                float _4723 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3624 = (_3549 * _3526) * (((_3572 * 3.1415927410125732421875) * (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) / ((_3594 * _3594) * ((_3539 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3550 * _3396.y;
                                frontier_phi_83_pred_1 = _3550 * _3396.x;
                                frontier_phi_83_pred_2 = _3624 * _3408.z;
                                frontier_phi_83_pred_3 = _3624 * _3408.y;
                                frontier_phi_83_pred_4 = _3624 * _3408.x;
                                frontier_phi_83_pred_5 = _3550 * _3396.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3632 = frontier_phi_83_pred;
                            _3631 = frontier_phi_83_pred_1;
                            _3630 = frontier_phi_83_pred_2;
                            _3629 = frontier_phi_83_pred_3;
                            _3628 = frontier_phi_83_pred_4;
                            _3633 = frontier_phi_83_pred_5;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            if (_3355 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3355;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3340;
                        frontier_phi_77_pred_1 = _3339;
                        frontier_phi_77_pred_2 = _3338;
                        frontier_phi_77_pred_3 = _3337;
                        frontier_phi_77_pred_4 = _3336;
                        frontier_phi_77_pred_5 = _3335;
                    }
                    _2977 = frontier_phi_77_pred;
                    _2975 = frontier_phi_77_pred_1;
                    _2973 = frontier_phi_77_pred_2;
                    _2971 = frontier_phi_77_pred_3;
                    _2969 = frontier_phi_77_pred_4;
                    _2967 = frontier_phi_77_pred_5;
                    uint _3133 = _3132 + 1u;
                    if (_3133 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3126 = _2967;
                        _3127 = _2969;
                        _3128 = _2971;
                        _3129 = _2973;
                        _3130 = _2975;
                        _3131 = _2977;
                        _3132 = _3133;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2971;
                frontier_phi_58_59_ladder_1 = _2977;
                frontier_phi_58_59_ladder_2 = _2975;
                frontier_phi_58_59_ladder_3 = _2973;
                frontier_phi_58_59_ladder_4 = _2969;
                frontier_phi_58_59_ladder_5 = _2967;
            }
            else
            {
                frontier_phi_58_59_ladder = _2849;
                frontier_phi_58_59_ladder_1 = _2855;
                frontier_phi_58_59_ladder_2 = _2853;
                frontier_phi_58_59_ladder_3 = _2851;
                frontier_phi_58_59_ladder_4 = _2847;
                frontier_phi_58_59_ladder_5 = _2845;
            }
            _2966 = frontier_phi_58_59_ladder_5;
            _2968 = frontier_phi_58_59_ladder_4;
            _2970 = frontier_phi_58_59_ladder;
            _2972 = frontier_phi_58_59_ladder_3;
            _2974 = frontier_phi_58_59_ladder_2;
            _2976 = frontier_phi_58_59_ladder_1;
        }
        float _2981 = isnan(1.0) ? _995 : (isnan(_995) ? 1.0 : min(_995, 1.0));
        _2757 = (_2981 * _2972) + _2193;
        _2759 = (_2981 * _2974) + _2195;
        _2761 = (_2981 * _2976) + _2197;
        _2763 = ((_2966 * _979) * _2981) + _2538;
        _2765 = ((_2968 * _981) * _2981) + _2540;
        _2767 = ((_2970 * _982) * _2981) + _2542;
    }
    else
    {
        _2757 = _2193;
        _2759 = _2195;
        _2761 = _2197;
        _2763 = _2538;
        _2765 = _2540;
        _2767 = _2542;
    }
    float _4739 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _4750 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4761 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _2784 = ((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2757 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _995))) + ((_2763 + ((isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))) * _1833)) * cbPerFrame._m0[3u].x);
    float _2785 = ((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2759 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _995))) + ((_2765 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1833)) * cbPerFrame._m0[3u].x);
    float _2786 = ((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2761 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _995))) + ((_2767 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1833)) * cbPerFrame._m0[3u].x);
    uint _2787 = _254 + 6u;
    float _2795 = _917 / cbSceneParam._m0[86u].x;
    float _2796 = _918 / cbSceneParam._m0[86u].y;
    vec4 _2810 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2795, _2796, (log2((isnan(cbSceneParam._m0[77u].w) ? _839 : (isnan(_839) ? cbSceneParam._m0[77u].w : min(_839, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2812 = _2810.x;
    float _2813 = _2810.y;
    float _2814 = _2810.z;
    float _2815 = _2810.w;
    float _2908;
    float _2910;
    float _2912;
    float _2914;
    if (_839 > cbSceneParam._m0[78u].w)
    {
        float _2870 = isnan(_839) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _839 : min(cbSceneParam._m0[80u].w, _839));
        float _2871 = _2870 / _839;
        float _2882 = _2871 * _890;
        float _2883 = _891 * _2871;
        float _2884 = (-0.0) - _2883;
        float _2886 = _2871 * _892;
        float _2888 = (cbSceneParam._m0[77u].w * _2884) / _2870;
        float _2889 = _2888 + cbSceneParam._m0[79u].w;
        float _2890 = cbSceneParam._m0[79u].w - _2883;
        float _2896 = sqrt(((_2882 * _2882) + (_2883 * _2883)) + (_2886 * _2886));
        float _2899 = (1.0 - (cbSceneParam._m0[77u].w / _2870)) * _2896;
        float _2904 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2906 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3083;
        if (abs((_2884 - _2888) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3083 = ((((_2889 > 0.0) ? exp2(_2904 * _2889) : (2.0 - exp2(_2906 * _2889))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2899;
        }
        else
        {
            float _3027 = 1.0 / cbSceneParam._m0[80u].x;
            float _3028 = isnan(_2890) ? _2889 : (isnan(_2889) ? _2890 : max(_2889, _2890));
            float _3029 = isnan(_2890) ? _2889 : (isnan(_2889) ? _2890 : min(_2889, _2890));
            float _3038 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : min(_3028, 0.0));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            _3083 = ((abs(_2896 / _2884) * cbSceneParam._m0[80u].y) * ((((_3038 - _3039) * 2.0) - ((exp2(_2904 * (isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0)))) - exp2(_2904 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))))) * _3027)) - ((exp2(_2906 * _3038) - exp2(_2906 * _3039)) * _3027))) + (_2899 * cbSceneParam._m0[80u].z);
        }
        vec4 _3085 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2795, _2796, 1.0), 0.0);
        float _3094 = exp2((_3083 * (-1.44269502162933349609375)) * (1.0 - _3085.w));
        float _3095 = log2(_3094);
        float _3111 = log2(_2815);
        _2908 = (exp2(_3111 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].x)) * _3085.x) / cbSceneParam._m0[78u].x)) + _2812;
        _2910 = (exp2(_3111 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].y)) * _3085.y) / cbSceneParam._m0[78u].y)) + _2813;
        _2912 = (exp2(_3111 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].z)) * _3085.z) / cbSceneParam._m0[78u].z)) + _2814;
        _2914 = _3094 * _2815;
    }
    else
    {
        _2908 = _2812;
        _2910 = _2813;
        _2912 = _2814;
        _2914 = _2815;
    }
    bool _3121;
    vec4 _2924;
    vec4 _2946;
    float _2948;
    float _2952;
    float _2953;
    float _2954;
    float _2955;
    bool _2965;
    for (;;)
    {
        _2924 = cbMatDynParam._m0[0u];
        float _2926 = roundEven(_2924.y);
        bool _2927 = _2926 == 3.0;
        float _2928 = log2(_2914);
        float _2935 = exp2(_2928 * cbSceneParam._m0[78u].x) * _2784;
        float _2936 = exp2(_2928 * cbSceneParam._m0[78u].y) * _2785;
        float _2937 = exp2(_2928 * cbSceneParam._m0[78u].z) * _2786;
        float _2944 = _906 + (-0.5);
        _2946 = cbMtdParam._m0[1u];
        _2948 = _2946.y * _2944;
        float _2951 = (_2926 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2952 = _2951 * (_2927 ? _2935 : (_2935 + (cbSceneParam._m0[72u].w * _2908)));
        _2953 = _2951 * (_2927 ? _2936 : (_2936 + (cbSceneParam._m0[72u].w * _2910)));
        _2954 = _2951 * (_2927 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2912)));
        _2955 = _2944 * 0.999000012874603271484375;
        _2965 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2965)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _2955) < 0.5)
            {
                _3121 = true;
                break;
            }
        }
        uint _3062 = _955 + uint(_2924.w);
        if ((cbInstanceData._m0[_3062].w < 1.0) && ((cbInstanceData._m0[_3062].w + _2955) < 0.5))
        {
            _3121 = true;
            break;
        }
        if ((_2948 + 1.0) < _2946.x)
        {
            _3121 = true;
            break;
        }
        _3121 = false;
        break;
    }
    float _3326;
    if (_3121)
    {
        discard_state = true;
        _3326 = 0.0;
    }
    else
    {
        _3326 = cbInstanceData._m0[_2787].w;
    }
    SV_Target.x = _2952;
    SV_Target.y = _2953;
    SV_Target.z = _2954;
    SV_Target.w = _3326;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2787].w;
    discard_exit();
}


