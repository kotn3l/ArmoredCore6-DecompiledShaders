#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1291;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3640 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3651 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3662 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].y) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3673 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _428 = (_421 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _429 = (_421 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _430 = (_421 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _434 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _428;
    float _437 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _429;
    float _440 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _430;
    float _447 = ((_428 - _434) * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) + _434;
    float _448 = ((_429 - _437) * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) + _437;
    float _449 = ((_430 - _440) * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) + _440;
    vec4 _468 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _532 = _530.x;
    float _533 = _530.y;
    float _534 = _530.z;
    float _543 = ((_513.z - _534) * _421) + _534;
    float _546 = ((((_513.x - _532) * _421) + _532) * 2.0) + (-1.0);
    float _547 = ((((_513.y - _533) * _421) + _533) * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3684 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))));
    vec4 _569 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _596 = _594.x;
    float _597 = 1.0 - _596;
    float _610 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_596 - _597) * cbMtdParam._m0[24u].z) + _597) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3695 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _618 = (_611 * ((_468.x * cbMtdParam._m0[18u].x) - _447)) + _447;
    float _619 = (_611 * ((_468.y * cbMtdParam._m0[18u].y) - _448)) + _448;
    float _620 = (_611 * ((_468.z * cbMtdParam._m0[18u].z) - _449)) + _449;
    vec4 _632 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _646 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _648 = _646.x;
    float _666 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _648) * _421) + _648;
    float _670 = ((_632.x - _666) * cbMtdParam._m0[19u].z) + _666;
    float _672 = _670 - (_670 * _611);
    float _677 = (((_488.z - _543) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _543;
    float _681 = ((_569.z - _677) * cbMtdParam._m0[19u].w) + _677;
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _701 = (_694.x * 2.0) + (-1.0);
    float _702 = (_694.y * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _3706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _711 = (_611 * (_694.z - _681)) + _681;
    float _720 = (_546 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_488.x * 2.0) + (-1.0)))) + (((_569.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _721 = (_547 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_488.y * 2.0) + (-1.0)))) + (((_569.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _733 = (((_701 - _720) + (cbMtdParam._m0[21u].x * _720)) * _611) + _720;
    float _734 = (((_702 - _721) + (cbMtdParam._m0[21u].x * _721)) * _611) + _721;
    float _735 = (_611 * (sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) - _553)) + _553;
    float _737 = cbMtdParam._m0[22u].x + _569.w;
    float _740 = fma(_735, _236 * NORMAL.x, fma(_734, _243 * TANGENT.x, (_229 * _221) * _733));
    float _743 = fma(_735, _236 * NORMAL.y, fma(_734, _243 * TANGENT.y, (_229 * _222) * _733));
    float _746 = fma(_735, _236 * NORMAL.z, fma(_734, _243 * TANGENT.z, (_229 * _223) * _733));
    float _750 = inversesqrt(dot(vec3(_740, _743, _746), vec3(_740, _743, _746)));
    float _751 = _750 * _740;
    float _752 = _750 * _743;
    float _753 = _750 * _746;
    float _3717 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _754 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3739 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3750 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3761 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3772 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _759 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _773 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _824 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _814);
    float _825 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _814);
    float _826 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _814);
    float _830 = inversesqrt(dot(vec3(_824, _825, _826), vec3(_824, _825, _826)));
    float _831 = _824 * _830;
    float _832 = _825 * _830;
    float _833 = _826 * _830;
    float _839 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _840 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _858 = fma(_753, cbSceneParam._m0[5u].z, fma(_752, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _751));
    float _861 = fma(_753, cbSceneParam._m0[6u].z, fma(_752, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _751));
    float _864 = fma(_753, cbSceneParam._m0[7u].z, fma(_752, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _751));
    uint _878 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _884 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_878].x;
    float _885 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_878].y;
    float _886 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_878].z;
    float _3783 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _890 = 1.0 - _759;
    float _891 = _887 * _890;
    float _892 = _888 * _890;
    float _893 = _889 * _890;
    float _898 = (_887 + (-0.039999999105930328369140625)) * _759;
    float _899 = (_888 + (-0.039999999105930328369140625)) * _759;
    float _900 = (_889 + (-0.039999999105930328369140625)) * _759;
    float _901 = _898 + 0.039999999105930328369140625;
    float _903 = _899 + 0.039999999105930328369140625;
    float _904 = _900 + 0.039999999105930328369140625;
    vec4 _913 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _839, cbSceneParam._m0[86u].y * _840));
    float _917 = ((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * TEXCOORD_5.w) * _913.x;
    float _918 = dot(vec3(_751, _752, _753), vec3(_831, _832, _833));
    float _921 = _918 * 2.0;
    float _925 = (_921 * _751) - _831;
    float _926 = (_921 * _752) - _832;
    float _927 = (_921 * _753) - _833;
    float _931 = abs(dot(vec3(_831, _832, _833), vec3(_751, _752, _753)));
    float _3816 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _933 = sqrt(_754);
    float _946 = exp2((_933 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_933 * 3.0));
    float _952 = (1.0 - _946) * ((_933 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _953 = _946 * _933;
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1290;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1015 = fma(_989, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981));
        float _1019 = fma(_989, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981));
        float _1023 = fma(_989, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981));
        float _1048 = _981 + _751;
        float _1049 = _985 + _752;
        float _1050 = _989 + _753;
        float _1060 = fma(_1050, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048)) - _1015;
        float _1061 = fma(_1050, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048)) - _1019;
        float _1062 = fma(_1050, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048)) - _1023;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1015 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1019 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[34u].z) + ((((((_1023 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1118 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1084.x + (-0.5));
        float _1120 = _1118 * (_1084.y + (-0.5));
        float _1121 = _1118 * (_1084.z + (-0.5));
        float _1128 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1091.x + (-0.5));
        float _1130 = _1128 * (_1091.y + (-0.5));
        float _1131 = _1128 * (_1091.z + (-0.5));
        float _1138 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1098.x + (-0.5));
        float _1140 = _1138 * (_1098.y + (-0.5));
        float _1141 = _1138 * (_1098.z + (-0.5));
        float _1148 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1105.x + (-0.5));
        float _1150 = _1148 * (_1105.y + (-0.5));
        float _1151 = _1148 * (_1105.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1172 = (dot(vec3(_751, _752, _753), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1182 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3864 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1184 + 1.0))) + _1189) * _1152;
        float _1199 = _1120 * 0.5;
        float _1200 = _1130 * 0.5;
        float _1201 = _1140 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_751, _752, _753), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3897 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1226 + 1.0))) + _1231) * _1153;
        float _1241 = _1121 * 0.5;
        float _1242 = _1131 * 0.5;
        float _1243 = _1141 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_751, _752, _753), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3930 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1268 + 1.0))) + _1273) * _1154;
        _1290 = _1121;
        _1292 = _1120;
        _1293 = _1119;
        _1294 = _1131;
        _1295 = _1130;
        _1296 = _1129;
        _1297 = _1141;
        _1298 = _1140;
        _1299 = _1139;
        _1300 = _1154;
        _1301 = _1153;
        _1302 = _1152;
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _1291;
        _1292 = _1291;
        _1293 = _1291;
        _1294 = _1291;
        _1295 = _1291;
        _1296 = _1291;
        _1297 = _1291;
        _1298 = _1291;
        _1299 = _1291;
        _1300 = _1291;
        _1301 = _1291;
        _1302 = _1291;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1330 = fma(_989, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981));
        float _1334 = fma(_989, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981));
        float _1338 = fma(_989, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981));
        float _1361 = _981 + _751;
        float _1362 = _985 + _752;
        float _1363 = _989 + _753;
        float _1373 = fma(_1363, cbModelParam._m0[30u].z, fma(_1362, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1361)) - _1330;
        float _1374 = fma(_1363, cbModelParam._m0[31u].z, fma(_1362, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1361)) - _1334;
        float _1375 = fma(_1363, cbModelParam._m0[32u].z, fma(_1362, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1361)) - _1338;
        float _1379 = inversesqrt(dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375)));
        float _1392 = ((_1379 * _1373) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1330 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1379 * _1374) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1334 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1379 * _1375) / cbModelParam._m0[35u].z) + ((((((_1338 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        float _1429 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1396.x + (-0.5));
        float _1431 = _1429 * (_1396.y + (-0.5));
        float _1432 = _1429 * (_1396.z + (-0.5));
        float _1439 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1403.x + (-0.5));
        float _1441 = _1439 * (_1403.y + (-0.5));
        float _1442 = _1439 * (_1403.z + (-0.5));
        float _1449 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1410.x + (-0.5));
        float _1451 = _1449 * (_1410.y + (-0.5));
        float _1452 = _1449 * (_1410.z + (-0.5));
        float _1459 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1417.x + (-0.5));
        float _1461 = _1459 * (_1417.y + (-0.5));
        float _1462 = _1459 * (_1417.z + (-0.5));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = _1430 * 0.5;
        float _1467 = _1440 * 0.5;
        float _1468 = _1450 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_751, _752, _753), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _3993 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1493 + 1.0))) + _1498) * _1463;
        float _1508 = _1431 * 0.5;
        float _1509 = _1441 * 0.5;
        float _1510 = _1451 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_751, _752, _753), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4026 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1535 + 1.0))) + _1540) * _1464;
        float _1550 = _1432 * 0.5;
        float _1551 = _1442 * 0.5;
        float _1552 = _1452 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_751, _752, _753), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4059 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1577 + 1.0))) + _1582) * _1465;
        _1599 = _1432;
        _1600 = _1431;
        _1601 = _1430;
        _1602 = _1442;
        _1603 = _1441;
        _1604 = _1440;
        _1605 = _1452;
        _1606 = _1451;
        _1607 = _1450;
        _1608 = _1465;
        _1609 = _1464;
        _1610 = _1463;
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1613 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
    }
    else
    {
        _1599 = _1291;
        _1600 = _1291;
        _1601 = _1291;
        _1602 = _1291;
        _1603 = _1291;
        _1604 = _1291;
        _1605 = _1291;
        _1606 = _1291;
        _1607 = _1291;
        _1608 = _1291;
        _1609 = _1291;
        _1610 = _1291;
        _1611 = 0.0;
        _1612 = 0.0;
        _1613 = 0.0;
    }
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1303)) + _1303;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1304)) + _1304;
    float _1625 = (cbModelParam._m0[1u].x * (_1613 - _1305)) + _1305;
    float _1646 = fma(_1625, cbSceneParam._m0[89u].z, fma(_1624, cbSceneParam._m0[89u].y, _1623 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1625, cbSceneParam._m0[90u].z, fma(_1624, cbSceneParam._m0[90u].y, _1623 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1625, cbSceneParam._m0[91u].z, fma(_1624, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1623));
    float _1667 = _925 * 0.5;
    float _1668 = _926 * 0.5;
    float _1669 = _927 * 0.5;
    float _1670 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1601, _1604, _1607, _1610));
    float _1673 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1676 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1710;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1683 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1290, _1294, _1297, _1300));
        float _1687 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1691 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1698 = dot(vec4(cbModelParam._m0[39u]), vec4(_1667, _1668, _1669, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1721;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1712 = dot(vec4(cbModelParam._m0[40u]), vec4(_1667, _1668, _1669, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1725 = (_1721 * cbModelParam._m0[1u].x) + (_1710 * (1.0 - cbModelParam._m0[1u].x));
    float _1735 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _754);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1735 : min(cbModelParam._m0[25u].z, _1735));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1783 = fma(_989, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981)) + cbModelParam._m0[13u].w;
        float _1787 = fma(_989, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981)) + cbModelParam._m0[14u].w;
        float _1791 = fma(_989, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981)) + cbModelParam._m0[15u].w;
        float _1794 = fma(_927, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925));
        float _1797 = fma(_927, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925));
        float _1800 = fma(_927, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925));
        float _1828;
        if (_1794 > 0.0)
        {
            _1828 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1828 = frontier_phi_14_12_ladder;
        }
        float _2051;
        if (_1797 > 0.0)
        {
            _2051 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2051 = frontier_phi_23_19_ladder;
        }
        float _2308;
        if (_1800 > 0.0)
        {
            _2308 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2308 = frontier_phi_35_30_ladder;
        }
        float _2310 = isnan(_2051) ? _1828 : (isnan(_1828) ? _2051 : min(_1828, _2051));
        float _2311 = isnan(_2308) ? _2310 : (isnan(_2310) ? _2308 : min(_2310, _2308));
        float _2315 = (_2311 * _1794) + _1783;
        float _2316 = (_2311 * _1797) + _1787;
        float _2317 = (_2311 * _1800) + _1791;
        float _2318 = _2311 * 9.9999997473787516355514526367188e-05;
        float _2320 = (-1.0) - _2318;
        float _2322 = _2318 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2317 > _2322) || ((_2317 < _2320) || ((_2316 > _2322) || ((_2316 < _2320) || ((_2315 < _2320) || (_2315 > _2322))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2317, cbModelParam._m0[9u].z, fma(_2316, cbModelParam._m0[9u].y, _2315 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2317, cbModelParam._m0[10u].z, fma(_2316, cbModelParam._m0[10u].y, _2315 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2317, cbModelParam._m0[11u].z, fma(_2316, cbModelParam._m0[11u].y, _2315 * cbModelParam._m0[11u].x))), _1736);
            frontier_phi_13_35_ladder = _2445.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2445.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2445.x * cbModelParam._m0[1u].y;
        }
        _1816 = frontier_phi_13_35_ladder_2;
        _1818 = frontier_phi_13_35_ladder_1;
        _1820 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_925, _926, _927), _1736);
        _1816 = _1804.x * cbModelParam._m0[1u].y;
        _1818 = _1804.y * cbModelParam._m0[1u].y;
        _1820 = _1804.z * cbModelParam._m0[1u].y;
    }
    float _1824 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _754);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1824 : min(cbModelParam._m0[25u].w, _1824));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1878 = fma(_989, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981)) + cbModelParam._m0[21u].w;
        float _1882 = fma(_989, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981)) + cbModelParam._m0[22u].w;
        float _1886 = fma(_989, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981)) + cbModelParam._m0[23u].w;
        float _1889 = fma(_927, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925));
        float _1892 = fma(_927, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925));
        float _1895 = fma(_927, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925));
        float _2056;
        if (_1889 > 0.0)
        {
            _2056 = abs((1.0 - _1878) / _1889);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1878 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2056 = frontier_phi_25_21_ladder;
        }
        float _2335;
        if (_1892 > 0.0)
        {
            _2335 = abs((1.0 - _1882) / _1892);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1882 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2335 = frontier_phi_37_32_ladder;
        }
        float _2548;
        if (_1895 > 0.0)
        {
            _2548 = abs((1.0 - _1886) / _1895);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1886 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2548 = frontier_phi_46_43_ladder;
        }
        float _2550 = isnan(_2335) ? _2056 : (isnan(_2056) ? _2335 : min(_2056, _2335));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _1889) + _1878;
        float _2556 = (_2551 * _1892) + _1882;
        float _2557 = (_2551 * _1895) + _1886;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2558;
        float _2561 = _2558 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2557 > _2561) || ((_2557 < _2559) || ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 < _2559) || (_2555 > _2561))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2557, cbModelParam._m0[17u].z, fma(_2556, cbModelParam._m0[17u].y, _2555 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2557, cbModelParam._m0[18u].z, fma(_2556, cbModelParam._m0[18u].y, _2555 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2557, cbModelParam._m0[19u].z, fma(_2556, cbModelParam._m0[19u].y, _2555 * cbModelParam._m0[19u].x))), _1825);
            frontier_phi_22_46_ladder = _2756.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2756.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2756.x * cbModelParam._m0[1u].z;
        }
        _1914 = frontier_phi_22_46_ladder_2;
        _1916 = frontier_phi_22_46_ladder_1;
        _1918 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_925, _926, _927), _1825);
        _1914 = _1898.x * cbModelParam._m0[1u].z;
        _1916 = _1898.y * cbModelParam._m0[1u].z;
        _1918 = _1898.z * cbModelParam._m0[1u].z;
    }
    float _1931 = (((_952 * _901) + _953) * _917) * ((cbModelParam._m0[1u].w * (_1914 - _1816)) + _1816);
    float _1933 = (((_952 * _903) + _953) * _917) * ((cbModelParam._m0[1u].w * (_1916 - _1818)) + _1818);
    float _1935 = (((_952 * _904) + _953) * _917) * ((cbModelParam._m0[1u].w * (_1918 - _1820)) + _1820);
    float _1938 = fma(_1935, cbSceneParam._m0[89u].z, fma(_1933, cbSceneParam._m0[89u].y, _1931 * cbSceneParam._m0[89u].x));
    float _1941 = fma(_1935, cbSceneParam._m0[90u].z, fma(_1933, cbSceneParam._m0[90u].y, _1931 * cbSceneParam._m0[90u].x));
    float _1944 = fma(_1935, cbSceneParam._m0[91u].z, fma(_1933, cbSceneParam._m0[91u].y, _1931 * cbSceneParam._m0[91u].x));
    vec4 _1952 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_839, _840));
    float _1954 = _1952.w;
    float _1966 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1954);
    float _1967 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1954);
    float _1968 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1954);
    uvec4 _1972 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1974 = _1972.x * 14u;
    uint _1975 = _1974 + 13u;
    float _1982 = _917 + (-1.0);
    float _1987 = (cbLight._m0[_1975].x * _1982) + 1.0;
    float _1988 = (cbLight._m0[_1975].y * _1982) + 1.0;
    float _1989 = (cbLight._m0[_1975].z * _1982) + 1.0;
    float _1990 = (cbLight._m0[_1975].w * _1982) + 1.0;
    uint _1991 = _1974 + 5u;
    float _1997 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
    uint _2001 = _1974 + 4u;
    float _2010 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
    uint _2014 = _1974 | 1u;
    float _2025 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_751, _752, _753));
    float _2028 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_751, _752, _753));
    float _4195 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _4206 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2033 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * 0.3183098733425140380859375;
    float _2035 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.3183098733425140380859375;
    float _2042 = ((cbLight._m0[_1991].x * _1997) * _2035) + (((cbLight._m0[_2001].x * _1966) * _2010) * _2033);
    float _2043 = ((_1997 * cbLight._m0[_1991].y) * _2035) + (((cbLight._m0[_2001].y * _1967) * _2010) * _2033);
    float _2044 = ((_1997 * cbLight._m0[_1991].z) * _2035) + (((cbLight._m0[_2001].z * _1968) * _2010) * _2033);
    uvec4 _2048 = floatBitsToUint(cbLight._m0[_1974 + 12u]);
    bool _2050 = _2048.x == 0u;
    float _2061;
    float _2063;
    float _2065;
    if (_2050)
    {
        _2061 = _2042;
        _2063 = _2043;
        _2065 = _2044;
    }
    else
    {
        uint _2069 = _1974 + 6u;
        float _2085 = (dot(vec3(cbLight._m0[_1974 + 2u].xyz), vec3(_751, _752, _753)) * 0.5) + 0.5;
        float _2086 = _2085 * _2085;
        float _4217 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2087 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2088 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2061 = (((cbLight._m0[_2069].x * 0.3183098733425140380859375) * _2087) * _2088) + _2042;
        _2063 = (((cbLight._m0[_2069].y * 0.3183098733425140380859375) * _2087) * _2088) + _2043;
        _2065 = (((cbLight._m0[_2069].z * 0.3183098733425140380859375) * _2087) * _2088) + _2044;
    }
    bool _2068 = _2048.y == 0u;
    float _2106;
    float _2108;
    float _2110;
    if (_2068)
    {
        _2106 = _2061;
        _2108 = _2063;
        _2110 = _2065;
    }
    else
    {
        uint _2279 = _1974 + 7u;
        float _2295 = (dot(vec3(cbLight._m0[_1974 + 3u].xyz), vec3(_751, _752, _753)) * 0.5) + 0.5;
        float _2296 = _2295 * _2295;
        float _4233 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2297 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2298 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        _2106 = (((cbLight._m0[_2279].x * 0.3183098733425140380859375) * _2297) * _2298) + _2061;
        _2108 = (((cbLight._m0[_2279].y * 0.3183098733425140380859375) * _2297) * _2298) + _2063;
        _2110 = (((cbLight._m0[_2279].z * 0.3183098733425140380859375) * _2297) * _2298) + _2065;
    }
    uint _2113 = _1974 + 8u;
    float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _754) * 0.949999988079071044921875);
    float _2127 = _2126 * _2126;
    float _2128 = cbLight._m0[_1974].x + _831;
    float _2129 = cbLight._m0[_1974].y + _832;
    float _2130 = cbLight._m0[_1974].z + _833;
    float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
    float _2135 = _2134 * _2128;
    float _2136 = _2134 * _2129;
    float _2137 = _2134 * _2130;
    float _2138 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_1974].xyz));
    float _4249 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2142 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2143 = dot(vec3(_751, _752, _753), vec3(_2135, _2136, _2137));
    float _4271 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2147 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2135, _2136, _2137));
    float _4282 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2151 = _2127 * _2127;
    float _2155 = ((_2146 * _2146) * (_2151 + (-1.0))) + 1.0;
    float _2163 = exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0);
    float _2164 = 0.959999978542327880859375 - _898;
    float _2166 = 0.959999978542327880859375 - _899;
    float _2167 = 0.959999978542327880859375 - _900;
    float _2174 = 1.0 - _2127;
    float _2185 = (0.5 / (((_2142 * ((_2141 * _2174) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2174) + _2127) * _2141))) * _2141;
    float _4293 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2187 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2151 / ((_2155 * _2155) * 3.141590118408203125));
    uint _2201 = _1974 + 9u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _754) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_2014].x + _831;
    float _2215 = cbLight._m0[_2014].y + _832;
    float _2216 = cbLight._m0[_2014].z + _833;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2014].xyz));
    float _4304 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2228 = dot(vec3(_751, _752, _753), vec3(_2221, _2222, _2223));
    float _4315 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2232 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2221, _2222, _2223));
    float _4326 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2236 = _2213 * _2213;
    float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
    float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0);
    float _2254 = 1.0 - _2213;
    float _2264 = (0.5 / (((_2142 * ((_2227 * _2254) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2254) + _2213) * _2227))) * _2227;
    float _4337 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2266 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
    float _2276 = (((((_2247 * _2164) + _901) * cbLight._m0[_2201].x) * _2266) * _1997) + ((((cbLight._m0[_2113].x * _1966) * ((_2163 * _2164) + _901)) * _2187) * _2010);
    float _2277 = (((((_2247 * _2166) + _903) * cbLight._m0[_2201].y) * _2266) * _1997) + ((((cbLight._m0[_2113].y * _1967) * ((_2163 * _2166) + _903)) * _2187) * _2010);
    float _2278 = (((((_2247 * _2167) + _904) * cbLight._m0[_2201].z) * _2266) * _1997) + ((((cbLight._m0[_2113].z * _1968) * ((_2163 * _2167) + _904)) * _2187) * _2010);
    float _2340;
    float _2342;
    float _2344;
    if (_2050)
    {
        _2340 = _2276;
        _2342 = _2277;
        _2344 = _2278;
    }
    else
    {
        uint _2346 = _1974 + 2u;
        uint _2350 = _1974 + 10u;
        float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _754) * 0.949999988079071044921875);
        float _2365 = _2364 * _2364;
        float _2366 = cbLight._m0[_2346].x + _831;
        float _2367 = cbLight._m0[_2346].y + _832;
        float _2368 = cbLight._m0[_2346].z + _833;
        float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
        float _2373 = _2372 * _2366;
        float _2374 = _2372 * _2367;
        float _2375 = _2372 * _2368;
        float _2376 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2346].xyz));
        float _4348 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2380 = dot(vec3(_751, _752, _753), vec3(_2373, _2374, _2375));
        float _4359 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2384 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2373, _2374, _2375));
        float _4370 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2388 = _2365 * _2365;
        float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
        float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
        float _2406 = 1.0 - _2365;
        float _2416 = (0.5 / (((_2142 * ((_2379 * _2406) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2406) + _2365) * _2379))) * _2379;
        float _4381 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2418 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
        float _2419 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2340 = (((((_2399 * _2164) + _901) * cbLight._m0[_2350].x) * _2418) * _2419) + _2276;
        _2342 = (((((_2399 * _2166) + _903) * cbLight._m0[_2350].y) * _2418) * _2419) + _2277;
        _2344 = (((((_2399 * _2167) + _904) * cbLight._m0[_2350].z) * _2418) * _2419) + _2278;
    }
    float _2454;
    float _2456;
    float _2458;
    if (_2068)
    {
        _2454 = _2340;
        _2456 = _2342;
        _2458 = _2344;
    }
    else
    {
        uint _2465 = _1974 + 3u;
        uint _2469 = _1974 + 11u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _754) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _831;
        float _2486 = cbLight._m0[_2465].y + _832;
        float _2487 = cbLight._m0[_2465].z + _833;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2465].xyz));
        float _4397 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2499 = dot(vec3(_751, _752, _753), vec3(_2492, _2493, _2494));
        float _4408 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4419 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
        float _2525 = 1.0 - _2484;
        float _2535 = (0.5 / (((_2142 * ((_2498 * _2525) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2525) + _2484) * _2498))) * _2498;
        float _4430 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        _2454 = (((((_2518 * _2164) + _901) * cbLight._m0[_2469].x) * _2537) * _2538) + _2340;
        _2456 = (((((_2518 * _2166) + _903) * cbLight._m0[_2469].y) * _2537) * _2538) + _2342;
        _2458 = (((((_2518 * _2167) + _904) * cbLight._m0[_2469].z) * _2537) * _2538) + _2344;
    }
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    if (_1972.y == 0u)
    {
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2613;
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2613;
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2613;
        uvec4 _2628 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2629 = _2628.x;
        uint _2640 = uint((float(_2628.y) * floor(float(uint(cbSceneParam._m0[85u].y * _840) / _2629))) + floor(float(uint(cbSceneParam._m0[85u].x * _839) / _2629)));
        float _2650 = (log2(_2616 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2651 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        uint _2654 = uint(isnan(14.0) ? _2651 : (isnan(_2651) ? 14.0 : min(_2651, 14.0)));
        uvec4 _2659 = texelFetch(g_lightClusterGridBuffer, int(((_2654 << 2u) + (_2640 << 6u)) >> 2u));
        uint _2660 = _2659.x;
        uint _2661 = _2628.z;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        if (((((1u << ((_2661 >> 4u) & 15u)) + 4294967295u) & _2660) == 0u) || ((_2661 & 240u) == 0u))
        {
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
        }
        else
        {
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            uint _2912 = 0u;
            uint _2921;
            bool _2922;
            for (;;)
            {
                _2921 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_2912 << 2u)) >> 2u)).x;
                _2922 = _2921 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2922)
                {
                    frontier_phi_61_pred = _2906;
                    frontier_phi_61_pred_1 = _2911;
                    frontier_phi_61_pred_2 = _2910;
                    frontier_phi_61_pred_3 = _2909;
                    frontier_phi_61_pred_4 = _2908;
                    frontier_phi_61_pred_5 = _2907;
                }
                else
                {
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    uint _3036;
                    _3030 = _2906;
                    _3031 = _2907;
                    _3032 = _2908;
                    _3033 = _2909;
                    _3034 = _2910;
                    _3035 = _2911;
                    _3036 = _2921;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    for (;;)
                    {
                        uint _3040 = uint(findLSB(_3036)) + (_2912 << 5u);
                        uint _3037 = (_3036 + 4294967295u) & _3036;
                        uint _3042 = _3040 * 48u;
                        vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 3u)).x));
                        uint _3062 = (_3040 * 48u) + 4u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 3u)).x));
                        uint _3081 = (_3040 * 48u) + 8u;
                        vec3 _3092 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x));
                        float _3096 = _3056.x - _2614;
                        float _3097 = _3056.y - _2615;
                        float _3098 = _3056.z - _2616;
                        float _3099 = dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098));
                        float _3102 = inversesqrt(_3099);
                        float _3103 = _3102 * _3096;
                        float _3104 = _3102 * _3097;
                        float _3105 = _3102 * _3098;
                        float _3106 = dot(vec3(_858, _861, _864), vec3(_3103, _3104, _3105));
                        float _3111 = 1.0 - (_3099 * _3056.w);
                        float _4456 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3112 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3113 = sqrt(_3099) * _3075.w;
                        float _3116 = 1.39999997615814208984375 / (_3113 + 1.39999997615814208984375);
                        float _3117 = _3116 * _3116;
                        float _3120 = ((1.0 - _3117) * _3106) + _3117;
                        float _3123 = _3113 * _3113;
                        float _3127 = ((isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0))) * _3112) / ((_3123 * 0.699999988079071044921875) + 1.0);
                        float _3131 = (-0.0) - _2614;
                        float _3132 = (-0.0) - _2615;
                        float _3133 = (-0.0) - _2616;
                        float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                        float _3138 = _3137 * _3131;
                        float _3139 = _3137 * _3132;
                        float _3140 = _3137 * _3133;
                        float _3148 = exp2(log2(1.0 / ((_3123 * 3.5) + 5.0)) * 0.25);
                        float _3149 = 1.0 - _933;
                        float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                        float _3157 = _3156 * _3156;
                        float _3158 = _3157 * _3157;
                        float _3159 = _3138 + _3103;
                        float _3160 = _3139 + _3104;
                        float _3161 = _3140 + _3105;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3169 = dot(vec3(_858, _861, _864), vec3(_3138, _3139, _3140));
                        float _4472 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3173 = dot(vec3(_858, _861, _864), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                        float _4483 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3176 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                        float _3181 = _3116 * _3157;
                        float _3182 = _3181 * _3181;
                        float _3185 = ((1.0 - _3182) * _3106) + _3182;
                        float _4494 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3186 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3187 = 1.0 - _3157;
                        float _3197 = (0.5 / (((_3186 * ((_3172 * _3187) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3186 * _3187) + _3157) * _3172))) * _3186;
                        float _4505 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3208 = (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3180 * _3180) * ((_3123 * 2.1991131305694580078125) + 3.141590118408203125))) * _3112;
                        _2965 = (_3127 * _3075.x) + _3033;
                        _2966 = (_3127 * _3075.y) + _3034;
                        _2967 = (_3127 * _3075.z) + _3035;
                        _2962 = (_3208 * _3092.x) + _3030;
                        _2963 = (_3208 * _3092.y) + _3031;
                        _2964 = (_3208 * _3092.z) + _3032;
                        if (_3037 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3030 = _2962;
                            _3031 = _2963;
                            _3032 = _2964;
                            _3033 = _2965;
                            _3034 = _2966;
                            _3035 = _2967;
                            _3036 = _3037;
                        }
                    }
                    frontier_phi_61_pred = _2962;
                    frontier_phi_61_pred_1 = _2967;
                    frontier_phi_61_pred_2 = _2966;
                    frontier_phi_61_pred_3 = _2965;
                    frontier_phi_61_pred_4 = _2964;
                    frontier_phi_61_pred_5 = _2963;
                }
                _2762 = frontier_phi_61_pred;
                _2772 = frontier_phi_61_pred_1;
                _2770 = frontier_phi_61_pred_2;
                _2768 = frontier_phi_61_pred_3;
                _2766 = frontier_phi_61_pred_4;
                _2764 = frontier_phi_61_pred_5;
                uint _2913 = _2912 + 1u;
                if (_2913 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2906 = _2762;
                    _2907 = _2764;
                    _2908 = _2766;
                    _2909 = _2768;
                    _2910 = _2770;
                    _2911 = _2772;
                    _2912 = _2913;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
        }
        uvec4 _2775 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2776 = _2775.z;
        uint _2778 = (_2776 >> 8u) & 15u;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        if (((4294967295u << _2778) & _2660) == 0u)
        {
            _2874 = _2761;
            _2876 = _2763;
            _2878 = _2765;
            _2880 = _2767;
            _2882 = _2769;
            _2884 = _2771;
        }
        else
        {
            float _2899 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
            float _2900 = _2899 * _2614;
            float _2901 = _2899 * _2615;
            float _2902 = _2899 * _2616;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2778 < ((_2776 >> 12u) & 15u))
            {
                float _2875;
                float _2877;
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _3013 = _2761;
                float _3014 = _2763;
                float _3015 = _2765;
                float _3016 = _2767;
                float _3017 = _2769;
                float _3018 = _2771;
                uint _3019 = _2778;
                uint _3028;
                bool _3029;
                for (;;)
                {
                    _3028 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_3019 << 2u)) >> 2u)).x;
                    _3029 = _3028 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3029)
                    {
                        frontier_phi_67_pred = _3016;
                        frontier_phi_67_pred_1 = _3017;
                        frontier_phi_67_pred_2 = _3018;
                        frontier_phi_67_pred_3 = _3015;
                        frontier_phi_67_pred_4 = _3014;
                        frontier_phi_67_pred_5 = _3013;
                    }
                    else
                    {
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3226 = _3013;
                        float _3227 = _3014;
                        float _3228 = _3015;
                        float _3229 = _3016;
                        float _3230 = _3017;
                        float _3231 = _3018;
                        uint _3232 = _3028;
                        uint _3233;
                        vec4 _3258;
                        float _3259;
                        vec4 _3274;
                        vec3 _3286;
                        vec4 _3301;
                        vec4 _3316;
                        float _3362;
                        bool _3363;
                        for (;;)
                        {
                            uint _3243 = ((_3019 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3232));
                            _3233 = (_3232 + 4294967295u) & _3232;
                            uint _3245 = _3243 * 40u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            _3259 = _3258.w;
                            uint _3261 = (_3243 * 40u) + 4u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3243 * 40u) + 8u;
                            _3286 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x));
                            uint _3288 = (_3243 * 40u) + 16u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3243 * 40u) + 20u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3318 = (_3243 * 40u) + 24u;
                            vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3337 = (_3243 * 40u) + 28u;
                            vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            _3362 = fma(_2616, _3350.z, fma(_2615, _3350.y, _3350.x * _2614)) + _3350.w;
                            _3363 = !((fma(_2616, _3331.z, fma(_2615, _3331.y, _3331.x * _2614)) + _3331.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3363)
                            {
                                float _3390 = _3258.x - _2614;
                                float _3391 = _3258.y - _2615;
                                float _3392 = _3258.z - _2616;
                                float _3393 = dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392));
                                float _3396 = inversesqrt(_3393);
                                float _3397 = _3396 * _3390;
                                float _3398 = _3396 * _3391;
                                float _3399 = _3396 * _3392;
                                float _3403 = 1.0 - (_3393 / (_3259 * _3259));
                                float _4516 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3404 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3408 = sqrt(_3393) * _3274.w;
                                float _3410 = 1.39999997615814208984375 / (_3408 + 1.39999997615814208984375);
                                float _3411 = _3410 * _3410;
                                float _3414 = ((1.0 - _3411) * dot(vec3(_3397, _3398, _3399), vec3(_858, _861, _864))) + _3411;
                                float _3417 = _3408 * _3408;
                                float _3421 = (fma(_2616, _3301.z, fma(_2615, _3301.y, _3301.x * _2614)) + _3301.w) / _3362;
                                float _3422 = (fma(_2616, _3316.z, fma(_2615, _3316.y, _3316.x * _2614)) + _3316.w) / _3362;
                                float _3426 = 1.0 - dot(vec2(_3421, _3422), vec2(_3421, _3422));
                                float _4532 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3427 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3428 = _3427 * (((isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0))) * _3404) / ((_3417 * 0.699999988079071044921875) + 1.0));
                                float _3440 = exp2(log2(1.0 / ((_3417 * 3.5) + 5.0)) * 0.25);
                                float _3441 = 1.0 - _933;
                                float _3448 = sqrt(1.0 - ((1.0 - (_3441 * _3441)) * (1.0 - (_3440 * _3440))));
                                float _3449 = _3448 * _3448;
                                float _3450 = _3449 * _3449;
                                float _3451 = _3397 - _2900;
                                float _3452 = _3398 - _2901;
                                float _3453 = _3399 - _2902;
                                float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                                float _3461 = dot(vec3(_858, _861, _864), vec3((-0.0) - _2900, (-0.0) - _2901, (-0.0) - _2902));
                                float _4543 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3464 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3465 = dot(vec3(_858, _861, _864), vec3(_3457 * _3451, _3457 * _3452, _3457 * _3453));
                                float _4554 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3468 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3472 = ((_3468 * _3468) * (_3450 + (-1.0))) + 1.0;
                                float _3473 = _3410 * _3449;
                                float _3474 = _3473 * _3473;
                                float _3480 = ((1.0 - _3474) * dot(vec3(_858, _861, _864), vec3(_3397, _3398, _3399))) + _3474;
                                float _4565 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3482 = 1.0 - _3449;
                                float _3492 = (0.5 / (((_3481 * ((_3464 * _3482) + _3449)) + 9.9999999392252902907785028219223e-09) + (((_3481 * _3482) + _3449) * _3464))) * _3481;
                                float _4576 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3502 = (_3427 * _3404) * (((_3450 * 3.1415927410125732421875) * (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) / ((_3472 * _3472) * ((_3417 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3502 * _3286.x;
                                frontier_phi_73_pred_1 = _3502 * _3286.y;
                                frontier_phi_73_pred_2 = _3428 * _3274.z;
                                frontier_phi_73_pred_3 = _3428 * _3274.y;
                                frontier_phi_73_pred_4 = _3428 * _3274.x;
                                frontier_phi_73_pred_5 = _3502 * _3286.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3506 = frontier_phi_73_pred;
                            _3507 = frontier_phi_73_pred_1;
                            _3511 = frontier_phi_73_pred_2;
                            _3510 = frontier_phi_73_pred_3;
                            _3509 = frontier_phi_73_pred_4;
                            _3508 = frontier_phi_73_pred_5;
                            _3216 = _3509 + _3229;
                            _3217 = _3510 + _3230;
                            _3218 = _3511 + _3231;
                            _3213 = _3506 + _3226;
                            _3214 = _3507 + _3227;
                            _3215 = _3508 + _3228;
                            if (_3233 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3233;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3216;
                        frontier_phi_67_pred_1 = _3217;
                        frontier_phi_67_pred_2 = _3218;
                        frontier_phi_67_pred_3 = _3215;
                        frontier_phi_67_pred_4 = _3214;
                        frontier_phi_67_pred_5 = _3213;
                    }
                    _2881 = frontier_phi_67_pred;
                    _2883 = frontier_phi_67_pred_1;
                    _2885 = frontier_phi_67_pred_2;
                    _2879 = frontier_phi_67_pred_3;
                    _2877 = frontier_phi_67_pred_4;
                    _2875 = frontier_phi_67_pred_5;
                    uint _3020 = _3019 + 1u;
                    if (_3020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3013 = _2875;
                        _3014 = _2877;
                        _3015 = _2879;
                        _3016 = _2881;
                        _3017 = _2883;
                        _3018 = _2885;
                        _3019 = _3020;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2883;
                frontier_phi_55_56_ladder_1 = _2885;
                frontier_phi_55_56_ladder_2 = _2881;
                frontier_phi_55_56_ladder_3 = _2879;
                frontier_phi_55_56_ladder_4 = _2877;
                frontier_phi_55_56_ladder_5 = _2875;
            }
            else
            {
                frontier_phi_55_56_ladder = _2769;
                frontier_phi_55_56_ladder_1 = _2771;
                frontier_phi_55_56_ladder_2 = _2767;
                frontier_phi_55_56_ladder_3 = _2765;
                frontier_phi_55_56_ladder_4 = _2763;
                frontier_phi_55_56_ladder_5 = _2761;
            }
            _2874 = frontier_phi_55_56_ladder_5;
            _2876 = frontier_phi_55_56_ladder_4;
            _2878 = frontier_phi_55_56_ladder_3;
            _2880 = frontier_phi_55_56_ladder_2;
            _2882 = frontier_phi_55_56_ladder;
            _2884 = frontier_phi_55_56_ladder_1;
        }
        float _2889 = isnan(1.0) ? _917 : (isnan(_917) ? 1.0 : min(_917, 1.0));
        _2673 = (_2889 * _2880) + _2106;
        _2675 = (_2889 * _2882) + _2108;
        _2677 = (_2889 * _2884) + _2110;
        _2679 = ((_2874 * _901) * _2889) + _2454;
        _2681 = ((_2876 * _903) * _2889) + _2456;
        _2683 = ((_2878 * _904) * _2889) + _2458;
    }
    else
    {
        _2673 = _2106;
        _2675 = _2108;
        _2677 = _2110;
        _2679 = _2454;
        _2681 = _2456;
        _2683 = _2458;
    }
    float _4592 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4603 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4614 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    uint _2703 = _270 + 6u;
    float _2711 = _839 / cbSceneParam._m0[86u].x;
    float _2712 = _840 / cbSceneParam._m0[86u].y;
    vec4 _2726 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, (log2((isnan(cbSceneParam._m0[77u].w) ? _773 : (isnan(_773) ? cbSceneParam._m0[77u].w : min(_773, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2728 = _2726.x;
    float _2729 = _2726.y;
    float _2730 = _2726.z;
    float _2731 = _2726.w;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    if (_773 > cbSceneParam._m0[78u].w)
    {
        float _2786 = isnan(_773) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _773 : min(cbSceneParam._m0[80u].w, _773));
        float _2787 = _2786 / _773;
        float _2798 = _2787 * _824;
        float _2799 = _825 * _2787;
        float _2800 = (-0.0) - _2799;
        float _2802 = _2787 * _826;
        float _2804 = (cbSceneParam._m0[77u].w * _2800) / _2786;
        float _2805 = _2804 + cbSceneParam._m0[79u].w;
        float _2806 = cbSceneParam._m0[79u].w - _2799;
        float _2812 = sqrt(((_2798 * _2798) + (_2799 * _2799)) + (_2802 * _2802));
        float _2815 = (1.0 - (cbSceneParam._m0[77u].w / _2786)) * _2812;
        float _2820 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2822 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2975;
        if (abs((_2800 - _2804) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2975 = ((((_2805 > 0.0) ? exp2(_2820 * _2805) : (2.0 - exp2(_2822 * _2805))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2815;
        }
        else
        {
            float _2935 = 1.0 / cbSceneParam._m0[80u].x;
            float _2936 = isnan(_2806) ? _2805 : (isnan(_2805) ? _2806 : max(_2805, _2806));
            float _2937 = isnan(_2806) ? _2805 : (isnan(_2805) ? _2806 : min(_2805, _2806));
            float _2946 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : min(_2936, 0.0));
            float _2947 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : min(_2937, 0.0));
            _2975 = ((abs(_2812 / _2800) * cbSceneParam._m0[80u].y) * ((((_2946 - _2947) * 2.0) - ((exp2(_2820 * (isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0)))) - exp2(_2820 * (isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0))))) * _2935)) - ((exp2(_2822 * _2946) - exp2(_2822 * _2947)) * _2935))) + (_2815 * cbSceneParam._m0[80u].z);
        }
        vec4 _2977 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, 1.0), 0.0);
        float _2986 = exp2((_2975 * (-1.44269502162933349609375)) * (1.0 - _2977.w));
        float _2987 = log2(_2986);
        float _3003 = log2(_2731);
        _2824 = (exp2(_3003 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2987 * cbSceneParam._m0[78u].x)) * _2977.x) / cbSceneParam._m0[78u].x)) + _2728;
        _2826 = (exp2(_3003 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2987 * cbSceneParam._m0[78u].y)) * _2977.y) / cbSceneParam._m0[78u].y)) + _2729;
        _2828 = (exp2(_3003 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2987 * cbSceneParam._m0[78u].z)) * _2977.z) / cbSceneParam._m0[78u].z)) + _2730;
        _2830 = _2986 * _2731;
    }
    else
    {
        _2824 = _2728;
        _2826 = _2729;
        _2828 = _2730;
        _2830 = _2731;
    }
    float _2842 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2843 = _2842 == 3.0;
    float _2844 = log2(_2830);
    float _2851 = exp2(_2844 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2673 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _917))) + ((_2679 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1725)) * cbPerFrame._m0[3u].x));
    float _2852 = exp2(_2844 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2675 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _917))) + ((_2681 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1725)) * cbPerFrame._m0[3u].x));
    float _2853 = exp2(_2844 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2677 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _917))) + ((_2683 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1725)) * cbPerFrame._m0[3u].x));
    float _2862 = (_2842 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2862 * (_2843 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2824)));
    SV_Target.y = _2862 * (_2843 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2826)));
    SV_Target.z = _2862 * (_2843 ? _2853 : (_2853 + (cbSceneParam._m0[72u].w * _2828)));
    SV_Target.w = cbInstanceData._m0[_2703].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2703].w;
}


