#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1258;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _366 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _366) * cbMtdParam._m0[24u].y) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3610 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _391 = (_384 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _392 = (_384 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _393 = (_384 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _425 = _423.x;
    float _426 = _423.y;
    float _427 = _423.z;
    float _436 = ((_406.z - _427) * _384) + _427;
    float _439 = ((((_406.x - _425) * _384) + _425) * 2.0) + (-1.0);
    float _441 = ((((_406.y - _426) * _384) + _426) * 2.0) + (-1.0);
    float _442 = dot(vec2(_439, _441), vec2(_439, _441));
    float _3621 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _447 = sqrt(1.0 - (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))));
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _475 = (((_463.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _439;
    float _476 = (((_463.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _441;
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _490 = _488.x;
    float _491 = 1.0 - _490;
    float _519 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_490 - _491) * cbMtdParam._m0[24u].w) + _491) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3632 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _528 = ((((cbMtdParam._m0[10u].x - _391) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _520) + _391;
    float _529 = ((((cbMtdParam._m0[10u].y - _392) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _520) + _392;
    float _530 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _393)) * _520) + _393;
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _558 = _556.x;
    float _576 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _558) * _384) + _558;
    float _580 = ((_542.x - _576) * cbMtdParam._m0[19u].z) + _576;
    float _582 = _580 - (_580 * _520);
    float _586 = (cbMtdParam._m0[19u].w * (_463.z - _436)) + _436;
    float _590 = ((cbMtdParam._m0[23u].y - _586) * _520) + _586;
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _611 = _609.x;
    float _612 = _609.y;
    float _616 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_235, _236, _237, 0.0));
    vec4 _631 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _266) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _267) + cbTextureTilingScale._m0[18u].w));
    float _633 = _631.x;
    float _638 = fract(_631.w + cbPerFrame._m0[22u].x);
    float _640 = (1.0 - _638) * _633;
    float _645 = ((_638 + (-1.0)) + _633) * 9.0;
    float _647 = ((_633 + (-1.0)) + _638) * 9.0;
    float _648 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _649 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _663 = (_640 * ((_631.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _648 : (isnan(_648) ? 3.0 : min(_648, 3.0))) * 3.1415927410125732421875);
    float _665 = (_640 * ((_631.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _649 : (isnan(_649) ? 3.0 : min(_649, 3.0))) * 3.1415927410125732421875);
    float _669 = inversesqrt(dot(vec3(_663, _665, 1.0), vec3(_663, _665, 1.0)));
    float _685 = (((((0.5 - _611) + ((_663 * 0.5) * _669)) * _616) + _611) * 2.0) + (-1.0);
    float _686 = (((((0.5 - _612) + ((_669 * 0.5) * _665)) * _616) + _612) * 2.0) + (-1.0);
    float _687 = dot(vec2(_685, _686), vec2(_685, _686));
    float _3663 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _703 = ((((cbMtdParam._m0[22u].z * _475) - _475) + _685) * _520) + _475;
    float _704 = ((((cbMtdParam._m0[22u].z * _476) - _476) + _686) * _520) + _476;
    float _705 = (_520 * (sqrt(1.0 - (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) - _447)) + _447;
    float _707 = cbMtdParam._m0[22u].x + _463.w;
    float _710 = fma(_705, _235, fma(_704, _241 * TANGENT.x, (_227 * _219) * _703));
    float _713 = fma(_705, _236, fma(_704, _241 * TANGENT.y, (_227 * _220) * _703));
    float _716 = fma(_705, _237, fma(_704, _241 * TANGENT.z, (_227 * _221) * _703));
    float _720 = inversesqrt(dot(vec3(_710, _713, _716), vec3(_710, _713, _716)));
    float _721 = _720 * _710;
    float _722 = _720 * _713;
    float _723 = _720 * _716;
    float _3674 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _724 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _3696 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3707 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3718 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3729 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _729 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _743 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _793 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _783);
    float _794 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _783);
    float _795 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _783);
    float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
    float _800 = _793 * _799;
    float _801 = _794 * _799;
    float _802 = _795 * _799;
    float _808 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _809 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _827 = fma(_723, cbSceneParam._m0[5u].z, fma(_722, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _721));
    float _830 = fma(_723, cbSceneParam._m0[6u].z, fma(_722, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _721));
    float _833 = fma(_723, cbSceneParam._m0[7u].z, fma(_722, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _721));
    uint _847 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _853 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * cbInstanceData._m0[_847].x;
    float _854 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)))) * cbInstanceData._m0[_847].y;
    float _855 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * cbInstanceData._m0[_847].z;
    float _3740 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _859 = 1.0 - _729;
    float _860 = _856 * _859;
    float _861 = _857 * _859;
    float _862 = _858 * _859;
    float _867 = (_856 + (-0.039999999105930328369140625)) * _729;
    float _868 = (_857 + (-0.039999999105930328369140625)) * _729;
    float _869 = (_858 + (-0.039999999105930328369140625)) * _729;
    float _870 = _867 + 0.039999999105930328369140625;
    float _872 = _868 + 0.039999999105930328369140625;
    float _873 = _869 + 0.039999999105930328369140625;
    vec4 _882 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _808, cbSceneParam._m0[86u].y * _809));
    float _886 = ((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * TEXCOORD_5.w) * _882.x;
    float _887 = dot(vec3(_721, _722, _723), vec3(_800, _801, _802));
    float _890 = _887 * 2.0;
    float _894 = (_890 * _721) - _800;
    float _895 = (_890 * _722) - _801;
    float _896 = (_890 * _723) - _802;
    float _900 = abs(dot(vec3(_800, _801, _802), vec3(_721, _722, _723)));
    float _3773 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _902 = sqrt(_724);
    float _914 = exp2((_902 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_902 * 3.0));
    float _920 = (1.0 - _914) * ((_902 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _921 = _914 * _902;
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1257;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _983 = fma(_957, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949));
        float _987 = fma(_957, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949));
        float _991 = fma(_957, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949));
        float _1015 = _949 + _721;
        float _1016 = _953 + _722;
        float _1017 = _957 + _723;
        float _1027 = fma(_1017, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015)) - _983;
        float _1028 = fma(_1017, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015)) - _987;
        float _1029 = fma(_1017, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015)) - _991;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_983 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_987 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[34u].z) + ((((((_991 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1085 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1051.x + (-0.5));
        float _1087 = _1085 * (_1051.y + (-0.5));
        float _1088 = _1085 * (_1051.z + (-0.5));
        float _1095 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1058.x + (-0.5));
        float _1097 = _1095 * (_1058.y + (-0.5));
        float _1098 = _1095 * (_1058.z + (-0.5));
        float _1105 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1065.x + (-0.5));
        float _1107 = _1105 * (_1065.y + (-0.5));
        float _1108 = _1105 * (_1065.z + (-0.5));
        float _1115 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1072.x + (-0.5));
        float _1117 = _1115 * (_1072.y + (-0.5));
        float _1118 = _1115 * (_1072.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1139 = (dot(vec3(_721, _722, _723), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1149 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3821 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1151 + 1.0))) + _1156) * _1119;
        float _1166 = _1087 * 0.5;
        float _1167 = _1097 * 0.5;
        float _1168 = _1107 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_721, _722, _723), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3854 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1193 + 1.0))) + _1198) * _1120;
        float _1208 = _1088 * 0.5;
        float _1209 = _1098 * 0.5;
        float _1210 = _1108 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_721, _722, _723), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3887 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1235 + 1.0))) + _1240) * _1121;
        _1257 = _1088;
        _1259 = _1087;
        _1260 = _1086;
        _1261 = _1098;
        _1262 = _1097;
        _1263 = _1096;
        _1264 = _1108;
        _1265 = _1107;
        _1266 = _1106;
        _1267 = _1121;
        _1268 = _1120;
        _1269 = _1119;
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _1258;
        _1259 = _1258;
        _1260 = _1258;
        _1261 = _1258;
        _1262 = _1258;
        _1263 = _1258;
        _1264 = _1258;
        _1265 = _1258;
        _1266 = _1258;
        _1267 = _1258;
        _1268 = _1258;
        _1269 = _1258;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1297 = fma(_957, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949));
        float _1301 = fma(_957, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949));
        float _1305 = fma(_957, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949));
        float _1328 = _949 + _721;
        float _1329 = _953 + _722;
        float _1330 = _957 + _723;
        float _1340 = fma(_1330, cbModelParam._m0[30u].z, fma(_1329, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1328)) - _1297;
        float _1341 = fma(_1330, cbModelParam._m0[31u].z, fma(_1329, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1328)) - _1301;
        float _1342 = fma(_1330, cbModelParam._m0[32u].z, fma(_1329, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1328)) - _1305;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1297 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1301 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[35u].z) + ((((((_1305 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1396 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1363.x + (-0.5));
        float _1398 = _1396 * (_1363.y + (-0.5));
        float _1399 = _1396 * (_1363.z + (-0.5));
        float _1406 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1370.x + (-0.5));
        float _1408 = _1406 * (_1370.y + (-0.5));
        float _1409 = _1406 * (_1370.z + (-0.5));
        float _1416 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1377.x + (-0.5));
        float _1418 = _1416 * (_1377.y + (-0.5));
        float _1419 = _1416 * (_1377.z + (-0.5));
        float _1426 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1384.x + (-0.5));
        float _1428 = _1426 * (_1384.y + (-0.5));
        float _1429 = _1426 * (_1384.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_721, _722, _723), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _3950 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1460 + 1.0))) + _1465) * _1430;
        float _1475 = _1398 * 0.5;
        float _1476 = _1408 * 0.5;
        float _1477 = _1418 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_721, _722, _723), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _3983 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1502 + 1.0))) + _1507) * _1431;
        float _1517 = _1399 * 0.5;
        float _1518 = _1409 * 0.5;
        float _1519 = _1419 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_721, _722, _723), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4016 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1544 + 1.0))) + _1549) * _1432;
        _1566 = _1399;
        _1567 = _1398;
        _1568 = _1397;
        _1569 = _1409;
        _1570 = _1408;
        _1571 = _1407;
        _1572 = _1419;
        _1573 = _1418;
        _1574 = _1417;
        _1575 = _1432;
        _1576 = _1431;
        _1577 = _1430;
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _1258;
        _1567 = _1258;
        _1568 = _1258;
        _1569 = _1258;
        _1570 = _1258;
        _1571 = _1258;
        _1572 = _1258;
        _1573 = _1258;
        _1574 = _1258;
        _1575 = _1258;
        _1576 = _1258;
        _1577 = _1258;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1270)) + _1270;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1271)) + _1271;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1272)) + _1272;
    float _1613 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1590));
    float _1634 = _894 * 0.5;
    float _1635 = _895 * 0.5;
    float _1636 = _896 * 0.5;
    float _1637 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1640 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1643 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1677;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1650 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1257, _1261, _1264, _1267));
        float _1654 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1658 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1665 = dot(vec4(cbModelParam._m0[39u]), vec4(_1634, _1635, _1636, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1688;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1679 = dot(vec4(cbModelParam._m0[40u]), vec4(_1634, _1635, _1636, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1692 = (_1688 * cbModelParam._m0[1u].x) + (_1677 * (1.0 - cbModelParam._m0[1u].x));
    float _1702 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _724);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1702 : min(cbModelParam._m0[25u].z, _1702));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1752 = fma(_957, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949)) + cbModelParam._m0[13u].w;
        float _1756 = fma(_957, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949)) + cbModelParam._m0[14u].w;
        float _1760 = fma(_957, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949)) + cbModelParam._m0[15u].w;
        float _1763 = fma(_896, cbModelParam._m0[13u].z, fma(_895, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894));
        float _1766 = fma(_896, cbModelParam._m0[14u].z, fma(_895, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894));
        float _1769 = fma(_896, cbModelParam._m0[15u].z, fma(_895, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894));
        float _1797;
        if (_1763 > 0.0)
        {
            _1797 = abs((1.0 - _1752) / _1763);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1752 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1797 = frontier_phi_14_12_ladder;
        }
        float _2021;
        if (_1766 > 0.0)
        {
            _2021 = abs((1.0 - _1756) / _1766);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1756 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2021 = frontier_phi_23_19_ladder;
        }
        float _2278;
        if (_1769 > 0.0)
        {
            _2278 = abs((1.0 - _1760) / _1769);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1760 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2278 = frontier_phi_35_30_ladder;
        }
        float _2280 = isnan(_2021) ? _1797 : (isnan(_1797) ? _2021 : min(_1797, _2021));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1763) + _1752;
        float _2286 = (_2281 * _1766) + _1756;
        float _2287 = (_2281 * _1769) + _1760;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2288;
        float _2292 = _2288 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 > _2292) || ((_2286 < _2290) || ((_2285 < _2290) || (_2285 > _2292))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2287, cbModelParam._m0[9u].z, fma(_2286, cbModelParam._m0[9u].y, _2285 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2287, cbModelParam._m0[10u].z, fma(_2286, cbModelParam._m0[10u].y, _2285 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2287, cbModelParam._m0[11u].z, fma(_2286, cbModelParam._m0[11u].y, _2285 * cbModelParam._m0[11u].x))), _1703);
            frontier_phi_13_35_ladder = _2415.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2415.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2415.x * cbModelParam._m0[1u].y;
        }
        _1785 = frontier_phi_13_35_ladder_2;
        _1787 = frontier_phi_13_35_ladder_1;
        _1789 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_894, _895, _896), _1703);
        _1785 = _1773.x * cbModelParam._m0[1u].y;
        _1787 = _1773.y * cbModelParam._m0[1u].y;
        _1789 = _1773.z * cbModelParam._m0[1u].y;
    }
    float _1793 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _724);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1793 : min(cbModelParam._m0[25u].w, _1793));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1848 = fma(_957, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949)) + cbModelParam._m0[21u].w;
        float _1852 = fma(_957, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949)) + cbModelParam._m0[22u].w;
        float _1856 = fma(_957, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949)) + cbModelParam._m0[23u].w;
        float _1859 = fma(_896, cbModelParam._m0[21u].z, fma(_895, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894));
        float _1862 = fma(_896, cbModelParam._m0[22u].z, fma(_895, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894));
        float _1865 = fma(_896, cbModelParam._m0[23u].z, fma(_895, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894));
        float _2026;
        if (_1859 > 0.0)
        {
            _2026 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2026 = frontier_phi_25_21_ladder;
        }
        float _2305;
        if (_1862 > 0.0)
        {
            _2305 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2305 = frontier_phi_37_32_ladder;
        }
        float _2518;
        if (_1865 > 0.0)
        {
            _2518 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2518 = frontier_phi_46_43_ladder;
        }
        float _2520 = isnan(_2305) ? _2026 : (isnan(_2026) ? _2305 : min(_2026, _2305));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _1859) + _1848;
        float _2526 = (_2521 * _1862) + _1852;
        float _2527 = (_2521 * _1865) + _1856;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2529 = (-1.0) - _2528;
        float _2531 = _2528 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2527 > _2531) || ((_2527 < _2529) || ((_2526 > _2531) || ((_2526 < _2529) || ((_2525 < _2529) || (_2525 > _2531))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2527, cbModelParam._m0[17u].z, fma(_2526, cbModelParam._m0[17u].y, _2525 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2527, cbModelParam._m0[18u].z, fma(_2526, cbModelParam._m0[18u].y, _2525 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2527, cbModelParam._m0[19u].z, fma(_2526, cbModelParam._m0[19u].y, _2525 * cbModelParam._m0[19u].x))), _1794);
            frontier_phi_22_46_ladder = _2726.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2726.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2726.x * cbModelParam._m0[1u].z;
        }
        _1884 = frontier_phi_22_46_ladder_2;
        _1886 = frontier_phi_22_46_ladder_1;
        _1888 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_894, _895, _896), _1794);
        _1884 = _1868.x * cbModelParam._m0[1u].z;
        _1886 = _1868.y * cbModelParam._m0[1u].z;
        _1888 = _1868.z * cbModelParam._m0[1u].z;
    }
    float _1901 = (((_920 * _870) + _921) * _886) * ((cbModelParam._m0[1u].w * (_1884 - _1785)) + _1785);
    float _1903 = (((_920 * _872) + _921) * _886) * ((cbModelParam._m0[1u].w * (_1886 - _1787)) + _1787);
    float _1905 = (((_920 * _873) + _921) * _886) * ((cbModelParam._m0[1u].w * (_1888 - _1789)) + _1789);
    float _1908 = fma(_1905, cbSceneParam._m0[89u].z, fma(_1903, cbSceneParam._m0[89u].y, _1901 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1905, cbSceneParam._m0[90u].z, fma(_1903, cbSceneParam._m0[90u].y, _1901 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1905, cbSceneParam._m0[91u].z, fma(_1903, cbSceneParam._m0[91u].y, _1901 * cbSceneParam._m0[91u].x));
    vec4 _1922 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_808, _809));
    float _1924 = _1922.w;
    float _1936 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1924);
    float _1937 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1924);
    float _1938 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1924);
    uvec4 _1942 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1944 = _1942.x * 14u;
    uint _1945 = _1944 + 13u;
    float _1952 = _886 + (-1.0);
    float _1957 = (cbLight._m0[_1945].x * _1952) + 1.0;
    float _1958 = (cbLight._m0[_1945].y * _1952) + 1.0;
    float _1959 = (cbLight._m0[_1945].z * _1952) + 1.0;
    float _1960 = (cbLight._m0[_1945].w * _1952) + 1.0;
    uint _1961 = _1944 + 5u;
    float _1967 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
    uint _1971 = _1944 + 4u;
    float _1980 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
    uint _1984 = _1944 | 1u;
    float _1995 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_721, _722, _723));
    float _1998 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_721, _722, _723));
    float _4152 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _4163 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2003 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * 0.3183098733425140380859375;
    float _2005 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * 0.3183098733425140380859375;
    float _2012 = ((cbLight._m0[_1961].x * _1967) * _2005) + (((cbLight._m0[_1971].x * _1936) * _1980) * _2003);
    float _2013 = ((_1967 * cbLight._m0[_1961].y) * _2005) + (((cbLight._m0[_1971].y * _1937) * _1980) * _2003);
    float _2014 = ((_1967 * cbLight._m0[_1961].z) * _2005) + (((cbLight._m0[_1971].z * _1938) * _1980) * _2003);
    uvec4 _2018 = floatBitsToUint(cbLight._m0[_1944 + 12u]);
    bool _2020 = _2018.x == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_2020)
    {
        _2031 = _2012;
        _2033 = _2013;
        _2035 = _2014;
    }
    else
    {
        uint _2039 = _1944 + 6u;
        float _2055 = (dot(vec3(cbLight._m0[_1944 + 2u].xyz), vec3(_721, _722, _723)) * 0.5) + 0.5;
        float _2056 = _2055 * _2055;
        float _4174 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2058 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2031 = (((cbLight._m0[_2039].x * 0.3183098733425140380859375) * _2057) * _2058) + _2012;
        _2033 = (((cbLight._m0[_2039].y * 0.3183098733425140380859375) * _2057) * _2058) + _2013;
        _2035 = (((cbLight._m0[_2039].z * 0.3183098733425140380859375) * _2057) * _2058) + _2014;
    }
    bool _2038 = _2018.y == 0u;
    float _2076;
    float _2078;
    float _2080;
    if (_2038)
    {
        _2076 = _2031;
        _2078 = _2033;
        _2080 = _2035;
    }
    else
    {
        uint _2249 = _1944 + 7u;
        float _2265 = (dot(vec3(cbLight._m0[_1944 + 3u].xyz), vec3(_721, _722, _723)) * 0.5) + 0.5;
        float _2266 = _2265 * _2265;
        float _4190 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2267 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2268 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2076 = (((cbLight._m0[_2249].x * 0.3183098733425140380859375) * _2267) * _2268) + _2031;
        _2078 = (((cbLight._m0[_2249].y * 0.3183098733425140380859375) * _2267) * _2268) + _2033;
        _2080 = (((cbLight._m0[_2249].z * 0.3183098733425140380859375) * _2267) * _2268) + _2035;
    }
    uint _2083 = _1944 + 8u;
    float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _724) * 0.949999988079071044921875);
    float _2097 = _2096 * _2096;
    float _2098 = cbLight._m0[_1944].x + _800;
    float _2099 = cbLight._m0[_1944].y + _801;
    float _2100 = cbLight._m0[_1944].z + _802;
    float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
    float _2105 = _2104 * _2098;
    float _2106 = _2104 * _2099;
    float _2107 = _2104 * _2100;
    float _2108 = dot(vec3(_721, _722, _723), vec3(cbLight._m0[_1944].xyz));
    float _4206 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _4217 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2112 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2113 = dot(vec3(_721, _722, _723), vec3(_2105, _2106, _2107));
    float _4228 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_2105, _2106, _2107));
    float _4239 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2097 * _2097;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2133 = exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0);
    float _2134 = 0.959999978542327880859375 - _867;
    float _2136 = 0.959999978542327880859375 - _868;
    float _2137 = 0.959999978542327880859375 - _869;
    float _2144 = 1.0 - _2097;
    float _2155 = (0.5 / (((_2112 * ((_2111 * _2144) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2144) + _2097) * _2111))) * _2111;
    float _4250 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2157 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    uint _2171 = _1944 + 9u;
    float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _724) * 0.949999988079071044921875);
    float _2183 = _2182 * _2182;
    float _2184 = cbLight._m0[_1984].x + _800;
    float _2185 = cbLight._m0[_1984].y + _801;
    float _2186 = cbLight._m0[_1984].z + _802;
    float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
    float _2191 = _2190 * _2184;
    float _2192 = _2190 * _2185;
    float _2193 = _2190 * _2186;
    float _2194 = dot(vec3(_721, _722, _723), vec3(cbLight._m0[_1984].xyz));
    float _4261 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2198 = dot(vec3(_721, _722, _723), vec3(_2191, _2192, _2193));
    float _4272 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2202 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2191, _2192, _2193));
    float _4283 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2206 = _2183 * _2183;
    float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
    float _2217 = exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0);
    float _2224 = 1.0 - _2183;
    float _2234 = (0.5 / (((_2112 * ((_2197 * _2224) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2224) + _2183) * _2197))) * _2197;
    float _4294 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2236 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
    float _2246 = (((((_2217 * _2134) + _870) * cbLight._m0[_2171].x) * _2236) * _1967) + ((((cbLight._m0[_2083].x * _1936) * ((_2133 * _2134) + _870)) * _2157) * _1980);
    float _2247 = (((((_2217 * _2136) + _872) * cbLight._m0[_2171].y) * _2236) * _1967) + ((((cbLight._m0[_2083].y * _1937) * ((_2133 * _2136) + _872)) * _2157) * _1980);
    float _2248 = (((((_2217 * _2137) + _873) * cbLight._m0[_2171].z) * _2236) * _1967) + ((((cbLight._m0[_2083].z * _1938) * ((_2133 * _2137) + _873)) * _2157) * _1980);
    float _2310;
    float _2312;
    float _2314;
    if (_2020)
    {
        _2310 = _2246;
        _2312 = _2247;
        _2314 = _2248;
    }
    else
    {
        uint _2316 = _1944 + 2u;
        uint _2320 = _1944 + 10u;
        float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _724) * 0.949999988079071044921875);
        float _2335 = _2334 * _2334;
        float _2336 = cbLight._m0[_2316].x + _800;
        float _2337 = cbLight._m0[_2316].y + _801;
        float _2338 = cbLight._m0[_2316].z + _802;
        float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
        float _2343 = _2342 * _2336;
        float _2344 = _2342 * _2337;
        float _2345 = _2342 * _2338;
        float _2346 = dot(vec3(_721, _722, _723), vec3(cbLight._m0[_2316].xyz));
        float _4305 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2350 = dot(vec3(_721, _722, _723), vec3(_2343, _2344, _2345));
        float _4316 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2354 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2343, _2344, _2345));
        float _4327 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2358 = _2335 * _2335;
        float _2362 = ((_2353 * _2353) * (_2358 + (-1.0))) + 1.0;
        float _2369 = exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0);
        float _2376 = 1.0 - _2335;
        float _2386 = (0.5 / (((_2112 * ((_2349 * _2376) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2376) + _2335) * _2349))) * _2349;
        float _4338 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2388 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2358 / ((_2362 * _2362) * 3.141590118408203125));
        float _2389 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2310 = (((((_2369 * _2134) + _870) * cbLight._m0[_2320].x) * _2388) * _2389) + _2246;
        _2312 = (((((_2369 * _2136) + _872) * cbLight._m0[_2320].y) * _2388) * _2389) + _2247;
        _2314 = (((((_2369 * _2137) + _873) * cbLight._m0[_2320].z) * _2388) * _2389) + _2248;
    }
    float _2424;
    float _2426;
    float _2428;
    if (_2038)
    {
        _2424 = _2310;
        _2426 = _2312;
        _2428 = _2314;
    }
    else
    {
        uint _2435 = _1944 + 3u;
        uint _2439 = _1944 + 11u;
        float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _724) * 0.949999988079071044921875);
        float _2454 = _2453 * _2453;
        float _2455 = cbLight._m0[_2435].x + _800;
        float _2456 = cbLight._m0[_2435].y + _801;
        float _2457 = cbLight._m0[_2435].z + _802;
        float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
        float _2462 = _2461 * _2455;
        float _2463 = _2461 * _2456;
        float _2464 = _2461 * _2457;
        float _2465 = dot(vec3(_721, _722, _723), vec3(cbLight._m0[_2435].xyz));
        float _4354 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2469 = dot(vec3(_721, _722, _723), vec3(_2462, _2463, _2464));
        float _4365 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2473 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2462, _2463, _2464));
        float _4376 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2477 = _2454 * _2454;
        float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
        float _2488 = exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0);
        float _2495 = 1.0 - _2454;
        float _2505 = (0.5 / (((_2112 * ((_2468 * _2495) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2495) + _2454) * _2468))) * _2468;
        float _4387 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2507 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
        float _2508 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2424 = (((((_2488 * _2134) + _870) * cbLight._m0[_2439].x) * _2507) * _2508) + _2310;
        _2426 = (((((_2488 * _2136) + _872) * cbLight._m0[_2439].y) * _2507) * _2508) + _2312;
        _2428 = (((((_2488 * _2137) + _873) * cbLight._m0[_2439].z) * _2507) * _2508) + _2314;
    }
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_1942.y == 0u)
    {
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2583;
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2583;
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2583;
        uvec4 _2598 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2599 = _2598.x;
        uint _2610 = uint((float(_2598.y) * floor(float(uint(cbSceneParam._m0[85u].y * _809) / _2599))) + floor(float(uint(cbSceneParam._m0[85u].x * _808) / _2599)));
        float _2620 = (log2(_2586 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2621 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        uint _2624 = uint(isnan(14.0) ? _2621 : (isnan(_2621) ? 14.0 : min(_2621, 14.0)));
        uvec4 _2629 = texelFetch(g_lightClusterGridBuffer, int(((_2624 << 2u) + (_2610 << 6u)) >> 2u));
        uint _2630 = _2629.x;
        uint _2631 = _2598.z;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        if (((((1u << ((_2631 >> 4u) & 15u)) + 4294967295u) & _2630) == 0u) || ((_2631 & 240u) == 0u))
        {
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
        }
        else
        {
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            uint _2882 = 0u;
            uint _2891;
            bool _2892;
            for (;;)
            {
                _2891 = texelFetch(g_lightClassification, int((((_2624 << 5u) + (_2610 << 9u)) + (_2882 << 2u)) >> 2u)).x;
                _2892 = _2891 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2892)
                {
                    frontier_phi_61_pred = _2876;
                    frontier_phi_61_pred_1 = _2881;
                    frontier_phi_61_pred_2 = _2880;
                    frontier_phi_61_pred_3 = _2879;
                    frontier_phi_61_pred_4 = _2878;
                    frontier_phi_61_pred_5 = _2877;
                }
                else
                {
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    uint _3006;
                    _3000 = _2876;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2879;
                    _3004 = _2880;
                    _3005 = _2881;
                    _3006 = _2891;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    for (;;)
                    {
                        uint _3010 = uint(findLSB(_3006)) + (_2882 << 5u);
                        uint _3007 = (_3006 + 4294967295u) & _3006;
                        uint _3012 = _3010 * 48u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 3u)).x));
                        uint _3032 = (_3010 * 48u) + 4u;
                        vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3051 = (_3010 * 48u) + 8u;
                        vec3 _3062 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x));
                        float _3066 = _3026.x - _2584;
                        float _3067 = _3026.y - _2585;
                        float _3068 = _3026.z - _2586;
                        float _3069 = dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068));
                        float _3072 = inversesqrt(_3069);
                        float _3073 = _3072 * _3066;
                        float _3074 = _3072 * _3067;
                        float _3075 = _3072 * _3068;
                        float _3076 = dot(vec3(_827, _830, _833), vec3(_3073, _3074, _3075));
                        float _3081 = 1.0 - (_3069 * _3026.w);
                        float _4413 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3082 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3083 = sqrt(_3069) * _3045.w;
                        float _3086 = 1.39999997615814208984375 / (_3083 + 1.39999997615814208984375);
                        float _3087 = _3086 * _3086;
                        float _3090 = ((1.0 - _3087) * _3076) + _3087;
                        float _3093 = _3083 * _3083;
                        float _3097 = ((isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))) * _3082) / ((_3093 * 0.699999988079071044921875) + 1.0);
                        float _3101 = (-0.0) - _2584;
                        float _3102 = (-0.0) - _2585;
                        float _3103 = (-0.0) - _2586;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3108 = _3107 * _3101;
                        float _3109 = _3107 * _3102;
                        float _3110 = _3107 * _3103;
                        float _3118 = exp2(log2(1.0 / ((_3093 * 3.5) + 5.0)) * 0.25);
                        float _3119 = 1.0 - _902;
                        float _3126 = sqrt(1.0 - ((1.0 - (_3119 * _3119)) * (1.0 - (_3118 * _3118))));
                        float _3127 = _3126 * _3126;
                        float _3128 = _3127 * _3127;
                        float _3129 = _3108 + _3073;
                        float _3130 = _3109 + _3074;
                        float _3131 = _3110 + _3075;
                        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                        float _3139 = dot(vec3(_827, _830, _833), vec3(_3108, _3109, _3110));
                        float _4429 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3143 = dot(vec3(_827, _830, _833), vec3(_3135 * _3129, _3135 * _3130, _3135 * _3131));
                        float _4440 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                        float _3150 = ((_3146 * _3146) * (_3128 + (-1.0))) + 1.0;
                        float _3151 = _3086 * _3127;
                        float _3152 = _3151 * _3151;
                        float _3155 = ((1.0 - _3152) * _3076) + _3152;
                        float _4451 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3157 = 1.0 - _3127;
                        float _3167 = (0.5 / (((_3156 * ((_3142 * _3157) + _3127)) + 9.9999999392252902907785028219223e-09) + (((_3156 * _3157) + _3127) * _3142))) * _3156;
                        float _4462 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3177 = (((_3128 * 3.1415927410125732421875) * (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) / ((_3150 * _3150) * ((_3093 * 2.1991131305694580078125) + 3.141590118408203125))) * _3082;
                        _2935 = (_3097 * _3045.x) + _3003;
                        _2936 = (_3097 * _3045.y) + _3004;
                        _2937 = (_3097 * _3045.z) + _3005;
                        _2932 = (_3177 * _3062.x) + _3000;
                        _2933 = (_3177 * _3062.y) + _3001;
                        _2934 = (_3177 * _3062.z) + _3002;
                        if (_3007 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3000 = _2932;
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _2935;
                            _3004 = _2936;
                            _3005 = _2937;
                            _3006 = _3007;
                        }
                    }
                    frontier_phi_61_pred = _2932;
                    frontier_phi_61_pred_1 = _2937;
                    frontier_phi_61_pred_2 = _2936;
                    frontier_phi_61_pred_3 = _2935;
                    frontier_phi_61_pred_4 = _2934;
                    frontier_phi_61_pred_5 = _2933;
                }
                _2732 = frontier_phi_61_pred;
                _2742 = frontier_phi_61_pred_1;
                _2740 = frontier_phi_61_pred_2;
                _2738 = frontier_phi_61_pred_3;
                _2736 = frontier_phi_61_pred_4;
                _2734 = frontier_phi_61_pred_5;
                uint _2883 = _2882 + 1u;
                if (_2883 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2876 = _2732;
                    _2877 = _2734;
                    _2878 = _2736;
                    _2879 = _2738;
                    _2880 = _2740;
                    _2881 = _2742;
                    _2882 = _2883;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
        }
        uvec4 _2745 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2746 = _2745.z;
        uint _2748 = (_2746 >> 8u) & 15u;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        if (((4294967295u << _2748) & _2630) == 0u)
        {
            _2844 = _2731;
            _2846 = _2733;
            _2848 = _2735;
            _2850 = _2737;
            _2852 = _2739;
            _2854 = _2741;
        }
        else
        {
            float _2869 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
            float _2870 = _2869 * _2584;
            float _2871 = _2869 * _2585;
            float _2872 = _2869 * _2586;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2748 < ((_2746 >> 12u) & 15u))
            {
                float _2845;
                float _2847;
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _2983 = _2731;
                float _2984 = _2733;
                float _2985 = _2735;
                float _2986 = _2737;
                float _2987 = _2739;
                float _2988 = _2741;
                uint _2989 = _2748;
                uint _2998;
                bool _2999;
                for (;;)
                {
                    _2998 = texelFetch(g_lightClassification, int((((_2624 << 5u) + (_2610 << 9u)) + (_2989 << 2u)) >> 2u)).x;
                    _2999 = _2998 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2999)
                    {
                        frontier_phi_67_pred = _2986;
                        frontier_phi_67_pred_1 = _2987;
                        frontier_phi_67_pred_2 = _2988;
                        frontier_phi_67_pred_3 = _2985;
                        frontier_phi_67_pred_4 = _2984;
                        frontier_phi_67_pred_5 = _2983;
                    }
                    else
                    {
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3195 = _2983;
                        float _3196 = _2984;
                        float _3197 = _2985;
                        float _3198 = _2986;
                        float _3199 = _2987;
                        float _3200 = _2988;
                        uint _3201 = _2998;
                        uint _3202;
                        vec4 _3227;
                        float _3228;
                        vec4 _3243;
                        vec3 _3255;
                        vec4 _3270;
                        vec4 _3286;
                        float _3332;
                        bool _3333;
                        for (;;)
                        {
                            uint _3212 = ((_2989 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3201));
                            _3202 = (_3201 + 4294967295u) & _3201;
                            uint _3214 = _3212 * 40u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3228 = _3227.w;
                            uint _3230 = (_3212 * 40u) + 4u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3212 * 40u) + 8u;
                            _3255 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x));
                            uint _3257 = (_3212 * 40u) + 16u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3273 = (_3212 * 40u) + 20u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3288 = (_3212 * 40u) + 24u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3307 = (_3212 * 40u) + 28u;
                            vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3332 = fma(_2586, _3320.z, fma(_2585, _3320.y, _3320.x * _2584)) + _3320.w;
                            _3333 = !((fma(_2586, _3301.z, fma(_2585, _3301.y, _3301.x * _2584)) + _3301.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3333)
                            {
                                float _3360 = _3227.x - _2584;
                                float _3361 = _3227.y - _2585;
                                float _3362 = _3227.z - _2586;
                                float _3363 = dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362));
                                float _3366 = inversesqrt(_3363);
                                float _3367 = _3366 * _3360;
                                float _3368 = _3366 * _3361;
                                float _3369 = _3366 * _3362;
                                float _3373 = 1.0 - (_3363 / (_3228 * _3228));
                                float _4473 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3378 = sqrt(_3363) * _3243.w;
                                float _3380 = 1.39999997615814208984375 / (_3378 + 1.39999997615814208984375);
                                float _3381 = _3380 * _3380;
                                float _3384 = ((1.0 - _3381) * dot(vec3(_3367, _3368, _3369), vec3(_827, _830, _833))) + _3381;
                                float _3387 = _3378 * _3378;
                                float _3391 = (fma(_2586, _3270.z, fma(_2585, _3270.y, _3270.x * _2584)) + _3270.w) / _3332;
                                float _3392 = (fma(_2586, _3286.z, fma(_2585, _3286.y, _3286.x * _2584)) + _3286.w) / _3332;
                                float _3396 = 1.0 - dot(vec2(_3391, _3392), vec2(_3391, _3392));
                                float _4489 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3398 = _3397 * (((isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))) * _3374) / ((_3387 * 0.699999988079071044921875) + 1.0));
                                float _3410 = exp2(log2(1.0 / ((_3387 * 3.5) + 5.0)) * 0.25);
                                float _3411 = 1.0 - _902;
                                float _3418 = sqrt(1.0 - ((1.0 - (_3411 * _3411)) * (1.0 - (_3410 * _3410))));
                                float _3419 = _3418 * _3418;
                                float _3420 = _3419 * _3419;
                                float _3421 = _3367 - _2870;
                                float _3422 = _3368 - _2871;
                                float _3423 = _3369 - _2872;
                                float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                                float _3431 = dot(vec3(_827, _830, _833), vec3((-0.0) - _2870, (-0.0) - _2871, (-0.0) - _2872));
                                float _4500 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3434 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3435 = dot(vec3(_827, _830, _833), vec3(_3427 * _3421, _3427 * _3422, _3427 * _3423));
                                float _4511 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3438 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3442 = ((_3438 * _3438) * (_3420 + (-1.0))) + 1.0;
                                float _3443 = _3380 * _3419;
                                float _3444 = _3443 * _3443;
                                float _3450 = ((1.0 - _3444) * dot(vec3(_827, _830, _833), vec3(_3367, _3368, _3369))) + _3444;
                                float _4522 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3452 = 1.0 - _3419;
                                float _3462 = (0.5 / (((_3451 * ((_3434 * _3452) + _3419)) + 9.9999999392252902907785028219223e-09) + (((_3451 * _3452) + _3419) * _3434))) * _3451;
                                float _4533 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3472 = (_3397 * _3374) * (((_3420 * 3.1415927410125732421875) * (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) / ((_3442 * _3442) * ((_3387 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3472 * _3255.x;
                                frontier_phi_73_pred_1 = _3472 * _3255.y;
                                frontier_phi_73_pred_2 = _3398 * _3243.z;
                                frontier_phi_73_pred_3 = _3398 * _3243.y;
                                frontier_phi_73_pred_4 = _3398 * _3243.x;
                                frontier_phi_73_pred_5 = _3472 * _3255.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3476 = frontier_phi_73_pred;
                            _3477 = frontier_phi_73_pred_1;
                            _3481 = frontier_phi_73_pred_2;
                            _3480 = frontier_phi_73_pred_3;
                            _3479 = frontier_phi_73_pred_4;
                            _3478 = frontier_phi_73_pred_5;
                            _3185 = _3479 + _3198;
                            _3186 = _3480 + _3199;
                            _3187 = _3481 + _3200;
                            _3182 = _3476 + _3195;
                            _3183 = _3477 + _3196;
                            _3184 = _3478 + _3197;
                            if (_3202 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3202;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3185;
                        frontier_phi_67_pred_1 = _3186;
                        frontier_phi_67_pred_2 = _3187;
                        frontier_phi_67_pred_3 = _3184;
                        frontier_phi_67_pred_4 = _3183;
                        frontier_phi_67_pred_5 = _3182;
                    }
                    _2851 = frontier_phi_67_pred;
                    _2853 = frontier_phi_67_pred_1;
                    _2855 = frontier_phi_67_pred_2;
                    _2849 = frontier_phi_67_pred_3;
                    _2847 = frontier_phi_67_pred_4;
                    _2845 = frontier_phi_67_pred_5;
                    uint _2990 = _2989 + 1u;
                    if (_2990 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2983 = _2845;
                        _2984 = _2847;
                        _2985 = _2849;
                        _2986 = _2851;
                        _2987 = _2853;
                        _2988 = _2855;
                        _2989 = _2990;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2853;
                frontier_phi_55_56_ladder_1 = _2855;
                frontier_phi_55_56_ladder_2 = _2851;
                frontier_phi_55_56_ladder_3 = _2849;
                frontier_phi_55_56_ladder_4 = _2847;
                frontier_phi_55_56_ladder_5 = _2845;
            }
            else
            {
                frontier_phi_55_56_ladder = _2739;
                frontier_phi_55_56_ladder_1 = _2741;
                frontier_phi_55_56_ladder_2 = _2737;
                frontier_phi_55_56_ladder_3 = _2735;
                frontier_phi_55_56_ladder_4 = _2733;
                frontier_phi_55_56_ladder_5 = _2731;
            }
            _2844 = frontier_phi_55_56_ladder_5;
            _2846 = frontier_phi_55_56_ladder_4;
            _2848 = frontier_phi_55_56_ladder_3;
            _2850 = frontier_phi_55_56_ladder_2;
            _2852 = frontier_phi_55_56_ladder;
            _2854 = frontier_phi_55_56_ladder_1;
        }
        float _2859 = isnan(1.0) ? _886 : (isnan(_886) ? 1.0 : min(_886, 1.0));
        _2643 = (_2859 * _2850) + _2076;
        _2645 = (_2859 * _2852) + _2078;
        _2647 = (_2859 * _2854) + _2080;
        _2649 = ((_2844 * _870) * _2859) + _2424;
        _2651 = ((_2846 * _872) * _2859) + _2426;
        _2653 = ((_2848 * _873) * _2859) + _2428;
    }
    else
    {
        _2643 = _2076;
        _2645 = _2078;
        _2647 = _2080;
        _2649 = _2424;
        _2651 = _2426;
        _2653 = _2428;
    }
    float _4549 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4560 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4571 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    uint _2673 = _247 + 6u;
    float _2681 = _808 / cbSceneParam._m0[86u].x;
    float _2682 = _809 / cbSceneParam._m0[86u].y;
    vec4 _2696 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2681, _2682, (log2((isnan(cbSceneParam._m0[77u].w) ? _743 : (isnan(_743) ? cbSceneParam._m0[77u].w : min(_743, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2698 = _2696.x;
    float _2699 = _2696.y;
    float _2700 = _2696.z;
    float _2701 = _2696.w;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    if (_743 > cbSceneParam._m0[78u].w)
    {
        float _2756 = isnan(_743) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _743 : min(cbSceneParam._m0[80u].w, _743));
        float _2757 = _2756 / _743;
        float _2768 = _2757 * _793;
        float _2769 = _794 * _2757;
        float _2770 = (-0.0) - _2769;
        float _2772 = _2757 * _795;
        float _2774 = (cbSceneParam._m0[77u].w * _2770) / _2756;
        float _2775 = _2774 + cbSceneParam._m0[79u].w;
        float _2776 = cbSceneParam._m0[79u].w - _2769;
        float _2782 = sqrt(((_2768 * _2768) + (_2769 * _2769)) + (_2772 * _2772));
        float _2785 = (1.0 - (cbSceneParam._m0[77u].w / _2756)) * _2782;
        float _2790 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2792 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2945;
        if (abs((_2770 - _2774) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2945 = ((((_2775 > 0.0) ? exp2(_2790 * _2775) : (2.0 - exp2(_2792 * _2775))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2785;
        }
        else
        {
            float _2905 = 1.0 / cbSceneParam._m0[80u].x;
            float _2906 = isnan(_2776) ? _2775 : (isnan(_2775) ? _2776 : max(_2775, _2776));
            float _2907 = isnan(_2776) ? _2775 : (isnan(_2775) ? _2776 : min(_2775, _2776));
            float _2916 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : min(_2906, 0.0));
            float _2917 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : min(_2907, 0.0));
            _2945 = ((abs(_2782 / _2770) * cbSceneParam._m0[80u].y) * ((((_2916 - _2917) * 2.0) - ((exp2(_2790 * (isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0)))) - exp2(_2790 * (isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0))))) * _2905)) - ((exp2(_2792 * _2916) - exp2(_2792 * _2917)) * _2905))) + (_2785 * cbSceneParam._m0[80u].z);
        }
        vec4 _2947 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2681, _2682, 1.0), 0.0);
        float _2956 = exp2((_2945 * (-1.44269502162933349609375)) * (1.0 - _2947.w));
        float _2957 = log2(_2956);
        float _2973 = log2(_2701);
        _2794 = (exp2(_2973 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].x)) * _2947.x) / cbSceneParam._m0[78u].x)) + _2698;
        _2796 = (exp2(_2973 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].y)) * _2947.y) / cbSceneParam._m0[78u].y)) + _2699;
        _2798 = (exp2(_2973 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].z)) * _2947.z) / cbSceneParam._m0[78u].z)) + _2700;
        _2800 = _2956 * _2701;
    }
    else
    {
        _2794 = _2698;
        _2796 = _2699;
        _2798 = _2700;
        _2800 = _2701;
    }
    float _2812 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2813 = _2812 == 3.0;
    float _2814 = log2(_2800);
    float _2821 = exp2(_2814 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2643 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _886))) + ((_2649 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1692)) * cbPerFrame._m0[3u].x));
    float _2822 = exp2(_2814 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2645 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _886))) + ((_2651 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1692)) * cbPerFrame._m0[3u].x));
    float _2823 = exp2(_2814 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2647 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _886))) + ((_2653 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1692)) * cbPerFrame._m0[3u].x));
    float _2832 = (_2812 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2832 * (_2813 ? _2821 : (_2821 + (cbSceneParam._m0[72u].w * _2794)));
    SV_Target.y = _2832 * (_2813 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2796)));
    SV_Target.z = _2832 * (_2813 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2798)));
    SV_Target.w = cbInstanceData._m0[_2673].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2673].w;
}


