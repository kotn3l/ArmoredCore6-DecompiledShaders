#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1426;
float _4089;
float _4090;
float _4091;
float _4092;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _370 = _368.x;
    float _382 = dot(vec4(_370, _368.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _399 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_370 - _382) * cbMtdParam._m0[24u].y) + _382) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4101 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _407 = (_400 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _408 = (_400 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _409 = (_400 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _454 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _473 = _471.x;
    float _474 = _471.y;
    float _475 = _471.z;
    float _484 = ((_454.z - _475) * _400) + _475;
    float _487 = ((((_454.x - _473) * _400) + _473) * 2.0) + (-1.0);
    float _488 = ((((_454.y - _474) * _400) + _474) * 2.0) + (-1.0);
    float _489 = dot(vec2(_487, _488), vec2(_487, _488));
    float _4112 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _494 = sqrt(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))));
    vec4 _514 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _526 = (_487 + ((((_427.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_514.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _527 = (_488 + ((((_427.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_514.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _530 = fma(_494, _251, fma(_527, _258, _526 * _244));
    float _533 = fma(_494, _252, fma(_527, _259, _526 * _245));
    float _536 = fma(_494, _253, fma(_527, _260, _526 * _246));
    float _540 = inversesqrt(dot(vec3(_530, _533, _536), vec3(_530, _533, _536)));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _569 = _567.x;
    float _570 = 1.0 - _569;
    float _574 = ((_569 - _570) * cbMtdParam._m0[24u].z) + _570;
    float _576 = (cbMtdParam._m0[19u].x + dot(vec4(_540 * _530, _540 * _533, _540 * _536, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_574 * cbMtdParam._m0[21u].z);
    float _4123 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _579 = (-0.0) - cbMtdParam._m0[24u].x;
    float _581 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _581 : (isnan(_581) ? 1.0 : min(_581, 1.0));
    float _589 = _577 - ((_577 * TEXCOORD_8.x) * _582);
    float _590 = _577 - ((_577 * TEXCOORD_8.y) * _582);
    float _591 = _577 - ((_577 * TEXCOORD_8.z) * _582);
    float _598 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _602 = ((isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : min(_598, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _610 = (_602 - (((_574 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _602))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4154 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _615 = ((_589 * (cbMtdParam._m0[17u].x - _407)) * _611) + _407;
    float _616 = ((_590 * (cbMtdParam._m0[17u].y - _408)) * _611) + _408;
    float _617 = ((_591 * (cbMtdParam._m0[17u].z - _409)) * _611) + _409;
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _659 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_631 - _632) * cbMtdParam._m0[24u].w) + _632) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4165 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _660 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _668 = ((((cbMtdParam._m0[10u].x - _615) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _660) + _615;
    float _669 = ((((cbMtdParam._m0[10u].y - _616) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _660) + _616;
    float _670 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _617)) * _660) + _617;
    vec4 _696 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _698 = _696.x;
    float _716 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _698) * _400) + _698;
    float _720 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _716) * cbMtdParam._m0[19u].z) + _716;
    float _723 = _720 - ((_611 * _589) * _720);
    float _725 = _723 - (_723 * _660);
    float _730 = (((_427.z - _484) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _484;
    float _734 = ((_514.z - _730) * cbMtdParam._m0[19u].w) + _730;
    vec4 _748 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _755 = (_748.x * 2.0) + (-1.0);
    float _756 = (_748.y * 2.0) + (-1.0);
    float _757 = dot(vec2(_755, _756), vec2(_755, _756));
    float _4176 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _766 = (((_748.z - _734) * _589) * _611) + _734;
    float _769 = ((cbMtdParam._m0[23u].y - _766) * _660) + _766;
    vec4 _788 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _794 = (_788.x * 2.0) + (-1.0);
    float _795 = (_788.y * 2.0) + (-1.0);
    float _796 = dot(vec2(_794, _795), vec2(_794, _795));
    float _4187 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _816 = (((cbMtdParam._m0[21u].x * _526) + ((_755 - _526) * _589)) * _611) + _526;
    float _817 = (((cbMtdParam._m0[21u].x * _527) + ((_756 - _527) * _590)) * _611) + _527;
    float _818 = (((sqrt(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) - _494) * _591) * _611) + _494;
    float _829 = (((_794 - _816) + (_816 * cbMtdParam._m0[22u].z)) * _660) + _816;
    float _830 = (((_795 - _817) + (_817 * cbMtdParam._m0[22u].z)) * _660) + _817;
    float _831 = ((sqrt(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) - _818) * _660) + _818;
    float _833 = cbMtdParam._m0[22u].x + _514.w;
    float _836 = fma(_831, _251, fma(_830, _258, _829 * _244));
    float _839 = fma(_831, _252, fma(_830, _259, _829 * _245));
    float _842 = fma(_831, _253, fma(_830, _260, _829 * _246));
    float _846 = inversesqrt(dot(vec3(_836, _839, _842), vec3(_836, _839, _842)));
    float _847 = _846 * _836;
    float _848 = _846 * _839;
    float _849 = _846 * _842;
    float _4198 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _850 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _4209 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4220 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4231 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4242 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4253 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _855 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _869 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _919 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _909);
    float _920 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _909);
    float _921 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _909);
    float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
    float _926 = _919 * _925;
    float _927 = _920 * _925;
    float _928 = _921 * _925;
    vec4 _933 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _935 = _933.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1107 = sqrt(((_919 * _919) + (_920 * _920)) + (_921 * _921));
        float _1113 = (cbMatDynParam._m0[5u].x * _1107) + cbMatDynParam._m0[5u].y;
        float _4264 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1118 = (cbMatDynParam._m0[5u].z * _1107) + cbMatDynParam._m0[5u].w;
        float _4275 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) - _1114)) + _1114) < ((_935 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _946 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _947 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _965 = fma(_849, cbSceneParam._m0[5u].z, fma(_848, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _847));
    float _968 = fma(_849, cbSceneParam._m0[6u].z, fma(_848, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _847));
    float _971 = fma(_849, cbSceneParam._m0[7u].z, fma(_848, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _847));
    uint _984 = _263 + 9u;
    uint _985 = _984 + uint(cbMatDynParam._m0[0u].w);
    float _991 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * cbInstanceData._m0[_985].x;
    float _992 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * cbInstanceData._m0[_985].y;
    float _993 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * cbInstanceData._m0[_985].z;
    float _4286 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _4297 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _4308 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _997 = 1.0 - _855;
    float _998 = _994 * _997;
    float _999 = _995 * _997;
    float _1000 = _996 * _997;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _855;
    float _1006 = (_995 + (-0.039999999105930328369140625)) * _855;
    float _1007 = (_996 + (-0.039999999105930328369140625)) * _855;
    float _1008 = _1005 + 0.039999999105930328369140625;
    float _1010 = _1006 + 0.039999999105930328369140625;
    float _1011 = _1007 + 0.039999999105930328369140625;
    vec4 _1020 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _946, cbSceneParam._m0[86u].y * _947));
    float _1024 = ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * TEXCOORD_5.w) * _1020.x;
    float _1025 = dot(vec3(_847, _848, _849), vec3(_926, _927, _928));
    float _1028 = _1025 * 2.0;
    float _1032 = (_1028 * _847) - _926;
    float _1033 = (_1028 * _848) - _927;
    float _1034 = (_1028 * _849) - _928;
    float _1038 = abs(dot(vec3(_926, _927, _928), vec3(_847, _848, _849)));
    float _4319 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1040 = sqrt(_850);
    float _1053 = exp2((_1040 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1040 * 3.0));
    float _1059 = (1.0 - _1053) * ((_1040 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1060 = _1053 * _1040;
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1425;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1150 = fma(_1096, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1088));
        float _1154 = fma(_1096, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1088));
        float _1158 = fma(_1096, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1088));
        float _1183 = _1088 + _847;
        float _1184 = _1092 + _848;
        float _1185 = _1096 + _849;
        float _1195 = fma(_1185, cbModelParam._m0[26u].z, fma(_1184, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1183)) - _1150;
        float _1196 = fma(_1185, cbModelParam._m0[27u].z, fma(_1184, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1183)) - _1154;
        float _1197 = fma(_1185, cbModelParam._m0[28u].z, fma(_1184, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1183)) - _1158;
        float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
        float _1214 = ((_1201 * _1195) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1150 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1201 * _1196) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1154 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1201 * _1197) / cbModelParam._m0[34u].z) + ((((((_1158 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1253 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1219.x + (-0.5));
        float _1255 = _1253 * (_1219.y + (-0.5));
        float _1256 = _1253 * (_1219.z + (-0.5));
        float _1263 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1226.x + (-0.5));
        float _1265 = _1263 * (_1226.y + (-0.5));
        float _1266 = _1263 * (_1226.z + (-0.5));
        float _1273 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1233.x + (-0.5));
        float _1275 = _1273 * (_1233.y + (-0.5));
        float _1276 = _1273 * (_1233.z + (-0.5));
        float _1283 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1240.x + (-0.5));
        float _1285 = _1283 * (_1240.y + (-0.5));
        float _1286 = _1283 * (_1240.z + (-0.5));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = _1254 * 0.5;
        float _1291 = _1264 * 0.5;
        float _1292 = _1274 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1307 = (dot(vec3(_847, _848, _849), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1317 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4367 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1319 + 1.0))) + _1324) * _1287;
        float _1334 = _1255 * 0.5;
        float _1335 = _1265 * 0.5;
        float _1336 = _1275 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_847, _848, _849), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4400 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1361 + 1.0))) + _1366) * _1288;
        float _1376 = _1256 * 0.5;
        float _1377 = _1266 * 0.5;
        float _1378 = _1276 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_847, _848, _849), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4433 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1403 + 1.0))) + _1408) * _1289;
        _1425 = _1256;
        _1427 = _1255;
        _1428 = _1254;
        _1429 = _1266;
        _1430 = _1265;
        _1431 = _1264;
        _1432 = _1276;
        _1433 = _1275;
        _1434 = _1274;
        _1435 = _1289;
        _1436 = _1288;
        _1437 = _1287;
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
    }
    else
    {
        _1425 = _1426;
        _1427 = _1426;
        _1428 = _1426;
        _1429 = _1426;
        _1430 = _1426;
        _1431 = _1426;
        _1432 = _1426;
        _1433 = _1426;
        _1434 = _1426;
        _1435 = _1426;
        _1436 = _1426;
        _1437 = _1426;
        _1438 = 0.0;
        _1439 = 0.0;
        _1440 = 0.0;
    }
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1468 = fma(_1096, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088));
        float _1472 = fma(_1096, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088));
        float _1476 = fma(_1096, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088));
        float _1499 = _1088 + _847;
        float _1500 = _1092 + _848;
        float _1501 = _1096 + _849;
        float _1511 = fma(_1501, cbModelParam._m0[30u].z, fma(_1500, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1499)) - _1468;
        float _1512 = fma(_1501, cbModelParam._m0[31u].z, fma(_1500, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1499)) - _1472;
        float _1513 = fma(_1501, cbModelParam._m0[32u].z, fma(_1500, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1499)) - _1476;
        float _1517 = inversesqrt(dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513)));
        float _1530 = ((_1517 * _1511) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1468 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1517 * _1512) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1472 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1517 * _1513) / cbModelParam._m0[35u].z) + ((((((_1476 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        float _1567 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1534.x + (-0.5));
        float _1569 = _1567 * (_1534.y + (-0.5));
        float _1570 = _1567 * (_1534.z + (-0.5));
        float _1577 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1541.x + (-0.5));
        float _1579 = _1577 * (_1541.y + (-0.5));
        float _1580 = _1577 * (_1541.z + (-0.5));
        float _1587 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1548.x + (-0.5));
        float _1589 = _1587 * (_1548.y + (-0.5));
        float _1590 = _1587 * (_1548.z + (-0.5));
        float _1597 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1555.x + (-0.5));
        float _1599 = _1597 * (_1555.y + (-0.5));
        float _1600 = _1597 * (_1555.z + (-0.5));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = _1568 * 0.5;
        float _1605 = _1578 * 0.5;
        float _1606 = _1588 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_847, _848, _849), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4496 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1631 + 1.0))) + _1636) * _1601;
        float _1646 = _1569 * 0.5;
        float _1647 = _1579 * 0.5;
        float _1648 = _1589 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_847, _848, _849), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4507 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4518 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4529 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_1673 + 1.0))) + _1678) * _1602;
        float _1688 = _1570 * 0.5;
        float _1689 = _1580 * 0.5;
        float _1690 = _1590 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_847, _848, _849), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4540 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4551 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4562 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_1715 + 1.0))) + _1720) * _1603;
        _1737 = _1570;
        _1738 = _1569;
        _1739 = _1568;
        _1740 = _1580;
        _1741 = _1579;
        _1742 = _1578;
        _1743 = _1590;
        _1744 = _1589;
        _1745 = _1588;
        _1746 = _1603;
        _1747 = _1602;
        _1748 = _1601;
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
    }
    else
    {
        _1737 = _1426;
        _1738 = _1426;
        _1739 = _1426;
        _1740 = _1426;
        _1741 = _1426;
        _1742 = _1426;
        _1743 = _1426;
        _1744 = _1426;
        _1745 = _1426;
        _1746 = _1426;
        _1747 = _1426;
        _1748 = _1426;
        _1749 = 0.0;
        _1750 = 0.0;
        _1751 = 0.0;
    }
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1438)) + _1438;
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1439)) + _1439;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1440)) + _1440;
    float _1784 = fma(_1763, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1761 * cbSceneParam._m0[89u].x));
    float _1787 = fma(_1763, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1761 * cbSceneParam._m0[90u].x));
    float _1790 = fma(_1763, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1761));
    float _1805 = _1032 * 0.5;
    float _1806 = _1033 * 0.5;
    float _1807 = _1034 * 0.5;
    float _1808 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1811 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1814 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1848;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1821 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1425, _1429, _1432, _1435));
        float _1825 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1427, _1430, _1433, _1436));
        float _1829 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1428, _1431, _1434, _1437));
        float _1836 = dot(vec4(cbModelParam._m0[39u]), vec4(_1805, _1806, _1807, 1.0));
        _1848 = dot(vec3(isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1848 = 1.0;
    }
    float _1859;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1850 = dot(vec4(cbModelParam._m0[40u]), vec4(_1805, _1806, _1807, 1.0));
        _1859 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1850) ? 0.0 : (isnan(0.0) ? _1850 : max(0.0, _1850))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1859 = 1.0;
    }
    float _1863 = (_1859 * cbModelParam._m0[1u].x) + (_1848 * (1.0 - cbModelParam._m0[1u].x));
    float _1873 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _850);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1873 : min(cbModelParam._m0[25u].z, _1873));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1922 = fma(_1096, cbModelParam._m0[13u].z, fma(_1092, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1088)) + cbModelParam._m0[13u].w;
        float _1926 = fma(_1096, cbModelParam._m0[14u].z, fma(_1092, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1088)) + cbModelParam._m0[14u].w;
        float _1930 = fma(_1096, cbModelParam._m0[15u].z, fma(_1092, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1088)) + cbModelParam._m0[15u].w;
        float _1933 = fma(_1034, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032));
        float _1936 = fma(_1034, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032));
        float _1939 = fma(_1034, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032));
        float _1967;
        if (_1933 > 0.0)
        {
            _1967 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1967 = frontier_phi_17_15_ladder;
        }
        float _2139;
        if (_1936 > 0.0)
        {
            _2139 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2139 = frontier_phi_26_22_ladder;
        }
        float _2434;
        if (_1939 > 0.0)
        {
            _2434 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2434 = frontier_phi_38_33_ladder;
        }
        float _2436 = isnan(_2139) ? _1967 : (isnan(_1967) ? _2139 : min(_1967, _2139));
        float _2437 = isnan(_2434) ? _2436 : (isnan(_2436) ? _2434 : min(_2436, _2434));
        float _2441 = (_2437 * _1933) + _1922;
        float _2442 = (_2437 * _1936) + _1926;
        float _2443 = (_2437 * _1939) + _1930;
        float _2444 = _2437 * 9.9999997473787516355514526367188e-05;
        float _2446 = (-1.0) - _2444;
        float _2448 = _2444 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2443 > _2448) || ((_2443 < _2446) || ((_2442 > _2448) || ((_2442 < _2446) || ((_2441 < _2446) || (_2441 > _2448))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2443, cbModelParam._m0[9u].z, fma(_2442, cbModelParam._m0[9u].y, _2441 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2443, cbModelParam._m0[10u].z, fma(_2442, cbModelParam._m0[10u].y, _2441 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2443, cbModelParam._m0[11u].z, fma(_2442, cbModelParam._m0[11u].y, _2441 * cbModelParam._m0[11u].x))), _1874);
            frontier_phi_16_38_ladder = _2588.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2588.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2588.x * cbModelParam._m0[1u].y;
        }
        _1955 = frontier_phi_16_38_ladder_2;
        _1957 = frontier_phi_16_38_ladder_1;
        _1959 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1032, _1033, _1034), _1874);
        _1955 = _1943.x * cbModelParam._m0[1u].y;
        _1957 = _1943.y * cbModelParam._m0[1u].y;
        _1959 = _1943.z * cbModelParam._m0[1u].y;
    }
    float _1963 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _850);
    float _1964 = isnan(_1963) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1963 : min(cbModelParam._m0[25u].w, _1963));
    float _2054;
    float _2056;
    float _2058;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2018 = fma(_1096, cbModelParam._m0[21u].z, fma(_1092, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1088)) + cbModelParam._m0[21u].w;
        float _2022 = fma(_1096, cbModelParam._m0[22u].z, fma(_1092, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1088)) + cbModelParam._m0[22u].w;
        float _2026 = fma(_1096, cbModelParam._m0[23u].z, fma(_1092, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1088)) + cbModelParam._m0[23u].w;
        float _2029 = fma(_1034, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032));
        float _2032 = fma(_1034, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032));
        float _2035 = fma(_1034, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032));
        float _2144;
        if (_2029 > 0.0)
        {
            _2144 = abs((1.0 - _2018) / _2029);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2018 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2144 = frontier_phi_28_24_ladder;
        }
        float _2461;
        if (_2032 > 0.0)
        {
            _2461 = abs((1.0 - _2022) / _2032);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2022 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2461 = frontier_phi_40_35_ladder;
        }
        float _2799;
        if (_2035 > 0.0)
        {
            _2799 = abs((1.0 - _2026) / _2035);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2026 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2799 = frontier_phi_50_47_ladder;
        }
        float _2801 = isnan(_2461) ? _2144 : (isnan(_2144) ? _2461 : min(_2144, _2461));
        float _2802 = isnan(_2799) ? _2801 : (isnan(_2801) ? _2799 : min(_2801, _2799));
        float _2806 = (_2802 * _2029) + _2018;
        float _2807 = (_2802 * _2032) + _2022;
        float _2808 = (_2802 * _2035) + _2026;
        float _2809 = _2802 * 9.9999997473787516355514526367188e-05;
        float _2810 = (-1.0) - _2809;
        float _2812 = _2809 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2808 > _2812) || ((_2808 < _2810) || ((_2807 > _2812) || ((_2807 < _2810) || ((_2806 < _2810) || (_2806 > _2812))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2930 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2808, cbModelParam._m0[17u].z, fma(_2807, cbModelParam._m0[17u].y, _2806 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2808, cbModelParam._m0[18u].z, fma(_2807, cbModelParam._m0[18u].y, _2806 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2808, cbModelParam._m0[19u].z, fma(_2807, cbModelParam._m0[19u].y, _2806 * cbModelParam._m0[19u].x))), _1964);
            frontier_phi_25_50_ladder = _2930.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2930.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2930.x * cbModelParam._m0[1u].z;
        }
        _2054 = frontier_phi_25_50_ladder_2;
        _2056 = frontier_phi_25_50_ladder_1;
        _2058 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2038 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1032, _1033, _1034), _1964);
        _2054 = _2038.x * cbModelParam._m0[1u].z;
        _2056 = _2038.y * cbModelParam._m0[1u].z;
        _2058 = _2038.z * cbModelParam._m0[1u].z;
    }
    float _2071 = (((_1059 * _1008) + _1060) * _1024) * ((cbModelParam._m0[1u].w * (_2054 - _1955)) + _1955);
    float _2073 = (((_1059 * _1010) + _1060) * _1024) * ((cbModelParam._m0[1u].w * (_2056 - _1957)) + _1957);
    float _2075 = (((_1059 * _1011) + _1060) * _1024) * ((cbModelParam._m0[1u].w * (_2058 - _1959)) + _1959);
    float _2078 = fma(_2075, cbSceneParam._m0[89u].z, fma(_2073, cbSceneParam._m0[89u].y, _2071 * cbSceneParam._m0[89u].x));
    float _2081 = fma(_2075, cbSceneParam._m0[90u].z, fma(_2073, cbSceneParam._m0[90u].y, _2071 * cbSceneParam._m0[90u].x));
    float _2084 = fma(_2075, cbSceneParam._m0[91u].z, fma(_2073, cbSceneParam._m0[91u].y, _2071 * cbSceneParam._m0[91u].x));
    float _2118 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2122 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2126 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2130 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2131 = _2118 / _2130;
    float _2132 = _2122 / _2130;
    float _2133 = _2126 / _2130;
    float _2280;
    float _2281;
    float _2282;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2160 = ((uint(_2133 > cbSceneParam._m0[59u].y) + uint(_2133 > cbSceneParam._m0[59u].x)) + uint(_2133 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2161 = _2160 + 43u;
        uint _2169 = _2160 + 44u;
        uint _2177 = _2160 + 45u;
        uint _2185 = _2160 + 46u;
        float _2196 = fma(_2130, cbSceneParam._m0[_2161].w, fma(_2126, cbSceneParam._m0[_2161].z, fma(_2122, cbSceneParam._m0[_2161].y, _2118 * cbSceneParam._m0[_2161].x)));
        float _2200 = fma(_2130, cbSceneParam._m0[_2169].w, fma(_2126, cbSceneParam._m0[_2169].z, fma(_2122, cbSceneParam._m0[_2169].y, _2118 * cbSceneParam._m0[_2169].x)));
        float _2208 = fma(_2130, cbSceneParam._m0[_2185].w, fma(_2126, cbSceneParam._m0[_2185].z, fma(_2122, cbSceneParam._m0[_2185].y, _2118 * cbSceneParam._m0[_2185].x)));
        float _2213 = cbSceneParam._m0[33u].z * _2208;
        float _2215 = cbSceneParam._m0[33u].w * _2208;
        float _2218 = fma(_2130, cbSceneParam._m0[_2177].w, fma(_2126, cbSceneParam._m0[_2177].z, fma(_2122, cbSceneParam._m0[_2177].y, _2118 * cbSceneParam._m0[_2177].x))) / _2208;
        float _2266 = (cbSceneParam._m0[33u].x - sqrt(((_2132 * _2132) + (_2131 * _2131)) + (_2133 * _2133))) * cbSceneParam._m0[33u].y;
        float _4688 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2273 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2213 + _2196) / _2208, (_2215 + _2200) / _2208), _2218), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2215 + _2196) / _2208, (_2200 - _2213) / _2208), _2218), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 - _2213) / _2208, (_2200 - _2215) / _2208), _2218), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 - _2215) / _2208, (_2213 + _2200) / _2208), _2218), 0.0)).x), vec4(0.25)));
        _2280 = 1.0 - (_2273 * cbSceneParam._m0[34u].x);
        _2281 = 1.0 - (_2273 * cbSceneParam._m0[34u].y);
        _2282 = 1.0 - (_2273 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2280 = 1.0;
        _2281 = 1.0;
        _2282 = 1.0;
    }
    float _2346;
    float _2348;
    float _2350;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2334 = fma(_2130, cbSceneParam._m0[63u].w, fma(_2126, cbSceneParam._m0[63u].z, fma(_2122, cbSceneParam._m0[63u].y, _2118 * cbSceneParam._m0[63u].x)));
        float _2335 = fma(_2130, cbSceneParam._m0[60u].w, fma(_2126, cbSceneParam._m0[60u].z, fma(_2122, cbSceneParam._m0[60u].y, _2118 * cbSceneParam._m0[60u].x))) / _2334;
        float _2336 = fma(_2130, cbSceneParam._m0[61u].w, fma(_2126, cbSceneParam._m0[61u].z, fma(_2122, cbSceneParam._m0[61u].y, _2118 * cbSceneParam._m0[61u].x))) / _2334;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2335 >= cbSceneParam._m0[64u].x) && (_2336 >= cbSceneParam._m0[64u].y)) && (_2335 <= cbSceneParam._m0[64u].z)) && (_2336 <= cbSceneParam._m0[64u].w))
        {
            float _2474 = fma(_2130, cbSceneParam._m0[62u].w, fma(_2126, cbSceneParam._m0[62u].z, fma(_2122, cbSceneParam._m0[62u].y, _2118 * cbSceneParam._m0[62u].x))) / _2334;
            float _2478 = isnan(cbSceneParam._m0[41u].w) ? _2474 : (isnan(_2474) ? cbSceneParam._m0[41u].w : max(_2474, cbSceneParam._m0[41u].w));
            float _2521 = (cbSceneParam._m0[33u].x - sqrt(((_2132 * _2132) + (_2131 * _2131)) + (_2133 * _2133))) * cbSceneParam._m0[33u].y;
            float _4704 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
            float _2528 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2335, cbSceneParam._m0[33u].w + _2336), _2478), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2335, _2336 - cbSceneParam._m0[33u].z), _2478), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2335 - cbSceneParam._m0[33u].z, _2336 - cbSceneParam._m0[33u].w), _2478), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2335 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2336), _2478), 0.0)).x), vec4(0.25)));
            float _2532 = 1.0 - (_2528 * cbSceneParam._m0[34u].x);
            float _2533 = 1.0 - (_2528 * cbSceneParam._m0[34u].y);
            float _2534 = 1.0 - (_2528 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2534) ? _2282 : (isnan(_2282) ? _2534 : min(_2282, _2534));
            frontier_phi_37_36_ladder_1 = isnan(_2533) ? _2281 : (isnan(_2281) ? _2533 : min(_2281, _2533));
            frontier_phi_37_36_ladder_2 = isnan(_2532) ? _2280 : (isnan(_2280) ? _2532 : min(_2280, _2532));
        }
        else
        {
            frontier_phi_37_36_ladder = _2282;
            frontier_phi_37_36_ladder_1 = _2281;
            frontier_phi_37_36_ladder_2 = _2280;
        }
        _2346 = frontier_phi_37_36_ladder_2;
        _2348 = frontier_phi_37_36_ladder_1;
        _2350 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2346 = _2280;
        _2348 = _2281;
        _2350 = _2282;
    }
    uvec4 _2355 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2357 = _2355.x * 14u;
    uint _2358 = _2357 + 13u;
    float _2365 = _1024 + (-1.0);
    float _2370 = (cbLight._m0[_2358].x * _2365) + 1.0;
    float _2371 = (cbLight._m0[_2358].y * _2365) + 1.0;
    float _2372 = (cbLight._m0[_2358].z * _2365) + 1.0;
    float _2373 = (cbLight._m0[_2358].w * _2365) + 1.0;
    uint _2374 = _2357 + 5u;
    float _2380 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
    uint _2384 = _2357 + 4u;
    float _2393 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
    uint _2397 = _2357 | 1u;
    float _2408 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_847, _848, _849));
    float _2411 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_847, _848, _849));
    float _4740 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _4751 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2416 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * 0.3183098733425140380859375;
    float _2418 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * 0.3183098733425140380859375;
    float _2425 = ((cbLight._m0[_2374].x * _2380) * _2418) + (((cbLight._m0[_2384].x * _2346) * _2393) * _2416);
    float _2426 = ((_2380 * cbLight._m0[_2374].y) * _2418) + (((cbLight._m0[_2384].y * _2348) * _2393) * _2416);
    float _2427 = ((_2380 * cbLight._m0[_2374].z) * _2418) + (((cbLight._m0[_2384].z * _2350) * _2393) * _2416);
    uvec4 _2431 = floatBitsToUint(cbLight._m0[_2357 + 12u]);
    bool _2433 = _2431.x == 0u;
    float _2535;
    float _2537;
    float _2539;
    if (_2433)
    {
        _2535 = _2425;
        _2537 = _2426;
        _2539 = _2427;
    }
    else
    {
        uint _2543 = _2357 + 6u;
        float _2559 = (dot(vec3(cbLight._m0[_2357 + 2u].xyz), vec3(_847, _848, _849)) * 0.5) + 0.5;
        float _2560 = _2559 * _2559;
        float _4762 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2561 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2562 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2535 = (((cbLight._m0[_2543].x * 0.3183098733425140380859375) * _2561) * _2562) + _2425;
        _2537 = (((cbLight._m0[_2543].y * 0.3183098733425140380859375) * _2561) * _2562) + _2426;
        _2539 = (((cbLight._m0[_2543].z * 0.3183098733425140380859375) * _2561) * _2562) + _2427;
    }
    bool _2542 = _2431.y == 0u;
    float _2597;
    float _2599;
    float _2601;
    if (_2542)
    {
        _2597 = _2535;
        _2599 = _2537;
        _2601 = _2539;
    }
    else
    {
        uint _2770 = _2357 + 7u;
        float _2786 = (dot(vec3(cbLight._m0[_2357 + 3u].xyz), vec3(_847, _848, _849)) * 0.5) + 0.5;
        float _2787 = _2786 * _2786;
        float _4778 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2788 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2789 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        _2597 = (((cbLight._m0[_2770].x * 0.3183098733425140380859375) * _2788) * _2789) + _2535;
        _2599 = (((cbLight._m0[_2770].y * 0.3183098733425140380859375) * _2788) * _2789) + _2537;
        _2601 = (((cbLight._m0[_2770].z * 0.3183098733425140380859375) * _2788) * _2789) + _2539;
    }
    uint _2604 = _2357 + 8u;
    float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _850) * 0.949999988079071044921875);
    float _2618 = _2617 * _2617;
    float _2619 = cbLight._m0[_2357].x + _926;
    float _2620 = cbLight._m0[_2357].y + _927;
    float _2621 = cbLight._m0[_2357].z + _928;
    float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
    float _2626 = _2625 * _2619;
    float _2627 = _2625 * _2620;
    float _2628 = _2625 * _2621;
    float _2629 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2357].xyz));
    float _4794 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2632 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
    float _4805 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2633 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
    float _2634 = dot(vec3(_847, _848, _849), vec3(_2626, _2627, _2628));
    float _4816 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
    float _2638 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2626, _2627, _2628));
    float _4827 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2642 = _2618 * _2618;
    float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
    float _2654 = exp2(log2(1.0 - (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)))) * 5.0);
    float _2655 = 0.959999978542327880859375 - _1005;
    float _2657 = 0.959999978542327880859375 - _1006;
    float _2658 = 0.959999978542327880859375 - _1007;
    float _2665 = 1.0 - _2618;
    float _2676 = (0.5 / (((_2633 * ((_2632 * _2665) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _2665) + _2618) * _2632))) * _2632;
    float _4838 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2678 = (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
    uint _2692 = _2357 + 9u;
    float _2703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _850) * 0.949999988079071044921875);
    float _2704 = _2703 * _2703;
    float _2705 = cbLight._m0[_2397].x + _926;
    float _2706 = cbLight._m0[_2397].y + _927;
    float _2707 = cbLight._m0[_2397].z + _928;
    float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
    float _2712 = _2711 * _2705;
    float _2713 = _2711 * _2706;
    float _2714 = _2711 * _2707;
    float _2715 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2397].xyz));
    float _4849 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2718 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
    float _2719 = dot(vec3(_847, _848, _849), vec3(_2712, _2713, _2714));
    float _4860 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2722 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
    float _2723 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2712, _2713, _2714));
    float _4871 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2727 = _2704 * _2704;
    float _2731 = ((_2722 * _2722) * (_2727 + (-1.0))) + 1.0;
    float _2738 = exp2(log2(1.0 - (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) * 5.0);
    float _2745 = 1.0 - _2704;
    float _2755 = (0.5 / (((_2633 * ((_2718 * _2745) + _2704)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _2745) + _2704) * _2718))) * _2718;
    float _4882 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2757 = (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2727 / ((_2731 * _2731) * 3.141590118408203125));
    float _2767 = (((((_2738 * _2655) + _1008) * cbLight._m0[_2692].x) * _2757) * _2380) + ((((cbLight._m0[_2604].x * _2346) * ((_2654 * _2655) + _1008)) * _2678) * _2393);
    float _2768 = (((((_2738 * _2657) + _1010) * cbLight._m0[_2692].y) * _2757) * _2380) + ((((cbLight._m0[_2604].y * _2348) * ((_2654 * _2657) + _1010)) * _2678) * _2393);
    float _2769 = (((((_2738 * _2658) + _1011) * cbLight._m0[_2692].z) * _2757) * _2380) + ((((cbLight._m0[_2604].z * _2350) * ((_2654 * _2658) + _1011)) * _2678) * _2393);
    float _2825;
    float _2827;
    float _2829;
    if (_2433)
    {
        _2825 = _2767;
        _2827 = _2768;
        _2829 = _2769;
    }
    else
    {
        uint _2831 = _2357 + 2u;
        uint _2835 = _2357 + 10u;
        float _2849 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2831].w)) * _850) * 0.949999988079071044921875);
        float _2850 = _2849 * _2849;
        float _2851 = cbLight._m0[_2831].x + _926;
        float _2852 = cbLight._m0[_2831].y + _927;
        float _2853 = cbLight._m0[_2831].z + _928;
        float _2857 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
        float _2858 = _2857 * _2851;
        float _2859 = _2857 * _2852;
        float _2860 = _2857 * _2853;
        float _2861 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2831].xyz));
        float _4893 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2864 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
        float _2865 = dot(vec3(_847, _848, _849), vec3(_2858, _2859, _2860));
        float _4904 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2868 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
        float _2869 = dot(vec3(cbLight._m0[_2831].xyz), vec3(_2858, _2859, _2860));
        float _4915 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2873 = _2850 * _2850;
        float _2877 = ((_2868 * _2868) * (_2873 + (-1.0))) + 1.0;
        float _2884 = exp2(log2(1.0 - (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) * 5.0);
        float _2891 = 1.0 - _2850;
        float _2901 = (0.5 / (((_2633 * ((_2864 * _2891) + _2850)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _2891) + _2850) * _2864))) * _2864;
        float _4926 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2903 = (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2873 / ((_2877 * _2877) * 3.141590118408203125));
        float _2904 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2825 = (((((_2884 * _2655) + _1008) * cbLight._m0[_2835].x) * _2903) * _2904) + _2767;
        _2827 = (((((_2884 * _2657) + _1010) * cbLight._m0[_2835].y) * _2903) * _2904) + _2768;
        _2829 = (((((_2884 * _2658) + _1011) * cbLight._m0[_2835].z) * _2903) * _2904) + _2769;
    }
    float _2935;
    float _2937;
    float _2939;
    if (_2542)
    {
        _2935 = _2825;
        _2937 = _2827;
        _2939 = _2829;
    }
    else
    {
        uint _2946 = _2357 + 3u;
        uint _2950 = _2357 + 11u;
        float _2964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2946].w)) * _850) * 0.949999988079071044921875);
        float _2965 = _2964 * _2964;
        float _2966 = cbLight._m0[_2946].x + _926;
        float _2967 = cbLight._m0[_2946].y + _927;
        float _2968 = cbLight._m0[_2946].z + _928;
        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
        float _2973 = _2972 * _2966;
        float _2974 = _2972 * _2967;
        float _2975 = _2972 * _2968;
        float _2976 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2946].xyz));
        float _4942 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2979 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
        float _2980 = dot(vec3(_847, _848, _849), vec3(_2973, _2974, _2975));
        float _4953 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2983 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
        float _2984 = dot(vec3(cbLight._m0[_2946].xyz), vec3(_2973, _2974, _2975));
        float _4964 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        float _2988 = _2965 * _2965;
        float _2992 = ((_2983 * _2983) * (_2988 + (-1.0))) + 1.0;
        float _2999 = exp2(log2(1.0 - (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0)))) * 5.0);
        float _3006 = 1.0 - _2965;
        float _3016 = (0.5 / (((_2633 * ((_2979 * _3006) + _2965)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _3006) + _2965) * _2979))) * _2979;
        float _4975 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        float _3018 = (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2988 / ((_2992 * _2992) * 3.141590118408203125));
        float _3019 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        _2935 = (((((_2999 * _2655) + _1008) * cbLight._m0[_2950].x) * _3018) * _3019) + _2825;
        _2937 = (((((_2999 * _2657) + _1010) * cbLight._m0[_2950].y) * _3018) * _3019) + _2827;
        _2939 = (((((_2999 * _2658) + _1011) * cbLight._m0[_2950].z) * _3018) * _3019) + _2829;
    }
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    if (_2355.y == 0u)
    {
        uvec4 _3040 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3041 = _3040.x;
        uint _3052 = uint((float(_3040.y) * floor(float(uint(cbSceneParam._m0[85u].y * _947) / _3041))) + floor(float(uint(cbSceneParam._m0[85u].x * _946) / _3041)));
        float _3062 = (log2(_2133 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3063 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
        uint _3066 = uint(isnan(14.0) ? _3063 : (isnan(_3063) ? 14.0 : min(_3063, 14.0)));
        uvec4 _3071 = texelFetch(g_lightClusterGridBuffer, int(((_3066 << 2u) + (_3052 << 6u)) >> 2u));
        uint _3072 = _3071.x;
        uint _3073 = _3040.z;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        if (((((1u << ((_3073 >> 4u) & 15u)) + 4294967295u) & _3072) == 0u) || ((_3073 & 240u) == 0u))
        {
            _3152 = 0.0;
            _3154 = 0.0;
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
            _3162 = 0.0;
        }
        else
        {
            float _3153;
            float _3155;
            float _3157;
            float _3159;
            float _3161;
            float _3163;
            float _3304 = 0.0;
            float _3305 = 0.0;
            float _3306 = 0.0;
            float _3307 = 0.0;
            float _3308 = 0.0;
            float _3309 = 0.0;
            uint _3310 = 0u;
            uint _3319;
            bool _3320;
            for (;;)
            {
                _3319 = texelFetch(g_lightClassification, int((((_3066 << 5u) + (_3052 << 9u)) + (_3310 << 2u)) >> 2u)).x;
                _3320 = _3319 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3320)
                {
                    frontier_phi_71_pred = _3309;
                    frontier_phi_71_pred_1 = _3308;
                    frontier_phi_71_pred_2 = _3307;
                    frontier_phi_71_pred_3 = _3306;
                    frontier_phi_71_pred_4 = _3305;
                    frontier_phi_71_pred_5 = _3304;
                }
                else
                {
                    float _3449;
                    float _3450;
                    float _3451;
                    float _3452;
                    float _3453;
                    float _3454;
                    uint _3455;
                    _3449 = _3304;
                    _3450 = _3305;
                    _3451 = _3306;
                    _3452 = _3307;
                    _3453 = _3308;
                    _3454 = _3309;
                    _3455 = _3319;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    for (;;)
                    {
                        uint _3459 = uint(findLSB(_3455)) + (_3310 << 5u);
                        uint _3456 = (_3455 + 4294967295u) & _3455;
                        uint _3461 = _3459 * 48u;
                        vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3461)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 3u)).x));
                        uint _3481 = (_3459 * 48u) + 4u;
                        vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3481)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 3u)).x));
                        uint _3500 = (_3459 * 48u) + 8u;
                        vec3 _3511 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3500)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 2u)).x));
                        float _3515 = _3475.x - _2131;
                        float _3516 = _3475.y - _2132;
                        float _3517 = _3475.z - _2133;
                        float _3518 = dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517));
                        float _3521 = inversesqrt(_3518);
                        float _3522 = _3521 * _3515;
                        float _3523 = _3521 * _3516;
                        float _3524 = _3521 * _3517;
                        float _3525 = dot(vec3(_965, _968, _971), vec3(_3522, _3523, _3524));
                        float _3530 = 1.0 - (_3518 * _3475.w);
                        float _5001 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3531 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                        float _3532 = sqrt(_3518) * _3494.w;
                        float _3535 = 1.39999997615814208984375 / (_3532 + 1.39999997615814208984375);
                        float _3536 = _3535 * _3535;
                        float _3539 = ((1.0 - _3536) * _3525) + _3536;
                        float _3542 = _3532 * _3532;
                        float _3546 = ((isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0))) * _3531) / ((_3542 * 0.699999988079071044921875) + 1.0);
                        float _3550 = (-0.0) - _2131;
                        float _3551 = (-0.0) - _2132;
                        float _3552 = (-0.0) - _2133;
                        float _3556 = inversesqrt(dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552)));
                        float _3557 = _3556 * _3550;
                        float _3558 = _3556 * _3551;
                        float _3559 = _3556 * _3552;
                        float _3566 = exp2(log2(1.0 / ((_3542 * 3.5) + 5.0)) * 0.25);
                        float _3567 = 1.0 - _1040;
                        float _3574 = sqrt(1.0 - ((1.0 - (_3567 * _3567)) * (1.0 - (_3566 * _3566))));
                        float _3575 = _3574 * _3574;
                        float _3576 = _3575 * _3575;
                        float _3577 = _3557 + _3522;
                        float _3578 = _3558 + _3523;
                        float _3579 = _3559 + _3524;
                        float _3583 = inversesqrt(dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579)));
                        float _3587 = dot(vec3(_965, _968, _971), vec3(_3557, _3558, _3559));
                        float _5017 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3590 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                        float _3591 = dot(vec3(_965, _968, _971), vec3(_3583 * _3577, _3583 * _3578, _3583 * _3579));
                        float _5028 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3594 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                        float _3598 = ((_3594 * _3594) * (_3576 + (-1.0))) + 1.0;
                        float _3599 = _3535 * _3575;
                        float _3600 = _3599 * _3599;
                        float _3603 = ((1.0 - _3600) * _3525) + _3600;
                        float _5039 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                        float _3604 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                        float _3605 = 1.0 - _3575;
                        float _3615 = (0.5 / (((_3604 * ((_3590 * _3605) + _3575)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3575) * _3590))) * _3604;
                        float _5050 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                        float _3626 = (((_3576 * 3.1415927410125732421875) * (isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0)))) / ((_3598 * _3598) * ((_3542 * 2.1991131305694580078125) + 3.141590118408203125))) * _3531;
                        _3379 = (_3546 * _3494.x) + _3452;
                        _3380 = (_3546 * _3494.y) + _3453;
                        _3381 = (_3546 * _3494.z) + _3454;
                        _3376 = (_3626 * _3511.x) + _3449;
                        _3377 = (_3626 * _3511.y) + _3450;
                        _3378 = (_3626 * _3511.z) + _3451;
                        if (_3456 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3449 = _3376;
                            _3450 = _3377;
                            _3451 = _3378;
                            _3452 = _3379;
                            _3453 = _3380;
                            _3454 = _3381;
                            _3455 = _3456;
                        }
                    }
                    frontier_phi_71_pred = _3381;
                    frontier_phi_71_pred_1 = _3380;
                    frontier_phi_71_pred_2 = _3379;
                    frontier_phi_71_pred_3 = _3378;
                    frontier_phi_71_pred_4 = _3377;
                    frontier_phi_71_pred_5 = _3376;
                }
                _3163 = frontier_phi_71_pred;
                _3161 = frontier_phi_71_pred_1;
                _3159 = frontier_phi_71_pred_2;
                _3157 = frontier_phi_71_pred_3;
                _3155 = frontier_phi_71_pred_4;
                _3153 = frontier_phi_71_pred_5;
                uint _3311 = _3310 + 1u;
                if (_3311 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3304 = _3153;
                    _3305 = _3155;
                    _3306 = _3157;
                    _3307 = _3159;
                    _3308 = _3161;
                    _3309 = _3163;
                    _3310 = _3311;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3152 = _3153;
            _3154 = _3155;
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
            _3162 = _3163;
        }
        uvec4 _3166 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3167 = _3166.z;
        uint _3169 = (_3167 >> 8u) & 15u;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        float _3280;
        float _3282;
        if (((4294967295u << _3169) & _3072) == 0u)
        {
            _3272 = _3152;
            _3274 = _3154;
            _3276 = _3156;
            _3278 = _3158;
            _3280 = _3160;
            _3282 = _3162;
        }
        else
        {
            float _3297 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
            float _3298 = _3297 * _2131;
            float _3299 = _3297 * _2132;
            float _3300 = _3297 * _2133;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3169 < ((_3167 >> 12u) & 15u))
            {
                float _3273;
                float _3275;
                float _3277;
                float _3279;
                float _3281;
                float _3283;
                float _3432 = _3152;
                float _3433 = _3154;
                float _3434 = _3156;
                float _3435 = _3158;
                float _3436 = _3160;
                float _3437 = _3162;
                uint _3438 = _3169;
                uint _3447;
                bool _3448;
                for (;;)
                {
                    _3447 = texelFetch(g_lightClassification, int((((_3066 << 5u) + (_3052 << 9u)) + (_3438 << 2u)) >> 2u)).x;
                    _3448 = _3447 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3448)
                    {
                        frontier_phi_82_pred = _3437;
                        frontier_phi_82_pred_1 = _3436;
                        frontier_phi_82_pred_2 = _3435;
                        frontier_phi_82_pred_3 = _3434;
                        frontier_phi_82_pred_4 = _3433;
                        frontier_phi_82_pred_5 = _3432;
                    }
                    else
                    {
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _3936;
                        float _3937;
                        float _3938;
                        float _3653 = _3432;
                        float _3654 = _3433;
                        float _3655 = _3434;
                        float _3656 = _3435;
                        float _3657 = _3436;
                        float _3658 = _3437;
                        uint _3659 = _3447;
                        uint _3660;
                        vec4 _3685;
                        float _3686;
                        vec4 _3701;
                        vec3 _3713;
                        vec4 _3728;
                        vec4 _3743;
                        float _3789;
                        bool _3790;
                        for (;;)
                        {
                            uint _3670 = ((_3438 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3659));
                            _3660 = (_3659 + 4294967295u) & _3659;
                            uint _3672 = _3670 * 40u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            _3686 = _3685.w;
                            uint _3688 = (_3670 * 40u) + 4u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3703 = (_3670 * 40u) + 8u;
                            _3713 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x));
                            uint _3715 = (_3670 * 40u) + 16u;
                            _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            uint _3730 = (_3670 * 40u) + 20u;
                            _3743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 3u)).x));
                            uint _3745 = (_3670 * 40u) + 24u;
                            vec4 _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            uint _3764 = (_3670 * 40u) + 28u;
                            vec4 _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            _3789 = fma(_2133, _3777.z, fma(_2132, _3777.y, _3777.x * _2131)) + _3777.w;
                            _3790 = !((fma(_2133, _3758.z, fma(_2132, _3758.y, _3758.x * _2131)) + _3758.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3790)
                            {
                                float _3817 = _3685.x - _2131;
                                float _3818 = _3685.y - _2132;
                                float _3819 = _3685.z - _2133;
                                float _3820 = dot(vec3(_3817, _3818, _3819), vec3(_3817, _3818, _3819));
                                float _3823 = inversesqrt(_3820);
                                float _3824 = _3823 * _3817;
                                float _3825 = _3823 * _3818;
                                float _3826 = _3823 * _3819;
                                float _3830 = 1.0 - (_3820 / (_3686 * _3686));
                                float _5061 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3831 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
                                float _3835 = sqrt(_3820) * _3701.w;
                                float _3837 = 1.39999997615814208984375 / (_3835 + 1.39999997615814208984375);
                                float _3838 = _3837 * _3837;
                                float _3841 = ((1.0 - _3838) * dot(vec3(_3824, _3825, _3826), vec3(_965, _968, _971))) + _3838;
                                float _3844 = _3835 * _3835;
                                float _3848 = (fma(_2133, _3728.z, fma(_2132, _3728.y, _3728.x * _2131)) + _3728.w) / _3789;
                                float _3849 = (fma(_2133, _3743.z, fma(_2132, _3743.y, _3743.x * _2131)) + _3743.w) / _3789;
                                float _3853 = 1.0 - dot(vec2(_3848, _3849), vec2(_3848, _3849));
                                float _5077 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3854 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
                                float _3855 = _3854 * (((isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0))) * _3831) / ((_3844 * 0.699999988079071044921875) + 1.0));
                                float _3867 = exp2(log2(1.0 / ((_3844 * 3.5) + 5.0)) * 0.25);
                                float _3868 = 1.0 - _1040;
                                float _3875 = sqrt(1.0 - ((1.0 - (_3868 * _3868)) * (1.0 - (_3867 * _3867))));
                                float _3876 = _3875 * _3875;
                                float _3877 = _3876 * _3876;
                                float _3878 = _3824 - _3298;
                                float _3879 = _3825 - _3299;
                                float _3880 = _3826 - _3300;
                                float _3884 = inversesqrt(dot(vec3(_3878, _3879, _3880), vec3(_3878, _3879, _3880)));
                                float _3888 = dot(vec3(_965, _968, _971), vec3((-0.0) - _3298, (-0.0) - _3299, (-0.0) - _3300));
                                float _5088 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3891 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
                                float _3892 = dot(vec3(_965, _968, _971), vec3(_3884 * _3878, _3884 * _3879, _3884 * _3880));
                                float _5099 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3895 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                                float _3899 = ((_3895 * _3895) * (_3877 + (-1.0))) + 1.0;
                                float _3900 = _3837 * _3876;
                                float _3901 = _3900 * _3900;
                                float _3907 = ((1.0 - _3901) * dot(vec3(_965, _968, _971), vec3(_3824, _3825, _3826))) + _3901;
                                float _5110 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3908 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                                float _3909 = 1.0 - _3876;
                                float _3919 = (0.5 / (((_3908 * ((_3891 * _3909) + _3876)) + 9.9999999392252902907785028219223e-09) + (((_3908 * _3909) + _3876) * _3891))) * _3908;
                                float _5121 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3929 = (_3854 * _3831) * (((_3877 * 3.1415927410125732421875) * (isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0)))) / ((_3899 * _3899) * ((_3844 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3855 * _3701.z;
                                frontier_phi_88_pred_1 = _3855 * _3701.y;
                                frontier_phi_88_pred_2 = _3855 * _3701.x;
                                frontier_phi_88_pred_3 = _3929 * _3713.z;
                                frontier_phi_88_pred_4 = _3929 * _3713.y;
                                frontier_phi_88_pred_5 = _3929 * _3713.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3938 = frontier_phi_88_pred;
                            _3937 = frontier_phi_88_pred_1;
                            _3936 = frontier_phi_88_pred_2;
                            _3935 = frontier_phi_88_pred_3;
                            _3934 = frontier_phi_88_pred_4;
                            _3933 = frontier_phi_88_pred_5;
                            _3643 = _3936 + _3656;
                            _3644 = _3937 + _3657;
                            _3645 = _3938 + _3658;
                            _3640 = _3933 + _3653;
                            _3641 = _3934 + _3654;
                            _3642 = _3935 + _3655;
                            if (_3660 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3653 = _3640;
                                _3654 = _3641;
                                _3655 = _3642;
                                _3656 = _3643;
                                _3657 = _3644;
                                _3658 = _3645;
                                _3659 = _3660;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3645;
                        frontier_phi_82_pred_1 = _3644;
                        frontier_phi_82_pred_2 = _3643;
                        frontier_phi_82_pred_3 = _3642;
                        frontier_phi_82_pred_4 = _3641;
                        frontier_phi_82_pred_5 = _3640;
                    }
                    _3283 = frontier_phi_82_pred;
                    _3281 = frontier_phi_82_pred_1;
                    _3279 = frontier_phi_82_pred_2;
                    _3277 = frontier_phi_82_pred_3;
                    _3275 = frontier_phi_82_pred_4;
                    _3273 = frontier_phi_82_pred_5;
                    uint _3439 = _3438 + 1u;
                    if (_3439 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3432 = _3273;
                        _3433 = _3275;
                        _3434 = _3277;
                        _3435 = _3279;
                        _3436 = _3281;
                        _3437 = _3283;
                        _3438 = _3439;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3279;
                frontier_phi_63_64_ladder_1 = _3283;
                frontier_phi_63_64_ladder_2 = _3281;
                frontier_phi_63_64_ladder_3 = _3277;
                frontier_phi_63_64_ladder_4 = _3275;
                frontier_phi_63_64_ladder_5 = _3273;
            }
            else
            {
                frontier_phi_63_64_ladder = _3158;
                frontier_phi_63_64_ladder_1 = _3162;
                frontier_phi_63_64_ladder_2 = _3160;
                frontier_phi_63_64_ladder_3 = _3156;
                frontier_phi_63_64_ladder_4 = _3154;
                frontier_phi_63_64_ladder_5 = _3152;
            }
            _3272 = frontier_phi_63_64_ladder_5;
            _3274 = frontier_phi_63_64_ladder_4;
            _3276 = frontier_phi_63_64_ladder_3;
            _3278 = frontier_phi_63_64_ladder;
            _3280 = frontier_phi_63_64_ladder_2;
            _3282 = frontier_phi_63_64_ladder_1;
        }
        float _3287 = isnan(1.0) ? _1024 : (isnan(_1024) ? 1.0 : min(_1024, 1.0));
        _3085 = (_3287 * _3278) + _2597;
        _3087 = (_3287 * _3280) + _2599;
        _3089 = (_3287 * _3282) + _2601;
        _3091 = ((_3272 * _1008) * _3287) + _2935;
        _3093 = ((_3274 * _1010) * _3287) + _2937;
        _3095 = ((_3276 * _1011) * _3287) + _2939;
    }
    else
    {
        _3085 = _2597;
        _3087 = _2599;
        _3089 = _2601;
        _3091 = _2935;
        _3093 = _2937;
        _3095 = _2939;
    }
    float _5137 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _5148 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _5159 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _3112 = ((isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0))) * (_3085 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1024))) + ((_3091 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1863)) * cbPerFrame._m0[3u].x);
    float _3113 = ((isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0))) * (_3087 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1024))) + ((_3093 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1863)) * cbPerFrame._m0[3u].x);
    float _3114 = ((isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0))) * (_3089 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1024))) + ((_3095 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1863)) * cbPerFrame._m0[3u].x);
    uint _3115 = _263 + 6u;
    float _3123 = _946 / cbSceneParam._m0[86u].x;
    float _3124 = _947 / cbSceneParam._m0[86u].y;
    vec4 _3138 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3123, _3124, (log2((isnan(cbSceneParam._m0[77u].w) ? _869 : (isnan(_869) ? cbSceneParam._m0[77u].w : min(_869, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3140 = _3138.x;
    float _3141 = _3138.y;
    float _3142 = _3138.z;
    float _3143 = _3138.w;
    float _3214;
    float _3216;
    float _3218;
    float _3220;
    if (_869 > cbSceneParam._m0[78u].w)
    {
        float _3177 = isnan(_869) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _869 : min(cbSceneParam._m0[80u].w, _869));
        float _3178 = _3177 / _869;
        float _3189 = _3178 * _919;
        float _3190 = _920 * _3178;
        float _3191 = (-0.0) - _3190;
        float _3192 = _3178 * _921;
        float _3194 = (cbSceneParam._m0[77u].w * _3191) / _3177;
        float _3195 = _3194 + cbSceneParam._m0[79u].w;
        float _3196 = cbSceneParam._m0[79u].w - _3190;
        float _3202 = sqrt(((_3189 * _3189) + (_3190 * _3190)) + (_3192 * _3192));
        float _3205 = (1.0 - (cbSceneParam._m0[77u].w / _3177)) * _3202;
        float _3210 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3212 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3389;
        if (abs((_3191 - _3194) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3389 = ((((_3195 > 0.0) ? exp2(_3210 * _3195) : (2.0 - exp2(_3212 * _3195))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3205;
        }
        else
        {
            float _3333 = 1.0 / cbSceneParam._m0[80u].x;
            float _3334 = isnan(_3196) ? _3195 : (isnan(_3195) ? _3196 : max(_3195, _3196));
            float _3335 = isnan(_3196) ? _3195 : (isnan(_3195) ? _3196 : min(_3195, _3196));
            float _3344 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : min(_3334, 0.0));
            float _3345 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : min(_3335, 0.0));
            _3389 = ((abs(_3202 / _3191) * cbSceneParam._m0[80u].y) * ((((_3344 - _3345) * 2.0) - ((exp2(_3210 * (isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0)))) - exp2(_3210 * (isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0))))) * _3333)) - ((exp2(_3212 * _3344) - exp2(_3212 * _3345)) * _3333))) + (_3205 * cbSceneParam._m0[80u].z);
        }
        vec4 _3391 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3123, _3124, 1.0), 0.0);
        float _3400 = exp2((_3389 * (-1.44269502162933349609375)) * (1.0 - _3391.w));
        float _3401 = log2(_3400);
        float _3417 = log2(_3143);
        _3214 = (exp2(_3417 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3401 * cbSceneParam._m0[78u].x)) * _3391.x) / cbSceneParam._m0[78u].x)) + _3140;
        _3216 = (exp2(_3417 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3401 * cbSceneParam._m0[78u].y)) * _3391.y) / cbSceneParam._m0[78u].y)) + _3141;
        _3218 = (exp2(_3417 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3401 * cbSceneParam._m0[78u].z)) * _3391.z) / cbSceneParam._m0[78u].z)) + _3142;
        _3220 = _3400 * _3143;
    }
    else
    {
        _3214 = _3140;
        _3216 = _3141;
        _3218 = _3142;
        _3220 = _3143;
    }
    bool _3427;
    vec4 _3230;
    vec4 _3252;
    float _3254;
    float _3258;
    float _3259;
    float _3260;
    float _3261;
    bool _3271;
    for (;;)
    {
        _3230 = cbMatDynParam._m0[0u];
        float _3232 = roundEven(_3230.y);
        bool _3233 = _3232 == 3.0;
        float _3234 = log2(_3220);
        float _3241 = exp2(_3234 * cbSceneParam._m0[78u].x) * _3112;
        float _3242 = exp2(_3234 * cbSceneParam._m0[78u].y) * _3113;
        float _3243 = exp2(_3234 * cbSceneParam._m0[78u].z) * _3114;
        float _3250 = _935 + (-0.5);
        _3252 = cbMtdParam._m0[1u];
        _3254 = _3252.y * _3250;
        float _3257 = (_3232 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3258 = _3257 * (_3233 ? _3241 : (_3241 + (cbSceneParam._m0[72u].w * _3214)));
        _3259 = _3257 * (_3233 ? _3242 : (_3242 + (cbSceneParam._m0[72u].w * _3216)));
        _3260 = _3257 * (_3233 ? _3243 : (_3243 + (cbSceneParam._m0[72u].w * _3218)));
        _3261 = _3250 * 0.999000012874603271484375;
        _3271 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3271)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3261) < 0.5)
            {
                _3427 = true;
                break;
            }
        }
        uint _3368 = _984 + uint(_3230.w);
        if ((cbInstanceData._m0[_3368].w < 1.0) && ((cbInstanceData._m0[_3368].w + _3261) < 0.5))
        {
            _3427 = true;
            break;
        }
        if ((_3254 + 1.0) < _3252.x)
        {
            _3427 = true;
            break;
        }
        _3427 = false;
        break;
    }
    float _3631;
    if (_3427)
    {
        discard_state = true;
        _3631 = 0.0;
    }
    else
    {
        _3631 = cbInstanceData._m0[_3115].w;
    }
    SV_Target.x = _3258;
    SV_Target.y = _3259;
    SV_Target.z = _3260;
    SV_Target.w = _3631;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3115].w;
    discard_exit();
}


