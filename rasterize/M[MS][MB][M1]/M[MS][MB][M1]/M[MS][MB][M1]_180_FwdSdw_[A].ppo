#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1324;
float _3987;
float _3988;
float _3989;
float _3990;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _371 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _388 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_359 - _371) * cbMtdParam._m0[24u].y) + _371) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3999 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _396 = (_389 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _397 = (_389 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _398 = (_389 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _415 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _437 = _435.x;
    float _447 = dot(vec4(_437, _435.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _461 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_437 - _447) * cbMtdParam._m0[24u].y) + _447) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4010 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _469 = (_462 * ((_415.x * cbMtdParam._m0[13u].x) - _396)) + _396;
    float _470 = (_462 * ((_415.y * cbMtdParam._m0[13u].y) - _397)) + _397;
    float _471 = (_462 * ((_415.z * cbMtdParam._m0[13u].z) - _398)) + _398;
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _506 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _508 = _506.x;
    float _509 = _506.y;
    float _510 = _506.z;
    float _517 = ((_489.x - _508) * _389) + _508;
    float _518 = ((_489.y - _509) * _389) + _509;
    float _519 = ((_489.z - _510) * _389) + _510;
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _544 = ((_531.z - _519) * _462) + _519;
    float _547 = ((((_531.x - _517) * _462) + _517) * 2.0) + (-1.0);
    float _549 = ((((_531.y - _518) * _462) + _518) * 2.0) + (-1.0);
    float _550 = dot(vec2(_547, _549), vec2(_547, _549));
    float _4021 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))));
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _588 = _586.x;
    float _589 = 1.0 - _588;
    float _602 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_588 - _589) * cbMtdParam._m0[24u].z) + _589) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4032 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _610 = (_603 * (cbMtdParam._m0[17u].x - _469)) + _469;
    float _611 = (_603 * (cbMtdParam._m0[17u].y - _470)) + _470;
    float _612 = (_603 * (cbMtdParam._m0[17u].z - _471)) + _471;
    vec4 _624 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _640 = _638.x;
    float _658 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _640) * _389) + _640;
    float _675 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _658) * _462) + _658;
    float _679 = ((_624.x - _675) * cbMtdParam._m0[19u].z) + _675;
    float _681 = _679 - (_679 * _603);
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _701 = (_694.x * 2.0) + (-1.0);
    float _702 = (_694.y * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _4043 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _711 = (_603 * (_694.z - _544)) + _544;
    float _723 = (((_701 - _547) + (cbMtdParam._m0[21u].x * _547)) * _603) + _547;
    float _724 = (((_702 - _549) + (cbMtdParam._m0[21u].x * _549)) * _603) + _549;
    float _725 = (_603 * (sqrt(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) - _555)) + _555;
    float _730 = cbMtdParam._m0[22u].x + _568.w;
    float _733 = fma(_725, _237 * NORMAL.x, fma(_724, _244 * TANGENT.x, (_230 * _222) * _723));
    float _736 = fma(_725, _237 * NORMAL.y, fma(_724, _244 * TANGENT.y, (_230 * _223) * _723));
    float _739 = fma(_725, _237 * NORMAL.z, fma(_724, _244 * TANGENT.z, (_230 * _224) * _723));
    float _743 = inversesqrt(dot(vec3(_733, _736, _739), vec3(_733, _736, _739)));
    float _744 = _743 * _733;
    float _745 = _743 * _736;
    float _746 = _743 * _739;
    float _4054 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _747 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4076 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4087 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4098 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4109 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _752 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _766 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _817 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _807);
    float _818 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _807);
    float _819 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _807);
    float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
    float _824 = _817 * _823;
    float _825 = _818 * _823;
    float _826 = _819 * _823;
    vec4 _831 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _833 = _831.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1005 = sqrt(((_817 * _817) + (_818 * _818)) + (_819 * _819));
        float _1011 = (cbMatDynParam._m0[5u].x * _1005) + cbMatDynParam._m0[5u].y;
        float _4120 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1016 = (cbMatDynParam._m0[5u].z * _1005) + cbMatDynParam._m0[5u].w;
        float _4131 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) - _1012)) + _1012) < ((_833 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _844 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _845 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _863 = fma(_746, cbSceneParam._m0[5u].z, fma(_745, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _744));
    float _866 = fma(_746, cbSceneParam._m0[6u].z, fma(_745, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _744));
    float _869 = fma(_746, cbSceneParam._m0[7u].z, fma(_745, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _744));
    uint _882 = _250 + 9u;
    uint _883 = _882 + uint(cbMatDynParam._m0[0u].w);
    float _889 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * cbInstanceData._m0[_883].x;
    float _890 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * cbInstanceData._m0[_883].y;
    float _891 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * cbInstanceData._m0[_883].z;
    float _4142 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _4153 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _895 = 1.0 - _752;
    float _896 = _892 * _895;
    float _897 = _893 * _895;
    float _898 = _894 * _895;
    float _903 = (_892 + (-0.039999999105930328369140625)) * _752;
    float _904 = (_893 + (-0.039999999105930328369140625)) * _752;
    float _905 = (_894 + (-0.039999999105930328369140625)) * _752;
    float _906 = _903 + 0.039999999105930328369140625;
    float _908 = _904 + 0.039999999105930328369140625;
    float _909 = _905 + 0.039999999105930328369140625;
    vec4 _918 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _844, cbSceneParam._m0[86u].y * _845));
    float _922 = ((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * TEXCOORD_5.w) * _918.x;
    float _923 = dot(vec3(_744, _745, _746), vec3(_824, _825, _826));
    float _926 = _923 * 2.0;
    float _930 = (_926 * _744) - _824;
    float _931 = (_926 * _745) - _825;
    float _932 = (_926 * _746) - _826;
    float _936 = abs(dot(vec3(_824, _825, _826), vec3(_744, _745, _746)));
    float _4175 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _938 = sqrt(_747);
    float _951 = exp2((_938 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_938 * 3.0));
    float _957 = (1.0 - _951) * ((_938 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _958 = _951 * _938;
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1323;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1048 = fma(_994, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _986));
        float _1052 = fma(_994, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _986));
        float _1056 = fma(_994, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _986));
        float _1081 = _986 + _744;
        float _1082 = _990 + _745;
        float _1083 = _994 + _746;
        float _1093 = fma(_1083, cbModelParam._m0[26u].z, fma(_1082, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081)) - _1048;
        float _1094 = fma(_1083, cbModelParam._m0[27u].z, fma(_1082, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081)) - _1052;
        float _1095 = fma(_1083, cbModelParam._m0[28u].z, fma(_1082, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081)) - _1056;
        float _1099 = inversesqrt(dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095)));
        float _1112 = ((_1099 * _1093) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1048 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1099 * _1094) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1052 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1099 * _1095) / cbModelParam._m0[34u].z) + ((((((_1056 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        float _1151 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1117.x + (-0.5));
        float _1153 = _1151 * (_1117.y + (-0.5));
        float _1154 = _1151 * (_1117.z + (-0.5));
        float _1161 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1124.x + (-0.5));
        float _1163 = _1161 * (_1124.y + (-0.5));
        float _1164 = _1161 * (_1124.z + (-0.5));
        float _1171 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1131.x + (-0.5));
        float _1173 = _1171 * (_1131.y + (-0.5));
        float _1174 = _1171 * (_1131.z + (-0.5));
        float _1181 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1138.x + (-0.5));
        float _1183 = _1181 * (_1138.y + (-0.5));
        float _1184 = _1181 * (_1138.z + (-0.5));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = _1152 * 0.5;
        float _1189 = _1162 * 0.5;
        float _1190 = _1172 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1205 = (dot(vec3(_744, _745, _746), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1215 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4223 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1217 + 1.0))) + _1222) * _1185;
        float _1232 = _1153 * 0.5;
        float _1233 = _1163 * 0.5;
        float _1234 = _1173 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_744, _745, _746), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4256 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1259 + 1.0))) + _1264) * _1186;
        float _1274 = _1154 * 0.5;
        float _1275 = _1164 * 0.5;
        float _1276 = _1174 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_744, _745, _746), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4289 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1301 + 1.0))) + _1306) * _1187;
        _1323 = _1154;
        _1325 = _1153;
        _1326 = _1152;
        _1327 = _1164;
        _1328 = _1163;
        _1329 = _1162;
        _1330 = _1174;
        _1331 = _1173;
        _1332 = _1172;
        _1333 = _1187;
        _1334 = _1186;
        _1335 = _1185;
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
    }
    else
    {
        _1323 = _1324;
        _1325 = _1324;
        _1326 = _1324;
        _1327 = _1324;
        _1328 = _1324;
        _1329 = _1324;
        _1330 = _1324;
        _1331 = _1324;
        _1332 = _1324;
        _1333 = _1324;
        _1334 = _1324;
        _1335 = _1324;
        _1336 = 0.0;
        _1337 = 0.0;
        _1338 = 0.0;
    }
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1365 = fma(_994, cbModelParam._m0[30u].z, fma(_990, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986));
        float _1369 = fma(_994, cbModelParam._m0[31u].z, fma(_990, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986));
        float _1373 = fma(_994, cbModelParam._m0[32u].z, fma(_990, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986));
        float _1396 = _986 + _744;
        float _1397 = _990 + _745;
        float _1398 = _994 + _746;
        float _1408 = fma(_1398, cbModelParam._m0[30u].z, fma(_1397, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1396)) - _1365;
        float _1409 = fma(_1398, cbModelParam._m0[31u].z, fma(_1397, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1396)) - _1369;
        float _1410 = fma(_1398, cbModelParam._m0[32u].z, fma(_1397, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1396)) - _1373;
        float _1414 = inversesqrt(dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410)));
        float _1427 = ((_1414 * _1408) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1365 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1414 * _1409) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1369 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1414 * _1410) / cbModelParam._m0[35u].z) + ((((((_1373 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        float _1464 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1431.x + (-0.5));
        float _1466 = _1464 * (_1431.y + (-0.5));
        float _1467 = _1464 * (_1431.z + (-0.5));
        float _1474 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1438.x + (-0.5));
        float _1476 = _1474 * (_1438.y + (-0.5));
        float _1477 = _1474 * (_1438.z + (-0.5));
        float _1484 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1445.x + (-0.5));
        float _1486 = _1484 * (_1445.y + (-0.5));
        float _1487 = _1484 * (_1445.z + (-0.5));
        float _1494 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1452.x + (-0.5));
        float _1496 = _1494 * (_1452.y + (-0.5));
        float _1497 = _1494 * (_1452.z + (-0.5));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = _1465 * 0.5;
        float _1502 = _1475 * 0.5;
        float _1503 = _1485 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_744, _745, _746), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4352 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1528 + 1.0))) + _1533) * _1498;
        float _1543 = _1466 * 0.5;
        float _1544 = _1476 * 0.5;
        float _1545 = _1486 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_744, _745, _746), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4385 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1570 + 1.0))) + _1575) * _1499;
        float _1585 = _1467 * 0.5;
        float _1586 = _1477 * 0.5;
        float _1587 = _1487 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_744, _745, _746), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4418 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1612 + 1.0))) + _1617) * _1500;
        _1634 = _1467;
        _1635 = _1466;
        _1636 = _1465;
        _1637 = _1477;
        _1638 = _1476;
        _1639 = _1475;
        _1640 = _1487;
        _1641 = _1486;
        _1642 = _1485;
        _1643 = _1500;
        _1644 = _1499;
        _1645 = _1498;
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
    }
    else
    {
        _1634 = _1324;
        _1635 = _1324;
        _1636 = _1324;
        _1637 = _1324;
        _1638 = _1324;
        _1639 = _1324;
        _1640 = _1324;
        _1641 = _1324;
        _1642 = _1324;
        _1643 = _1324;
        _1644 = _1324;
        _1645 = _1324;
        _1646 = 0.0;
        _1647 = 0.0;
        _1648 = 0.0;
    }
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1336)) + _1336;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1337)) + _1337;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1338)) + _1338;
    float _1681 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1658));
    float _1702 = _930 * 0.5;
    float _1703 = _931 * 0.5;
    float _1704 = _932 * 0.5;
    float _1705 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1708 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1711 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1745;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1718 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1323, _1327, _1330, _1333));
        float _1722 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1325, _1328, _1331, _1334));
        float _1726 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1326, _1329, _1332, _1335));
        float _1733 = dot(vec4(cbModelParam._m0[39u]), vec4(_1702, _1703, _1704, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1733) ? 0.0 : (isnan(0.0) ? _1733 : max(0.0, _1733))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1756;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1747 = dot(vec4(cbModelParam._m0[40u]), vec4(_1702, _1703, _1704, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1760 = (_1756 * cbModelParam._m0[1u].x) + (_1745 * (1.0 - cbModelParam._m0[1u].x));
    float _1770 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _747);
    float _1771 = isnan(_1770) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1770 : min(cbModelParam._m0[25u].z, _1770));
    float _1852;
    float _1854;
    float _1856;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1819 = fma(_994, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _986)) + cbModelParam._m0[13u].w;
        float _1823 = fma(_994, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _986)) + cbModelParam._m0[14u].w;
        float _1827 = fma(_994, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _986)) + cbModelParam._m0[15u].w;
        float _1830 = fma(_932, cbModelParam._m0[13u].z, fma(_931, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930));
        float _1833 = fma(_932, cbModelParam._m0[14u].z, fma(_931, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930));
        float _1836 = fma(_932, cbModelParam._m0[15u].z, fma(_931, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930));
        float _1864;
        if (_1830 > 0.0)
        {
            _1864 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1864 = frontier_phi_17_15_ladder;
        }
        float _2036;
        if (_1833 > 0.0)
        {
            _2036 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2036 = frontier_phi_26_22_ladder;
        }
        float _2331;
        if (_1836 > 0.0)
        {
            _2331 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2331 = frontier_phi_38_33_ladder;
        }
        float _2333 = isnan(_2036) ? _1864 : (isnan(_1864) ? _2036 : min(_1864, _2036));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1830) + _1819;
        float _2339 = (_2334 * _1833) + _1823;
        float _2340 = (_2334 * _1836) + _1827;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2341;
        float _2345 = _2341 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 > _2345) || ((_2339 < _2343) || ((_2338 < _2343) || (_2338 > _2345))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2340, cbModelParam._m0[9u].z, fma(_2339, cbModelParam._m0[9u].y, _2338 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2340, cbModelParam._m0[10u].z, fma(_2339, cbModelParam._m0[10u].y, _2338 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2340, cbModelParam._m0[11u].z, fma(_2339, cbModelParam._m0[11u].y, _2338 * cbModelParam._m0[11u].x))), _1771);
            frontier_phi_16_38_ladder = _2485.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2485.x * cbModelParam._m0[1u].y;
        }
        _1852 = frontier_phi_16_38_ladder_2;
        _1854 = frontier_phi_16_38_ladder_1;
        _1856 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1840 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_930, _931, _932), _1771);
        _1852 = _1840.x * cbModelParam._m0[1u].y;
        _1854 = _1840.y * cbModelParam._m0[1u].y;
        _1856 = _1840.z * cbModelParam._m0[1u].y;
    }
    float _1860 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _747);
    float _1861 = isnan(_1860) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1860 : min(cbModelParam._m0[25u].w, _1860));
    float _1951;
    float _1953;
    float _1955;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1915 = fma(_994, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _986)) + cbModelParam._m0[21u].w;
        float _1919 = fma(_994, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _986)) + cbModelParam._m0[22u].w;
        float _1923 = fma(_994, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _986)) + cbModelParam._m0[23u].w;
        float _1926 = fma(_932, cbModelParam._m0[21u].z, fma(_931, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930));
        float _1929 = fma(_932, cbModelParam._m0[22u].z, fma(_931, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930));
        float _1932 = fma(_932, cbModelParam._m0[23u].z, fma(_931, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930));
        float _2041;
        if (_1926 > 0.0)
        {
            _2041 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2041 = frontier_phi_28_24_ladder;
        }
        float _2358;
        if (_1929 > 0.0)
        {
            _2358 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2358 = frontier_phi_40_35_ladder;
        }
        float _2696;
        if (_1932 > 0.0)
        {
            _2696 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2696 = frontier_phi_50_47_ladder;
        }
        float _2698 = isnan(_2358) ? _2041 : (isnan(_2041) ? _2358 : min(_2041, _2358));
        float _2699 = isnan(_2696) ? _2698 : (isnan(_2698) ? _2696 : min(_2698, _2696));
        float _2703 = (_2699 * _1926) + _1915;
        float _2704 = (_2699 * _1929) + _1919;
        float _2705 = (_2699 * _1932) + _1923;
        float _2706 = _2699 * 9.9999997473787516355514526367188e-05;
        float _2707 = (-1.0) - _2706;
        float _2709 = _2706 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2705 > _2709) || ((_2705 < _2707) || ((_2704 > _2709) || ((_2704 < _2707) || ((_2703 < _2707) || (_2703 > _2709))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2705, cbModelParam._m0[17u].z, fma(_2704, cbModelParam._m0[17u].y, _2703 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2705, cbModelParam._m0[18u].z, fma(_2704, cbModelParam._m0[18u].y, _2703 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2705, cbModelParam._m0[19u].z, fma(_2704, cbModelParam._m0[19u].y, _2703 * cbModelParam._m0[19u].x))), _1861);
            frontier_phi_25_50_ladder = _2827.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2827.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2827.x * cbModelParam._m0[1u].z;
        }
        _1951 = frontier_phi_25_50_ladder_2;
        _1953 = frontier_phi_25_50_ladder_1;
        _1955 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_930, _931, _932), _1861);
        _1951 = _1935.x * cbModelParam._m0[1u].z;
        _1953 = _1935.y * cbModelParam._m0[1u].z;
        _1955 = _1935.z * cbModelParam._m0[1u].z;
    }
    float _1968 = (((_957 * _906) + _958) * _922) * ((cbModelParam._m0[1u].w * (_1951 - _1852)) + _1852);
    float _1970 = (((_957 * _908) + _958) * _922) * ((cbModelParam._m0[1u].w * (_1953 - _1854)) + _1854);
    float _1972 = (((_957 * _909) + _958) * _922) * ((cbModelParam._m0[1u].w * (_1955 - _1856)) + _1856);
    float _1975 = fma(_1972, cbSceneParam._m0[89u].z, fma(_1970, cbSceneParam._m0[89u].y, _1968 * cbSceneParam._m0[89u].x));
    float _1978 = fma(_1972, cbSceneParam._m0[90u].z, fma(_1970, cbSceneParam._m0[90u].y, _1968 * cbSceneParam._m0[90u].x));
    float _1981 = fma(_1972, cbSceneParam._m0[91u].z, fma(_1970, cbSceneParam._m0[91u].y, _1968 * cbSceneParam._m0[91u].x));
    float _2015 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2028 = _2015 / _2027;
    float _2029 = _2019 / _2027;
    float _2030 = _2023 / _2027;
    float _2177;
    float _2178;
    float _2179;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2057 = ((uint(_2030 > cbSceneParam._m0[59u].y) + uint(_2030 > cbSceneParam._m0[59u].x)) + uint(_2030 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2058 = _2057 + 43u;
        uint _2066 = _2057 + 44u;
        uint _2074 = _2057 + 45u;
        uint _2082 = _2057 + 46u;
        float _2093 = fma(_2027, cbSceneParam._m0[_2058].w, fma(_2023, cbSceneParam._m0[_2058].z, fma(_2019, cbSceneParam._m0[_2058].y, _2015 * cbSceneParam._m0[_2058].x)));
        float _2097 = fma(_2027, cbSceneParam._m0[_2066].w, fma(_2023, cbSceneParam._m0[_2066].z, fma(_2019, cbSceneParam._m0[_2066].y, _2015 * cbSceneParam._m0[_2066].x)));
        float _2105 = fma(_2027, cbSceneParam._m0[_2082].w, fma(_2023, cbSceneParam._m0[_2082].z, fma(_2019, cbSceneParam._m0[_2082].y, _2015 * cbSceneParam._m0[_2082].x)));
        float _2110 = cbSceneParam._m0[33u].z * _2105;
        float _2112 = cbSceneParam._m0[33u].w * _2105;
        float _2115 = fma(_2027, cbSceneParam._m0[_2074].w, fma(_2023, cbSceneParam._m0[_2074].z, fma(_2019, cbSceneParam._m0[_2074].y, _2015 * cbSceneParam._m0[_2074].x))) / _2105;
        float _2163 = (cbSceneParam._m0[33u].x - sqrt(((_2029 * _2029) + (_2028 * _2028)) + (_2030 * _2030))) * cbSceneParam._m0[33u].y;
        float _4544 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2170 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2110 + _2093) / _2105, (_2112 + _2097) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 + _2093) / _2105, (_2097 - _2110) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 - _2110) / _2105, (_2097 - _2112) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 - _2112) / _2105, (_2110 + _2097) / _2105), _2115), 0.0)).x), vec4(0.25)));
        _2177 = 1.0 - (_2170 * cbSceneParam._m0[34u].x);
        _2178 = 1.0 - (_2170 * cbSceneParam._m0[34u].y);
        _2179 = 1.0 - (_2170 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2177 = 1.0;
        _2178 = 1.0;
        _2179 = 1.0;
    }
    float _2243;
    float _2245;
    float _2247;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2231 = fma(_2027, cbSceneParam._m0[63u].w, fma(_2023, cbSceneParam._m0[63u].z, fma(_2019, cbSceneParam._m0[63u].y, _2015 * cbSceneParam._m0[63u].x)));
        float _2232 = fma(_2027, cbSceneParam._m0[60u].w, fma(_2023, cbSceneParam._m0[60u].z, fma(_2019, cbSceneParam._m0[60u].y, _2015 * cbSceneParam._m0[60u].x))) / _2231;
        float _2233 = fma(_2027, cbSceneParam._m0[61u].w, fma(_2023, cbSceneParam._m0[61u].z, fma(_2019, cbSceneParam._m0[61u].y, _2015 * cbSceneParam._m0[61u].x))) / _2231;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2232 >= cbSceneParam._m0[64u].x) && (_2233 >= cbSceneParam._m0[64u].y)) && (_2232 <= cbSceneParam._m0[64u].z)) && (_2233 <= cbSceneParam._m0[64u].w))
        {
            float _2371 = fma(_2027, cbSceneParam._m0[62u].w, fma(_2023, cbSceneParam._m0[62u].z, fma(_2019, cbSceneParam._m0[62u].y, _2015 * cbSceneParam._m0[62u].x))) / _2231;
            float _2375 = isnan(cbSceneParam._m0[41u].w) ? _2371 : (isnan(_2371) ? cbSceneParam._m0[41u].w : max(_2371, cbSceneParam._m0[41u].w));
            float _2418 = (cbSceneParam._m0[33u].x - sqrt(((_2029 * _2029) + (_2028 * _2028)) + (_2030 * _2030))) * cbSceneParam._m0[33u].y;
            float _4560 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
            float _2425 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2232, cbSceneParam._m0[33u].w + _2233), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2232, _2233 - cbSceneParam._m0[33u].z), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2232 - cbSceneParam._m0[33u].z, _2233 - cbSceneParam._m0[33u].w), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2232 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2233), _2375), 0.0)).x), vec4(0.25)));
            float _2429 = 1.0 - (_2425 * cbSceneParam._m0[34u].x);
            float _2430 = 1.0 - (_2425 * cbSceneParam._m0[34u].y);
            float _2431 = 1.0 - (_2425 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2431) ? _2179 : (isnan(_2179) ? _2431 : min(_2179, _2431));
            frontier_phi_37_36_ladder_1 = isnan(_2430) ? _2178 : (isnan(_2178) ? _2430 : min(_2178, _2430));
            frontier_phi_37_36_ladder_2 = isnan(_2429) ? _2177 : (isnan(_2177) ? _2429 : min(_2177, _2429));
        }
        else
        {
            frontier_phi_37_36_ladder = _2179;
            frontier_phi_37_36_ladder_1 = _2178;
            frontier_phi_37_36_ladder_2 = _2177;
        }
        _2243 = frontier_phi_37_36_ladder_2;
        _2245 = frontier_phi_37_36_ladder_1;
        _2247 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2243 = _2177;
        _2245 = _2178;
        _2247 = _2179;
    }
    uvec4 _2252 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2254 = _2252.x * 14u;
    uint _2255 = _2254 + 13u;
    float _2262 = _922 + (-1.0);
    float _2267 = (cbLight._m0[_2255].x * _2262) + 1.0;
    float _2268 = (cbLight._m0[_2255].y * _2262) + 1.0;
    float _2269 = (cbLight._m0[_2255].z * _2262) + 1.0;
    float _2270 = (cbLight._m0[_2255].w * _2262) + 1.0;
    uint _2271 = _2254 + 5u;
    float _2277 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
    uint _2281 = _2254 + 4u;
    float _2290 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
    uint _2294 = _2254 | 1u;
    float _2305 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_744, _745, _746));
    float _2308 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_744, _745, _746));
    float _4596 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _4607 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2313 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * 0.3183098733425140380859375;
    float _2315 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * 0.3183098733425140380859375;
    float _2322 = ((cbLight._m0[_2271].x * _2277) * _2315) + (((cbLight._m0[_2281].x * _2243) * _2290) * _2313);
    float _2323 = ((_2277 * cbLight._m0[_2271].y) * _2315) + (((cbLight._m0[_2281].y * _2245) * _2290) * _2313);
    float _2324 = ((_2277 * cbLight._m0[_2271].z) * _2315) + (((cbLight._m0[_2281].z * _2247) * _2290) * _2313);
    uvec4 _2328 = floatBitsToUint(cbLight._m0[_2254 + 12u]);
    bool _2330 = _2328.x == 0u;
    float _2432;
    float _2434;
    float _2436;
    if (_2330)
    {
        _2432 = _2322;
        _2434 = _2323;
        _2436 = _2324;
    }
    else
    {
        uint _2440 = _2254 + 6u;
        float _2456 = (dot(vec3(cbLight._m0[_2254 + 2u].xyz), vec3(_744, _745, _746)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4618 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2459 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2432 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2322;
        _2434 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2323;
        _2436 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2324;
    }
    bool _2439 = _2328.y == 0u;
    float _2494;
    float _2496;
    float _2498;
    if (_2439)
    {
        _2494 = _2432;
        _2496 = _2434;
        _2498 = _2436;
    }
    else
    {
        uint _2667 = _2254 + 7u;
        float _2683 = (dot(vec3(cbLight._m0[_2254 + 3u].xyz), vec3(_744, _745, _746)) * 0.5) + 0.5;
        float _2684 = _2683 * _2683;
        float _4634 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2685 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2686 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2494 = (((cbLight._m0[_2667].x * 0.3183098733425140380859375) * _2685) * _2686) + _2432;
        _2496 = (((cbLight._m0[_2667].y * 0.3183098733425140380859375) * _2685) * _2686) + _2434;
        _2498 = (((cbLight._m0[_2667].z * 0.3183098733425140380859375) * _2685) * _2686) + _2436;
    }
    uint _2501 = _2254 + 8u;
    float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _747) * 0.949999988079071044921875);
    float _2515 = _2514 * _2514;
    float _2516 = cbLight._m0[_2254].x + _824;
    float _2517 = cbLight._m0[_2254].y + _825;
    float _2518 = cbLight._m0[_2254].z + _826;
    float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
    float _2523 = _2522 * _2516;
    float _2524 = _2522 * _2517;
    float _2525 = _2522 * _2518;
    float _2526 = dot(vec3(_744, _745, _746), vec3(cbLight._m0[_2254].xyz));
    float _4650 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2529 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _4661 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _2530 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2531 = dot(vec3(_744, _745, _746), vec3(_2523, _2524, _2525));
    float _4672 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
    float _2535 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2523, _2524, _2525));
    float _4683 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2539 = _2515 * _2515;
    float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
    float _2551 = exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0);
    float _2552 = 0.959999978542327880859375 - _903;
    float _2554 = 0.959999978542327880859375 - _904;
    float _2555 = 0.959999978542327880859375 - _905;
    float _2562 = 1.0 - _2515;
    float _2573 = (0.5 / (((_2530 * ((_2529 * _2562) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2562) + _2515) * _2529))) * _2529;
    float _4694 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2575 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
    uint _2589 = _2254 + 9u;
    float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _747) * 0.949999988079071044921875);
    float _2601 = _2600 * _2600;
    float _2602 = cbLight._m0[_2294].x + _824;
    float _2603 = cbLight._m0[_2294].y + _825;
    float _2604 = cbLight._m0[_2294].z + _826;
    float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
    float _2609 = _2608 * _2602;
    float _2610 = _2608 * _2603;
    float _2611 = _2608 * _2604;
    float _2612 = dot(vec3(_744, _745, _746), vec3(cbLight._m0[_2294].xyz));
    float _4705 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2616 = dot(vec3(_744, _745, _746), vec3(_2609, _2610, _2611));
    float _4716 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2619 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2620 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2609, _2610, _2611));
    float _4727 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2624 = _2601 * _2601;
    float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
    float _2635 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
    float _2642 = 1.0 - _2601;
    float _2652 = (0.5 / (((_2530 * ((_2615 * _2642) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2642) + _2601) * _2615))) * _2615;
    float _4738 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2654 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
    float _2664 = (((((_2635 * _2552) + _906) * cbLight._m0[_2589].x) * _2654) * _2277) + ((((cbLight._m0[_2501].x * _2243) * ((_2551 * _2552) + _906)) * _2575) * _2290);
    float _2665 = (((((_2635 * _2554) + _908) * cbLight._m0[_2589].y) * _2654) * _2277) + ((((cbLight._m0[_2501].y * _2245) * ((_2551 * _2554) + _908)) * _2575) * _2290);
    float _2666 = (((((_2635 * _2555) + _909) * cbLight._m0[_2589].z) * _2654) * _2277) + ((((cbLight._m0[_2501].z * _2247) * ((_2551 * _2555) + _909)) * _2575) * _2290);
    float _2722;
    float _2724;
    float _2726;
    if (_2330)
    {
        _2722 = _2664;
        _2724 = _2665;
        _2726 = _2666;
    }
    else
    {
        uint _2728 = _2254 + 2u;
        uint _2732 = _2254 + 10u;
        float _2746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2728].w)) * _747) * 0.949999988079071044921875);
        float _2747 = _2746 * _2746;
        float _2748 = cbLight._m0[_2728].x + _824;
        float _2749 = cbLight._m0[_2728].y + _825;
        float _2750 = cbLight._m0[_2728].z + _826;
        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
        float _2755 = _2754 * _2748;
        float _2756 = _2754 * _2749;
        float _2757 = _2754 * _2750;
        float _2758 = dot(vec3(_744, _745, _746), vec3(cbLight._m0[_2728].xyz));
        float _4749 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2762 = dot(vec3(_744, _745, _746), vec3(_2755, _2756, _2757));
        float _4760 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2766 = dot(vec3(cbLight._m0[_2728].xyz), vec3(_2755, _2756, _2757));
        float _4771 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2770 = _2747 * _2747;
        float _2774 = ((_2765 * _2765) * (_2770 + (-1.0))) + 1.0;
        float _2781 = exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0);
        float _2788 = 1.0 - _2747;
        float _2798 = (0.5 / (((_2530 * ((_2761 * _2788) + _2747)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2788) + _2747) * _2761))) * _2761;
        float _4782 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2800 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2770 / ((_2774 * _2774) * 3.141590118408203125));
        float _2801 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2722 = (((((_2781 * _2552) + _906) * cbLight._m0[_2732].x) * _2800) * _2801) + _2664;
        _2724 = (((((_2781 * _2554) + _908) * cbLight._m0[_2732].y) * _2800) * _2801) + _2665;
        _2726 = (((((_2781 * _2555) + _909) * cbLight._m0[_2732].z) * _2800) * _2801) + _2666;
    }
    float _2832;
    float _2834;
    float _2836;
    if (_2439)
    {
        _2832 = _2722;
        _2834 = _2724;
        _2836 = _2726;
    }
    else
    {
        uint _2843 = _2254 + 3u;
        uint _2847 = _2254 + 11u;
        float _2861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2843].w)) * _747) * 0.949999988079071044921875);
        float _2862 = _2861 * _2861;
        float _2863 = cbLight._m0[_2843].x + _824;
        float _2864 = cbLight._m0[_2843].y + _825;
        float _2865 = cbLight._m0[_2843].z + _826;
        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
        float _2870 = _2869 * _2863;
        float _2871 = _2869 * _2864;
        float _2872 = _2869 * _2865;
        float _2873 = dot(vec3(_744, _745, _746), vec3(cbLight._m0[_2843].xyz));
        float _4798 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2876 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2877 = dot(vec3(_744, _745, _746), vec3(_2870, _2871, _2872));
        float _4809 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2881 = dot(vec3(cbLight._m0[_2843].xyz), vec3(_2870, _2871, _2872));
        float _4820 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2885 = _2862 * _2862;
        float _2889 = ((_2880 * _2880) * (_2885 + (-1.0))) + 1.0;
        float _2896 = exp2(log2(1.0 - (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) * 5.0);
        float _2903 = 1.0 - _2862;
        float _2913 = (0.5 / (((_2530 * ((_2876 * _2903) + _2862)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2903) + _2862) * _2876))) * _2876;
        float _4831 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2915 = (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2885 / ((_2889 * _2889) * 3.141590118408203125));
        float _2916 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2832 = (((((_2896 * _2552) + _906) * cbLight._m0[_2847].x) * _2915) * _2916) + _2722;
        _2834 = (((((_2896 * _2554) + _908) * cbLight._m0[_2847].y) * _2915) * _2916) + _2724;
        _2836 = (((((_2896 * _2555) + _909) * cbLight._m0[_2847].z) * _2915) * _2916) + _2726;
    }
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    if (_2252.y == 0u)
    {
        uvec4 _2937 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2938 = _2937.x;
        uint _2949 = uint((float(_2937.y) * floor(float(uint(cbSceneParam._m0[85u].y * _845) / _2938))) + floor(float(uint(cbSceneParam._m0[85u].x * _844) / _2938)));
        float _2959 = (log2(_2030 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2960 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        uint _2963 = uint(isnan(14.0) ? _2960 : (isnan(_2960) ? 14.0 : min(_2960, 14.0)));
        uvec4 _2968 = texelFetch(g_lightClusterGridBuffer, int(((_2963 << 2u) + (_2949 << 6u)) >> 2u));
        uint _2969 = _2968.x;
        uint _2970 = _2937.z;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((((1u << ((_2970 >> 4u) & 15u)) + 4294967295u) & _2969) == 0u) || ((_2970 & 240u) == 0u))
        {
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
        }
        else
        {
            float _3050;
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            uint _3208 = 0u;
            uint _3217;
            bool _3218;
            for (;;)
            {
                _3217 = texelFetch(g_lightClassification, int((((_2963 << 5u) + (_2949 << 9u)) + (_3208 << 2u)) >> 2u)).x;
                _3218 = _3217 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3218)
                {
                    frontier_phi_71_pred = _3207;
                    frontier_phi_71_pred_1 = _3206;
                    frontier_phi_71_pred_2 = _3205;
                    frontier_phi_71_pred_3 = _3204;
                    frontier_phi_71_pred_4 = _3203;
                    frontier_phi_71_pred_5 = _3202;
                }
                else
                {
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    uint _3353;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3207;
                    _3353 = _3217;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    for (;;)
                    {
                        uint _3357 = uint(findLSB(_3353)) + (_3208 << 5u);
                        uint _3354 = (_3353 + 4294967295u) & _3353;
                        uint _3359 = _3357 * 48u;
                        vec4 _3373 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 3u)).x));
                        uint _3379 = (_3357 * 48u) + 4u;
                        vec4 _3392 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 3u)).x));
                        uint _3398 = (_3357 * 48u) + 8u;
                        vec3 _3409 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x));
                        float _3413 = _3373.x - _2028;
                        float _3414 = _3373.y - _2029;
                        float _3415 = _3373.z - _2030;
                        float _3416 = dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415));
                        float _3419 = inversesqrt(_3416);
                        float _3420 = _3419 * _3413;
                        float _3421 = _3419 * _3414;
                        float _3422 = _3419 * _3415;
                        float _3423 = dot(vec3(_863, _866, _869), vec3(_3420, _3421, _3422));
                        float _3428 = 1.0 - (_3416 * _3373.w);
                        float _4857 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3429 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                        float _3430 = sqrt(_3416) * _3392.w;
                        float _3433 = 1.39999997615814208984375 / (_3430 + 1.39999997615814208984375);
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3423) + _3434;
                        float _3440 = _3430 * _3430;
                        float _3444 = ((isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0))) * _3429) / ((_3440 * 0.699999988079071044921875) + 1.0);
                        float _3448 = (-0.0) - _2028;
                        float _3449 = (-0.0) - _2029;
                        float _3450 = (-0.0) - _2030;
                        float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                        float _3455 = _3454 * _3448;
                        float _3456 = _3454 * _3449;
                        float _3457 = _3454 * _3450;
                        float _3464 = exp2(log2(1.0 / ((_3440 * 3.5) + 5.0)) * 0.25);
                        float _3465 = 1.0 - _938;
                        float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                        float _3473 = _3472 * _3472;
                        float _3474 = _3473 * _3473;
                        float _3475 = _3455 + _3420;
                        float _3476 = _3456 + _3421;
                        float _3477 = _3457 + _3422;
                        float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                        float _3485 = dot(vec3(_863, _866, _869), vec3(_3455, _3456, _3457));
                        float _4873 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3488 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3489 = dot(vec3(_863, _866, _869), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                        float _4884 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3492 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                        float _3497 = _3433 * _3473;
                        float _3498 = _3497 * _3497;
                        float _3501 = ((1.0 - _3498) * _3423) + _3498;
                        float _4895 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3502 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3503 = 1.0 - _3473;
                        float _3513 = (0.5 / (((_3502 * ((_3488 * _3503) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3502 * _3503) + _3473) * _3488))) * _3502;
                        float _4906 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3524 = (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) / ((_3496 * _3496) * ((_3440 * 2.1991131305694580078125) + 3.141590118408203125))) * _3429;
                        _3277 = (_3444 * _3392.x) + _3350;
                        _3278 = (_3444 * _3392.y) + _3351;
                        _3279 = (_3444 * _3392.z) + _3352;
                        _3274 = (_3524 * _3409.x) + _3347;
                        _3275 = (_3524 * _3409.y) + _3348;
                        _3276 = (_3524 * _3409.z) + _3349;
                        if (_3354 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3279;
                            _3353 = _3354;
                        }
                    }
                    frontier_phi_71_pred = _3279;
                    frontier_phi_71_pred_1 = _3278;
                    frontier_phi_71_pred_2 = _3277;
                    frontier_phi_71_pred_3 = _3276;
                    frontier_phi_71_pred_4 = _3275;
                    frontier_phi_71_pred_5 = _3274;
                }
                _3060 = frontier_phi_71_pred;
                _3058 = frontier_phi_71_pred_1;
                _3056 = frontier_phi_71_pred_2;
                _3054 = frontier_phi_71_pred_3;
                _3052 = frontier_phi_71_pred_4;
                _3050 = frontier_phi_71_pred_5;
                uint _3209 = _3208 + 1u;
                if (_3209 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3202 = _3050;
                    _3203 = _3052;
                    _3204 = _3054;
                    _3205 = _3056;
                    _3206 = _3058;
                    _3207 = _3060;
                    _3208 = _3209;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
        }
        uvec4 _3063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3064 = _3063.z;
        uint _3066 = (_3064 >> 8u) & 15u;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        if (((4294967295u << _3066) & _2969) == 0u)
        {
            _3170 = _3049;
            _3172 = _3051;
            _3174 = _3053;
            _3176 = _3055;
            _3178 = _3057;
            _3180 = _3059;
        }
        else
        {
            float _3195 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
            float _3196 = _3195 * _2028;
            float _3197 = _3195 * _2029;
            float _3198 = _3195 * _2030;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3066 < ((_3064 >> 12u) & 15u))
            {
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3330 = _3049;
                float _3331 = _3051;
                float _3332 = _3053;
                float _3333 = _3055;
                float _3334 = _3057;
                float _3335 = _3059;
                uint _3336 = _3066;
                uint _3345;
                bool _3346;
                for (;;)
                {
                    _3345 = texelFetch(g_lightClassification, int((((_2963 << 5u) + (_2949 << 9u)) + (_3336 << 2u)) >> 2u)).x;
                    _3346 = _3345 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3346)
                    {
                        frontier_phi_82_pred = _3335;
                        frontier_phi_82_pred_1 = _3334;
                        frontier_phi_82_pred_2 = _3333;
                        frontier_phi_82_pred_3 = _3332;
                        frontier_phi_82_pred_4 = _3331;
                        frontier_phi_82_pred_5 = _3330;
                    }
                    else
                    {
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3551 = _3330;
                        float _3552 = _3331;
                        float _3553 = _3332;
                        float _3554 = _3333;
                        float _3555 = _3334;
                        float _3556 = _3335;
                        uint _3557 = _3345;
                        uint _3558;
                        vec4 _3583;
                        float _3584;
                        vec4 _3599;
                        vec3 _3611;
                        vec4 _3626;
                        vec4 _3641;
                        float _3687;
                        bool _3688;
                        for (;;)
                        {
                            uint _3568 = ((_3336 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3557));
                            _3558 = (_3557 + 4294967295u) & _3557;
                            uint _3570 = _3568 * 40u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            _3584 = _3583.w;
                            uint _3586 = (_3568 * 40u) + 4u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3601 = (_3568 * 40u) + 8u;
                            _3611 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x));
                            uint _3613 = (_3568 * 40u) + 16u;
                            _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3628 = (_3568 * 40u) + 20u;
                            _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            uint _3643 = (_3568 * 40u) + 24u;
                            vec4 _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3662 = (_3568 * 40u) + 28u;
                            vec4 _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            _3687 = fma(_2030, _3675.z, fma(_2029, _3675.y, _3675.x * _2028)) + _3675.w;
                            _3688 = !((fma(_2030, _3656.z, fma(_2029, _3656.y, _3656.x * _2028)) + _3656.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3688)
                            {
                                float _3715 = _3583.x - _2028;
                                float _3716 = _3583.y - _2029;
                                float _3717 = _3583.z - _2030;
                                float _3718 = dot(vec3(_3715, _3716, _3717), vec3(_3715, _3716, _3717));
                                float _3721 = inversesqrt(_3718);
                                float _3722 = _3721 * _3715;
                                float _3723 = _3721 * _3716;
                                float _3724 = _3721 * _3717;
                                float _3728 = 1.0 - (_3718 / (_3584 * _3584));
                                float _4917 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3733 = sqrt(_3718) * _3599.w;
                                float _3735 = 1.39999997615814208984375 / (_3733 + 1.39999997615814208984375);
                                float _3736 = _3735 * _3735;
                                float _3739 = ((1.0 - _3736) * dot(vec3(_3722, _3723, _3724), vec3(_863, _866, _869))) + _3736;
                                float _3742 = _3733 * _3733;
                                float _3746 = (fma(_2030, _3626.z, fma(_2029, _3626.y, _3626.x * _2028)) + _3626.w) / _3687;
                                float _3747 = (fma(_2030, _3641.z, fma(_2029, _3641.y, _3641.x * _2028)) + _3641.w) / _3687;
                                float _3751 = 1.0 - dot(vec2(_3746, _3747), vec2(_3746, _3747));
                                float _4933 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3752 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3753 = _3752 * (((isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0))) * _3729) / ((_3742 * 0.699999988079071044921875) + 1.0));
                                float _3765 = exp2(log2(1.0 / ((_3742 * 3.5) + 5.0)) * 0.25);
                                float _3766 = 1.0 - _938;
                                float _3773 = sqrt(1.0 - ((1.0 - (_3766 * _3766)) * (1.0 - (_3765 * _3765))));
                                float _3774 = _3773 * _3773;
                                float _3775 = _3774 * _3774;
                                float _3776 = _3722 - _3196;
                                float _3777 = _3723 - _3197;
                                float _3778 = _3724 - _3198;
                                float _3782 = inversesqrt(dot(vec3(_3776, _3777, _3778), vec3(_3776, _3777, _3778)));
                                float _3786 = dot(vec3(_863, _866, _869), vec3((-0.0) - _3196, (-0.0) - _3197, (-0.0) - _3198));
                                float _4944 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3789 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3790 = dot(vec3(_863, _866, _869), vec3(_3782 * _3776, _3782 * _3777, _3782 * _3778));
                                float _4955 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3793 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3797 = ((_3793 * _3793) * (_3775 + (-1.0))) + 1.0;
                                float _3798 = _3735 * _3774;
                                float _3799 = _3798 * _3798;
                                float _3805 = ((1.0 - _3799) * dot(vec3(_863, _866, _869), vec3(_3722, _3723, _3724))) + _3799;
                                float _4966 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3806 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3807 = 1.0 - _3774;
                                float _3817 = (0.5 / (((_3806 * ((_3789 * _3807) + _3774)) + 9.9999999392252902907785028219223e-09) + (((_3806 * _3807) + _3774) * _3789))) * _3806;
                                float _4977 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3827 = (_3752 * _3729) * (((_3775 * 3.1415927410125732421875) * (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) / ((_3797 * _3797) * ((_3742 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3753 * _3599.z;
                                frontier_phi_88_pred_1 = _3753 * _3599.y;
                                frontier_phi_88_pred_2 = _3753 * _3599.x;
                                frontier_phi_88_pred_3 = _3827 * _3611.z;
                                frontier_phi_88_pred_4 = _3827 * _3611.y;
                                frontier_phi_88_pred_5 = _3827 * _3611.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3836 = frontier_phi_88_pred;
                            _3835 = frontier_phi_88_pred_1;
                            _3834 = frontier_phi_88_pred_2;
                            _3833 = frontier_phi_88_pred_3;
                            _3832 = frontier_phi_88_pred_4;
                            _3831 = frontier_phi_88_pred_5;
                            _3541 = _3834 + _3554;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            _3538 = _3831 + _3551;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            if (_3558 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3558;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3543;
                        frontier_phi_82_pred_1 = _3542;
                        frontier_phi_82_pred_2 = _3541;
                        frontier_phi_82_pred_3 = _3540;
                        frontier_phi_82_pred_4 = _3539;
                        frontier_phi_82_pred_5 = _3538;
                    }
                    _3181 = frontier_phi_82_pred;
                    _3179 = frontier_phi_82_pred_1;
                    _3177 = frontier_phi_82_pred_2;
                    _3175 = frontier_phi_82_pred_3;
                    _3173 = frontier_phi_82_pred_4;
                    _3171 = frontier_phi_82_pred_5;
                    uint _3337 = _3336 + 1u;
                    if (_3337 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3330 = _3171;
                        _3331 = _3173;
                        _3332 = _3175;
                        _3333 = _3177;
                        _3334 = _3179;
                        _3335 = _3181;
                        _3336 = _3337;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3177;
                frontier_phi_63_64_ladder_1 = _3181;
                frontier_phi_63_64_ladder_2 = _3179;
                frontier_phi_63_64_ladder_3 = _3175;
                frontier_phi_63_64_ladder_4 = _3173;
                frontier_phi_63_64_ladder_5 = _3171;
            }
            else
            {
                frontier_phi_63_64_ladder = _3055;
                frontier_phi_63_64_ladder_1 = _3059;
                frontier_phi_63_64_ladder_2 = _3057;
                frontier_phi_63_64_ladder_3 = _3053;
                frontier_phi_63_64_ladder_4 = _3051;
                frontier_phi_63_64_ladder_5 = _3049;
            }
            _3170 = frontier_phi_63_64_ladder_5;
            _3172 = frontier_phi_63_64_ladder_4;
            _3174 = frontier_phi_63_64_ladder_3;
            _3176 = frontier_phi_63_64_ladder;
            _3178 = frontier_phi_63_64_ladder_2;
            _3180 = frontier_phi_63_64_ladder_1;
        }
        float _3185 = isnan(1.0) ? _922 : (isnan(_922) ? 1.0 : min(_922, 1.0));
        _2982 = (_3185 * _3176) + _2494;
        _2984 = (_3185 * _3178) + _2496;
        _2986 = (_3185 * _3180) + _2498;
        _2988 = ((_3170 * _906) * _3185) + _2832;
        _2990 = ((_3172 * _908) * _3185) + _2834;
        _2992 = ((_3174 * _909) * _3185) + _2836;
    }
    else
    {
        _2982 = _2494;
        _2984 = _2496;
        _2986 = _2498;
        _2988 = _2832;
        _2990 = _2834;
        _2992 = _2836;
    }
    float _4993 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _5004 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _5015 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _3009 = ((isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_2982 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _922))) + ((_2988 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1760)) * cbPerFrame._m0[3u].x);
    float _3010 = ((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2984 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _922))) + ((_2990 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1760)) * cbPerFrame._m0[3u].x);
    float _3011 = ((isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_2986 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _922))) + ((_2992 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1760)) * cbPerFrame._m0[3u].x);
    uint _3012 = _250 + 6u;
    float _3020 = _844 / cbSceneParam._m0[86u].x;
    float _3021 = _845 / cbSceneParam._m0[86u].y;
    vec4 _3035 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3020, _3021, (log2((isnan(cbSceneParam._m0[77u].w) ? _766 : (isnan(_766) ? cbSceneParam._m0[77u].w : min(_766, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3037 = _3035.x;
    float _3038 = _3035.y;
    float _3039 = _3035.z;
    float _3040 = _3035.w;
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    if (_766 > cbSceneParam._m0[78u].w)
    {
        float _3074 = isnan(_766) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _766 : min(cbSceneParam._m0[80u].w, _766));
        float _3075 = _3074 / _766;
        float _3086 = _3075 * _817;
        float _3087 = _818 * _3075;
        float _3088 = (-0.0) - _3087;
        float _3090 = _3075 * _819;
        float _3092 = (cbSceneParam._m0[77u].w * _3088) / _3074;
        float _3093 = _3092 + cbSceneParam._m0[79u].w;
        float _3094 = cbSceneParam._m0[79u].w - _3087;
        float _3100 = sqrt(((_3086 * _3086) + (_3087 * _3087)) + (_3090 * _3090));
        float _3103 = (1.0 - (cbSceneParam._m0[77u].w / _3074)) * _3100;
        float _3108 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3110 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3287;
        if (abs((_3088 - _3092) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3287 = ((((_3093 > 0.0) ? exp2(_3108 * _3093) : (2.0 - exp2(_3110 * _3093))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3103;
        }
        else
        {
            float _3231 = 1.0 / cbSceneParam._m0[80u].x;
            float _3232 = isnan(_3094) ? _3093 : (isnan(_3093) ? _3094 : max(_3093, _3094));
            float _3233 = isnan(_3094) ? _3093 : (isnan(_3093) ? _3094 : min(_3093, _3094));
            float _3242 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : min(_3232, 0.0));
            float _3243 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : min(_3233, 0.0));
            _3287 = ((abs(_3100 / _3088) * cbSceneParam._m0[80u].y) * ((((_3242 - _3243) * 2.0) - ((exp2(_3108 * (isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0)))) - exp2(_3108 * (isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))))) * _3231)) - ((exp2(_3110 * _3242) - exp2(_3110 * _3243)) * _3231))) + (_3103 * cbSceneParam._m0[80u].z);
        }
        vec4 _3289 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3020, _3021, 1.0), 0.0);
        float _3298 = exp2((_3287 * (-1.44269502162933349609375)) * (1.0 - _3289.w));
        float _3299 = log2(_3298);
        float _3315 = log2(_3040);
        _3112 = (exp2(_3315 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].x)) * _3289.x) / cbSceneParam._m0[78u].x)) + _3037;
        _3114 = (exp2(_3315 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].y)) * _3289.y) / cbSceneParam._m0[78u].y)) + _3038;
        _3116 = (exp2(_3315 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].z)) * _3289.z) / cbSceneParam._m0[78u].z)) + _3039;
        _3118 = _3298 * _3040;
    }
    else
    {
        _3112 = _3037;
        _3114 = _3038;
        _3116 = _3039;
        _3118 = _3040;
    }
    bool _3325;
    vec4 _3128;
    vec4 _3150;
    float _3152;
    float _3156;
    float _3157;
    float _3158;
    float _3159;
    bool _3169;
    for (;;)
    {
        _3128 = cbMatDynParam._m0[0u];
        float _3130 = roundEven(_3128.y);
        bool _3131 = _3130 == 3.0;
        float _3132 = log2(_3118);
        float _3139 = exp2(_3132 * cbSceneParam._m0[78u].x) * _3009;
        float _3140 = exp2(_3132 * cbSceneParam._m0[78u].y) * _3010;
        float _3141 = exp2(_3132 * cbSceneParam._m0[78u].z) * _3011;
        float _3148 = _833 + (-0.5);
        _3150 = cbMtdParam._m0[1u];
        _3152 = _3150.y * _3148;
        float _3155 = (_3130 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3156 = _3155 * (_3131 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3112)));
        _3157 = _3155 * (_3131 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3114)));
        _3158 = _3155 * (_3131 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3116)));
        _3159 = _3148 * 0.999000012874603271484375;
        _3169 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3169)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _3159) < 0.5)
            {
                _3325 = true;
                break;
            }
        }
        uint _3266 = _882 + uint(_3128.w);
        if ((cbInstanceData._m0[_3266].w < 1.0) && ((cbInstanceData._m0[_3266].w + _3159) < 0.5))
        {
            _3325 = true;
            break;
        }
        if ((_3152 + 1.0) < _3150.x)
        {
            _3325 = true;
            break;
        }
        _3325 = false;
        break;
    }
    float _3529;
    if (_3325)
    {
        discard_state = true;
        _3529 = 0.0;
    }
    else
    {
        _3529 = cbInstanceData._m0[_3012].w;
    }
    SV_Target.x = _3156;
    SV_Target.y = _3157;
    SV_Target.z = _3158;
    SV_Target.w = _3529;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3012].w;
    discard_exit();
}


