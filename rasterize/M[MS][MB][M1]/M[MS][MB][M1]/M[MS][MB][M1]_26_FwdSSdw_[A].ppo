#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1214;
float _3620;
float _3621;
float _3622;
float _3623;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _340 = _336.z;
    float _344 = (_336.x * 2.0) + (-1.0);
    float _345 = (_336.y * 2.0) + (-1.0);
    float _346 = dot(vec2(_344, _345), vec2(_344, _345));
    float _3632 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _352 = sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))));
    float _357 = _344 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_310.x * 2.0) + (-1.0)));
    float _358 = _345 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_310.y * 2.0) + (-1.0)));
    float _361 = fma(_352, _233, fma(_358, _240, _357 * _226));
    float _364 = fma(_352, _234, fma(_358, _241, _357 * _227));
    float _367 = fma(_352, _235, fma(_358, _242, _357 * _228));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _409 = _407.x;
    float _410 = 1.0 - _409;
    float _419 = (cbMtdParam._m0[19u].x + dot(vec4(_371 * _361, _371 * _364, _371 * _367, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_409 - _410) * cbMtdParam._m0[24u].z) + _410) * cbMtdParam._m0[21u].z);
    float _3643 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _422 = (-0.0) - cbMtdParam._m0[24u].x;
    float _424 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _425 = isnan(1.0) ? _424 : (isnan(_424) ? 1.0 : min(_424, 1.0));
    float _432 = _420 - ((_420 * TEXCOORD_8.x) * _425);
    float _433 = _420 - ((_420 * TEXCOORD_8.y) * _425);
    float _434 = _420 - ((_420 * TEXCOORD_8.z) * _425);
    float _441 = (_432 * (cbMtdParam._m0[17u].x - _290)) + _290;
    float _442 = (_433 * (cbMtdParam._m0[17u].y - _291)) + _291;
    float _443 = (_434 * (cbMtdParam._m0[17u].z - _292)) + _292;
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _457 = _455.x;
    float _458 = 1.0 - _457;
    float _488 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_457 - _458) * cbMtdParam._m0[24u].w) + _458) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3664 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _489 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _497 = ((((cbMtdParam._m0[10u].x - _441) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _489) + _441;
    float _498 = ((((cbMtdParam._m0[10u].y - _442) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _489) + _442;
    float _499 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _443)) * _489) + _443;
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _514 = _512.x;
    float _516 = _514 - (_514 * _432);
    float _518 = _516 - (_516 * _489);
    float _523 = (((_310.z - _340) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _340;
    vec4 _537 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _544 = (_537.x * 2.0) + (-1.0);
    float _545 = (_537.y * 2.0) + (-1.0);
    float _546 = dot(vec2(_544, _545), vec2(_544, _545));
    float _3675 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _554 = ((_537.z - _523) * _432) + _523;
    float _557 = ((cbMtdParam._m0[23u].y - _554) * _489) + _554;
    vec4 _576 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _582 = (_576.x * 2.0) + (-1.0);
    float _583 = (_576.y * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3686 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _599 = ((sqrt(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) - _352) * _434) + _352;
    float _602 = (((_544 - _357) * _432) + _357) + (cbMtdParam._m0[21u].x * _357);
    float _603 = (((_545 - _358) * _433) + _358) + (cbMtdParam._m0[21u].x * _358);
    float _614 = (((_582 - _602) + (_602 * cbMtdParam._m0[22u].z)) * _489) + _602;
    float _615 = (((_583 - _603) + (_603 * cbMtdParam._m0[22u].z)) * _489) + _603;
    float _616 = (_489 * (sqrt(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) - _599)) + _599;
    float _618 = cbMtdParam._m0[22u].x + _336.w;
    float _621 = fma(_616, _233, fma(_615, _240, _614 * _226));
    float _624 = fma(_616, _234, fma(_615, _241, _614 * _227));
    float _627 = fma(_616, _235, fma(_615, _242, _614 * _228));
    float _631 = inversesqrt(dot(vec3(_621, _624, _627), vec3(_621, _624, _627)));
    float _632 = _631 * _621;
    float _633 = _631 * _624;
    float _634 = _631 * _627;
    float _3697 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _635 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3719 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3730 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3741 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3752 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _640 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _654 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _704 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _694);
    float _705 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _694);
    float _706 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _694);
    float _710 = inversesqrt(dot(vec3(_704, _705, _706), vec3(_704, _705, _706)));
    float _711 = _704 * _710;
    float _712 = _705 * _710;
    float _713 = _706 * _710;
    vec4 _718 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _720 = _718.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _895 = sqrt(((_704 * _704) + (_705 * _705)) + (_706 * _706));
        float _901 = (cbMatDynParam._m0[5u].x * _895) + cbMatDynParam._m0[5u].y;
        float _3763 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _906 = (cbMatDynParam._m0[5u].z * _895) + cbMatDynParam._m0[5u].w;
        float _3774 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) - _902)) + _902) < ((_720 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _732 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _733 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _753 = fma(_634, cbSceneParam._m0[5u].z, fma(_633, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _632));
    float _756 = fma(_634, cbSceneParam._m0[6u].z, fma(_633, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _632));
    float _759 = fma(_634, cbSceneParam._m0[7u].z, fma(_633, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _632));
    uint _772 = _245 + 9u;
    uint _773 = _772 + uint(cbMatDynParam._m0[0u].w);
    float _779 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_773].x;
    float _780 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_773].y;
    float _781 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_773].z;
    float _3785 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _785 = 1.0 - _640;
    float _786 = _782 * _785;
    float _787 = _783 * _785;
    float _788 = _784 * _785;
    float _793 = (_782 + (-0.039999999105930328369140625)) * _640;
    float _794 = (_783 + (-0.039999999105930328369140625)) * _640;
    float _795 = (_784 + (-0.039999999105930328369140625)) * _640;
    float _796 = _793 + 0.039999999105930328369140625;
    float _798 = _794 + 0.039999999105930328369140625;
    float _799 = _795 + 0.039999999105930328369140625;
    vec4 _808 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _732, cbSceneParam._m0[86u].y * _733));
    float _812 = ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * TEXCOORD_5.w) * _808.x;
    float _813 = dot(vec3(_632, _633, _634), vec3(_711, _712, _713));
    float _816 = _813 * 2.0;
    float _820 = (_816 * _632) - _711;
    float _821 = (_816 * _633) - _712;
    float _822 = (_816 * _634) - _713;
    float _826 = abs(dot(vec3(_711, _712, _713), vec3(_632, _633, _634)));
    float _3818 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _828 = sqrt(_635);
    float _841 = exp2((_828 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_828 * 3.0));
    float _847 = (1.0 - _841) * ((_828 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _848 = _841 * _828;
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1213;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _938 = fma(_884, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876));
        float _942 = fma(_884, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876));
        float _946 = fma(_884, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876));
        float _971 = _876 + _632;
        float _972 = _880 + _633;
        float _973 = _884 + _634;
        float _983 = fma(_973, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971)) - _938;
        float _984 = fma(_973, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971)) - _942;
        float _985 = fma(_973, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971)) - _946;
        float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
        float _1002 = ((_989 * _983) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_938 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_989 * _984) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_942 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_989 * _985) / cbModelParam._m0[34u].z) + ((((((_946 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        float _1041 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1007.x + (-0.5));
        float _1043 = _1041 * (_1007.y + (-0.5));
        float _1044 = _1041 * (_1007.z + (-0.5));
        float _1051 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1014.x + (-0.5));
        float _1053 = _1051 * (_1014.y + (-0.5));
        float _1054 = _1051 * (_1014.z + (-0.5));
        float _1061 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1021.x + (-0.5));
        float _1063 = _1061 * (_1021.y + (-0.5));
        float _1064 = _1061 * (_1021.z + (-0.5));
        float _1071 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1028.x + (-0.5));
        float _1073 = _1071 * (_1028.y + (-0.5));
        float _1074 = _1071 * (_1028.z + (-0.5));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = _1042 * 0.5;
        float _1079 = _1052 * 0.5;
        float _1080 = _1062 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1095 = (dot(vec3(_632, _633, _634), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1105 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3866 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1107 + 1.0))) + _1112) * _1075;
        float _1122 = _1043 * 0.5;
        float _1123 = _1053 * 0.5;
        float _1124 = _1063 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_632, _633, _634), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3899 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1149 + 1.0))) + _1154) * _1076;
        float _1164 = _1044 * 0.5;
        float _1165 = _1054 * 0.5;
        float _1166 = _1064 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_632, _633, _634), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3932 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1191 + 1.0))) + _1196) * _1077;
        _1213 = _1044;
        _1215 = _1043;
        _1216 = _1042;
        _1217 = _1054;
        _1218 = _1053;
        _1219 = _1052;
        _1220 = _1064;
        _1221 = _1063;
        _1222 = _1062;
        _1223 = _1077;
        _1224 = _1076;
        _1225 = _1075;
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
    }
    else
    {
        _1213 = _1214;
        _1215 = _1214;
        _1216 = _1214;
        _1217 = _1214;
        _1218 = _1214;
        _1219 = _1214;
        _1220 = _1214;
        _1221 = _1214;
        _1222 = _1214;
        _1223 = _1214;
        _1224 = _1214;
        _1225 = _1214;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1256 = fma(_884, cbModelParam._m0[30u].z, fma(_880, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _876));
        float _1260 = fma(_884, cbModelParam._m0[31u].z, fma(_880, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _876));
        float _1264 = fma(_884, cbModelParam._m0[32u].z, fma(_880, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _876));
        float _1287 = _876 + _632;
        float _1288 = _880 + _633;
        float _1289 = _884 + _634;
        float _1299 = fma(_1289, cbModelParam._m0[30u].z, fma(_1288, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1287)) - _1256;
        float _1300 = fma(_1289, cbModelParam._m0[31u].z, fma(_1288, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1287)) - _1260;
        float _1301 = fma(_1289, cbModelParam._m0[32u].z, fma(_1288, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1287)) - _1264;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1256 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1260 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[35u].z) + ((((((_1264 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1355 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1322.x + (-0.5));
        float _1357 = _1355 * (_1322.y + (-0.5));
        float _1358 = _1355 * (_1322.z + (-0.5));
        float _1365 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1329.x + (-0.5));
        float _1367 = _1365 * (_1329.y + (-0.5));
        float _1368 = _1365 * (_1329.z + (-0.5));
        float _1375 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1336.x + (-0.5));
        float _1377 = _1375 * (_1336.y + (-0.5));
        float _1378 = _1375 * (_1336.z + (-0.5));
        float _1385 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1343.x + (-0.5));
        float _1387 = _1385 * (_1343.y + (-0.5));
        float _1388 = _1385 * (_1343.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_632, _633, _634), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3995 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1419 + 1.0))) + _1424) * _1389;
        float _1434 = _1357 * 0.5;
        float _1435 = _1367 * 0.5;
        float _1436 = _1377 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_632, _633, _634), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4028 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1461 + 1.0))) + _1466) * _1390;
        float _1476 = _1358 * 0.5;
        float _1477 = _1368 * 0.5;
        float _1478 = _1378 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_632, _633, _634), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4061 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1503 + 1.0))) + _1508) * _1391;
        _1525 = _1358;
        _1526 = _1357;
        _1527 = _1356;
        _1528 = _1368;
        _1529 = _1367;
        _1530 = _1366;
        _1531 = _1378;
        _1532 = _1377;
        _1533 = _1376;
        _1534 = _1391;
        _1535 = _1390;
        _1536 = _1389;
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
    }
    else
    {
        _1525 = _1214;
        _1526 = _1214;
        _1527 = _1214;
        _1528 = _1214;
        _1529 = _1214;
        _1530 = _1214;
        _1531 = _1214;
        _1532 = _1214;
        _1533 = _1214;
        _1534 = _1214;
        _1535 = _1214;
        _1536 = _1214;
        _1537 = 0.0;
        _1538 = 0.0;
        _1539 = 0.0;
    }
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1226)) + _1226;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1227)) + _1227;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1228)) + _1228;
    float _1572 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1550, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1550, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1550, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1549));
    float _1593 = _820 * 0.5;
    float _1594 = _821 * 0.5;
    float _1595 = _822 * 0.5;
    float _1596 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1599 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1602 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1636;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1609 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1213, _1217, _1220, _1223));
        float _1613 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1215, _1218, _1221, _1224));
        float _1617 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1216, _1219, _1222, _1225));
        float _1624 = dot(vec4(cbModelParam._m0[39u]), vec4(_1593, _1594, _1595, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1647;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1638 = dot(vec4(cbModelParam._m0[40u]), vec4(_1593, _1594, _1595, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1651 = (_1647 * cbModelParam._m0[1u].x) + (_1636 * (1.0 - cbModelParam._m0[1u].x));
    float _1661 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _635);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1661 : min(cbModelParam._m0[25u].z, _1661));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1710 = fma(_884, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876)) + cbModelParam._m0[13u].w;
        float _1714 = fma(_884, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876)) + cbModelParam._m0[14u].w;
        float _1718 = fma(_884, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876)) + cbModelParam._m0[15u].w;
        float _1721 = fma(_822, cbModelParam._m0[13u].z, fma(_821, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820));
        float _1724 = fma(_822, cbModelParam._m0[14u].z, fma(_821, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820));
        float _1727 = fma(_822, cbModelParam._m0[15u].z, fma(_821, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820));
        float _1755;
        if (_1721 > 0.0)
        {
            _1755 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1755 = frontier_phi_17_15_ladder;
        }
        float _1980;
        if (_1724 > 0.0)
        {
            _1980 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1980 = frontier_phi_26_22_ladder;
        }
        float _2237;
        if (_1727 > 0.0)
        {
            _2237 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2237 = frontier_phi_38_33_ladder;
        }
        float _2239 = isnan(_1980) ? _1755 : (isnan(_1755) ? _1980 : min(_1755, _1980));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1721) + _1710;
        float _2245 = (_2240 * _1724) + _1714;
        float _2246 = (_2240 * _1727) + _1718;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2247;
        float _2251 = _2247 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 > _2251) || ((_2245 < _2249) || ((_2244 < _2249) || (_2244 > _2251))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2246, cbModelParam._m0[9u].z, fma(_2245, cbModelParam._m0[9u].y, _2244 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2246, cbModelParam._m0[10u].z, fma(_2245, cbModelParam._m0[10u].y, _2244 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2246, cbModelParam._m0[11u].z, fma(_2245, cbModelParam._m0[11u].y, _2244 * cbModelParam._m0[11u].x))), _1662);
            frontier_phi_16_38_ladder = _2374.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2374.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2374.x * cbModelParam._m0[1u].y;
        }
        _1743 = frontier_phi_16_38_ladder_2;
        _1745 = frontier_phi_16_38_ladder_1;
        _1747 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_820, _821, _822), _1662);
        _1743 = _1731.x * cbModelParam._m0[1u].y;
        _1745 = _1731.y * cbModelParam._m0[1u].y;
        _1747 = _1731.z * cbModelParam._m0[1u].y;
    }
    float _1751 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _635);
    float _1752 = isnan(_1751) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1751 : min(cbModelParam._m0[25u].w, _1751));
    float _1842;
    float _1844;
    float _1846;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1806 = fma(_884, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876)) + cbModelParam._m0[21u].w;
        float _1810 = fma(_884, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876)) + cbModelParam._m0[22u].w;
        float _1814 = fma(_884, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876)) + cbModelParam._m0[23u].w;
        float _1817 = fma(_822, cbModelParam._m0[21u].z, fma(_821, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820));
        float _1820 = fma(_822, cbModelParam._m0[22u].z, fma(_821, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820));
        float _1823 = fma(_822, cbModelParam._m0[23u].z, fma(_821, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820));
        float _1985;
        if (_1817 > 0.0)
        {
            _1985 = abs((1.0 - _1806) / _1817);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1806 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1985 = frontier_phi_28_24_ladder;
        }
        float _2264;
        if (_1820 > 0.0)
        {
            _2264 = abs((1.0 - _1810) / _1820);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1810 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2264 = frontier_phi_40_35_ladder;
        }
        float _2477;
        if (_1823 > 0.0)
        {
            _2477 = abs((1.0 - _1814) / _1823);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1814 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2477 = frontier_phi_49_46_ladder;
        }
        float _2479 = isnan(_2264) ? _1985 : (isnan(_1985) ? _2264 : min(_1985, _2264));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1817) + _1806;
        float _2485 = (_2480 * _1820) + _1810;
        float _2486 = (_2480 * _1823) + _1814;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2487;
        float _2490 = _2487 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2486 > _2490) || ((_2486 < _2488) || ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 < _2488) || (_2484 > _2490))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2486, cbModelParam._m0[17u].z, fma(_2485, cbModelParam._m0[17u].y, _2484 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2486, cbModelParam._m0[18u].z, fma(_2485, cbModelParam._m0[18u].y, _2484 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2486, cbModelParam._m0[19u].z, fma(_2485, cbModelParam._m0[19u].y, _2484 * cbModelParam._m0[19u].x))), _1752);
            frontier_phi_25_49_ladder = _2685.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2685.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2685.x * cbModelParam._m0[1u].z;
        }
        _1842 = frontier_phi_25_49_ladder_2;
        _1844 = frontier_phi_25_49_ladder_1;
        _1846 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_820, _821, _822), _1752);
        _1842 = _1826.x * cbModelParam._m0[1u].z;
        _1844 = _1826.y * cbModelParam._m0[1u].z;
        _1846 = _1826.z * cbModelParam._m0[1u].z;
    }
    float _1859 = (((_847 * _796) + _848) * _812) * ((cbModelParam._m0[1u].w * (_1842 - _1743)) + _1743);
    float _1861 = (((_847 * _798) + _848) * _812) * ((cbModelParam._m0[1u].w * (_1844 - _1745)) + _1745);
    float _1863 = (((_847 * _799) + _848) * _812) * ((cbModelParam._m0[1u].w * (_1846 - _1747)) + _1747);
    float _1866 = fma(_1863, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1859 * cbSceneParam._m0[89u].x));
    float _1869 = fma(_1863, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1859 * cbSceneParam._m0[90u].x));
    float _1872 = fma(_1863, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, _1859 * cbSceneParam._m0[91u].x));
    vec4 _1880 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_732, _733));
    float _1882 = _1880.w;
    float _1894 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1882);
    float _1895 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1882);
    float _1896 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1882);
    uvec4 _1900 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1902 = _1900.x * 14u;
    uint _1903 = _1902 + 13u;
    float _1910 = _812 + (-1.0);
    float _1915 = (cbLight._m0[_1903].x * _1910) + 1.0;
    float _1916 = (cbLight._m0[_1903].y * _1910) + 1.0;
    float _1917 = (cbLight._m0[_1903].z * _1910) + 1.0;
    float _1918 = (cbLight._m0[_1903].w * _1910) + 1.0;
    uint _1919 = _1902 + 5u;
    float _1925 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1929 = _1902 + 4u;
    float _1939 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
    uint _1943 = _1902 | 1u;
    float _1954 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_632, _633, _634));
    float _1957 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_632, _633, _634));
    float _4197 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _4208 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1962 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * 0.3183098733425140380859375;
    float _1964 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _1971 = ((cbLight._m0[_1919].x * _1925) * _1964) + (((cbLight._m0[_1929].x * _1894) * _1939) * _1962);
    float _1972 = ((_1925 * cbLight._m0[_1919].y) * _1964) + (((cbLight._m0[_1929].y * _1895) * _1939) * _1962);
    float _1973 = ((_1925 * cbLight._m0[_1919].z) * _1964) + (((cbLight._m0[_1929].z * _1896) * _1939) * _1962);
    uvec4 _1977 = floatBitsToUint(cbLight._m0[_1902 + 12u]);
    bool _1979 = _1977.x == 0u;
    float _1990;
    float _1992;
    float _1994;
    if (_1979)
    {
        _1990 = _1971;
        _1992 = _1972;
        _1994 = _1973;
    }
    else
    {
        uint _1998 = _1902 + 6u;
        float _2014 = (dot(vec3(cbLight._m0[_1902 + 2u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _2015 = _2014 * _2014;
        float _4219 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2016 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2017 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _1990 = (((cbLight._m0[_1998].x * 0.3183098733425140380859375) * _2016) * _2017) + _1971;
        _1992 = (((cbLight._m0[_1998].y * 0.3183098733425140380859375) * _2016) * _2017) + _1972;
        _1994 = (((cbLight._m0[_1998].z * 0.3183098733425140380859375) * _2016) * _2017) + _1973;
    }
    bool _1997 = _1977.y == 0u;
    float _2035;
    float _2037;
    float _2039;
    if (_1997)
    {
        _2035 = _1990;
        _2037 = _1992;
        _2039 = _1994;
    }
    else
    {
        uint _2208 = _1902 + 7u;
        float _2224 = (dot(vec3(cbLight._m0[_1902 + 3u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _2225 = _2224 * _2224;
        float _4235 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2226 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2227 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2035 = (((cbLight._m0[_2208].x * 0.3183098733425140380859375) * _2226) * _2227) + _1990;
        _2037 = (((cbLight._m0[_2208].y * 0.3183098733425140380859375) * _2226) * _2227) + _1992;
        _2039 = (((cbLight._m0[_2208].z * 0.3183098733425140380859375) * _2226) * _2227) + _1994;
    }
    uint _2042 = _1902 + 8u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _635) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1902].x + _711;
    float _2058 = cbLight._m0[_1902].y + _712;
    float _2059 = cbLight._m0[_1902].z + _713;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_1902].xyz));
    float _4251 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _2071 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2072 = dot(vec3(_632, _633, _634), vec3(_2064, _2065, _2066));
    float _4273 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2076 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_2064, _2065, _2066));
    float _4284 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2080 = _2056 * _2056;
    float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
    float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
    float _2093 = 0.959999978542327880859375 - _793;
    float _2095 = 0.959999978542327880859375 - _794;
    float _2096 = 0.959999978542327880859375 - _795;
    float _2103 = 1.0 - _2056;
    float _2114 = (0.5 / (((_2071 * ((_2070 * _2103) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2103) + _2056) * _2070))) * _2070;
    float _4295 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2116 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
    uint _2130 = _1902 + 9u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _635) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_1943].x + _711;
    float _2144 = cbLight._m0[_1943].y + _712;
    float _2145 = cbLight._m0[_1943].z + _713;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_1943].xyz));
    float _4306 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2157 = dot(vec3(_632, _633, _634), vec3(_2150, _2151, _2152));
    float _4317 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2161 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_2150, _2151, _2152));
    float _4328 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2165 = _2142 * _2142;
    float _2169 = ((_2160 * _2160) * (_2165 + (-1.0))) + 1.0;
    float _2176 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
    float _2183 = 1.0 - _2142;
    float _2193 = (0.5 / (((_2071 * ((_2156 * _2183) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2183) + _2142) * _2156))) * _2156;
    float _4339 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2165 / ((_2169 * _2169) * 3.141590118408203125));
    float _2205 = (((((_2176 * _2093) + _796) * cbLight._m0[_2130].x) * _2195) * _1925) + ((((cbLight._m0[_2042].x * _1894) * ((_2092 * _2093) + _796)) * _2116) * _1939);
    float _2206 = (((((_2176 * _2095) + _798) * cbLight._m0[_2130].y) * _2195) * _1925) + ((((cbLight._m0[_2042].y * _1895) * ((_2092 * _2095) + _798)) * _2116) * _1939);
    float _2207 = (((((_2176 * _2096) + _799) * cbLight._m0[_2130].z) * _2195) * _1925) + ((((cbLight._m0[_2042].z * _1896) * ((_2092 * _2096) + _799)) * _2116) * _1939);
    float _2269;
    float _2271;
    float _2273;
    if (_1979)
    {
        _2269 = _2205;
        _2271 = _2206;
        _2273 = _2207;
    }
    else
    {
        uint _2275 = _1902 + 2u;
        uint _2279 = _1902 + 10u;
        float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _635) * 0.949999988079071044921875);
        float _2294 = _2293 * _2293;
        float _2295 = cbLight._m0[_2275].x + _711;
        float _2296 = cbLight._m0[_2275].y + _712;
        float _2297 = cbLight._m0[_2275].z + _713;
        float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
        float _2302 = _2301 * _2295;
        float _2303 = _2301 * _2296;
        float _2304 = _2301 * _2297;
        float _2305 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2275].xyz));
        float _4350 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2309 = dot(vec3(_632, _633, _634), vec3(_2302, _2303, _2304));
        float _4361 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2313 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2302, _2303, _2304));
        float _4372 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2317 = _2294 * _2294;
        float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
        float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
        float _2335 = 1.0 - _2294;
        float _2345 = (0.5 / (((_2071 * ((_2308 * _2335) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2335) + _2294) * _2308))) * _2308;
        float _4383 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2347 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
        float _2348 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2269 = (((((_2328 * _2093) + _796) * cbLight._m0[_2279].x) * _2347) * _2348) + _2205;
        _2271 = (((((_2328 * _2095) + _798) * cbLight._m0[_2279].y) * _2347) * _2348) + _2206;
        _2273 = (((((_2328 * _2096) + _799) * cbLight._m0[_2279].z) * _2347) * _2348) + _2207;
    }
    float _2383;
    float _2385;
    float _2387;
    if (_1997)
    {
        _2383 = _2269;
        _2385 = _2271;
        _2387 = _2273;
    }
    else
    {
        uint _2394 = _1902 + 3u;
        uint _2398 = _1902 + 11u;
        float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _635) * 0.949999988079071044921875);
        float _2413 = _2412 * _2412;
        float _2414 = cbLight._m0[_2394].x + _711;
        float _2415 = cbLight._m0[_2394].y + _712;
        float _2416 = cbLight._m0[_2394].z + _713;
        float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
        float _2421 = _2420 * _2414;
        float _2422 = _2420 * _2415;
        float _2423 = _2420 * _2416;
        float _2424 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2394].xyz));
        float _4399 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2428 = dot(vec3(_632, _633, _634), vec3(_2421, _2422, _2423));
        float _4410 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2432 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2421, _2422, _2423));
        float _4421 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2436 = _2413 * _2413;
        float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
        float _2447 = exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0);
        float _2454 = 1.0 - _2413;
        float _2464 = (0.5 / (((_2071 * ((_2427 * _2454) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2454) + _2413) * _2427))) * _2427;
        float _4432 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2466 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
        float _2467 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2383 = (((((_2447 * _2093) + _796) * cbLight._m0[_2398].x) * _2466) * _2467) + _2269;
        _2385 = (((((_2447 * _2095) + _798) * cbLight._m0[_2398].y) * _2466) * _2467) + _2271;
        _2387 = (((((_2447 * _2096) + _799) * cbLight._m0[_2398].z) * _2466) * _2467) + _2273;
    }
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    if (_1900.y == 0u)
    {
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2542;
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2542;
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2542;
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.x;
        uint _2569 = uint((float(_2557.y) * floor(float(uint(cbSceneParam._m0[85u].y * _733) / _2558))) + floor(float(uint(cbSceneParam._m0[85u].x * _732) / _2558)));
        float _2579 = (log2(_2545 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2580 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        uint _2583 = uint(isnan(14.0) ? _2580 : (isnan(_2580) ? 14.0 : min(_2580, 14.0)));
        uvec4 _2588 = texelFetch(g_lightClusterGridBuffer, int(((_2583 << 2u) + (_2569 << 6u)) >> 2u));
        uint _2589 = _2588.x;
        uint _2590 = _2557.z;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        if (((((1u << ((_2590 >> 4u) & 15u)) + 4294967295u) & _2589) == 0u) || ((_2590 & 240u) == 0u))
        {
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
        }
        else
        {
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            uint _2848 = 0u;
            uint _2857;
            bool _2858;
            for (;;)
            {
                _2857 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2848 << 2u)) >> 2u)).x;
                _2858 = _2857 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2858)
                {
                    frontier_phi_66_pred = _2842;
                    frontier_phi_66_pred_1 = _2847;
                    frontier_phi_66_pred_2 = _2846;
                    frontier_phi_66_pred_3 = _2845;
                    frontier_phi_66_pred_4 = _2844;
                    frontier_phi_66_pred_5 = _2843;
                }
                else
                {
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    uint _2993;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2857;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    for (;;)
                    {
                        uint _2997 = uint(findLSB(_2993)) + (_2848 << 5u);
                        uint _2994 = (_2993 + 4294967295u) & _2993;
                        uint _2999 = _2997 * 48u;
                        vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 3u)).x));
                        uint _3019 = (_2997 * 48u) + 4u;
                        vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 3u)).x));
                        uint _3038 = (_2997 * 48u) + 8u;
                        vec3 _3049 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x));
                        float _3053 = _3013.x - _2543;
                        float _3054 = _3013.y - _2544;
                        float _3055 = _3013.z - _2545;
                        float _3056 = dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055));
                        float _3059 = inversesqrt(_3056);
                        float _3060 = _3059 * _3053;
                        float _3061 = _3059 * _3054;
                        float _3062 = _3059 * _3055;
                        float _3063 = dot(vec3(_753, _756, _759), vec3(_3060, _3061, _3062));
                        float _3068 = 1.0 - (_3056 * _3013.w);
                        float _4458 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3070 = sqrt(_3056) * _3032.w;
                        float _3073 = 1.39999997615814208984375 / (_3070 + 1.39999997615814208984375);
                        float _3074 = _3073 * _3073;
                        float _3077 = ((1.0 - _3074) * _3063) + _3074;
                        float _3080 = _3070 * _3070;
                        float _3084 = ((isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))) * _3069) / ((_3080 * 0.699999988079071044921875) + 1.0);
                        float _3088 = (-0.0) - _2543;
                        float _3089 = (-0.0) - _2544;
                        float _3090 = (-0.0) - _2545;
                        float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                        float _3095 = _3094 * _3088;
                        float _3096 = _3094 * _3089;
                        float _3097 = _3094 * _3090;
                        float _3105 = exp2(log2(1.0 / ((_3080 * 3.5) + 5.0)) * 0.25);
                        float _3106 = 1.0 - _828;
                        float _3113 = sqrt(1.0 - ((1.0 - (_3106 * _3106)) * (1.0 - (_3105 * _3105))));
                        float _3114 = _3113 * _3113;
                        float _3115 = _3114 * _3114;
                        float _3116 = _3095 + _3060;
                        float _3117 = _3096 + _3061;
                        float _3118 = _3097 + _3062;
                        float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                        float _3126 = dot(vec3(_753, _756, _759), vec3(_3095, _3096, _3097));
                        float _4474 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3129 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3130 = dot(vec3(_753, _756, _759), vec3(_3122 * _3116, _3122 * _3117, _3122 * _3118));
                        float _4485 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3133 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3137 = ((_3133 * _3133) * (_3115 + (-1.0))) + 1.0;
                        float _3138 = _3073 * _3114;
                        float _3139 = _3138 * _3138;
                        float _3142 = ((1.0 - _3139) * _3063) + _3139;
                        float _4496 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3143 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3144 = 1.0 - _3114;
                        float _3154 = (0.5 / (((_3143 * ((_3129 * _3144) + _3114)) + 9.9999999392252902907785028219223e-09) + (((_3143 * _3144) + _3114) * _3129))) * _3143;
                        float _4507 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3165 = (((_3115 * 3.1415927410125732421875) * (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) / ((_3137 * _3137) * ((_3080 * 2.1991131305694580078125) + 3.141590118408203125))) * _3069;
                        _2917 = (_3084 * _3032.x) + _2990;
                        _2918 = (_3084 * _3032.y) + _2991;
                        _2919 = (_3084 * _3032.z) + _2992;
                        _2914 = (_3165 * _3049.x) + _2987;
                        _2915 = (_3165 * _3049.y) + _2988;
                        _2916 = (_3165 * _3049.z) + _2989;
                        if (_2994 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2987 = _2914;
                            _2988 = _2915;
                            _2989 = _2916;
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2994;
                        }
                    }
                    frontier_phi_66_pred = _2914;
                    frontier_phi_66_pred_1 = _2919;
                    frontier_phi_66_pred_2 = _2918;
                    frontier_phi_66_pred_3 = _2917;
                    frontier_phi_66_pred_4 = _2916;
                    frontier_phi_66_pred_5 = _2915;
                }
                _2691 = frontier_phi_66_pred;
                _2701 = frontier_phi_66_pred_1;
                _2699 = frontier_phi_66_pred_2;
                _2697 = frontier_phi_66_pred_3;
                _2695 = frontier_phi_66_pred_4;
                _2693 = frontier_phi_66_pred_5;
                uint _2849 = _2848 + 1u;
                if (_2849 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2842 = _2691;
                    _2843 = _2693;
                    _2844 = _2695;
                    _2845 = _2697;
                    _2846 = _2699;
                    _2847 = _2701;
                    _2848 = _2849;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
        }
        uvec4 _2704 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2705 = _2704.z;
        uint _2707 = (_2705 >> 8u) & 15u;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        if (((4294967295u << _2707) & _2589) == 0u)
        {
            _2810 = _2690;
            _2812 = _2692;
            _2814 = _2694;
            _2816 = _2696;
            _2818 = _2698;
            _2820 = _2700;
        }
        else
        {
            float _2835 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
            float _2836 = _2835 * _2543;
            float _2837 = _2835 * _2544;
            float _2838 = _2835 * _2545;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2707 < ((_2705 >> 12u) & 15u))
            {
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2970 = _2690;
                float _2971 = _2692;
                float _2972 = _2694;
                float _2973 = _2696;
                float _2974 = _2698;
                float _2975 = _2700;
                uint _2976 = _2707;
                uint _2985;
                bool _2986;
                for (;;)
                {
                    _2985 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2976 << 2u)) >> 2u)).x;
                    _2986 = _2985 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2986)
                    {
                        frontier_phi_77_pred = _2975;
                        frontier_phi_77_pred_1 = _2974;
                        frontier_phi_77_pred_2 = _2973;
                        frontier_phi_77_pred_3 = _2972;
                        frontier_phi_77_pred_4 = _2971;
                        frontier_phi_77_pred_5 = _2970;
                    }
                    else
                    {
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3192 = _2970;
                        float _3193 = _2971;
                        float _3194 = _2972;
                        float _3195 = _2973;
                        float _3196 = _2974;
                        float _3197 = _2975;
                        uint _3198 = _2985;
                        uint _3199;
                        vec4 _3224;
                        float _3225;
                        vec4 _3240;
                        vec3 _3252;
                        vec4 _3268;
                        vec4 _3283;
                        float _3329;
                        bool _3330;
                        for (;;)
                        {
                            uint _3209 = ((_2976 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3198));
                            _3199 = (_3198 + 4294967295u) & _3198;
                            uint _3211 = _3209 * 40u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            _3225 = _3224.w;
                            uint _3227 = (_3209 * 40u) + 4u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3209 * 40u) + 8u;
                            _3252 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x));
                            uint _3255 = (_3209 * 40u) + 16u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3270 = (_3209 * 40u) + 20u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3209 * 40u) + 24u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3304 = (_3209 * 40u) + 28u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3329 = fma(_2545, _3317.z, fma(_2544, _3317.y, _3317.x * _2543)) + _3317.w;
                            _3330 = !((fma(_2545, _3298.z, fma(_2544, _3298.y, _3298.x * _2543)) + _3298.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3330)
                            {
                                float _3357 = _3224.x - _2543;
                                float _3358 = _3224.y - _2544;
                                float _3359 = _3224.z - _2545;
                                float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                                float _3363 = inversesqrt(_3360);
                                float _3364 = _3363 * _3357;
                                float _3365 = _3363 * _3358;
                                float _3366 = _3363 * _3359;
                                float _3370 = 1.0 - (_3360 / (_3225 * _3225));
                                float _4518 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3375 = sqrt(_3360) * _3240.w;
                                float _3377 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                                float _3378 = _3377 * _3377;
                                float _3381 = ((1.0 - _3378) * dot(vec3(_3364, _3365, _3366), vec3(_753, _756, _759))) + _3378;
                                float _3384 = _3375 * _3375;
                                float _3388 = (fma(_2545, _3268.z, fma(_2544, _3268.y, _3268.x * _2543)) + _3268.w) / _3329;
                                float _3389 = (fma(_2545, _3283.z, fma(_2544, _3283.y, _3283.x * _2543)) + _3283.w) / _3329;
                                float _3393 = 1.0 - dot(vec2(_3388, _3389), vec2(_3388, _3389));
                                float _4534 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3395 = _3394 * (((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3371) / ((_3384 * 0.699999988079071044921875) + 1.0));
                                float _3407 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                                float _3408 = 1.0 - _828;
                                float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                                float _3416 = _3415 * _3415;
                                float _3417 = _3416 * _3416;
                                float _3418 = _3364 - _2836;
                                float _3419 = _3365 - _2837;
                                float _3420 = _3366 - _2838;
                                float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                                float _3428 = dot(vec3(_753, _756, _759), vec3((-0.0) - _2836, (-0.0) - _2837, (-0.0) - _2838));
                                float _4545 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3432 = dot(vec3(_753, _756, _759), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                                float _4556 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                                float _3440 = _3377 * _3416;
                                float _3441 = _3440 * _3440;
                                float _3447 = ((1.0 - _3441) * dot(vec3(_753, _756, _759), vec3(_3364, _3365, _3366))) + _3441;
                                float _4567 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3449 = 1.0 - _3416;
                                float _3459 = (0.5 / (((_3448 * ((_3431 * _3449) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3416) * _3431))) * _3448;
                                float _4578 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3469 = (_3394 * _3371) * (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) / ((_3439 * _3439) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3395 * _3240.y;
                                frontier_phi_83_pred_1 = _3395 * _3240.x;
                                frontier_phi_83_pred_2 = _3469 * _3252.z;
                                frontier_phi_83_pred_3 = _3469 * _3252.y;
                                frontier_phi_83_pred_4 = _3469 * _3252.x;
                                frontier_phi_83_pred_5 = _3395 * _3240.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3477 = frontier_phi_83_pred;
                            _3476 = frontier_phi_83_pred_1;
                            _3475 = frontier_phi_83_pred_2;
                            _3474 = frontier_phi_83_pred_3;
                            _3473 = frontier_phi_83_pred_4;
                            _3478 = frontier_phi_83_pred_5;
                            _3182 = _3476 + _3195;
                            _3183 = _3477 + _3196;
                            _3184 = _3478 + _3197;
                            _3179 = _3473 + _3192;
                            _3180 = _3474 + _3193;
                            _3181 = _3475 + _3194;
                            if (_3199 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3199;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3184;
                        frontier_phi_77_pred_1 = _3183;
                        frontier_phi_77_pred_2 = _3182;
                        frontier_phi_77_pred_3 = _3181;
                        frontier_phi_77_pred_4 = _3180;
                        frontier_phi_77_pred_5 = _3179;
                    }
                    _2821 = frontier_phi_77_pred;
                    _2819 = frontier_phi_77_pred_1;
                    _2817 = frontier_phi_77_pred_2;
                    _2815 = frontier_phi_77_pred_3;
                    _2813 = frontier_phi_77_pred_4;
                    _2811 = frontier_phi_77_pred_5;
                    uint _2977 = _2976 + 1u;
                    if (_2977 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2970 = _2811;
                        _2971 = _2813;
                        _2972 = _2815;
                        _2973 = _2817;
                        _2974 = _2819;
                        _2975 = _2821;
                        _2976 = _2977;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2815;
                frontier_phi_58_59_ladder_1 = _2821;
                frontier_phi_58_59_ladder_2 = _2819;
                frontier_phi_58_59_ladder_3 = _2817;
                frontier_phi_58_59_ladder_4 = _2813;
                frontier_phi_58_59_ladder_5 = _2811;
            }
            else
            {
                frontier_phi_58_59_ladder = _2694;
                frontier_phi_58_59_ladder_1 = _2700;
                frontier_phi_58_59_ladder_2 = _2698;
                frontier_phi_58_59_ladder_3 = _2696;
                frontier_phi_58_59_ladder_4 = _2692;
                frontier_phi_58_59_ladder_5 = _2690;
            }
            _2810 = frontier_phi_58_59_ladder_5;
            _2812 = frontier_phi_58_59_ladder_4;
            _2814 = frontier_phi_58_59_ladder;
            _2816 = frontier_phi_58_59_ladder_3;
            _2818 = frontier_phi_58_59_ladder_2;
            _2820 = frontier_phi_58_59_ladder_1;
        }
        float _2825 = isnan(1.0) ? _812 : (isnan(_812) ? 1.0 : min(_812, 1.0));
        _2602 = (_2825 * _2816) + _2035;
        _2604 = (_2825 * _2818) + _2037;
        _2606 = (_2825 * _2820) + _2039;
        _2608 = ((_2810 * _796) * _2825) + _2383;
        _2610 = ((_2812 * _798) * _2825) + _2385;
        _2612 = ((_2814 * _799) * _2825) + _2387;
    }
    else
    {
        _2602 = _2035;
        _2604 = _2037;
        _2606 = _2039;
        _2608 = _2383;
        _2610 = _2385;
        _2612 = _2387;
    }
    float _4594 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4605 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4616 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _2629 = ((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2602 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _812))) + ((_2608 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1651)) * cbPerFrame._m0[3u].x);
    float _2630 = ((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2604 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _812))) + ((_2610 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1651)) * cbPerFrame._m0[3u].x);
    float _2631 = ((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2606 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _812))) + ((_2612 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1651)) * cbPerFrame._m0[3u].x);
    uint _2632 = _245 + 6u;
    float _2640 = _732 / cbSceneParam._m0[86u].x;
    float _2641 = _733 / cbSceneParam._m0[86u].y;
    vec4 _2655 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, (log2((isnan(cbSceneParam._m0[77u].w) ? _654 : (isnan(_654) ? cbSceneParam._m0[77u].w : min(_654, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2657 = _2655.x;
    float _2658 = _2655.y;
    float _2659 = _2655.z;
    float _2660 = _2655.w;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    if (_654 > cbSceneParam._m0[78u].w)
    {
        float _2715 = isnan(_654) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _654 : min(cbSceneParam._m0[80u].w, _654));
        float _2716 = _2715 / _654;
        float _2727 = _2716 * _704;
        float _2728 = _705 * _2716;
        float _2729 = (-0.0) - _2728;
        float _2730 = _2716 * _706;
        float _2732 = (cbSceneParam._m0[77u].w * _2729) / _2715;
        float _2733 = _2732 + cbSceneParam._m0[79u].w;
        float _2734 = cbSceneParam._m0[79u].w - _2728;
        float _2740 = sqrt(((_2727 * _2727) + (_2728 * _2728)) + (_2730 * _2730));
        float _2743 = (1.0 - (cbSceneParam._m0[77u].w / _2715)) * _2740;
        float _2748 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2750 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2927;
        if (abs((_2729 - _2732) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2927 = ((((_2733 > 0.0) ? exp2(_2748 * _2733) : (2.0 - exp2(_2750 * _2733))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2743;
        }
        else
        {
            float _2871 = 1.0 / cbSceneParam._m0[80u].x;
            float _2872 = isnan(_2734) ? _2733 : (isnan(_2733) ? _2734 : max(_2733, _2734));
            float _2873 = isnan(_2734) ? _2733 : (isnan(_2733) ? _2734 : min(_2733, _2734));
            float _2882 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : min(_2872, 0.0));
            float _2883 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : min(_2873, 0.0));
            _2927 = ((abs(_2740 / _2729) * cbSceneParam._m0[80u].y) * ((((_2882 - _2883) * 2.0) - ((exp2(_2748 * (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0)))) - exp2(_2748 * (isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))))) * _2871)) - ((exp2(_2750 * _2882) - exp2(_2750 * _2883)) * _2871))) + (_2743 * cbSceneParam._m0[80u].z);
        }
        vec4 _2929 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, 1.0), 0.0);
        float _2938 = exp2((_2927 * (-1.44269502162933349609375)) * (1.0 - _2929.w));
        float _2939 = log2(_2938);
        float _2955 = log2(_2660);
        _2752 = (exp2(_2955 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].x)) * _2929.x) / cbSceneParam._m0[78u].x)) + _2657;
        _2754 = (exp2(_2955 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].y)) * _2929.y) / cbSceneParam._m0[78u].y)) + _2658;
        _2756 = (exp2(_2955 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].z)) * _2929.z) / cbSceneParam._m0[78u].z)) + _2659;
        _2758 = _2938 * _2660;
    }
    else
    {
        _2752 = _2657;
        _2754 = _2658;
        _2756 = _2659;
        _2758 = _2660;
    }
    bool _2965;
    vec4 _2768;
    vec4 _2790;
    float _2792;
    float _2796;
    float _2797;
    float _2798;
    float _2799;
    bool _2809;
    for (;;)
    {
        _2768 = cbMatDynParam._m0[0u];
        float _2770 = roundEven(_2768.y);
        bool _2771 = _2770 == 3.0;
        float _2772 = log2(_2758);
        float _2779 = exp2(_2772 * cbSceneParam._m0[78u].x) * _2629;
        float _2780 = exp2(_2772 * cbSceneParam._m0[78u].y) * _2630;
        float _2781 = exp2(_2772 * cbSceneParam._m0[78u].z) * _2631;
        float _2788 = _720 + (-0.5);
        _2790 = cbMtdParam._m0[1u];
        _2792 = _2790.y * _2788;
        float _2795 = (_2770 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2796 = _2795 * (_2771 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2752)));
        _2797 = _2795 * (_2771 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2754)));
        _2798 = _2795 * (_2771 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2756)));
        _2799 = _2788 * 0.999000012874603271484375;
        _2809 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2809)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _2799) < 0.5)
            {
                _2965 = true;
                break;
            }
        }
        uint _2906 = _772 + uint(_2768.w);
        if ((cbInstanceData._m0[_2906].w < 1.0) && ((cbInstanceData._m0[_2906].w + _2799) < 0.5))
        {
            _2965 = true;
            break;
        }
        if ((_2792 + 1.0) < _2790.x)
        {
            _2965 = true;
            break;
        }
        _2965 = false;
        break;
    }
    float _3170;
    if (_2965)
    {
        discard_state = true;
        _3170 = 0.0;
    }
    else
    {
        _3170 = cbInstanceData._m0[_2632].w;
    }
    SV_Target.x = _2796;
    SV_Target.y = _2797;
    SV_Target.z = _2798;
    SV_Target.w = _3170;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2632].w;
    discard_exit();
}


