#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1506;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3832 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3843 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3854 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[24u].y) + _421) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3865 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _446 = (_439 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _447 = (_439 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _448 = (_439 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[24u].y) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3876 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _519 = (_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446;
    float _520 = (_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447;
    float _521 = (_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448;
    float _525 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _519;
    float _528 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _520;
    float _531 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _521;
    float _538 = ((_519 - _525) * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) + _525;
    float _539 = ((_520 - _528) * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) + _528;
    float _540 = ((_521 - _531) * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) + _531;
    vec4 _557 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _599 = _597.x;
    float _600 = _597.y;
    float _601 = _597.z;
    float _608 = ((_580.x - _599) * _439) + _599;
    float _609 = ((_580.y - _600) * _439) + _600;
    float _610 = ((_580.z - _601) * _439) + _601;
    vec4 _622 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _635 = ((_622.z - _610) * _512) + _610;
    float _638 = ((((_622.x - _608) * _512) + _608) * 2.0) + (-1.0);
    float _639 = ((((_622.y - _609) * _512) + _609) * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3887 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _645 = sqrt(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))));
    vec4 _659 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _684 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _686 = _684.x;
    float _687 = 1.0 - _686;
    float _693 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _696 = ((isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : min(_693, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _705 = (_696 - ((((((_686 - _687) * cbMtdParam._m0[24u].z) + _687) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _696))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3908 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _706 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _713 = (_706 * (cbMtdParam._m0[17u].x - _538)) + _538;
    float _714 = (_706 * (cbMtdParam._m0[17u].y - _539)) + _539;
    float _715 = (_706 * (cbMtdParam._m0[17u].z - _540)) + _540;
    vec4 _727 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _729 = _727.x;
    float _730 = 1.0 - _729;
    float _755 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_729 - _730) * cbMtdParam._m0[24u].w) + _730) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3919 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _756 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _764 = ((((cbMtdParam._m0[10u].x - _713) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _756) + _713;
    float _765 = ((((cbMtdParam._m0[10u].y - _714) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _756) + _714;
    float _766 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _715)) * _756) + _715;
    vec4 _792 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _794 = _792.x;
    float _812 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _794) * _439) + _794;
    float _829 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _306) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _307) + cbTextureTilingScale._m0[21u].w)).x - _812) * _512) + _812;
    float _833 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _829) * cbMtdParam._m0[19u].z) + _829;
    float _835 = _833 - (_833 * _706);
    float _837 = _835 - (_835 * _756);
    float _842 = (((_557.z - _635) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _635;
    float _846 = ((_659.z - _842) * cbMtdParam._m0[19u].w) + _842;
    vec4 _860 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _867 = (_860.x * 2.0) + (-1.0);
    float _868 = (_860.y * 2.0) + (-1.0);
    float _869 = dot(vec2(_867, _868), vec2(_867, _868));
    float _3930 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _877 = (_706 * (_860.z - _846)) + _846;
    float _880 = ((cbMtdParam._m0[23u].y - _877) * _756) + _877;
    vec4 _901 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _907 = (_901.x * 2.0) + (-1.0);
    float _908 = (_901.y * 2.0) + (-1.0);
    float _909 = dot(vec2(_907, _908), vec2(_907, _908));
    float _3941 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _923 = (_638 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_557.x * 2.0) + (-1.0)))) + (((_659.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _924 = (_639 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_557.y * 2.0) + (-1.0)))) + (((_659.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _936 = (((_867 - _923) + (cbMtdParam._m0[21u].x * _923)) * _706) + _923;
    float _937 = (((_868 - _924) + (cbMtdParam._m0[21u].x * _924)) * _706) + _924;
    float _938 = (_706 * (sqrt(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) - _645)) + _645;
    float _949 = (((_907 - _936) + (_936 * cbMtdParam._m0[22u].z)) * _756) + _936;
    float _950 = (((_908 - _937) + (_937 * cbMtdParam._m0[22u].z)) * _756) + _937;
    float _951 = ((sqrt(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) - _938) * _756) + _938;
    float _953 = cbMtdParam._m0[22u].x + _659.w;
    float _956 = fma(_951, _255 * NORMAL.x, fma(_950, _262 * TANGENT.x, (_248 * _240) * _949));
    float _959 = fma(_951, _255 * NORMAL.y, fma(_950, _262 * TANGENT.y, (_248 * _241) * _949));
    float _962 = fma(_951, _255 * NORMAL.z, fma(_950, _262 * TANGENT.z, (_248 * _242) * _949));
    float _966 = inversesqrt(dot(vec3(_956, _959, _962), vec3(_956, _959, _962)));
    float _967 = _966 * _956;
    float _968 = _966 * _959;
    float _969 = _966 * _962;
    float _3952 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _970 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _3974 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _3985 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _3996 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4007 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _975 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _989 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1039 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1029);
    float _1040 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1029);
    float _1041 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1029);
    float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
    float _1046 = _1039 * _1045;
    float _1047 = _1040 * _1045;
    float _1048 = _1041 * _1045;
    float _1054 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1055 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1073 = fma(_969, cbSceneParam._m0[5u].z, fma(_968, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _967));
    float _1076 = fma(_969, cbSceneParam._m0[6u].z, fma(_968, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _967));
    float _1079 = fma(_969, cbSceneParam._m0[7u].z, fma(_968, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _967));
    uint _1093 = (_287 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1099 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_1093].x;
    float _1100 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * cbInstanceData._m0[_1093].y;
    float _1101 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * cbInstanceData._m0[_1093].z;
    float _4018 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _1105 = 1.0 - _975;
    float _1106 = _1102 * _1105;
    float _1107 = _1103 * _1105;
    float _1108 = _1104 * _1105;
    float _1113 = (_1102 + (-0.039999999105930328369140625)) * _975;
    float _1114 = (_1103 + (-0.039999999105930328369140625)) * _975;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _975;
    float _1116 = _1113 + 0.039999999105930328369140625;
    float _1118 = _1114 + 0.039999999105930328369140625;
    float _1119 = _1115 + 0.039999999105930328369140625;
    vec4 _1128 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1054, cbSceneParam._m0[86u].y * _1055));
    float _1132 = ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * TEXCOORD_5.w) * _1128.x;
    float _1133 = dot(vec3(_967, _968, _969), vec3(_1046, _1047, _1048));
    float _1136 = _1133 * 2.0;
    float _1140 = (_1136 * _967) - _1046;
    float _1141 = (_1136 * _968) - _1047;
    float _1142 = (_1136 * _969) - _1048;
    float _1146 = abs(dot(vec3(_1046, _1047, _1048), vec3(_967, _968, _969)));
    float _4051 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = sqrt(_970);
    float _1161 = exp2((_1148 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1148 * 3.0));
    float _1167 = (1.0 - _1161) * ((_1148 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1168 = _1161 * _1148;
    float _1196 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1204 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1505;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1230 = fma(_1204, cbModelParam._m0[26u].z, fma(_1200, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1196));
        float _1234 = fma(_1204, cbModelParam._m0[27u].z, fma(_1200, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1196));
        float _1238 = fma(_1204, cbModelParam._m0[28u].z, fma(_1200, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1196));
        float _1263 = _1196 + _967;
        float _1264 = _1200 + _968;
        float _1265 = _1204 + _969;
        float _1275 = fma(_1265, cbModelParam._m0[26u].z, fma(_1264, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1263)) - _1230;
        float _1276 = fma(_1265, cbModelParam._m0[27u].z, fma(_1264, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1263)) - _1234;
        float _1277 = fma(_1265, cbModelParam._m0[28u].z, fma(_1264, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1263)) - _1238;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1294 = ((_1281 * _1275) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1230 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1281 * _1276) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1234 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1281 * _1277) / cbModelParam._m0[34u].z) + ((((((_1238 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        float _1333 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1299.x + (-0.5));
        float _1335 = _1333 * (_1299.y + (-0.5));
        float _1336 = _1333 * (_1299.z + (-0.5));
        float _1343 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1306.x + (-0.5));
        float _1345 = _1343 * (_1306.y + (-0.5));
        float _1346 = _1343 * (_1306.z + (-0.5));
        float _1353 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1313.x + (-0.5));
        float _1355 = _1353 * (_1313.y + (-0.5));
        float _1356 = _1353 * (_1313.z + (-0.5));
        float _1363 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1320.x + (-0.5));
        float _1365 = _1363 * (_1320.y + (-0.5));
        float _1366 = _1363 * (_1320.z + (-0.5));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = _1334 * 0.5;
        float _1371 = _1344 * 0.5;
        float _1372 = _1354 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1387 = (dot(vec3(_967, _968, _969), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1397 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4099 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1399 + 1.0))) + _1404) * _1367;
        float _1414 = _1335 * 0.5;
        float _1415 = _1345 * 0.5;
        float _1416 = _1355 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_967, _968, _969), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4132 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1441 + 1.0))) + _1446) * _1368;
        float _1456 = _1336 * 0.5;
        float _1457 = _1346 * 0.5;
        float _1458 = _1356 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_967, _968, _969), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4165 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1483 + 1.0))) + _1488) * _1369;
        _1505 = _1336;
        _1507 = _1335;
        _1508 = _1334;
        _1509 = _1346;
        _1510 = _1345;
        _1511 = _1344;
        _1512 = _1356;
        _1513 = _1355;
        _1514 = _1354;
        _1515 = _1369;
        _1516 = _1368;
        _1517 = _1367;
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1506;
        _1507 = _1506;
        _1508 = _1506;
        _1509 = _1506;
        _1510 = _1506;
        _1511 = _1506;
        _1512 = _1506;
        _1513 = _1506;
        _1514 = _1506;
        _1515 = _1506;
        _1516 = _1506;
        _1517 = _1506;
        _1518 = 0.0;
        _1519 = 0.0;
        _1520 = 0.0;
    }
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1544 = fma(_1204, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1196));
        float _1548 = fma(_1204, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1196));
        float _1552 = fma(_1204, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1196));
        float _1575 = _1196 + _967;
        float _1576 = _1200 + _968;
        float _1577 = _1204 + _969;
        float _1587 = fma(_1577, cbModelParam._m0[30u].z, fma(_1576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1575)) - _1544;
        float _1588 = fma(_1577, cbModelParam._m0[31u].z, fma(_1576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1575)) - _1548;
        float _1589 = fma(_1577, cbModelParam._m0[32u].z, fma(_1576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1575)) - _1552;
        float _1593 = inversesqrt(dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589)));
        float _1606 = ((_1593 * _1587) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1544 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1607 = ((_1593 * _1588) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1548 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1593 * _1589) / cbModelParam._m0[35u].z) + ((((((_1552 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1624 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        float _1643 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1610.x + (-0.5));
        float _1645 = _1643 * (_1610.y + (-0.5));
        float _1646 = _1643 * (_1610.z + (-0.5));
        float _1653 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1617.x + (-0.5));
        float _1655 = _1653 * (_1617.y + (-0.5));
        float _1656 = _1653 * (_1617.z + (-0.5));
        float _1663 = exp2((_1624.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1624.x + (-0.5));
        float _1665 = _1663 * (_1624.y + (-0.5));
        float _1666 = _1663 * (_1624.z + (-0.5));
        float _1673 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1631.x + (-0.5));
        float _1675 = _1673 * (_1631.y + (-0.5));
        float _1676 = _1673 * (_1631.z + (-0.5));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = _1644 * 0.5;
        float _1681 = _1654 * 0.5;
        float _1682 = _1664 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_967, _968, _969), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4228 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1707 + 1.0))) + _1712) * _1677;
        float _1722 = _1645 * 0.5;
        float _1723 = _1655 * 0.5;
        float _1724 = _1665 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_967, _968, _969), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4261 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1749 + 1.0))) + _1754) * _1678;
        float _1764 = _1646 * 0.5;
        float _1765 = _1656 * 0.5;
        float _1766 = _1666 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1780 = (dot(vec3(_967, _968, _969), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1791 = _1790 * 2.0;
        float _1795 = (1.0 - _1790) / (_1790 + 1.0);
        float _4294 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1805 = ((((1.0 - _1796) * (_1791 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1791 + 1.0))) + _1796) * _1679;
        _1813 = _1646;
        _1814 = _1645;
        _1815 = _1644;
        _1816 = _1656;
        _1817 = _1655;
        _1818 = _1654;
        _1819 = _1666;
        _1820 = _1665;
        _1821 = _1664;
        _1822 = _1679;
        _1823 = _1678;
        _1824 = _1677;
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
    }
    else
    {
        _1813 = _1506;
        _1814 = _1506;
        _1815 = _1506;
        _1816 = _1506;
        _1817 = _1506;
        _1818 = _1506;
        _1819 = _1506;
        _1820 = _1506;
        _1821 = _1506;
        _1822 = _1506;
        _1823 = _1506;
        _1824 = _1506;
        _1825 = 0.0;
        _1826 = 0.0;
        _1827 = 0.0;
    }
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1518)) + _1518;
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1519)) + _1519;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1520)) + _1520;
    float _1860 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1838, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1863 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1838, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1866 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1838, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1837));
    float _1881 = _1140 * 0.5;
    float _1882 = _1141 * 0.5;
    float _1883 = _1142 * 0.5;
    float _1884 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1887 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1890 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1924;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1897 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1505, _1509, _1512, _1515));
        float _1901 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1507, _1510, _1513, _1516));
        float _1905 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1508, _1511, _1514, _1517));
        float _1912 = dot(vec4(cbModelParam._m0[39u]), vec4(_1881, _1882, _1883, 1.0));
        _1924 = dot(vec3(isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1924 = 1.0;
    }
    float _1935;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1926 = dot(vec4(cbModelParam._m0[40u]), vec4(_1881, _1882, _1883, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1926) ? 0.0 : (isnan(0.0) ? _1926 : max(0.0, _1926))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1939 = (_1935 * cbModelParam._m0[1u].x) + (_1924 * (1.0 - cbModelParam._m0[1u].x));
    float _1949 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _970);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1949 : min(cbModelParam._m0[25u].z, _1949));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1998 = fma(_1204, cbModelParam._m0[13u].z, fma(_1200, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1196)) + cbModelParam._m0[13u].w;
        float _2002 = fma(_1204, cbModelParam._m0[14u].z, fma(_1200, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1196)) + cbModelParam._m0[14u].w;
        float _2006 = fma(_1204, cbModelParam._m0[15u].z, fma(_1200, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1196)) + cbModelParam._m0[15u].w;
        float _2009 = fma(_1142, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140));
        float _2012 = fma(_1142, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140));
        float _2015 = fma(_1142, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140));
        float _2043;
        if (_2009 > 0.0)
        {
            _2043 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2043 = frontier_phi_14_12_ladder;
        }
        float _2246;
        if (_2012 > 0.0)
        {
            _2246 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2246 = frontier_phi_23_19_ladder;
        }
        float _2500;
        if (_2015 > 0.0)
        {
            _2500 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2500 = frontier_phi_35_30_ladder;
        }
        float _2502 = isnan(_2246) ? _2043 : (isnan(_2043) ? _2246 : min(_2043, _2246));
        float _2503 = isnan(_2500) ? _2502 : (isnan(_2502) ? _2500 : min(_2502, _2500));
        float _2507 = (_2503 * _2009) + _1998;
        float _2508 = (_2503 * _2012) + _2002;
        float _2509 = (_2503 * _2015) + _2006;
        float _2510 = _2503 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2510;
        float _2514 = _2510 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 > _2514) || ((_2508 < _2512) || ((_2507 < _2512) || (_2507 > _2514))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2509, cbModelParam._m0[9u].z, fma(_2508, cbModelParam._m0[9u].y, _2507 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2509, cbModelParam._m0[10u].z, fma(_2508, cbModelParam._m0[10u].y, _2507 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2509, cbModelParam._m0[11u].z, fma(_2508, cbModelParam._m0[11u].y, _2507 * cbModelParam._m0[11u].x))), _1950);
            frontier_phi_13_35_ladder = _2637.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2637.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2637.x * cbModelParam._m0[1u].y;
        }
        _2031 = frontier_phi_13_35_ladder_2;
        _2033 = frontier_phi_13_35_ladder_1;
        _2035 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1140, _1141, _1142), _1950);
        _2031 = _2019.x * cbModelParam._m0[1u].y;
        _2033 = _2019.y * cbModelParam._m0[1u].y;
        _2035 = _2019.z * cbModelParam._m0[1u].y;
    }
    float _2039 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _970);
    float _2040 = isnan(_2039) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2039 : min(cbModelParam._m0[25u].w, _2039));
    float _2130;
    float _2132;
    float _2134;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2094 = fma(_1204, cbModelParam._m0[21u].z, fma(_1200, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1196)) + cbModelParam._m0[21u].w;
        float _2098 = fma(_1204, cbModelParam._m0[22u].z, fma(_1200, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1196)) + cbModelParam._m0[22u].w;
        float _2102 = fma(_1204, cbModelParam._m0[23u].z, fma(_1200, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1196)) + cbModelParam._m0[23u].w;
        float _2105 = fma(_1142, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140));
        float _2108 = fma(_1142, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140));
        float _2111 = fma(_1142, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140));
        float _2251;
        if (_2105 > 0.0)
        {
            _2251 = abs((1.0 - _2094) / _2105);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2094 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2251 = frontier_phi_25_21_ladder;
        }
        float _2527;
        if (_2108 > 0.0)
        {
            _2527 = abs((1.0 - _2098) / _2108);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2098 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2527 = frontier_phi_37_32_ladder;
        }
        float _2740;
        if (_2111 > 0.0)
        {
            _2740 = abs((1.0 - _2102) / _2111);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2102 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2740 = frontier_phi_46_43_ladder;
        }
        float _2742 = isnan(_2527) ? _2251 : (isnan(_2251) ? _2527 : min(_2251, _2527));
        float _2743 = isnan(_2740) ? _2742 : (isnan(_2742) ? _2740 : min(_2742, _2740));
        float _2747 = (_2743 * _2105) + _2094;
        float _2748 = (_2743 * _2108) + _2098;
        float _2749 = (_2743 * _2111) + _2102;
        float _2750 = _2743 * 9.9999997473787516355514526367188e-05;
        float _2751 = (-1.0) - _2750;
        float _2753 = _2750 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2749 > _2753) || ((_2749 < _2751) || ((_2748 > _2753) || ((_2748 < _2751) || ((_2747 < _2751) || (_2747 > _2753))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2948 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2749, cbModelParam._m0[17u].z, fma(_2748, cbModelParam._m0[17u].y, _2747 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2749, cbModelParam._m0[18u].z, fma(_2748, cbModelParam._m0[18u].y, _2747 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2749, cbModelParam._m0[19u].z, fma(_2748, cbModelParam._m0[19u].y, _2747 * cbModelParam._m0[19u].x))), _2040);
            frontier_phi_22_46_ladder = _2948.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2948.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2948.x * cbModelParam._m0[1u].z;
        }
        _2130 = frontier_phi_22_46_ladder_2;
        _2132 = frontier_phi_22_46_ladder_1;
        _2134 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2114 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1140, _1141, _1142), _2040);
        _2130 = _2114.x * cbModelParam._m0[1u].z;
        _2132 = _2114.y * cbModelParam._m0[1u].z;
        _2134 = _2114.z * cbModelParam._m0[1u].z;
    }
    float _2147 = (((_1167 * _1116) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2130 - _2031)) + _2031);
    float _2149 = (((_1167 * _1118) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2132 - _2033)) + _2033);
    float _2151 = (((_1167 * _1119) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2134 - _2035)) + _2035);
    float _2154 = fma(_2151, cbSceneParam._m0[89u].z, fma(_2149, cbSceneParam._m0[89u].y, _2147 * cbSceneParam._m0[89u].x));
    float _2157 = fma(_2151, cbSceneParam._m0[90u].z, fma(_2149, cbSceneParam._m0[90u].y, _2147 * cbSceneParam._m0[90u].x));
    float _2160 = fma(_2151, cbSceneParam._m0[91u].z, fma(_2149, cbSceneParam._m0[91u].y, _2147 * cbSceneParam._m0[91u].x));
    uvec4 _2170 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2172 = _2170.x * 14u;
    uint _2173 = _2172 + 13u;
    float _2180 = _1132 + (-1.0);
    float _2185 = (cbLight._m0[_2173].x * _2180) + 1.0;
    float _2186 = (cbLight._m0[_2173].y * _2180) + 1.0;
    float _2187 = (cbLight._m0[_2173].z * _2180) + 1.0;
    float _2188 = (cbLight._m0[_2173].w * _2180) + 1.0;
    uint _2189 = _2172 + 5u;
    float _2195 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
    uint _2199 = _2172 + 4u;
    float _2205 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
    uint _2209 = _2172 | 1u;
    float _2220 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_967, _968, _969));
    float _2223 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_967, _968, _969));
    float _4430 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _4441 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2228 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * 0.3183098733425140380859375;
    float _2230 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * 0.3183098733425140380859375;
    float _2237 = ((cbLight._m0[_2189].x * _2195) * _2230) + ((cbLight._m0[_2199].x * _2205) * _2228);
    float _2238 = ((_2195 * cbLight._m0[_2189].y) * _2230) + ((_2205 * cbLight._m0[_2199].y) * _2228);
    float _2239 = ((_2195 * cbLight._m0[_2189].z) * _2230) + ((_2205 * cbLight._m0[_2199].z) * _2228);
    uvec4 _2243 = floatBitsToUint(cbLight._m0[_2172 + 12u]);
    bool _2245 = _2243.x == 0u;
    float _2256;
    float _2258;
    float _2260;
    if (_2245)
    {
        _2256 = _2237;
        _2258 = _2238;
        _2260 = _2239;
    }
    else
    {
        uint _2264 = _2172 + 6u;
        float _2280 = (dot(vec3(cbLight._m0[_2172 + 2u].xyz), vec3(_967, _968, _969)) * 0.5) + 0.5;
        float _2281 = _2280 * _2280;
        float _4452 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2282 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2283 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2256 = (((cbLight._m0[_2264].x * 0.3183098733425140380859375) * _2282) * _2283) + _2237;
        _2258 = (((cbLight._m0[_2264].y * 0.3183098733425140380859375) * _2282) * _2283) + _2238;
        _2260 = (((cbLight._m0[_2264].z * 0.3183098733425140380859375) * _2282) * _2283) + _2239;
    }
    bool _2263 = _2243.y == 0u;
    float _2301;
    float _2303;
    float _2305;
    if (_2263)
    {
        _2301 = _2256;
        _2303 = _2258;
        _2305 = _2260;
    }
    else
    {
        uint _2471 = _2172 + 7u;
        float _2487 = (dot(vec3(cbLight._m0[_2172 + 3u].xyz), vec3(_967, _968, _969)) * 0.5) + 0.5;
        float _2488 = _2487 * _2487;
        float _4468 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2489 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2490 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2301 = (((cbLight._m0[_2471].x * 0.3183098733425140380859375) * _2489) * _2490) + _2256;
        _2303 = (((cbLight._m0[_2471].y * 0.3183098733425140380859375) * _2489) * _2490) + _2258;
        _2305 = (((cbLight._m0[_2471].z * 0.3183098733425140380859375) * _2489) * _2490) + _2260;
    }
    uint _2308 = _2172 + 8u;
    float _2321 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _970) * 0.949999988079071044921875);
    float _2322 = _2321 * _2321;
    float _2323 = cbLight._m0[_2172].x + _1046;
    float _2324 = cbLight._m0[_2172].y + _1047;
    float _2325 = cbLight._m0[_2172].z + _1048;
    float _2329 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
    float _2330 = _2329 * _2323;
    float _2331 = _2329 * _2324;
    float _2332 = _2329 * _2325;
    float _2333 = dot(vec3(_967, _968, _969), vec3(cbLight._m0[_2172].xyz));
    float _4484 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _4495 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _2337 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2338 = dot(vec3(_967, _968, _969), vec3(_2330, _2331, _2332));
    float _4506 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2330, _2331, _2332));
    float _4517 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2322 * _2322;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0);
    float _2359 = 0.959999978542327880859375 - _1113;
    float _2361 = 0.959999978542327880859375 - _1114;
    float _2362 = 0.959999978542327880859375 - _1115;
    float _2369 = 1.0 - _2322;
    float _2380 = (0.5 / (((_2337 * ((_2336 * _2369) + _2322)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2369) + _2322) * _2336))) * _2336;
    float _4528 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2382 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    uint _2393 = _2172 + 9u;
    float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _970) * 0.949999988079071044921875);
    float _2405 = _2404 * _2404;
    float _2406 = cbLight._m0[_2209].x + _1046;
    float _2407 = cbLight._m0[_2209].y + _1047;
    float _2408 = cbLight._m0[_2209].z + _1048;
    float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
    float _2413 = _2412 * _2406;
    float _2414 = _2412 * _2407;
    float _2415 = _2412 * _2408;
    float _2416 = dot(vec3(_967, _968, _969), vec3(cbLight._m0[_2209].xyz));
    float _4539 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2419 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _2420 = dot(vec3(_967, _968, _969), vec3(_2413, _2414, _2415));
    float _4550 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2423 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2424 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2413, _2414, _2415));
    float _4561 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2428 = _2405 * _2405;
    float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
    float _2439 = exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0);
    float _2446 = 1.0 - _2405;
    float _2456 = (0.5 / (((_2337 * ((_2419 * _2446) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2446) + _2405) * _2419))) * _2419;
    float _4572 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2458 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
    float _2468 = (((((_2439 * _2359) + _1116) * cbLight._m0[_2393].x) * _2458) * _2195) + (((((_2358 * _2359) + _1116) * cbLight._m0[_2308].x) * _2382) * _2205);
    float _2469 = (((((_2439 * _2361) + _1118) * cbLight._m0[_2393].y) * _2458) * _2195) + (((((_2358 * _2361) + _1118) * cbLight._m0[_2308].y) * _2382) * _2205);
    float _2470 = (((((_2439 * _2362) + _1119) * cbLight._m0[_2393].z) * _2458) * _2195) + (((((_2358 * _2362) + _1119) * cbLight._m0[_2308].z) * _2382) * _2205);
    float _2532;
    float _2534;
    float _2536;
    if (_2245)
    {
        _2532 = _2468;
        _2534 = _2469;
        _2536 = _2470;
    }
    else
    {
        uint _2538 = _2172 + 2u;
        uint _2542 = _2172 + 10u;
        float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2538].w)) * _970) * 0.949999988079071044921875);
        float _2557 = _2556 * _2556;
        float _2558 = cbLight._m0[_2538].x + _1046;
        float _2559 = cbLight._m0[_2538].y + _1047;
        float _2560 = cbLight._m0[_2538].z + _1048;
        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
        float _2565 = _2564 * _2558;
        float _2566 = _2564 * _2559;
        float _2567 = _2564 * _2560;
        float _2568 = dot(vec3(_967, _968, _969), vec3(cbLight._m0[_2538].xyz));
        float _4583 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2572 = dot(vec3(_967, _968, _969), vec3(_2565, _2566, _2567));
        float _4594 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2576 = dot(vec3(cbLight._m0[_2538].xyz), vec3(_2565, _2566, _2567));
        float _4605 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2580 = _2557 * _2557;
        float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
        float _2591 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
        float _2598 = 1.0 - _2557;
        float _2608 = (0.5 / (((_2337 * ((_2571 * _2598) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2598) + _2557) * _2571))) * _2571;
        float _4616 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2610 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
        float _2611 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2532 = (((((_2591 * _2359) + _1116) * cbLight._m0[_2542].x) * _2610) * _2611) + _2468;
        _2534 = (((((_2591 * _2361) + _1118) * cbLight._m0[_2542].y) * _2610) * _2611) + _2469;
        _2536 = (((((_2591 * _2362) + _1119) * cbLight._m0[_2542].z) * _2610) * _2611) + _2470;
    }
    float _2646;
    float _2648;
    float _2650;
    if (_2263)
    {
        _2646 = _2532;
        _2648 = _2534;
        _2650 = _2536;
    }
    else
    {
        uint _2657 = _2172 + 3u;
        uint _2661 = _2172 + 11u;
        float _2675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2657].w)) * _970) * 0.949999988079071044921875);
        float _2676 = _2675 * _2675;
        float _2677 = cbLight._m0[_2657].x + _1046;
        float _2678 = cbLight._m0[_2657].y + _1047;
        float _2679 = cbLight._m0[_2657].z + _1048;
        float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
        float _2684 = _2683 * _2677;
        float _2685 = _2683 * _2678;
        float _2686 = _2683 * _2679;
        float _2687 = dot(vec3(_967, _968, _969), vec3(cbLight._m0[_2657].xyz));
        float _4632 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2690 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2691 = dot(vec3(_967, _968, _969), vec3(_2684, _2685, _2686));
        float _4643 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2695 = dot(vec3(cbLight._m0[_2657].xyz), vec3(_2684, _2685, _2686));
        float _4654 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2699 = _2676 * _2676;
        float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
        float _2710 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
        float _2717 = 1.0 - _2676;
        float _2727 = (0.5 / (((_2337 * ((_2690 * _2717) + _2676)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2717) + _2676) * _2690))) * _2690;
        float _4665 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2729 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
        float _2730 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2646 = (((((_2710 * _2359) + _1116) * cbLight._m0[_2661].x) * _2729) * _2730) + _2532;
        _2648 = (((((_2710 * _2361) + _1118) * cbLight._m0[_2661].y) * _2729) * _2730) + _2534;
        _2650 = (((((_2710 * _2362) + _1119) * cbLight._m0[_2661].z) * _2729) * _2730) + _2536;
    }
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    if (_2170.y == 0u)
    {
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2806 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2805;
        float _2807 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2805;
        float _2808 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2805;
        uvec4 _2820 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2821 = _2820.x;
        uint _2832 = uint((float(_2820.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1055) / _2821))) + floor(float(uint(cbSceneParam._m0[85u].x * _1054) / _2821)));
        float _2842 = (log2(_2808 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2843 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        uint _2846 = uint(isnan(14.0) ? _2843 : (isnan(_2843) ? 14.0 : min(_2843, 14.0)));
        uvec4 _2851 = texelFetch(g_lightClusterGridBuffer, int(((_2846 << 2u) + (_2832 << 6u)) >> 2u));
        uint _2852 = _2851.x;
        uint _2853 = _2820.z;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((((1u << ((_2853 >> 4u) & 15u)) + 4294967295u) & _2852) == 0u) || ((_2853 & 240u) == 0u))
        {
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
        }
        else
        {
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            uint _3104 = 0u;
            uint _3113;
            bool _3114;
            for (;;)
            {
                _3113 = texelFetch(g_lightClassification, int((((_2846 << 5u) + (_2832 << 9u)) + (_3104 << 2u)) >> 2u)).x;
                _3114 = _3113 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3114)
                {
                    frontier_phi_61_pred = _3098;
                    frontier_phi_61_pred_1 = _3103;
                    frontier_phi_61_pred_2 = _3102;
                    frontier_phi_61_pred_3 = _3101;
                    frontier_phi_61_pred_4 = _3100;
                    frontier_phi_61_pred_5 = _3099;
                }
                else
                {
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    uint _3228;
                    _3222 = _3098;
                    _3223 = _3099;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3113;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    for (;;)
                    {
                        uint _3232 = uint(findLSB(_3228)) + (_3104 << 5u);
                        uint _3229 = (_3228 + 4294967295u) & _3228;
                        uint _3234 = _3232 * 48u;
                        vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 3u)).x));
                        uint _3254 = (_3232 * 48u) + 4u;
                        vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 3u)).x));
                        uint _3273 = (_3232 * 48u) + 8u;
                        vec3 _3284 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x));
                        float _3288 = _3248.x - _2806;
                        float _3289 = _3248.y - _2807;
                        float _3290 = _3248.z - _2808;
                        float _3291 = dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290));
                        float _3294 = inversesqrt(_3291);
                        float _3295 = _3294 * _3288;
                        float _3296 = _3294 * _3289;
                        float _3297 = _3294 * _3290;
                        float _3298 = dot(vec3(_1073, _1076, _1079), vec3(_3295, _3296, _3297));
                        float _3303 = 1.0 - (_3291 * _3248.w);
                        float _4691 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3304 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3305 = sqrt(_3291) * _3267.w;
                        float _3308 = 1.39999997615814208984375 / (_3305 + 1.39999997615814208984375);
                        float _3309 = _3308 * _3308;
                        float _3312 = ((1.0 - _3309) * _3298) + _3309;
                        float _3315 = _3305 * _3305;
                        float _3319 = ((isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))) * _3304) / ((_3315 * 0.699999988079071044921875) + 1.0);
                        float _3323 = (-0.0) - _2806;
                        float _3324 = (-0.0) - _2807;
                        float _3325 = (-0.0) - _2808;
                        float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                        float _3330 = _3329 * _3323;
                        float _3331 = _3329 * _3324;
                        float _3332 = _3329 * _3325;
                        float _3340 = exp2(log2(1.0 / ((_3315 * 3.5) + 5.0)) * 0.25);
                        float _3341 = 1.0 - _1148;
                        float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                        float _3349 = _3348 * _3348;
                        float _3350 = _3349 * _3349;
                        float _3351 = _3330 + _3295;
                        float _3352 = _3331 + _3296;
                        float _3353 = _3332 + _3297;
                        float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                        float _3361 = dot(vec3(_1073, _1076, _1079), vec3(_3330, _3331, _3332));
                        float _4707 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3364 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                        float _3365 = dot(vec3(_1073, _1076, _1079), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                        float _4718 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                        float _3373 = _3308 * _3349;
                        float _3374 = _3373 * _3373;
                        float _3377 = ((1.0 - _3374) * _3298) + _3374;
                        float _4729 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3378 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3379 = 1.0 - _3349;
                        float _3389 = (0.5 / (((_3378 * ((_3364 * _3379) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3378 * _3379) + _3349) * _3364))) * _3378;
                        float _4740 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3400 = (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) / ((_3372 * _3372) * ((_3315 * 2.1991131305694580078125) + 3.141590118408203125))) * _3304;
                        _3157 = (_3319 * _3267.x) + _3225;
                        _3158 = (_3319 * _3267.y) + _3226;
                        _3159 = (_3319 * _3267.z) + _3227;
                        _3154 = (_3400 * _3284.x) + _3222;
                        _3155 = (_3400 * _3284.y) + _3223;
                        _3156 = (_3400 * _3284.z) + _3224;
                        if (_3229 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3222 = _3154;
                            _3223 = _3155;
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3229;
                        }
                    }
                    frontier_phi_61_pred = _3154;
                    frontier_phi_61_pred_1 = _3159;
                    frontier_phi_61_pred_2 = _3158;
                    frontier_phi_61_pred_3 = _3157;
                    frontier_phi_61_pred_4 = _3156;
                    frontier_phi_61_pred_5 = _3155;
                }
                _2954 = frontier_phi_61_pred;
                _2964 = frontier_phi_61_pred_1;
                _2962 = frontier_phi_61_pred_2;
                _2960 = frontier_phi_61_pred_3;
                _2958 = frontier_phi_61_pred_4;
                _2956 = frontier_phi_61_pred_5;
                uint _3105 = _3104 + 1u;
                if (_3105 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3098 = _2954;
                    _3099 = _2956;
                    _3100 = _2958;
                    _3101 = _2960;
                    _3102 = _2962;
                    _3103 = _2964;
                    _3104 = _3105;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
        }
        uvec4 _2967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2968 = _2967.z;
        uint _2970 = (_2968 >> 8u) & 15u;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        if (((4294967295u << _2970) & _2852) == 0u)
        {
            _3066 = _2953;
            _3068 = _2955;
            _3070 = _2957;
            _3072 = _2959;
            _3074 = _2961;
            _3076 = _2963;
        }
        else
        {
            float _3091 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
            float _3092 = _3091 * _2806;
            float _3093 = _3091 * _2807;
            float _3094 = _3091 * _2808;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2970 < ((_2968 >> 12u) & 15u))
            {
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3205 = _2953;
                float _3206 = _2955;
                float _3207 = _2957;
                float _3208 = _2959;
                float _3209 = _2961;
                float _3210 = _2963;
                uint _3211 = _2970;
                uint _3220;
                bool _3221;
                for (;;)
                {
                    _3220 = texelFetch(g_lightClassification, int((((_2846 << 5u) + (_2832 << 9u)) + (_3211 << 2u)) >> 2u)).x;
                    _3221 = _3220 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3221)
                    {
                        frontier_phi_67_pred = _3208;
                        frontier_phi_67_pred_1 = _3209;
                        frontier_phi_67_pred_2 = _3210;
                        frontier_phi_67_pred_3 = _3207;
                        frontier_phi_67_pred_4 = _3206;
                        frontier_phi_67_pred_5 = _3205;
                    }
                    else
                    {
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3418 = _3205;
                        float _3419 = _3206;
                        float _3420 = _3207;
                        float _3421 = _3208;
                        float _3422 = _3209;
                        float _3423 = _3210;
                        uint _3424 = _3220;
                        uint _3425;
                        vec4 _3450;
                        float _3451;
                        vec4 _3466;
                        vec3 _3478;
                        vec4 _3493;
                        vec4 _3508;
                        float _3554;
                        bool _3555;
                        for (;;)
                        {
                            uint _3435 = ((_3211 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3424));
                            _3425 = (_3424 + 4294967295u) & _3424;
                            uint _3437 = _3435 * 40u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            _3451 = _3450.w;
                            uint _3453 = (_3435 * 40u) + 4u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3435 * 40u) + 8u;
                            _3478 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x));
                            uint _3480 = (_3435 * 40u) + 16u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3495 = (_3435 * 40u) + 20u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3435 * 40u) + 24u;
                            vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3529 = (_3435 * 40u) + 28u;
                            vec4 _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            _3554 = fma(_2808, _3542.z, fma(_2807, _3542.y, _3542.x * _2806)) + _3542.w;
                            _3555 = !((fma(_2808, _3523.z, fma(_2807, _3523.y, _3523.x * _2806)) + _3523.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3555)
                            {
                                float _3582 = _3450.x - _2806;
                                float _3583 = _3450.y - _2807;
                                float _3584 = _3450.z - _2808;
                                float _3585 = dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584));
                                float _3588 = inversesqrt(_3585);
                                float _3589 = _3588 * _3582;
                                float _3590 = _3588 * _3583;
                                float _3591 = _3588 * _3584;
                                float _3595 = 1.0 - (_3585 / (_3451 * _3451));
                                float _4751 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3600 = sqrt(_3585) * _3466.w;
                                float _3602 = 1.39999997615814208984375 / (_3600 + 1.39999997615814208984375);
                                float _3603 = _3602 * _3602;
                                float _3606 = ((1.0 - _3603) * dot(vec3(_3589, _3590, _3591), vec3(_1073, _1076, _1079))) + _3603;
                                float _3609 = _3600 * _3600;
                                float _3613 = (fma(_2808, _3493.z, fma(_2807, _3493.y, _3493.x * _2806)) + _3493.w) / _3554;
                                float _3614 = (fma(_2808, _3508.z, fma(_2807, _3508.y, _3508.x * _2806)) + _3508.w) / _3554;
                                float _3618 = 1.0 - dot(vec2(_3613, _3614), vec2(_3613, _3614));
                                float _4767 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3620 = _3619 * (((isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0))) * _3596) / ((_3609 * 0.699999988079071044921875) + 1.0));
                                float _3632 = exp2(log2(1.0 / ((_3609 * 3.5) + 5.0)) * 0.25);
                                float _3633 = 1.0 - _1148;
                                float _3640 = sqrt(1.0 - ((1.0 - (_3633 * _3633)) * (1.0 - (_3632 * _3632))));
                                float _3641 = _3640 * _3640;
                                float _3642 = _3641 * _3641;
                                float _3643 = _3589 - _3092;
                                float _3644 = _3590 - _3093;
                                float _3645 = _3591 - _3094;
                                float _3649 = inversesqrt(dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645)));
                                float _3653 = dot(vec3(_1073, _1076, _1079), vec3((-0.0) - _3092, (-0.0) - _3093, (-0.0) - _3094));
                                float _4778 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3656 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3657 = dot(vec3(_1073, _1076, _1079), vec3(_3649 * _3643, _3649 * _3644, _3649 * _3645));
                                float _4789 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3660 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3664 = ((_3660 * _3660) * (_3642 + (-1.0))) + 1.0;
                                float _3665 = _3602 * _3641;
                                float _3666 = _3665 * _3665;
                                float _3672 = ((1.0 - _3666) * dot(vec3(_1073, _1076, _1079), vec3(_3589, _3590, _3591))) + _3666;
                                float _4800 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3674 = 1.0 - _3641;
                                float _3684 = (0.5 / (((_3673 * ((_3656 * _3674) + _3641)) + 9.9999999392252902907785028219223e-09) + (((_3673 * _3674) + _3641) * _3656))) * _3673;
                                float _4811 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3694 = (_3619 * _3596) * (((_3642 * 3.1415927410125732421875) * (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) / ((_3664 * _3664) * ((_3609 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3694 * _3478.x;
                                frontier_phi_73_pred_1 = _3694 * _3478.y;
                                frontier_phi_73_pred_2 = _3620 * _3466.z;
                                frontier_phi_73_pred_3 = _3620 * _3466.y;
                                frontier_phi_73_pred_4 = _3620 * _3466.x;
                                frontier_phi_73_pred_5 = _3694 * _3478.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3698 = frontier_phi_73_pred;
                            _3699 = frontier_phi_73_pred_1;
                            _3703 = frontier_phi_73_pred_2;
                            _3702 = frontier_phi_73_pred_3;
                            _3701 = frontier_phi_73_pred_4;
                            _3700 = frontier_phi_73_pred_5;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            _3407 = _3700 + _3420;
                            if (_3425 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3425;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3408;
                        frontier_phi_67_pred_1 = _3409;
                        frontier_phi_67_pred_2 = _3410;
                        frontier_phi_67_pred_3 = _3407;
                        frontier_phi_67_pred_4 = _3406;
                        frontier_phi_67_pred_5 = _3405;
                    }
                    _3073 = frontier_phi_67_pred;
                    _3075 = frontier_phi_67_pred_1;
                    _3077 = frontier_phi_67_pred_2;
                    _3071 = frontier_phi_67_pred_3;
                    _3069 = frontier_phi_67_pred_4;
                    _3067 = frontier_phi_67_pred_5;
                    uint _3212 = _3211 + 1u;
                    if (_3212 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3205 = _3067;
                        _3206 = _3069;
                        _3207 = _3071;
                        _3208 = _3073;
                        _3209 = _3075;
                        _3210 = _3077;
                        _3211 = _3212;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3075;
                frontier_phi_55_56_ladder_1 = _3077;
                frontier_phi_55_56_ladder_2 = _3073;
                frontier_phi_55_56_ladder_3 = _3071;
                frontier_phi_55_56_ladder_4 = _3069;
                frontier_phi_55_56_ladder_5 = _3067;
            }
            else
            {
                frontier_phi_55_56_ladder = _2961;
                frontier_phi_55_56_ladder_1 = _2963;
                frontier_phi_55_56_ladder_2 = _2959;
                frontier_phi_55_56_ladder_3 = _2957;
                frontier_phi_55_56_ladder_4 = _2955;
                frontier_phi_55_56_ladder_5 = _2953;
            }
            _3066 = frontier_phi_55_56_ladder_5;
            _3068 = frontier_phi_55_56_ladder_4;
            _3070 = frontier_phi_55_56_ladder_3;
            _3072 = frontier_phi_55_56_ladder_2;
            _3074 = frontier_phi_55_56_ladder;
            _3076 = frontier_phi_55_56_ladder_1;
        }
        float _3081 = isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0));
        _2865 = (_3081 * _3072) + _2301;
        _2867 = (_3081 * _3074) + _2303;
        _2869 = (_3081 * _3076) + _2305;
        _2871 = ((_3066 * _1116) * _3081) + _2646;
        _2873 = ((_3068 * _1118) * _3081) + _2648;
        _2875 = ((_3070 * _1119) * _3081) + _2650;
    }
    else
    {
        _2865 = _2301;
        _2867 = _2303;
        _2869 = _2305;
        _2871 = _2646;
        _2873 = _2648;
        _2875 = _2650;
    }
    float _4827 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _4838 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _4849 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    uint _2895 = _287 + 6u;
    float _2903 = _1054 / cbSceneParam._m0[86u].x;
    float _2904 = _1055 / cbSceneParam._m0[86u].y;
    vec4 _2918 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2903, _2904, (log2((isnan(cbSceneParam._m0[77u].w) ? _989 : (isnan(_989) ? cbSceneParam._m0[77u].w : min(_989, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2920 = _2918.x;
    float _2921 = _2918.y;
    float _2922 = _2918.z;
    float _2923 = _2918.w;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    if (_989 > cbSceneParam._m0[78u].w)
    {
        float _2978 = isnan(_989) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _989 : min(cbSceneParam._m0[80u].w, _989));
        float _2979 = _2978 / _989;
        float _2990 = _2979 * _1039;
        float _2991 = _1040 * _2979;
        float _2992 = (-0.0) - _2991;
        float _2994 = _2979 * _1041;
        float _2996 = (cbSceneParam._m0[77u].w * _2992) / _2978;
        float _2997 = _2996 + cbSceneParam._m0[79u].w;
        float _2998 = cbSceneParam._m0[79u].w - _2991;
        float _3004 = sqrt(((_2990 * _2990) + (_2991 * _2991)) + (_2994 * _2994));
        float _3007 = (1.0 - (cbSceneParam._m0[77u].w / _2978)) * _3004;
        float _3012 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3014 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3167;
        if (abs((_2992 - _2996) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3167 = ((((_2997 > 0.0) ? exp2(_3012 * _2997) : (2.0 - exp2(_3014 * _2997))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3007;
        }
        else
        {
            float _3127 = 1.0 / cbSceneParam._m0[80u].x;
            float _3128 = isnan(_2998) ? _2997 : (isnan(_2997) ? _2998 : max(_2997, _2998));
            float _3129 = isnan(_2998) ? _2997 : (isnan(_2997) ? _2998 : min(_2997, _2998));
            float _3138 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : min(_3128, 0.0));
            float _3139 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : min(_3129, 0.0));
            _3167 = ((abs(_3004 / _2992) * cbSceneParam._m0[80u].y) * ((((_3138 - _3139) * 2.0) - ((exp2(_3012 * (isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0)))) - exp2(_3012 * (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))))) * _3127)) - ((exp2(_3014 * _3138) - exp2(_3014 * _3139)) * _3127))) + (_3007 * cbSceneParam._m0[80u].z);
        }
        vec4 _3169 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2903, _2904, 1.0), 0.0);
        float _3178 = exp2((_3167 * (-1.44269502162933349609375)) * (1.0 - _3169.w));
        float _3179 = log2(_3178);
        float _3195 = log2(_2923);
        _3016 = (exp2(_3195 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].x)) * _3169.x) / cbSceneParam._m0[78u].x)) + _2920;
        _3018 = (exp2(_3195 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].y)) * _3169.y) / cbSceneParam._m0[78u].y)) + _2921;
        _3020 = (exp2(_3195 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].z)) * _3169.z) / cbSceneParam._m0[78u].z)) + _2922;
        _3022 = _3178 * _2923;
    }
    else
    {
        _3016 = _2920;
        _3018 = _2921;
        _3020 = _2922;
        _3022 = _2923;
    }
    float _3034 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3035 = _3034 == 3.0;
    float _3036 = log2(_3022);
    float _3043 = exp2(_3036 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * (_2865 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1132))) + ((_2871 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1939)) * cbPerFrame._m0[3u].x));
    float _3044 = exp2(_3036 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2867 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1132))) + ((_2873 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1939)) * cbPerFrame._m0[3u].x));
    float _3045 = exp2(_3036 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2869 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1132))) + ((_2875 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1939)) * cbPerFrame._m0[3u].x));
    float _3054 = (_3034 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3054 * (_3035 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3016)));
    SV_Target.y = _3054 * (_3035 ? _3044 : (_3044 + (cbSceneParam._m0[72u].w * _3018)));
    SV_Target.z = _3054 * (_3035 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3020)));
    SV_Target.w = cbInstanceData._m0[_2895].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2895].w;
}


