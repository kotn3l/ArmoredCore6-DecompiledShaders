#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1317;
float _3723;
float _3724;
float _3725;
float _3726;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3735 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _440 = _436.z;
    float _449 = ((_419.z - _440) * _392) + _440;
    float _452 = ((((_419.x - _438) * _392) + _438) * 2.0) + (-1.0);
    float _454 = ((((_419.y - _439) * _392) + _439) * 2.0) + (-1.0);
    float _455 = dot(vec2(_452, _454), vec2(_452, _454));
    float _3746 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))));
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _491 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _493 = _491.x;
    float _494 = 1.0 - _493;
    float _500 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _503 = ((isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : min(_500, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _512 = (_503 - ((((((_493 - _494) * cbMtdParam._m0[24u].z) + _494) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _503))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3767 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _520 = (_513 * (cbMtdParam._m0[17u].x - _399)) + _399;
    float _521 = (_513 * (cbMtdParam._m0[17u].y - _400)) + _400;
    float _522 = (_513 * (cbMtdParam._m0[17u].z - _401)) + _401;
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _536 = _534.x;
    float _537 = 1.0 - _536;
    float _564 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_536 - _537) * cbMtdParam._m0[24u].w) + _537) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3778 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _573 = ((((cbMtdParam._m0[10u].x - _520) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _565) + _520;
    float _574 = ((((cbMtdParam._m0[10u].y - _521) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _565) + _521;
    float _575 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _522)) * _565) + _522;
    vec4 _587 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _603 = _601.x;
    float _621 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _603) * _392) + _603;
    float _625 = ((_587.x - _621) * cbMtdParam._m0[19u].z) + _621;
    float _627 = _625 - (_625 * _513);
    float _629 = _627 - (_627 * _565);
    vec4 _643 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _650 = (_643.x * 2.0) + (-1.0);
    float _651 = (_643.y * 2.0) + (-1.0);
    float _652 = dot(vec2(_650, _651), vec2(_650, _651));
    float _3789 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _660 = (_513 * (_643.z - _449)) + _449;
    float _663 = ((cbMtdParam._m0[23u].y - _660) * _565) + _660;
    vec4 _682 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _688 = (_682.x * 2.0) + (-1.0);
    float _689 = (_682.y * 2.0) + (-1.0);
    float _690 = dot(vec2(_688, _689), vec2(_688, _689));
    float _3800 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _707 = (((_650 - _452) + (cbMtdParam._m0[21u].x * _452)) * _513) + _452;
    float _708 = (((_651 - _454) + (cbMtdParam._m0[21u].x * _454)) * _513) + _454;
    float _709 = (_513 * (sqrt(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) - _460)) + _460;
    float _720 = (((_688 - _707) + (_707 * cbMtdParam._m0[22u].z)) * _565) + _707;
    float _721 = (((_689 - _708) + (_708 * cbMtdParam._m0[22u].z)) * _565) + _708;
    float _722 = ((sqrt(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) - _709) * _565) + _709;
    float _724 = cbMtdParam._m0[22u].x + _473.w;
    float _727 = fma(_722, _242 * NORMAL.x, fma(_721, _249 * TANGENT.x, (_235 * _227) * _720));
    float _730 = fma(_722, _242 * NORMAL.y, fma(_721, _249 * TANGENT.y, (_235 * _228) * _720));
    float _733 = fma(_722, _242 * NORMAL.z, fma(_721, _249 * TANGENT.z, (_235 * _229) * _720));
    float _737 = inversesqrt(dot(vec3(_727, _730, _733), vec3(_727, _730, _733)));
    float _738 = _737 * _727;
    float _739 = _737 * _730;
    float _740 = _737 * _733;
    float _3811 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _741 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _3833 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3844 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3855 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3866 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _746 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _760 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _810 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _800);
    float _811 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _800);
    float _812 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _800);
    float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
    float _817 = _810 * _816;
    float _818 = _811 * _816;
    float _819 = _812 * _816;
    vec4 _824 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _826 = _824.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _998 = sqrt(((_810 * _810) + (_811 * _811)) + (_812 * _812));
        float _1004 = (cbMatDynParam._m0[5u].x * _998) + cbMatDynParam._m0[5u].y;
        float _3877 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1009 = (cbMatDynParam._m0[5u].z * _998) + cbMatDynParam._m0[5u].w;
        float _3888 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) - _1005)) + _1005) < ((_826 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _837 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _838 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _856 = fma(_740, cbSceneParam._m0[5u].z, fma(_739, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _738));
    float _859 = fma(_740, cbSceneParam._m0[6u].z, fma(_739, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _738));
    float _862 = fma(_740, cbSceneParam._m0[7u].z, fma(_739, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _738));
    uint _875 = _255 + 9u;
    uint _876 = _875 + uint(cbMatDynParam._m0[0u].w);
    float _882 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_876].x;
    float _883 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * cbInstanceData._m0[_876].y;
    float _884 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * cbInstanceData._m0[_876].z;
    float _3899 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _888 = 1.0 - _746;
    float _889 = _885 * _888;
    float _890 = _886 * _888;
    float _891 = _887 * _888;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _746;
    float _897 = (_886 + (-0.039999999105930328369140625)) * _746;
    float _898 = (_887 + (-0.039999999105930328369140625)) * _746;
    float _899 = _896 + 0.039999999105930328369140625;
    float _901 = _897 + 0.039999999105930328369140625;
    float _902 = _898 + 0.039999999105930328369140625;
    vec4 _911 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _837, cbSceneParam._m0[86u].y * _838));
    float _915 = ((isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * TEXCOORD_5.w) * _911.x;
    float _916 = dot(vec3(_738, _739, _740), vec3(_817, _818, _819));
    float _919 = _916 * 2.0;
    float _923 = (_919 * _738) - _817;
    float _924 = (_919 * _739) - _818;
    float _925 = (_919 * _740) - _819;
    float _929 = abs(dot(vec3(_817, _818, _819), vec3(_738, _739, _740)));
    float _3932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _931 = sqrt(_741);
    float _944 = exp2((_931 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_931 * 3.0));
    float _950 = (1.0 - _944) * ((_931 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _951 = _944 * _931;
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1316;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1041 = fma(_987, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979));
        float _1045 = fma(_987, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979));
        float _1049 = fma(_987, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979));
        float _1074 = _979 + _738;
        float _1075 = _983 + _739;
        float _1076 = _987 + _740;
        float _1086 = fma(_1076, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074)) - _1041;
        float _1087 = fma(_1076, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074)) - _1045;
        float _1088 = fma(_1076, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074)) - _1049;
        float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
        float _1105 = ((_1092 * _1086) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1041 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1092 * _1087) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1045 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1092 * _1088) / cbModelParam._m0[34u].z) + ((((((_1049 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1144 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1110.x + (-0.5));
        float _1146 = _1144 * (_1110.y + (-0.5));
        float _1147 = _1144 * (_1110.z + (-0.5));
        float _1154 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1117.x + (-0.5));
        float _1156 = _1154 * (_1117.y + (-0.5));
        float _1157 = _1154 * (_1117.z + (-0.5));
        float _1164 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1124.x + (-0.5));
        float _1166 = _1164 * (_1124.y + (-0.5));
        float _1167 = _1164 * (_1124.z + (-0.5));
        float _1174 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1131.x + (-0.5));
        float _1176 = _1174 * (_1131.y + (-0.5));
        float _1177 = _1174 * (_1131.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1198 = (dot(vec3(_738, _739, _740), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1208 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3980 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1210 + 1.0))) + _1215) * _1178;
        float _1225 = _1146 * 0.5;
        float _1226 = _1156 * 0.5;
        float _1227 = _1166 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_738, _739, _740), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4013 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1252 + 1.0))) + _1257) * _1179;
        float _1267 = _1147 * 0.5;
        float _1268 = _1157 * 0.5;
        float _1269 = _1167 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_738, _739, _740), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4046 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1294 + 1.0))) + _1299) * _1180;
        _1316 = _1147;
        _1318 = _1146;
        _1319 = _1145;
        _1320 = _1157;
        _1321 = _1156;
        _1322 = _1155;
        _1323 = _1167;
        _1324 = _1166;
        _1325 = _1165;
        _1326 = _1180;
        _1327 = _1179;
        _1328 = _1178;
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1317;
        _1318 = _1317;
        _1319 = _1317;
        _1320 = _1317;
        _1321 = _1317;
        _1322 = _1317;
        _1323 = _1317;
        _1324 = _1317;
        _1325 = _1317;
        _1326 = _1317;
        _1327 = _1317;
        _1328 = _1317;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1359 = fma(_987, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979));
        float _1363 = fma(_987, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979));
        float _1367 = fma(_987, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979));
        float _1390 = _979 + _738;
        float _1391 = _983 + _739;
        float _1392 = _987 + _740;
        float _1402 = fma(_1392, cbModelParam._m0[30u].z, fma(_1391, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1390)) - _1359;
        float _1403 = fma(_1392, cbModelParam._m0[31u].z, fma(_1391, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1390)) - _1363;
        float _1404 = fma(_1392, cbModelParam._m0[32u].z, fma(_1391, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1390)) - _1367;
        float _1408 = inversesqrt(dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404)));
        float _1421 = ((_1408 * _1402) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1359 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1408 * _1403) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1363 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1408 * _1404) / cbModelParam._m0[35u].z) + ((((((_1367 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        float _1458 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1425.x + (-0.5));
        float _1460 = _1458 * (_1425.y + (-0.5));
        float _1461 = _1458 * (_1425.z + (-0.5));
        float _1468 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1432.x + (-0.5));
        float _1470 = _1468 * (_1432.y + (-0.5));
        float _1471 = _1468 * (_1432.z + (-0.5));
        float _1478 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1439.x + (-0.5));
        float _1480 = _1478 * (_1439.y + (-0.5));
        float _1481 = _1478 * (_1439.z + (-0.5));
        float _1488 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1446.x + (-0.5));
        float _1490 = _1488 * (_1446.y + (-0.5));
        float _1491 = _1488 * (_1446.z + (-0.5));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = _1459 * 0.5;
        float _1496 = _1469 * 0.5;
        float _1497 = _1479 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_738, _739, _740), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4109 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1522 + 1.0))) + _1527) * _1492;
        float _1537 = _1460 * 0.5;
        float _1538 = _1470 * 0.5;
        float _1539 = _1480 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_738, _739, _740), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4142 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1564 + 1.0))) + _1569) * _1493;
        float _1579 = _1461 * 0.5;
        float _1580 = _1471 * 0.5;
        float _1581 = _1481 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_738, _739, _740), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4175 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1606 + 1.0))) + _1611) * _1494;
        _1628 = _1461;
        _1629 = _1460;
        _1630 = _1459;
        _1631 = _1471;
        _1632 = _1470;
        _1633 = _1469;
        _1634 = _1481;
        _1635 = _1480;
        _1636 = _1479;
        _1637 = _1494;
        _1638 = _1493;
        _1639 = _1492;
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
    }
    else
    {
        _1628 = _1317;
        _1629 = _1317;
        _1630 = _1317;
        _1631 = _1317;
        _1632 = _1317;
        _1633 = _1317;
        _1634 = _1317;
        _1635 = _1317;
        _1636 = _1317;
        _1637 = _1317;
        _1638 = _1317;
        _1639 = _1317;
        _1640 = 0.0;
        _1641 = 0.0;
        _1642 = 0.0;
    }
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1329)) + _1329;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1330)) + _1330;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1331)) + _1331;
    float _1675 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1652));
    float _1696 = _923 * 0.5;
    float _1697 = _924 * 0.5;
    float _1698 = _925 * 0.5;
    float _1699 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1702 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1705 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1739;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1712 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1316, _1320, _1323, _1326));
        float _1716 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1720 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1727 = dot(vec4(cbModelParam._m0[39u]), vec4(_1696, _1697, _1698, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1750;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1741 = dot(vec4(cbModelParam._m0[40u]), vec4(_1696, _1697, _1698, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1754 = (_1750 * cbModelParam._m0[1u].x) + (_1739 * (1.0 - cbModelParam._m0[1u].x));
    float _1764 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _741);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1764 : min(cbModelParam._m0[25u].z, _1764));
    float _1846;
    float _1848;
    float _1850;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1813 = fma(_987, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979)) + cbModelParam._m0[13u].w;
        float _1817 = fma(_987, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979)) + cbModelParam._m0[14u].w;
        float _1821 = fma(_987, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979)) + cbModelParam._m0[15u].w;
        float _1824 = fma(_925, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923));
        float _1827 = fma(_925, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923));
        float _1830 = fma(_925, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923));
        float _1858;
        if (_1824 > 0.0)
        {
            _1858 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1858 = frontier_phi_17_15_ladder;
        }
        float _2082;
        if (_1827 > 0.0)
        {
            _2082 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2082 = frontier_phi_26_22_ladder;
        }
        float _2339;
        if (_1830 > 0.0)
        {
            _2339 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2339 = frontier_phi_38_33_ladder;
        }
        float _2341 = isnan(_2082) ? _1858 : (isnan(_1858) ? _2082 : min(_1858, _2082));
        float _2342 = isnan(_2339) ? _2341 : (isnan(_2341) ? _2339 : min(_2341, _2339));
        float _2346 = (_2342 * _1824) + _1813;
        float _2347 = (_2342 * _1827) + _1817;
        float _2348 = (_2342 * _1830) + _1821;
        float _2349 = _2342 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2349;
        float _2353 = _2349 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 > _2353) || ((_2347 < _2351) || ((_2346 < _2351) || (_2346 > _2353))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2476 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2348, cbModelParam._m0[9u].z, fma(_2347, cbModelParam._m0[9u].y, _2346 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2348, cbModelParam._m0[10u].z, fma(_2347, cbModelParam._m0[10u].y, _2346 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2348, cbModelParam._m0[11u].z, fma(_2347, cbModelParam._m0[11u].y, _2346 * cbModelParam._m0[11u].x))), _1765);
            frontier_phi_16_38_ladder = _2476.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2476.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2476.x * cbModelParam._m0[1u].y;
        }
        _1846 = frontier_phi_16_38_ladder_2;
        _1848 = frontier_phi_16_38_ladder_1;
        _1850 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1834 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_923, _924, _925), _1765);
        _1846 = _1834.x * cbModelParam._m0[1u].y;
        _1848 = _1834.y * cbModelParam._m0[1u].y;
        _1850 = _1834.z * cbModelParam._m0[1u].y;
    }
    float _1854 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _741);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1854 : min(cbModelParam._m0[25u].w, _1854));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1909 = fma(_987, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979)) + cbModelParam._m0[21u].w;
        float _1913 = fma(_987, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979)) + cbModelParam._m0[22u].w;
        float _1917 = fma(_987, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979)) + cbModelParam._m0[23u].w;
        float _1920 = fma(_925, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923));
        float _1923 = fma(_925, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923));
        float _1926 = fma(_925, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923));
        float _2087;
        if (_1920 > 0.0)
        {
            _2087 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2087 = frontier_phi_28_24_ladder;
        }
        float _2366;
        if (_1923 > 0.0)
        {
            _2366 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2366 = frontier_phi_40_35_ladder;
        }
        float _2579;
        if (_1926 > 0.0)
        {
            _2579 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2579 = frontier_phi_49_46_ladder;
        }
        float _2581 = isnan(_2366) ? _2087 : (isnan(_2087) ? _2366 : min(_2087, _2366));
        float _2582 = isnan(_2579) ? _2581 : (isnan(_2581) ? _2579 : min(_2581, _2579));
        float _2586 = (_2582 * _1920) + _1909;
        float _2587 = (_2582 * _1923) + _1913;
        float _2588 = (_2582 * _1926) + _1917;
        float _2589 = _2582 * 9.9999997473787516355514526367188e-05;
        float _2590 = (-1.0) - _2589;
        float _2592 = _2589 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2588 > _2592) || ((_2588 < _2590) || ((_2587 > _2592) || ((_2587 < _2590) || ((_2586 < _2590) || (_2586 > _2592))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2588, cbModelParam._m0[17u].z, fma(_2587, cbModelParam._m0[17u].y, _2586 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2588, cbModelParam._m0[18u].z, fma(_2587, cbModelParam._m0[18u].y, _2586 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2588, cbModelParam._m0[19u].z, fma(_2587, cbModelParam._m0[19u].y, _2586 * cbModelParam._m0[19u].x))), _1855);
            frontier_phi_25_49_ladder = _2787.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2787.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2787.x * cbModelParam._m0[1u].z;
        }
        _1945 = frontier_phi_25_49_ladder_2;
        _1947 = frontier_phi_25_49_ladder_1;
        _1949 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_923, _924, _925), _1855);
        _1945 = _1929.x * cbModelParam._m0[1u].z;
        _1947 = _1929.y * cbModelParam._m0[1u].z;
        _1949 = _1929.z * cbModelParam._m0[1u].z;
    }
    float _1962 = (((_950 * _899) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1945 - _1846)) + _1846);
    float _1964 = (((_950 * _901) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1947 - _1848)) + _1848);
    float _1966 = (((_950 * _902) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1949 - _1850)) + _1850);
    float _1969 = fma(_1966, cbSceneParam._m0[89u].z, fma(_1964, cbSceneParam._m0[89u].y, _1962 * cbSceneParam._m0[89u].x));
    float _1972 = fma(_1966, cbSceneParam._m0[90u].z, fma(_1964, cbSceneParam._m0[90u].y, _1962 * cbSceneParam._m0[90u].x));
    float _1975 = fma(_1966, cbSceneParam._m0[91u].z, fma(_1964, cbSceneParam._m0[91u].y, _1962 * cbSceneParam._m0[91u].x));
    vec4 _1983 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_837, _838));
    float _1985 = _1983.w;
    float _1997 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1985);
    float _1998 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1985);
    float _1999 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1985);
    uvec4 _2003 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2005 = _2003.x * 14u;
    uint _2006 = _2005 + 13u;
    float _2013 = _915 + (-1.0);
    float _2018 = (cbLight._m0[_2006].x * _2013) + 1.0;
    float _2019 = (cbLight._m0[_2006].y * _2013) + 1.0;
    float _2020 = (cbLight._m0[_2006].z * _2013) + 1.0;
    float _2021 = (cbLight._m0[_2006].w * _2013) + 1.0;
    uint _2022 = _2005 + 5u;
    float _2028 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
    uint _2032 = _2005 + 4u;
    float _2041 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    uint _2045 = _2005 | 1u;
    float _2056 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_738, _739, _740));
    float _2059 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_738, _739, _740));
    float _4311 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _4322 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2064 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * 0.3183098733425140380859375;
    float _2066 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * 0.3183098733425140380859375;
    float _2073 = ((cbLight._m0[_2022].x * _2028) * _2066) + (((cbLight._m0[_2032].x * _1997) * _2041) * _2064);
    float _2074 = ((_2028 * cbLight._m0[_2022].y) * _2066) + (((cbLight._m0[_2032].y * _1998) * _2041) * _2064);
    float _2075 = ((_2028 * cbLight._m0[_2022].z) * _2066) + (((cbLight._m0[_2032].z * _1999) * _2041) * _2064);
    uvec4 _2079 = floatBitsToUint(cbLight._m0[_2005 + 12u]);
    bool _2081 = _2079.x == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_2081)
    {
        _2092 = _2073;
        _2094 = _2074;
        _2096 = _2075;
    }
    else
    {
        uint _2100 = _2005 + 6u;
        float _2116 = (dot(vec3(cbLight._m0[_2005 + 2u].xyz), vec3(_738, _739, _740)) * 0.5) + 0.5;
        float _2117 = _2116 * _2116;
        float _4333 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2118 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2119 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2092 = (((cbLight._m0[_2100].x * 0.3183098733425140380859375) * _2118) * _2119) + _2073;
        _2094 = (((cbLight._m0[_2100].y * 0.3183098733425140380859375) * _2118) * _2119) + _2074;
        _2096 = (((cbLight._m0[_2100].z * 0.3183098733425140380859375) * _2118) * _2119) + _2075;
    }
    bool _2099 = _2079.y == 0u;
    float _2137;
    float _2139;
    float _2141;
    if (_2099)
    {
        _2137 = _2092;
        _2139 = _2094;
        _2141 = _2096;
    }
    else
    {
        uint _2310 = _2005 + 7u;
        float _2326 = (dot(vec3(cbLight._m0[_2005 + 3u].xyz), vec3(_738, _739, _740)) * 0.5) + 0.5;
        float _2327 = _2326 * _2326;
        float _4349 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2328 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2329 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2137 = (((cbLight._m0[_2310].x * 0.3183098733425140380859375) * _2328) * _2329) + _2092;
        _2139 = (((cbLight._m0[_2310].y * 0.3183098733425140380859375) * _2328) * _2329) + _2094;
        _2141 = (((cbLight._m0[_2310].z * 0.3183098733425140380859375) * _2328) * _2329) + _2096;
    }
    uint _2144 = _2005 + 8u;
    float _2157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _741) * 0.949999988079071044921875);
    float _2158 = _2157 * _2157;
    float _2159 = cbLight._m0[_2005].x + _817;
    float _2160 = cbLight._m0[_2005].y + _818;
    float _2161 = cbLight._m0[_2005].z + _819;
    float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
    float _2166 = _2165 * _2159;
    float _2167 = _2165 * _2160;
    float _2168 = _2165 * _2161;
    float _2169 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2005].xyz));
    float _4365 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _4376 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _2173 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2174 = dot(vec3(_738, _739, _740), vec3(_2166, _2167, _2168));
    float _4387 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2178 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2166, _2167, _2168));
    float _4398 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2182 = _2158 * _2158;
    float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
    float _2194 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
    float _2195 = 0.959999978542327880859375 - _896;
    float _2197 = 0.959999978542327880859375 - _897;
    float _2198 = 0.959999978542327880859375 - _898;
    float _2205 = 1.0 - _2158;
    float _2216 = (0.5 / (((_2173 * ((_2172 * _2205) + _2158)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2205) + _2158) * _2172))) * _2172;
    float _4409 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2218 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
    uint _2232 = _2005 + 9u;
    float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _741) * 0.949999988079071044921875);
    float _2244 = _2243 * _2243;
    float _2245 = cbLight._m0[_2045].x + _817;
    float _2246 = cbLight._m0[_2045].y + _818;
    float _2247 = cbLight._m0[_2045].z + _819;
    float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
    float _2252 = _2251 * _2245;
    float _2253 = _2251 * _2246;
    float _2254 = _2251 * _2247;
    float _2255 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2045].xyz));
    float _4420 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2259 = dot(vec3(_738, _739, _740), vec3(_2252, _2253, _2254));
    float _4431 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2263 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2252, _2253, _2254));
    float _4442 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2267 = _2244 * _2244;
    float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
    float _2278 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
    float _2285 = 1.0 - _2244;
    float _2295 = (0.5 / (((_2173 * ((_2258 * _2285) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2285) + _2244) * _2258))) * _2258;
    float _4453 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2297 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
    float _2307 = (((((_2278 * _2195) + _899) * cbLight._m0[_2232].x) * _2297) * _2028) + ((((cbLight._m0[_2144].x * _1997) * ((_2194 * _2195) + _899)) * _2218) * _2041);
    float _2308 = (((((_2278 * _2197) + _901) * cbLight._m0[_2232].y) * _2297) * _2028) + ((((cbLight._m0[_2144].y * _1998) * ((_2194 * _2197) + _901)) * _2218) * _2041);
    float _2309 = (((((_2278 * _2198) + _902) * cbLight._m0[_2232].z) * _2297) * _2028) + ((((cbLight._m0[_2144].z * _1999) * ((_2194 * _2198) + _902)) * _2218) * _2041);
    float _2371;
    float _2373;
    float _2375;
    if (_2081)
    {
        _2371 = _2307;
        _2373 = _2308;
        _2375 = _2309;
    }
    else
    {
        uint _2377 = _2005 + 2u;
        uint _2381 = _2005 + 10u;
        float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _741) * 0.949999988079071044921875);
        float _2396 = _2395 * _2395;
        float _2397 = cbLight._m0[_2377].x + _817;
        float _2398 = cbLight._m0[_2377].y + _818;
        float _2399 = cbLight._m0[_2377].z + _819;
        float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
        float _2404 = _2403 * _2397;
        float _2405 = _2403 * _2398;
        float _2406 = _2403 * _2399;
        float _2407 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2377].xyz));
        float _4464 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2411 = dot(vec3(_738, _739, _740), vec3(_2404, _2405, _2406));
        float _4475 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2415 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2404, _2405, _2406));
        float _4486 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2419 = _2396 * _2396;
        float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
        float _2430 = exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0);
        float _2437 = 1.0 - _2396;
        float _2447 = (0.5 / (((_2173 * ((_2410 * _2437) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2437) + _2396) * _2410))) * _2410;
        float _4497 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2449 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
        float _2450 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2371 = (((((_2430 * _2195) + _899) * cbLight._m0[_2381].x) * _2449) * _2450) + _2307;
        _2373 = (((((_2430 * _2197) + _901) * cbLight._m0[_2381].y) * _2449) * _2450) + _2308;
        _2375 = (((((_2430 * _2198) + _902) * cbLight._m0[_2381].z) * _2449) * _2450) + _2309;
    }
    float _2485;
    float _2487;
    float _2489;
    if (_2099)
    {
        _2485 = _2371;
        _2487 = _2373;
        _2489 = _2375;
    }
    else
    {
        uint _2496 = _2005 + 3u;
        uint _2500 = _2005 + 11u;
        float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2496].w)) * _741) * 0.949999988079071044921875);
        float _2515 = _2514 * _2514;
        float _2516 = cbLight._m0[_2496].x + _817;
        float _2517 = cbLight._m0[_2496].y + _818;
        float _2518 = cbLight._m0[_2496].z + _819;
        float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
        float _2523 = _2522 * _2516;
        float _2524 = _2522 * _2517;
        float _2525 = _2522 * _2518;
        float _2526 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2496].xyz));
        float _4513 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2530 = dot(vec3(_738, _739, _740), vec3(_2523, _2524, _2525));
        float _4524 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2534 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_2523, _2524, _2525));
        float _4535 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2538 = _2515 * _2515;
        float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
        float _2549 = exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0);
        float _2556 = 1.0 - _2515;
        float _2566 = (0.5 / (((_2173 * ((_2529 * _2556) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2556) + _2515) * _2529))) * _2529;
        float _4546 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2485 = (((((_2549 * _2195) + _899) * cbLight._m0[_2500].x) * _2568) * _2569) + _2371;
        _2487 = (((((_2549 * _2197) + _901) * cbLight._m0[_2500].y) * _2568) * _2569) + _2373;
        _2489 = (((((_2549 * _2198) + _902) * cbLight._m0[_2500].z) * _2568) * _2569) + _2375;
    }
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    if (_2003.y == 0u)
    {
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2644;
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2644;
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2644;
        uvec4 _2659 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2660 = _2659.x;
        uint _2671 = uint((float(_2659.y) * floor(float(uint(cbSceneParam._m0[85u].y * _838) / _2660))) + floor(float(uint(cbSceneParam._m0[85u].x * _837) / _2660)));
        float _2681 = (log2(_2647 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2682 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        uint _2685 = uint(isnan(14.0) ? _2682 : (isnan(_2682) ? 14.0 : min(_2682, 14.0)));
        uvec4 _2690 = texelFetch(g_lightClusterGridBuffer, int(((_2685 << 2u) + (_2671 << 6u)) >> 2u));
        uint _2691 = _2690.x;
        uint _2692 = _2659.z;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        if (((((1u << ((_2692 >> 4u) & 15u)) + 4294967295u) & _2691) == 0u) || ((_2692 & 240u) == 0u))
        {
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
        }
        else
        {
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            uint _2951 = 0u;
            uint _2960;
            bool _2961;
            for (;;)
            {
                _2960 = texelFetch(g_lightClassification, int((((_2685 << 5u) + (_2671 << 9u)) + (_2951 << 2u)) >> 2u)).x;
                _2961 = _2960 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2961)
                {
                    frontier_phi_66_pred = _2945;
                    frontier_phi_66_pred_1 = _2950;
                    frontier_phi_66_pred_2 = _2949;
                    frontier_phi_66_pred_3 = _2948;
                    frontier_phi_66_pred_4 = _2947;
                    frontier_phi_66_pred_5 = _2946;
                }
                else
                {
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    uint _3096;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2960;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    for (;;)
                    {
                        uint _3100 = uint(findLSB(_3096)) + (_2951 << 5u);
                        uint _3097 = (_3096 + 4294967295u) & _3096;
                        uint _3102 = _3100 * 48u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 3u)).x));
                        uint _3122 = (_3100 * 48u) + 4u;
                        vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 3u)).x));
                        uint _3141 = (_3100 * 48u) + 8u;
                        vec3 _3152 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x));
                        float _3156 = _3116.x - _2645;
                        float _3157 = _3116.y - _2646;
                        float _3158 = _3116.z - _2647;
                        float _3159 = dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158));
                        float _3162 = inversesqrt(_3159);
                        float _3163 = _3162 * _3156;
                        float _3164 = _3162 * _3157;
                        float _3165 = _3162 * _3158;
                        float _3166 = dot(vec3(_856, _859, _862), vec3(_3163, _3164, _3165));
                        float _3171 = 1.0 - (_3159 * _3116.w);
                        float _4572 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3172 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                        float _3173 = sqrt(_3159) * _3135.w;
                        float _3176 = 1.39999997615814208984375 / (_3173 + 1.39999997615814208984375);
                        float _3177 = _3176 * _3176;
                        float _3180 = ((1.0 - _3177) * _3166) + _3177;
                        float _3183 = _3173 * _3173;
                        float _3187 = ((isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))) * _3172) / ((_3183 * 0.699999988079071044921875) + 1.0);
                        float _3191 = (-0.0) - _2645;
                        float _3192 = (-0.0) - _2646;
                        float _3193 = (-0.0) - _2647;
                        float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                        float _3198 = _3197 * _3191;
                        float _3199 = _3197 * _3192;
                        float _3200 = _3197 * _3193;
                        float _3208 = exp2(log2(1.0 / ((_3183 * 3.5) + 5.0)) * 0.25);
                        float _3209 = 1.0 - _931;
                        float _3216 = sqrt(1.0 - ((1.0 - (_3209 * _3209)) * (1.0 - (_3208 * _3208))));
                        float _3217 = _3216 * _3216;
                        float _3218 = _3217 * _3217;
                        float _3219 = _3198 + _3163;
                        float _3220 = _3199 + _3164;
                        float _3221 = _3200 + _3165;
                        float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                        float _3229 = dot(vec3(_856, _859, _862), vec3(_3198, _3199, _3200));
                        float _4588 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3232 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3233 = dot(vec3(_856, _859, _862), vec3(_3225 * _3219, _3225 * _3220, _3225 * _3221));
                        float _4599 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3236 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3240 = ((_3236 * _3236) * (_3218 + (-1.0))) + 1.0;
                        float _3241 = _3176 * _3217;
                        float _3242 = _3241 * _3241;
                        float _3245 = ((1.0 - _3242) * _3166) + _3242;
                        float _4610 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3246 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3247 = 1.0 - _3217;
                        float _3257 = (0.5 / (((_3246 * ((_3232 * _3247) + _3217)) + 9.9999999392252902907785028219223e-09) + (((_3246 * _3247) + _3217) * _3232))) * _3246;
                        float _4621 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3268 = (((_3218 * 3.1415927410125732421875) * (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) / ((_3240 * _3240) * ((_3183 * 2.1991131305694580078125) + 3.141590118408203125))) * _3172;
                        _3020 = (_3187 * _3135.x) + _3093;
                        _3021 = (_3187 * _3135.y) + _3094;
                        _3022 = (_3187 * _3135.z) + _3095;
                        _3017 = (_3268 * _3152.x) + _3090;
                        _3018 = (_3268 * _3152.y) + _3091;
                        _3019 = (_3268 * _3152.z) + _3092;
                        if (_3097 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3097;
                        }
                    }
                    frontier_phi_66_pred = _3017;
                    frontier_phi_66_pred_1 = _3022;
                    frontier_phi_66_pred_2 = _3021;
                    frontier_phi_66_pred_3 = _3020;
                    frontier_phi_66_pred_4 = _3019;
                    frontier_phi_66_pred_5 = _3018;
                }
                _2793 = frontier_phi_66_pred;
                _2803 = frontier_phi_66_pred_1;
                _2801 = frontier_phi_66_pred_2;
                _2799 = frontier_phi_66_pred_3;
                _2797 = frontier_phi_66_pred_4;
                _2795 = frontier_phi_66_pred_5;
                uint _2952 = _2951 + 1u;
                if (_2952 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2945 = _2793;
                    _2946 = _2795;
                    _2947 = _2797;
                    _2948 = _2799;
                    _2949 = _2801;
                    _2950 = _2803;
                    _2951 = _2952;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
        }
        uvec4 _2806 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2807 = _2806.z;
        uint _2809 = (_2807 >> 8u) & 15u;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        if (((4294967295u << _2809) & _2691) == 0u)
        {
            _2913 = _2792;
            _2915 = _2794;
            _2917 = _2796;
            _2919 = _2798;
            _2921 = _2800;
            _2923 = _2802;
        }
        else
        {
            float _2938 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
            float _2939 = _2938 * _2645;
            float _2940 = _2938 * _2646;
            float _2941 = _2938 * _2647;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2809 < ((_2807 >> 12u) & 15u))
            {
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _3073 = _2792;
                float _3074 = _2794;
                float _3075 = _2796;
                float _3076 = _2798;
                float _3077 = _2800;
                float _3078 = _2802;
                uint _3079 = _2809;
                uint _3088;
                bool _3089;
                for (;;)
                {
                    _3088 = texelFetch(g_lightClassification, int((((_2685 << 5u) + (_2671 << 9u)) + (_3079 << 2u)) >> 2u)).x;
                    _3089 = _3088 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3089)
                    {
                        frontier_phi_77_pred = _3078;
                        frontier_phi_77_pred_1 = _3077;
                        frontier_phi_77_pred_2 = _3076;
                        frontier_phi_77_pred_3 = _3075;
                        frontier_phi_77_pred_4 = _3074;
                        frontier_phi_77_pred_5 = _3073;
                    }
                    else
                    {
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3295 = _3073;
                        float _3296 = _3074;
                        float _3297 = _3075;
                        float _3298 = _3076;
                        float _3299 = _3077;
                        float _3300 = _3078;
                        uint _3301 = _3088;
                        uint _3302;
                        vec4 _3327;
                        float _3328;
                        vec4 _3343;
                        vec3 _3355;
                        vec4 _3370;
                        vec4 _3386;
                        float _3432;
                        bool _3433;
                        for (;;)
                        {
                            uint _3312 = ((_3079 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3301));
                            _3302 = (_3301 + 4294967295u) & _3301;
                            uint _3314 = _3312 * 40u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            _3328 = _3327.w;
                            uint _3330 = (_3312 * 40u) + 4u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3312 * 40u) + 8u;
                            _3355 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x));
                            uint _3357 = (_3312 * 40u) + 16u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3373 = (_3312 * 40u) + 20u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3388 = (_3312 * 40u) + 24u;
                            vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3407 = (_3312 * 40u) + 28u;
                            vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            _3432 = fma(_2647, _3420.z, fma(_2646, _3420.y, _3420.x * _2645)) + _3420.w;
                            _3433 = !((fma(_2647, _3401.z, fma(_2646, _3401.y, _3401.x * _2645)) + _3401.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3433)
                            {
                                float _3460 = _3327.x - _2645;
                                float _3461 = _3327.y - _2646;
                                float _3462 = _3327.z - _2647;
                                float _3463 = dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462));
                                float _3466 = inversesqrt(_3463);
                                float _3467 = _3466 * _3460;
                                float _3468 = _3466 * _3461;
                                float _3469 = _3466 * _3462;
                                float _3473 = 1.0 - (_3463 / (_3328 * _3328));
                                float _4632 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3478 = sqrt(_3463) * _3343.w;
                                float _3480 = 1.39999997615814208984375 / (_3478 + 1.39999997615814208984375);
                                float _3481 = _3480 * _3480;
                                float _3484 = ((1.0 - _3481) * dot(vec3(_3467, _3468, _3469), vec3(_856, _859, _862))) + _3481;
                                float _3487 = _3478 * _3478;
                                float _3491 = (fma(_2647, _3370.z, fma(_2646, _3370.y, _3370.x * _2645)) + _3370.w) / _3432;
                                float _3492 = (fma(_2647, _3386.z, fma(_2646, _3386.y, _3386.x * _2645)) + _3386.w) / _3432;
                                float _3496 = 1.0 - dot(vec2(_3491, _3492), vec2(_3491, _3492));
                                float _4648 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3497 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3498 = _3497 * (((isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0))) * _3474) / ((_3487 * 0.699999988079071044921875) + 1.0));
                                float _3510 = exp2(log2(1.0 / ((_3487 * 3.5) + 5.0)) * 0.25);
                                float _3511 = 1.0 - _931;
                                float _3518 = sqrt(1.0 - ((1.0 - (_3511 * _3511)) * (1.0 - (_3510 * _3510))));
                                float _3519 = _3518 * _3518;
                                float _3520 = _3519 * _3519;
                                float _3521 = _3467 - _2939;
                                float _3522 = _3468 - _2940;
                                float _3523 = _3469 - _2941;
                                float _3527 = inversesqrt(dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523)));
                                float _3531 = dot(vec3(_856, _859, _862), vec3((-0.0) - _2939, (-0.0) - _2940, (-0.0) - _2941));
                                float _4659 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3534 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3535 = dot(vec3(_856, _859, _862), vec3(_3527 * _3521, _3527 * _3522, _3527 * _3523));
                                float _4670 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3538 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3542 = ((_3538 * _3538) * (_3520 + (-1.0))) + 1.0;
                                float _3543 = _3480 * _3519;
                                float _3544 = _3543 * _3543;
                                float _3550 = ((1.0 - _3544) * dot(vec3(_856, _859, _862), vec3(_3467, _3468, _3469))) + _3544;
                                float _4681 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3552 = 1.0 - _3519;
                                float _3562 = (0.5 / (((_3551 * ((_3534 * _3552) + _3519)) + 9.9999999392252902907785028219223e-09) + (((_3551 * _3552) + _3519) * _3534))) * _3551;
                                float _4692 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3572 = (_3497 * _3474) * (((_3520 * 3.1415927410125732421875) * (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) / ((_3542 * _3542) * ((_3487 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3498 * _3343.y;
                                frontier_phi_83_pred_1 = _3498 * _3343.x;
                                frontier_phi_83_pred_2 = _3572 * _3355.z;
                                frontier_phi_83_pred_3 = _3572 * _3355.y;
                                frontier_phi_83_pred_4 = _3572 * _3355.x;
                                frontier_phi_83_pred_5 = _3498 * _3343.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3580 = frontier_phi_83_pred;
                            _3579 = frontier_phi_83_pred_1;
                            _3578 = frontier_phi_83_pred_2;
                            _3577 = frontier_phi_83_pred_3;
                            _3576 = frontier_phi_83_pred_4;
                            _3581 = frontier_phi_83_pred_5;
                            _3285 = _3579 + _3298;
                            _3286 = _3580 + _3299;
                            _3287 = _3581 + _3300;
                            _3282 = _3576 + _3295;
                            _3283 = _3577 + _3296;
                            _3284 = _3578 + _3297;
                            if (_3302 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3302;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3287;
                        frontier_phi_77_pred_1 = _3286;
                        frontier_phi_77_pred_2 = _3285;
                        frontier_phi_77_pred_3 = _3284;
                        frontier_phi_77_pred_4 = _3283;
                        frontier_phi_77_pred_5 = _3282;
                    }
                    _2924 = frontier_phi_77_pred;
                    _2922 = frontier_phi_77_pred_1;
                    _2920 = frontier_phi_77_pred_2;
                    _2918 = frontier_phi_77_pred_3;
                    _2916 = frontier_phi_77_pred_4;
                    _2914 = frontier_phi_77_pred_5;
                    uint _3080 = _3079 + 1u;
                    if (_3080 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3073 = _2914;
                        _3074 = _2916;
                        _3075 = _2918;
                        _3076 = _2920;
                        _3077 = _2922;
                        _3078 = _2924;
                        _3079 = _3080;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2918;
                frontier_phi_58_59_ladder_1 = _2924;
                frontier_phi_58_59_ladder_2 = _2922;
                frontier_phi_58_59_ladder_3 = _2920;
                frontier_phi_58_59_ladder_4 = _2916;
                frontier_phi_58_59_ladder_5 = _2914;
            }
            else
            {
                frontier_phi_58_59_ladder = _2796;
                frontier_phi_58_59_ladder_1 = _2802;
                frontier_phi_58_59_ladder_2 = _2800;
                frontier_phi_58_59_ladder_3 = _2798;
                frontier_phi_58_59_ladder_4 = _2794;
                frontier_phi_58_59_ladder_5 = _2792;
            }
            _2913 = frontier_phi_58_59_ladder_5;
            _2915 = frontier_phi_58_59_ladder_4;
            _2917 = frontier_phi_58_59_ladder;
            _2919 = frontier_phi_58_59_ladder_3;
            _2921 = frontier_phi_58_59_ladder_2;
            _2923 = frontier_phi_58_59_ladder_1;
        }
        float _2928 = isnan(1.0) ? _915 : (isnan(_915) ? 1.0 : min(_915, 1.0));
        _2704 = (_2928 * _2919) + _2137;
        _2706 = (_2928 * _2921) + _2139;
        _2708 = (_2928 * _2923) + _2141;
        _2710 = ((_2913 * _899) * _2928) + _2485;
        _2712 = ((_2915 * _901) * _2928) + _2487;
        _2714 = ((_2917 * _902) * _2928) + _2489;
    }
    else
    {
        _2704 = _2137;
        _2706 = _2139;
        _2708 = _2141;
        _2710 = _2485;
        _2712 = _2487;
        _2714 = _2489;
    }
    float _4708 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4719 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4730 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2731 = ((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2704 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _915))) + ((_2710 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1754)) * cbPerFrame._m0[3u].x);
    float _2732 = ((isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2706 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _915))) + ((_2712 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1754)) * cbPerFrame._m0[3u].x);
    float _2733 = ((isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2708 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _915))) + ((_2714 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1754)) * cbPerFrame._m0[3u].x);
    uint _2734 = _255 + 6u;
    float _2742 = _837 / cbSceneParam._m0[86u].x;
    float _2743 = _838 / cbSceneParam._m0[86u].y;
    vec4 _2757 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2742, _2743, (log2((isnan(cbSceneParam._m0[77u].w) ? _760 : (isnan(_760) ? cbSceneParam._m0[77u].w : min(_760, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2759 = _2757.x;
    float _2760 = _2757.y;
    float _2761 = _2757.z;
    float _2762 = _2757.w;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    if (_760 > cbSceneParam._m0[78u].w)
    {
        float _2817 = isnan(_760) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _760 : min(cbSceneParam._m0[80u].w, _760));
        float _2818 = _2817 / _760;
        float _2829 = _2818 * _810;
        float _2830 = _811 * _2818;
        float _2831 = (-0.0) - _2830;
        float _2833 = _2818 * _812;
        float _2835 = (cbSceneParam._m0[77u].w * _2831) / _2817;
        float _2836 = _2835 + cbSceneParam._m0[79u].w;
        float _2837 = cbSceneParam._m0[79u].w - _2830;
        float _2843 = sqrt(((_2829 * _2829) + (_2830 * _2830)) + (_2833 * _2833));
        float _2846 = (1.0 - (cbSceneParam._m0[77u].w / _2817)) * _2843;
        float _2851 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2853 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3030;
        if (abs((_2831 - _2835) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3030 = ((((_2836 > 0.0) ? exp2(_2851 * _2836) : (2.0 - exp2(_2853 * _2836))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2846;
        }
        else
        {
            float _2974 = 1.0 / cbSceneParam._m0[80u].x;
            float _2975 = isnan(_2837) ? _2836 : (isnan(_2836) ? _2837 : max(_2836, _2837));
            float _2976 = isnan(_2837) ? _2836 : (isnan(_2836) ? _2837 : min(_2836, _2837));
            float _2985 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : min(_2975, 0.0));
            float _2986 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : min(_2976, 0.0));
            _3030 = ((abs(_2843 / _2831) * cbSceneParam._m0[80u].y) * ((((_2985 - _2986) * 2.0) - ((exp2(_2851 * (isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0)))) - exp2(_2851 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0))))) * _2974)) - ((exp2(_2853 * _2985) - exp2(_2853 * _2986)) * _2974))) + (_2846 * cbSceneParam._m0[80u].z);
        }
        vec4 _3032 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2742, _2743, 1.0), 0.0);
        float _3041 = exp2((_3030 * (-1.44269502162933349609375)) * (1.0 - _3032.w));
        float _3042 = log2(_3041);
        float _3058 = log2(_2762);
        _2855 = (exp2(_3058 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].x)) * _3032.x) / cbSceneParam._m0[78u].x)) + _2759;
        _2857 = (exp2(_3058 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].y)) * _3032.y) / cbSceneParam._m0[78u].y)) + _2760;
        _2859 = (exp2(_3058 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].z)) * _3032.z) / cbSceneParam._m0[78u].z)) + _2761;
        _2861 = _3041 * _2762;
    }
    else
    {
        _2855 = _2759;
        _2857 = _2760;
        _2859 = _2761;
        _2861 = _2762;
    }
    bool _3068;
    vec4 _2871;
    vec4 _2893;
    float _2895;
    float _2899;
    float _2900;
    float _2901;
    float _2902;
    bool _2912;
    for (;;)
    {
        _2871 = cbMatDynParam._m0[0u];
        float _2873 = roundEven(_2871.y);
        bool _2874 = _2873 == 3.0;
        float _2875 = log2(_2861);
        float _2882 = exp2(_2875 * cbSceneParam._m0[78u].x) * _2731;
        float _2883 = exp2(_2875 * cbSceneParam._m0[78u].y) * _2732;
        float _2884 = exp2(_2875 * cbSceneParam._m0[78u].z) * _2733;
        float _2891 = _826 + (-0.5);
        _2893 = cbMtdParam._m0[1u];
        _2895 = _2893.y * _2891;
        float _2898 = (_2873 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2899 = _2898 * (_2874 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2855)));
        _2900 = _2898 * (_2874 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2857)));
        _2901 = _2898 * (_2874 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2859)));
        _2902 = _2891 * 0.999000012874603271484375;
        _2912 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2912)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2902) < 0.5)
            {
                _3068 = true;
                break;
            }
        }
        uint _3009 = _875 + uint(_2871.w);
        if ((cbInstanceData._m0[_3009].w < 1.0) && ((cbInstanceData._m0[_3009].w + _2902) < 0.5))
        {
            _3068 = true;
            break;
        }
        if ((_2895 + 1.0) < _2893.x)
        {
            _3068 = true;
            break;
        }
        _3068 = false;
        break;
    }
    float _3273;
    if (_3068)
    {
        discard_state = true;
        _3273 = 0.0;
    }
    else
    {
        _3273 = cbInstanceData._m0[_2734].w;
    }
    SV_Target.x = _2899;
    SV_Target.y = _2900;
    SV_Target.z = _2901;
    SV_Target.w = _3273;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2734].w;
    discard_exit();
}


