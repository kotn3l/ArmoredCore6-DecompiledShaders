#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1258;
float _3638;
float _3639;
float _3640;
float _3641;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _286.x * cbMtdParam._m0[9u].x;
    float _293 = _286.y * cbMtdParam._m0[9u].y;
    float _294 = _286.z * cbMtdParam._m0[9u].z;
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _363 = _359.z;
    float _367 = (_359.x * 2.0) + (-1.0);
    float _368 = (_359.y * 2.0) + (-1.0);
    float _369 = dot(vec2(_367, _368), vec2(_367, _368));
    float _3650 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _375 = sqrt(1.0 - (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))));
    float _380 = _367 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_333.x * 2.0) + (-1.0)));
    float _381 = _368 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_333.y * 2.0) + (-1.0)));
    float _384 = fma(_375, _235, fma(_381, _242, _380 * _228));
    float _387 = fma(_375, _236, fma(_381, _243, _380 * _229));
    float _390 = fma(_375, _237, fma(_381, _244, _380 * _230));
    float _394 = inversesqrt(dot(vec3(_384, _387, _390), vec3(_384, _387, _390)));
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _432 = _430.x;
    float _433 = 1.0 - _432;
    float _440 = ((_432 - _433) * cbMtdParam._m0[24u].z) + _433;
    float _442 = (cbMtdParam._m0[19u].x + dot(vec4(_394 * _384, _394 * _387, _394 * _390, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_440 * cbMtdParam._m0[21u].z);
    float _3661 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _445 = (-0.0) - cbMtdParam._m0[24u].x;
    float _447 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
    float _455 = _443 - ((_443 * TEXCOORD_8.x) * _448);
    float _456 = _443 - ((_443 * TEXCOORD_8.y) * _448);
    float _457 = _443 - ((_443 * TEXCOORD_8.z) * _448);
    float _464 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _468 = ((isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : min(_464, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _476 = (_468 - (((_440 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _468))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3692 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _481 = ((_455 * ((_313.x * cbMtdParam._m0[18u].x) - _292)) * _477) + _292;
    float _482 = ((_456 * ((_313.y * cbMtdParam._m0[18u].y) - _293)) * _477) + _293;
    float _483 = ((_457 * ((_313.z * cbMtdParam._m0[18u].z) - _294)) * _477) + _294;
    vec4 _495 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _497 = _495.x;
    float _498 = 1.0 - _497;
    float _527 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_497 - _498) * cbMtdParam._m0[24u].w) + _498) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3703 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _536 = ((((cbMtdParam._m0[10u].x - _481) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _528) + _481;
    float _537 = ((((cbMtdParam._m0[10u].y - _482) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _528) + _482;
    float _538 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _483)) * _528) + _483;
    vec4 _551 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _553 = _551.x;
    float _556 = _553 - ((_553 * _455) * _477);
    float _558 = _556 - (_556 * _528);
    float _563 = (((_333.z - _363) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _363;
    vec4 _577 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _584 = (_577.x * 2.0) + (-1.0);
    float _585 = (_577.y * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _3714 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _595 = (((_577.z - _563) * _455) * _477) + _563;
    float _598 = ((cbMtdParam._m0[23u].y - _595) * _528) + _595;
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _623 = (_617.x * 2.0) + (-1.0);
    float _624 = (_617.y * 2.0) + (-1.0);
    float _625 = dot(vec2(_623, _624), vec2(_623, _624));
    float _3725 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _645 = (((cbMtdParam._m0[21u].x * _380) + ((_584 - _380) * _455)) * _477) + _380;
    float _646 = (((cbMtdParam._m0[21u].x * _381) + ((_585 - _381) * _456)) * _477) + _381;
    float _647 = (((sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) - _375) * _457) * _477) + _375;
    float _658 = (((_623 - _645) + (_645 * cbMtdParam._m0[22u].z)) * _528) + _645;
    float _659 = (((_624 - _646) + (_646 * cbMtdParam._m0[22u].z)) * _528) + _646;
    float _660 = ((sqrt(1.0 - (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) - _647) * _528) + _647;
    float _662 = cbMtdParam._m0[22u].x + _359.w;
    float _665 = fma(_660, _235, fma(_659, _242, _658 * _228));
    float _668 = fma(_660, _236, fma(_659, _243, _658 * _229));
    float _671 = fma(_660, _237, fma(_659, _244, _658 * _230));
    float _675 = inversesqrt(dot(vec3(_665, _668, _671), vec3(_665, _668, _671)));
    float _676 = _675 * _665;
    float _677 = _675 * _668;
    float _678 = _675 * _671;
    float _3736 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _679 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3758 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3769 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3780 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3791 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _684 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _698 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _748 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _738);
    float _749 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _738);
    float _750 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _738);
    float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
    float _755 = _748 * _754;
    float _756 = _749 * _754;
    float _757 = _750 * _754;
    vec4 _762 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _764 = _762.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _939 = sqrt(((_748 * _748) + (_749 * _749)) + (_750 * _750));
        float _945 = (cbMatDynParam._m0[5u].x * _939) + cbMatDynParam._m0[5u].y;
        float _3802 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _950 = (cbMatDynParam._m0[5u].z * _939) + cbMatDynParam._m0[5u].w;
        float _3813 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) - _946)) + _946) < ((_764 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _776 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _777 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _797 = fma(_678, cbSceneParam._m0[5u].z, fma(_677, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _676));
    float _800 = fma(_678, cbSceneParam._m0[6u].z, fma(_677, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _676));
    float _803 = fma(_678, cbSceneParam._m0[7u].z, fma(_677, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _676));
    uint _816 = _247 + 9u;
    uint _817 = _816 + uint(cbMatDynParam._m0[0u].w);
    float _823 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_817].x;
    float _824 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_817].y;
    float _825 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_817].z;
    float _3824 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _829 = 1.0 - _684;
    float _830 = _826 * _829;
    float _831 = _827 * _829;
    float _832 = _828 * _829;
    float _837 = (_826 + (-0.039999999105930328369140625)) * _684;
    float _838 = (_827 + (-0.039999999105930328369140625)) * _684;
    float _839 = (_828 + (-0.039999999105930328369140625)) * _684;
    float _840 = _837 + 0.039999999105930328369140625;
    float _842 = _838 + 0.039999999105930328369140625;
    float _843 = _839 + 0.039999999105930328369140625;
    vec4 _852 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _776, cbSceneParam._m0[86u].y * _777));
    float _856 = ((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * TEXCOORD_5.w) * _852.x;
    float _857 = dot(vec3(_676, _677, _678), vec3(_755, _756, _757));
    float _860 = _857 * 2.0;
    float _864 = (_860 * _676) - _755;
    float _865 = (_860 * _677) - _756;
    float _866 = (_860 * _678) - _757;
    float _870 = abs(dot(vec3(_755, _756, _757), vec3(_676, _677, _678)));
    float _3857 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _872 = sqrt(_679);
    float _885 = exp2((_872 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_872 * 3.0));
    float _891 = (1.0 - _885) * ((_872 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _892 = _885 * _872;
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1257;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _982 = fma(_928, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920));
        float _986 = fma(_928, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920));
        float _990 = fma(_928, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920));
        float _1015 = _920 + _676;
        float _1016 = _924 + _677;
        float _1017 = _928 + _678;
        float _1027 = fma(_1017, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015)) - _982;
        float _1028 = fma(_1017, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015)) - _986;
        float _1029 = fma(_1017, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015)) - _990;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_982 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_986 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[34u].z) + ((((((_990 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1085 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1051.x + (-0.5));
        float _1087 = _1085 * (_1051.y + (-0.5));
        float _1088 = _1085 * (_1051.z + (-0.5));
        float _1095 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1058.x + (-0.5));
        float _1097 = _1095 * (_1058.y + (-0.5));
        float _1098 = _1095 * (_1058.z + (-0.5));
        float _1105 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1065.x + (-0.5));
        float _1107 = _1105 * (_1065.y + (-0.5));
        float _1108 = _1105 * (_1065.z + (-0.5));
        float _1115 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1072.x + (-0.5));
        float _1117 = _1115 * (_1072.y + (-0.5));
        float _1118 = _1115 * (_1072.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1139 = (dot(vec3(_676, _677, _678), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1149 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3905 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1151 + 1.0))) + _1156) * _1119;
        float _1166 = _1087 * 0.5;
        float _1167 = _1097 * 0.5;
        float _1168 = _1107 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_676, _677, _678), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3938 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1193 + 1.0))) + _1198) * _1120;
        float _1208 = _1088 * 0.5;
        float _1209 = _1098 * 0.5;
        float _1210 = _1108 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_676, _677, _678), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3971 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1235 + 1.0))) + _1240) * _1121;
        _1257 = _1088;
        _1259 = _1087;
        _1260 = _1086;
        _1261 = _1098;
        _1262 = _1097;
        _1263 = _1096;
        _1264 = _1108;
        _1265 = _1107;
        _1266 = _1106;
        _1267 = _1121;
        _1268 = _1120;
        _1269 = _1119;
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _1258;
        _1259 = _1258;
        _1260 = _1258;
        _1261 = _1258;
        _1262 = _1258;
        _1263 = _1258;
        _1264 = _1258;
        _1265 = _1258;
        _1266 = _1258;
        _1267 = _1258;
        _1268 = _1258;
        _1269 = _1258;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1300 = fma(_928, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920));
        float _1304 = fma(_928, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920));
        float _1308 = fma(_928, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920));
        float _1331 = _920 + _676;
        float _1332 = _924 + _677;
        float _1333 = _928 + _678;
        float _1343 = fma(_1333, cbModelParam._m0[30u].z, fma(_1332, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1331)) - _1300;
        float _1344 = fma(_1333, cbModelParam._m0[31u].z, fma(_1332, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1331)) - _1304;
        float _1345 = fma(_1333, cbModelParam._m0[32u].z, fma(_1332, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1331)) - _1308;
        float _1349 = inversesqrt(dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345)));
        float _1362 = ((_1349 * _1343) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1300 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1349 * _1344) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1304 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1349 * _1345) / cbModelParam._m0[35u].z) + ((((((_1308 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        float _1399 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1366.x + (-0.5));
        float _1401 = _1399 * (_1366.y + (-0.5));
        float _1402 = _1399 * (_1366.z + (-0.5));
        float _1409 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1373.x + (-0.5));
        float _1411 = _1409 * (_1373.y + (-0.5));
        float _1412 = _1409 * (_1373.z + (-0.5));
        float _1419 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1380.x + (-0.5));
        float _1421 = _1419 * (_1380.y + (-0.5));
        float _1422 = _1419 * (_1380.z + (-0.5));
        float _1429 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1387.x + (-0.5));
        float _1431 = _1429 * (_1387.y + (-0.5));
        float _1432 = _1429 * (_1387.z + (-0.5));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = _1400 * 0.5;
        float _1437 = _1410 * 0.5;
        float _1438 = _1420 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_676, _677, _678), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4034 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1463 + 1.0))) + _1468) * _1433;
        float _1478 = _1401 * 0.5;
        float _1479 = _1411 * 0.5;
        float _1480 = _1421 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_676, _677, _678), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4067 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1505 + 1.0))) + _1510) * _1434;
        float _1520 = _1402 * 0.5;
        float _1521 = _1412 * 0.5;
        float _1522 = _1422 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_676, _677, _678), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4100 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1547 + 1.0))) + _1552) * _1435;
        _1569 = _1402;
        _1570 = _1401;
        _1571 = _1400;
        _1572 = _1412;
        _1573 = _1411;
        _1574 = _1410;
        _1575 = _1422;
        _1576 = _1421;
        _1577 = _1420;
        _1578 = _1435;
        _1579 = _1434;
        _1580 = _1433;
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
    }
    else
    {
        _1569 = _1258;
        _1570 = _1258;
        _1571 = _1258;
        _1572 = _1258;
        _1573 = _1258;
        _1574 = _1258;
        _1575 = _1258;
        _1576 = _1258;
        _1577 = _1258;
        _1578 = _1258;
        _1579 = _1258;
        _1580 = _1258;
        _1581 = 0.0;
        _1582 = 0.0;
        _1583 = 0.0;
    }
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1270)) + _1270;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1271)) + _1271;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1272)) + _1272;
    float _1616 = fma(_1595, cbSceneParam._m0[89u].z, fma(_1594, cbSceneParam._m0[89u].y, _1593 * cbSceneParam._m0[89u].x));
    float _1619 = fma(_1595, cbSceneParam._m0[90u].z, fma(_1594, cbSceneParam._m0[90u].y, _1593 * cbSceneParam._m0[90u].x));
    float _1622 = fma(_1595, cbSceneParam._m0[91u].z, fma(_1594, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1593));
    float _1637 = _864 * 0.5;
    float _1638 = _865 * 0.5;
    float _1639 = _866 * 0.5;
    float _1640 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1643 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1646 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1680;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1653 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1257, _1261, _1264, _1267));
        float _1657 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1661 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1668 = dot(vec4(cbModelParam._m0[39u]), vec4(_1637, _1638, _1639, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1691;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1682 = dot(vec4(cbModelParam._m0[40u]), vec4(_1637, _1638, _1639, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1695 = (_1691 * cbModelParam._m0[1u].x) + (_1680 * (1.0 - cbModelParam._m0[1u].x));
    float _1705 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _679);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1705 : min(cbModelParam._m0[25u].z, _1705));
    float _1786;
    float _1788;
    float _1790;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1753 = fma(_928, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920)) + cbModelParam._m0[13u].w;
        float _1757 = fma(_928, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920)) + cbModelParam._m0[14u].w;
        float _1761 = fma(_928, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920)) + cbModelParam._m0[15u].w;
        float _1764 = fma(_866, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864));
        float _1767 = fma(_866, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864));
        float _1770 = fma(_866, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864));
        float _1798;
        if (_1764 > 0.0)
        {
            _1798 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1798 = frontier_phi_17_15_ladder;
        }
        float _2001;
        if (_1767 > 0.0)
        {
            _2001 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2001 = frontier_phi_26_22_ladder;
        }
        float _2255;
        if (_1770 > 0.0)
        {
            _2255 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2255 = frontier_phi_38_33_ladder;
        }
        float _2257 = isnan(_2001) ? _1798 : (isnan(_1798) ? _2001 : min(_1798, _2001));
        float _2258 = isnan(_2255) ? _2257 : (isnan(_2257) ? _2255 : min(_2257, _2255));
        float _2262 = (_2258 * _1764) + _1753;
        float _2263 = (_2258 * _1767) + _1757;
        float _2264 = (_2258 * _1770) + _1761;
        float _2265 = _2258 * 9.9999997473787516355514526367188e-05;
        float _2267 = (-1.0) - _2265;
        float _2269 = _2265 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2264 > _2269) || ((_2264 < _2267) || ((_2263 > _2269) || ((_2263 < _2267) || ((_2262 < _2267) || (_2262 > _2269))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2392 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2264, cbModelParam._m0[9u].z, fma(_2263, cbModelParam._m0[9u].y, _2262 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2264, cbModelParam._m0[10u].z, fma(_2263, cbModelParam._m0[10u].y, _2262 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2264, cbModelParam._m0[11u].z, fma(_2263, cbModelParam._m0[11u].y, _2262 * cbModelParam._m0[11u].x))), _1706);
            frontier_phi_16_38_ladder = _2392.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2392.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2392.x * cbModelParam._m0[1u].y;
        }
        _1786 = frontier_phi_16_38_ladder_2;
        _1788 = frontier_phi_16_38_ladder_1;
        _1790 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_864, _865, _866), _1706);
        _1786 = _1774.x * cbModelParam._m0[1u].y;
        _1788 = _1774.y * cbModelParam._m0[1u].y;
        _1790 = _1774.z * cbModelParam._m0[1u].y;
    }
    float _1794 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _679);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1794 : min(cbModelParam._m0[25u].w, _1794));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1848 = fma(_928, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920)) + cbModelParam._m0[21u].w;
        float _1852 = fma(_928, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920)) + cbModelParam._m0[22u].w;
        float _1856 = fma(_928, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920)) + cbModelParam._m0[23u].w;
        float _1859 = fma(_866, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864));
        float _1862 = fma(_866, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864));
        float _1865 = fma(_866, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864));
        float _2006;
        if (_1859 > 0.0)
        {
            _2006 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2006 = frontier_phi_28_24_ladder;
        }
        float _2282;
        if (_1862 > 0.0)
        {
            _2282 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2282 = frontier_phi_40_35_ladder;
        }
        float _2495;
        if (_1865 > 0.0)
        {
            _2495 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2495 = frontier_phi_49_46_ladder;
        }
        float _2497 = isnan(_2282) ? _2006 : (isnan(_2006) ? _2282 : min(_2006, _2282));
        float _2498 = isnan(_2495) ? _2497 : (isnan(_2497) ? _2495 : min(_2497, _2495));
        float _2502 = (_2498 * _1859) + _1848;
        float _2503 = (_2498 * _1862) + _1852;
        float _2504 = (_2498 * _1865) + _1856;
        float _2505 = _2498 * 9.9999997473787516355514526367188e-05;
        float _2506 = (-1.0) - _2505;
        float _2508 = _2505 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2504 > _2508) || ((_2504 < _2506) || ((_2503 > _2508) || ((_2503 < _2506) || ((_2502 < _2506) || (_2502 > _2508))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2504, cbModelParam._m0[17u].z, fma(_2503, cbModelParam._m0[17u].y, _2502 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2504, cbModelParam._m0[18u].z, fma(_2503, cbModelParam._m0[18u].y, _2502 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2504, cbModelParam._m0[19u].z, fma(_2503, cbModelParam._m0[19u].y, _2502 * cbModelParam._m0[19u].x))), _1795);
            frontier_phi_25_49_ladder = _2703.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2703.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2703.x * cbModelParam._m0[1u].z;
        }
        _1884 = frontier_phi_25_49_ladder_2;
        _1886 = frontier_phi_25_49_ladder_1;
        _1888 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_864, _865, _866), _1795);
        _1884 = _1868.x * cbModelParam._m0[1u].z;
        _1886 = _1868.y * cbModelParam._m0[1u].z;
        _1888 = _1868.z * cbModelParam._m0[1u].z;
    }
    float _1901 = (((_891 * _840) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1884 - _1786)) + _1786);
    float _1903 = (((_891 * _842) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1886 - _1788)) + _1788);
    float _1905 = (((_891 * _843) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1888 - _1790)) + _1790);
    float _1908 = fma(_1905, cbSceneParam._m0[89u].z, fma(_1903, cbSceneParam._m0[89u].y, _1901 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1905, cbSceneParam._m0[90u].z, fma(_1903, cbSceneParam._m0[90u].y, _1901 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1905, cbSceneParam._m0[91u].z, fma(_1903, cbSceneParam._m0[91u].y, _1901 * cbSceneParam._m0[91u].x));
    uvec4 _1924 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1926 = _1924.x * 14u;
    uint _1927 = _1926 + 13u;
    float _1934 = _856 + (-1.0);
    float _1939 = (cbLight._m0[_1927].x * _1934) + 1.0;
    float _1940 = (cbLight._m0[_1927].y * _1934) + 1.0;
    float _1941 = (cbLight._m0[_1927].z * _1934) + 1.0;
    float _1942 = (cbLight._m0[_1927].w * _1934) + 1.0;
    uint _1943 = _1926 + 5u;
    float _1949 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
    uint _1953 = _1926 + 4u;
    float _1960 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
    uint _1964 = _1926 | 1u;
    float _1975 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_676, _677, _678));
    float _1978 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_676, _677, _678));
    float _4236 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _4247 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1983 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _1985 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _1992 = ((cbLight._m0[_1943].x * _1949) * _1985) + ((cbLight._m0[_1953].x * _1960) * _1983);
    float _1993 = ((_1949 * cbLight._m0[_1943].y) * _1985) + ((_1960 * cbLight._m0[_1953].y) * _1983);
    float _1994 = ((_1949 * cbLight._m0[_1943].z) * _1985) + ((_1960 * cbLight._m0[_1953].z) * _1983);
    uvec4 _1998 = floatBitsToUint(cbLight._m0[_1926 + 12u]);
    bool _2000 = _1998.x == 0u;
    float _2011;
    float _2013;
    float _2015;
    if (_2000)
    {
        _2011 = _1992;
        _2013 = _1993;
        _2015 = _1994;
    }
    else
    {
        uint _2019 = _1926 + 6u;
        float _2035 = (dot(vec3(cbLight._m0[_1926 + 2u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2036 = _2035 * _2035;
        float _4258 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2037 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2038 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2011 = (((cbLight._m0[_2019].x * 0.3183098733425140380859375) * _2037) * _2038) + _1992;
        _2013 = (((cbLight._m0[_2019].y * 0.3183098733425140380859375) * _2037) * _2038) + _1993;
        _2015 = (((cbLight._m0[_2019].z * 0.3183098733425140380859375) * _2037) * _2038) + _1994;
    }
    bool _2018 = _1998.y == 0u;
    float _2056;
    float _2058;
    float _2060;
    if (_2018)
    {
        _2056 = _2011;
        _2058 = _2013;
        _2060 = _2015;
    }
    else
    {
        uint _2226 = _1926 + 7u;
        float _2242 = (dot(vec3(cbLight._m0[_1926 + 3u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2243 = _2242 * _2242;
        float _4274 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2244 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2245 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2056 = (((cbLight._m0[_2226].x * 0.3183098733425140380859375) * _2244) * _2245) + _2011;
        _2058 = (((cbLight._m0[_2226].y * 0.3183098733425140380859375) * _2244) * _2245) + _2013;
        _2060 = (((cbLight._m0[_2226].z * 0.3183098733425140380859375) * _2244) * _2245) + _2015;
    }
    uint _2063 = _1926 + 8u;
    float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _679) * 0.949999988079071044921875);
    float _2077 = _2076 * _2076;
    float _2078 = cbLight._m0[_1926].x + _755;
    float _2079 = cbLight._m0[_1926].y + _756;
    float _2080 = cbLight._m0[_1926].z + _757;
    float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
    float _2085 = _2084 * _2078;
    float _2086 = _2084 * _2079;
    float _2087 = _2084 * _2080;
    float _2088 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1926].xyz));
    float _4290 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2092 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2093 = dot(vec3(_676, _677, _678), vec3(_2085, _2086, _2087));
    float _4312 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2097 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2085, _2086, _2087));
    float _4323 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = _2077 * _2077;
    float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
    float _2113 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
    float _2114 = 0.959999978542327880859375 - _837;
    float _2116 = 0.959999978542327880859375 - _838;
    float _2117 = 0.959999978542327880859375 - _839;
    float _2124 = 1.0 - _2077;
    float _2135 = (0.5 / (((_2092 * ((_2091 * _2124) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2124) + _2077) * _2091))) * _2091;
    float _4334 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2137 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
    uint _2148 = _1926 + 9u;
    float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1964].w)) * _679) * 0.949999988079071044921875);
    float _2160 = _2159 * _2159;
    float _2161 = cbLight._m0[_1964].x + _755;
    float _2162 = cbLight._m0[_1964].y + _756;
    float _2163 = cbLight._m0[_1964].z + _757;
    float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
    float _2168 = _2167 * _2161;
    float _2169 = _2167 * _2162;
    float _2170 = _2167 * _2163;
    float _2171 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1964].xyz));
    float _4345 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2175 = dot(vec3(_676, _677, _678), vec3(_2168, _2169, _2170));
    float _4356 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_2168, _2169, _2170));
    float _4367 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2160 * _2160;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2194 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
    float _2201 = 1.0 - _2160;
    float _2211 = (0.5 / (((_2092 * ((_2174 * _2201) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2201) + _2160) * _2174))) * _2174;
    float _4378 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2213 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    float _2223 = (((((_2194 * _2114) + _840) * cbLight._m0[_2148].x) * _2213) * _1949) + (((((_2113 * _2114) + _840) * cbLight._m0[_2063].x) * _2137) * _1960);
    float _2224 = (((((_2194 * _2116) + _842) * cbLight._m0[_2148].y) * _2213) * _1949) + (((((_2113 * _2116) + _842) * cbLight._m0[_2063].y) * _2137) * _1960);
    float _2225 = (((((_2194 * _2117) + _843) * cbLight._m0[_2148].z) * _2213) * _1949) + (((((_2113 * _2117) + _843) * cbLight._m0[_2063].z) * _2137) * _1960);
    float _2287;
    float _2289;
    float _2291;
    if (_2000)
    {
        _2287 = _2223;
        _2289 = _2224;
        _2291 = _2225;
    }
    else
    {
        uint _2293 = _1926 + 2u;
        uint _2297 = _1926 + 10u;
        float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _679) * 0.949999988079071044921875);
        float _2312 = _2311 * _2311;
        float _2313 = cbLight._m0[_2293].x + _755;
        float _2314 = cbLight._m0[_2293].y + _756;
        float _2315 = cbLight._m0[_2293].z + _757;
        float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
        float _2320 = _2319 * _2313;
        float _2321 = _2319 * _2314;
        float _2322 = _2319 * _2315;
        float _2323 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2293].xyz));
        float _4389 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2327 = dot(vec3(_676, _677, _678), vec3(_2320, _2321, _2322));
        float _4400 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2331 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2320, _2321, _2322));
        float _4411 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2335 = _2312 * _2312;
        float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
        float _2346 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
        float _2353 = 1.0 - _2312;
        float _2363 = (0.5 / (((_2092 * ((_2326 * _2353) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2353) + _2312) * _2326))) * _2326;
        float _4422 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2365 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
        float _2366 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2287 = (((((_2346 * _2114) + _840) * cbLight._m0[_2297].x) * _2365) * _2366) + _2223;
        _2289 = (((((_2346 * _2116) + _842) * cbLight._m0[_2297].y) * _2365) * _2366) + _2224;
        _2291 = (((((_2346 * _2117) + _843) * cbLight._m0[_2297].z) * _2365) * _2366) + _2225;
    }
    float _2401;
    float _2403;
    float _2405;
    if (_2018)
    {
        _2401 = _2287;
        _2403 = _2289;
        _2405 = _2291;
    }
    else
    {
        uint _2412 = _1926 + 3u;
        uint _2416 = _1926 + 11u;
        float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2412].w)) * _679) * 0.949999988079071044921875);
        float _2431 = _2430 * _2430;
        float _2432 = cbLight._m0[_2412].x + _755;
        float _2433 = cbLight._m0[_2412].y + _756;
        float _2434 = cbLight._m0[_2412].z + _757;
        float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
        float _2439 = _2438 * _2432;
        float _2440 = _2438 * _2433;
        float _2441 = _2438 * _2434;
        float _2442 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2412].xyz));
        float _4438 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2446 = dot(vec3(_676, _677, _678), vec3(_2439, _2440, _2441));
        float _4449 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2450 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_2439, _2440, _2441));
        float _4460 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2454 = _2431 * _2431;
        float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
        float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
        float _2472 = 1.0 - _2431;
        float _2482 = (0.5 / (((_2092 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2472) + _2431) * _2445))) * _2445;
        float _4471 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2484 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
        float _2485 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2401 = (((((_2465 * _2114) + _840) * cbLight._m0[_2416].x) * _2484) * _2485) + _2287;
        _2403 = (((((_2465 * _2116) + _842) * cbLight._m0[_2416].y) * _2484) * _2485) + _2289;
        _2405 = (((((_2465 * _2117) + _843) * cbLight._m0[_2416].z) * _2484) * _2485) + _2291;
    }
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    if (_1924.y == 0u)
    {
        float _2560 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2561 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2560;
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2560;
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2560;
        uvec4 _2575 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2576 = _2575.x;
        uint _2587 = uint((float(_2575.y) * floor(float(uint(cbSceneParam._m0[85u].y * _777) / _2576))) + floor(float(uint(cbSceneParam._m0[85u].x * _776) / _2576)));
        float _2597 = (log2(_2563 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2598 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        uint _2601 = uint(isnan(14.0) ? _2598 : (isnan(_2598) ? 14.0 : min(_2598, 14.0)));
        uvec4 _2606 = texelFetch(g_lightClusterGridBuffer, int(((_2601 << 2u) + (_2587 << 6u)) >> 2u));
        uint _2607 = _2606.x;
        uint _2608 = _2575.z;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        if (((((1u << ((_2608 >> 4u) & 15u)) + 4294967295u) & _2607) == 0u) || ((_2608 & 240u) == 0u))
        {
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
        }
        else
        {
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            uint _2866 = 0u;
            uint _2875;
            bool _2876;
            for (;;)
            {
                _2875 = texelFetch(g_lightClassification, int((((_2601 << 5u) + (_2587 << 9u)) + (_2866 << 2u)) >> 2u)).x;
                _2876 = _2875 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2876)
                {
                    frontier_phi_66_pred = _2860;
                    frontier_phi_66_pred_1 = _2865;
                    frontier_phi_66_pred_2 = _2864;
                    frontier_phi_66_pred_3 = _2863;
                    frontier_phi_66_pred_4 = _2862;
                    frontier_phi_66_pred_5 = _2861;
                }
                else
                {
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    uint _3011;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2875;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    for (;;)
                    {
                        uint _3015 = uint(findLSB(_3011)) + (_2866 << 5u);
                        uint _3012 = (_3011 + 4294967295u) & _3011;
                        uint _3017 = _3015 * 48u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 3u)).x));
                        uint _3037 = (_3015 * 48u) + 4u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3056 = (_3015 * 48u) + 8u;
                        vec3 _3067 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x));
                        float _3071 = _3031.x - _2561;
                        float _3072 = _3031.y - _2562;
                        float _3073 = _3031.z - _2563;
                        float _3074 = dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073));
                        float _3077 = inversesqrt(_3074);
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3081 = dot(vec3(_797, _800, _803), vec3(_3078, _3079, _3080));
                        float _3086 = 1.0 - (_3074 * _3031.w);
                        float _4497 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3087 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3088 = sqrt(_3074) * _3050.w;
                        float _3091 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                        float _3092 = _3091 * _3091;
                        float _3095 = ((1.0 - _3092) * _3081) + _3092;
                        float _3098 = _3088 * _3088;
                        float _3102 = ((isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))) * _3087) / ((_3098 * 0.699999988079071044921875) + 1.0);
                        float _3106 = (-0.0) - _2561;
                        float _3107 = (-0.0) - _2562;
                        float _3108 = (-0.0) - _2563;
                        float _3112 = inversesqrt(dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108)));
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3123 = exp2(log2(1.0 / ((_3098 * 3.5) + 5.0)) * 0.25);
                        float _3124 = 1.0 - _872;
                        float _3131 = sqrt(1.0 - ((1.0 - (_3124 * _3124)) * (1.0 - (_3123 * _3123))));
                        float _3132 = _3131 * _3131;
                        float _3133 = _3132 * _3132;
                        float _3134 = _3113 + _3078;
                        float _3135 = _3114 + _3079;
                        float _3136 = _3115 + _3080;
                        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                        float _3144 = dot(vec3(_797, _800, _803), vec3(_3113, _3114, _3115));
                        float _4513 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3147 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3148 = dot(vec3(_797, _800, _803), vec3(_3140 * _3134, _3140 * _3135, _3140 * _3136));
                        float _4524 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3151 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3155 = ((_3151 * _3151) * (_3133 + (-1.0))) + 1.0;
                        float _3156 = _3091 * _3132;
                        float _3157 = _3156 * _3156;
                        float _3160 = ((1.0 - _3157) * _3081) + _3157;
                        float _4535 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3161 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3162 = 1.0 - _3132;
                        float _3172 = (0.5 / (((_3161 * ((_3147 * _3162) + _3132)) + 9.9999999392252902907785028219223e-09) + (((_3161 * _3162) + _3132) * _3147))) * _3161;
                        float _4546 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3183 = (((_3133 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3155 * _3155) * ((_3098 * 2.1991131305694580078125) + 3.141590118408203125))) * _3087;
                        _2935 = (_3102 * _3050.x) + _3008;
                        _2936 = (_3102 * _3050.y) + _3009;
                        _2937 = (_3102 * _3050.z) + _3010;
                        _2932 = (_3183 * _3067.x) + _3005;
                        _2933 = (_3183 * _3067.y) + _3006;
                        _2934 = (_3183 * _3067.z) + _3007;
                        if (_3012 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _3012;
                        }
                    }
                    frontier_phi_66_pred = _2932;
                    frontier_phi_66_pred_1 = _2937;
                    frontier_phi_66_pred_2 = _2936;
                    frontier_phi_66_pred_3 = _2935;
                    frontier_phi_66_pred_4 = _2934;
                    frontier_phi_66_pred_5 = _2933;
                }
                _2709 = frontier_phi_66_pred;
                _2719 = frontier_phi_66_pred_1;
                _2717 = frontier_phi_66_pred_2;
                _2715 = frontier_phi_66_pred_3;
                _2713 = frontier_phi_66_pred_4;
                _2711 = frontier_phi_66_pred_5;
                uint _2867 = _2866 + 1u;
                if (_2867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2860 = _2709;
                    _2861 = _2711;
                    _2862 = _2713;
                    _2863 = _2715;
                    _2864 = _2717;
                    _2865 = _2719;
                    _2866 = _2867;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
        }
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.z;
        uint _2725 = (_2723 >> 8u) & 15u;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        if (((4294967295u << _2725) & _2607) == 0u)
        {
            _2828 = _2708;
            _2830 = _2710;
            _2832 = _2712;
            _2834 = _2714;
            _2836 = _2716;
            _2838 = _2718;
        }
        else
        {
            float _2853 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
            float _2854 = _2853 * _2561;
            float _2855 = _2853 * _2562;
            float _2856 = _2853 * _2563;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2725 < ((_2723 >> 12u) & 15u))
            {
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2988 = _2708;
                float _2989 = _2710;
                float _2990 = _2712;
                float _2991 = _2714;
                float _2992 = _2716;
                float _2993 = _2718;
                uint _2994 = _2725;
                uint _3003;
                bool _3004;
                for (;;)
                {
                    _3003 = texelFetch(g_lightClassification, int((((_2601 << 5u) + (_2587 << 9u)) + (_2994 << 2u)) >> 2u)).x;
                    _3004 = _3003 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3004)
                    {
                        frontier_phi_77_pred = _2993;
                        frontier_phi_77_pred_1 = _2992;
                        frontier_phi_77_pred_2 = _2991;
                        frontier_phi_77_pred_3 = _2990;
                        frontier_phi_77_pred_4 = _2989;
                        frontier_phi_77_pred_5 = _2988;
                    }
                    else
                    {
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3210 = _2988;
                        float _3211 = _2989;
                        float _3212 = _2990;
                        float _3213 = _2991;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        uint _3216 = _3003;
                        uint _3217;
                        vec4 _3242;
                        float _3243;
                        vec4 _3258;
                        vec3 _3270;
                        vec4 _3286;
                        vec4 _3301;
                        float _3347;
                        bool _3348;
                        for (;;)
                        {
                            uint _3227 = ((_2994 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3216));
                            _3217 = (_3216 + 4294967295u) & _3216;
                            uint _3229 = _3227 * 40u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            _3243 = _3242.w;
                            uint _3245 = (_3227 * 40u) + 4u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3227 * 40u) + 8u;
                            _3270 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x));
                            uint _3273 = (_3227 * 40u) + 16u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3288 = (_3227 * 40u) + 20u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3227 * 40u) + 24u;
                            vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3322 = (_3227 * 40u) + 28u;
                            vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3347 = fma(_2563, _3335.z, fma(_2562, _3335.y, _3335.x * _2561)) + _3335.w;
                            _3348 = !((fma(_2563, _3316.z, fma(_2562, _3316.y, _3316.x * _2561)) + _3316.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3348)
                            {
                                float _3375 = _3242.x - _2561;
                                float _3376 = _3242.y - _2562;
                                float _3377 = _3242.z - _2563;
                                float _3378 = dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377));
                                float _3381 = inversesqrt(_3378);
                                float _3382 = _3381 * _3375;
                                float _3383 = _3381 * _3376;
                                float _3384 = _3381 * _3377;
                                float _3388 = 1.0 - (_3378 / (_3243 * _3243));
                                float _4557 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3393 = sqrt(_3378) * _3258.w;
                                float _3395 = 1.39999997615814208984375 / (_3393 + 1.39999997615814208984375);
                                float _3396 = _3395 * _3395;
                                float _3399 = ((1.0 - _3396) * dot(vec3(_3382, _3383, _3384), vec3(_797, _800, _803))) + _3396;
                                float _3402 = _3393 * _3393;
                                float _3406 = (fma(_2563, _3286.z, fma(_2562, _3286.y, _3286.x * _2561)) + _3286.w) / _3347;
                                float _3407 = (fma(_2563, _3301.z, fma(_2562, _3301.y, _3301.x * _2561)) + _3301.w) / _3347;
                                float _3411 = 1.0 - dot(vec2(_3406, _3407), vec2(_3406, _3407));
                                float _4573 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3413 = _3412 * (((isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))) * _3389) / ((_3402 * 0.699999988079071044921875) + 1.0));
                                float _3425 = exp2(log2(1.0 / ((_3402 * 3.5) + 5.0)) * 0.25);
                                float _3426 = 1.0 - _872;
                                float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                                float _3434 = _3433 * _3433;
                                float _3435 = _3434 * _3434;
                                float _3436 = _3382 - _2854;
                                float _3437 = _3383 - _2855;
                                float _3438 = _3384 - _2856;
                                float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                                float _3446 = dot(vec3(_797, _800, _803), vec3((-0.0) - _2854, (-0.0) - _2855, (-0.0) - _2856));
                                float _4584 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3449 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3450 = dot(vec3(_797, _800, _803), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                                float _4595 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                                float _3458 = _3395 * _3434;
                                float _3459 = _3458 * _3458;
                                float _3465 = ((1.0 - _3459) * dot(vec3(_797, _800, _803), vec3(_3382, _3383, _3384))) + _3459;
                                float _4606 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3467 = 1.0 - _3434;
                                float _3477 = (0.5 / (((_3466 * ((_3449 * _3467) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3434) * _3449))) * _3466;
                                float _4617 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3487 = (_3412 * _3389) * (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3457 * _3457) * ((_3402 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3413 * _3258.y;
                                frontier_phi_83_pred_1 = _3413 * _3258.x;
                                frontier_phi_83_pred_2 = _3487 * _3270.z;
                                frontier_phi_83_pred_3 = _3487 * _3270.y;
                                frontier_phi_83_pred_4 = _3487 * _3270.x;
                                frontier_phi_83_pred_5 = _3413 * _3258.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3495 = frontier_phi_83_pred;
                            _3494 = frontier_phi_83_pred_1;
                            _3493 = frontier_phi_83_pred_2;
                            _3492 = frontier_phi_83_pred_3;
                            _3491 = frontier_phi_83_pred_4;
                            _3496 = frontier_phi_83_pred_5;
                            _3200 = _3494 + _3213;
                            _3201 = _3495 + _3214;
                            _3202 = _3496 + _3215;
                            _3197 = _3491 + _3210;
                            _3198 = _3492 + _3211;
                            _3199 = _3493 + _3212;
                            if (_3217 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3217;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3202;
                        frontier_phi_77_pred_1 = _3201;
                        frontier_phi_77_pred_2 = _3200;
                        frontier_phi_77_pred_3 = _3199;
                        frontier_phi_77_pred_4 = _3198;
                        frontier_phi_77_pred_5 = _3197;
                    }
                    _2839 = frontier_phi_77_pred;
                    _2837 = frontier_phi_77_pred_1;
                    _2835 = frontier_phi_77_pred_2;
                    _2833 = frontier_phi_77_pred_3;
                    _2831 = frontier_phi_77_pred_4;
                    _2829 = frontier_phi_77_pred_5;
                    uint _2995 = _2994 + 1u;
                    if (_2995 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2988 = _2829;
                        _2989 = _2831;
                        _2990 = _2833;
                        _2991 = _2835;
                        _2992 = _2837;
                        _2993 = _2839;
                        _2994 = _2995;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2833;
                frontier_phi_58_59_ladder_1 = _2839;
                frontier_phi_58_59_ladder_2 = _2837;
                frontier_phi_58_59_ladder_3 = _2835;
                frontier_phi_58_59_ladder_4 = _2831;
                frontier_phi_58_59_ladder_5 = _2829;
            }
            else
            {
                frontier_phi_58_59_ladder = _2712;
                frontier_phi_58_59_ladder_1 = _2718;
                frontier_phi_58_59_ladder_2 = _2716;
                frontier_phi_58_59_ladder_3 = _2714;
                frontier_phi_58_59_ladder_4 = _2710;
                frontier_phi_58_59_ladder_5 = _2708;
            }
            _2828 = frontier_phi_58_59_ladder_5;
            _2830 = frontier_phi_58_59_ladder_4;
            _2832 = frontier_phi_58_59_ladder;
            _2834 = frontier_phi_58_59_ladder_3;
            _2836 = frontier_phi_58_59_ladder_2;
            _2838 = frontier_phi_58_59_ladder_1;
        }
        float _2843 = isnan(1.0) ? _856 : (isnan(_856) ? 1.0 : min(_856, 1.0));
        _2620 = (_2843 * _2834) + _2056;
        _2622 = (_2843 * _2836) + _2058;
        _2624 = (_2843 * _2838) + _2060;
        _2626 = ((_2828 * _840) * _2843) + _2401;
        _2628 = ((_2830 * _842) * _2843) + _2403;
        _2630 = ((_2832 * _843) * _2843) + _2405;
    }
    else
    {
        _2620 = _2056;
        _2622 = _2058;
        _2624 = _2060;
        _2626 = _2401;
        _2628 = _2403;
        _2630 = _2405;
    }
    float _4633 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4644 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4655 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _2647 = ((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2620 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _856))) + ((_2626 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    float _2648 = ((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2622 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _856))) + ((_2628 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    float _2649 = ((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2624 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _856))) + ((_2630 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    uint _2650 = _247 + 6u;
    float _2658 = _776 / cbSceneParam._m0[86u].x;
    float _2659 = _777 / cbSceneParam._m0[86u].y;
    vec4 _2673 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, (log2((isnan(cbSceneParam._m0[77u].w) ? _698 : (isnan(_698) ? cbSceneParam._m0[77u].w : min(_698, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2675 = _2673.x;
    float _2676 = _2673.y;
    float _2677 = _2673.z;
    float _2678 = _2673.w;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_698 > cbSceneParam._m0[78u].w)
    {
        float _2733 = isnan(_698) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _698 : min(cbSceneParam._m0[80u].w, _698));
        float _2734 = _2733 / _698;
        float _2745 = _2734 * _748;
        float _2746 = _749 * _2734;
        float _2747 = (-0.0) - _2746;
        float _2748 = _2734 * _750;
        float _2750 = (cbSceneParam._m0[77u].w * _2747) / _2733;
        float _2751 = _2750 + cbSceneParam._m0[79u].w;
        float _2752 = cbSceneParam._m0[79u].w - _2746;
        float _2758 = sqrt(((_2745 * _2745) + (_2746 * _2746)) + (_2748 * _2748));
        float _2761 = (1.0 - (cbSceneParam._m0[77u].w / _2733)) * _2758;
        float _2766 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2768 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2945;
        if (abs((_2747 - _2750) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2945 = ((((_2751 > 0.0) ? exp2(_2766 * _2751) : (2.0 - exp2(_2768 * _2751))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2761;
        }
        else
        {
            float _2889 = 1.0 / cbSceneParam._m0[80u].x;
            float _2890 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : max(_2751, _2752));
            float _2891 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : min(_2751, _2752));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            _2945 = ((abs(_2758 / _2747) * cbSceneParam._m0[80u].y) * ((((_2900 - _2901) * 2.0) - ((exp2(_2766 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0)))) - exp2(_2766 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))))) * _2889)) - ((exp2(_2768 * _2900) - exp2(_2768 * _2901)) * _2889))) + (_2761 * cbSceneParam._m0[80u].z);
        }
        vec4 _2947 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, 1.0), 0.0);
        float _2956 = exp2((_2945 * (-1.44269502162933349609375)) * (1.0 - _2947.w));
        float _2957 = log2(_2956);
        float _2973 = log2(_2678);
        _2770 = (exp2(_2973 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].x)) * _2947.x) / cbSceneParam._m0[78u].x)) + _2675;
        _2772 = (exp2(_2973 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].y)) * _2947.y) / cbSceneParam._m0[78u].y)) + _2676;
        _2774 = (exp2(_2973 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].z)) * _2947.z) / cbSceneParam._m0[78u].z)) + _2677;
        _2776 = _2956 * _2678;
    }
    else
    {
        _2770 = _2675;
        _2772 = _2676;
        _2774 = _2677;
        _2776 = _2678;
    }
    bool _2983;
    vec4 _2786;
    vec4 _2808;
    float _2810;
    float _2814;
    float _2815;
    float _2816;
    float _2817;
    bool _2827;
    for (;;)
    {
        _2786 = cbMatDynParam._m0[0u];
        float _2788 = roundEven(_2786.y);
        bool _2789 = _2788 == 3.0;
        float _2790 = log2(_2776);
        float _2797 = exp2(_2790 * cbSceneParam._m0[78u].x) * _2647;
        float _2798 = exp2(_2790 * cbSceneParam._m0[78u].y) * _2648;
        float _2799 = exp2(_2790 * cbSceneParam._m0[78u].z) * _2649;
        float _2806 = _764 + (-0.5);
        _2808 = cbMtdParam._m0[1u];
        _2810 = _2808.y * _2806;
        float _2813 = (_2788 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2814 = _2813 * (_2789 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2770)));
        _2815 = _2813 * (_2789 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2772)));
        _2816 = _2813 * (_2789 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2774)));
        _2817 = _2806 * 0.999000012874603271484375;
        _2827 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2827)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2817) < 0.5)
            {
                _2983 = true;
                break;
            }
        }
        uint _2924 = _816 + uint(_2786.w);
        if ((cbInstanceData._m0[_2924].w < 1.0) && ((cbInstanceData._m0[_2924].w + _2817) < 0.5))
        {
            _2983 = true;
            break;
        }
        if ((_2810 + 1.0) < _2808.x)
        {
            _2983 = true;
            break;
        }
        _2983 = false;
        break;
    }
    float _3188;
    if (_2983)
    {
        discard_state = true;
        _3188 = 0.0;
    }
    else
    {
        _3188 = cbInstanceData._m0[_2650].w;
    }
    SV_Target.x = _2814;
    SV_Target.y = _2815;
    SV_Target.z = _2816;
    SV_Target.w = _3188;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2650].w;
    discard_exit();
}


