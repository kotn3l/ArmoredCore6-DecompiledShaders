#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1191;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _358 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _358) * cbMtdParam._m0[24u].y) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3802 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _383 = (_376 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _384 = (_376 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _385 = (_376 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _433 = ((_403.z - _424) * _376) + _424;
    float _436 = ((((_403.x - _422) * _376) + _422) * 2.0) + (-1.0);
    float _438 = ((((_403.y - _423) * _376) + _423) * 2.0) + (-1.0);
    float _439 = dot(vec2(_436, _438), vec2(_436, _438));
    float _3813 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _444 = sqrt(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))));
    float _447 = fma(_444, _226, fma(_438, _233, _436 * _219));
    float _450 = fma(_444, _227, fma(_438, _234, _436 * _220));
    float _453 = fma(_444, _228, fma(_438, _235, _436 * _221));
    float _457 = inversesqrt(dot(vec3(_447, _450, _453), vec3(_447, _450, _453)));
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _501 = _499.x;
    float _502 = 1.0 - _501;
    float _506 = ((_501 - _502) * cbMtdParam._m0[24u].z) + _502;
    float _508 = (cbMtdParam._m0[19u].x + dot(vec4(_457 * _447, _457 * _450, _457 * _453, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_506 * cbMtdParam._m0[21u].z);
    float _3824 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _524 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_506 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3835 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _529 = ((_509 * (cbMtdParam._m0[17u].x - _383)) * _525) + _383;
    float _530 = ((_509 * (cbMtdParam._m0[17u].y - _384)) * _525) + _384;
    float _531 = ((_509 * (cbMtdParam._m0[17u].z - _385)) * _525) + _385;
    vec4 _543 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _557 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _559 = _557.x;
    float _577 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _559) * _376) + _559;
    float _581 = ((_543.x - _577) * cbMtdParam._m0[19u].z) + _577;
    float _584 = _581 - ((_525 * _509) * _581);
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _604 = (_597.x * 2.0) + (-1.0);
    float _605 = (_597.y * 2.0) + (-1.0);
    float _606 = dot(vec2(_604, _605), vec2(_604, _605));
    float _3846 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _615 = (((_597.z - _433) * _509) * _525) + _433;
    float _630 = (((cbMtdParam._m0[21u].x * _436) + ((_604 - _436) * _509)) * _525) + _436;
    float _631 = (((cbMtdParam._m0[21u].x * _438) + ((_605 - _438) * _509)) * _525) + _438;
    float _632 = (((sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) - _444) * _509) * _525) + _444;
    float _637 = cbMtdParam._m0[22u].x + _473.w;
    float _640 = fma(_632, _226, fma(_631, _233, _630 * _219));
    float _643 = fma(_632, _227, fma(_631, _234, _630 * _220));
    float _646 = fma(_632, _228, fma(_631, _235, _630 * _221));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    float _651 = _650 * _640;
    float _652 = _650 * _643;
    float _653 = _650 * _646;
    float _3857 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _654 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3879 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3890 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3901 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3912 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _659 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _673 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _724 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _714);
    float _725 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _714);
    float _726 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _714);
    float _730 = inversesqrt(dot(vec3(_724, _725, _726), vec3(_724, _725, _726)));
    float _731 = _724 * _730;
    float _732 = _725 * _730;
    float _733 = _726 * _730;
    float _739 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _740 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _758 = fma(_653, cbSceneParam._m0[5u].z, fma(_652, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _651));
    float _761 = fma(_653, cbSceneParam._m0[6u].z, fma(_652, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _651));
    float _764 = fma(_653, cbSceneParam._m0[7u].z, fma(_652, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _651));
    uint _778 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _784 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_778].x;
    float _785 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_778].y;
    float _786 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_778].z;
    float _3923 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _790 = 1.0 - _659;
    float _791 = _787 * _790;
    float _792 = _788 * _790;
    float _793 = _789 * _790;
    float _798 = (_787 + (-0.039999999105930328369140625)) * _659;
    float _799 = (_788 + (-0.039999999105930328369140625)) * _659;
    float _800 = (_789 + (-0.039999999105930328369140625)) * _659;
    float _801 = _798 + 0.039999999105930328369140625;
    float _803 = _799 + 0.039999999105930328369140625;
    float _804 = _800 + 0.039999999105930328369140625;
    vec4 _813 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _739, cbSceneParam._m0[86u].y * _740));
    float _817 = ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * TEXCOORD_5.w) * _813.x;
    float _818 = dot(vec3(_651, _652, _653), vec3(_731, _732, _733));
    float _821 = _818 * 2.0;
    float _825 = (_821 * _651) - _731;
    float _826 = (_821 * _652) - _732;
    float _827 = (_821 * _653) - _733;
    float _831 = abs(dot(vec3(_731, _732, _733), vec3(_651, _652, _653)));
    float _3956 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _833 = sqrt(_654);
    float _846 = exp2((_833 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_833 * 3.0));
    float _852 = (1.0 - _846) * ((_833 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _853 = _846 * _833;
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1190;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _915 = fma(_889, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881));
        float _919 = fma(_889, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881));
        float _923 = fma(_889, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881));
        float _948 = _881 + _651;
        float _949 = _885 + _652;
        float _950 = _889 + _653;
        float _960 = fma(_950, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948)) - _915;
        float _961 = fma(_950, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948)) - _919;
        float _962 = fma(_950, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948)) - _923;
        float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
        float _979 = ((_966 * _960) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_915 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_966 * _961) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_919 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_966 * _962) / cbModelParam._m0[34u].z) + ((((((_923 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        float _1018 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_984.x + (-0.5));
        float _1020 = _1018 * (_984.y + (-0.5));
        float _1021 = _1018 * (_984.z + (-0.5));
        float _1028 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_991.x + (-0.5));
        float _1030 = _1028 * (_991.y + (-0.5));
        float _1031 = _1028 * (_991.z + (-0.5));
        float _1038 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_998.x + (-0.5));
        float _1040 = _1038 * (_998.y + (-0.5));
        float _1041 = _1038 * (_998.z + (-0.5));
        float _1048 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1005.x + (-0.5));
        float _1050 = _1048 * (_1005.y + (-0.5));
        float _1051 = _1048 * (_1005.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1072 = (dot(vec3(_651, _652, _653), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1082 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _4004 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1084 + 1.0))) + _1089) * _1052;
        float _1099 = _1020 * 0.5;
        float _1100 = _1030 * 0.5;
        float _1101 = _1040 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_651, _652, _653), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _4037 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1126 + 1.0))) + _1131) * _1053;
        float _1141 = _1021 * 0.5;
        float _1142 = _1031 * 0.5;
        float _1143 = _1041 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_651, _652, _653), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _4070 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1168 + 1.0))) + _1173) * _1054;
        _1190 = _1021;
        _1192 = _1020;
        _1193 = _1019;
        _1194 = _1031;
        _1195 = _1030;
        _1196 = _1029;
        _1197 = _1041;
        _1198 = _1040;
        _1199 = _1039;
        _1200 = _1054;
        _1201 = _1053;
        _1202 = _1052;
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _1191;
        _1192 = _1191;
        _1193 = _1191;
        _1194 = _1191;
        _1195 = _1191;
        _1196 = _1191;
        _1197 = _1191;
        _1198 = _1191;
        _1199 = _1191;
        _1200 = _1191;
        _1201 = _1191;
        _1202 = _1191;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1230 = fma(_889, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881));
        float _1234 = fma(_889, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881));
        float _1238 = fma(_889, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881));
        float _1261 = _881 + _651;
        float _1262 = _885 + _652;
        float _1263 = _889 + _653;
        float _1273 = fma(_1263, cbModelParam._m0[30u].z, fma(_1262, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1261)) - _1230;
        float _1274 = fma(_1263, cbModelParam._m0[31u].z, fma(_1262, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1261)) - _1234;
        float _1275 = fma(_1263, cbModelParam._m0[32u].z, fma(_1262, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1261)) - _1238;
        float _1279 = inversesqrt(dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275)));
        float _1292 = ((_1279 * _1273) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1230 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1279 * _1274) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1234 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1279 * _1275) / cbModelParam._m0[35u].z) + ((((((_1238 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        float _1329 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1296.x + (-0.5));
        float _1331 = _1329 * (_1296.y + (-0.5));
        float _1332 = _1329 * (_1296.z + (-0.5));
        float _1339 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1303.x + (-0.5));
        float _1341 = _1339 * (_1303.y + (-0.5));
        float _1342 = _1339 * (_1303.z + (-0.5));
        float _1349 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1310.x + (-0.5));
        float _1351 = _1349 * (_1310.y + (-0.5));
        float _1352 = _1349 * (_1310.z + (-0.5));
        float _1359 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1317.x + (-0.5));
        float _1361 = _1359 * (_1317.y + (-0.5));
        float _1362 = _1359 * (_1317.z + (-0.5));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = _1330 * 0.5;
        float _1367 = _1340 * 0.5;
        float _1368 = _1350 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_651, _652, _653), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4133 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1393 + 1.0))) + _1398) * _1363;
        float _1408 = _1331 * 0.5;
        float _1409 = _1341 * 0.5;
        float _1410 = _1351 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_651, _652, _653), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4166 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1435 + 1.0))) + _1440) * _1364;
        float _1450 = _1332 * 0.5;
        float _1451 = _1342 * 0.5;
        float _1452 = _1352 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_651, _652, _653), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4199 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1477 + 1.0))) + _1482) * _1365;
        _1499 = _1332;
        _1500 = _1331;
        _1501 = _1330;
        _1502 = _1342;
        _1503 = _1341;
        _1504 = _1340;
        _1505 = _1352;
        _1506 = _1351;
        _1507 = _1350;
        _1508 = _1365;
        _1509 = _1364;
        _1510 = _1363;
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
    }
    else
    {
        _1499 = _1191;
        _1500 = _1191;
        _1501 = _1191;
        _1502 = _1191;
        _1503 = _1191;
        _1504 = _1191;
        _1505 = _1191;
        _1506 = _1191;
        _1507 = _1191;
        _1508 = _1191;
        _1509 = _1191;
        _1510 = _1191;
        _1511 = 0.0;
        _1512 = 0.0;
        _1513 = 0.0;
    }
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1203)) + _1203;
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1204)) + _1204;
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1205)) + _1205;
    float _1546 = fma(_1525, cbSceneParam._m0[89u].z, fma(_1524, cbSceneParam._m0[89u].y, _1523 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1525, cbSceneParam._m0[90u].z, fma(_1524, cbSceneParam._m0[90u].y, _1523 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1525, cbSceneParam._m0[91u].z, fma(_1524, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1523));
    float _1567 = _825 * 0.5;
    float _1568 = _826 * 0.5;
    float _1569 = _827 * 0.5;
    float _1570 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1573 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1576 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1610;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1583 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1190, _1194, _1197, _1200));
        float _1587 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1192, _1195, _1198, _1201));
        float _1591 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1598 = dot(vec4(cbModelParam._m0[39u]), vec4(_1567, _1568, _1569, 1.0));
        _1610 = dot(vec3(isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1598) ? 0.0 : (isnan(0.0) ? _1598 : max(0.0, _1598))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1610 = 1.0;
    }
    float _1621;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1612 = dot(vec4(cbModelParam._m0[40u]), vec4(_1567, _1568, _1569, 1.0));
        _1621 = dot(vec3(isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1612) ? 0.0 : (isnan(0.0) ? _1612 : max(0.0, _1612))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1621 = 1.0;
    }
    float _1625 = (_1621 * cbModelParam._m0[1u].x) + (_1610 * (1.0 - cbModelParam._m0[1u].x));
    float _1635 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _654);
    float _1636 = isnan(_1635) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1635 : min(cbModelParam._m0[25u].z, _1635));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1684 = fma(_889, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881)) + cbModelParam._m0[13u].w;
        float _1688 = fma(_889, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881)) + cbModelParam._m0[14u].w;
        float _1692 = fma(_889, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881)) + cbModelParam._m0[15u].w;
        float _1695 = fma(_827, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825));
        float _1698 = fma(_827, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825));
        float _1701 = fma(_827, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825));
        float _1729;
        if (_1695 > 0.0)
        {
            _1729 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1729 = frontier_phi_14_12_ladder;
        }
        float _1901;
        if (_1698 > 0.0)
        {
            _1901 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1901 = frontier_phi_23_19_ladder;
        }
        float _2196;
        if (_1701 > 0.0)
        {
            _2196 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2196 = frontier_phi_35_30_ladder;
        }
        float _2198 = isnan(_1901) ? _1729 : (isnan(_1729) ? _1901 : min(_1729, _1901));
        float _2199 = isnan(_2196) ? _2198 : (isnan(_2198) ? _2196 : min(_2198, _2196));
        float _2203 = (_2199 * _1695) + _1684;
        float _2204 = (_2199 * _1698) + _1688;
        float _2205 = (_2199 * _1701) + _1692;
        float _2206 = _2199 * 9.9999997473787516355514526367188e-05;
        float _2208 = (-1.0) - _2206;
        float _2210 = _2206 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2205 > _2210) || ((_2205 < _2208) || ((_2204 > _2210) || ((_2204 < _2208) || ((_2203 < _2208) || (_2203 > _2210))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2350 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2205, cbModelParam._m0[9u].z, fma(_2204, cbModelParam._m0[9u].y, _2203 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2205, cbModelParam._m0[10u].z, fma(_2204, cbModelParam._m0[10u].y, _2203 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2205, cbModelParam._m0[11u].z, fma(_2204, cbModelParam._m0[11u].y, _2203 * cbModelParam._m0[11u].x))), _1636);
            frontier_phi_13_35_ladder = _2350.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2350.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2350.x * cbModelParam._m0[1u].y;
        }
        _1717 = frontier_phi_13_35_ladder_2;
        _1719 = frontier_phi_13_35_ladder_1;
        _1721 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_825, _826, _827), _1636);
        _1717 = _1705.x * cbModelParam._m0[1u].y;
        _1719 = _1705.y * cbModelParam._m0[1u].y;
        _1721 = _1705.z * cbModelParam._m0[1u].y;
    }
    float _1725 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _654);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1725 : min(cbModelParam._m0[25u].w, _1725));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1780 = fma(_889, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881)) + cbModelParam._m0[21u].w;
        float _1784 = fma(_889, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881)) + cbModelParam._m0[22u].w;
        float _1788 = fma(_889, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881)) + cbModelParam._m0[23u].w;
        float _1791 = fma(_827, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825));
        float _1794 = fma(_827, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825));
        float _1797 = fma(_827, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825));
        float _1906;
        if (_1791 > 0.0)
        {
            _1906 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1906 = frontier_phi_25_21_ladder;
        }
        float _2223;
        if (_1794 > 0.0)
        {
            _2223 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2223 = frontier_phi_37_32_ladder;
        }
        float _2561;
        if (_1797 > 0.0)
        {
            _2561 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2561 = frontier_phi_47_44_ladder;
        }
        float _2563 = isnan(_2223) ? _1906 : (isnan(_1906) ? _2223 : min(_1906, _2223));
        float _2564 = isnan(_2561) ? _2563 : (isnan(_2563) ? _2561 : min(_2563, _2561));
        float _2568 = (_2564 * _1791) + _1780;
        float _2569 = (_2564 * _1794) + _1784;
        float _2570 = (_2564 * _1797) + _1788;
        float _2571 = _2564 * 9.9999997473787516355514526367188e-05;
        float _2572 = (-1.0) - _2571;
        float _2574 = _2571 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2570 > _2574) || ((_2570 < _2572) || ((_2569 > _2574) || ((_2569 < _2572) || ((_2568 < _2572) || (_2568 > _2574))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2692 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2570, cbModelParam._m0[17u].z, fma(_2569, cbModelParam._m0[17u].y, _2568 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2570, cbModelParam._m0[18u].z, fma(_2569, cbModelParam._m0[18u].y, _2568 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2570, cbModelParam._m0[19u].z, fma(_2569, cbModelParam._m0[19u].y, _2568 * cbModelParam._m0[19u].x))), _1726);
            frontier_phi_22_47_ladder = _2692.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2692.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2692.x * cbModelParam._m0[1u].z;
        }
        _1816 = frontier_phi_22_47_ladder_2;
        _1818 = frontier_phi_22_47_ladder_1;
        _1820 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_825, _826, _827), _1726);
        _1816 = _1800.x * cbModelParam._m0[1u].z;
        _1818 = _1800.y * cbModelParam._m0[1u].z;
        _1820 = _1800.z * cbModelParam._m0[1u].z;
    }
    float _1833 = (((_852 * _801) + _853) * _817) * ((cbModelParam._m0[1u].w * (_1816 - _1717)) + _1717);
    float _1835 = (((_852 * _803) + _853) * _817) * ((cbModelParam._m0[1u].w * (_1818 - _1719)) + _1719);
    float _1837 = (((_852 * _804) + _853) * _817) * ((cbModelParam._m0[1u].w * (_1820 - _1721)) + _1721);
    float _1840 = fma(_1837, cbSceneParam._m0[89u].z, fma(_1835, cbSceneParam._m0[89u].y, _1833 * cbSceneParam._m0[89u].x));
    float _1843 = fma(_1837, cbSceneParam._m0[90u].z, fma(_1835, cbSceneParam._m0[90u].y, _1833 * cbSceneParam._m0[90u].x));
    float _1846 = fma(_1837, cbSceneParam._m0[91u].z, fma(_1835, cbSceneParam._m0[91u].y, _1833 * cbSceneParam._m0[91u].x));
    float _1880 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1884 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1888 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1892 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1893 = _1880 / _1892;
    float _1894 = _1884 / _1892;
    float _1895 = _1888 / _1892;
    float _2042;
    float _2043;
    float _2044;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1922 = ((uint(_1895 > cbSceneParam._m0[59u].y) + uint(_1895 > cbSceneParam._m0[59u].x)) + uint(_1895 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1923 = _1922 + 43u;
        uint _1931 = _1922 + 44u;
        uint _1939 = _1922 + 45u;
        uint _1947 = _1922 + 46u;
        float _1958 = fma(_1892, cbSceneParam._m0[_1923].w, fma(_1888, cbSceneParam._m0[_1923].z, fma(_1884, cbSceneParam._m0[_1923].y, _1880 * cbSceneParam._m0[_1923].x)));
        float _1962 = fma(_1892, cbSceneParam._m0[_1931].w, fma(_1888, cbSceneParam._m0[_1931].z, fma(_1884, cbSceneParam._m0[_1931].y, _1880 * cbSceneParam._m0[_1931].x)));
        float _1970 = fma(_1892, cbSceneParam._m0[_1947].w, fma(_1888, cbSceneParam._m0[_1947].z, fma(_1884, cbSceneParam._m0[_1947].y, _1880 * cbSceneParam._m0[_1947].x)));
        float _1975 = cbSceneParam._m0[33u].z * _1970;
        float _1977 = cbSceneParam._m0[33u].w * _1970;
        float _1980 = fma(_1892, cbSceneParam._m0[_1939].w, fma(_1888, cbSceneParam._m0[_1939].z, fma(_1884, cbSceneParam._m0[_1939].y, _1880 * cbSceneParam._m0[_1939].x))) / _1970;
        float _2028 = (cbSceneParam._m0[33u].x - sqrt(((_1894 * _1894) + (_1893 * _1893)) + (_1895 * _1895))) * cbSceneParam._m0[33u].y;
        float _4325 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2035 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1975 + _1958) / _1970, (_1977 + _1962) / _1970), _1980), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1977 + _1958) / _1970, (_1962 - _1975) / _1970), _1980), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1958 - _1975) / _1970, (_1962 - _1977) / _1970), _1980), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1958 - _1977) / _1970, (_1975 + _1962) / _1970), _1980), 0.0)).x), vec4(0.25)));
        _2042 = 1.0 - (_2035 * cbSceneParam._m0[34u].x);
        _2043 = 1.0 - (_2035 * cbSceneParam._m0[34u].y);
        _2044 = 1.0 - (_2035 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2042 = 1.0;
        _2043 = 1.0;
        _2044 = 1.0;
    }
    float _2108;
    float _2110;
    float _2112;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2096 = fma(_1892, cbSceneParam._m0[63u].w, fma(_1888, cbSceneParam._m0[63u].z, fma(_1884, cbSceneParam._m0[63u].y, _1880 * cbSceneParam._m0[63u].x)));
        float _2097 = fma(_1892, cbSceneParam._m0[60u].w, fma(_1888, cbSceneParam._m0[60u].z, fma(_1884, cbSceneParam._m0[60u].y, _1880 * cbSceneParam._m0[60u].x))) / _2096;
        float _2098 = fma(_1892, cbSceneParam._m0[61u].w, fma(_1888, cbSceneParam._m0[61u].z, fma(_1884, cbSceneParam._m0[61u].y, _1880 * cbSceneParam._m0[61u].x))) / _2096;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2097 >= cbSceneParam._m0[64u].x) && (_2098 >= cbSceneParam._m0[64u].y)) && (_2097 <= cbSceneParam._m0[64u].z)) && (_2098 <= cbSceneParam._m0[64u].w))
        {
            float _2236 = fma(_1892, cbSceneParam._m0[62u].w, fma(_1888, cbSceneParam._m0[62u].z, fma(_1884, cbSceneParam._m0[62u].y, _1880 * cbSceneParam._m0[62u].x))) / _2096;
            float _2240 = isnan(cbSceneParam._m0[41u].w) ? _2236 : (isnan(_2236) ? cbSceneParam._m0[41u].w : max(_2236, cbSceneParam._m0[41u].w));
            float _2283 = (cbSceneParam._m0[33u].x - sqrt(((_1894 * _1894) + (_1893 * _1893)) + (_1895 * _1895))) * cbSceneParam._m0[33u].y;
            float _4341 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
            float _2290 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2097, cbSceneParam._m0[33u].w + _2098), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2097, _2098 - cbSceneParam._m0[33u].z), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2097 - cbSceneParam._m0[33u].z, _2098 - cbSceneParam._m0[33u].w), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2097 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2098), _2240), 0.0)).x), vec4(0.25)));
            float _2294 = 1.0 - (_2290 * cbSceneParam._m0[34u].x);
            float _2295 = 1.0 - (_2290 * cbSceneParam._m0[34u].y);
            float _2296 = 1.0 - (_2290 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2296) ? _2044 : (isnan(_2044) ? _2296 : min(_2044, _2296));
            frontier_phi_34_33_ladder_1 = isnan(_2295) ? _2043 : (isnan(_2043) ? _2295 : min(_2043, _2295));
            frontier_phi_34_33_ladder_2 = isnan(_2294) ? _2042 : (isnan(_2042) ? _2294 : min(_2042, _2294));
        }
        else
        {
            frontier_phi_34_33_ladder = _2044;
            frontier_phi_34_33_ladder_1 = _2043;
            frontier_phi_34_33_ladder_2 = _2042;
        }
        _2108 = frontier_phi_34_33_ladder_2;
        _2110 = frontier_phi_34_33_ladder_1;
        _2112 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2108 = _2042;
        _2110 = _2043;
        _2112 = _2044;
    }
    uvec4 _2117 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2119 = _2117.x * 14u;
    uint _2120 = _2119 + 13u;
    float _2127 = _817 + (-1.0);
    float _2132 = (cbLight._m0[_2120].x * _2127) + 1.0;
    float _2133 = (cbLight._m0[_2120].y * _2127) + 1.0;
    float _2134 = (cbLight._m0[_2120].z * _2127) + 1.0;
    float _2135 = (cbLight._m0[_2120].w * _2127) + 1.0;
    uint _2136 = _2119 + 5u;
    float _2142 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
    uint _2146 = _2119 + 4u;
    float _2155 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
    uint _2159 = _2119 | 1u;
    float _2170 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_651, _652, _653));
    float _2173 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_651, _652, _653));
    float _4377 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _4388 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2178 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.3183098733425140380859375;
    float _2180 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * 0.3183098733425140380859375;
    float _2187 = ((cbLight._m0[_2136].x * _2142) * _2180) + (((cbLight._m0[_2146].x * _2108) * _2155) * _2178);
    float _2188 = ((_2142 * cbLight._m0[_2136].y) * _2180) + (((cbLight._m0[_2146].y * _2110) * _2155) * _2178);
    float _2189 = ((_2142 * cbLight._m0[_2136].z) * _2180) + (((cbLight._m0[_2146].z * _2112) * _2155) * _2178);
    uvec4 _2193 = floatBitsToUint(cbLight._m0[_2119 + 12u]);
    bool _2195 = _2193.x == 0u;
    float _2297;
    float _2299;
    float _2301;
    if (_2195)
    {
        _2297 = _2187;
        _2299 = _2188;
        _2301 = _2189;
    }
    else
    {
        uint _2305 = _2119 + 6u;
        float _2321 = (dot(vec3(cbLight._m0[_2119 + 2u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2322 = _2321 * _2321;
        float _4399 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2323 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2324 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2297 = (((cbLight._m0[_2305].x * 0.3183098733425140380859375) * _2323) * _2324) + _2187;
        _2299 = (((cbLight._m0[_2305].y * 0.3183098733425140380859375) * _2323) * _2324) + _2188;
        _2301 = (((cbLight._m0[_2305].z * 0.3183098733425140380859375) * _2323) * _2324) + _2189;
    }
    bool _2304 = _2193.y == 0u;
    float _2359;
    float _2361;
    float _2363;
    if (_2304)
    {
        _2359 = _2297;
        _2361 = _2299;
        _2363 = _2301;
    }
    else
    {
        uint _2532 = _2119 + 7u;
        float _2548 = (dot(vec3(cbLight._m0[_2119 + 3u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2549 = _2548 * _2548;
        float _4415 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2550 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2551 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2359 = (((cbLight._m0[_2532].x * 0.3183098733425140380859375) * _2550) * _2551) + _2297;
        _2361 = (((cbLight._m0[_2532].y * 0.3183098733425140380859375) * _2550) * _2551) + _2299;
        _2363 = (((cbLight._m0[_2532].z * 0.3183098733425140380859375) * _2550) * _2551) + _2301;
    }
    uint _2366 = _2119 + 8u;
    float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _654) * 0.949999988079071044921875);
    float _2380 = _2379 * _2379;
    float _2381 = cbLight._m0[_2119].x + _731;
    float _2382 = cbLight._m0[_2119].y + _732;
    float _2383 = cbLight._m0[_2119].z + _733;
    float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
    float _2388 = _2387 * _2381;
    float _2389 = _2387 * _2382;
    float _2390 = _2387 * _2383;
    float _2391 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2119].xyz));
    float _4431 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _4442 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _2395 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2396 = dot(vec3(_651, _652, _653), vec3(_2388, _2389, _2390));
    float _4453 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2400 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2388, _2389, _2390));
    float _4464 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2404 = _2380 * _2380;
    float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
    float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
    float _2417 = 0.959999978542327880859375 - _798;
    float _2419 = 0.959999978542327880859375 - _799;
    float _2420 = 0.959999978542327880859375 - _800;
    float _2427 = 1.0 - _2380;
    float _2438 = (0.5 / (((_2395 * ((_2394 * _2427) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2427) + _2380) * _2394))) * _2394;
    float _4475 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
    uint _2454 = _2119 + 9u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _654) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2159].x + _731;
    float _2468 = cbLight._m0[_2159].y + _732;
    float _2469 = cbLight._m0[_2159].z + _733;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2159].xyz));
    float _4486 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2481 = dot(vec3(_651, _652, _653), vec3(_2474, _2475, _2476));
    float _4497 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2474, _2475, _2476));
    float _4508 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2466 * _2466;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * 5.0);
    float _2507 = 1.0 - _2466;
    float _2517 = (0.5 / (((_2395 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2507) + _2466) * _2480))) * _2480;
    float _4519 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2519 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    float _2529 = (((((_2500 * _2417) + _801) * cbLight._m0[_2454].x) * _2519) * _2142) + ((((cbLight._m0[_2366].x * _2108) * ((_2416 * _2417) + _801)) * _2440) * _2155);
    float _2530 = (((((_2500 * _2419) + _803) * cbLight._m0[_2454].y) * _2519) * _2142) + ((((cbLight._m0[_2366].y * _2110) * ((_2416 * _2419) + _803)) * _2440) * _2155);
    float _2531 = (((((_2500 * _2420) + _804) * cbLight._m0[_2454].z) * _2519) * _2142) + ((((cbLight._m0[_2366].z * _2112) * ((_2416 * _2420) + _804)) * _2440) * _2155);
    float _2587;
    float _2589;
    float _2591;
    if (_2195)
    {
        _2587 = _2529;
        _2589 = _2530;
        _2591 = _2531;
    }
    else
    {
        uint _2593 = _2119 + 2u;
        uint _2597 = _2119 + 10u;
        float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2593].w)) * _654) * 0.949999988079071044921875);
        float _2612 = _2611 * _2611;
        float _2613 = cbLight._m0[_2593].x + _731;
        float _2614 = cbLight._m0[_2593].y + _732;
        float _2615 = cbLight._m0[_2593].z + _733;
        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
        float _2620 = _2619 * _2613;
        float _2621 = _2619 * _2614;
        float _2622 = _2619 * _2615;
        float _2623 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2593].xyz));
        float _4530 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2627 = dot(vec3(_651, _652, _653), vec3(_2620, _2621, _2622));
        float _4541 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2631 = dot(vec3(cbLight._m0[_2593].xyz), vec3(_2620, _2621, _2622));
        float _4552 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2635 = _2612 * _2612;
        float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
        float _2646 = exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0);
        float _2653 = 1.0 - _2612;
        float _2663 = (0.5 / (((_2395 * ((_2626 * _2653) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2653) + _2612) * _2626))) * _2626;
        float _4563 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2665 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
        float _2666 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2587 = (((((_2646 * _2417) + _801) * cbLight._m0[_2597].x) * _2665) * _2666) + _2529;
        _2589 = (((((_2646 * _2419) + _803) * cbLight._m0[_2597].y) * _2665) * _2666) + _2530;
        _2591 = (((((_2646 * _2420) + _804) * cbLight._m0[_2597].z) * _2665) * _2666) + _2531;
    }
    float _2697;
    float _2699;
    float _2701;
    if (_2304)
    {
        _2697 = _2587;
        _2699 = _2589;
        _2701 = _2591;
    }
    else
    {
        uint _2708 = _2119 + 3u;
        uint _2712 = _2119 + 11u;
        float _2726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2708].w)) * _654) * 0.949999988079071044921875);
        float _2727 = _2726 * _2726;
        float _2728 = cbLight._m0[_2708].x + _731;
        float _2729 = cbLight._m0[_2708].y + _732;
        float _2730 = cbLight._m0[_2708].z + _733;
        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
        float _2735 = _2734 * _2728;
        float _2736 = _2734 * _2729;
        float _2737 = _2734 * _2730;
        float _2738 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2708].xyz));
        float _4579 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2742 = dot(vec3(_651, _652, _653), vec3(_2735, _2736, _2737));
        float _4590 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2745 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2746 = dot(vec3(cbLight._m0[_2708].xyz), vec3(_2735, _2736, _2737));
        float _4601 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2750 = _2727 * _2727;
        float _2754 = ((_2745 * _2745) * (_2750 + (-1.0))) + 1.0;
        float _2761 = exp2(log2(1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) * 5.0);
        float _2768 = 1.0 - _2727;
        float _2778 = (0.5 / (((_2395 * ((_2741 * _2768) + _2727)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2768) + _2727) * _2741))) * _2741;
        float _4612 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2780 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2750 / ((_2754 * _2754) * 3.141590118408203125));
        float _2781 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2697 = (((((_2761 * _2417) + _801) * cbLight._m0[_2712].x) * _2780) * _2781) + _2587;
        _2699 = (((((_2761 * _2419) + _803) * cbLight._m0[_2712].y) * _2780) * _2781) + _2589;
        _2701 = (((((_2761 * _2420) + _804) * cbLight._m0[_2712].z) * _2780) * _2781) + _2591;
    }
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    if (_2117.y == 0u)
    {
        uvec4 _2802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2803 = _2802.x;
        uint _2814 = uint((float(_2802.y) * floor(float(uint(cbSceneParam._m0[85u].y * _740) / _2803))) + floor(float(uint(cbSceneParam._m0[85u].x * _739) / _2803)));
        float _2824 = (log2(_1895 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2825 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        uint _2828 = uint(isnan(14.0) ? _2825 : (isnan(_2825) ? 14.0 : min(_2825, 14.0)));
        uvec4 _2833 = texelFetch(g_lightClusterGridBuffer, int(((_2828 << 2u) + (_2814 << 6u)) >> 2u));
        uint _2834 = _2833.x;
        uint _2835 = _2802.z;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        if (((((1u << ((_2835 >> 4u) & 15u)) + 4294967295u) & _2834) == 0u) || ((_2835 & 240u) == 0u))
        {
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
        }
        else
        {
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            uint _3065 = 0u;
            uint _3074;
            bool _3075;
            for (;;)
            {
                _3074 = texelFetch(g_lightClassification, int((((_2828 << 5u) + (_2814 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                _3075 = _3074 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3075)
                {
                    frontier_phi_66_pred = _3064;
                    frontier_phi_66_pred_1 = _3063;
                    frontier_phi_66_pred_2 = _3062;
                    frontier_phi_66_pred_3 = _3061;
                    frontier_phi_66_pred_4 = _3060;
                    frontier_phi_66_pred_5 = _3059;
                }
                else
                {
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    uint _3189;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3062;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3074;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    for (;;)
                    {
                        uint _3193 = uint(findLSB(_3189)) + (_3065 << 5u);
                        uint _3190 = (_3189 + 4294967295u) & _3189;
                        uint _3195 = _3193 * 48u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3215 = (_3193 * 48u) + 4u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3234 = (_3193 * 48u) + 8u;
                        vec3 _3245 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x));
                        float _3249 = _3209.x - _1893;
                        float _3250 = _3209.y - _1894;
                        float _3251 = _3209.z - _1895;
                        float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                        float _3255 = inversesqrt(_3252);
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3259 = dot(vec3(_758, _761, _764), vec3(_3256, _3257, _3258));
                        float _3264 = 1.0 - (_3252 * _3209.w);
                        float _4638 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3265 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3266 = sqrt(_3252) * _3228.w;
                        float _3269 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3259) + _3270;
                        float _3276 = _3266 * _3266;
                        float _3280 = ((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3265) / ((_3276 * 0.699999988079071044921875) + 1.0);
                        float _3284 = (-0.0) - _1893;
                        float _3285 = (-0.0) - _1894;
                        float _3286 = (-0.0) - _1895;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3291 = _3290 * _3284;
                        float _3292 = _3290 * _3285;
                        float _3293 = _3290 * _3286;
                        float _3300 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                        float _3301 = 1.0 - _833;
                        float _3308 = sqrt(1.0 - ((1.0 - (_3301 * _3301)) * (1.0 - (_3300 * _3300))));
                        float _3309 = _3308 * _3308;
                        float _3310 = _3309 * _3309;
                        float _3311 = _3291 + _3256;
                        float _3312 = _3292 + _3257;
                        float _3313 = _3293 + _3258;
                        float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                        float _3321 = dot(vec3(_758, _761, _764), vec3(_3291, _3292, _3293));
                        float _4654 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3324 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3325 = dot(vec3(_758, _761, _764), vec3(_3317 * _3311, _3317 * _3312, _3317 * _3313));
                        float _4665 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3328 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3332 = ((_3328 * _3328) * (_3310 + (-1.0))) + 1.0;
                        float _3333 = _3269 * _3309;
                        float _3334 = _3333 * _3333;
                        float _3337 = ((1.0 - _3334) * _3259) + _3334;
                        float _4676 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3338 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3339 = 1.0 - _3309;
                        float _3349 = (0.5 / (((_3338 * ((_3324 * _3339) + _3309)) + 9.9999999392252902907785028219223e-09) + (((_3338 * _3339) + _3309) * _3324))) * _3338;
                        float _4687 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3360 = (((_3310 * 3.1415927410125732421875) * (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) / ((_3332 * _3332) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125))) * _3265;
                        _3118 = (_3280 * _3228.x) + _3186;
                        _3119 = (_3280 * _3228.y) + _3187;
                        _3120 = (_3280 * _3228.z) + _3188;
                        _3115 = (_3360 * _3245.x) + _3183;
                        _3116 = (_3360 * _3245.y) + _3184;
                        _3117 = (_3360 * _3245.z) + _3185;
                        if (_3190 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3118;
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3190;
                        }
                    }
                    frontier_phi_66_pred = _3120;
                    frontier_phi_66_pred_1 = _3119;
                    frontier_phi_66_pred_2 = _3118;
                    frontier_phi_66_pred_3 = _3117;
                    frontier_phi_66_pred_4 = _3116;
                    frontier_phi_66_pred_5 = _3115;
                }
                _2925 = frontier_phi_66_pred;
                _2923 = frontier_phi_66_pred_1;
                _2921 = frontier_phi_66_pred_2;
                _2919 = frontier_phi_66_pred_3;
                _2917 = frontier_phi_66_pred_4;
                _2915 = frontier_phi_66_pred_5;
                uint _3066 = _3065 + 1u;
                if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3059 = _2915;
                    _3060 = _2917;
                    _3061 = _2919;
                    _3062 = _2921;
                    _3063 = _2923;
                    _3064 = _2925;
                    _3065 = _3066;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
        }
        uvec4 _2928 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2929 = _2928.z;
        uint _2931 = (_2929 >> 8u) & 15u;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        if (((4294967295u << _2931) & _2834) == 0u)
        {
            _3027 = _2914;
            _3029 = _2916;
            _3031 = _2918;
            _3033 = _2920;
            _3035 = _2922;
            _3037 = _2924;
        }
        else
        {
            float _3052 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
            float _3053 = _3052 * _1893;
            float _3054 = _3052 * _1894;
            float _3055 = _3052 * _1895;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2931 < ((_2929 >> 12u) & 15u))
            {
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3166 = _2914;
                float _3167 = _2916;
                float _3168 = _2918;
                float _3169 = _2920;
                float _3170 = _2922;
                float _3171 = _2924;
                uint _3172 = _2931;
                uint _3181;
                bool _3182;
                for (;;)
                {
                    _3181 = texelFetch(g_lightClassification, int((((_2828 << 5u) + (_2814 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                    _3182 = _3181 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3182)
                    {
                        frontier_phi_72_pred = _3171;
                        frontier_phi_72_pred_1 = _3170;
                        frontier_phi_72_pred_2 = _3169;
                        frontier_phi_72_pred_3 = _3168;
                        frontier_phi_72_pred_4 = _3167;
                        frontier_phi_72_pred_5 = _3166;
                    }
                    else
                    {
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3378 = _3166;
                        float _3379 = _3167;
                        float _3380 = _3168;
                        float _3381 = _3169;
                        float _3382 = _3170;
                        float _3383 = _3171;
                        uint _3384 = _3181;
                        uint _3385;
                        vec4 _3410;
                        float _3411;
                        vec4 _3426;
                        vec3 _3438;
                        vec4 _3453;
                        vec4 _3469;
                        float _3515;
                        bool _3516;
                        for (;;)
                        {
                            uint _3395 = ((_3172 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3384));
                            _3385 = (_3384 + 4294967295u) & _3384;
                            uint _3397 = _3395 * 40u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            _3411 = _3410.w;
                            uint _3413 = (_3395 * 40u) + 4u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3395 * 40u) + 8u;
                            _3438 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x));
                            uint _3440 = (_3395 * 40u) + 16u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3456 = (_3395 * 40u) + 20u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3471 = (_3395 * 40u) + 24u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3490 = (_3395 * 40u) + 28u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            _3515 = fma(_1895, _3503.z, fma(_1894, _3503.y, _3503.x * _1893)) + _3503.w;
                            _3516 = !((fma(_1895, _3484.z, fma(_1894, _3484.y, _3484.x * _1893)) + _3484.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3516)
                            {
                                float _3543 = _3410.x - _1893;
                                float _3544 = _3410.y - _1894;
                                float _3545 = _3410.z - _1895;
                                float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                                float _3549 = inversesqrt(_3546);
                                float _3550 = _3549 * _3543;
                                float _3551 = _3549 * _3544;
                                float _3552 = _3549 * _3545;
                                float _3556 = 1.0 - (_3546 / (_3411 * _3411));
                                float _4698 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3561 = sqrt(_3546) * _3426.w;
                                float _3563 = 1.39999997615814208984375 / (_3561 + 1.39999997615814208984375);
                                float _3564 = _3563 * _3563;
                                float _3567 = ((1.0 - _3564) * dot(vec3(_3550, _3551, _3552), vec3(_758, _761, _764))) + _3564;
                                float _3570 = _3561 * _3561;
                                float _3574 = (fma(_1895, _3453.z, fma(_1894, _3453.y, _3453.x * _1893)) + _3453.w) / _3515;
                                float _3575 = (fma(_1895, _3469.z, fma(_1894, _3469.y, _3469.x * _1893)) + _3469.w) / _3515;
                                float _3579 = 1.0 - dot(vec2(_3574, _3575), vec2(_3574, _3575));
                                float _4714 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3581 = _3580 * (((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3557) / ((_3570 * 0.699999988079071044921875) + 1.0));
                                float _3593 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                                float _3594 = 1.0 - _833;
                                float _3601 = sqrt(1.0 - ((1.0 - (_3594 * _3594)) * (1.0 - (_3593 * _3593))));
                                float _3602 = _3601 * _3601;
                                float _3603 = _3602 * _3602;
                                float _3604 = _3550 - _3053;
                                float _3605 = _3551 - _3054;
                                float _3606 = _3552 - _3055;
                                float _3610 = inversesqrt(dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606)));
                                float _3614 = dot(vec3(_758, _761, _764), vec3((-0.0) - _3053, (-0.0) - _3054, (-0.0) - _3055));
                                float _4725 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3618 = dot(vec3(_758, _761, _764), vec3(_3610 * _3604, _3610 * _3605, _3610 * _3606));
                                float _4736 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3625 = ((_3621 * _3621) * (_3603 + (-1.0))) + 1.0;
                                float _3626 = _3563 * _3602;
                                float _3627 = _3626 * _3626;
                                float _3633 = ((1.0 - _3627) * dot(vec3(_758, _761, _764), vec3(_3550, _3551, _3552))) + _3627;
                                float _4747 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3635 = 1.0 - _3602;
                                float _3645 = (0.5 / (((_3634 * ((_3617 * _3635) + _3602)) + 9.9999999392252902907785028219223e-09) + (((_3634 * _3635) + _3602) * _3617))) * _3634;
                                float _4758 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3655 = (_3580 * _3557) * (((_3603 * 3.1415927410125732421875) * (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) / ((_3625 * _3625) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3581 * _3426.y;
                                frontier_phi_78_pred_1 = _3581 * _3426.x;
                                frontier_phi_78_pred_2 = _3655 * _3438.z;
                                frontier_phi_78_pred_3 = _3655 * _3438.y;
                                frontier_phi_78_pred_4 = _3655 * _3438.x;
                                frontier_phi_78_pred_5 = _3581 * _3426.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3663 = frontier_phi_78_pred;
                            _3662 = frontier_phi_78_pred_1;
                            _3661 = frontier_phi_78_pred_2;
                            _3660 = frontier_phi_78_pred_3;
                            _3659 = frontier_phi_78_pred_4;
                            _3664 = frontier_phi_78_pred_5;
                            _3368 = _3662 + _3381;
                            _3369 = _3663 + _3382;
                            _3370 = _3664 + _3383;
                            _3365 = _3659 + _3378;
                            _3366 = _3660 + _3379;
                            _3367 = _3661 + _3380;
                            if (_3385 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3385;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3370;
                        frontier_phi_72_pred_1 = _3369;
                        frontier_phi_72_pred_2 = _3368;
                        frontier_phi_72_pred_3 = _3367;
                        frontier_phi_72_pred_4 = _3366;
                        frontier_phi_72_pred_5 = _3365;
                    }
                    _3038 = frontier_phi_72_pred;
                    _3036 = frontier_phi_72_pred_1;
                    _3034 = frontier_phi_72_pred_2;
                    _3032 = frontier_phi_72_pred_3;
                    _3030 = frontier_phi_72_pred_4;
                    _3028 = frontier_phi_72_pred_5;
                    uint _3173 = _3172 + 1u;
                    if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3166 = _3028;
                        _3167 = _3030;
                        _3168 = _3032;
                        _3169 = _3034;
                        _3170 = _3036;
                        _3171 = _3038;
                        _3172 = _3173;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3038;
                frontier_phi_60_61_ladder_1 = _3036;
                frontier_phi_60_61_ladder_2 = _3032;
                frontier_phi_60_61_ladder_3 = _3030;
                frontier_phi_60_61_ladder_4 = _3028;
                frontier_phi_60_61_ladder_5 = _3034;
            }
            else
            {
                frontier_phi_60_61_ladder = _2924;
                frontier_phi_60_61_ladder_1 = _2922;
                frontier_phi_60_61_ladder_2 = _2918;
                frontier_phi_60_61_ladder_3 = _2916;
                frontier_phi_60_61_ladder_4 = _2914;
                frontier_phi_60_61_ladder_5 = _2920;
            }
            _3027 = frontier_phi_60_61_ladder_4;
            _3029 = frontier_phi_60_61_ladder_3;
            _3031 = frontier_phi_60_61_ladder_2;
            _3033 = frontier_phi_60_61_ladder_5;
            _3035 = frontier_phi_60_61_ladder_1;
            _3037 = frontier_phi_60_61_ladder;
        }
        float _3042 = isnan(1.0) ? _817 : (isnan(_817) ? 1.0 : min(_817, 1.0));
        _2847 = (_3042 * _3033) + _2359;
        _2849 = (_3042 * _3035) + _2361;
        _2851 = (_3042 * _3037) + _2363;
        _2853 = ((_3027 * _801) * _3042) + _2697;
        _2855 = ((_3029 * _803) * _3042) + _2699;
        _2857 = ((_3031 * _804) * _3042) + _2701;
    }
    else
    {
        _2847 = _2359;
        _2849 = _2361;
        _2851 = _2363;
        _2853 = _2697;
        _2855 = _2699;
        _2857 = _2701;
    }
    float _4774 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4785 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    uint _2877 = _238 + 6u;
    float _2885 = _739 / cbSceneParam._m0[86u].x;
    float _2886 = _740 / cbSceneParam._m0[86u].y;
    vec4 _2900 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2885, _2886, (log2((isnan(cbSceneParam._m0[77u].w) ? _673 : (isnan(_673) ? cbSceneParam._m0[77u].w : min(_673, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2902 = _2900.x;
    float _2903 = _2900.y;
    float _2904 = _2900.z;
    float _2905 = _2900.w;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_673 > cbSceneParam._m0[78u].w)
    {
        float _2939 = isnan(_673) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _673 : min(cbSceneParam._m0[80u].w, _673));
        float _2940 = _2939 / _673;
        float _2951 = _2940 * _724;
        float _2952 = _725 * _2940;
        float _2953 = (-0.0) - _2952;
        float _2955 = _2940 * _726;
        float _2957 = (cbSceneParam._m0[77u].w * _2953) / _2939;
        float _2958 = _2957 + cbSceneParam._m0[79u].w;
        float _2959 = cbSceneParam._m0[79u].w - _2952;
        float _2965 = sqrt(((_2951 * _2951) + (_2952 * _2952)) + (_2955 * _2955));
        float _2968 = (1.0 - (cbSceneParam._m0[77u].w / _2939)) * _2965;
        float _2973 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2975 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3128;
        if (abs((_2953 - _2957) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3128 = ((((_2958 > 0.0) ? exp2(_2973 * _2958) : (2.0 - exp2(_2975 * _2958))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2968;
        }
        else
        {
            float _3088 = 1.0 / cbSceneParam._m0[80u].x;
            float _3089 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : max(_2958, _2959));
            float _3090 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : min(_2958, _2959));
            float _3099 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : min(_3089, 0.0));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            _3128 = ((abs(_2965 / _2953) * cbSceneParam._m0[80u].y) * ((((_3099 - _3100) * 2.0) - ((exp2(_2973 * (isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0)))) - exp2(_2973 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))))) * _3088)) - ((exp2(_2975 * _3099) - exp2(_2975 * _3100)) * _3088))) + (_2968 * cbSceneParam._m0[80u].z);
        }
        vec4 _3130 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2885, _2886, 1.0), 0.0);
        float _3139 = exp2((_3128 * (-1.44269502162933349609375)) * (1.0 - _3130.w));
        float _3140 = log2(_3139);
        float _3156 = log2(_2905);
        _2977 = (exp2(_3156 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].x)) * _3130.x) / cbSceneParam._m0[78u].x)) + _2902;
        _2979 = (exp2(_3156 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].y)) * _3130.y) / cbSceneParam._m0[78u].y)) + _2903;
        _2981 = (exp2(_3156 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].z)) * _3130.z) / cbSceneParam._m0[78u].z)) + _2904;
        _2983 = _3139 * _2905;
    }
    else
    {
        _2977 = _2902;
        _2979 = _2903;
        _2981 = _2904;
        _2983 = _2905;
    }
    float _2995 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2996 = _2995 == 3.0;
    float _2997 = log2(_2983);
    float _3004 = exp2(_2997 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2847 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _817))) + ((_2853 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1625)) * cbPerFrame._m0[3u].x));
    float _3005 = exp2(_2997 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2849 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _817))) + ((_2855 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1625)) * cbPerFrame._m0[3u].x));
    float _3006 = exp2(_2997 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2851 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _817))) + ((_2857 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1625)) * cbPerFrame._m0[3u].x));
    float _3015 = (_2995 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3015 * (_2996 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2977)));
    SV_Target.y = _3015 * (_2996 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2979)));
    SV_Target.z = _3015 * (_2996 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2981)));
    SV_Target.w = cbInstanceData._m0[_2877].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2877].w;
}


