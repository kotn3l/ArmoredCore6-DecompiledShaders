#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1039;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    float _242 = _241 * TEXCOORD.z;
    float _243 = _241 * TEXCOORD.w;
    vec4 _262 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _242) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _243) + cbTextureTilingScale._m0[14u].w));
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _313 = _309.z;
    float _318 = (_309.x * 2.0) + (-1.0);
    float _320 = (_309.y * 2.0) + (-1.0);
    float _321 = dot(vec2(_318, _320), vec2(_318, _320));
    float _3367 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _327 = sqrt(1.0 - (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))));
    float _330 = fma(_327, _210, fma(_320, _217, _318 * _203));
    float _333 = fma(_327, _211, fma(_320, _218, _318 * _204));
    float _336 = fma(_327, _212, fma(_320, _219, _318 * _205));
    float _340 = inversesqrt(dot(vec3(_330, _333, _336), vec3(_330, _333, _336)));
    vec4 _376 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _242) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _243) + cbTextureTilingScale._m0[11u].w));
    float _378 = _376.x;
    float _379 = 1.0 - _378;
    float _386 = ((_378 - _379) * cbMtdParam._m0[24u].z) + _379;
    float _388 = (cbMtdParam._m0[19u].x + dot(vec4(_340 * _330, _340 * _333, _340 * _336, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_386 * cbMtdParam._m0[21u].z);
    float _3378 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _404 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_386 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3389 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _409 = ((_389 * ((_289.x * cbMtdParam._m0[18u].x) - _268)) * _405) + _268;
    float _410 = ((_389 * ((_289.y * cbMtdParam._m0[18u].y) - _269)) * _405) + _269;
    float _411 = ((_389 * ((_289.z * cbMtdParam._m0[18u].z) - _270)) * _405) + _270;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _426 = _424.x;
    float _429 = _426 - ((_426 * _389) * _405);
    vec4 _442 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _242) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _243) + cbTextureTilingScale._m0[15u].w));
    float _449 = (_442.x * 2.0) + (-1.0);
    float _450 = (_442.y * 2.0) + (-1.0);
    float _451 = dot(vec2(_449, _450), vec2(_449, _450));
    float _3400 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _460 = (((_442.z - _313) * _389) * _405) + _313;
    float _475 = (((cbMtdParam._m0[21u].x * _318) + ((_449 - _318) * _389)) * _405) + _318;
    float _476 = (((cbMtdParam._m0[21u].x * _320) + ((_450 - _320) * _389)) * _405) + _320;
    float _477 = (((sqrt(1.0 - (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) - _327) * _389) * _405) + _327;
    float _482 = cbMtdParam._m0[22u].x + _309.w;
    float _485 = fma(_477, _210, fma(_476, _217, _475 * _203));
    float _488 = fma(_477, _211, fma(_476, _218, _475 * _204));
    float _491 = fma(_477, _212, fma(_476, _219, _475 * _205));
    float _495 = inversesqrt(dot(vec3(_485, _488, _491), vec3(_485, _488, _491)));
    float _496 = _495 * _485;
    float _497 = _495 * _488;
    float _498 = _495 * _491;
    float _3411 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _499 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _3422 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3433 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3444 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3455 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3466 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _504 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _518 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _569 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _559);
    float _570 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _559);
    float _571 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _559);
    float _575 = inversesqrt(dot(vec3(_569, _570, _571), vec3(_569, _570, _571)));
    float _576 = _569 * _575;
    float _577 = _570 * _575;
    float _578 = _571 * _575;
    float _584 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _585 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _606 = fma(_498, cbSceneParam._m0[5u].z, fma(_497, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _496));
    float _609 = fma(_498, cbSceneParam._m0[6u].z, fma(_497, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _496));
    float _612 = fma(_498, cbSceneParam._m0[7u].z, fma(_497, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _496));
    uint _626 = (_222 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _632 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_626].x;
    float _633 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_626].y;
    float _634 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_626].z;
    float _3477 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _638 = 1.0 - _504;
    float _639 = _635 * _638;
    float _640 = _636 * _638;
    float _641 = _637 * _638;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _504;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _504;
    float _648 = (_637 + (-0.039999999105930328369140625)) * _504;
    float _649 = _646 + 0.039999999105930328369140625;
    float _651 = _647 + 0.039999999105930328369140625;
    float _652 = _648 + 0.039999999105930328369140625;
    vec4 _661 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _584, cbSceneParam._m0[86u].y * _585));
    float _665 = ((isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * TEXCOORD_5.w) * _661.x;
    float _666 = dot(vec3(_496, _497, _498), vec3(_576, _577, _578));
    float _669 = _666 * 2.0;
    float _673 = (_669 * _496) - _576;
    float _674 = (_669 * _497) - _577;
    float _675 = (_669 * _498) - _578;
    float _679 = abs(dot(vec3(_576, _577, _578), vec3(_496, _497, _498)));
    float _3510 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _681 = sqrt(_499);
    float _694 = exp2((_681 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_681 * 3.0));
    float _700 = (1.0 - _694) * ((_681 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _701 = _694 * _681;
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1038;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _763 = fma(_737, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729));
        float _767 = fma(_737, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729));
        float _771 = fma(_737, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729));
        float _796 = _729 + _496;
        float _797 = _733 + _497;
        float _798 = _737 + _498;
        float _808 = fma(_798, cbModelParam._m0[26u].z, fma(_797, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _796)) - _763;
        float _809 = fma(_798, cbModelParam._m0[27u].z, fma(_797, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _796)) - _767;
        float _810 = fma(_798, cbModelParam._m0[28u].z, fma(_797, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _796)) - _771;
        float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
        float _827 = ((_814 * _808) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_763 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_814 * _809) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_767 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_814 * _810) / cbModelParam._m0[34u].z) + ((((((_771 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        float _866 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_832.x + (-0.5));
        float _868 = _866 * (_832.y + (-0.5));
        float _869 = _866 * (_832.z + (-0.5));
        float _876 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_839.x + (-0.5));
        float _878 = _876 * (_839.y + (-0.5));
        float _879 = _876 * (_839.z + (-0.5));
        float _886 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_846.x + (-0.5));
        float _888 = _886 * (_846.y + (-0.5));
        float _889 = _886 * (_846.z + (-0.5));
        float _896 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_853.x + (-0.5));
        float _898 = _896 * (_853.y + (-0.5));
        float _899 = _896 * (_853.z + (-0.5));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = _867 * 0.5;
        float _904 = _877 * 0.5;
        float _905 = _887 * 0.5;
        float _906 = dot(vec3(_903, _904, _905), vec3(_903, _904, _905));
        float _911 = (_906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_906);
        float _920 = (dot(vec3(_496, _497, _498), vec3(_911 * _903, _911 * _904, _911 * _905)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _930 = sqrt(((_904 * _904) + (_903 * _903)) + (_905 * _905)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3558 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_932 + 1.0))) + _937) * _900;
        float _947 = _868 * 0.5;
        float _948 = _878 * 0.5;
        float _949 = _888 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_496, _497, _498), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3591 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_974 + 1.0))) + _979) * _901;
        float _989 = _869 * 0.5;
        float _990 = _879 * 0.5;
        float _991 = _889 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_496, _497, _498), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3624 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1016 + 1.0))) + _1021) * _902;
        _1038 = _869;
        _1040 = _868;
        _1041 = _867;
        _1042 = _879;
        _1043 = _878;
        _1044 = _877;
        _1045 = _889;
        _1046 = _888;
        _1047 = _887;
        _1048 = _902;
        _1049 = _901;
        _1050 = _900;
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
    }
    else
    {
        _1038 = _1039;
        _1040 = _1039;
        _1041 = _1039;
        _1042 = _1039;
        _1043 = _1039;
        _1044 = _1039;
        _1045 = _1039;
        _1046 = _1039;
        _1047 = _1039;
        _1048 = _1039;
        _1049 = _1039;
        _1050 = _1039;
        _1051 = 0.0;
        _1052 = 0.0;
        _1053 = 0.0;
    }
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1078 = fma(_737, cbModelParam._m0[30u].z, fma(_733, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _729));
        float _1082 = fma(_737, cbModelParam._m0[31u].z, fma(_733, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _729));
        float _1086 = fma(_737, cbModelParam._m0[32u].z, fma(_733, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _729));
        float _1109 = _729 + _496;
        float _1110 = _733 + _497;
        float _1111 = _737 + _498;
        float _1121 = fma(_1111, cbModelParam._m0[30u].z, fma(_1110, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1109)) - _1078;
        float _1122 = fma(_1111, cbModelParam._m0[31u].z, fma(_1110, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1109)) - _1082;
        float _1123 = fma(_1111, cbModelParam._m0[32u].z, fma(_1110, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1109)) - _1086;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1078 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1082 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[35u].z) + ((((((_1086 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1177 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1144.x + (-0.5));
        float _1179 = _1177 * (_1144.y + (-0.5));
        float _1180 = _1177 * (_1144.z + (-0.5));
        float _1187 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1151.x + (-0.5));
        float _1189 = _1187 * (_1151.y + (-0.5));
        float _1190 = _1187 * (_1151.z + (-0.5));
        float _1197 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1158.x + (-0.5));
        float _1199 = _1197 * (_1158.y + (-0.5));
        float _1200 = _1197 * (_1158.z + (-0.5));
        float _1207 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1165.x + (-0.5));
        float _1209 = _1207 * (_1165.y + (-0.5));
        float _1210 = _1207 * (_1165.z + (-0.5));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = _1178 * 0.5;
        float _1215 = _1188 * 0.5;
        float _1216 = _1198 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_496, _497, _498), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3687 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1241 + 1.0))) + _1246) * _1211;
        float _1256 = _1179 * 0.5;
        float _1257 = _1189 * 0.5;
        float _1258 = _1199 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_496, _497, _498), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3720 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1283 + 1.0))) + _1288) * _1212;
        float _1298 = _1180 * 0.5;
        float _1299 = _1190 * 0.5;
        float _1300 = _1200 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_496, _497, _498), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3753 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1325 + 1.0))) + _1330) * _1213;
        _1347 = _1180;
        _1348 = _1179;
        _1349 = _1178;
        _1350 = _1190;
        _1351 = _1189;
        _1352 = _1188;
        _1353 = _1200;
        _1354 = _1199;
        _1355 = _1198;
        _1356 = _1213;
        _1357 = _1212;
        _1358 = _1211;
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1039;
        _1348 = _1039;
        _1349 = _1039;
        _1350 = _1039;
        _1351 = _1039;
        _1352 = _1039;
        _1353 = _1039;
        _1354 = _1039;
        _1355 = _1039;
        _1356 = _1039;
        _1357 = _1039;
        _1358 = _1039;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1051)) + _1051;
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1052)) + _1052;
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1053)) + _1053;
    float _1394 = fma(_1373, cbSceneParam._m0[89u].z, fma(_1372, cbSceneParam._m0[89u].y, _1371 * cbSceneParam._m0[89u].x));
    float _1397 = fma(_1373, cbSceneParam._m0[90u].z, fma(_1372, cbSceneParam._m0[90u].y, _1371 * cbSceneParam._m0[90u].x));
    float _1400 = fma(_1373, cbSceneParam._m0[91u].z, fma(_1372, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1371));
    float _1415 = _673 * 0.5;
    float _1416 = _674 * 0.5;
    float _1417 = _675 * 0.5;
    float _1418 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1421 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1424 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1458;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1431 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1038, _1042, _1045, _1048));
        float _1435 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1040, _1043, _1046, _1049));
        float _1439 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1041, _1044, _1047, _1050));
        float _1446 = dot(vec4(cbModelParam._m0[39u]), vec4(_1415, _1416, _1417, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1469;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1460 = dot(vec4(cbModelParam._m0[40u]), vec4(_1415, _1416, _1417, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1473 = (_1469 * cbModelParam._m0[1u].x) + (_1458 * (1.0 - cbModelParam._m0[1u].x));
    float _1483 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _499);
    float _1484 = isnan(_1483) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1483 : min(cbModelParam._m0[25u].z, _1483));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1531 = fma(_737, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729)) + cbModelParam._m0[13u].w;
        float _1535 = fma(_737, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729)) + cbModelParam._m0[14u].w;
        float _1539 = fma(_737, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729)) + cbModelParam._m0[15u].w;
        float _1542 = fma(_675, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673));
        float _1545 = fma(_675, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673));
        float _1548 = fma(_675, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673));
        float _1576;
        if (_1542 > 0.0)
        {
            _1576 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1576 = frontier_phi_14_12_ladder;
        }
        float _1779;
        if (_1545 > 0.0)
        {
            _1779 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1779 = frontier_phi_23_19_ladder;
        }
        float _2033;
        if (_1548 > 0.0)
        {
            _2033 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2033 = frontier_phi_35_30_ladder;
        }
        float _2035 = isnan(_1779) ? _1576 : (isnan(_1576) ? _1779 : min(_1576, _1779));
        float _2036 = isnan(_2033) ? _2035 : (isnan(_2035) ? _2033 : min(_2035, _2033));
        float _2040 = (_2036 * _1542) + _1531;
        float _2041 = (_2036 * _1545) + _1535;
        float _2042 = (_2036 * _1548) + _1539;
        float _2043 = _2036 * 9.9999997473787516355514526367188e-05;
        float _2045 = (-1.0) - _2043;
        float _2047 = _2043 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2042 > _2047) || ((_2042 < _2045) || ((_2041 > _2047) || ((_2041 < _2045) || ((_2040 < _2045) || (_2040 > _2047))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2170 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2042, cbModelParam._m0[9u].z, fma(_2041, cbModelParam._m0[9u].y, _2040 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2042, cbModelParam._m0[10u].z, fma(_2041, cbModelParam._m0[10u].y, _2040 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2042, cbModelParam._m0[11u].z, fma(_2041, cbModelParam._m0[11u].y, _2040 * cbModelParam._m0[11u].x))), _1484);
            frontier_phi_13_35_ladder = _2170.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2170.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2170.x * cbModelParam._m0[1u].y;
        }
        _1564 = frontier_phi_13_35_ladder_2;
        _1566 = frontier_phi_13_35_ladder_1;
        _1568 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_673, _674, _675), _1484);
        _1564 = _1552.x * cbModelParam._m0[1u].y;
        _1566 = _1552.y * cbModelParam._m0[1u].y;
        _1568 = _1552.z * cbModelParam._m0[1u].y;
    }
    float _1572 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _499);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1572 : min(cbModelParam._m0[25u].w, _1572));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1626 = fma(_737, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729)) + cbModelParam._m0[21u].w;
        float _1630 = fma(_737, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729)) + cbModelParam._m0[22u].w;
        float _1634 = fma(_737, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729)) + cbModelParam._m0[23u].w;
        float _1637 = fma(_675, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673));
        float _1640 = fma(_675, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673));
        float _1643 = fma(_675, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673));
        float _1784;
        if (_1637 > 0.0)
        {
            _1784 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1784 = frontier_phi_25_21_ladder;
        }
        float _2060;
        if (_1640 > 0.0)
        {
            _2060 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2060 = frontier_phi_37_32_ladder;
        }
        float _2273;
        if (_1643 > 0.0)
        {
            _2273 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2273 = frontier_phi_46_43_ladder;
        }
        float _2275 = isnan(_2060) ? _1784 : (isnan(_1784) ? _2060 : min(_1784, _2060));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1637) + _1626;
        float _2281 = (_2276 * _1640) + _1630;
        float _2282 = (_2276 * _1643) + _1634;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2284 = (-1.0) - _2283;
        float _2286 = _2283 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2282 > _2286) || ((_2282 < _2284) || ((_2281 > _2286) || ((_2281 < _2284) || ((_2280 < _2284) || (_2280 > _2286))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2282, cbModelParam._m0[17u].z, fma(_2281, cbModelParam._m0[17u].y, _2280 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2282, cbModelParam._m0[18u].z, fma(_2281, cbModelParam._m0[18u].y, _2280 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2282, cbModelParam._m0[19u].z, fma(_2281, cbModelParam._m0[19u].y, _2280 * cbModelParam._m0[19u].x))), _1573);
            frontier_phi_22_46_ladder = _2481.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2481.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2481.x * cbModelParam._m0[1u].z;
        }
        _1662 = frontier_phi_22_46_ladder_2;
        _1664 = frontier_phi_22_46_ladder_1;
        _1666 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_673, _674, _675), _1573);
        _1662 = _1646.x * cbModelParam._m0[1u].z;
        _1664 = _1646.y * cbModelParam._m0[1u].z;
        _1666 = _1646.z * cbModelParam._m0[1u].z;
    }
    float _1679 = (((_700 * _649) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1662 - _1564)) + _1564);
    float _1681 = (((_700 * _651) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1664 - _1566)) + _1566);
    float _1683 = (((_700 * _652) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1666 - _1568)) + _1568);
    float _1686 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, _1679 * cbSceneParam._m0[91u].x));
    uvec4 _1702 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1704 = _1702.x * 14u;
    uint _1705 = _1704 + 13u;
    float _1712 = _665 + (-1.0);
    float _1717 = (cbLight._m0[_1705].x * _1712) + 1.0;
    float _1718 = (cbLight._m0[_1705].y * _1712) + 1.0;
    float _1719 = (cbLight._m0[_1705].z * _1712) + 1.0;
    float _1720 = (cbLight._m0[_1705].w * _1712) + 1.0;
    uint _1721 = _1704 + 5u;
    float _1727 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
    uint _1731 = _1704 + 4u;
    float _1738 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
    uint _1742 = _1704 | 1u;
    float _1753 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_496, _497, _498));
    float _1756 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_496, _497, _498));
    float _3889 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _3900 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1761 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
    float _1763 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.3183098733425140380859375;
    float _1770 = ((cbLight._m0[_1721].x * _1727) * _1763) + ((cbLight._m0[_1731].x * _1738) * _1761);
    float _1771 = ((_1727 * cbLight._m0[_1721].y) * _1763) + ((_1738 * cbLight._m0[_1731].y) * _1761);
    float _1772 = ((_1727 * cbLight._m0[_1721].z) * _1763) + ((_1738 * cbLight._m0[_1731].z) * _1761);
    uvec4 _1776 = floatBitsToUint(cbLight._m0[_1704 + 12u]);
    bool _1778 = _1776.x == 0u;
    float _1789;
    float _1791;
    float _1793;
    if (_1778)
    {
        _1789 = _1770;
        _1791 = _1771;
        _1793 = _1772;
    }
    else
    {
        uint _1797 = _1704 + 6u;
        float _1813 = (dot(vec3(cbLight._m0[_1704 + 2u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _1814 = _1813 * _1813;
        float _3911 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1816 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _1789 = (((cbLight._m0[_1797].x * 0.3183098733425140380859375) * _1815) * _1816) + _1770;
        _1791 = (((cbLight._m0[_1797].y * 0.3183098733425140380859375) * _1815) * _1816) + _1771;
        _1793 = (((cbLight._m0[_1797].z * 0.3183098733425140380859375) * _1815) * _1816) + _1772;
    }
    bool _1796 = _1776.y == 0u;
    float _1834;
    float _1836;
    float _1838;
    if (_1796)
    {
        _1834 = _1789;
        _1836 = _1791;
        _1838 = _1793;
    }
    else
    {
        uint _2004 = _1704 + 7u;
        float _2020 = (dot(vec3(cbLight._m0[_1704 + 3u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _2021 = _2020 * _2020;
        float _3927 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2022 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _2023 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1834 = (((cbLight._m0[_2004].x * 0.3183098733425140380859375) * _2022) * _2023) + _1789;
        _1836 = (((cbLight._m0[_2004].y * 0.3183098733425140380859375) * _2022) * _2023) + _1791;
        _1838 = (((cbLight._m0[_2004].z * 0.3183098733425140380859375) * _2022) * _2023) + _1793;
    }
    uint _1841 = _1704 + 8u;
    float _1854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1704].w)) * _499) * 0.949999988079071044921875);
    float _1855 = _1854 * _1854;
    float _1856 = cbLight._m0[_1704].x + _576;
    float _1857 = cbLight._m0[_1704].y + _577;
    float _1858 = cbLight._m0[_1704].z + _578;
    float _1862 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
    float _1863 = _1862 * _1856;
    float _1864 = _1862 * _1857;
    float _1865 = _1862 * _1858;
    float _1866 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1704].xyz));
    float _3943 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _1870 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1871 = dot(vec3(_496, _497, _498), vec3(_1863, _1864, _1865));
    float _3965 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1875 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1863, _1864, _1865));
    float _3976 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1879 = _1855 * _1855;
    float _1883 = ((_1874 * _1874) * (_1879 + (-1.0))) + 1.0;
    float _1891 = exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0);
    float _1892 = 0.959999978542327880859375 - _646;
    float _1894 = 0.959999978542327880859375 - _647;
    float _1895 = 0.959999978542327880859375 - _648;
    float _1902 = 1.0 - _1855;
    float _1913 = (0.5 / (((_1870 * ((_1869 * _1902) + _1855)) + 9.9999999392252902907785028219223e-09) + (((_1870 * _1902) + _1855) * _1869))) * _1869;
    float _3987 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1915 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1879 / ((_1883 * _1883) * 3.141590118408203125));
    uint _1926 = _1704 + 9u;
    float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1742].w)) * _499) * 0.949999988079071044921875);
    float _1938 = _1937 * _1937;
    float _1939 = cbLight._m0[_1742].x + _576;
    float _1940 = cbLight._m0[_1742].y + _577;
    float _1941 = cbLight._m0[_1742].z + _578;
    float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
    float _1946 = _1945 * _1939;
    float _1947 = _1945 * _1940;
    float _1948 = _1945 * _1941;
    float _1949 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1742].xyz));
    float _3998 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1953 = dot(vec3(_496, _497, _498), vec3(_1946, _1947, _1948));
    float _4009 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_1946, _1947, _1948));
    float _4020 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1938 * _1938;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1972 = exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0);
    float _1979 = 1.0 - _1938;
    float _1989 = (0.5 / (((_1870 * ((_1952 * _1979) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1870 * _1979) + _1938) * _1952))) * _1952;
    float _4031 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1991 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    float _2001 = (((((_1972 * _1892) + _649) * cbLight._m0[_1926].x) * _1991) * _1727) + (((((_1891 * _1892) + _649) * cbLight._m0[_1841].x) * _1915) * _1738);
    float _2002 = (((((_1972 * _1894) + _651) * cbLight._m0[_1926].y) * _1991) * _1727) + (((((_1891 * _1894) + _651) * cbLight._m0[_1841].y) * _1915) * _1738);
    float _2003 = (((((_1972 * _1895) + _652) * cbLight._m0[_1926].z) * _1991) * _1727) + (((((_1891 * _1895) + _652) * cbLight._m0[_1841].z) * _1915) * _1738);
    float _2065;
    float _2067;
    float _2069;
    if (_1778)
    {
        _2065 = _2001;
        _2067 = _2002;
        _2069 = _2003;
    }
    else
    {
        uint _2071 = _1704 + 2u;
        uint _2075 = _1704 + 10u;
        float _2089 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _499) * 0.949999988079071044921875);
        float _2090 = _2089 * _2089;
        float _2091 = cbLight._m0[_2071].x + _576;
        float _2092 = cbLight._m0[_2071].y + _577;
        float _2093 = cbLight._m0[_2071].z + _578;
        float _2097 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
        float _2098 = _2097 * _2091;
        float _2099 = _2097 * _2092;
        float _2100 = _2097 * _2093;
        float _2101 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2071].xyz));
        float _4042 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2104 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2105 = dot(vec3(_496, _497, _498), vec3(_2098, _2099, _2100));
        float _4053 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2108 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _2109 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2098, _2099, _2100));
        float _4064 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2113 = _2090 * _2090;
        float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
        float _2124 = exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0);
        float _2131 = 1.0 - _2090;
        float _2141 = (0.5 / (((_1870 * ((_2104 * _2131) + _2090)) + 9.9999999392252902907785028219223e-09) + (((_1870 * _2131) + _2090) * _2104))) * _2104;
        float _4075 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2143 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
        float _2144 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _2065 = (((((_2124 * _1892) + _649) * cbLight._m0[_2075].x) * _2143) * _2144) + _2001;
        _2067 = (((((_2124 * _1894) + _651) * cbLight._m0[_2075].y) * _2143) * _2144) + _2002;
        _2069 = (((((_2124 * _1895) + _652) * cbLight._m0[_2075].z) * _2143) * _2144) + _2003;
    }
    float _2179;
    float _2181;
    float _2183;
    if (_1796)
    {
        _2179 = _2065;
        _2181 = _2067;
        _2183 = _2069;
    }
    else
    {
        uint _2190 = _1704 + 3u;
        uint _2194 = _1704 + 11u;
        float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _499) * 0.949999988079071044921875);
        float _2209 = _2208 * _2208;
        float _2210 = cbLight._m0[_2190].x + _576;
        float _2211 = cbLight._m0[_2190].y + _577;
        float _2212 = cbLight._m0[_2190].z + _578;
        float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
        float _2217 = _2216 * _2210;
        float _2218 = _2216 * _2211;
        float _2219 = _2216 * _2212;
        float _2220 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2190].xyz));
        float _4091 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2223 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2224 = dot(vec3(_496, _497, _498), vec3(_2217, _2218, _2219));
        float _4102 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2228 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2217, _2218, _2219));
        float _4113 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2232 = _2209 * _2209;
        float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
        float _2243 = exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0);
        float _2250 = 1.0 - _2209;
        float _2260 = (0.5 / (((_1870 * ((_2223 * _2250) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_1870 * _2250) + _2209) * _2223))) * _2223;
        float _4124 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2262 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
        float _2263 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _2179 = (((((_2243 * _1892) + _649) * cbLight._m0[_2194].x) * _2262) * _2263) + _2065;
        _2181 = (((((_2243 * _1894) + _651) * cbLight._m0[_2194].y) * _2262) * _2263) + _2067;
        _2183 = (((((_2243 * _1895) + _652) * cbLight._m0[_2194].z) * _2262) * _2263) + _2069;
    }
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    float _2406;
    float _2408;
    if (_1702.y == 0u)
    {
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2338;
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2338;
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2338;
        uvec4 _2353 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2354 = _2353.x;
        uint _2365 = uint((float(_2353.y) * floor(float(uint(cbSceneParam._m0[85u].y * _585) / _2354))) + floor(float(uint(cbSceneParam._m0[85u].x * _584) / _2354)));
        float _2375 = (log2(_2341 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2376 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        uint _2379 = uint(isnan(14.0) ? _2376 : (isnan(_2376) ? 14.0 : min(_2376, 14.0)));
        uvec4 _2384 = texelFetch(g_lightClusterGridBuffer, int(((_2379 << 2u) + (_2365 << 6u)) >> 2u));
        uint _2385 = _2384.x;
        uint _2386 = _2353.z;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        if (((((1u << ((_2386 >> 4u) & 15u)) + 4294967295u) & _2385) == 0u) || ((_2386 & 240u) == 0u))
        {
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
        }
        else
        {
            float _2487;
            float _2489;
            float _2491;
            float _2493;
            float _2495;
            float _2497;
            float _2631 = 0.0;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            uint _2637 = 0u;
            uint _2646;
            bool _2647;
            for (;;)
            {
                _2646 = texelFetch(g_lightClassification, int((((_2379 << 5u) + (_2365 << 9u)) + (_2637 << 2u)) >> 2u)).x;
                _2647 = _2646 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2647)
                {
                    frontier_phi_61_pred = _2631;
                    frontier_phi_61_pred_1 = _2636;
                    frontier_phi_61_pred_2 = _2635;
                    frontier_phi_61_pred_3 = _2634;
                    frontier_phi_61_pred_4 = _2633;
                    frontier_phi_61_pred_5 = _2632;
                }
                else
                {
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    uint _2761;
                    _2755 = _2631;
                    _2756 = _2632;
                    _2757 = _2633;
                    _2758 = _2634;
                    _2759 = _2635;
                    _2760 = _2636;
                    _2761 = _2646;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    for (;;)
                    {
                        uint _2765 = uint(findLSB(_2761)) + (_2637 << 5u);
                        uint _2762 = (_2761 + 4294967295u) & _2761;
                        uint _2767 = _2765 * 48u;
                        vec4 _2781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 3u)).x));
                        uint _2787 = (_2765 * 48u) + 4u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        uint _2806 = (_2765 * 48u) + 8u;
                        vec3 _2817 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x));
                        float _2821 = _2781.x - _2339;
                        float _2822 = _2781.y - _2340;
                        float _2823 = _2781.z - _2341;
                        float _2824 = dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823));
                        float _2827 = inversesqrt(_2824);
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2831 = dot(vec3(_606, _609, _612), vec3(_2828, _2829, _2830));
                        float _2836 = 1.0 - (_2824 * _2781.w);
                        float _4150 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2837 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                        float _2838 = sqrt(_2824) * _2800.w;
                        float _2841 = 1.39999997615814208984375 / (_2838 + 1.39999997615814208984375);
                        float _2842 = _2841 * _2841;
                        float _2845 = ((1.0 - _2842) * _2831) + _2842;
                        float _2848 = _2838 * _2838;
                        float _2852 = ((isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0))) * _2837) / ((_2848 * 0.699999988079071044921875) + 1.0);
                        float _2856 = (-0.0) - _2339;
                        float _2857 = (-0.0) - _2340;
                        float _2858 = (-0.0) - _2341;
                        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
                        float _2863 = _2862 * _2856;
                        float _2864 = _2862 * _2857;
                        float _2865 = _2862 * _2858;
                        float _2873 = exp2(log2(1.0 / ((_2848 * 3.5) + 5.0)) * 0.25);
                        float _2874 = 1.0 - _681;
                        float _2881 = sqrt(1.0 - ((1.0 - (_2874 * _2874)) * (1.0 - (_2873 * _2873))));
                        float _2882 = _2881 * _2881;
                        float _2883 = _2882 * _2882;
                        float _2884 = _2863 + _2828;
                        float _2885 = _2864 + _2829;
                        float _2886 = _2865 + _2830;
                        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
                        float _2894 = dot(vec3(_606, _609, _612), vec3(_2863, _2864, _2865));
                        float _4166 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2897 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2898 = dot(vec3(_606, _609, _612), vec3(_2890 * _2884, _2890 * _2885, _2890 * _2886));
                        float _4177 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2901 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2905 = ((_2901 * _2901) * (_2883 + (-1.0))) + 1.0;
                        float _2906 = _2841 * _2882;
                        float _2907 = _2906 * _2906;
                        float _2910 = ((1.0 - _2907) * _2831) + _2907;
                        float _4188 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2911 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2912 = 1.0 - _2882;
                        float _2922 = (0.5 / (((_2911 * ((_2897 * _2912) + _2882)) + 9.9999999392252902907785028219223e-09) + (((_2911 * _2912) + _2882) * _2897))) * _2911;
                        float _4199 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2933 = (((_2883 * 3.1415927410125732421875) * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) / ((_2905 * _2905) * ((_2848 * 2.1991131305694580078125) + 3.141590118408203125))) * _2837;
                        _2690 = (_2852 * _2800.x) + _2758;
                        _2691 = (_2852 * _2800.y) + _2759;
                        _2692 = (_2852 * _2800.z) + _2760;
                        _2687 = (_2933 * _2817.x) + _2755;
                        _2688 = (_2933 * _2817.y) + _2756;
                        _2689 = (_2933 * _2817.z) + _2757;
                        if (_2762 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2755 = _2687;
                            _2756 = _2688;
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2762;
                        }
                    }
                    frontier_phi_61_pred = _2687;
                    frontier_phi_61_pred_1 = _2692;
                    frontier_phi_61_pred_2 = _2691;
                    frontier_phi_61_pred_3 = _2690;
                    frontier_phi_61_pred_4 = _2689;
                    frontier_phi_61_pred_5 = _2688;
                }
                _2487 = frontier_phi_61_pred;
                _2497 = frontier_phi_61_pred_1;
                _2495 = frontier_phi_61_pred_2;
                _2493 = frontier_phi_61_pred_3;
                _2491 = frontier_phi_61_pred_4;
                _2489 = frontier_phi_61_pred_5;
                uint _2638 = _2637 + 1u;
                if (_2638 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2631 = _2487;
                    _2632 = _2489;
                    _2633 = _2491;
                    _2634 = _2493;
                    _2635 = _2495;
                    _2636 = _2497;
                    _2637 = _2638;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
        }
        uvec4 _2500 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2501 = _2500.z;
        uint _2503 = (_2501 >> 8u) & 15u;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        if (((4294967295u << _2503) & _2385) == 0u)
        {
            _2599 = _2486;
            _2601 = _2488;
            _2603 = _2490;
            _2605 = _2492;
            _2607 = _2494;
            _2609 = _2496;
        }
        else
        {
            float _2624 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
            float _2625 = _2624 * _2339;
            float _2626 = _2624 * _2340;
            float _2627 = _2624 * _2341;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2503 < ((_2501 >> 12u) & 15u))
            {
                float _2600;
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2738 = _2486;
                float _2739 = _2488;
                float _2740 = _2490;
                float _2741 = _2492;
                float _2742 = _2494;
                float _2743 = _2496;
                uint _2744 = _2503;
                uint _2753;
                bool _2754;
                for (;;)
                {
                    _2753 = texelFetch(g_lightClassification, int((((_2379 << 5u) + (_2365 << 9u)) + (_2744 << 2u)) >> 2u)).x;
                    _2754 = _2753 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2754)
                    {
                        frontier_phi_67_pred = _2741;
                        frontier_phi_67_pred_1 = _2742;
                        frontier_phi_67_pred_2 = _2743;
                        frontier_phi_67_pred_3 = _2740;
                        frontier_phi_67_pred_4 = _2739;
                        frontier_phi_67_pred_5 = _2738;
                    }
                    else
                    {
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _2951 = _2738;
                        float _2952 = _2739;
                        float _2953 = _2740;
                        float _2954 = _2741;
                        float _2955 = _2742;
                        float _2956 = _2743;
                        uint _2957 = _2753;
                        uint _2958;
                        vec4 _2983;
                        float _2984;
                        vec4 _2999;
                        vec3 _3011;
                        vec4 _3027;
                        vec4 _3043;
                        float _3089;
                        bool _3090;
                        for (;;)
                        {
                            uint _2968 = ((_2744 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2957));
                            _2958 = (_2957 + 4294967295u) & _2957;
                            uint _2970 = _2968 * 40u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            _2984 = _2983.w;
                            uint _2986 = (_2968 * 40u) + 4u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3001 = (_2968 * 40u) + 8u;
                            _3011 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x));
                            uint _3014 = (_2968 * 40u) + 16u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3030 = (_2968 * 40u) + 20u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3045 = (_2968 * 40u) + 24u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3064 = (_2968 * 40u) + 28u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            _3089 = fma(_2341, _3077.z, fma(_2340, _3077.y, _3077.x * _2339)) + _3077.w;
                            _3090 = !((fma(_2341, _3058.z, fma(_2340, _3058.y, _3058.x * _2339)) + _3058.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3090)
                            {
                                float _3117 = _2983.x - _2339;
                                float _3118 = _2983.y - _2340;
                                float _3119 = _2983.z - _2341;
                                float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                                float _3123 = inversesqrt(_3120);
                                float _3124 = _3123 * _3117;
                                float _3125 = _3123 * _3118;
                                float _3126 = _3123 * _3119;
                                float _3130 = 1.0 - (_3120 / (_2984 * _2984));
                                float _4210 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3135 = sqrt(_3120) * _2999.w;
                                float _3137 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                                float _3138 = _3137 * _3137;
                                float _3141 = ((1.0 - _3138) * dot(vec3(_3124, _3125, _3126), vec3(_606, _609, _612))) + _3138;
                                float _3144 = _3135 * _3135;
                                float _3148 = (fma(_2341, _3027.z, fma(_2340, _3027.y, _3027.x * _2339)) + _3027.w) / _3089;
                                float _3149 = (fma(_2341, _3043.z, fma(_2340, _3043.y, _3043.x * _2339)) + _3043.w) / _3089;
                                float _3153 = 1.0 - dot(vec2(_3148, _3149), vec2(_3148, _3149));
                                float _4226 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3155 = _3154 * (((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3131) / ((_3144 * 0.699999988079071044921875) + 1.0));
                                float _3167 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                                float _3168 = 1.0 - _681;
                                float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                                float _3176 = _3175 * _3175;
                                float _3177 = _3176 * _3176;
                                float _3178 = _3124 - _2625;
                                float _3179 = _3125 - _2626;
                                float _3180 = _3126 - _2627;
                                float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                                float _3188 = dot(vec3(_606, _609, _612), vec3((-0.0) - _2625, (-0.0) - _2626, (-0.0) - _2627));
                                float _4237 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3191 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3192 = dot(vec3(_606, _609, _612), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                                float _4248 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3195 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                                float _3200 = _3137 * _3176;
                                float _3201 = _3200 * _3200;
                                float _3207 = ((1.0 - _3201) * dot(vec3(_606, _609, _612), vec3(_3124, _3125, _3126))) + _3201;
                                float _4259 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3209 = 1.0 - _3176;
                                float _3219 = (0.5 / (((_3208 * ((_3191 * _3209) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3176) * _3191))) * _3208;
                                float _4270 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3229 = (_3154 * _3131) * (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) / ((_3199 * _3199) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3229 * _3011.x;
                                frontier_phi_73_pred_1 = _3229 * _3011.y;
                                frontier_phi_73_pred_2 = _3155 * _2999.z;
                                frontier_phi_73_pred_3 = _3155 * _2999.y;
                                frontier_phi_73_pred_4 = _3155 * _2999.x;
                                frontier_phi_73_pred_5 = _3229 * _3011.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3233 = frontier_phi_73_pred;
                            _3234 = frontier_phi_73_pred_1;
                            _3238 = frontier_phi_73_pred_2;
                            _3237 = frontier_phi_73_pred_3;
                            _3236 = frontier_phi_73_pred_4;
                            _3235 = frontier_phi_73_pred_5;
                            _2941 = _3236 + _2954;
                            _2942 = _3237 + _2955;
                            _2943 = _3238 + _2956;
                            _2938 = _3233 + _2951;
                            _2939 = _3234 + _2952;
                            _2940 = _3235 + _2953;
                            if (_2958 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2958;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2941;
                        frontier_phi_67_pred_1 = _2942;
                        frontier_phi_67_pred_2 = _2943;
                        frontier_phi_67_pred_3 = _2940;
                        frontier_phi_67_pred_4 = _2939;
                        frontier_phi_67_pred_5 = _2938;
                    }
                    _2606 = frontier_phi_67_pred;
                    _2608 = frontier_phi_67_pred_1;
                    _2610 = frontier_phi_67_pred_2;
                    _2604 = frontier_phi_67_pred_3;
                    _2602 = frontier_phi_67_pred_4;
                    _2600 = frontier_phi_67_pred_5;
                    uint _2745 = _2744 + 1u;
                    if (_2745 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2738 = _2600;
                        _2739 = _2602;
                        _2740 = _2604;
                        _2741 = _2606;
                        _2742 = _2608;
                        _2743 = _2610;
                        _2744 = _2745;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2608;
                frontier_phi_55_56_ladder_1 = _2610;
                frontier_phi_55_56_ladder_2 = _2606;
                frontier_phi_55_56_ladder_3 = _2604;
                frontier_phi_55_56_ladder_4 = _2602;
                frontier_phi_55_56_ladder_5 = _2600;
            }
            else
            {
                frontier_phi_55_56_ladder = _2494;
                frontier_phi_55_56_ladder_1 = _2496;
                frontier_phi_55_56_ladder_2 = _2492;
                frontier_phi_55_56_ladder_3 = _2490;
                frontier_phi_55_56_ladder_4 = _2488;
                frontier_phi_55_56_ladder_5 = _2486;
            }
            _2599 = frontier_phi_55_56_ladder_5;
            _2601 = frontier_phi_55_56_ladder_4;
            _2603 = frontier_phi_55_56_ladder_3;
            _2605 = frontier_phi_55_56_ladder_2;
            _2607 = frontier_phi_55_56_ladder;
            _2609 = frontier_phi_55_56_ladder_1;
        }
        float _2614 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
        _2398 = (_2614 * _2605) + _1834;
        _2400 = (_2614 * _2607) + _1836;
        _2402 = (_2614 * _2609) + _1838;
        _2404 = ((_2599 * _649) * _2614) + _2179;
        _2406 = ((_2601 * _651) * _2614) + _2181;
        _2408 = ((_2603 * _652) * _2614) + _2183;
    }
    else
    {
        _2398 = _1834;
        _2400 = _1836;
        _2402 = _1838;
        _2404 = _2179;
        _2406 = _2181;
        _2408 = _2183;
    }
    float _4286 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4297 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4308 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    uint _2428 = _222 + 6u;
    float _2436 = _584 / cbSceneParam._m0[86u].x;
    float _2437 = _585 / cbSceneParam._m0[86u].y;
    vec4 _2451 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2436, _2437, (log2((isnan(cbSceneParam._m0[77u].w) ? _518 : (isnan(_518) ? cbSceneParam._m0[77u].w : min(_518, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2453 = _2451.x;
    float _2454 = _2451.y;
    float _2455 = _2451.z;
    float _2456 = _2451.w;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    if (_518 > cbSceneParam._m0[78u].w)
    {
        float _2511 = isnan(_518) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _518 : min(cbSceneParam._m0[80u].w, _518));
        float _2512 = _2511 / _518;
        float _2523 = _2512 * _569;
        float _2524 = _570 * _2512;
        float _2525 = (-0.0) - _2524;
        float _2527 = _2512 * _571;
        float _2529 = (cbSceneParam._m0[77u].w * _2525) / _2511;
        float _2530 = _2529 + cbSceneParam._m0[79u].w;
        float _2531 = cbSceneParam._m0[79u].w - _2524;
        float _2537 = sqrt(((_2523 * _2523) + (_2524 * _2524)) + (_2527 * _2527));
        float _2540 = (1.0 - (cbSceneParam._m0[77u].w / _2511)) * _2537;
        float _2545 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2547 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2700;
        if (abs((_2525 - _2529) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2700 = ((((_2530 > 0.0) ? exp2(_2545 * _2530) : (2.0 - exp2(_2547 * _2530))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2540;
        }
        else
        {
            float _2660 = 1.0 / cbSceneParam._m0[80u].x;
            float _2661 = isnan(_2531) ? _2530 : (isnan(_2530) ? _2531 : max(_2530, _2531));
            float _2662 = isnan(_2531) ? _2530 : (isnan(_2530) ? _2531 : min(_2530, _2531));
            float _2671 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : min(_2661, 0.0));
            float _2672 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : min(_2662, 0.0));
            _2700 = ((abs(_2537 / _2525) * cbSceneParam._m0[80u].y) * ((((_2671 - _2672) * 2.0) - ((exp2(_2545 * (isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0)))) - exp2(_2545 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0))))) * _2660)) - ((exp2(_2547 * _2671) - exp2(_2547 * _2672)) * _2660))) + (_2540 * cbSceneParam._m0[80u].z);
        }
        vec4 _2702 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2436, _2437, 1.0), 0.0);
        float _2711 = exp2((_2700 * (-1.44269502162933349609375)) * (1.0 - _2702.w));
        float _2712 = log2(_2711);
        float _2728 = log2(_2456);
        _2549 = (exp2(_2728 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].x)) * _2702.x) / cbSceneParam._m0[78u].x)) + _2453;
        _2551 = (exp2(_2728 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].y)) * _2702.y) / cbSceneParam._m0[78u].y)) + _2454;
        _2553 = (exp2(_2728 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].z)) * _2702.z) / cbSceneParam._m0[78u].z)) + _2455;
        _2555 = _2711 * _2456;
    }
    else
    {
        _2549 = _2453;
        _2551 = _2454;
        _2553 = _2455;
        _2555 = _2456;
    }
    float _2567 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2568 = _2567 == 3.0;
    float _2569 = log2(_2555);
    float _2576 = exp2(_2569 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2398 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _665))) + ((_2404 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1473)) * cbPerFrame._m0[3u].x));
    float _2577 = exp2(_2569 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2400 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _665))) + ((_2406 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1473)) * cbPerFrame._m0[3u].x));
    float _2578 = exp2(_2569 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2402 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _665))) + ((_2408 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1473)) * cbPerFrame._m0[3u].x));
    float _2587 = (_2567 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2587 * (_2568 ? _2576 : (_2576 + (cbSceneParam._m0[72u].w * _2549)));
    SV_Target.y = _2587 * (_2568 ? _2577 : (_2577 + (cbSceneParam._m0[72u].w * _2551)));
    SV_Target.z = _2587 * (_2568 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2553)));
    SV_Target.w = cbInstanceData._m0[_2428].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2428].w;
}


